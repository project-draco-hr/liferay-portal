{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
  User user=PortalUtil.getSelectedUser(actionRequest);
  Contact contact=user.getContact();
  Calendar birthdayCal=CalendarFactoryUtil.getCalendar();
  birthdayCal.setTime(contact.getBirthday());
  String reminderQueryQuestion=BeanParamUtil.getString(user,request,"reminderQueryQuestion");
  if (reminderQueryQuestion.equals(EnterpriseAdminUtil.CUSTOM_QUESTION)) {
    reminderQueryQuestion=BeanParamUtil.getString(user,request,"reminderQueryCustomQuestion");
  }
  String reminderQueryAnswer=BeanParamUtil.getString(user,request,"reminderQueryAnswer");
  String screenName=BeanParamUtil.getString(user,request,"screenName");
  String emailAddress=BeanParamUtil.getString(user,request,"emailAddress");
  String openId=BeanParamUtil.getString(user,request,"openId");
  String languageId=BeanParamUtil.getString(user,request,"languageId");
  String timeZoneId=BeanParamUtil.getString(user,request,"timeZoneId");
  String greeting=BeanParamUtil.getString(user,request,"greeting");
  String firstName=BeanParamUtil.getString(user,request,"firstName");
  String middleName=BeanParamUtil.getString(user,request,"middleName");
  String lastName=BeanParamUtil.getString(user,request,"lastName");
  int prefixId=BeanParamUtil.getInteger(user,request,"prefixId");
  int suffixId=BeanParamUtil.getInteger(user,request,"suffixId");
  boolean male=BeanParamUtil.getBoolean(user,request,"male",true);
  int birthdayMonth=ParamUtil.getInteger(actionRequest,"birthdayMonth",birthdayCal.get(Calendar.MONTH));
  int birthdayDay=ParamUtil.getInteger(actionRequest,"birthdayDay",birthdayCal.get(Calendar.DATE));
  int birthdayYear=ParamUtil.getInteger(actionRequest,"birthdayYear",birthdayCal.get(Calendar.YEAR));
  String comments=BeanParamUtil.getString(user,request,"comments");
  String smsSn=BeanParamUtil.getString(contact,request,"smsSn");
  String aimSn=BeanParamUtil.getString(contact,request,"aimSn");
  String facebookSn=BeanParamUtil.getString(contact,request,"facebookSn");
  String icqSn=BeanParamUtil.getString(contact,request,"icqSn");
  String jabberSn=BeanParamUtil.getString(contact,request,"jabberSn");
  String msnSn=BeanParamUtil.getString(contact,request,"msnSn");
  String mySpaceSn=BeanParamUtil.getString(contact,request,"mySpaceSn");
  String skypeSn=BeanParamUtil.getString(contact,request,"skypeSn");
  String twitterSn=BeanParamUtil.getString(contact,request,"twitterSn");
  String ymSn=BeanParamUtil.getString(contact,request,"ymSn");
  String jobTitle=BeanParamUtil.getString(user,request,"jobTitle");
  long[] groupIds=getLongArray(actionRequest,"groupsSearchContainerPrimaryKeys");
  long[] organizationIds=getLongArray(actionRequest,"organizationsSearchContainerPrimaryKeys");
  long[] roleIds=getLongArray(actionRequest,"rolesSearchContainerPrimaryKeys");
  List<UserGroupRole> userGroupRoles=EnterpriseAdminUtil.getUserGroupRoles(actionRequest);
  long[] userGroupIds=getLongArray(actionRequest,"userGroupsSearchContainerPrimaryKeys");
  List<Address> addresses=EnterpriseAdminUtil.getAddresses(actionRequest);
  List<EmailAddress> emailAddresses=EnterpriseAdminUtil.getEmailAddresses(actionRequest);
  List<Phone> phones=EnterpriseAdminUtil.getPhones(actionRequest);
  List<Website> websites=EnterpriseAdminUtil.getWebsites(actionRequest);
  List<AnnouncementsDelivery> announcementsDeliveries=getAnnouncementsDeliveries(actionRequest);
  ServiceContext serviceContext=ServiceContextFactory.getInstance(User.class.getName(),actionRequest);
  String oldScreenName=StringPool.BLANK;
  String oldPassword=AdminUtil.getUpdateUserPassword(actionRequest,user.getUserId());
  String newPassword1=ParamUtil.getString(actionRequest,"password1");
  String newPassword2=ParamUtil.getString(actionRequest,"password2");
  boolean passwordReset=ParamUtil.getBoolean(actionRequest,"passwordReset");
  String tempOldScreenName=user.getScreenName();
  user=UserServiceUtil.updateUser(user.getUserId(),oldPassword,newPassword1,newPassword2,passwordReset,reminderQueryQuestion,reminderQueryAnswer,screenName,emailAddress,openId,languageId,timeZoneId,greeting,comments,firstName,middleName,lastName,prefixId,suffixId,male,birthdayMonth,birthdayDay,birthdayYear,smsSn,aimSn,facebookSn,icqSn,jabberSn,msnSn,mySpaceSn,skypeSn,twitterSn,ymSn,jobTitle,groupIds,organizationIds,roleIds,userGroupRoles,userGroupIds,addresses,emailAddresses,phones,websites,announcementsDeliveries,serviceContext);
  boolean deletePortrait=ParamUtil.getBoolean(actionRequest,"deletePortrait");
  if (deletePortrait) {
    UserServiceUtil.deletePortrait(user.getUserId());
  }
  if (!tempOldScreenName.equals(user.getScreenName())) {
    oldScreenName=tempOldScreenName;
  }
  if (user.getUserId() == themeDisplay.getUserId()) {
    HttpSession session=request.getSession();
    session.removeAttribute(Globals.LOCALE_KEY);
    PortletSession portletSession=actionRequest.getPortletSession();
    InvokerPortletImpl.clearResponses(portletSession);
    if (Validator.isNotNull(newPassword1)) {
      portletSession.setAttribute(WebKeys.USER_PASSWORD,newPassword1,PortletSession.APPLICATION_SCOPE);
    }
  }
  long publicLayoutSetPrototypeId=ParamUtil.getLong(actionRequest,"publicLayoutSetPrototypeId");
  long privateLayoutSetPrototypeId=ParamUtil.getLong(actionRequest,"privateLayoutSetPrototypeId");
  CommunitiesUtil.applyLayoutSetPrototypes(user.getGroup(),publicLayoutSetPrototypeId,privateLayoutSetPrototypeId);
  return new Object[]{user,oldScreenName};
}
