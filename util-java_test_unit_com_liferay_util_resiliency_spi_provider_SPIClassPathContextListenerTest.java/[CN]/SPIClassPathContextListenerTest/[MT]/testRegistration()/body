{
  File embeddedLibDir=new File(_CONTEXT_PATH,_EMBEDDED_LIB_DIR_NAME);
  SPIClassPathContextListener spiClassPathContextListener=new SPIClassPathContextListener();
  _mockServletContext.addInitParameter("spiProviderClassName",MockSPIProvider.class.getName());
  spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext));
  AtomicReference<SPIProvider> spiProviderReference=SPIClassPathContextListener.spiProviderReference;
  Assert.assertNotNull(spiProviderReference.get());
  List<SPIProvider> spiProviders=MPIHelperUtil.getSPIProviders();
  Assert.assertEquals(1,spiProviders.size());
  Assert.assertSame(spiProviderReference.get(),spiProviders.get(0));
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(SPIClassPathContextListener.class.getName(),Level.SEVERE);
  try {
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext));
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Duplicate SPI provider " + spiProviderReference.get() + " is already registered in servlet context "+ _mockServletContext.getContextPath(),logRecord.getMessage());
  }
  finally {
    captureHandler.close();
  }
  spiClassPathContextListener.contextDestroyed(new ServletContextEvent(_mockServletContext));
  Assert.assertNull(spiProviderReference.get());
  spiProviders=MPIHelperUtil.getSPIProviders();
  Assert.assertTrue(spiProviders.isEmpty());
  spiClassPathContextListener.contextDestroyed(new ServletContextEvent(_mockServletContext));
  Assert.assertNull(spiProviderReference.get());
  spiProviders=MPIHelperUtil.getSPIProviders();
  Assert.assertTrue(spiProviders.isEmpty());
  _mockServletContext.addInitParameter("spiProviderClassName",MockSPIProvider.class.getName());
  Field field=ReflectionUtil.getDeclaredField(SPIUtil.class,"_spi");
  field.set(null,new MockSPI());
  try {
    spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext));
  }
  finally {
    field.set(null,null);
  }
  spiProviderReference=SPIClassPathContextListener.spiProviderReference;
  Assert.assertNotNull(spiProviderReference.get());
  spiProviders=MPIHelperUtil.getSPIProviders();
  Assert.assertEquals(1,spiProviders.size());
  Assert.assertSame(spiProviderReference.get(),spiProviders.get(0));
  embeddedLibDir.delete();
}
