{
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(SPIClassPathContextListener.class.getName(),Level.SEVERE);
  SPIClassPathContextListener spiClassPathContextListener=new SPIClassPathContextListener();
  spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext));
  Assert.assertSame(StringPool.BLANK,SPIClassPathContextListener.SPI_CLASS_PATH);
  AtomicReference<SPIProvider> spiProviderReference=SPIClassPathContextListener.spiProviderReference;
  Assert.assertNull(spiProviderReference.get());
  Assert.assertEquals(1,logRecords.size());
  LogRecord logRecord=logRecords.get(0);
  Assert.assertEquals("Unable to find embedded lib directory " + _contextPath + _embeddedLibDir,logRecord.getMessage());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(SPIClassPathContextListener.class.getName(),Level.SEVERE);
  File file=new File(_contextPath,_embeddedLibDir);
  file.deleteOnExit();
  file.createNewFile();
  try {
    spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext));
  }
  finally {
    file.delete();
  }
  Assert.assertSame(StringPool.BLANK,SPIClassPathContextListener.SPI_CLASS_PATH);
  Assert.assertNull(spiProviderReference.get());
  Assert.assertEquals(1,logRecords.size());
  logRecord=logRecords.get(0);
  Assert.assertEquals("Unable to find embedded lib directory " + _contextPath + _embeddedLibDir,logRecord.getMessage());
}
