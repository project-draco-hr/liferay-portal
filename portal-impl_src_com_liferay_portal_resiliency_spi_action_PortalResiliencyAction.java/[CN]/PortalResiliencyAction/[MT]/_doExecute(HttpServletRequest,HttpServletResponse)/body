{
  PortletContainer portletContainer=PortletContainerUtil.getPortletContainer();
  Portlet portlet=(Portlet)request.getAttribute(WebKeys.SPI_AGENT_PORTLET);
  portletContainer.preparePortlet(request,portlet);
  SPIAgent.Lifecycle lifecycle=(SPIAgent.Lifecycle)request.getAttribute(WebKeys.SPI_AGENT_LIFECYCLE);
switch (lifecycle) {
case ACTION:
    Layout requestLayout=(Layout)request.getAttribute(WebKeys.LAYOUT);
  String typeSettings=requestLayout.getTypeSettings();
ActionResult actionResult=portletContainer.processAction(request,response,portlet);
String newTypeSettings=requestLayout.getTypeSettings();
if (!newTypeSettings.equals(typeSettings)) {
request.setAttribute(WebKeys.SPI_AGENT_LAYOUT_TYPE_SETTINGS,newTypeSettings);
}
request.setAttribute(WebKeys.SPI_AGENT_ACTION_RESULT,actionResult);
break;
case EVENT:
requestLayout=(Layout)request.getAttribute(WebKeys.LAYOUT);
typeSettings=requestLayout.getTypeSettings();
Layout layout=(Layout)request.getAttribute(WebKeys.SPI_AGENT_LAYOUT);
Event event=(Event)request.getAttribute(WebKeys.SPI_AGENT_EVENT);
List<Event> events=portletContainer.processEvent(request,response,portlet,layout,event);
newTypeSettings=requestLayout.getTypeSettings();
if (!newTypeSettings.equals(typeSettings)) {
request.setAttribute(WebKeys.SPI_AGENT_LAYOUT_TYPE_SETTINGS,newTypeSettings);
}
request.setAttribute(WebKeys.SPI_AGENT_EVENT_RESULT,events);
break;
case RENDER:
portletContainer.render(request,response,portlet);
break;
case RESOURCE:
portletContainer.serveResource(request,response,portlet);
break;
default :
throw new IllegalArgumentException("Unkown lifecycle " + lifecycle);
}
}
