{
  String randomFactor=Integer.toString(1000 + (new SecureRandom()).nextInt(9000));
  String username="SusanJones-" + randomFactor;
  String givenName="Susan";
  String familyName="Jones";
  String password="123$$abc";
  String testGroupName="discuss_general";
  String testGroupId="newgroup-" + randomFactor;
  String testGroupDescription="Discuss";
  String memberUserName="john.doe." + randomFactor;
  String memberFirstName="John";
  String memberLastName="Doe";
  String memberPassword="123$$$abc";
  String ownerUserName="jane.doe." + randomFactor;
  String ownerFirstName="Jane";
  String ownerLastName="Doe";
  String ownerPassword="123$$$abc";
  UserEntry createdUserEntry=createUser(username,givenName,familyName,password);
  String newFamilyName="Smith";
  createdUserEntry.getName().setFamilyName(newFamilyName);
  UserEntry updatedUserEntry=updateUser(username,createdUserEntry);
  String nickname0="Susy-" + randomFactor;
  NicknameEntry createdNicknameEntry0=createNickname(username,nickname0);
  String nickname1="Suse-" + randomFactor;
  NicknameEntry createdNicknameEntry1=createNickname(username,nickname1);
  NicknameFeed retrievedNicknameFeed=retrieveNicknames(username);
  StringBuffer nicknames=new StringBuffer();
  Iterator<NicknameEntry> nicknameIterator=retrievedNicknameFeed.getEntries().iterator();
  while (nicknameIterator.hasNext()) {
    nicknames.append(nicknameIterator.next().getNickname().getName());
    if (nicknameIterator.hasNext()) {
      nicknames.append(", ");
    }
  }
  LOGGER.log(Level.INFO,"User '" + username + "' has the following nicknames: {"+ nicknames.toString()+ "}.");
  deleteNickname(nickname0);
  deleteNickname(nickname1);
  String emailList="Staff-" + randomFactor;
  EmailListEntry createdEmailListEntry=createEmailList(emailList);
  addRecipientToEmailList(username + "@" + domain,emailList);
  addRecipientToEmailList("jane.doe@externaldomain.com",emailList);
  EmailListFeed retrievedEmailListFeed=retrieveEmailLists(username);
  StringBuffer emailLists=new StringBuffer();
  Iterator<EmailListEntry> emailListIterator=retrievedEmailListFeed.getEntries().iterator();
  while (emailListIterator.hasNext()) {
    emailLists.append(emailListIterator.next().getEmailList().getName());
    if (emailListIterator.hasNext()) {
      emailLists.append(", ");
    }
  }
  LOGGER.log(Level.INFO,"User '" + username + "' is in the following emailLists: {"+ emailLists.toString()+ "}.");
  LOGGER.log(Level.INFO,"Creating users for groups sample run");
  createUser(memberUserName,memberFirstName,memberLastName,memberPassword);
  createUser(ownerUserName,ownerFirstName,ownerLastName,ownerPassword);
  GenericFeed groupsFeed=null;
  GenericEntry groupsEntry=null;
  Iterator<GenericEntry> groupsEntryIterator=null;
  LOGGER.log(Level.INFO,"Creating group: " + testGroupId);
  groupsEntry=groupService.createGroup(testGroupId,testGroupName,testGroupDescription,"");
  LOGGER.log(Level.INFO,"Group created with following properties:\n" + groupsEntry.getAllProperties());
  groupsEntry=groupService.addMemberToGroup(testGroupId,memberUserName);
  LOGGER.log(Level.INFO,"Added member: \n" + groupsEntry.getAllProperties());
  groupsEntry=groupService.addOwnerToGroup(testGroupId,ownerUserName);
  LOGGER.log(Level.INFO,"Added owner: \n" + groupsEntry.getAllProperties());
  groupsEntry=groupService.updateGroup(testGroupId,testGroupName,testGroupDescription + "Updated: ","");
  LOGGER.log(Level.INFO,"Updated group description:\n" + groupsEntry.getAllProperties());
  groupsFeed=groupService.retrieveAllMembers(testGroupId);
  groupsEntryIterator=groupsFeed.getEntries().iterator();
  StringBuffer members=new StringBuffer();
  while (groupsEntryIterator.hasNext()) {
    members.append(groupsEntryIterator.next().getProperty(AppsGroupsService.APPS_PROP_GROUP_MEMBER_ID));
    if (groupsEntryIterator.hasNext()) {
      members.append(", ");
    }
  }
  LOGGER.log(Level.INFO,testGroupId + " has these members: " + members.toString());
  groupsFeed=groupService.retreiveGroupOwners(testGroupId);
  groupsEntryIterator=groupsFeed.getEntries().iterator();
  StringBuffer owners=new StringBuffer();
  while (groupsEntryIterator.hasNext()) {
    owners.append(groupsEntryIterator.next().getProperty(AppsGroupsService.APPS_PROP_GROUP_EMAIL));
    if (groupsEntryIterator.hasNext()) {
      owners.append(", ");
    }
  }
  LOGGER.log(Level.INFO,testGroupName + " has these owners: " + owners.toString());
  groupsFeed=groupService.retrieveAllGroups();
  groupsEntryIterator=groupsFeed.getEntries().iterator();
  StringBuffer groups=new StringBuffer();
  while (groupsEntryIterator.hasNext()) {
    groups.append(groupsEntryIterator.next().getProperty(AppsGroupsService.APPS_PROP_GROUP_ID));
    if (groupsEntryIterator.hasNext()) {
      groups.append(", ");
    }
  }
  LOGGER.log(Level.INFO,"Domain has these groups:\n" + groups.toString());
  groupsFeed=groupService.retrieveGroups(memberUserName,true);
  groupsEntryIterator=groupsFeed.getEntries().iterator();
  groups=new StringBuffer();
  while (groupsEntryIterator.hasNext()) {
    groups.append(groupsEntryIterator.next().getProperty(AppsGroupsService.APPS_PROP_GROUP_ID));
    if (groupsEntryIterator.hasNext()) {
      groups.append(", ");
    }
  }
  LOGGER.log(Level.INFO,memberUserName + " is subscribed to these groups:\n" + groups.toString());
  boolean isMember=groupService.isMember(testGroupId,memberUserName);
  LOGGER.log(Level.INFO,memberUserName + " is member of " + testGroupId+ "?: "+ isMember);
  boolean isOwner=groupService.isOwner(testGroupId,ownerUserName);
  LOGGER.log(Level.INFO,ownerUserName + " is owner of " + testGroupId+ "?: "+ isOwner);
  groupService.removeOwnerFromGroup(ownerUserName + "@" + domain,testGroupId);
  LOGGER.log(Level.INFO,"Removing " + ownerUserName + " as owner from group "+ testGroupId);
  groupService.deleteGroup(testGroupId);
  deleteUser(memberUserName);
  deleteUser(ownerUserName);
  deleteEmailList(emailList);
  deleteUser(username);
  String fakeUsername="SusanJones-fake";
  try {
    deleteUser(fakeUsername);
  }
 catch (  AppsForYourDomainException e) {
    if (e.getErrorCode() == AppsForYourDomainErrorCode.EntityDoesNotExist) {
      LOGGER.log(Level.INFO,"Do some post-error processing or logging.");
    }
  }
}
