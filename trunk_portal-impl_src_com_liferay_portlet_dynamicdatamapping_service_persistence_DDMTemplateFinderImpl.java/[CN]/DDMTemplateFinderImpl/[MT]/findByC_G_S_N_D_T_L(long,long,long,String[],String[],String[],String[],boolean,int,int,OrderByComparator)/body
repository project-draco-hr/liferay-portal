{
  names=CustomSQLUtil.keywords(names);
  descriptions=CustomSQLUtil.keywords(descriptions,false);
  types=CustomSQLUtil.keywords(types,false);
  languages=CustomSQLUtil.keywords(languages,false);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_G_S_N_D_T_L);
    if (groupId <= 0) {
      sql=StringUtil.replace(sql,"(groupId = ?) AND","");
    }
    if (structureId <= 0) {
      sql=StringUtil.replace(sql,"(structureId = ?) AND","");
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(name)",StringPool.LIKE,false,names);
    sql=CustomSQLUtil.replaceKeywords(sql,"description",StringPool.LIKE,false,descriptions);
    sql=CustomSQLUtil.replaceKeywords(sql,"type",StringPool.LIKE,false,types);
    sql=CustomSQLUtil.replaceKeywords(sql,"language",StringPool.LIKE,false,languages);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    if (orderByComparator != null) {
      String orderByFields=StringUtil.merge(orderByComparator.getOrderByFields(),StringPool.COMMA);
      sql=StringUtil.replace(sql,"templateId DESC",orderByFields.concat(" DESC"));
    }
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("DDMTemplate",DDMTemplateImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    if (groupId > 0) {
      qPos.add(groupId);
    }
    if (structureId > 0) {
      qPos.add(structureId);
    }
    qPos.add(names,2);
    qPos.add(descriptions,2);
    qPos.add(types,2);
    qPos.add(languages,2);
    return (List<DDMTemplate>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
