{
  boolean deletePortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.DELETE_PORTLET_DATA);
  boolean importPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean importPortletConfiguration=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_CONFIGURATION);
  boolean importPortletConfigurationAll=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL);
  boolean importPortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA);
  boolean importPortletDataAll=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA_ALL);
  String userIdStrategyString=MapUtil.getString(parameterMap,PortletDataHandlerKeys.USER_ID_STRATEGY);
  String rootPortletId=PortletConstants.getRootPortletId(portletId);
  if (importPortletDataAll) {
    importPortletData=true;
  }
 else   if (parameterMap.containsKey(PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + rootPortletId)) {
    importPortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + rootPortletId);
  }
  boolean importPortletArchivedSetups=importPortletConfiguration;
  boolean importPortletSetup=importPortletConfiguration;
  boolean importPortletUserPreferences=importPortletConfiguration;
  if (importPortletConfigurationAll) {
    importPortletArchivedSetups=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS_ALL);
    importPortletSetup=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_SETUP_ALL);
    importPortletUserPreferences=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES_ALL);
  }
 else   if (parameterMap.containsKey(PortletDataHandlerKeys.PORTLET_CONFIGURATION + "_" + rootPortletId)) {
    importPortletConfiguration=importPortletConfiguration && MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_CONFIGURATION + StringPool.UNDERLINE + rootPortletId);
    importPortletArchivedSetups=importPortletConfiguration && MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS + StringPool.UNDERLINE + rootPortletId);
    importPortletSetup=importPortletConfiguration && MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_SETUP + StringPool.UNDERLINE + rootPortletId);
    importPortletUserPreferences=importPortletConfiguration && MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES + StringPool.UNDERLINE + rootPortletId);
  }
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  Layout layout=LayoutLocalServiceUtil.getLayout(plid);
  User user=UserUtil.findByPrimaryKey(userId);
  UserIdStrategy userIdStrategy=getUserIdStrategy(user,userIdStrategyString);
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(file);
  PortletDataContext portletDataContext=PortletDataContextFactoryUtil.createImportPortletDataContext(layout.getCompanyId(),groupId,parameterMap,userIdStrategy,zipReader);
  portletDataContext.setPortetDataContextListener(new PortletDataContextListenerImpl(portletDataContext));
  portletDataContext.setPlid(plid);
  portletDataContext.setPrivateLayout(layout.isPrivateLayout());
  validateFile(portletDataContext,portletId);
  if (BackgroundTaskThreadLocal.hasBackgroundTask()) {
    ManifestSummary manifestSummary=ExportImportHelperUtil.getManifestSummary(userId,groupId,parameterMap,file);
    PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("portlet",portletId,manifestSummary);
  }
  long sourceCompanyId=GetterUtil.getLong(_headerElement.attributeValue("company-id"));
  portletDataContext.setSourceCompanyId(sourceCompanyId);
  long sourceCompanyGroupId=GetterUtil.getLong(_headerElement.attributeValue("company-group-id"));
  portletDataContext.setSourceCompanyGroupId(sourceCompanyGroupId);
  long sourceGroupId=GetterUtil.getLong(_headerElement.attributeValue("group-id"));
  portletDataContext.setSourceGroupId(sourceGroupId);
  long sourceUserPersonalSiteGroupId=GetterUtil.getLong(_headerElement.attributeValue("user-personal-site-group-id"));
  portletDataContext.setSourceUserPersonalSiteGroupId(sourceUserPersonalSiteGroupId);
  if (importPermissions) {
    _permissionImporter.readPortletDataPermissions(portletDataContext);
  }
  readAssetCategories(portletDataContext);
  readAssetTags(portletDataContext);
  readComments(portletDataContext);
  readExpandoTables(portletDataContext);
  readLocks(portletDataContext);
  readRatingsEntries(portletDataContext);
  if (_log.isDebugEnabled()) {
    _log.debug("Deleting portlet data");
  }
  if (deletePortletData) {
    deletePortletData(portletDataContext,portletId,plid);
  }
  Element portletElement=null;
  try {
    portletElement=_rootElement.element("portlet");
    Document portletDocument=SAXReaderUtil.read(portletDataContext.getZipEntryAsString(portletElement.attributeValue("path")));
    portletElement=portletDocument.getRootElement();
  }
 catch (  DocumentException de) {
    throw new SystemException(de);
  }
  setPortletScope(portletDataContext,portletElement);
  Element portletDataElement=portletElement.element("portlet-data");
  boolean importData=importPortletData && (portletDataElement != null);
  try {
    importPortletPreferences(portletDataContext,layout.getCompanyId(),groupId,layout,portletId,portletElement,importPortletSetup,importPortletArchivedSetups,importPortletUserPreferences,true,importData);
    if (importData) {
      if (_log.isDebugEnabled()) {
        _log.debug("Importing portlet data");
      }
      importPortletData(portletDataContext,portletId,plid,portletDataElement);
    }
  }
  finally {
    resetPortletScope(portletDataContext,groupId);
  }
  if (importPermissions) {
    if (_log.isDebugEnabled()) {
      _log.debug("Importing portlet permissions");
    }
    LayoutCache layoutCache=new LayoutCache();
    _permissionImporter.importPortletPermissions(layoutCache,layout.getCompanyId(),groupId,userId,layout,portletElement,portletId);
    if (userId > 0) {
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(User.class);
      indexer.reindex(userId);
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Importing asset links");
  }
  readAssetLinks(portletDataContext);
  _deletionSystemEventImporter.importDeletionSystemEvents(portletDataContext);
  if (_log.isInfoEnabled()) {
    _log.info("Importing portlet takes " + stopWatch.getTime() + " ms");
  }
  zipReader.close();
}
