{
  boolean deletePortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.DELETE_PORTLET_DATA);
  boolean importPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean importUserPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean importPortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA);
  boolean importPortletArchivedSetups=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);
  boolean importPortletSetup=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_SETUP);
  boolean importPortletUserPreferences=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);
  String userIdStrategyString=MapUtil.getString(parameterMap,PortletDataHandlerKeys.USER_ID_STRATEGY);
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  Layout layout=LayoutLocalServiceUtil.getLayout(plid);
  User user=UserUtil.findByPrimaryKey(userId);
  UserIdStrategy userIdStrategy=getUserIdStrategy(user,userIdStrategyString);
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(file);
  PortletDataContext portletDataContext=new PortletDataContextImpl(layout.getCompanyId(),groupId,parameterMap,new HashSet<String>(),userIdStrategy,zipReader);
  portletDataContext.setPortetDataContextListener(new PortletDataContextListenerImpl(portletDataContext));
  portletDataContext.setPlid(plid);
  portletDataContext.setPrivateLayout(layout.isPrivateLayout());
  String xml=portletDataContext.getZipEntryAsString("/manifest.xml");
  Element rootElement=null;
  try {
    Document document=SAXReaderUtil.read(xml);
    rootElement=document.getRootElement();
  }
 catch (  Exception e) {
    throw new LARFileException("Unable to read /manifest.xml");
  }
  Element headerElement=rootElement.element("header");
  int buildNumber=ReleaseInfo.getBuildNumber();
  int importBuildNumber=GetterUtil.getInteger(headerElement.attributeValue("build-number"));
  if (buildNumber != importBuildNumber) {
    throw new LayoutImportException("LAR build number " + importBuildNumber + " does not match "+ "portal build number "+ buildNumber);
  }
  String type=headerElement.attributeValue("type");
  if (!type.equals("portlet")) {
    throw new LARTypeException("Invalid type of LAR file (" + type + ")");
  }
  String rootPortletId=headerElement.attributeValue("root-portlet-id");
  if (!PortletConstants.getRootPortletId(portletId).equals(rootPortletId)) {
    throw new PortletIdException("Invalid portlet id " + rootPortletId);
  }
  long sourceGroupId=GetterUtil.getLong(headerElement.attributeValue("group-id"));
  portletDataContext.setSourceGroupId(sourceGroupId);
  if (importPermissions) {
    _permissionImporter.readPortletDataPermissions(portletDataContext);
  }
  readAssetCategories(portletDataContext);
  readAssetTags(portletDataContext);
  readComments(portletDataContext);
  readExpandoTables(portletDataContext);
  readLocks(portletDataContext);
  readRatingsEntries(portletDataContext);
  if (_log.isDebugEnabled()) {
    _log.debug("Deleting portlet data");
  }
  if (deletePortletData) {
    deletePortletData(portletDataContext,portletId,plid);
  }
  Element portletElement=null;
  try {
    portletElement=rootElement.element("portlet");
    Document portletDocument=SAXReaderUtil.read(portletDataContext.getZipEntryAsString(portletElement.attributeValue("path")));
    portletElement=portletDocument.getRootElement();
  }
 catch (  DocumentException de) {
    throw new SystemException(de);
  }
  setPortletScope(portletDataContext,portletElement);
  try {
    importPortletPreferences(portletDataContext,layout.getCompanyId(),groupId,layout,portletId,portletElement,importPortletSetup,importPortletArchivedSetups,importPortletUserPreferences,true);
    Element portletDataElement=portletElement.element("portlet-data");
    if (importPortletData && (portletDataElement != null)) {
      if (_log.isDebugEnabled()) {
        _log.debug("Importing portlet data");
      }
      importPortletData(portletDataContext,portletId,plid,portletDataElement);
    }
  }
  finally {
    resetPortletScope(portletDataContext,groupId);
  }
  if (importPermissions) {
    if (_log.isDebugEnabled()) {
      _log.debug("Importing portlet permissions");
    }
    LayoutCache layoutCache=new LayoutCache();
    _permissionImporter.importPortletPermissions(layoutCache,layout.getCompanyId(),groupId,userId,layout,portletElement,portletId,importUserPermissions);
    if ((userId > 0) && ((PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 5) || (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6))) {
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(User.class);
      indexer.reindex(userId);
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Importing asset links");
  }
  readAssetLinks(portletDataContext);
  if (_log.isInfoEnabled()) {
    _log.info("Importing portlet takes " + stopWatch.getTime() + " ms");
  }
  zipReader.close();
}
