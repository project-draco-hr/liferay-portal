{
  boolean deletePortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.DELETE_PORTLET_DATA);
  boolean importPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  String userIdStrategyString=MapUtil.getString(parameterMap,PortletDataHandlerKeys.USER_ID_STRATEGY);
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  User user=UserUtil.findByPrimaryKey(userId);
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  if (serviceContext == null) {
    serviceContext=new ServiceContext();
    serviceContext.setCompanyId(user.getCompanyId());
    serviceContext.setSignedIn(false);
    serviceContext.setUserId(userId);
    ServiceContextThreadLocal.pushServiceContext(serviceContext);
  }
  Layout layout=LayoutLocalServiceUtil.getLayout(plid);
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(file);
  validateFile(layout.getCompanyId(),groupId,portletId,zipReader);
  UserIdStrategy userIdStrategy=ExportImportHelperUtil.getUserIdStrategy(userId,userIdStrategyString);
  PortletDataContext portletDataContext=PortletDataContextFactoryUtil.createImportPortletDataContext(layout.getCompanyId(),groupId,parameterMap,userIdStrategy,zipReader);
  portletDataContext.setPlid(plid);
  portletDataContext.setPrivateLayout(layout.isPrivateLayout());
  Map<Long,Long> groupIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(Group.class);
  groupIds.put(portletDataContext.getSourceGroupId(),groupId);
  ManifestSummary manifestSummary=ExportImportHelperUtil.getManifestSummary(portletDataContext);
  if (BackgroundTaskThreadLocal.hasBackgroundTask()) {
    PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("portlet",portletId,manifestSummary);
  }
  portletDataContext.setManifestSummary(manifestSummary);
  Element portletElement=null;
  try {
    Element rootElement=portletDataContext.getImportDataRootElement();
    portletElement=rootElement.element("portlet");
    Document portletDocument=SAXReaderUtil.read(portletDataContext.getZipEntryAsString(portletElement.attributeValue("path")));
    portletElement=portletDocument.getRootElement();
  }
 catch (  DocumentException de) {
    throw new SystemException(de);
  }
  LayoutCache layoutCache=new LayoutCache();
  if (importPermissions) {
    _permissionImporter.checkRoles(layoutCache,layout.getCompanyId(),groupId,userId,portletElement);
    _permissionImporter.readPortletDataPermissions(portletDataContext);
  }
  readAssetTags(portletDataContext);
  readExpandoTables(portletDataContext);
  readLocks(portletDataContext);
  if (_log.isDebugEnabled()) {
    _log.debug("Deleting portlet data");
  }
  if (deletePortletData) {
    deletePortletData(portletDataContext,portletId,plid);
  }
  Element portletDataElement=portletElement.element("portlet-data");
  Map<String,Boolean> importPortletControlsMap=ExportImportHelperUtil.getImportPortletControlsMap(layout.getCompanyId(),portletId,parameterMap,portletDataElement,manifestSummary);
  try {
    importPortletPreferences(portletDataContext,layout.getCompanyId(),groupId,layout,portletId,portletElement,true,importPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS),importPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_DATA),importPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP),importPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_USER_PREFERENCES));
    if (importPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_DATA)) {
      if (_log.isDebugEnabled()) {
        _log.debug("Importing portlet data");
      }
      importPortletData(portletDataContext,portletId,plid,portletDataElement);
    }
  }
  finally {
    resetPortletScope(portletDataContext,groupId);
  }
  if (importPermissions) {
    if (_log.isDebugEnabled()) {
      _log.debug("Importing portlet permissions");
    }
    _permissionImporter.importPortletPermissions(layoutCache,layout.getCompanyId(),groupId,userId,layout,portletElement,portletId);
    if (userId > 0) {
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(User.class);
      indexer.reindex(userId);
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Importing asset links");
  }
  readAssetLinks(portletDataContext);
  _deletionSystemEventImporter.importDeletionSystemEvents(portletDataContext);
  if (_log.isInfoEnabled()) {
    _log.info("Importing portlet takes " + stopWatch.getTime() + " ms");
  }
  boolean importPortletSetup=importPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP);
  if (importPortletSetup) {
    List<Element> serviceElements=null;
    try {
      serviceElements=portletDataContext.getImportDataRootElement().elements("service");
      for (      Element serviceElement : serviceElements) {
        Document serviceDocument=SAXReaderUtil.read(portletDataContext.getZipEntryAsString(serviceElement.attributeValue("path")));
        importServicePortletPreferences(portletDataContext,serviceDocument.getRootElement());
      }
    }
 catch (    DocumentException de) {
      throw new SystemException(de);
    }
  }
  zipReader.close();
}
