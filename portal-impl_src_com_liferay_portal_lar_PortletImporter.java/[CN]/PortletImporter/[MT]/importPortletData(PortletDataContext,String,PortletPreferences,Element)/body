{
  Portlet portlet=PortletLocalServiceUtil.getPortletById(portletDataContext.getCompanyId(),portletId);
  if (portlet == null) {
    if (_log.isDebugEnabled()) {
      _log.debug("Do not import portlet data for " + portletId + " because the portlet does not exist");
    }
    return null;
  }
  PortletDataHandler portletDataHandler=portlet.getPortletDataHandlerInstance();
  if (portletDataHandler == null) {
    if (_log.isDebugEnabled()) {
      _log.debug("Do not import portlet data for " + portletId + " because the portlet does not have a "+ "PortletDataHandler");
    }
    return null;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Importing data for " + portletId);
  }
  long groupId=portletDataContext.getGroupId();
  String scopeType=portletDataContext.getScopeType();
  String scopeLayoutUuid=portletDataContext.getScopeLayoutUuid();
  if (Validator.isNull(scopeType)) {
    Element portletDataParentElement=portletDataElement.getParent();
    scopeLayoutUuid=GetterUtil.getString(portletDataParentElement.attributeValue("scope-layout-uuid"));
  }
  try {
    Group scopeGroup=null;
    if (scopeType.equals("company")) {
      scopeGroup=GroupLocalServiceUtil.getCompanyGroup(portletDataContext.getCompanyId());
    }
 else     if (Validator.isNotNull(scopeLayoutUuid)) {
      Layout scopeLayout=LayoutLocalServiceUtil.getLayoutByUuidAndGroupId(scopeLayoutUuid,groupId);
      if (scopeLayout.hasScopeGroup()) {
        scopeGroup=scopeLayout.getScopeGroup();
      }
 else {
        String name=String.valueOf(scopeLayout.getPlid());
        scopeGroup=GroupLocalServiceUtil.addGroup(portletDataContext.getUserId(null),Layout.class.getName(),scopeLayout.getPlid(),name,null,0,null,true,null);
      }
      Group group=scopeLayout.getGroup();
      if (group.isStaged() && !group.isStagedRemotely()) {
        try {
          Layout oldLayout=LayoutLocalServiceUtil.getLayoutByUuidAndGroupId(scopeLayoutUuid,portletDataContext.getSourceGroupId());
          Group oldScopeGroup=oldLayout.getScopeGroup();
          oldScopeGroup.setLiveGroupId(scopeGroup.getGroupId());
          GroupLocalServiceUtil.updateGroup(oldScopeGroup,true);
        }
 catch (        NoSuchLayoutException nsle) {
          if (_log.isWarnEnabled()) {
            _log.warn(nsle);
          }
        }
      }
      portletDataContext.setScopeGroupId(scopeGroup.getGroupId());
    }
  }
 catch (  PortalException pe) {
  }
  PortletPreferencesImpl portletPreferencesImpl=null;
  if (portletPreferences != null) {
    portletPreferencesImpl=(PortletPreferencesImpl)PortletPreferencesFactoryUtil.fromDefaultXML(portletPreferences.getPreferences());
  }
  String portletData=portletDataContext.getZipEntryAsString(portletDataElement.attributeValue("path"));
  try {
    SocialActivityThreadLocal.setEnabled(false);
    WorkflowThreadLocal.setEnabled(false);
    portletPreferencesImpl=(PortletPreferencesImpl)portletDataHandler.importData(portletDataContext,portletId,portletPreferencesImpl,portletData);
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    portletDataContext.setScopeGroupId(groupId);
    SocialActivityThreadLocal.setEnabled(true);
    WorkflowThreadLocal.setEnabled(true);
  }
  if (portletPreferencesImpl == null) {
    return null;
  }
  return PortletPreferencesFactoryUtil.toXML(portletPreferencesImpl);
}
