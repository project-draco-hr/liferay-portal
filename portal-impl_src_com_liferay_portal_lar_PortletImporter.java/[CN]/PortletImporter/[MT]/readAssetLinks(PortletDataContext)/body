{
  String xml=portletDataContext.getZipEntryAsString(portletDataContext.getSourceRootPath() + "/links.xml");
  if (xml == null) {
    return;
  }
  Document document=SAXReaderUtil.read(xml);
  Element rootElement=document.getRootElement();
  List<Element> assetLinkElements=rootElement.elements("asset-link");
  for (  Element assetLinkElement : assetLinkElements) {
    String sourceUuid=GetterUtil.getString(assetLinkElement.attributeValue("source-uuid"));
    String[] assetEntryUuidArray=StringUtil.split(GetterUtil.getString(assetLinkElement.attributeValue("target-uuids")));
    List<Long> assetEntryIds=new ArrayList<Long>();
    for (    String assetEntryUuid : assetEntryUuidArray) {
      try {
        AssetEntry assetEntry=AssetEntryLocalServiceUtil.getEntry(portletDataContext.getScopeGroupId(),assetEntryUuid);
        assetEntryIds.add(assetEntry.getEntryId());
      }
 catch (      NoSuchEntryException nsee) {
      }
    }
    if (assetEntryIds.isEmpty()) {
      continue;
    }
    long[] assetEntryIdsArray=ArrayUtil.toArray(assetEntryIds.toArray(new Long[assetEntryIds.size()]));
    try {
      AssetEntry assetEntry=AssetEntryLocalServiceUtil.getEntry(portletDataContext.getScopeGroupId(),sourceUuid);
      AssetLinkLocalServiceUtil.updateLinks(assetEntry.getUserId(),assetEntry.getEntryId(),assetEntryIdsArray,AssetLinkConstants.TYPE_RELATED);
    }
 catch (    NoSuchEntryException nsee) {
    }
  }
}
