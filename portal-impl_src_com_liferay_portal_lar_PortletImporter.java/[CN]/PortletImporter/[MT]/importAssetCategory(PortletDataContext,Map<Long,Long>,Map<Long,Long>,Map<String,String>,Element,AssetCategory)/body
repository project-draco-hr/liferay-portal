{
  long userId=portletDataContext.getUserId(assetCategory.getUserUuid());
  long groupId=portletDataContext.getGroupId();
  long assetVocabularyId=MapUtil.getLong(assetVocabularyPKs,assetCategory.getVocabularyId(),assetCategory.getVocabularyId());
  long parentAssetCategoryId=MapUtil.getLong(assetCategoryPKs,assetCategory.getParentCategoryId(),assetCategory.getParentCategoryId());
  if ((parentAssetCategoryId != AssetCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (parentAssetCategoryId == assetCategory.getParentCategoryId())) {
    String path=getAssetCategoryPath(portletDataContext,parentAssetCategoryId);
    AssetCategory parentAssetCategory=(AssetCategory)portletDataContext.getZipEntryAsObject(path);
    Node parentCategoryNode=assetCategoryElement.getParent().selectSingleNode("./category[@path='" + path + "']");
    if (parentCategoryNode != null) {
      importAssetCategory(portletDataContext,assetVocabularyPKs,assetCategoryPKs,assetCategoryUuids,(Element)parentCategoryNode,parentAssetCategory);
      parentAssetCategoryId=MapUtil.getLong(assetCategoryPKs,assetCategory.getParentCategoryId(),assetCategory.getParentCategoryId());
    }
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddGroupPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setCreateDate(assetCategory.getCreateDate());
  serviceContext.setModifiedDate(assetCategory.getModifiedDate());
  serviceContext.setScopeGroupId(portletDataContext.getScopeGroupId());
  boolean global=GetterUtil.getBoolean(assetCategoryElement.attributeValue("global"));
  if (global) {
    Group companyGroup=GroupLocalServiceUtil.getCompanyGroup(portletDataContext.getCompanyId());
    groupId=companyGroup.getGroupId();
  }
  AssetCategory importedAssetCategory=null;
  try {
    if (parentAssetCategoryId != AssetCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) {
      AssetCategoryUtil.findByPrimaryKey(parentAssetCategoryId);
    }
    List<Element> propertyElements=assetCategoryElement.elements("property");
    String[] properties=new String[propertyElements.size()];
    for (int i=0; i < propertyElements.size(); i++) {
      Element propertyElement=propertyElements.get(i);
      String key=propertyElement.attributeValue("key");
      String value=propertyElement.attributeValue("value");
      properties[i]=key.concat(StringPool.COLON).concat(value);
    }
    AssetCategory existingAssetCategory=AssetCategoryUtil.fetchByUUID_G(assetCategory.getUuid(),groupId);
    if (existingAssetCategory == null) {
      String name=getAssetCategoryName(null,portletDataContext.getGroupId(),parentAssetCategoryId,assetCategory.getName(),assetCategory.getVocabularyId(),2);
      serviceContext.setUuid(assetCategory.getUuid());
      if (global) {
        if (AssetPermission.contains(PermissionThreadLocal.getPermissionChecker(),groupId,ActionKeys.ADD_CATEGORY)) {
          serviceContext.setScopeGroupId(groupId);
        }
 else {
          StringBundler sb=new StringBundler(6);
          sb.append("Category ");
          sb.append(assetCategory.getName());
          sb.append(" could not be imported to the Global ");
          sb.append("scope because the user does not have ");
          sb.append("permissions. It will be imported into the ");
          sb.append("current scope.");
          _log.error(sb.toString());
        }
      }
      importedAssetCategory=AssetCategoryLocalServiceUtil.addCategory(userId,parentAssetCategoryId,getAssetCategoryTitleMap(assetCategory,name),assetCategory.getDescriptionMap(),assetVocabularyId,properties,serviceContext);
    }
 else {
      String name=getAssetCategoryName(assetCategory.getUuid(),assetCategory.getGroupId(),parentAssetCategoryId,assetCategory.getName(),assetCategory.getVocabularyId(),2);
      boolean updateAssetCategory=true;
      if (global) {
        PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
        if (permissionChecker.hasPermission(groupId,AssetCategory.class.getName(),existingAssetCategory.getCategoryId(),ActionKeys.UPDATE)) {
          serviceContext.setScopeGroupId(groupId);
        }
 else {
          updateAssetCategory=false;
        }
      }
      if (updateAssetCategory) {
        importedAssetCategory=AssetCategoryLocalServiceUtil.updateCategory(userId,existingAssetCategory.getCategoryId(),parentAssetCategoryId,getAssetCategoryTitleMap(assetCategory,name),assetCategory.getDescriptionMap(),assetVocabularyId,properties,serviceContext);
      }
 else {
        StringBundler sb=new StringBundler(4);
        sb.append("Category ");
        sb.append(existingAssetCategory.getName());
        sb.append(" could not be updated in the Global scope ");
        sb.append("because the user does not have permissions.");
        _log.error(sb.toString());
        return;
      }
    }
    assetCategoryPKs.put(assetCategory.getCategoryId(),importedAssetCategory.getCategoryId());
    assetCategoryUuids.put(assetCategory.getUuid(),importedAssetCategory.getUuid());
    portletDataContext.importPermissions(AssetCategory.class,assetCategory.getCategoryId(),importedAssetCategory.getCategoryId());
  }
 catch (  NoSuchCategoryException nsce) {
    _log.error("Could not find the parent category for category " + assetCategory.getCategoryId());
  }
}
