{
  long userId=portletDataContext.getUserId(assetCategory.getUserUuid());
  long groupId=portletDataContext.getGroupId();
  long assetVocabularyId=MapUtil.getLong(assetVocabularyPKs,assetCategory.getVocabularyId(),assetCategory.getVocabularyId());
  long parentAssetCategoryId=MapUtil.getLong(assetCategoryPKs,assetCategory.getParentCategoryId(),assetCategory.getParentCategoryId());
  if ((parentAssetCategoryId != AssetCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (parentAssetCategoryId == assetCategory.getParentCategoryId())) {
    String path=getAssetCategoryPath(portletDataContext,parentAssetCategoryId);
    AssetCategory parentAssetCategory=(AssetCategory)portletDataContext.getZipEntryAsObject(path);
    Node parentCategoryNode=assetCategoryElement.getParent().selectSingleNode("./category[@path='" + path + "']");
    if (parentCategoryNode != null) {
      importAssetCategory(portletDataContext,assetVocabularyPKs,assetCategoryPKs,assetCategoryUuids,(Element)parentCategoryNode,parentAssetCategory);
      parentAssetCategoryId=MapUtil.getLong(assetCategoryPKs,assetCategory.getParentCategoryId(),assetCategory.getParentCategoryId());
    }
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddGroupPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setCreateDate(assetCategory.getCreateDate());
  serviceContext.setModifiedDate(assetCategory.getModifiedDate());
  serviceContext.setScopeGroupId(portletDataContext.getScopeGroupId());
  AssetCategory importedAssetCategory=null;
  if ((parentAssetCategoryId != AssetCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (AssetCategoryUtil.fetchByPrimaryKey(parentAssetCategoryId) == null)) {
    _log.error("Could not find the parent category for category " + assetCategory.getCategoryId());
    return;
  }
  List<Element> propertyElements=assetCategoryElement.elements("property");
  String[] properties=new String[propertyElements.size()];
  for (int i=0; i < propertyElements.size(); i++) {
    Element propertyElement=propertyElements.get(i);
    String key=propertyElement.attributeValue("key");
    String value=propertyElement.attributeValue("value");
    properties[i]=key.concat(AssetCategoryConstants.CATEGORY_PROPERTY_SEPARATOR).concat(value);
  }
  AssetCategory existingAssetCategory=AssetCategoryUtil.fetchByUUID_G(assetCategory.getUuid(),groupId);
  if (existingAssetCategory == null) {
    existingAssetCategory=AssetCategoryUtil.fetchByUUID_G(assetCategory.getUuid(),portletDataContext.getCompanyGroupId());
  }
  if (existingAssetCategory == null) {
    String name=getAssetCategoryName(null,groupId,parentAssetCategoryId,assetCategory.getName(),assetCategory.getVocabularyId(),2);
    serviceContext.setUuid(assetCategory.getUuid());
    importedAssetCategory=AssetCategoryLocalServiceUtil.addCategory(userId,parentAssetCategoryId,getAssetCategoryTitleMap(groupId,assetCategory,name),assetCategory.getDescriptionMap(),assetVocabularyId,properties,serviceContext);
  }
 else   if (portletDataContext.isCompanyStagedGroupedModel(existingAssetCategory)) {
    return;
  }
 else {
    String name=getAssetCategoryName(assetCategory.getUuid(),groupId,parentAssetCategoryId,assetCategory.getName(),assetCategory.getVocabularyId(),2);
    importedAssetCategory=AssetCategoryLocalServiceUtil.updateCategory(userId,existingAssetCategory.getCategoryId(),parentAssetCategoryId,getAssetCategoryTitleMap(groupId,assetCategory,name),assetCategory.getDescriptionMap(),assetVocabularyId,properties,serviceContext);
  }
  assetCategoryPKs.put(assetCategory.getCategoryId(),importedAssetCategory.getCategoryId());
  assetCategoryUuids.put(assetCategory.getUuid(),importedAssetCategory.getUuid());
  portletDataContext.importPermissions(AssetCategory.class,assetCategory.getCategoryId(),importedAssetCategory.getCategoryId());
}
