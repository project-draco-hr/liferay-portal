{
  Database dbType=DatabaseDetector.determineDatabase(dataSource);
  String provider=PropsValues.JPA_PROVIDER;
  AbstractJpaVendorAdapter adapter=null;
  try {
    Class providerClass=_getProviderClass(provider);
    if (_log.isInfoEnabled()) {
      _log.info("Using provider class " + providerClass.getName());
    }
    adapter=(AbstractJpaVendorAdapter)providerClass.newInstance();
  }
 catch (  Exception ex) {
    _log.error(ex);
    return;
  }
  String dbName=PropsValues.JPA_PROVIDER_DATABASE;
  if ("EclipseLink".equalsIgnoreCase(provider) || "TopLink".equalsIgnoreCase(provider)) {
    if (dbName == null) {
      dbName=_getDatabasePlatform(provider,dbType);
    }
    if (_log.isInfoEnabled()) {
      _log.info("Using database platform " + dbName);
    }
    adapter.setDatabasePlatform(dbName);
  }
 else {
    if (dbName == null) {
      adapter.setDatabase(dbType);
      if (_log.isInfoEnabled()) {
        _log.info("Using database name " + dbType.toString());
      }
    }
 else {
      adapter.setDatabase(Database.valueOf(dbName));
      if (_log.isInfoEnabled()) {
        _log.info("Using database name " + dbName);
      }
    }
  }
  setJpaVendorAdapter(adapter);
  super.setDataSource(dataSource);
}
