{
  Database database=DatabaseDetector.determineDatabase(dataSource);
  AbstractJpaVendorAdapter jpaVendorAdapter=null;
  String provider=PropsValues.JPA_PROVIDER;
  try {
    Class<?> providerClass=getProviderClass(provider);
    if (_log.isInfoEnabled()) {
      _log.info("Using provider class " + providerClass.getName());
    }
    jpaVendorAdapter=(AbstractJpaVendorAdapter)providerClass.newInstance();
  }
 catch (  Exception e) {
    _log.error(e,e);
    return;
  }
  String databasePlatform=PropsValues.JPA_DATABASE_PLATFORM;
  if (StringUtil.equalsIgnoreCase(provider,"eclipselink") || StringUtil.equalsIgnoreCase(provider,"toplink")) {
    if (databasePlatform == null) {
      databasePlatform=getDatabasePlatform(database);
    }
    if (_log.isInfoEnabled()) {
      _log.info("Using database platform " + databasePlatform);
    }
    jpaVendorAdapter.setDatabasePlatform(databasePlatform);
  }
 else {
    if (databasePlatform == null) {
      jpaVendorAdapter.setDatabase(database);
      if (_log.isInfoEnabled()) {
        _log.info("Using database name " + database.toString());
      }
    }
 else {
      jpaVendorAdapter.setDatabase(Database.valueOf(databasePlatform));
      if (_log.isInfoEnabled()) {
        _log.info("Using database name " + databasePlatform);
      }
    }
  }
  setJpaVendorAdapter(jpaVendorAdapter);
  super.setDataSource(dataSource);
}
