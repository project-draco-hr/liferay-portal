{
  Map<String,String[]> parameterMap=portletDataContext.getParameterMap();
  boolean ignoreLastPublishDate=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.IGNORE_LAST_PUBLISH_DATE);
  boolean permissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  if (_log.isDebugEnabled()) {
    _log.debug("Export permissions " + permissions);
  }
  long companyId=portletDataContext.getCompanyId();
  long defaultUserId=_userLocalService.getDefaultUserId(companyId);
  ServiceContext serviceContext=ServiceContextThreadLocal.popServiceContext();
  if (serviceContext == null) {
    serviceContext=new ServiceContext();
  }
  serviceContext.setCompanyId(companyId);
  serviceContext.setSignedIn(false);
  serviceContext.setUserId(defaultUserId);
  serviceContext.setAttribute("exporting",Boolean.TRUE);
  long layoutSetBranchId=MapUtil.getLong(parameterMap,"layoutSetBranchId");
  serviceContext.setAttribute("layoutSetBranchId",layoutSetBranchId);
  ServiceContextThreadLocal.pushServiceContext(serviceContext);
  if (ignoreLastPublishDate) {
    portletDataContext.setEndDate(null);
    portletDataContext.setStartDate(null);
  }
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  Document document=SAXReaderUtil.createDocument();
  Element rootElement=document.addElement("root");
  portletDataContext.setExportDataRootElement(rootElement);
  Element headerElement=rootElement.addElement("header");
  headerElement.addAttribute("available-locales",StringUtil.merge(LanguageUtil.getAvailableLocales(portletDataContext.getScopeGroupId())));
  headerElement.addAttribute("build-number",String.valueOf(ReleaseInfo.getBuildNumber()));
  headerElement.addAttribute("schema-version",ExportImportConstants.EXPORT_IMPORT_SCHEMA_VERSION);
  headerElement.addAttribute("export-date",Time.getRFC822());
  if (portletDataContext.hasDateRange()) {
    headerElement.addAttribute("start-date",String.valueOf(portletDataContext.getStartDate()));
    headerElement.addAttribute("end-date",String.valueOf(portletDataContext.getEndDate()));
  }
  headerElement.addAttribute("company-id",String.valueOf(portletDataContext.getCompanyId()));
  headerElement.addAttribute("company-group-id",String.valueOf(portletDataContext.getCompanyGroupId()));
  headerElement.addAttribute("group-id",String.valueOf(portletDataContext.getGroupId()));
  headerElement.addAttribute("user-personal-site-group-id",String.valueOf(portletDataContext.getUserPersonalSiteGroupId()));
  headerElement.addAttribute("private-layout",String.valueOf(portletDataContext.isPrivateLayout()));
  Group group=_groupLocalService.fetchGroup(portletDataContext.getGroupId());
  String type="layout-set";
  if (group.isLayoutPrototype()) {
    type="layout-prototype";
    LayoutPrototype layoutPrototype=_layoutPrototypeLocalService.getLayoutPrototype(group.getClassPK());
    headerElement.addAttribute("type-uuid",layoutPrototype.getUuid());
  }
 else   if (group.isLayoutSetPrototype()) {
    type="layout-set-prototype";
    LayoutSetPrototype layoutSetPrototype=_layoutSetPrototypeLocalService.getLayoutSetPrototype(group.getClassPK());
    headerElement.addAttribute("type-uuid",layoutSetPrototype.getUuid());
  }
  headerElement.addAttribute("type",type);
  Element missingReferencesElement=rootElement.addElement("missing-references");
  portletDataContext.setMissingReferencesElement(missingReferencesElement);
  _portletExportController.exportAssetLinks(portletDataContext);
  _portletExportController.exportExpandoTables(portletDataContext);
  _portletExportController.exportLocks(portletDataContext);
  _deletionSystemEventExporter.exportDeletionSystemEvents(portletDataContext);
  if (permissions) {
    _permissionExporter.exportPortletDataPermissions(portletDataContext);
  }
  ExportImportHelperUtil.writeManifestSummary(document,portletDataContext.getManifestSummary());
  if (_log.isInfoEnabled()) {
    _log.info("Exporting layouts takes " + stopWatch.getTime() + " ms");
  }
  portletDataContext.addZipEntry("/manifest.xml",document.formattedString());
  ZipWriter zipWriter=portletDataContext.getZipWriter();
  return zipWriter.getFile();
}
