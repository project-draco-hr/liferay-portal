{
  templateId=StringUtil.upperCase(templateId);
  name=StringUtil.lowerCase(name);
  description=StringUtil.lowerCase(description);
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_G_T_S_N_D);
    if (structureIdComparator.equals(StringPool.NOT_EQUAL)) {
      String replaceWith="structureId != ? AND structureId IS NOT NULL";
      if (CustomSQLUtil.isVendorOracle()) {
        replaceWith="structureId IS NOT NULL";
      }
      sql=StringUtil.replace(sql,"structureId = ? [$AND_OR_NULL_CHECK$]",replaceWith);
    }
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    sql=CustomSQLUtil.replaceOrderBy(sql,obc);
    SQLQuery q=session.createSQLQuery(sql);
    q.setCacheable(false);
    q.addEntity("JournalTemplate",JournalTemplateImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    qPos.add(groupId);
    qPos.add(templateId);
    qPos.add(templateId);
    if (structureIdComparator.equals(StringPool.NOT_EQUAL)) {
      if (CustomSQLUtil.isVendorOracle()) {
      }
 else {
        qPos.add(structureId);
      }
    }
 else {
      qPos.add(structureId);
    }
    if (structureIdComparator.equals(StringPool.EQUAL)) {
      qPos.add(structureId);
    }
    qPos.add(name);
    qPos.add(name);
    qPos.add(description);
    qPos.add(description);
    return QueryUtil.list(q,HibernateUtil.getDialect(),begin,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
}
