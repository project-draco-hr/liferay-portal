{
  String requestURI=request.getRequestURI();
  String requestPath=requestURI;
  String contextPath=request.getContextPath();
  if (!contextPath.equals(StringPool.SLASH)) {
    requestPath=requestPath.substring(contextPath.length());
  }
  String realPath=ServletContextUtil.getRealPath(_servletContext,requestPath);
  if (realPath == null) {
    return null;
  }
  realPath=StringUtil.replace(realPath,CharPool.BACK_SLASH,CharPool.SLASH);
  File file=new File(realPath);
  if (!file.exists()) {
    return null;
  }
  request.setAttribute(WebKeys.CSS_REAL_PATH,realPath);
  StringBundler sb=new StringBundler(4);
  sb.append(_tempDir);
  sb.append(requestURI);
  String queryString=request.getQueryString();
  if (queryString != null) {
    sb.append(_QUESTION_SEPARATOR);
    sb.append(sterilizeQueryString(queryString));
  }
  String cacheCommonFileName=sb.toString();
  File cacheContentTypeFile=new File(cacheCommonFileName + "_E_CONTENT_TYPE");
  File cacheDataFile=new File(cacheCommonFileName + "_E_DATA");
  if ((cacheDataFile.exists()) && (cacheDataFile.lastModified() >= file.lastModified())) {
    if (cacheContentTypeFile.exists()) {
      String contentType=FileUtil.read(cacheContentTypeFile);
      response.setContentType(contentType);
    }
    return cacheDataFile;
  }
 else {
    String dynamicContent=null;
    if (realPath.endsWith(_CSS_EXTENSION)) {
      if (_log.isInfoEnabled()) {
        _log.info("Parsing SASS on CSS " + file);
      }
      dynamicContent=parseSass(request,FileUtil.read(file));
      response.setContentType(ContentTypes.TEXT_CSS);
      FileUtil.write(cacheContentTypeFile,ContentTypes.TEXT_CSS);
    }
 else     if (realPath.endsWith(_JSP_EXTENSION)) {
      if (_log.isInfoEnabled()) {
        _log.info("Parsing SASS on JSP " + file);
      }
      StringServletResponse stringResponse=new StringServletResponse(response);
      processFilter(DynamicCSSFilter.class,request,stringResponse,filterChain);
      CacheResponseUtil.setHeaders(response,stringResponse.getHeaders());
      response.setContentType(stringResponse.getContentType());
      dynamicContent=parseSass(request,stringResponse.getString());
      FileUtil.write(cacheContentTypeFile,stringResponse.getContentType());
    }
 else {
      return null;
    }
    FileUtil.write(cacheDataFile,dynamicContent);
    return dynamicContent;
  }
}
