{
  long companyId=PortalUtil.getCompanyId(request);
  if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.CAS_AUTH_ENABLED,PropsValues.CAS_AUTH_ENABLED)) {
    HttpSession session=request.getSession();
    String pathInfo=request.getPathInfo();
    if (pathInfo.indexOf("/portal/logout") != -1) {
      session.invalidate();
      String logoutUrl=PrefsPropsUtil.getString(companyId,PropsKeys.CAS_LOGOUT_URL,PropsValues.CAS_LOGOUT_URL);
      response.sendRedirect(logoutUrl);
      return;
    }
 else {
      String login=(String)session.getAttribute(LOGIN);
      String serviceUrl=PrefsPropsUtil.getString(companyId,PropsKeys.CAS_SERVICE_URL,PropsValues.CAS_SERVICE_URL);
      String serverName=PrefsPropsUtil.getString(companyId,PropsKeys.CAS_SERVER_NAME,PropsValues.CAS_SERVER_NAME);
      if (Validator.isNull(serviceUrl)) {
        serviceUrl=CommonUtils.constructServiceUrl(request,response,serviceUrl,serverName,"ticket",false);
      }
      String ticket=ParamUtil.getString(request,"ticket");
      if (Validator.isNull(ticket)) {
        if (Validator.isNotNull(login)) {
          processFilter(CASFilter.class,request,response,filterChain);
        }
 else {
          String loginUrl=PrefsPropsUtil.getString(companyId,PropsKeys.CAS_LOGIN_URL,PropsValues.CAS_LOGIN_URL);
          loginUrl=HttpUtil.addParameter(loginUrl,"service",serviceUrl);
          response.sendRedirect(loginUrl);
        }
        return;
      }
      TicketValidator ticketValidator=getTicketValidator(companyId);
      Assertion assertion=ticketValidator.validate(ticket,serviceUrl);
      if (assertion != null) {
        AttributePrincipal attributePrincipal=assertion.getPrincipal();
        login=attributePrincipal.getName();
        session.setAttribute(LOGIN,login);
      }
    }
  }
  processFilter(CASFilter.class,request,response,filterChain);
}
