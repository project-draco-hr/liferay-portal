{
  long pk=RandomTestUtil.nextLong();
  ExpandoValue newExpandoValue=_persistence.create(pk);
  newExpandoValue.setCompanyId(RandomTestUtil.nextLong());
  newExpandoValue.setTableId(RandomTestUtil.nextLong());
  newExpandoValue.setColumnId(RandomTestUtil.nextLong());
  newExpandoValue.setRowId(RandomTestUtil.nextLong());
  newExpandoValue.setClassNameId(RandomTestUtil.nextLong());
  newExpandoValue.setClassPK(RandomTestUtil.nextLong());
  newExpandoValue.setData(RandomTestUtil.randomString());
  _models.add(_persistence.update(newExpandoValue));
  ExpandoValue existingExpandoValue=_persistence.findByPrimaryKey(newExpandoValue.getPrimaryKey());
  Assert.assertEquals(existingExpandoValue.getValueId(),newExpandoValue.getValueId());
  Assert.assertEquals(existingExpandoValue.getCompanyId(),newExpandoValue.getCompanyId());
  Assert.assertEquals(existingExpandoValue.getTableId(),newExpandoValue.getTableId());
  Assert.assertEquals(existingExpandoValue.getColumnId(),newExpandoValue.getColumnId());
  Assert.assertEquals(existingExpandoValue.getRowId(),newExpandoValue.getRowId());
  Assert.assertEquals(existingExpandoValue.getClassNameId(),newExpandoValue.getClassNameId());
  Assert.assertEquals(existingExpandoValue.getClassPK(),newExpandoValue.getClassPK());
  Assert.assertEquals(existingExpandoValue.getData(),newExpandoValue.getData());
}
