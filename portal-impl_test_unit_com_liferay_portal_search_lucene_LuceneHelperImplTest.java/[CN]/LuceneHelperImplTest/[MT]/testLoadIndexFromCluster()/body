{
  MockServer mockServer=new MockServer();
  mockServer.start();
  _mockClusterExecutor.reset();
  _mockClusterExecutor.setNodeNumber(2);
  _mockClusterExecutor.setPort(mockServer.getPort());
  _mockClusterExecutor.setPortalInetAddress(mockServer.getInetAddress());
  List<LogRecord> logRecords=_captureHandler.resetLogLevel(Level.INFO);
  _luceneHelperImpl.loadIndexesFromCluster(_COMPANY_ID);
  Assert.assertEquals(2,logRecords.size());
  _assertLogger(logRecords.get(0),"Start loading lucene index files from cluster node",null);
  _assertLogger(logRecords.get(1),"Lucene index files loaded successfully",null);
  Assert.assertArrayEquals(_RESPONSE_MESSAGE,_mockIndexAccessor.getResponseMessage());
  mockServer.join();
  _mockClusterExecutor.reset();
  _mockClusterExecutor.setNodeNumber(3);
  _mockClusterExecutor.setAutoResponse(false);
  logRecords=_captureHandler.resetLogLevel(Level.FINE);
  _luceneHelperImpl.loadIndexesFromCluster(_COMPANY_ID);
  Assert.assertEquals(2,logRecords.size());
  _assertLogger(logRecords.get(0),"Unable to get cluster node response in 10000" + TimeUnit.MILLISECONDS,null);
  _assertLogger(logRecords.get(1),"Unable to get cluster node response in 10000" + TimeUnit.MILLISECONDS,null);
  _mockClusterExecutor.reset();
  _mockClusterExecutor.setNodeNumber(3);
  _mockClusterExecutor.setAutoResponse(false);
  logRecords=_captureHandler.resetLogLevel(Level.INFO);
  _luceneHelperImpl.loadIndexesFromCluster(_COMPANY_ID);
  Assert.assertTrue(logRecords.isEmpty());
  _mockClusterExecutor.reset();
  _mockClusterExecutor.setNodeNumber(2);
  logRecords=_captureHandler.resetLogLevel(Level.FINE);
  _luceneHelperImpl.loadIndexesFromCluster(_COMPANY_ID);
  Assert.assertEquals(1,logRecords.size());
  _assertLogger(logRecords.get(0),"invalid InetSocketAddress",null);
  _mockClusterExecutor.reset();
  _mockClusterExecutor.setNodeNumber(2);
  logRecords=_captureHandler.resetLogLevel(Level.INFO);
  _luceneHelperImpl.loadIndexesFromCluster(_COMPANY_ID);
  Assert.assertTrue(logRecords.isEmpty());
  _mockClusterExecutor.reset();
  _mockClusterExecutor.setNodeNumber(2);
  _mockClusterExecutor.setPort(1024);
  logRecords=_captureHandler.resetLogLevel(Level.FINE);
  _luceneHelperImpl.loadIndexesFromCluster(_COMPANY_ID);
  Assert.assertEquals(2,logRecords.size());
  _assertLogger(logRecords.get(0),"Start loading lucene index files from cluster node",null);
  _assertLogger(logRecords.get(1),"Unable to load index for company " + _COMPANY_ID,SystemException.class);
  _mockClusterExecutor.reset();
  _mockClusterExecutor.setNodeNumber(2);
  _mockClusterExecutor.setInvokeMethodThrowException(true);
  _mockClusterExecutor.setPort(1024);
  logRecords=_captureHandler.resetLogLevel(Level.FINE);
  _luceneHelperImpl.loadIndexesFromCluster(_COMPANY_ID);
  Assert.assertEquals(1,logRecords.size());
  _assertLogger(logRecords.get(0),"Suppress exception caused by remote method invocation",Exception.class);
  _mockClusterExecutor.reset();
  _mockClusterExecutor.setNodeNumber(2);
  _mockClusterExecutor.setInvokeMethodThrowException(true);
  _mockClusterExecutor.setPort(1024);
  logRecords=_captureHandler.resetLogLevel(Level.INFO);
  _luceneHelperImpl.loadIndexesFromCluster(_COMPANY_ID);
  Assert.assertTrue(logRecords.isEmpty());
  _mockClusterExecutor.reset();
  _mockClusterExecutor.setNodeNumber(1);
  logRecords=_captureHandler.resetLogLevel(Level.FINE);
  _luceneHelperImpl.loadIndexesFromCluster(_COMPANY_ID);
  Assert.assertEquals(1,logRecords.size());
  _assertLogger(logRecords.get(0),"Do not load indexes because there is either one portal " + "instance or no portal instances in the cluster",null);
}
