{
  boolean allowBrowseDocuments=GetterUtil.getBoolean(inputEditorTaglibAttributes.get("liferay-ui:input-editor:allowBrowseDocuments"));
  if (!allowBrowseDocuments) {
    return;
  }
  Map<String,String> fileBrowserParamsMap=(Map<String,String>)inputEditorTaglibAttributes.get("liferay-ui:input-editor:fileBrowserParams");
  long wikiPageResourcePrimKey=0;
  if (fileBrowserParamsMap != null) {
    wikiPageResourcePrimKey=GetterUtil.getLong(fileBrowserParamsMap.get("wikiPageResourcePrimKey"));
  }
  if (wikiPageResourcePrimKey == 0) {
    return;
  }
  ItemSelectorCriterion attachmentItemSelectorCriterion=new WikiAttachmentItemSelectorCriterion(wikiPageResourcePrimKey);
  Set<ItemSelectorReturnType> desiredItemSelectorReturnTypes=new HashSet<>();
  desiredItemSelectorReturnTypes.add(DefaultItemSelectorReturnType.URL);
  attachmentItemSelectorCriterion.setDesiredItemSelectorReturnTypes(desiredItemSelectorReturnTypes);
  String name=GetterUtil.getString(inputEditorTaglibAttributes.get("liferay-ui:input-editor:name"));
  boolean inlineEdit=GetterUtil.getBoolean(inputEditorTaglibAttributes.get("liferay-ui:input-editor:inlineEdit"));
  if (!inlineEdit) {
    name=liferayPortletResponse.getNamespace() + name;
  }
  PortletURL itemSelectorURL=_itemSelector.getItemSelectorURL(liferayPortletResponse,name + "selectItem",attachmentItemSelectorCriterion);
  jsonObject.put("filebrowserImageBrowseLinkUrl",itemSelectorURL.toString());
  jsonObject.put("filebrowserImageBrowseUrl",itemSelectorURL.toString());
}
