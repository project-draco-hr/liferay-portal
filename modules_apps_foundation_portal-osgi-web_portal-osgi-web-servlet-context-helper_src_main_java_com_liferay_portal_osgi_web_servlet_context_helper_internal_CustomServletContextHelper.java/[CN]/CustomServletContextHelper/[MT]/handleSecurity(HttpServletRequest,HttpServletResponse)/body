{
  String path=null;
  if (request.getDispatcherType() == DispatcherType.INCLUDE) {
    String pathInfo=(String)request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
    path=pathInfo;
  }
 else {
    path=request.getPathInfo();
  }
  if (path == null) {
    return true;
  }
  if (path.indexOf('/') != 0) {
    path='/' + path;
  }
  if (path.startsWith("/META-INF/") || path.startsWith("/OSGI-INF/") || path.startsWith("/OSGI-OPT/")|| path.startsWith("/WEB-INF/")) {
    return sendErrorForbidden(request,response,path);
  }
  if (ListUtil.isEmpty(_webResourceCollectionDefinitions)) {
    return true;
  }
  for (  WebResourceCollectionDefinition webResourceCollectionDefinition : _webResourceCollectionDefinitions) {
    boolean forbidden=false;
    for (    String urlPattern : webResourceCollectionDefinition.getUrlPatterns()) {
      if (urlPattern.startsWith("*.")) {
        String patternExtension=urlPattern.substring(2);
        if (Validator.isNotNull(patternExtension) && Validator.equals("*",patternExtension)) {
          forbidden=true;
          break;
        }
        int index=path.lastIndexOf(".");
        String pathExtension=path.substring(index + 1);
        if (Validator.equals(patternExtension,pathExtension)) {
          forbidden=true;
          break;
        }
      }
 else       if (urlPattern.endsWith("/*")) {
        if (urlPattern.equals("/*")) {
          forbidden=true;
          break;
        }
        String subpath=path;
        String urlPatternPath=urlPattern.substring(0,urlPattern.indexOf("/*") + 1);
        int index=subpath.lastIndexOf("/");
        if (index > 0) {
          subpath=subpath.substring(0,index + 1);
        }
        if (Validator.equals(urlPatternPath,subpath)) {
          forbidden=true;
          break;
        }
      }
 else       if (Validator.equals(urlPattern,path)) {
        forbidden=true;
        break;
      }
    }
    if (forbidden) {
      List<String> httpMethods=webResourceCollectionDefinition.getHttpMethods();
      if (ListUtil.isNotEmpty(httpMethods) && !httpMethods.contains(request.getMethod())) {
        forbidden=false;
      }
      List<String> httpMethodExceptions=webResourceCollectionDefinition.getHttpMethodExceptions();
      if (ListUtil.isNotEmpty(httpMethodExceptions) && httpMethodExceptions.contains(request.getMethod())) {
        forbidden=false;
      }
    }
    if (forbidden) {
      return sendErrorForbidden(request,response,path);
    }
  }
  return true;
}
