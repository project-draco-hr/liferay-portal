{
  long pk=RandomTestUtil.nextLong();
  MBThread mbThread=_persistence.create(pk);
  mbThread.setUuid(RandomTestUtil.randomString());
  mbThread.setGroupId(RandomTestUtil.nextLong());
  mbThread.setCompanyId(RandomTestUtil.nextLong());
  mbThread.setUserId(RandomTestUtil.nextLong());
  mbThread.setUserName(RandomTestUtil.randomString());
  mbThread.setCreateDate(RandomTestUtil.nextDate());
  mbThread.setModifiedDate(RandomTestUtil.nextDate());
  mbThread.setCategoryId(RandomTestUtil.nextLong());
  mbThread.setRootMessageId(RandomTestUtil.nextLong());
  mbThread.setRootMessageUserId(RandomTestUtil.nextLong());
  mbThread.setMessageCount(RandomTestUtil.nextInt());
  mbThread.setViewCount(RandomTestUtil.nextInt());
  mbThread.setLastPostByUserId(RandomTestUtil.nextLong());
  mbThread.setLastPostDate(RandomTestUtil.nextDate());
  mbThread.setPriority(RandomTestUtil.nextDouble());
  mbThread.setQuestion(RandomTestUtil.randomBoolean());
  mbThread.setStatus(RandomTestUtil.nextInt());
  mbThread.setStatusByUserId(RandomTestUtil.nextLong());
  mbThread.setStatusByUserName(RandomTestUtil.randomString());
  mbThread.setStatusDate(RandomTestUtil.nextDate());
  _models.add(_persistence.update(mbThread));
  return mbThread;
}
