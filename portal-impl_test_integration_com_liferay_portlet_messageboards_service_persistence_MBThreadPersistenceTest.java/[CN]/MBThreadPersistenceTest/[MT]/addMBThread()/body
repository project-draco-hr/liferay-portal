{
  long pk=ServiceTestUtil.nextLong();
  MBThread mbThread=_persistence.create(pk);
  mbThread.setUuid(ServiceTestUtil.randomString());
  mbThread.setGroupId(ServiceTestUtil.nextLong());
  mbThread.setCompanyId(ServiceTestUtil.nextLong());
  mbThread.setUserId(ServiceTestUtil.nextLong());
  mbThread.setUserName(ServiceTestUtil.randomString());
  mbThread.setCreateDate(ServiceTestUtil.nextDate());
  mbThread.setModifiedDate(ServiceTestUtil.nextDate());
  mbThread.setCategoryId(ServiceTestUtil.nextLong());
  mbThread.setRootMessageId(ServiceTestUtil.nextLong());
  mbThread.setRootMessageUserId(ServiceTestUtil.nextLong());
  mbThread.setMessageCount(ServiceTestUtil.nextInt());
  mbThread.setViewCount(ServiceTestUtil.nextInt());
  mbThread.setLastPostByUserId(ServiceTestUtil.nextLong());
  mbThread.setLastPostDate(ServiceTestUtil.nextDate());
  mbThread.setPriority(ServiceTestUtil.nextDouble());
  mbThread.setQuestion(ServiceTestUtil.randomBoolean());
  mbThread.setStatus(ServiceTestUtil.nextInt());
  mbThread.setStatusByUserId(ServiceTestUtil.nextLong());
  mbThread.setStatusByUserName(ServiceTestUtil.randomString());
  mbThread.setStatusDate(ServiceTestUtil.nextDate());
  _persistence.update(mbThread);
  return mbThread;
}
