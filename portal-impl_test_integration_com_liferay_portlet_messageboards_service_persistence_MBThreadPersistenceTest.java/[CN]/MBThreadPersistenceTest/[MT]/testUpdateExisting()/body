{
  long pk=ServiceTestUtil.nextLong();
  MBThread newMBThread=_persistence.create(pk);
  newMBThread.setGroupId(ServiceTestUtil.nextLong());
  newMBThread.setCompanyId(ServiceTestUtil.nextLong());
  newMBThread.setCategoryId(ServiceTestUtil.nextLong());
  newMBThread.setRootMessageId(ServiceTestUtil.nextLong());
  newMBThread.setRootMessageUserId(ServiceTestUtil.nextLong());
  newMBThread.setMessageCount(ServiceTestUtil.nextInt());
  newMBThread.setViewCount(ServiceTestUtil.nextInt());
  newMBThread.setLastPostByUserId(ServiceTestUtil.nextLong());
  newMBThread.setLastPostDate(ServiceTestUtil.nextDate());
  newMBThread.setPriority(ServiceTestUtil.nextDouble());
  newMBThread.setQuestion(ServiceTestUtil.randomBoolean());
  newMBThread.setStatus(ServiceTestUtil.nextInt());
  newMBThread.setStatusByUserId(ServiceTestUtil.nextLong());
  newMBThread.setStatusByUserName(ServiceTestUtil.randomString());
  newMBThread.setStatusDate(ServiceTestUtil.nextDate());
  _persistence.update(newMBThread);
  MBThread existingMBThread=_persistence.findByPrimaryKey(newMBThread.getPrimaryKey());
  Assert.assertEquals(existingMBThread.getThreadId(),newMBThread.getThreadId());
  Assert.assertEquals(existingMBThread.getGroupId(),newMBThread.getGroupId());
  Assert.assertEquals(existingMBThread.getCompanyId(),newMBThread.getCompanyId());
  Assert.assertEquals(existingMBThread.getCategoryId(),newMBThread.getCategoryId());
  Assert.assertEquals(existingMBThread.getRootMessageId(),newMBThread.getRootMessageId());
  Assert.assertEquals(existingMBThread.getRootMessageUserId(),newMBThread.getRootMessageUserId());
  Assert.assertEquals(existingMBThread.getMessageCount(),newMBThread.getMessageCount());
  Assert.assertEquals(existingMBThread.getViewCount(),newMBThread.getViewCount());
  Assert.assertEquals(existingMBThread.getLastPostByUserId(),newMBThread.getLastPostByUserId());
  Assert.assertEquals(Time.getShortTimestamp(existingMBThread.getLastPostDate()),Time.getShortTimestamp(newMBThread.getLastPostDate()));
  AssertUtils.assertEquals(existingMBThread.getPriority(),newMBThread.getPriority());
  Assert.assertEquals(existingMBThread.getQuestion(),newMBThread.getQuestion());
  Assert.assertEquals(existingMBThread.getStatus(),newMBThread.getStatus());
  Assert.assertEquals(existingMBThread.getStatusByUserId(),newMBThread.getStatusByUserId());
  Assert.assertEquals(existingMBThread.getStatusByUserName(),newMBThread.getStatusByUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMBThread.getStatusDate()),Time.getShortTimestamp(newMBThread.getStatusDate()));
}
