{
  if (!DynamicCSSFilter.ENABLED) {
    return content;
  }
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  if (request == null) {
    return content;
  }
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  Theme theme=null;
  if (themeDisplay == null) {
    theme=_getTheme(request);
    if (theme == null) {
      String currentURL=PortalUtil.getCurrentURL(request);
      if (_log.isWarnEnabled()) {
        _log.warn("No theme found for " + currentURL);
      }
      if (PortalUtil.isRightToLeft(request) && !RTLCSSUtil.isExcludedPath(resourcePath)) {
        content=RTLCSSUtil.getRtlCss(content);
      }
      return content;
    }
  }
  String parsedContent=null;
  boolean themeCssFastLoad=_isThemeCssFastLoad(request,themeDisplay);
  URLConnection resourceURLConnection=null;
  URL resourceURL=servletContext.getResource(resourcePath);
  if (resourceURL != null) {
    resourceURLConnection=resourceURL.openConnection();
  }
  URLConnection cacheResourceURLConnection=null;
  URL cacheResourceURL=_getCacheResourceURL(servletContext,request,resourcePath);
  if (cacheResourceURL != null) {
    cacheResourceURLConnection=cacheResourceURL.openConnection();
  }
  if ((themeCssFastLoad || !content.contains(_CSS_IMPORT_BEGIN)) && (cacheResourceURLConnection != null) && (resourceURLConnection != null)&& (cacheResourceURLConnection.getLastModified() >= resourceURLConnection.getLastModified())) {
    parsedContent=StringUtil.read(cacheResourceURLConnection.getInputStream());
    if (_log.isDebugEnabled()) {
      _log.debug("Loading SASS cache from " + cacheResourceURL.getPath() + " takes "+ stopWatch.getTime()+ " ms");
    }
  }
 else {
    content=SassToCssBuilder.parseStaticTokens(content);
    String queryString=request.getQueryString();
    if (!themeCssFastLoad && Validator.isNotNull(queryString)) {
      content=propagateQueryString(content,queryString);
    }
    if (!themeCssFastLoad && _isImportsOnly(content)) {
      parsedContent=content;
    }
 else {
      parsedContent=_parseSass(servletContext,request,themeDisplay,theme,resourcePath,content);
    }
    if (PortalUtil.isRightToLeft(request) && !RTLCSSUtil.isExcludedPath(resourcePath)) {
      parsedContent=RTLCSSUtil.getRtlCss(parsedContent);
      URL rtlCustomResourceURL=_getRtlCustomResourceURL(servletContext,resourcePath);
      if (rtlCustomResourceURL != null) {
        URLConnection rtlCustomResourceURLConnection=rtlCustomResourceURL.openConnection();
        String rtlCustomContent=StringUtil.read(rtlCustomResourceURLConnection.getInputStream());
        String parsedRtlCustomContent=_parseSass(servletContext,request,themeDisplay,theme,resourcePath,rtlCustomContent);
        parsedContent+=parsedRtlCustomContent;
      }
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Parsing SASS for " + resourcePath + " takes "+ stopWatch.getTime()+ " ms");
    }
  }
  if (Validator.isNull(parsedContent)) {
    return content;
  }
  String portalContextPath=PortalUtil.getPathContext();
  String baseURL=portalContextPath;
  String contextPath=ContextPathUtil.getContextPath(servletContext);
  if (!contextPath.equals(portalContextPath)) {
    baseURL=StringPool.SLASH.concat(GetterUtil.getString(servletContext.getServletContextName()));
  }
  if (baseURL.endsWith(StringPool.SLASH)) {
    baseURL=baseURL.substring(0,baseURL.length() - 1);
  }
  parsedContent=StringUtil.replace(parsedContent,new String[]{"@base_url@","@portal_ctx@","@theme_image_path@"},new String[]{baseURL,portalContextPath,_getThemeImagesPath(request,themeDisplay,theme)});
  return parsedContent;
}
