{
  String portalWebDir=PortalUtil.getPortalWebDir();
  String commonSassPath=portalWebDir.concat(_SASS_COMMON_DIR);
  String cssThemePath=_getCssThemePath(servletContext,request,themeDisplay,theme);
  if (ServerDetector.isWebLogic() && !FileUtil.exists(commonSassPath)) {
    int pos=cssThemePath.indexOf("autodeploy/");
    if (pos == -1) {
      if (_log.isWarnEnabled()) {
        _log.warn("Dynamic CSS compilation may not work");
      }
    }
 else {
      commonSassPath=cssThemePath.substring(0,pos + 11) + "ROOT/" + _SASS_COMMON_DIR;
    }
  }
  File sassTempDir=_getSassTempDir(servletContext);
  Object args[]=new Object[]{content,commonSassPath,resourcePath,cssThemePath,sassTempDir.getCanonicalPath(),_log.isDebugEnabled()};
  try {
    content=_scriptingContainer.callMethod(_scriptObject,"process",args,String.class);
  }
 catch (  Exception e) {
    if (e instanceof RaiseException) {
      RaiseException raiseException=(RaiseException)e;
      RubyException exception=raiseException.getException();
      _log.error(String.valueOf(exception.message.toJava(String.class)));
      IRubyObject backtrace=exception.getBacktrace();
      RubyArray rubyArray=(RubyArray)backtrace.toJava(RubyArray.class);
      for (int i=0; i < rubyArray.size(); i++) {
        Object item=rubyArray.get(i);
        _log.error(String.valueOf(item));
      }
    }
 else {
      _log.error(e,e);
    }
  }
  return content;
}
