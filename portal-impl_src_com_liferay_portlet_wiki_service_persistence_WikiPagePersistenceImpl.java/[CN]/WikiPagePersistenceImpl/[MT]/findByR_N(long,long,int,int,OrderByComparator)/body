{
  Object[] finderArgs=new Object[]{new Long(resourcePrimKey),new Long(nodeId),String.valueOf(start),String.valueOf(end),String.valueOf(orderByComparator)};
  List<WikiPage> list=(List<WikiPage>)FinderCacheUtil.getResult(FINDER_PATH_FIND_BY_R_N,finderArgs,this);
  if (list == null) {
    Session session=null;
    try {
      session=openSession();
      StringBundler query=null;
      if (orderByComparator != null) {
        query=new StringBundler(4 + (orderByComparator.getOrderByFields().length * 3));
      }
 else {
        query=new StringBundler(4);
      }
      query.append(_SQL_SELECT_WIKIPAGE_WHERE);
      query.append(_FINDER_COLUMN_R_N_RESOURCEPRIMKEY_2);
      query.append(_FINDER_COLUMN_R_N_NODEID_2);
      if (orderByComparator != null) {
        appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
      }
 else {
        query.append(WikiPageModelImpl.ORDER_BY_JPQL);
      }
      String sql=query.toString();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(resourcePrimKey);
      qPos.add(nodeId);
      list=(List<WikiPage>)QueryUtil.list(q,getDialect(),start,end);
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        list=new ArrayList<WikiPage>();
      }
      cacheResult(list);
      FinderCacheUtil.putResult(FINDER_PATH_FIND_BY_R_N,finderArgs,list);
      closeSession(session);
    }
  }
  return list;
}
