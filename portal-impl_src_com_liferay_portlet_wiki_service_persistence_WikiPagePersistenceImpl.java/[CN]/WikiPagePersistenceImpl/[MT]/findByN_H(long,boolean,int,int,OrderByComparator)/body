{
  FinderPath finderPath=null;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    finderPath=FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_N_H;
    finderArgs=new Object[]{nodeId,head};
  }
 else {
    finderPath=FINDER_PATH_WITH_PAGINATION_FIND_BY_N_H;
    finderArgs=new Object[]{nodeId,head,start,end,orderByComparator};
  }
  List<WikiPage> list=(List<WikiPage>)FinderCacheUtil.getResult(finderPath,finderArgs,this);
  if ((list != null) && !list.isEmpty()) {
    for (    WikiPage wikiPage : list) {
      if ((nodeId != wikiPage.getNodeId()) || (head != wikiPage.getHead())) {
        list=null;
        break;
      }
    }
  }
  if (list == null) {
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(4 + (orderByComparator.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(4);
    }
    query.append(_SQL_SELECT_WIKIPAGE_WHERE);
    query.append(_FINDER_COLUMN_N_H_NODEID_2);
    query.append(_FINDER_COLUMN_N_H_HEAD_2);
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      query.append(WikiPageModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(nodeId);
      qPos.add(head);
      list=(List<WikiPage>)QueryUtil.list(q,getDialect(),start,end);
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        FinderCacheUtil.removeResult(finderPath,finderArgs);
      }
 else {
        cacheResult(list);
        FinderCacheUtil.putResult(finderPath,finderArgs,list);
      }
      closeSession(session);
    }
  }
  return list;
}
