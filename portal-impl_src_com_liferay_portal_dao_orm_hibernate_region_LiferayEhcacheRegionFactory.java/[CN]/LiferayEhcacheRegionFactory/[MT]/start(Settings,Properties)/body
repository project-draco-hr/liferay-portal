{
  try {
    String configurationPath=null;
    if (properties != null) {
      configurationPath=(String)properties.get(NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME);
    }
    if (Validator.isNull(configurationPath)) {
      configurationPath=_DEFAULT_CLUSTERED_EHCACHE_CONFIG_FILE;
    }
    Configuration configuration=null;
    if (Validator.isNull(configurationPath)) {
      configuration=ConfigurationFactory.parseConfiguration();
    }
 else {
      _usingDefault=configurationPath.equals(_DEFAULT_CLUSTERED_EHCACHE_CONFIG_FILE);
      configuration=EhcacheConfigurationUtil.getConfiguration(configurationPath,true,_usingDefault);
    }
    manager=CacheManagerUtil.createCacheManager(configuration);
    boolean skipUpdateCheck=GetterUtil.getBoolean(SystemProperties.get("net.sf.ehcache.skipUpdateCheck"));
    boolean tcActive=GetterUtil.getBoolean(SystemProperties.get("tc.active"));
    if (skipUpdateCheck && !tcActive) {
      FailSafeTimer failSafeTimer=manager.getTimer();
      failSafeTimer.cancel();
      try {
        Field cacheManagerTimerField=ReflectionUtil.getDeclaredField(CacheManager.class,"cacheManagerTimer");
        cacheManagerTimerField.set(manager,null);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    mbeanRegistrationHelper.registerMBean(manager,properties);
    PortalCacheProvider.registerPortalCacheManager(new HibernatePortalCacheManager(manager));
    Registry registry=RegistryUtil.getRegistry();
    _serviceTracker=registry.trackServices(MBeanServer.class,new MBeanServerServiceTrackerCustomizer());
    _serviceTracker.open();
  }
 catch (  net.sf.ehcache.CacheException ce) {
    throw new CacheException(ce);
  }
}
