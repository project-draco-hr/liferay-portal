{
  ResourcePermissionLocalServiceUtil.deleteResourcePermissions(_COMPANY_ID,_NAME,_SCOPE,_PRIM_KEY);
  ResourceActionLocalServiceUtil.addResourceAction(_NAME,_ACTION_ID,0);
  ResourceActionLocalServiceUtil.checkResourceActions();
  Role role=RoleLocalServiceUtil.fetchRole(_COMPANY_ID,RoleConstants.GUEST);
  if (role == null) {
    role=new RoleImpl();
    role.setCompanyId(_COMPANY_ID);
    role.setName(RoleConstants.GUEST);
    RoleLocalServiceUtil.addRole(role);
  }
  AdvisedSupport advisedSupport=ServiceBeanAopProxy.getAdvisedSupport(ResourcePermissionLocalServiceUtil.getService());
  TargetSource targetSource=advisedSupport.getTargetSource();
  localServiceBaseImpl=(ResourcePermissionLocalServiceBaseImpl)targetSource.getTarget();
  originalPersistence=((ResourcePermissionLocalServiceBaseImpl)localServiceBaseImpl).getResourcePermissionPersistence();
  persistenceField="resourcePermissionPersistence";
  ReflectionTestUtil.setFieldValue(localServiceBaseImpl,persistenceField,ProxyUtil.newProxyInstance(ResourcePermissionPersistence.class.getClassLoader(),new Class<?>[]{ResourcePermissionPersistence.class},new SynchronousInvocationHandler()));
  syncMethod=ResourcePermissionPersistence.class.getMethod("update",BaseModel.class);
}
