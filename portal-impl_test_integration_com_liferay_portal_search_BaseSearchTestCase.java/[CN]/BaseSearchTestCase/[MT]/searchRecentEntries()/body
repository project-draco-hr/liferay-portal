{
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel1=getParentBaseModel(group,serviceContext);
  BaseModel<?> parentBaseModel2=getParentBaseModel(group,serviceContext);
  String name=PrincipalThreadLocal.getName();
  try {
    User user1=UserTestUtil.addUser(null,0);
    PrincipalThreadLocal.setName(user1.getUserId());
    baseModel=addBaseModel(parentBaseModel1,true,ServiceTestUtil.randomString(),serviceContext);
    baseModel=addBaseModel(parentBaseModel1,true,ServiceTestUtil.randomString(),serviceContext);
    baseModel=addBaseModel(parentBaseModel2,true,ServiceTestUtil.randomString(),serviceContext);
    User user2=UserTestUtil.addUser(null,0);
    PrincipalThreadLocal.setName(user2.getUserId());
    baseModel=addBaseModel(parentBaseModel1,true,ServiceTestUtil.randomString(),serviceContext);
    baseModel=addBaseModel(parentBaseModel2,true,ServiceTestUtil.randomString(),serviceContext);
  }
  finally {
    PrincipalThreadLocal.setName(name);
  }
  Assert.assertEquals(5,searchGroupEntriesCount(group.getGroupId(),0));
  moveParentBaseModelToTrash((Long)parentBaseModel2.getPrimaryKeyObj());
  Assert.assertEquals(3,searchGroupEntriesCount(group.getGroupId(),0));
  TrashHandler parentTrashHandler=TrashHandlerRegistryUtil.getTrashHandler(getParentBaseModelClassName());
  parentTrashHandler.restoreTrashEntry(TestPropsValues.getUserId(),(Long)parentBaseModel2.getPrimaryKeyObj());
  Assert.assertEquals(5,searchGroupEntriesCount(group.getGroupId(),0));
}
