{
  final Class<?> parameterType=referenceMethod.getParameterTypes()[0];
  final Object proxyForUnavailable=getProxyForUnavailable(target.getClass().getClassLoader(),parameterType);
  try {
    referenceMethod.invoke(target,proxyForUnavailable);
  }
 catch (  Exception e) {
    throw new RuntimeException("Could not set proxy using " + referenceMethod.getName() + " on "+ target,e);
  }
  ServiceTracker serviceTracker=new ServiceTracker(bundleContext,parameterType,null){
    @Override public Object addingService(    ServiceReference reference){
      Object service=super.addingService(reference);
      ServiceReference current=getServiceReference();
      if ((current == null) || (reference.compareTo(current) > 0)) {
        try {
          referenceMethod.invoke(target,service);
        }
 catch (        Exception e) {
          throw new RuntimeException("Could not set service reference using " + referenceMethod.getName() + " on "+ target,e);
        }
      }
      return service;
    }
    @Override public void removedService(    ServiceReference reference,    Object service){
      Object highestService;
      try {
        super.removedService(reference,service);
        ServiceReference serviceReference=getServiceReference();
        highestService=serviceReference == null ? proxyForUnavailable : getService(serviceReference);
      }
 catch (      IllegalStateException ise) {
      }
      try {
        referenceMethod.invoke(target,highestService);
      }
 catch (      Exception e) {
        throw new RuntimeException("Could not set service reference to null on " + target,e);
      }
    }
  }
;
  serviceTracker.open();
  return serviceTracker;
}
