{
  try {
    injectionPoint.reset();
  }
 catch (  Exception e) {
    throw new RuntimeException("Unable to unset " + injectionPoint.getName() + " on "+ target,e);
  }
  ServiceTracker<?,?> serviceTracker=new ServiceTracker<Object,Object>(bundleContext,(Class<Object>)injectionPoint.getParameterType(),null){
    @Override public Object addingService(    ServiceReference<Object> serviceReference){
      Object service=super.addingService(serviceReference);
      ServiceReference<Object> currentServiceReference=getServiceReference();
      if ((currentServiceReference == null) || (serviceReference.compareTo(currentServiceReference) > 0)) {
        try {
          injectionPoint.inject(service);
        }
 catch (        Exception e) {
          throw new RuntimeException("Unable to set service reference using " + injectionPoint.getName() + " on "+ target,e);
        }
      }
      return service;
    }
    @Override public void modifiedService(    ServiceReference<Object> reference,    Object service){
      super.modifiedService(reference,service);
      ServiceReference<Object> currentServiceReference=getServiceReference();
      Object currentService=getService(currentServiceReference);
      try {
        injectionPoint.inject(currentService);
      }
 catch (      Exception e) {
        throw new RuntimeException("Unable to set injection point " + injectionPoint.getName() + " on "+ target,e);
      }
    }
    @Override public void removedService(    ServiceReference<Object> serviceReference,    Object service){
      try {
        super.removedService(serviceReference,service);
        ServiceReference<Object> currentServiceReference=getServiceReference();
        if (currentServiceReference == null) {
          injectionPoint.reset();
        }
 else {
          Object currentService=getService(currentServiceReference);
          injectionPoint.inject(currentService);
        }
      }
 catch (      IllegalStateException ise) {
      }
catch (      Exception e) {
        throw new RuntimeException("Unable to set injection point " + injectionPoint.getName() + " on "+ target,e);
      }
    }
  }
;
  serviceTracker.open();
  return serviceTracker;
}
