{
  Bundle frameworkBundle=(Bundle)ModuleFrameworkUtilAdapter.getFramework();
  BundleContext frameworkBundleContext=frameworkBundle.getBundleContext();
  Bundle[] frameworkBundles=frameworkBundleContext.getBundles();
  Map<Bundle,Map<String,Packages>> bundlesMap=new HashMap<>();
  Map<String,Packages> suitableImportsMap=_createSuitableImportsMap();
  for (  Bundle bundle : frameworkBundles) {
    Dictionary<String,String> headers=bundle.getHeaders();
    String exportPackage=headers.get(Constants.EXPORT_PACKAGE);
    if (exportPackage == null) {
      continue;
    }
    String symbolicName=bundle.getSymbolicName();
    Parameters parameters=OSGiHeader.parseHeader(exportPackage);
    Map<String,Packages> currentBundlePackages=_createCurrentBundlePackagesMap(symbolicName,parameters.asMapMap());
    for (    Map.Entry<Bundle,Map<String,Packages>> entry : bundlesMap.entrySet()) {
      Map<String,Packages> mapBundlePackages=new HashMap<>(entry.getValue());
      Set<String> keySet=mapBundlePackages.keySet();
      keySet.retainAll(currentBundlePackages.keySet());
      if (!mapBundlePackages.isEmpty()) {
        _processDuplicatedPackages(entry.getKey(),mapBundlePackages.values(),currentBundlePackages,suitableImportsMap,symbolicName);
      }
    }
    bundlesMap.put(bundle,currentBundlePackages);
  }
}
