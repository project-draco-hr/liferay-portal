{
  ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(1,1,TestUtil.KEEPALIVE_TIME,TimeUnit.MILLISECONDS,true,1,new DiscardWithCancelPolicy(),Executors.defaultThreadFactory(),new ThreadPoolHandlerAdapter());
  try {
    MarkerBlockingJob markerBlockingJob1=new MarkerBlockingJob(true);
    MarkerBlockingJob markerBlockingJob2=new MarkerBlockingJob(true);
    MarkerBlockingJob markerBlockingJob3=new MarkerBlockingJob();
    Future<?> future1=threadPoolExecutor.submit(markerBlockingJob1);
    markerBlockingJob1.waitUntilBlock();
    Future<?> future2=threadPoolExecutor.submit(markerBlockingJob2);
    Assert.assertEquals(1,threadPoolExecutor.getActiveCount());
    Assert.assertEquals(1,threadPoolExecutor.getPendingTaskCount());
    Future<?> future3=threadPoolExecutor.submit(markerBlockingJob3);
    Assert.assertFalse(markerBlockingJob3.isStarted());
    Assert.assertTrue(future3.isCancelled());
    Assert.assertEquals(1,threadPoolExecutor.getActiveCount());
    Assert.assertEquals(1,threadPoolExecutor.getPendingTaskCount());
    markerBlockingJob1.unBlock();
    markerBlockingJob2.waitUntilBlock();
    Assert.assertTrue(markerBlockingJob1.isEnded());
    Assert.assertTrue(future1.isDone());
    Assert.assertFalse(future1.isCancelled());
    Assert.assertEquals(1,threadPoolExecutor.getActiveCount());
    Assert.assertEquals(0,threadPoolExecutor.getPendingTaskCount());
    markerBlockingJob2.unBlock();
    TestUtil.waitUntilEnded(markerBlockingJob2);
    Assert.assertTrue(future2.isDone());
    Assert.assertFalse(future2.isCancelled());
    Assert.assertEquals(0,threadPoolExecutor.getActiveCount());
    Assert.assertEquals(0,threadPoolExecutor.getPendingTaskCount());
  }
  finally {
    TestUtil.closePool(threadPoolExecutor);
  }
}
