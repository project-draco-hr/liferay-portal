{
  boolean passed=false;
  if (message.startsWith("Passed.")) {
    passed=true;
  }
  String hostname=GetterUtil.getString(System.getProperty("env.USERDOMAIN")).toLowerCase();
  StringBuilder sb=new StringBuilder();
  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n");
  sb.append("<testsuite errors=\"");
  if (passed) {
    sb.append("0");
  }
 else {
    sb.append("1");
  }
  sb.append("\" failures=\"");
  if (passed) {
    sb.append("1");
  }
 else {
    sb.append("0");
  }
  sb.append("\" hostname=\"");
  sb.append(hostname);
  sb.append("\" name=\"");
  sb.append(className);
  sb.append("\" tests=\"1\" time=\"0.0\" timestamp=\"");
  sb.append(System.currentTimeMillis());
  sb.append("\">\n");
  sb.append("\t<properties>\n");
  Properties properties=new SortedProperties(System.getProperties());
  Enumeration<String> keys=(Enumeration<String>)properties.propertyNames();
  while (keys.hasMoreElements()) {
    String key=keys.nextElement();
    String value=properties.getProperty(key);
    sb.append("\t\t<property name=\"");
    sb.append(HtmlUtil.escape(key));
    sb.append("\" value=\"");
    sb.append(HtmlUtil.escape(value));
    sb.append("\" />\n");
  }
  sb.append("\t</properties>\n");
  sb.append("\t<testcase classname=\"");
  sb.append(className);
  sb.append("\" name=\"test\" time=\"0.0\"");
  if (passed) {
    sb.append(" />\n");
  }
 else {
    String failureMessage=HtmlUtil.escape(message.substring(8));
    sb.append(">\n");
    sb.append("\t\t<failure message=\"");
    sb.append(failureMessage);
    sb.append("\" type=\"junit.framework.AssertionFailedError\">\n");
    sb.append(failureMessage);
    sb.append("\t\t</failure>\n");
    sb.append("\t</testcase>\n");
  }
  sb.append("\t<system-out><![CDATA[]]></system-out>\n");
  sb.append("\t<system-err><![CDATA[]]></system-err>\n");
  sb.append("</testsuite>");
  FileUtil.write(outputDir + "/TEST-" + className+ ".xml",sb.toString());
}
