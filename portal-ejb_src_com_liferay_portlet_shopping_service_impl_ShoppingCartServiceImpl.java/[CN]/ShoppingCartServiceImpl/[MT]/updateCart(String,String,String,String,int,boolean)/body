{
  List badItemIds=new ArrayList();
  Map items=getItems(companyId,itemIds);
  Iterator itr=items.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    ShoppingCartItem cartItem=(ShoppingCartItem)entry.getKey();
    Integer count=(Integer)entry.getValue();
    ShoppingItem item=cartItem.getItem();
    int minQuantity=ShoppingUtil.getMinQuantity(item);
    if (minQuantity > 0) {
      if (count.intValue() % minQuantity > 0) {
        badItemIds.add(item.getItemId());
      }
    }
  }
  if (badItemIds.size() > 0) {
    throw new CartMinQuantityException(StringUtil.merge((String[])badItemIds.toArray(new String[0])));
  }
  String[] couponIdsArray=StringUtil.split(couponIds);
  for (int i=0; i < couponIdsArray.length; i++) {
    try {
      ShoppingCoupon coupon=ShoppingCouponUtil.findByPrimaryKey(couponIdsArray[i]);
      if (!coupon.getCompanyId().equals(companyId)) {
        throw new NoSuchCouponException(couponIdsArray[i]);
      }
 else       if (!coupon.isActive()) {
        throw new CouponActiveException(couponIdsArray[i]);
      }
 else       if (!coupon.hasValidStartDate()) {
        throw new CouponStartDateException(couponIdsArray[i]);
      }
 else       if (!coupon.hasValidEndDate()) {
        throw new CouponEndDateException(couponIdsArray[i]);
      }
    }
 catch (    NoSuchCouponException nsce) {
      throw new NoSuchCouponException(couponIdsArray[i]);
    }
    break;
  }
  try {
    return _updateUserCart(getUserId(),itemIds,couponIds,altShipping,insure);
  }
 catch (  PrincipalException pe) {
    return _updateSessionCart(sessionId,companyId,itemIds,couponIds,altShipping,insure);
  }
}
