{
  when(assetRenderer.getSearchSummary((Locale)Matchers.any())).thenReturn(SearchTestUtil.SUMMARY_CONTENT);
  when(assetRenderer.getTitle((Locale)Matchers.any())).thenReturn(SearchTestUtil.SUMMARY_TITLE);
  replace(method(AssetRendererFactoryRegistryUtil.class,"getAssetRendererFactoryByClassName",String.class)).with(new InvocationHandler(){
    @Override public AssetRendererFactory invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      String className=(String)args[0];
      if (_DL_FILE_ENTRY_CLASS_NAME.equals(className)) {
        return null;
      }
      if (SearchTestUtil.ATTACHMENT_OWNER_CLASS_NAME.equals(className)) {
        return assetRendererFactory;
      }
      throw new IllegalArgumentException();
    }
  }
);
  when(assetRendererFactory.getAssetRenderer(SearchTestUtil.ATTACHMENT_OWNER_CLASS_PK)).thenReturn(assetRenderer);
  when(dlAppLocalService.getFileEntry(SearchTestUtil.ENTRY_CLASS_PK)).thenReturn(_fileEntry);
  final Indexer indexer=Mockito.mock(Indexer.class);
  replace(method(IndexerRegistryUtil.class,"getIndexer",String.class)).with(new InvocationHandler(){
    @Override public Indexer invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      String className=(String)args[0];
      if (_DL_FILE_ENTRY_CLASS_NAME.equals(className)) {
        return indexer;
      }
      if (SearchTestUtil.ATTACHMENT_OWNER_CLASS_NAME.equals(className)) {
        return null;
      }
      throw new IllegalArgumentException();
    }
  }
);
  String title=RandomTestUtil.randomString();
  String content=RandomTestUtil.randomString();
  Summary summary=new Summary(null,title,content);
  doReturn(summary).when(indexer).getSummary((Document)Matchers.any(),Matchers.anyString(),(PortletRequest)Matchers.isNull(),(PortletResponse)Matchers.isNull());
  SearchResult searchResult=assertOneSearchResult(SearchTestUtil.createAttachmentDocument(_DL_FILE_ENTRY_CLASS_NAME));
  Assert.assertEquals(SearchTestUtil.ATTACHMENT_OWNER_CLASS_NAME,searchResult.getClassName());
  Assert.assertEquals(SearchTestUtil.ATTACHMENT_OWNER_CLASS_PK,searchResult.getClassPK());
  Summary searchResultSummary=searchResult.getSummary();
  Assert.assertNotSame(summary,searchResultSummary);
  Assert.assertEquals(SearchTestUtil.SUMMARY_CONTENT,searchResultSummary.getContent());
  Assert.assertEquals(SearchTestUtil.SUMMARY_TITLE,searchResultSummary.getTitle());
  List<RelatedSearchResult<FileEntry>> relatedSearchResults=searchResult.getFileEntryRelatedSearchResults();
  Assert.assertEquals(1,relatedSearchResults.size());
  RelatedSearchResult<FileEntry> relatedSearchResult=relatedSearchResults.get(0);
  FileEntry relatedSearchResultFileEntry=relatedSearchResult.getModel();
  Assert.assertSame(_fileEntry,relatedSearchResultFileEntry);
  Summary relatedSearchResultSummary=relatedSearchResult.getSummary();
  Assert.assertSame(summary,relatedSearchResultSummary);
  Assert.assertEquals(content,relatedSearchResultSummary.getContent());
  Assert.assertEquals(title,relatedSearchResultSummary.getTitle());
  assertEmptyCommentRelatedSearchResults(searchResult);
  assertEmptyVersions(searchResult);
}
