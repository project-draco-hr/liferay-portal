{
  try {
    new NettyFabricWorkerStub<String>(0,null,null,null,0);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Channel is null",npe.getMessage());
  }
  try {
    new NettyFabricWorkerStub<String>(0,NettyTestUtil.createEmptyEmbeddedChannel(),null,null,0);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Repository is null",npe.getMessage());
  }
  try {
    new NettyFabricWorkerStub<String>(0,NettyTestUtil.createEmptyEmbeddedChannel(),new MockRepository(),null,0);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Output resource map is null",npe.getMessage());
  }
  Channel channel=NettyTestUtil.createEmptyEmbeddedChannel();
  ChannelFuture channelFuture=channel.closeFuture();
  Assert.assertFalse(channelFuture.isDone());
  NettyFabricWorkerStub<String> nettyFabricWorkerStub=new NettyFabricWorkerStub<String>(0,channel,new MockRepository(),Collections.<Path,Path>emptyMap(),0);
  Assert.assertNotNull(ReflectionTestUtil.getFieldValue(channelFuture,"listeners"));
  NoticeableFuture<String> noticeableFuture=nettyFabricWorkerStub.getProcessNoticeableFuture();
  Assert.assertFalse(noticeableFuture.isDone());
  Assert.assertTrue(channelFuture.cancel(true));
  Assert.assertTrue(noticeableFuture.isCancelled());
  Assert.assertNull(ReflectionTestUtil.getFieldValue(channelFuture,"listeners"));
  channel=NettyTestUtil.createEmptyEmbeddedChannel();
  channelFuture=channel.closeFuture();
  Assert.assertFalse(channelFuture.isDone());
  nettyFabricWorkerStub=new NettyFabricWorkerStub<String>(0,channel,new MockRepository(),Collections.<Path,Path>emptyMap(),0);
  Assert.assertNotNull(ReflectionTestUtil.getFieldValue(channelFuture,"listeners"));
  noticeableFuture=nettyFabricWorkerStub.getProcessNoticeableFuture();
  Assert.assertFalse(noticeableFuture.isDone());
  Assert.assertTrue(noticeableFuture.cancel(true));
  Assert.assertFalse(channelFuture.isDone());
  Assert.assertNull(ReflectionTestUtil.getFieldValue(channelFuture,"listeners"));
}
