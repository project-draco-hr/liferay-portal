{
  PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_REAPER_THREAD_ENABLED,Boolean.FALSE.toString());
  PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_STORAGE_LIFE,String.valueOf(Long.MAX_VALUE));
  final AtomicBoolean throwException=new AtomicBoolean(true);
  final AtomicLong receiptReference=new AtomicLong();
  MockIntraband mockIntraband=new MockIntraband(){
    @Override public Datagram sendSyncDatagram(    RegistrationReference registrationReference,    Datagram datagram) throws IOException {
      if (throwException.get()) {
        throw new IOException("Unable to send");
      }
      try {
        Method depositMailMethod=ReflectionUtil.getDeclaredMethod(MailboxUtil.class,"depositMail",ByteBuffer.class);
        long receipt=(Long)depositMailMethod.invoke(null,datagram.getDataByteBuffer());
        receiptReference.set(receipt);
        byte[] data=new byte[8];
        BigEndianCodec.putLong(data,0,receipt);
        return Datagram.createResponseDatagram(datagram,ByteBuffer.wrap(data));
      }
 catch (      Exception e) {
        throw new IOException(e);
      }
    }
  }
;
  SPIAgentSerializable agentSerializable=new SPIAgentSerializable(_SERVLET_CONTEXT_NAME);
  try {
    agentSerializable.writeTo(new MockRegistrationReference(mockIntraband),new UnsyncByteArrayOutputStream());
    Assert.fail();
  }
 catch (  IOException ioe) {
    Throwable throwable=ioe.getCause();
    Assert.assertSame(MailboxException.class,throwable.getClass());
    throwable=throwable.getCause();
    Assert.assertSame(IOException.class,throwable.getClass());
    Assert.assertEquals("Unable to send",throwable.getMessage());
  }
  throwException.set(false);
  UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
  agentSerializable.writeTo(new MockRegistrationReference(mockIntraband),unsyncByteArrayOutputStream);
  long actualReceipt=BigEndianCodec.getLong(unsyncByteArrayOutputStream.unsafeGetByteArray(),0);
  Assert.assertEquals(receiptReference.get(),actualReceipt);
  try {
    SPIAgentSerializable.readFrom(new UnsyncByteArrayInputStream(new byte[7]));
    Assert.fail();
  }
 catch (  EOFException eofe) {
  }
  byte[] badReceiptData=new byte[8];
  BigEndianCodec.putLong(badReceiptData,0,actualReceipt + 1);
  try {
    SPIAgentSerializable.readFrom(new UnsyncByteArrayInputStream(badReceiptData));
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("No mail with receipt " + (actualReceipt + 1),iae.getMessage());
  }
  ClassLoader incapableClassLoader=new ClassLoader(){
    @Override public Class<?> loadClass(    String name) throws ClassNotFoundException {
      if (name.equals(SPIAgentSerializable.class.getName())) {
        throw new ClassNotFoundException();
      }
      return super.loadClass(name);
    }
  }
;
  ClassLoader oldClassLoader=ClassLoaderPool.getClassLoader(StringPool.BLANK);
  ClassLoaderPool.register(StringPool.BLANK,incapableClassLoader);
  byte[] receiptData=new byte[8];
  BigEndianCodec.putLong(receiptData,0,actualReceipt);
  try {
    SPIAgentSerializable.readFrom(new UnsyncByteArrayInputStream(receiptData));
    Assert.fail();
  }
 catch (  IOException ioe) {
    Throwable throwable=ioe.getCause();
    Assert.assertSame(ClassNotFoundException.class,throwable.getClass());
  }
 finally {
    ClassLoaderPool.register(StringPool.BLANK,oldClassLoader);
  }
  unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
  agentSerializable.writeTo(new MockRegistrationReference(mockIntraband),unsyncByteArrayOutputStream);
  actualReceipt=BigEndianCodec.getLong(unsyncByteArrayOutputStream.unsafeGetByteArray(),0);
  Assert.assertEquals(receiptReference.get(),actualReceipt);
  BigEndianCodec.putLong(receiptData,0,actualReceipt);
  SPIAgentSerializable receivedAgentSerializable=SPIAgentSerializable.readFrom(new UnsyncByteArrayInputStream(receiptData));
  Assert.assertNotNull(receivedAgentSerializable);
  Assert.assertSame(_classLoader,DeserializerAdvice.getContextClassLoader());
}
