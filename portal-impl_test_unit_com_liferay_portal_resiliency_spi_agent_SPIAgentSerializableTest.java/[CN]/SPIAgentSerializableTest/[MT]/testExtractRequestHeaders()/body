{
  final String nullHeaderName="nullHeaderName";
  MockHttpServletRequest mockHttpServletRequest=new MockHttpServletRequest(){
    @Override public Enumeration<String> getHeaders(    String name){
      if (nullHeaderName.equals(name)) {
        return null;
      }
      return super.getHeaders(name);
    }
  }
;
  mockHttpServletRequest.addHeader(HttpHeaders.ACCEPT_ENCODING,"x-zip");
  mockHttpServletRequest.addHeader(HttpHeaders.COOKIE,"a=b");
  mockHttpServletRequest.addHeader(nullHeaderName,nullHeaderName);
  Map<String,List<String>> headers=SPIAgentSerializable.extractRequestHeaders(mockHttpServletRequest);
  Assert.assertTrue(headers.isEmpty());
  String emptyHeaderName="emptyHeaderName";
  mockHttpServletRequest.addHeader(emptyHeaderName,Collections.emptyList());
  String headerName="headerName";
  List<String> headerValues=Arrays.asList("header1","header2");
  mockHttpServletRequest.addHeader(headerName,headerValues);
  headers=SPIAgentSerializable.extractRequestHeaders(mockHttpServletRequest);
  Assert.assertEquals(2,headers.size());
  List<String> emptyHeaders=headers.get(emptyHeaderName.toLowerCase());
  Assert.assertNotNull(emptyHeaders);
  Assert.assertTrue(emptyHeaders.isEmpty());
  List<String> actualHeaderValues=headers.get(headerName.toLowerCase());
  Assert.assertNotNull(actualHeaderValues);
  Assert.assertTrue(headerValues.equals(actualHeaderValues));
}
