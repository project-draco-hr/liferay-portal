{
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(SPIAgentSerializable.class.getName(),Level.OFF);
  try {
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    MockHttpServletRequest mockHttpServletRequest=new MockHttpServletRequest();
    MockHttpSession mockHttpSession=new MockHttpSession();
    String serializeableAttribute="serializeableAttribute";
    mockHttpSession.setAttribute(serializeableAttribute,serializeableAttribute);
    final String servletContextName1="servletContextName1";
    String portletSessionAttributesName1=WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName1);
    mockHttpSession.setAttribute(portletSessionAttributesName1,portletSessionAttributesName1);
    String servletContextName2="servletContextName2";
    String portletSessionAttributesName2=WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName2);
    mockHttpSession.setAttribute(portletSessionAttributesName2,portletSessionAttributesName2);
    final String nonserializableAttribute="nonserializableAttribute";
    mockHttpSession.setAttribute(nonserializableAttribute,new Object(){
      @Override public String toString(){
        return nonserializableAttribute;
      }
    }
);
    Portlet portlet=new PortletImpl(){
      @Override public String getContextName(){
        return servletContextName1;
      }
    }
;
    mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_PORTLET,portlet);
    mockHttpServletRequest.setSession(mockHttpSession);
    Map<String,Serializable> sessionAttributes=SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest);
    Assert.assertTrue(logRecords.isEmpty());
    Assert.assertEquals(2,sessionAttributes.size());
    Assert.assertEquals(serializeableAttribute,sessionAttributes.get(serializeableAttribute));
    Assert.assertEquals(portletSessionAttributesName1,sessionAttributes.get(portletSessionAttributesName1));
    MockHttpSession portletMockHttpSession=new MockHttpSession();
    mockHttpServletRequest.setAttribute(WebKeys.PORTLET_SESSION,portletMockHttpSession);
    sessionAttributes=SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest);
    Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.PORTLET_SESSION));
    Assert.assertTrue(logRecords.isEmpty());
    Assert.assertEquals(2,sessionAttributes.size());
    Assert.assertEquals(serializeableAttribute,sessionAttributes.get(serializeableAttribute));
    Map<String,Serializable> portletSessionAttributes=(Map<String,Serializable>)sessionAttributes.get(portletSessionAttributesName1);
    Assert.assertNotNull(portletSessionAttributes);
    Assert.assertTrue(portletSessionAttributes.isEmpty());
    portletMockHttpSession.setAttribute(serializeableAttribute,serializeableAttribute);
    portletMockHttpSession.setAttribute(nonserializableAttribute,new Object(){
      @Override public String toString(){
        return nonserializableAttribute;
      }
    }
);
    mockHttpServletRequest.setAttribute(WebKeys.PORTLET_SESSION,portletMockHttpSession);
    sessionAttributes=SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest);
    Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.PORTLET_SESSION));
    Assert.assertTrue(logRecords.isEmpty());
    Assert.assertEquals(2,sessionAttributes.size());
    Assert.assertEquals(serializeableAttribute,sessionAttributes.get(serializeableAttribute));
    portletSessionAttributes=(Map<String,Serializable>)sessionAttributes.get(portletSessionAttributesName1);
    Assert.assertNotNull(portletSessionAttributes);
    Assert.assertEquals(1,portletSessionAttributes.size());
    Assert.assertEquals(serializeableAttribute,portletSessionAttributes.get(serializeableAttribute));
    logRecords=captureHandler.resetLogLevel(Level.WARNING);
    sessionAttributes=SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest);
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Nonserializable session attribute name " + nonserializableAttribute + " with value "+ nonserializableAttribute,logRecord.getMessage());
    Assert.assertEquals(2,sessionAttributes.size());
    Assert.assertEquals(serializeableAttribute,sessionAttributes.get(serializeableAttribute));
    Assert.assertEquals(portletSessionAttributesName1,sessionAttributes.get(portletSessionAttributesName1));
    logRecords=captureHandler.resetLogLevel(Level.WARNING);
    mockHttpServletRequest.setAttribute(WebKeys.PORTLET_SESSION,portletMockHttpSession);
    sessionAttributes=SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest);
    Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.PORTLET_SESSION));
    Assert.assertEquals(2,logRecords.size());
    logRecord=logRecords.get(0);
    Assert.assertEquals("Nonserializable session attribute name " + nonserializableAttribute + " with value "+ nonserializableAttribute,logRecord.getMessage());
    logRecord=logRecords.get(1);
    Assert.assertEquals("Nonserializable session attribute name " + nonserializableAttribute + " with value "+ nonserializableAttribute,logRecord.getMessage());
    Assert.assertEquals(2,sessionAttributes.size());
    Assert.assertEquals(serializeableAttribute,sessionAttributes.get(serializeableAttribute));
    portletSessionAttributes=(Map<String,Serializable>)sessionAttributes.get(portletSessionAttributesName1);
    Assert.assertNotNull(portletSessionAttributes);
    Assert.assertEquals(1,portletSessionAttributes.size());
    Assert.assertEquals(serializeableAttribute,portletSessionAttributes.get(serializeableAttribute));
  }
  finally {
    captureHandler.close();
  }
}
