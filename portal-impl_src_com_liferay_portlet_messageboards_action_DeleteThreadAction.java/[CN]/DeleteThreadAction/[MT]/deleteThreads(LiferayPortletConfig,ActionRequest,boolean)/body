{
  long[] deleteThreadIds=null;
  long threadId=ParamUtil.getLong(actionRequest,"threadId");
  if (threadId > 0) {
    deleteThreadIds=new long[]{threadId};
  }
 else {
    deleteThreadIds=StringUtil.split(ParamUtil.getString(actionRequest,"threadIds"),0L);
  }
  String deleteEntryTitle=null;
  for (int i=0; i < deleteThreadIds.length; i++) {
    long deleteThreadId=deleteThreadIds[i];
    if (moveToTrash) {
      MBThread thread=MBThreadServiceUtil.moveThreadToTrash(deleteThreadId);
      if (i == 0) {
        MBMessage message=MBMessageLocalServiceUtil.getMessage(thread.getRootMessageId());
        deleteEntryTitle=message.getSubject();
      }
    }
 else {
      MBThreadServiceUtil.deleteThread(deleteThreadId);
    }
  }
  if (moveToTrash && (deleteThreadIds.length > 0)) {
    Map<String,String[]> data=new HashMap<String,String[]>();
    data.put("deleteEntryClassName",new String[]{MBThread.class.getName()});
    if (Validator.isNotNull(deleteEntryTitle)) {
      data.put("deleteEntryTitle",new String[]{deleteEntryTitle});
    }
    data.put("restoreThreadIds",ArrayUtil.toStringArray(deleteThreadIds));
    SessionMessages.add(actionRequest,liferayPortletConfig.getPortletId() + SessionMessages.KEY_SUFFIX_DELETE_SUCCESS_DATA,data);
    hideDefaultSuccessMessage(liferayPortletConfig,actionRequest);
  }
}
