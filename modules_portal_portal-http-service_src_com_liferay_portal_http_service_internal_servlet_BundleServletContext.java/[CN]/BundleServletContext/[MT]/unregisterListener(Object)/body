{
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  boolean enabled=DependencyManagementThreadLocal.isEnabled();
  try {
    currentThread.setContextClassLoader(getClassLoader());
    DependencyManagementThreadLocal.setEnabled(false);
    if (listener instanceof HttpSessionActivationListener) {
      PortletSessionListenerManager.removeHttpSessionActivationListener((HttpSessionActivationListener)listener);
    }
    if (listener instanceof HttpSessionAttributeListener) {
      PortletSessionListenerManager.removeHttpSessionAttributeListener((HttpSessionAttributeListener)listener);
    }
    if (listener instanceof HttpSessionBindingListener) {
      PortletSessionListenerManager.removeHttpSessionBindingListener((HttpSessionBindingListener)listener);
    }
    if (listener instanceof HttpSessionListener) {
      PortletSessionListenerManager.removeHttpSessionListener((HttpSessionListener)listener);
    }
    if (listener instanceof ServletContextAttributeListener) {
      _servletContextAttributeListeners.remove(listener);
    }
    if (listener instanceof ServletContextListener) {
      if (_servletContextListeners.contains(listener)) {
        _servletContextListeners.remove(listener);
        ServletContextListener servletContextListener=(ServletContextListener)listener;
        ServletContextEvent servletContextEvent=new ServletContextEvent(this);
        servletContextListener.contextDestroyed(servletContextEvent);
      }
    }
    if (listener instanceof ServletRequestAttributeListener) {
      _servletRequestAttributeListeners.remove(listener);
    }
    if (listener instanceof ServletRequestListener) {
      _servletRequestListeners.remove(listener);
    }
  }
  finally {
    DependencyManagementThreadLocal.setEnabled(enabled);
    currentThread.setContextClassLoader(contextClassLoader);
  }
}
