{
  String[] pathChunks=StringUtil.split(path.substring(1),StringPool.SLASH);
  int low=0;
  int high=_restActionConfigSets.size() - 1;
  int pathMacroIndex=0;
  for (int depth=0; depth < pathChunks.length; depth++) {
    String pathChunk=pathChunks[depth];
    _pathChunksBinarySearch._depth=depth;
    int nextLow=_pathChunksBinarySearch.findFirst(pathChunk,low,high);
    if (nextLow < 0) {
      int pathChunkndex=_getPathChunkIndex(pathChunk,depth,pathMacroIndex,low,high);
      if (pathChunkndex == -1) {
        low=nextLow;
        break;
      }
 else {
        pathMacroIndex++;
        low=pathChunkndex;
        high=pathChunkndex;
      }
    }
 else {
      low=nextLow;
      if (high > low) {
        high=_pathChunksBinarySearch.findLast(pathChunk,low,high);
      }
    }
  }
  if (low < 0) {
    return null;
  }
  RestActionConfigSet restActionConfigSet=_restActionConfigSets.get(low);
  RestActionConfig restActionConfig=restActionConfigSet.getRestActionConfig(method);
  if (restActionConfig == null) {
    return null;
  }
  String[] restActionConfigSetPathChunks=restActionConfigSet.getPathChunks();
  if (restActionConfigSetPathChunks.length != pathChunks.length) {
    return null;
  }
  return new RestActionImpl(restActionConfig,pathChunks);
}
