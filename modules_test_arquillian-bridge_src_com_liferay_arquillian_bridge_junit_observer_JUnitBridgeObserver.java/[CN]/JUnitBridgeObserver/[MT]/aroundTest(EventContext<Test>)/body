{
  Test test=eventContext.getEvent();
  Statement statement=new InvokeMethod(null,test.getTestInstance()){
    @Override public void evaluate(){
      eventContext.proceed();
    }
  }
;
  TestClass arquillianTestClass=test.getTestClass();
  Class<?> clazz=arquillianTestClass.getJavaClass();
  org.junit.runners.model.TestClass junitTestClass=new org.junit.runners.model.TestClass(clazz);
  Object target=test.getTestInstance();
  statement=withBefores(statement,Before.class,junitTestClass,target);
  statement=withAfters(statement,After.class,junitTestClass,target);
  Method method=test.getTestMethod();
  statement=withRules(statement,Rule.class,junitTestClass,target,Description.createTestDescription(clazz,method.getName()));
  statement=withBefores(statement,BeforeClass.class,junitTestClass,null);
  statement=withAfters(statement,AfterClass.class,junitTestClass,null);
  statement=withRules(statement,ClassRule.class,junitTestClass,null,Description.createSuiteDescription(clazz));
  statement.evaluate();
}
