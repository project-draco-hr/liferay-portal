{
  Queue<Object> queue=new LinkedList<Object>();
  queue.offer(object);
  Set<Object> visitedObjects=Collections.newSetFromMap(new IdentityHashMap<Object,Boolean>());
  while ((object=queue.poll()) != null) {
    if (!visitedObjects.add(object)) {
      continue;
    }
    Class<?> clazz=object.getClass();
    if (clazz.isArray()) {
      clazz=clazz.getComponentType();
      if (clazz.isPrimitive()) {
        continue;
      }
      for (int i=0; i < Array.getLength(object); i++) {
        Object element=Array.get(object,i);
        if (element != null) {
          queue.offer(element);
        }
      }
      continue;
    }
    while (clazz != null) {
      for (      Field field : clazz.getDeclaredFields()) {
        if (Modifier.isStatic(field.getModifiers())) {
          continue;
        }
        field.setAccessible(true);
        try {
          Object value=visitor.visit(field,object);
          Class<?> type=field.getType();
          if ((value != null) && !type.isPrimitive()) {
            queue.offer(value);
          }
        }
 catch (        Exception e) {
          ReflectionUtil.throwException(e);
        }
      }
      clazz=clazz.getSuperclass();
    }
  }
}
