{
  long calendarBookingId=ParamUtil.getLong(actionRequest,"calendarBookingId");
  long calendarId=ParamUtil.getLong(actionRequest,"calendarId");
  Calendar calendar=_calendarService.getCalendar(calendarId);
  long[] childCalendarIds=ParamUtil.getLongValues(actionRequest,"childCalendarIds");
  Map<Locale,String> titleMap=LocalizationUtil.getLocalizationMap(actionRequest,"title");
  Map<Locale,String> descriptionMap=LocalizationUtil.getLocalizationMap(actionRequest,"description");
  String location=ParamUtil.getString(actionRequest,"location");
  java.util.Calendar startTimeJCalendar=getJCalendar(actionRequest,"startTime");
  java.util.Calendar endTimeJCalendar=getJCalendar(actionRequest,"endTime");
  boolean allDay=ParamUtil.getBoolean(actionRequest,"allDay");
  String recurrence=getRecurrence(actionRequest,calendar.getTimeZone());
  long[] reminders=getReminders(actionRequest);
  String[] remindersType=getRemindersType(actionRequest);
  ServiceContext serviceContext=ServiceContextFactory.getInstance(CalendarBooking.class.getName(),actionRequest);
  CalendarBooking calendarBooking=null;
  if (calendarBookingId <= 0) {
    calendarBooking=_calendarBookingService.addCalendarBooking(calendarId,childCalendarIds,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,titleMap,descriptionMap,location,startTimeJCalendar.getTimeInMillis(),endTimeJCalendar.getTimeInMillis(),allDay,recurrence,reminders[0],remindersType[0],reminders[1],remindersType[1],serviceContext);
  }
 else {
    int instanceIndex=ParamUtil.getInteger(actionRequest,"instanceIndex");
    boolean updateCalendarBookingInstance=ParamUtil.getBoolean(actionRequest,"updateCalendarBookingInstance");
    if (updateCalendarBookingInstance) {
      calendarBooking=_calendarBookingLocalService.getCalendarBooking(calendarBookingId);
      boolean allFollowing=ParamUtil.getBoolean(actionRequest,"allFollowing");
      calendarBooking=_calendarBookingService.updateCalendarBookingInstance(calendarBookingId,instanceIndex,calendarId,childCalendarIds,titleMap,descriptionMap,location,startTimeJCalendar.getTimeInMillis(),endTimeJCalendar.getTimeInMillis(),allDay,recurrence,allFollowing,reminders[0],remindersType[0],reminders[1],remindersType[1],serviceContext);
    }
 else {
      calendarBooking=_calendarBookingService.getCalendarBookingInstance(calendarBookingId,instanceIndex);
      long duration=(endTimeJCalendar.getTimeInMillis() - startTimeJCalendar.getTimeInMillis());
      long offset=(startTimeJCalendar.getTimeInMillis() - calendarBooking.getStartTime());
      calendarBooking=_calendarBookingService.getNewStartTimeAndDurationCalendarBooking(calendarBookingId,offset,duration);
      calendarBooking=_calendarBookingService.updateCalendarBooking(calendarBookingId,calendarId,childCalendarIds,titleMap,descriptionMap,location,calendarBooking.getStartTime(),calendarBooking.getEndTime(),allDay,recurrence,reminders[0],remindersType[0],reminders[1],remindersType[1],serviceContext);
    }
  }
  String redirect=getRedirect(actionRequest,actionResponse);
  redirect=HttpUtil.setParameter(redirect,actionResponse.getNamespace() + "calendarBookingId",calendarBooking.getCalendarBookingId());
  actionRequest.setAttribute(WebKeys.REDIRECT,redirect);
}
