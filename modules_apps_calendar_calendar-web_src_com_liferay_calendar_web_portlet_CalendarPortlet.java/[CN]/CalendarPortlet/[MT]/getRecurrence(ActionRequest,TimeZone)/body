{
  boolean repeat=ParamUtil.getBoolean(actionRequest,"repeat");
  if (!repeat) {
    return null;
  }
  Recurrence recurrence=new Recurrence();
  int count=0;
  String ends=ParamUtil.getString(actionRequest,"ends");
  if (ends.equals("after")) {
    count=ParamUtil.getInteger(actionRequest,"count");
  }
  recurrence.setCount(count);
  Frequency frequency=Frequency.parse(ParamUtil.getString(actionRequest,"frequency"));
  recurrence.setFrequency(frequency);
  int interval=ParamUtil.getInteger(actionRequest,"interval");
  recurrence.setInterval(interval);
  if (ends.equals("on")) {
    java.util.Calendar untilJCalendar=getJCalendar(actionRequest,"untilDate");
    java.util.Calendar startTimeJCalendar=getJCalendar(actionRequest,"startTime");
    untilJCalendar=JCalendarUtil.mergeJCalendar(untilJCalendar,startTimeJCalendar,getTimeZone(actionRequest));
    untilJCalendar=JCalendarUtil.getJCalendar(untilJCalendar,calendarTimeZone);
    recurrence.setUntilJCalendar(untilJCalendar);
  }
  List<PositionalWeekday> positionalWeekdays=new ArrayList<>();
  if (frequency == Frequency.WEEKLY) {
    for (    Weekday weekday : Weekday.values()) {
      boolean checked=ParamUtil.getBoolean(actionRequest,weekday.getValue());
      if (checked) {
        java.util.Calendar startTimeJCalendar=getJCalendar(actionRequest,"startTime");
        java.util.Calendar weekdayJCalendar=JCalendarUtil.getJCalendar(startTimeJCalendar.getTimeInMillis(),getTimeZone(actionRequest));
        weekdayJCalendar.set(java.util.Calendar.DAY_OF_WEEK,weekday.getCalendarWeekday());
        weekdayJCalendar=JCalendarUtil.getJCalendar(weekdayJCalendar,calendarTimeZone);
        weekday=Weekday.getWeekday(weekdayJCalendar);
        positionalWeekdays.add(new PositionalWeekday(weekday,0));
      }
    }
  }
 else   if ((frequency == Frequency.MONTHLY) || (frequency == Frequency.YEARLY)) {
    boolean repeatOnWeekday=ParamUtil.getBoolean(actionRequest,"repeatOnWeekday");
    if (repeatOnWeekday) {
      int position=ParamUtil.getInteger(actionRequest,"position");
      Weekday weekday=Weekday.parse(ParamUtil.getString(actionRequest,"weekday"));
      positionalWeekdays.add(new PositionalWeekday(weekday,position));
      if (frequency == Frequency.YEARLY) {
        List<Integer> months=Arrays.asList(ParamUtil.getInteger(actionRequest,"startTimeMonth"));
        recurrence.setMonths(months);
      }
    }
  }
  recurrence.setPositionalWeekdays(positionalWeekdays);
  String[] exceptionDates=StringUtil.split(ParamUtil.getString(actionRequest,"exceptionDates"));
  for (  String exceptionDate : exceptionDates) {
    recurrence.addExceptionDate(JCalendarUtil.getJCalendar(Long.valueOf(exceptionDate)));
  }
  return RecurrenceSerializer.serialize(recurrence);
}
