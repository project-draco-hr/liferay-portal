{
  final DefaultNoticeableFuture<ObjectValuePair<O,E>> defaultNoticeableFuture=new DefaultNoticeableFuture<ObjectValuePair<O,E>>();
  defaultNoticeableFuture.addFutureListener(new FutureListener<ObjectValuePair<O,E>>(){
    @Override public void complete(    Future<ObjectValuePair<O,E>> future){
      if (!future.isCancelled()) {
        return;
      }
      stdOutNoticeableFuture.cancel(true);
      stdErrNoticeableFuture.cancel(true);
      process.destroy();
    }
  }
);
  final AtomicMarkableReference<O> stdOutReference=new AtomicMarkableReference<O>(null,false);
  stdOutNoticeableFuture.addFutureListener(new FutureListener<O>(){
    @Override public void complete(    Future<O> future){
      try {
        O stdOut=future.get();
        stdOutReference.set(stdOut,true);
        boolean[] markHolder=new boolean[1];
        E stdErr=stdErrReference.get(markHolder);
        if (markHolder[0]) {
          defaultNoticeableFuture.set(new ObjectValuePair<O,E>(stdOut,stdErr));
        }
      }
 catch (      Throwable t) {
        if (t instanceof ExecutionException) {
          t=t.getCause();
        }
        defaultNoticeableFuture.setException(t);
      }
    }
  }
);
  final AtomicMarkableReference<E> stdErrReference=new AtomicMarkableReference<E>(null,false);
  stdErrNoticeableFuture.addFutureListener(new FutureListener<E>(){
    @Override public void complete(    Future<E> future){
      try {
        E stdErr=future.get();
        stdErrReference.set(stdErr,true);
        boolean[] markHolder=new boolean[1];
        O stdOut=stdOutReference.get(markHolder);
        if (markHolder[0]) {
          defaultNoticeableFuture.set(new ObjectValuePair<O,E>(stdOut,stdErr));
        }
      }
 catch (      Throwable t) {
        if (t instanceof ExecutionException) {
          t=t.getCause();
        }
        defaultNoticeableFuture.setException(t);
      }
    }
  }
);
  return defaultNoticeableFuture;
}
