{
  final DefaultNoticeableFuture<ObjectValuePair<O,E>> defaultNoticeableFuture=new DefaultNoticeableFuture<ObjectValuePair<O,E>>();
  defaultNoticeableFuture.addFutureListener(new FutureListener<ObjectValuePair<O,E>>(){
    @Override public void complete(    Future<ObjectValuePair<O,E>> future){
      if (!future.isCancelled()) {
        return;
      }
      stdOutNoticeableFuture.cancel(true);
      stdErrNoticeableFuture.cancel(true);
      process.destroy();
    }
  }
);
  final AtomicMarkableReference<O> stdOutReference=new AtomicMarkableReference<O>(null,false);
  final AtomicMarkableReference<E> stdErrReference=new AtomicMarkableReference<E>(null,false);
  stdOutNoticeableFuture.addFutureListener(new BaseFutureListener<O>(){
    @Override public void completeWithCancel(    Future<O> future){
      defaultNoticeableFuture.cancel(true);
    }
    @Override public void completeWithException(    Future<O> future,    Throwable throwable){
      defaultNoticeableFuture.setException(throwable);
    }
    @Override public void completeWithResult(    Future<O> future,    O stdOut){
      stdOutReference.set(stdOut,true);
      boolean[] markHolder=new boolean[1];
      E stdErr=stdErrReference.get(markHolder);
      if (markHolder[0]) {
        defaultNoticeableFuture.set(new ObjectValuePair<O,E>(stdOut,stdErr));
      }
    }
  }
);
  stdErrNoticeableFuture.addFutureListener(new BaseFutureListener<E>(){
    @Override public void completeWithCancel(    Future<E> future){
      defaultNoticeableFuture.cancel(true);
    }
    @Override public void completeWithException(    Future<E> future,    Throwable throwable){
      defaultNoticeableFuture.setException(throwable);
    }
    @Override public void completeWithResult(    Future<E> future,    E stdErr){
      stdErrReference.set(stdErr,true);
      boolean[] markHolder=new boolean[1];
      O stdOut=stdOutReference.get(markHolder);
      if (markHolder[0]) {
        defaultNoticeableFuture.set(new ObjectValuePair<O,E>(stdOut,stdErr));
      }
    }
  }
);
  return defaultNoticeableFuture;
}
