{
  User user=userLocalService.getUserById(serviceContext.getUserId());
  long revisionId=counterLocalService.increment();
  Revision revision=revisionPersistence.create(revisionId);
  long parentRevisionId=RevisionConstants.DEFAULT_PARENT_REVISION_ID;
  Revision parentRevision=getParentRevision(branchId,plid,serviceContext);
  if (parentRevision != null) {
    parentRevisionId=parentRevision.getRevisionId();
  }
  Date now=new Date();
  revision.setGroupId(groupId);
  revision.setCompanyId(user.getCompanyId());
  revision.setUserId(user.getUserId());
  revision.setUserName(user.getFullName());
  revision.setCreateDate(serviceContext.getCreateDate(now));
  revision.setModifiedDate(serviceContext.getModifiedDate(now));
  revision.setBranchId(branchId);
  revision.setPlid(plid);
  revision.setParentRevisionId(parentRevisionId);
  revision.setHead(head);
  revision.setName(name);
  revision.setTitle(title);
  revision.setDescription(description);
  revision.setTypeSettings(typeSettings);
  if (iconImage) {
    revision.setIconImage(iconImage);
    revision.setIconImageId(iconImageId);
  }
  revision.setThemeId(themeId);
  revision.setColorSchemeId(colorSchemeId);
  revision.setWapThemeId(wapThemeId);
  revision.setWapColorSchemeId(wapColorSchemeId);
  revision.setCss(css);
  revision.setStatus(WorkflowConstants.STATUS_DRAFT);
  if (parentRevision != null) {
    copyPreferences(user.getCompanyId(),parentRevisionId,revision.getRevisionId(),serviceContext);
  }
  WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),groupId,user.getUserId(),Layout.class.getName(),revision.getRevisionId(),revision,serviceContext);
  return revision;
}
