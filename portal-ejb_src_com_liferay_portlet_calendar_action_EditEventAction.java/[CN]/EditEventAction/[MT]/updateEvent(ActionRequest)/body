{
  Layout layout=(Layout)req.getAttribute(WebKeys.LAYOUT);
  String eventId=ParamUtil.getString(req,"eventId");
  String title=ParamUtil.getString(req,"title");
  String description=ParamUtil.getString(req,"description");
  int startDateMonth=ParamUtil.getInteger(req,"startDateMonth");
  int startDateDay=ParamUtil.getInteger(req,"startDateDay");
  int startDateYear=ParamUtil.getInteger(req,"startDateYear");
  int startDateHour=ParamUtil.getInteger(req,"startDateHour");
  int startDateMinute=ParamUtil.getInteger(req,"startDateMinute");
  int startDateAmPm=ParamUtil.getInteger(req,"startDateAmPm");
  if (startDateAmPm == Calendar.PM) {
    startDateHour+=12;
  }
  int durationHour=ParamUtil.getInteger(req,"durationHour");
  int durationMinute=ParamUtil.getInteger(req,"durationMinute");
  boolean allDay=ParamUtil.getBoolean(req,"allDay");
  boolean timeZoneSensitive=ParamUtil.getBoolean(req,"timeZoneSensitive");
  String type=ParamUtil.getString(req,"type");
  int endDateMonth=ParamUtil.getInteger(req,"endDateMonth");
  int endDateDay=ParamUtil.getInteger(req,"endDateDay");
  int endDateYear=ParamUtil.getInteger(req,"endDateYear");
  boolean repeating=false;
  int recurrenceType=ParamUtil.getInteger(req,"recurrenceType");
  if (recurrenceType != Recurrence.NO_RECURRENCE) {
    repeating=true;
  }
  Locale locale=null;
  TimeZone timeZone=null;
  if (timeZoneSensitive) {
    User user=PortalUtil.getUser(req);
    locale=user.getLocale();
    timeZone=user.getTimeZone();
  }
 else {
    locale=Locale.getDefault();
    timeZone=TimeZone.getDefault();
  }
  Calendar startDate=new GregorianCalendar(timeZone,locale);
  startDate.set(Calendar.MONTH,startDateMonth);
  startDate.set(Calendar.DATE,startDateDay);
  startDate.set(Calendar.YEAR,startDateYear);
  startDate.set(Calendar.HOUR_OF_DAY,startDateHour);
  startDate.set(Calendar.MINUTE,startDateMinute);
  startDate.set(Calendar.SECOND,0);
  startDate.set(Calendar.MILLISECOND,0);
  if (allDay) {
    startDate.set(Calendar.HOUR_OF_DAY,0);
    startDate.set(Calendar.MINUTE,0);
    startDate.set(Calendar.SECOND,0);
    startDate.set(Calendar.MILLISECOND,0);
    durationHour=24;
    durationMinute=0;
  }
  Recurrence recurrence=null;
  if (repeating) {
    Calendar recStartCal=null;
    if (timeZoneSensitive) {
      recStartCal=new GregorianCalendar();
      recStartCal.setTime(startDate.getTime());
    }
 else {
      recStartCal=(Calendar)startDate.clone();
    }
    recurrence=new Recurrence(recStartCal,new Duration(1,0,0,0),recurrenceType);
    recurrence.setWeekStart(Calendar.SUNDAY);
    if (recurrenceType == Recurrence.DAILY) {
      int dailyType=ParamUtil.getInteger(req,"dailyType");
      if (dailyType == 0) {
        int dailyInterval=ParamUtil.getInteger(req,"dailyInterval");
        recurrence.setInterval(dailyInterval);
      }
 else {
        DayAndPosition[] dayPos={new DayAndPosition(Calendar.MONDAY,0),new DayAndPosition(Calendar.TUESDAY,0),new DayAndPosition(Calendar.WEDNESDAY,0),new DayAndPosition(Calendar.THURSDAY,0),new DayAndPosition(Calendar.FRIDAY,0)};
        recurrence.setByDay(dayPos);
      }
    }
 else     if (recurrenceType == Recurrence.WEEKLY) {
      int weeklyInterval=ParamUtil.getInteger(req,"weeklyInterval");
      recurrence.setInterval(weeklyInterval);
      List dayPos=new ArrayList();
      _addWeeklyDayPos(req,dayPos,Calendar.SUNDAY);
      _addWeeklyDayPos(req,dayPos,Calendar.MONDAY);
      _addWeeklyDayPos(req,dayPos,Calendar.TUESDAY);
      _addWeeklyDayPos(req,dayPos,Calendar.WEDNESDAY);
      _addWeeklyDayPos(req,dayPos,Calendar.THURSDAY);
      _addWeeklyDayPos(req,dayPos,Calendar.FRIDAY);
      _addWeeklyDayPos(req,dayPos,Calendar.SATURDAY);
      if (dayPos.size() == 0) {
        dayPos.add(new DayAndPosition(Calendar.MONDAY,0));
      }
      recurrence.setByDay((DayAndPosition[])dayPos.toArray(new DayAndPosition[0]));
    }
 else     if (recurrenceType == Recurrence.MONTHLY) {
      int monthlyType=ParamUtil.getInteger(req,"monthlyType");
      if (monthlyType == 0) {
        int monthlyDay=ParamUtil.getInteger(req,"monthlyDay0");
        recurrence.setByMonthDay(new int[]{monthlyDay});
        int monthlyInterval=ParamUtil.getInteger(req,"monthlyInterval0");
        recurrence.setInterval(monthlyInterval);
      }
 else {
        int monthlyPos=ParamUtil.getInteger(req,"monthlyPos");
        int monthlyDay=ParamUtil.getInteger(req,"monthlyDay1");
        DayAndPosition[] dayPos={new DayAndPosition(monthlyDay,monthlyPos)};
        recurrence.setByDay(dayPos);
        int monthlyInterval=ParamUtil.getInteger(req,"monthlyInterval1");
        recurrence.setInterval(monthlyInterval);
      }
    }
 else     if (recurrenceType == Recurrence.YEARLY) {
      int yearlyType=ParamUtil.getInteger(req,"yearlyType");
      if (yearlyType == 0) {
        int yearlyMonth=ParamUtil.getInteger(req,"yearlyMonth0");
        int yearlyDay=ParamUtil.getInteger(req,"yearlyDay0");
        Calendar yearlyCal=(Calendar)recStartCal.clone();
        yearlyCal.set(Calendar.MONTH,yearlyMonth);
        yearlyCal.set(Calendar.DATE,yearlyDay);
        if (yearlyCal.before(recStartCal)) {
          yearlyCal.add(Calendar.YEAR,1);
        }
        recurrence.setDtStart(yearlyCal);
        int yearlyInterval=ParamUtil.getInteger(req,"yearlyInterval0");
        recurrence.setInterval(yearlyInterval);
      }
 else {
        int yearlyPos=ParamUtil.getInteger(req,"yearlyPos");
        int yearlyDay=ParamUtil.getInteger(req,"yearlyDay1");
        int yearlyMonth=ParamUtil.getInteger(req,"yearlyMonth1");
        DayAndPosition[] dayPos={new DayAndPosition(yearlyDay,yearlyPos)};
        recurrence.setByDay(dayPos);
        recurrence.setByMonth(new int[]{yearlyMonth});
        int yearlyInterval=ParamUtil.getInteger(req,"yearlyInterval1");
        recurrence.setInterval(yearlyInterval);
      }
    }
    int endDateType=ParamUtil.getInteger(req,"endDateType");
    if (endDateType == 1) {
      int endDateOccurrence=ParamUtil.getInteger(req,"endDateOccurrence");
      recurrence.setOccurrence(endDateOccurrence);
    }
 else     if (endDateType == 2) {
      Calendar recEndCal=null;
      if (timeZoneSensitive) {
        recEndCal=new GregorianCalendar();
        recEndCal.setTime(startDate.getTime());
      }
 else {
        recEndCal=(Calendar)startDate.clone();
      }
      recEndCal.set(Calendar.MONTH,endDateMonth);
      recEndCal.set(Calendar.DATE,endDateDay);
      recEndCal.set(Calendar.YEAR,endDateYear);
      recurrence.setUntil(recEndCal);
    }
  }
  String remindBy=ParamUtil.getString(req,"remindBy");
  int firstReminder=ParamUtil.getInteger(req,"firstReminder");
  int secondReminder=ParamUtil.getInteger(req,"secondReminder");
  String[] communityPermissions=req.getParameterValues("communityPermissions");
  String[] guestPermissions=req.getParameterValues("guestPermissions");
  if (Validator.isNull(eventId)) {
    CalEventServiceUtil.addEvent(layout.getPlid(),title,description,startDateMonth,startDateDay,startDateYear,startDateHour,startDateMinute,endDateMonth,endDateDay,endDateYear,durationHour,durationMinute,allDay,timeZoneSensitive,type,repeating,recurrence,remindBy,firstReminder,secondReminder,communityPermissions,guestPermissions);
  }
 else {
    CalEventServiceUtil.updateEvent(eventId,title,description,startDateMonth,startDateDay,startDateYear,startDateHour,startDateMinute,endDateMonth,endDateDay,endDateYear,durationHour,durationMinute,allDay,timeZoneSensitive,type,repeating,recurrence,remindBy,firstReminder,secondReminder);
  }
}
