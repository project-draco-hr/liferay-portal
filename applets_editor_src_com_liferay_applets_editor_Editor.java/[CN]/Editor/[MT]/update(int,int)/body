{
  try {
    String str=_doc.getText(0);
    _lexer.parse(str);
    List tokens=_lexer.getTokens();
    if (_lastTokens != null && _lastTokens.size() != 0) {
      int alpha=findPosition(dirtBeg,tokens);
      if (alpha != -1 && tokens.size() != 0) {
        int newIdx=alpha;
        int oldIdx=alpha;
        if (dirtOffset > 0) {
          newIdx=findPosition(dirtBeg + dirtOffset - 1,tokens);
        }
 else {
          oldIdx=findPosition(dirtBeg - dirtOffset - 1,_lastTokens);
        }
        int omega;
        if (newIdx == -1 || oldIdx == -1) {
          omega=tokens.size() - 1;
        }
 else {
          omega=newIdx;
          for (; newIdx < tokens.size() && oldIdx < _lastTokens.size(); ++oldIdx, ++newIdx) {
            Token newTok=(Token)tokens.get(newIdx);
            Token oldTok=(Token)_lastTokens.get(oldIdx);
            if (!oldTok.substrEquals(_lastStr,newTok,str)) {
              omega=newIdx;
            }
          }
        }
        if (alpha > 0) {
          --alpha;
        }
        for (int ii=alpha; ii <= omega; ++ii) {
          ((Token)tokens.get(ii)).setDirty(true);
        }
      }
    }
 else {
      for (int ii=0; ii < tokens.size(); ++ii) {
        ((Token)tokens.get(ii)).setDirty(true);
      }
    }
    _lastTokens=tokens;
    _lastStr=str;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
