{
  if (PropsValues.SESSION_DISABLED) {
    return;
  }
  HttpSession session=_event.getSession();
  PortalSessionContext.remove(session.getId());
  try {
    Long userIdObj=(Long)session.getAttribute(WebKeys.USER_ID);
    if (userIdObj == null) {
      if (_log.isWarnEnabled()) {
        _log.warn("User id is not in the session");
      }
    }
    if (userIdObj == null) {
      return;
    }
    session.removeAttribute(Globals.LOCALE_KEY);
    if (PropsValues.LIVE_USERS_ENABLED) {
      long userId=userIdObj.longValue();
      long companyId=getCompanyId(userId);
      String sessionId=session.getId();
      JSONObject jsonObj=JSONFactoryUtil.createJSONObject();
      jsonObj.put("command","signOut");
      jsonObj.put("companyId",companyId);
      jsonObj.put("userId",userId);
      jsonObj.put("sessionId",sessionId);
      MessageBusUtil.sendMessage(DestinationNames.LIVE_USERS,jsonObj);
    }
  }
 catch (  IllegalStateException ise) {
    if (_log.isWarnEnabled()) {
      _log.warn("Please upgrade to a Servlet 2.4 compliant container");
    }
  }
catch (  Exception e) {
    _log.error(e,e);
  }
  try {
    PortletSessionTracker portletSessionTracker=(PortletSessionTracker)session.getAttribute(WebKeys.PORTLET_SESSION_TRACKER);
    if (portletSessionTracker != null) {
      PortletSessionTracker.invalidate(session);
      session.removeAttribute(WebKeys.PORTLET_SESSION_TRACKER);
    }
  }
 catch (  IllegalStateException ise) {
    if (_log.isWarnEnabled()) {
      _log.warn(ise,ise);
    }
  }
  try {
    EventsProcessorUtil.process(PropsKeys.SERVLET_SESSION_DESTROY_EVENTS,PropsValues.SERVLET_SESSION_DESTROY_EVENTS,session);
  }
 catch (  ActionException ae) {
    _log.error(ae,ae);
  }
}
