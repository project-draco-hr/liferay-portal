{
  try {
    HttpSession session=request.getSession();
    EventsProcessor.process(PropsKeys.LOGOUT_EVENTS_PRE,PropsValues.LOGOUT_EVENTS_PRE,request,response);
    String suserId=(String)session.getAttribute("j_username");
    Long userId=new Long(suserId);
    Integer serverPort=request.getServerPort();
    URL restURL=new URL(request.getScheme() + "://" + request.getServerName()+ ":"+ serverPort.toString()+ "/ruon/resources/presence/status/"+ userId+ "/offline");
    HttpImpl httpImpl=new HttpImpl();
    httpImpl.submit(restURL.toString(),true);
    String domain=CookieKeys.getDomain(request);
    Cookie companyIdCookie=new Cookie(CookieKeys.COMPANY_ID,StringPool.BLANK);
    if (Validator.isNotNull(domain)) {
      companyIdCookie.setDomain(domain);
    }
    companyIdCookie.setMaxAge(0);
    companyIdCookie.setPath(StringPool.SLASH);
    Cookie idCookie=new Cookie(CookieKeys.ID,StringPool.BLANK);
    if (Validator.isNotNull(domain)) {
      idCookie.setDomain(domain);
    }
    idCookie.setMaxAge(0);
    idCookie.setPath(StringPool.SLASH);
    Cookie passwordCookie=new Cookie(CookieKeys.PASSWORD,StringPool.BLANK);
    if (Validator.isNotNull(domain)) {
      passwordCookie.setDomain(domain);
    }
    passwordCookie.setMaxAge(0);
    passwordCookie.setPath(StringPool.SLASH);
    CookieKeys.addCookie(response,companyIdCookie);
    CookieKeys.addCookie(response,idCookie);
    CookieKeys.addCookie(response,passwordCookie);
    try {
      session.invalidate();
    }
 catch (    Exception e) {
    }
    EventsProcessor.process(PropsKeys.LOGOUT_EVENTS_POST,PropsValues.LOGOUT_EVENTS_POST,request,response);
    return mapping.findForward(ActionConstants.COMMON_REFERER);
  }
 catch (  Exception e) {
    PortalUtil.sendError(e,request,response);
    return null;
  }
}
