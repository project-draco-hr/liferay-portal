{
  BundleContext bundleContext=componentContext.getBundleContext();
  DestinationConfiguration destinationConfiguration=new DestinationConfiguration(DestinationConfiguration.DESTINATION_TYPE_SERIAL,DestinationNames.SCHEDULED_USER_LDAP_IMPORT);
  _serviceRegistration=bundleContext.registerService(DestinationConfiguration.class,destinationConfiguration,new HashMapDictionary<String,Object>());
  try {
    _schedulerEngineHelper.unschedule(UserImportMessageListener.class.getName(),UserImportMessageListener.class.getName(),StorageType.MEMORY_CLUSTERED);
  }
 catch (  SchedulerException se) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to unschedule " + UserImportMessageListener.class.getName(),se);
    }
  }
  LDAPImportConfiguration ldapImportConfiguration=_ldapImportConfigurationProvider.getConfiguration(0L);
  int interval=ldapImportConfiguration.importInterval();
  Trigger trigger=TriggerFactoryUtil.createTrigger(UserImportMessageListener.class.getName(),UserImportMessageListener.class.getName(),interval,TimeUnit.MINUTE);
  _schedulerEngineHelper.schedule(trigger,StorageType.MEMORY_CLUSTERED,UserImportMessageListener.class.getName(),DestinationNames.SCHEDULED_USER_LDAP_IMPORT,null,5);
}
