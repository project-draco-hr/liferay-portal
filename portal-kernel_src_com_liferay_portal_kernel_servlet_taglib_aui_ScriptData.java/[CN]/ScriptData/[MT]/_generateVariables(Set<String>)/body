{
  Map<String,Integer> indexes=new HashMap<>();
  Set<String> generatedVariables=new HashSet<>();
  Map<String,String> generatedVariablesMap=new HashMap<>();
  for (  String requiredFileName : requiredFileNames) {
    StringBundler sb=new StringBundler();
    CharSequence firstCharSequence=requiredFileName.subSequence(0,1);
    Matcher matcher=_validFirstCharacterPattern.matcher(firstCharSequence);
    if (!matcher.matches()) {
      sb.append(StringPool.UNDERLINE);
    }
 else {
      sb.append(firstCharSequence);
    }
    for (int i=1; i < requiredFileName.length(); i++) {
      CharSequence currentCharSequence=requiredFileName.subSequence(i,i + 1);
      matcher=_validCharactersPattern.matcher(currentCharSequence);
      if (!matcher.matches()) {
        while (++i < requiredFileName.length()) {
          CharSequence nextCharSequence=requiredFileName.subSequence(i,i + 1);
          matcher=_validCharactersPattern.matcher(nextCharSequence);
          if (matcher.matches()) {
            sb.append(StringUtil.toUpperCase(nextCharSequence.toString()));
            break;
          }
        }
      }
 else {
        sb.append(currentCharSequence);
      }
    }
    String generatedVariable=sb.toString();
    if (generatedVariables.contains(generatedVariable)) {
      int index=1;
      if (indexes.containsKey(generatedVariable)) {
        index=indexes.get(generatedVariable) + 1;
      }
      indexes.put(generatedVariable,index);
      generatedVariable+=index;
    }
    generatedVariables.add(generatedVariable);
    generatedVariablesMap.put(requiredFileName,generatedVariable);
  }
  return generatedVariablesMap;
}
