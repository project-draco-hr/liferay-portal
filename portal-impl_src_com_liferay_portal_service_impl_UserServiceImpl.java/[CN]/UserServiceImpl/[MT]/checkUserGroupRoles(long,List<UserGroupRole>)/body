{
  List<UserGroupRole> oldUserGroupRoles=null;
  PermissionChecker permissionChecker=getPermissionChecker();
  MembershipPolicy membershipPolicy=MembershipPolicyFactory.getInstance();
  User user=userPersistence.findByPrimaryKey(userId);
  if (userId != CompanyConstants.SYSTEM) {
    Set<Role> mandatoryRoles=membershipPolicy.getMandatoryRoles(user.getGroup(),user);
    oldUserGroupRoles=userGroupRoleLocalService.getUserGroupRoles(userId);
    for (    UserGroupRole oldUserGroupRole : oldUserGroupRoles) {
      Role role=oldUserGroupRole.getRole();
      if (!userGroupRoles.contains(oldUserGroupRole) && !UserGroupRolePermissionUtil.contains(permissionChecker,oldUserGroupRole.getGroupId(),oldUserGroupRole.getRoleId()) || mandatoryRoles.contains(role)) {
        userGroupRoles.add(oldUserGroupRole);
      }
    }
  }
  MembershipPolicyException membershipPolicyException=null;
  for (  UserGroupRole userGroupRole : userGroupRoles) {
    Role role=userGroupRole.getRole();
    if ((oldUserGroupRoles == null) || !oldUserGroupRoles.contains(userGroupRole)) {
      UserGroupRolePermissionUtil.check(permissionChecker,userGroupRole.getGroupId(),userGroupRole.getRoleId());
      if (!membershipPolicy.isMembershipAllowed(role,user)) {
        if (membershipPolicyException == null) {
          membershipPolicyException=new MembershipPolicyException(MembershipPolicyException.ROLE_MEMBERSHIP_NOT_ALLOWED);
          membershipPolicyException.addUser(user);
        }
        membershipPolicyException.addRole(role);
      }
    }
  }
  if (membershipPolicyException != null) {
    throw membershipPolicyException;
  }
  return userGroupRoles;
}
