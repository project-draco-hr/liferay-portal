{
  long[] oldOrganizationIds=null;
  PermissionChecker permissionChecker=getPermissionChecker();
  User user=userPersistence.findByPrimaryKey(userId);
  if (userId != CompanyConstants.SYSTEM) {
    Set<Organization> mandatoryOrganizations=MembershipPolicyUtil.getMandatoryOrganizations(user);
    List<Organization> oldOrganizations=organizationLocalService.getUserOrganizations(userId);
    oldOrganizationIds=new long[oldOrganizations.size()];
    for (int i=0; i < oldOrganizations.size(); i++) {
      Organization organization=oldOrganizations.get(i);
      if (!ArrayUtil.contains(organizationIds,organization.getOrganizationId()) && (!OrganizationPermissionUtil.contains(permissionChecker,organization.getOrganizationId(),ActionKeys.ASSIGN_MEMBERS) || mandatoryOrganizations.contains(organization))) {
        organizationIds=ArrayUtil.append(organizationIds,organization.getOrganizationId());
      }
      oldOrganizationIds[i]=organization.getOrganizationId();
    }
  }
  MembershipPolicyException membershipPolicyException=null;
  for (  long organizationId : organizationIds) {
    if ((oldOrganizationIds != null) && ArrayUtil.contains(oldOrganizationIds,organizationId)) {
      continue;
    }
    Organization organization=organizationPersistence.findByPrimaryKey(organizationId);
    OrganizationPermissionUtil.check(permissionChecker,organization,ActionKeys.ASSIGN_MEMBERS);
    if (MembershipPolicyUtil.isMembershipAllowed(organization,user)) {
      continue;
    }
    if (membershipPolicyException == null) {
      membershipPolicyException=new MembershipPolicyException(MembershipPolicyException.ORGANIZATION_MEMBERSHIP_NOT_ALLOWED);
      membershipPolicyException.addUser(user);
    }
    membershipPolicyException.addOrganization(organization);
  }
  if (membershipPolicyException != null) {
    throw membershipPolicyException;
  }
  return organizationIds;
}
