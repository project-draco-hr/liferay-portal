{
  long[] oldRoleIds=null;
  PermissionChecker permissionChecker=getPermissionChecker();
  User user=null;
  if (userId != CompanyConstants.SYSTEM) {
    user=userPersistence.findByPrimaryKey(userId);
    Set<Role> mandatoryRoles=MembershipPolicyUtil.getMandatoryRoles(user);
    List<Role> oldRoles=roleLocalService.getUserRoles(userId);
    oldRoleIds=new long[oldRoles.size()];
    for (int i=0; i < oldRoles.size(); i++) {
      Role role=oldRoles.get(i);
      if (!ArrayUtil.contains(roleIds,role.getRoleId()) && (!RolePermissionUtil.contains(permissionChecker,role.getRoleId(),ActionKeys.ASSIGN_MEMBERS) || mandatoryRoles.contains(role))) {
        roleIds=ArrayUtil.append(roleIds,role.getRoleId());
      }
      oldRoleIds[i]=role.getRoleId();
    }
  }
  MembershipPolicyException membershipPolicyException=null;
  for (  long roleId : roleIds) {
    if ((oldRoleIds != null) && ArrayUtil.contains(oldRoleIds,roleId)) {
      continue;
    }
    Role role=rolePersistence.findByPrimaryKey(roleId);
    RolePermissionUtil.check(permissionChecker,role.getRoleId(),ActionKeys.ASSIGN_MEMBERS);
    if (user == null) {
      continue;
    }
    if (MembershipPolicyUtil.isMembershipAllowed(role,user)) {
      continue;
    }
    if (membershipPolicyException == null) {
      membershipPolicyException=new MembershipPolicyException(MembershipPolicyException.ROLE_MEMBERSHIP_NOT_ALLOWED);
      membershipPolicyException.addUser(user);
    }
    membershipPolicyException.addRole(role);
  }
  if (membershipPolicyException != null) {
    throw membershipPolicyException;
  }
  return roleIds;
}
