{
  String name=titleMap.get(LocaleUtil.getDefault());
  name=ModelHintsUtil.trimString(AssetCategory.class.getName(),"name",name);
  if (categoryProperties == null) {
    categoryProperties=new String[0];
  }
  validate(categoryId,parentCategoryId,name,vocabularyId);
  if (parentCategoryId > 0) {
    assetCategoryPersistence.findByPrimaryKey(parentCategoryId);
  }
  AssetCategory category=assetCategoryPersistence.findByPrimaryKey(categoryId);
  String oldName=category.getName();
  if (vocabularyId != category.getVocabularyId()) {
    assetVocabularyPersistence.findByPrimaryKey(vocabularyId);
    parentCategoryId=AssetCategoryConstants.DEFAULT_PARENT_CATEGORY_ID;
    category.setVocabularyId(vocabularyId);
    updateChildrenVocabularyId(category,vocabularyId);
  }
  category.setModifiedDate(new Date());
  category.setParentCategoryId(parentCategoryId);
  category.setName(name);
  category.setTitleMap(titleMap);
  category.setDescriptionMap(descriptionMap);
  assetCategoryPersistence.update(category);
  List<AssetCategoryProperty> oldCategoryProperties=assetCategoryPropertyPersistence.findByCategoryId(categoryId);
  for (int i=0; i < categoryProperties.length; i++) {
    String[] categoryProperty=StringUtil.split(categoryProperties[i],CharPool.COLON);
    String key=StringPool.BLANK;
    if (categoryProperty.length > 0) {
      key=GetterUtil.getString(categoryProperty[0]);
    }
    String value=StringPool.BLANK;
    if (categoryProperty.length > 1) {
      value=GetterUtil.getString(categoryProperty[1]);
    }
    if (Validator.isNotNull(key)) {
      boolean newProperty=true;
      Iterator<AssetCategoryProperty> iterator=oldCategoryProperties.iterator();
      while (iterator.hasNext()) {
        AssetCategoryProperty oldAssetCategoryProperty=iterator.next();
        if ((oldAssetCategoryProperty.getUserId() == userId) && (oldAssetCategoryProperty.getCategoryId() == categoryId) && oldAssetCategoryProperty.getKey().equals(key)&& oldAssetCategoryProperty.getValue().equals(value)) {
          newProperty=false;
          iterator.remove();
          break;
        }
      }
      if (newProperty) {
        assetCategoryPropertyLocalService.addCategoryProperty(userId,categoryId,key,value);
      }
    }
  }
  for (  AssetCategoryProperty categoryProperty : oldCategoryProperties) {
    assetCategoryPropertyLocalService.deleteAssetCategoryProperty(categoryProperty);
  }
  if (!oldName.equals(name)) {
    List<AssetEntry> entries=assetCategoryPersistence.getAssetEntries(category.getCategoryId());
    assetEntryLocalService.reindex(entries);
  }
  return category;
}
