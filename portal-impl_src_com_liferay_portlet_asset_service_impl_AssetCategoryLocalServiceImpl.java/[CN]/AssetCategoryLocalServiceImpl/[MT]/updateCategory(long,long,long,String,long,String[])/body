{
  name=name.trim();
  validate(categoryId,parentCategoryId,name);
  if (parentCategoryId > 0) {
    assetCategoryPersistence.findByPrimaryKey(parentCategoryId);
  }
  assetCategoryVocabularyPersistence.findByPrimaryKey(vocabularyId);
  AssetCategory category=assetCategoryPersistence.findByPrimaryKey(categoryId);
  category.setModifiedDate(new Date());
  category.setParentCategoryId(parentCategoryId);
  category.setName(name);
  category.setVocabularyId(vocabularyId);
  assetCategoryPersistence.update(category,false);
  List<AssetCategoryProperty> oldProperties=assetCategoryPropertyPersistence.findByCategoryId(categoryId);
  for (  AssetCategoryProperty assetCategoryProperty : oldProperties) {
    assetCategoryPropertyLocalService.deleteAssetCategoryProperty(assetCategoryProperty);
  }
  for (int i=0; i < properties.length; i++) {
    String[] property=StringUtil.split(properties[i],StringPool.COLON);
    String key=StringPool.BLANK;
    if (property.length > 0) {
      key=GetterUtil.getString(property[0]);
    }
    String value=StringPool.BLANK;
    if (property.length > 1) {
      value=GetterUtil.getString(property[1]);
    }
    if (Validator.isNotNull(key)) {
      assetCategoryPropertyLocalService.addCategoryProperty(userId,categoryId,key,value);
    }
  }
  return category;
}
