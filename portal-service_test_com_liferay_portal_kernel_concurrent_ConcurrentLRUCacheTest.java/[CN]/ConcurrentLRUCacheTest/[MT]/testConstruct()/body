{
  try {
    new ConcurrentLRUCache<Object,Object>(0);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLRUCache<Object,Object>(0,0.9F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLRUCache<Object,Object>(-1);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLRUCache<Object,Object>(-1,0.9F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLRUCache<Object,Object>(10,0);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLRUCache<Object,Object>(10,-1);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLRUCache<Object,Object>(10,1);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLRUCache<Object,Object>(10,1.1F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLRUCache<Object,Object>(1,0.9F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLRUCache<Object,Object>(10,0.09F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  ConcurrentLRUCache<String,String> concurrentLRUCache=new ConcurrentLRUCache<String,String>(10);
  assertEquals(0,concurrentLRUCache.evictCount());
  assertEquals(0,concurrentLRUCache.hitCount());
  assertEquals(10,concurrentLRUCache.maxSize());
  assertEquals(0,concurrentLRUCache.missCount());
  assertEquals(0,concurrentLRUCache.putCount());
  assertEquals(0,concurrentLRUCache.size());
  assertNull(concurrentLRUCache.get("key"));
}
