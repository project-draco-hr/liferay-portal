{
  String content=StringUtil.replace(new String(Files.readAllBytes(path),StringPool.UTF8),"log4j:","");
  content="<log4j>" + content + "</log4j>";
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
    Document document=documentBuilder.parse(new InputSource(new UnsyncStringReader(content)));
    NodeList nodelist=document.getElementsByTagName("event");
    for (int i=0; i < nodelist.getLength(); i++) {
      Node node=nodelist.item(i);
      NamedNodeMap namedNodeMap=node.getAttributes();
      Node levelNode=namedNodeMap.getNamedItem("level");
      String levelString=levelNode.getNodeValue();
      if (levelString.equals("ERROR") || levelString.equals("FATAL") || levelString.equals("WARN")) {
        NodeList childNodelist=node.getChildNodes();
        String message="\nPortal log assert failure, see above log for more " + "info : \n";
        for (int j=0; j < childNodelist.getLength(); j++) {
          Node childNode=childNodelist.item(j);
          String nodeName=childNode.getNodeName();
          if (nodeName.equals("message")) {
            message+=childNode.getTextContent();
          }
 else           if (nodeName.equals("throwable")) {
            message+="\n" + childNode.getTextContent();
          }
        }
        System.out.println("Detected error, dumpping full log for reference :");
        Files.copy(Paths.get(StringUtil.replace(path.toString(),".xml",".log")),System.out);
        Assert.fail(message);
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
