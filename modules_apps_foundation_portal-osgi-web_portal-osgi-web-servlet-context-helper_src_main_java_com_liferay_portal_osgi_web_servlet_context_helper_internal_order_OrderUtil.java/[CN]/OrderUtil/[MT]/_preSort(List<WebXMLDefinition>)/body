{
  List<WebXMLDefinition> webXMLDefinitionList=new ArrayList<>();
  List<WebXMLDefinition> anonymousAndUnordered=new LinkedList<>();
  Map<String,Integer> namedMap=new LinkedHashMap<>();
  for (  WebXMLDefinition webXMLDefinition : webXMLDefinitions) {
    Order order=webXMLDefinition.getOrder();
    EnumMap<Order.Path,String[]> webXMLDefinitionOrderRoutes=order.getRoutes();
    String[] beforePathNames=webXMLDefinitionOrderRoutes.get(Order.Path.BEFORE);
    String[] afterPathNames=webXMLDefinitionOrderRoutes.get(Order.Path.AFTER);
    String fragmentName=webXMLDefinition.getFragmentName();
    if (Validator.isNull(fragmentName) && !order.isOrdered()) {
      anonymousAndUnordered.add(webXMLDefinition);
    }
 else {
      int totalPathNames=beforePathNames.length + afterPathNames.length;
      namedMap.put(fragmentName,totalPathNames);
    }
  }
  namedMap=_sortDescendingByValue(namedMap);
  Map<String,WebXMLDefinition> configMap=_getWebXMLDefinitionsMap(webXMLDefinitions);
  for (  Map.Entry<String,Integer> entry : namedMap.entrySet()) {
    String key=entry.getKey();
    webXMLDefinitionList.add(configMap.get(key));
  }
  for (  WebXMLDefinition webXMLDefinition : anonymousAndUnordered) {
    webXMLDefinitionList.add(webXMLDefinition);
  }
  return webXMLDefinitionList;
}
