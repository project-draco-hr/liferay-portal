{
  Order order=webXMLDefinition.getOrder();
  EnumMap<Order.Path,String[]> orderRoutes=order.getRoutes();
  String[] pathNames=orderRoutes.get(path);
  for (  String pathName : pathNames) {
    if (pathName.equals(Order.OTHERS)) {
      continue;
    }
    for (    WebXMLDefinition curWebXMLDefinition : webXMLDefinitions) {
      if (!pathName.equals(curWebXMLDefinition.getFragmentName())) {
        continue;
      }
      Order curOrder=curWebXMLDefinition.getOrder();
      EnumMap<Order.Path,String[]> curRoutes=curOrder.getRoutes();
      String[] curPathNames=curRoutes.get(path);
      String fragmentName=webXMLDefinition.getFragmentName();
      if (Arrays.binarySearch(curPathNames,fragmentName) >= 0) {
        throw new OrderCircularDependencyException(path,webXMLDefinitions);
      }
      Order.Path oppositePath=null;
      if (path == Order.Path.BEFORE) {
        oppositePath=Order.Path.AFTER;
      }
 else {
        oppositePath=Order.Path.BEFORE;
      }
      String[] oppositePathNames=curRoutes.get(oppositePath);
      if (Arrays.binarySearch(oppositePathNames,fragmentName) < 0) {
        EnumMap<Order.Path,String[]> routes=new EnumMap<>(Order.Path.class);
        routes.put(path,curPathNames);
        routes.put(oppositePath,_appendAndSort(curRoutes.get(oppositePath),new String[]{fragmentName}));
        curOrder.setRoutes(routes);
      }
      if (ArrayUtil.isNotEmpty(curPathNames)) {
        EnumMap<Order.Path,String[]> routes=new EnumMap<>(Order.Path.class);
        routes.put(path,_appendAndSort(pathNames,curPathNames));
        routes.put(oppositePath,orderRoutes.get(oppositePath));
        order.setRoutes(routes);
      }
    }
  }
}
