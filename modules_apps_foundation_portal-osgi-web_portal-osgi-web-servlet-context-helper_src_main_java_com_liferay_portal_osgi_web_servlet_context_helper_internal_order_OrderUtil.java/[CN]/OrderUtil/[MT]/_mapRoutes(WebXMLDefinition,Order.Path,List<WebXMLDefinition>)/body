{
  String configName=config.getFragmentName();
  Order configOrdering=config.getOrder();
  EnumMap<Order.Path,String[]> configOrderingRoutes=configOrdering.getRoutes();
  String[] routePathNames=configOrderingRoutes.get(path);
  for (  String routePathName : routePathNames) {
    if (routePathName.equals(Order.OTHERS)) {
      continue;
    }
    for (    WebXMLDefinition otherConfig : webXMLs) {
      String otherConfigName=otherConfig.getFragmentName();
      if (!routePathName.equals(otherConfigName)) {
        continue;
      }
      Order otherConfigOrdering=otherConfig.getOrder();
      EnumMap<Order.Path,String[]> otherConfigOrderingRoutes=otherConfigOrdering.getRoutes();
      String[] otherRoutePathNames=otherConfigOrderingRoutes.get(path);
      if (Arrays.binarySearch(otherRoutePathNames,configName) >= 0) {
        throw new OrderCircularDependencyException(path,webXMLs);
      }
      Order.Path oppositePath;
      if (path == Order.Path.BEFORE) {
        oppositePath=Order.Path.AFTER;
      }
 else {
        oppositePath=Order.Path.BEFORE;
      }
      String[] oppositePathNames=otherConfigOrderingRoutes.get(oppositePath);
      if (Arrays.binarySearch(oppositePathNames,configName) < 0) {
        EnumMap<Order.Path,String[]> routes=new EnumMap<>(Order.Path.class);
        routes.put(path,otherRoutePathNames);
        routes.put(oppositePath,_appendAndSort(otherConfigOrderingRoutes.get(oppositePath),new String[]{configName}));
        otherConfigOrdering.setRoutes(routes);
      }
      if (ArrayUtil.isNotEmpty(otherRoutePathNames)) {
        EnumMap<Order.Path,String[]> routes=new EnumMap<>(Order.Path.class);
        routes.put(path,_appendAndSort(routePathNames,otherRoutePathNames));
        routes.put(oppositePath,configOrderingRoutes.get(oppositePath));
        configOrdering.setRoutes(routes);
      }
    }
  }
}
