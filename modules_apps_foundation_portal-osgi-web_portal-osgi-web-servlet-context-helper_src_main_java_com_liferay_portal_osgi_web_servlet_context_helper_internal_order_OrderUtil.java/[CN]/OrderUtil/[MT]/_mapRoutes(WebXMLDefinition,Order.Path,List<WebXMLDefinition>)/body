{
  String fragmentName=webXMLDefinition.getFragmentName();
  Order order=webXMLDefinition.getOrder();
  EnumMap<Order.Path,String[]> orderRoutes=order.getRoutes();
  String[] routePathNames=orderRoutes.get(path);
  for (  String routePathName : routePathNames) {
    if (routePathName.equals(Order.OTHERS)) {
      continue;
    }
    for (    WebXMLDefinition otherConfig : webXMLDefinitions) {
      String otherConfigName=otherConfig.getFragmentName();
      if (!routePathName.equals(otherConfigName)) {
        continue;
      }
      Order otherConfigOrder=otherConfig.getOrder();
      EnumMap<Order.Path,String[]> otherConfigOrderRoutes=otherConfigOrder.getRoutes();
      String[] otherRoutePathNames=otherConfigOrderRoutes.get(path);
      if (Arrays.binarySearch(otherRoutePathNames,fragmentName) >= 0) {
        throw new OrderCircularDependencyException(path,webXMLDefinitions);
      }
      Order.Path oppositePath;
      if (path == Order.Path.BEFORE) {
        oppositePath=Order.Path.AFTER;
      }
 else {
        oppositePath=Order.Path.BEFORE;
      }
      String[] oppositePathNames=otherConfigOrderRoutes.get(oppositePath);
      if (Arrays.binarySearch(oppositePathNames,fragmentName) < 0) {
        EnumMap<Order.Path,String[]> routes=new EnumMap<>(Order.Path.class);
        routes.put(path,otherRoutePathNames);
        routes.put(oppositePath,_appendAndSort(otherConfigOrderRoutes.get(oppositePath),new String[]{fragmentName}));
        otherConfigOrder.setRoutes(routes);
      }
      if (ArrayUtil.isNotEmpty(otherRoutePathNames)) {
        EnumMap<Order.Path,String[]> routes=new EnumMap<>(Order.Path.class);
        routes.put(path,_appendAndSort(routePathNames,otherRoutePathNames));
        routes.put(oppositePath,orderRoutes.get(oppositePath));
        order.setRoutes(routes);
      }
    }
  }
}
