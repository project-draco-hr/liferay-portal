{
  SocialRequest newSocialRequest=addSocialRequest();
  _persistence.clearCache();
  SocialRequest existingSocialRequest=_persistence.findByPrimaryKey(newSocialRequest.getPrimaryKey());
  Assert.assertTrue(Objects.equals(existingSocialRequest.getUuid(),ReflectionTestUtil.invoke(existingSocialRequest,"getOriginalUuid",new Class<?>[0])));
  Assert.assertEquals(Long.valueOf(existingSocialRequest.getGroupId()),ReflectionTestUtil.<Long>invoke(existingSocialRequest,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialRequest.getUserId()),ReflectionTestUtil.<Long>invoke(existingSocialRequest,"getOriginalUserId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialRequest.getClassNameId()),ReflectionTestUtil.<Long>invoke(existingSocialRequest,"getOriginalClassNameId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialRequest.getClassPK()),ReflectionTestUtil.<Long>invoke(existingSocialRequest,"getOriginalClassPK",new Class<?>[0]));
  Assert.assertEquals(Integer.valueOf(existingSocialRequest.getType()),ReflectionTestUtil.<Integer>invoke(existingSocialRequest,"getOriginalType",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialRequest.getReceiverUserId()),ReflectionTestUtil.<Long>invoke(existingSocialRequest,"getOriginalReceiverUserId",new Class<?>[0]));
}
