{
  Properties properties=new Properties();
  try {
    properties.load(new StringReader(JenkinsResultsParserUtil.toString(JenkinsResultsParserUtil.getLocalURL(propertiesURL))));
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  List<String> slaves=new ArrayList<>();
  String key="master.slaves(" + masterName + ")";
  if (properties.containsKey(key)) {
    String value=properties.getProperty(key);
    for (    String token : value.split(",")) {
      if (token.contains("..")) {
        slaves.addAll(_expand(token));
        continue;
      }
      slaves.add(token);
    }
  }
  if (verify) {
    try {
      Map<String,FutureTask<Boolean>> validationTasks=_startParallelTasks(slaves);
      List<String> badSlaves=new ArrayList<>(slaves.size());
      int timeoutCount=0;
      for (      String slave : slaves) {
        FutureTask<Boolean> futureTask=validationTasks.get(slave);
        try {
          if (!futureTask.get(30,TimeUnit.SECONDS)) {
            badSlaves.add(slave);
          }
        }
 catch (        TimeoutException te) {
          timeoutCount++;
          badSlaves.add(slave);
        }
      }
      System.out.println("timeout count: " + timeoutCount);
      System.out.println(badSlaves.size() + " Bad Slaves: \n" + badSlaves);
      slaves.removeAll(badSlaves);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  return slaves;
}
