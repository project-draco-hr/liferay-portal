{
  Object[] objects=getOrganizationAndTeam();
  Organization organization=(Organization)objects[0];
  long companyId=organization.getCompanyId();
  long groupId=organization.getGroupId();
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  List<Role> actualRoles=RoleLocalServiceUtil.getGroupRelatedRoles(groupId);
  List<Role> allRoles=RoleLocalServiceUtil.getRoles(companyId);
  List<Role> expectedRoles=new ArrayList<>();
  for (  Role role : allRoles) {
    int type=role.getType();
    if ((type == RoleConstants.TYPE_REGULAR) || ((type == RoleConstants.TYPE_ORGANIZATION) && group.isOrganization()) || ((type == RoleConstants.TYPE_SITE) && (group.isLayout() || group.isLayoutSetPrototype() || group.isSite()))) {
      expectedRoles.add(role);
    }
 else     if ((type == RoleConstants.TYPE_PROVIDER) && role.isTeam()) {
      Team team=TeamLocalServiceUtil.getTeam(role.getClassPK());
      if (team.getGroupId() == groupId) {
        expectedRoles.add(role);
      }
    }
  }
  Comparator roleIdComparator=new RoleRoleIdComparator();
  Collections.sort(actualRoles,roleIdComparator);
  Collections.sort(expectedRoles,roleIdComparator);
  Assert.assertEquals(actualRoles,expectedRoles);
}
