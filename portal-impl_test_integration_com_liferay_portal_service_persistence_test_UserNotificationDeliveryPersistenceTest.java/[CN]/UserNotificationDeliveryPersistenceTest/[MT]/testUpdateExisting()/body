{
  long pk=RandomTestUtil.nextLong();
  UserNotificationDelivery newUserNotificationDelivery=_persistence.create(pk);
  newUserNotificationDelivery.setMvccVersion(RandomTestUtil.nextLong());
  newUserNotificationDelivery.setCompanyId(RandomTestUtil.nextLong());
  newUserNotificationDelivery.setUserId(RandomTestUtil.nextLong());
  newUserNotificationDelivery.setPortletId(RandomTestUtil.randomString());
  newUserNotificationDelivery.setClassNameId(RandomTestUtil.nextLong());
  newUserNotificationDelivery.setNotificationType(RandomTestUtil.nextInt());
  newUserNotificationDelivery.setDeliveryType(RandomTestUtil.nextInt());
  newUserNotificationDelivery.setDeliver(RandomTestUtil.randomBoolean());
  _userNotificationDeliveries.add(_persistence.update(newUserNotificationDelivery));
  UserNotificationDelivery existingUserNotificationDelivery=_persistence.findByPrimaryKey(newUserNotificationDelivery.getPrimaryKey());
  Assert.assertEquals(existingUserNotificationDelivery.getMvccVersion(),newUserNotificationDelivery.getMvccVersion());
  Assert.assertEquals(existingUserNotificationDelivery.getUserNotificationDeliveryId(),newUserNotificationDelivery.getUserNotificationDeliveryId());
  Assert.assertEquals(existingUserNotificationDelivery.getCompanyId(),newUserNotificationDelivery.getCompanyId());
  Assert.assertEquals(existingUserNotificationDelivery.getUserId(),newUserNotificationDelivery.getUserId());
  Assert.assertEquals(existingUserNotificationDelivery.getPortletId(),newUserNotificationDelivery.getPortletId());
  Assert.assertEquals(existingUserNotificationDelivery.getClassNameId(),newUserNotificationDelivery.getClassNameId());
  Assert.assertEquals(existingUserNotificationDelivery.getNotificationType(),newUserNotificationDelivery.getNotificationType());
  Assert.assertEquals(existingUserNotificationDelivery.getDeliveryType(),newUserNotificationDelivery.getDeliveryType());
  Assert.assertEquals(existingUserNotificationDelivery.getDeliver(),newUserNotificationDelivery.getDeliver());
}
