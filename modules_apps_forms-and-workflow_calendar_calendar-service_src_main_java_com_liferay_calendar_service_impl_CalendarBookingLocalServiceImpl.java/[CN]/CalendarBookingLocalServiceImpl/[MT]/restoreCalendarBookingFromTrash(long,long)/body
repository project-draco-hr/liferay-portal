{
  CalendarBooking calendarBooking=getCalendarBooking(calendarBookingId);
  if (!calendarBooking.isInTrash()) {
    throw new RestoreEntryException(RestoreEntryException.INVALID_STATUS);
  }
  if (!calendarBooking.isMasterBooking()) {
    return calendarBooking;
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setUserId(userId);
  TrashEntry trashEntry=trashEntryLocalService.getEntry(CalendarBooking.class.getName(),calendarBookingId);
  calendarBookingLocalService.updateStatus(userId,calendarBookingId,trashEntry.getStatus(),serviceContext);
  socialActivityCounterLocalService.enableActivityCounters(CalendarBooking.class.getName(),calendarBookingId);
  socialActivityLocalService.addActivity(userId,calendarBooking.getGroupId(),CalendarBooking.class.getName(),calendarBookingId,SocialActivityConstants.TYPE_RESTORE_FROM_TRASH,getExtraDataJSON(calendarBooking),0);
  WorkflowHandlerRegistryUtil.startWorkflowInstance(calendarBooking.getCompanyId(),calendarBooking.getGroupId(),userId,CalendarBooking.class.getName(),calendarBooking.getCalendarBookingId(),calendarBooking,serviceContext);
  if (calendarBooking.isMasterRecurringBooking()) {
    List<CalendarBooking> recurringCalendarBookings=getRecurringCalendarBookings(calendarBooking);
    for (    CalendarBooking recurringCalendarBooking : recurringCalendarBookings) {
      if (recurringCalendarBooking.equals(calendarBooking)) {
        continue;
      }
      calendarBookingLocalService.updateStatus(userId,recurringCalendarBooking,trashEntry.getStatus(),serviceContext);
    }
  }
  return calendarBooking;
}
