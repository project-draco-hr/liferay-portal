{
  CalendarBooking calendarBooking=calendarBookingPersistence.findByPrimaryKey(calendarBookingId);
  String oldRecurrence=calendarBooking.getRecurrence();
  deleteCalendarBookingInstance(calendarBooking,instanceIndex,allFollowing,false);
  Map<Locale,String> updatedTitleMap=calendarBooking.getTitleMap();
  updatedTitleMap.putAll(titleMap);
  Map<Locale,String> updatedDescriptionMap=calendarBooking.getDescriptionMap();
  updatedDescriptionMap.putAll(descriptionMap);
  if (allFollowing) {
    Calendar calendar=calendarLocalService.getCalendar(calendarId);
    List<CalendarBooking> followingRelatedCalendarBookings=getFollowingRelatedCalendarBookings(calendarBooking,startTime);
    List<String> unchangedList=getUnchangedList(calendarBooking,calendarId,titleMap,descriptionMap,location,startTime,endTime,allDay,firstReminder,firstReminderType,secondReminder,secondReminderType);
    Recurrence recurrenceObj=RecurrenceSerializer.deserialize(recurrence,calendar.getTimeZone());
    if (oldRecurrence.equals(recurrence) && (recurrenceObj.getCount() > 0)) {
      recurrenceObj.setCount(recurrenceObj.getCount() - instanceIndex);
      recurrence=RecurrenceSerializer.serialize(recurrenceObj);
    }
    updateCalendarBookingsByChanges(userId,calendarId,childCalendarIds,updatedTitleMap,updatedDescriptionMap,location,startTime,endTime,allDay,firstReminder,firstReminderType,secondReminder,secondReminderType,serviceContext,followingRelatedCalendarBookings,unchangedList);
  }
 else {
    recurrence=StringPool.BLANK;
  }
  return addCalendarBooking(userId,calendarId,childCalendarIds,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,calendarBooking.getRecurringCalendarBookingId(),updatedTitleMap,updatedDescriptionMap,location,startTime,endTime,allDay,recurrence,firstReminder,firstReminderType,secondReminder,secondReminderType,serviceContext);
}
