{
  Calendar calendar=calendarPersistence.findByPrimaryKey(calendarId);
  CalendarBooking calendarBooking=calendarBookingPersistence.findByPrimaryKey(calendarBookingId);
  for (  Map.Entry<Locale,String> entry : descriptionMap.entrySet()) {
    String sanitizedDescription=SanitizerUtil.sanitize(calendar.getCompanyId(),calendar.getGroupId(),userId,CalendarBooking.class.getName(),calendarBookingId,ContentTypes.TEXT_HTML,Sanitizer.MODE_ALL,entry.getValue(),null);
    descriptionMap.put(entry.getKey(),sanitizedDescription);
  }
  java.util.Calendar startTimeJCalendar=JCalendarUtil.getJCalendar(startTime);
  java.util.Calendar endTimeJCalendar=JCalendarUtil.getJCalendar(endTime);
  if (allDay) {
    startTimeJCalendar=JCalendarUtil.toMidnightJCalendar(startTimeJCalendar);
    endTimeJCalendar=JCalendarUtil.toLastHourJCalendar(endTimeJCalendar);
  }
  if (firstReminder < secondReminder) {
    long originalSecondReminder=secondReminder;
    secondReminder=firstReminder;
    firstReminder=originalSecondReminder;
  }
  validate(startTimeJCalendar,endTimeJCalendar,recurrence);
  calendarBooking.setGroupId(calendar.getGroupId());
  calendarBooking.setModifiedDate(serviceContext.getModifiedDate(null));
  calendarBooking.setCalendarId(calendarId);
  calendarBooking.setCalendarResourceId(calendar.getCalendarResourceId());
  Map<Locale,String> updatedTitleMap=calendarBooking.getTitleMap();
  updatedTitleMap.putAll(titleMap);
  calendarBooking.setTitleMap(updatedTitleMap,serviceContext.getLocale());
  Map<Locale,String> updatedDescriptionMap=calendarBooking.getDescriptionMap();
  updatedDescriptionMap.putAll(descriptionMap);
  calendarBooking.setDescriptionMap(updatedDescriptionMap,serviceContext.getLocale());
  calendarBooking.setLocation(location);
  calendarBooking.setStartTime(startTimeJCalendar.getTimeInMillis());
  calendarBooking.setEndTime(endTimeJCalendar.getTimeInMillis());
  calendarBooking.setAllDay(allDay);
  calendarBooking.setRecurrence(recurrence);
  calendarBooking.setFirstReminder(firstReminder);
  calendarBooking.setFirstReminderType(firstReminderType);
  calendarBooking.setSecondReminder(secondReminder);
  calendarBooking.setSecondReminderType(secondReminderType);
  if (calendarBooking.isMasterBooking() && !calendarBooking.isDraft() && !calendarBooking.isPending()) {
    calendarBooking.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  calendarBooking.setExpandoBridgeAttributes(serviceContext);
  calendarBookingPersistence.update(calendarBooking);
  if (!ExportImportThreadLocal.isImportInProcess()) {
    addChildCalendarBookings(calendarBooking,childCalendarIds,serviceContext);
  }
  updateAsset(userId,calendarBooking,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds(),serviceContext.getAssetPriority());
  socialActivityLocalService.addActivity(userId,calendarBooking.getGroupId(),CalendarBooking.class.getName(),calendarBookingId,CalendarActivityKeys.UPDATE_CALENDAR_BOOKING,getExtraDataJSON(calendarBooking),0);
  sendNotification(calendarBooking,NotificationTemplateType.UPDATE,serviceContext);
  if (calendarBooking.isMasterBooking()) {
    WorkflowHandlerRegistryUtil.startWorkflowInstance(calendarBooking.getCompanyId(),calendarBooking.getGroupId(),userId,CalendarBooking.class.getName(),calendarBooking.getCalendarBookingId(),calendarBooking,serviceContext);
  }
  return calendarBooking;
}
