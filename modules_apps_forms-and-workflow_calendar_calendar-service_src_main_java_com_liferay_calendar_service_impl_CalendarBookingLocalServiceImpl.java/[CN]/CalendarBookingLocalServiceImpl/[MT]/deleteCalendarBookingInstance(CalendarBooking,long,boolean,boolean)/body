{
  Date now=new Date();
  java.util.Calendar startTimeJCalendar=JCalendarUtil.getJCalendar(startTime,calendarBooking.getTimeZone());
  Recurrence recurrenceObj=calendarBooking.getRecurrenceObj();
  if (allFollowing) {
    if (relatedBookings) {
      List<CalendarBooking> followingRelatedCalendarBookings=getFollowingRelatedCalendarBookings(calendarBooking,startTime);
      for (      CalendarBooking followingRelatedCalendarBooking : followingRelatedCalendarBookings) {
        deleteCalendarBooking(followingRelatedCalendarBooking,false);
      }
    }
    if (startTime == calendarBooking.getStartTime()) {
      calendarBookingLocalService.deleteCalendarBooking(calendarBooking,false);
      return;
    }
    if (recurrenceObj.getCount() > 0) {
      recurrenceObj.setCount(0);
    }
    startTimeJCalendar.add(java.util.Calendar.DATE,-1);
    recurrenceObj.setUntilJCalendar(startTimeJCalendar);
  }
 else {
    CalendarBooking calendarBookingInstance=RecurrenceUtil.getCalendarBookingInstance(calendarBooking,1);
    if (calendarBookingInstance == null) {
      calendarBookingLocalService.deleteCalendarBooking(calendarBooking,false);
      return;
    }
    recurrenceObj.addExceptionDate(startTimeJCalendar);
  }
  String recurrence=RecurrenceSerializer.serialize(recurrenceObj);
  updateChildCalendarBookings(calendarBooking,now,recurrence);
}
