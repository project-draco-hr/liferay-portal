{
  if (!calendarBooking.isMasterBooking()) {
    return;
  }
  Map<Long,CalendarBooking> childCalendarBookingMap=new HashMap<>();
  List<CalendarBooking> childCalendarBookings=calendarBookingPersistence.findByParentCalendarBookingId(calendarBooking.getCalendarBookingId());
  for (  CalendarBooking childCalendarBooking : childCalendarBookings) {
    if (childCalendarBooking.isMasterBooking() || (childCalendarBooking.isDenied() && ArrayUtil.contains(childCalendarIds,childCalendarBooking.getCalendarId()))) {
      continue;
    }
    deleteCalendarBooking(childCalendarBooking.getCalendarBookingId());
    childCalendarBookingMap.put(childCalendarBooking.getCalendarId(),childCalendarBooking);
  }
  for (  long calendarId : childCalendarIds) {
    int count=calendarBookingPersistence.countByC_P(calendarId,calendarBooking.getCalendarBookingId());
    if (count > 0) {
      continue;
    }
    long firstReminder=calendarBooking.getFirstReminder();
    String firstReminderType=calendarBooking.getFirstReminderType();
    long secondReminder=calendarBooking.getSecondReminder();
    String secondReminderType=calendarBooking.getSecondReminderType();
    if (childCalendarBookingMap.containsKey(calendarId)) {
      CalendarBooking oldChildCalendarBooking=childCalendarBookingMap.get(calendarId);
      firstReminder=oldChildCalendarBooking.getFirstReminder();
      firstReminderType=oldChildCalendarBooking.getFirstReminderType();
      secondReminder=oldChildCalendarBooking.getSecondReminder();
      secondReminderType=oldChildCalendarBooking.getSecondReminderType();
    }
    serviceContext.setAttribute("sendNotification",false);
    CalendarBooking childCalendarBooking=addCalendarBooking(calendarBooking.getUserId(),calendarId,new long[0],calendarBooking.getCalendarBookingId(),calendarBooking.getTitleMap(),calendarBooking.getDescriptionMap(),calendarBooking.getLocation(),calendarBooking.getStartTime(),calendarBooking.getEndTime(),calendarBooking.getAllDay(),calendarBooking.getRecurrence(),firstReminder,firstReminderType,secondReminder,secondReminderType,serviceContext);
    serviceContext.setAttribute("sendNotification",true);
    int workflowAction=GetterUtil.getInteger(serviceContext.getAttribute("workflowAction"));
    if (childCalendarBookingMap.containsKey(calendarId)) {
      CalendarBooking oldChildCalendarBooking=childCalendarBookingMap.get(calendarId);
      if ((calendarBooking.getStartTime() == oldChildCalendarBooking.getStartTime()) && (calendarBooking.getEndTime() == oldChildCalendarBooking.getEndTime()) && (workflowAction != WorkflowConstants.ACTION_SAVE_DRAFT)) {
        updateStatus(childCalendarBooking.getUserId(),childCalendarBooking,oldChildCalendarBooking.getStatus(),serviceContext);
      }
    }
    NotificationTemplateType notificationTemplateType=NotificationTemplateType.INVITE;
    if (childCalendarBookingMap.containsKey(childCalendarBooking.getCalendarId())) {
      notificationTemplateType=NotificationTemplateType.UPDATE;
    }
    sendNotification(childCalendarBooking,notificationTemplateType,serviceContext);
  }
}
