{
  if (!portletDataContext.isWithinDateRange(folder.getLastPostDate())) {
    return;
  }
  if (folder.isMountPoint()) {
    Repository repository=RepositoryUtil.findByPrimaryKey(folder.getRepositoryId());
    exportRepository(portletDataContext,repositoriesElement,repositoryEntriesElement,repository);
    return;
  }
 else   if (!folder.isDefaultRepository()) {
    return;
  }
  exportParentFolder(portletDataContext,fileEntryTypesElement,foldersElement,repositoriesElement,repositoryEntriesElement,folder.getParentFolderId());
  String path=getFolderPath(portletDataContext,folder);
  if (!portletDataContext.isPathNotProcessed(path)) {
    return;
  }
  Element folderElement=foldersElement.addElement("folder");
  exportFolderFileEntryTypes(portletDataContext,folder,fileEntryTypesElement,folderElement);
  portletDataContext.addClassedModel(folderElement,path,folder,NAMESPACE);
  if (recurse) {
    List<Folder> folders=FolderUtil.findByR_P(folder.getRepositoryId(),folder.getFolderId());
    for (    Folder curFolder : folders) {
      exportFolder(portletDataContext,fileEntryTypesElement,foldersElement,fileEntriesElement,fileShortcutsElement,fileRanksElement,repositoriesElement,repositoryEntriesElement,curFolder,recurse);
    }
  }
  List<FileEntry> fileEntries=FileEntryUtil.findByR_F(folder.getRepositoryId(),folder.getFolderId());
  for (  FileEntry fileEntry : fileEntries) {
    exportFileEntry(portletDataContext,fileEntryTypesElement,foldersElement,fileEntriesElement,fileRanksElement,repositoriesElement,repositoryEntriesElement,fileEntry,true);
  }
  if (portletDataContext.getBooleanParameter(NAMESPACE,"shortcuts")) {
    List<DLFileShortcut> fileShortcuts=DLFileShortcutUtil.findByG_F_A(folder.getRepositoryId(),folder.getFolderId(),true);
    for (    DLFileShortcut fileShortcut : fileShortcuts) {
      exportFileShortcut(portletDataContext,fileEntryTypesElement,foldersElement,fileShortcutsElement,repositoriesElement,repositoryEntriesElement,fileShortcut);
    }
  }
}
