{
  portletDataContext.addPermissions("com.liferay.portlet.documentlibrary",portletDataContext.getScopeGroupId());
  Element rootElement=addExportDataRootElement(portletDataContext);
  rootElement.addAttribute("group-id",String.valueOf(portletDataContext.getScopeGroupId()));
  long rootFolderId=GetterUtil.getLong(portletPreferences.getValue("rootFolderId",null));
  if (rootFolderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    rootElement.addAttribute("root-folder-id",String.valueOf(rootFolderId));
  }
  final Group companyGroup=GroupLocalServiceUtil.getCompanyGroup(portletDataContext.getCompanyId());
  ActionableDynamicQuery fileEntryTypeActionableDynamicQuery=new DLFileEntryTypeActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
      Property property=PropertyFactoryUtil.forName("groupId");
      Object[] fileEntryTypesGroups=new Object[]{portletDataContext.getScopeGroupId(),companyGroup.getGroupId()};
      dynamicQuery.add(property.in(ListUtil.fromArray(fileEntryTypesGroups)));
    }
    @Override protected void performAction(    Object object) throws PortalException {
      DLFileEntryType fileEntryType=(DLFileEntryType)object;
      if (fileEntryType.isExportable()) {
        StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,fileEntryType);
      }
    }
  }
;
  fileEntryTypeActionableDynamicQuery.performActions();
  ActionableDynamicQuery folderActionableDynamicQuery=new DLFolderActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
    }
    @Override protected void performAction(    Object object) throws PortalException, SystemException {
      DLFolder dlFolder=(DLFolder)object;
      Folder folder=DLAppLocalServiceUtil.getFolder(dlFolder.getFolderId());
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,folder);
    }
  }
;
  folderActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  folderActionableDynamicQuery.performActions();
  ActionableDynamicQuery fileEntryActionableDynamicQuery=new DLFileEntryActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
    }
    @Override protected void performAction(    Object object) throws PortalException, SystemException {
      DLFileEntry dlFileEntry=(DLFileEntry)object;
      FileEntry fileEntry=DLAppLocalServiceUtil.getFileEntry(dlFileEntry.getFileEntryId());
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,fileEntry);
    }
  }
;
  fileEntryActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  fileEntryActionableDynamicQuery.performActions();
  if (!portletDataContext.getBooleanParameter(NAMESPACE,"shortcuts")) {
    return getExportDataRootElementString(rootElement);
  }
  ActionableDynamicQuery fileShortcutActionableDynamicQuery=new DLFileShortcutActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
      Property property=PropertyFactoryUtil.forName("active");
      dynamicQuery.add(property.eq(Boolean.TRUE));
    }
    @Override protected void performAction(    Object object) throws PortalException {
      DLFileShortcut fileShortcut=(DLFileShortcut)object;
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,fileShortcut);
    }
  }
;
  fileShortcutActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  fileShortcutActionableDynamicQuery.performActions();
  return getExportDataRootElementString(rootElement);
}
