{
  return new RepositoryExportActionableDynamicQuery(portletDataContext){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      super.addCriteria(dynamicQuery);
      Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
      long liferayRepositoryClassNameId=PortalUtil.getClassNameId(LiferayRepository.class);
      dynamicQuery.add(classNameIdProperty.ne(liferayRepositoryClassNameId));
      Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
      Property portletIdProperty=PropertyFactoryUtil.forName("portletId");
      disjunction.add(portletIdProperty.isNull());
      disjunction.add(portletIdProperty.eq(StringPool.BLANK));
      dynamicQuery.add(disjunction);
    }
    @Override protected StagedModelType getStagedModelType(){
      return new StagedModelType(PortalUtil.getClassNameId(Repository.class.getName()),StagedModelType.REFERRER_CLASS_NAME_ID_ALL);
    }
  }
;
}
