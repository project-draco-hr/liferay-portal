{
  ExportActionableDynamicQuery exportActionableDynamicQuery=RepositoryLocalServiceUtil.getExportActionableDynamicQuery(portletDataContext);
  final ActionableDynamicQuery.AddCriteriaMethod addCriteriaMethod=exportActionableDynamicQuery.getAddCriteriaMethod();
  exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      addCriteriaMethod.addCriteria(dynamicQuery);
      Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
      long liferayRepositoryClassNameId=PortalUtil.getClassNameId(LiferayRepository.class);
      long tempFileRepositoryClassNameId=PortalUtil.getClassNameId(TempFileEntryUtil.class);
      Conjunction conjunction=RestrictionsFactoryUtil.conjunction();
      conjunction.add(classNameIdProperty.ne(liferayRepositoryClassNameId));
      conjunction.add(classNameIdProperty.ne(tempFileRepositoryClassNameId));
      dynamicQuery.add(conjunction);
      Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
      Property portletIdProperty=PropertyFactoryUtil.forName("portletId");
      disjunction.add(portletIdProperty.isNull());
      disjunction.add(portletIdProperty.eq(StringPool.BLANK));
      dynamicQuery.add(disjunction);
    }
  }
);
  exportActionableDynamicQuery.setStagedModelType(new StagedModelType(PortalUtil.getClassNameId(Repository.class.getName()),StagedModelType.REFERRER_CLASS_NAME_ID_ALL));
  return exportActionableDynamicQuery;
}
