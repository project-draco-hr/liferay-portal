{
  return new DLFileEntryExportActionableDynamicQuery(portletDataContext){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      super.addCriteria(dynamicQuery);
      Property property=PropertyFactoryUtil.forName("repositoryId");
      dynamicQuery.add(property.eq(portletDataContext.getScopeGroupId()));
    }
    @Override protected StagedModelType getStagedModelType(){
      return new StagedModelType(FileEntry.class);
    }
    @Override protected void performAction(    Object object) throws PortalException, SystemException {
      DLFileEntry dlFileEntry=(DLFileEntry)object;
      if (dlFileEntry.isInTrash() || dlFileEntry.isInTrashContainer()) {
        return;
      }
      FileEntry fileEntry=DLAppLocalServiceUtil.getFileEntry(dlFileEntry.getFileEntryId());
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,fileEntry);
    }
    @Override public long performCount() throws PortalException, SystemException {
      ManifestSummary manifestSummary=portletDataContext.getManifestSummary();
      DateRange dateRange=null;
      if (portletDataContext.hasDateRange()) {
        dateRange=new DateRange(portletDataContext.getStartDate(),portletDataContext.getEndDate());
      }
      long modelAdditionCount=DLFileEntryLocalServiceUtil.getFileEntriesCount(portletDataContext.getScopeGroupId(),dateRange,portletDataContext.getScopeGroupId(),new QueryDefinition(WorkflowConstants.STATUS_APPROVED));
      StagedModelType stagedModelType=getStagedModelType();
      manifestSummary.addModelAdditionCount(stagedModelType.toString(),modelAdditionCount);
      long modelDeletionCount=ExportImportHelperUtil.getModelDeletionCount(portletDataContext,stagedModelType);
      manifestSummary.addModelDeletionCount(stagedModelType.toString(),modelDeletionCount);
      return modelAdditionCount;
    }
  }
;
}
