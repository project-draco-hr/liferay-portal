{
  ActionableDynamicQuery socialRequestActionableDynamicQuery=new SocialRequestActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
      long classNameId=PortalUtil.getClassNameId(Group.class);
      dynamicQuery.add(classNameIdProperty.eq(classNameId));
      Property classPKProperty=PropertyFactoryUtil.forName("classPK");
      DynamicQuery groupDynamicQuery=DynamicQueryFactoryUtil.forClass(Group.class);
      Projection projection=ProjectionFactoryUtil.property("groupId");
      groupDynamicQuery.setProjection(projection);
      dynamicQuery.add(classPKProperty.notIn(groupDynamicQuery));
    }
    @Override protected void performAction(    Object object) throws SystemException {
      SocialRequestLocalServiceUtil.deleteRequest((SocialRequest)object);
    }
  }
;
  socialRequestActionableDynamicQuery.performActions();
}
