{
  ActionableDynamicQuery socialRequestActionableDynamicQuery=new SocialRequestActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      Property classNameId=PropertyFactoryUtil.forName("classNameId");
      dynamicQuery.add(classNameId.eq(PortalUtil.getClassNameId(Group.class)));
      Property classPK=PropertyFactoryUtil.forName("classPK");
      DynamicQuery groupIdDq=DynamicQueryFactoryUtil.forClass(Group.class,PortalClassLoaderUtil.getClassLoader());
      Projection groupIdProjection=ProjectionFactoryUtil.property("groupId");
      groupIdDq.setProjection(groupIdProjection);
      dynamicQuery.add(classPK.notIn(groupIdDq));
    }
    @Override protected void performAction(    Object object) throws PortalException, SystemException {
      SocialRequestLocalServiceUtil.deleteRequest((SocialRequest)object);
    }
  }
;
  long requestCount=socialRequestActionableDynamicQuery.performCount();
  if (requestCount == 0) {
    return;
  }
  socialRequestActionableDynamicQuery.performActions();
}
