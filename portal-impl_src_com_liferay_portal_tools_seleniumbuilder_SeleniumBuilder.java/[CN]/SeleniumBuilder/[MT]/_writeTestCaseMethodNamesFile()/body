{
  Map<String,Set<String>> testCaseMethodNameMap=new TreeMap<String,Set<String>>();
  Set<String> testCaseMethodNames=new TreeSet<String>();
  Set<String> testCaseNames=_seleniumBuilderContext.getTestCaseNames();
  for (  String testCaseName : testCaseNames) {
    Element rootElement=_seleniumBuilderContext.getTestCaseRootElement(testCaseName);
    if (GetterUtil.getBoolean(rootElement.attributeValue("ignore"))) {
      continue;
    }
    String componentName=rootElement.attributeValue("component-name");
    Set<String> compontentTestCaseMethodNames=new TreeSet<String>();
    if (testCaseMethodNameMap.containsKey(componentName)) {
      compontentTestCaseMethodNames=testCaseMethodNameMap.get(componentName);
    }
    String extendsTestCaseName=rootElement.attributeValue("extends");
    if (extendsTestCaseName != null) {
      Element extendsRootElement=_seleniumBuilderContext.getTestCaseRootElement(extendsTestCaseName);
      List<Element> commandElements=_seleniumBuilderFileUtil.getAllChildElements(extendsRootElement,"command");
      for (      Element commandElement : commandElements) {
        String testCaseMethodName=testCaseName + "TestCase#test" + commandElement.attributeValue("name");
        compontentTestCaseMethodNames.add(testCaseMethodName);
        testCaseMethodNames.add(testCaseMethodName);
      }
    }
    List<Element> commandElements=_seleniumBuilderFileUtil.getAllChildElements(rootElement,"command");
    for (    Element commandElement : commandElements) {
      String testCaseMethodName=testCaseName + "TestCase#test" + commandElement.attributeValue("name");
      compontentTestCaseMethodNames.add(testCaseMethodName);
      testCaseMethodNames.add(testCaseMethodName);
    }
    testCaseMethodNameMap.put(componentName,compontentTestCaseMethodNames);
  }
  List<String> componentNames=_seleniumBuilderFileUtil.getComponentNames();
  StringBundler sb=new StringBundler();
  for (  String componentName : componentNames) {
    String componentNameKey=componentName;
    componentName=StringUtil.replace(componentName,"-","_");
    componentName=StringUtil.upperCase(componentName);
    sb.append(componentName);
    sb.append("_TEST_CASE_METHOD_NAMES=");
    if (testCaseMethodNameMap.containsKey(componentNameKey)) {
      Set<String> compontentTestCaseMethodNames=testCaseMethodNameMap.get(componentNameKey);
      String testCaseMethodNamesString=StringUtil.merge(compontentTestCaseMethodNames.toArray(new String[compontentTestCaseMethodNames.size()]),StringPool.SPACE);
      sb.append(testCaseMethodNamesString);
      sb.append("\n");
    }
 else {
      sb.append("PortalSmokeTestCase#testSmoke\n");
    }
  }
  sb.append("\n");
  String[] productNames={"marketplace","portal","social-office"};
  for (  String productName : productNames) {
    Set<String> productTestCaseMethodNames=new TreeSet<String>();
    String productKey=productName;
    productName=StringUtil.replace(productName,"-","_");
    productName=StringUtil.upperCase(productName);
    sb.append(productName);
    sb.append("_TEST_CASE_METHOD_NAMES=");
    for (    String componentName : componentNames) {
      if (componentName.startsWith(productKey) && testCaseMethodNameMap.containsKey(componentName)) {
        productTestCaseMethodNames.addAll(testCaseMethodNameMap.get(componentName));
      }
    }
    if (productTestCaseMethodNames.size() != 0) {
      String testCaseMethodNamesString=StringUtil.merge(productTestCaseMethodNames.toArray(new String[productTestCaseMethodNames.size()]),StringPool.SPACE);
      sb.append(testCaseMethodNamesString);
      sb.append("\n");
    }
 else {
      sb.append("PortalSmokeTestCase#testSmoke\n");
    }
  }
  sb.append("\nTEST_CASE_METHOD_NAMES=");
  String testCaseMethodNamesString=StringUtil.merge(testCaseMethodNames.toArray(new String[testCaseMethodNames.size()]),StringPool.SPACE);
  sb.append(testCaseMethodNamesString);
  _seleniumBuilderFileUtil.writeFile("../../../test.case.method.names.properties",sb.toString(),false);
}
