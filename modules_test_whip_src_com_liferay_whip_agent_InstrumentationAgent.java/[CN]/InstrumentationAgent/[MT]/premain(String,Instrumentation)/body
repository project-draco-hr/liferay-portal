{
  String[] arguments=agentArguments.split(";");
  String[] includes=arguments[0].split(",");
  String[] excludes=arguments[1].split(",");
  if (Boolean.getBoolean("junit.code.coverage")) {
    final WhipClassFileTransformer whipClassFileTransformer=new WhipClassFileTransformer(includes,excludes);
    instrumentation.addTransformer(whipClassFileTransformer);
    Runtime runtime=Runtime.getRuntime();
    runtime.addShutdownHook(new Thread(){
      @Override public void run(){
        ProjectDataUtil.captureProjectData(true);
      }
    }
);
  }
 else   if (instrumentation.isRedefineClassesSupported() && instrumentation.isRetransformClassesSupported()) {
    _instrumentation=instrumentation;
    _includes=includes;
    _excludes=excludes;
    File dataFile=new File(System.getProperty("net.sourceforge.cobertura.datafile"));
    dataFile.delete();
  }
 else {
    StringBuilder sb=new StringBuilder();
    sb.append("Current JVM is not capable for dynamic ");
    sb.append("instrumententation. Instrumentation ");
    if (instrumentation.isRetransformClassesSupported()) {
      sb.append("supports ");
    }
 else {
      sb.append("does not support ");
    }
    sb.append("restranforming classes. Instrumentation ");
    if (instrumentation.isRedefineClassesSupported()) {
      sb.append("supports ");
    }
 else {
      sb.append("does not support ");
    }
    sb.append("redefining classes. Dynamic instrumententation is ");
    sb.append("disabled.");
    System.out.println(sb.toString());
  }
}
