{
  int oldStatus=page.getStatus();
  String oldTitle=page.getTitle();
  if (oldStatus == WorkflowConstants.STATUS_PENDING) {
    page.setStatus(WorkflowConstants.STATUS_DRAFT);
    wikiPagePersistence.update(page);
  }
  List<WikiPage> pageVersions=wikiPagePersistence.findByR_N_H(page.getResourcePrimKey(),page.getNodeId(),false);
  pageVersions=ListUtil.sort(pageVersions,new PageVersionComparator());
  List<ObjectValuePair<Long,Integer>> pageVersionStatusOVPs=new ArrayList<>();
  if ((pageVersions != null) && !pageVersions.isEmpty()) {
    pageVersionStatusOVPs=getPageVersionStatuses(pageVersions);
  }
  page=updateStatus(userId,page,WorkflowConstants.STATUS_IN_TRASH,new ServiceContext(),new HashMap<String,Serializable>());
  WikiPageResource pageResource=wikiPageResourcePersistence.fetchByPrimaryKey(page.getResourcePrimKey());
  UnicodeProperties typeSettingsProperties=new UnicodeProperties();
  typeSettingsProperties.put("title",page.getTitle());
  TrashEntry trashEntry=trashEntryLocalService.addTrashEntry(userId,page.getGroupId(),WikiPage.class.getName(),page.getResourcePrimKey(),page.getUuid(),null,oldStatus,pageVersionStatusOVPs,typeSettingsProperties);
  String trashTitle=TrashUtil.getTrashTitle(trashEntry.getEntryId());
  for (  WikiPage pageVersion : pageVersions) {
    pageVersion.setTitle(trashTitle);
    pageVersion.setStatus(WorkflowConstants.STATUS_IN_TRASH);
    wikiPagePersistence.update(pageVersion);
  }
  pageResource.setTitle(trashTitle);
  wikiPageResourcePersistence.update(pageResource);
  page.setTitle(trashTitle);
  wikiPagePersistence.update(page);
  moveDependentChildPagesToTrash(page.getNodeId(),oldTitle,trashTitle,trashEntry.getEntryId(),true);
  moveDependentRedirectorPagesToTrash(page.getNodeId(),oldTitle,trashTitle,trashEntry.getEntryId(),true);
  assetEntryLocalService.updateVisible(WikiPage.class.getName(),page.getResourcePrimKey(),false);
  JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
  extraDataJSONObject.put("title",TrashUtil.getOriginalTitle(page.getTitle()));
  extraDataJSONObject.put("version",page.getVersion());
  SocialActivityHandlerUtil.addActivity(userId,page,SocialActivityConstants.TYPE_MOVE_TO_TRASH,extraDataJSONObject.toString(),0);
  if (!pageVersions.isEmpty()) {
    Indexer<WikiPage> indexer=IndexerRegistryUtil.nullSafeGetIndexer(WikiPage.class);
    for (    WikiPage pageVersion : pageVersions) {
      indexer.reindex(pageVersion);
    }
  }
  if (oldStatus == WorkflowConstants.STATUS_PENDING) {
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(page.getCompanyId(),page.getGroupId(),WikiPage.class.getName(),page.getPageId());
  }
  return page;
}
