{
  if (AsyncInvokeThreadLocal.isEnabled()) {
    return null;
  }
  Async async=findAnnotation(methodInvocation);
  if (async == _nullAsync) {
    return null;
  }
  Method method=methodInvocation.getMethod();
  if (method.getReturnType() != void.class) {
    if (_log.isWarnEnabled()) {
      _log.warn("Async annotation on method " + method.getName() + " does not return void");
    }
    return null;
  }
  String destinationName=null;
  if ((_destinationNames != null) && !_destinationNames.isEmpty()) {
    Object thisObject=methodInvocation.getThis();
    destinationName=_destinationNames.get(thisObject.getClass());
  }
  if (destinationName == null) {
    destinationName=_defaultDestinationName;
  }
  final String callbackDestinationName=destinationName;
  TransactionCommitCallbackRegistryUtil.registerCallback(new Callable<Void>(){
    @Override public Void call() throws Exception {
      MessageBusUtil.sendMessage(callbackDestinationName,new AsyncProcessCallable(methodInvocation));
      return null;
    }
  }
);
  return nullResult;
}
