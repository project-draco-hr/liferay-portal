{
  if (!AsyncInvokeThreadLocal.isEnabled()) {
    return null;
  }
  Async async=findAnnotation(methodInvocation);
  if (async == _nullAsync) {
    return null;
  }
  Method method=methodInvocation.getMethod();
  if (method.getReturnType() != void.class) {
    if (_log.isWarnEnabled()) {
      _log.warn("Async annotation on method " + method.getName() + " does not return void");
    }
    return null;
  }
  String destinationName=null;
  if ((_destinationNames != null) && !_destinationNames.isEmpty()) {
    Object thisObject=methodInvocation.getThis();
    destinationName=_destinationNames.get(thisObject.getClass());
  }
  if (destinationName == null) {
    destinationName=_defaultDestinationName;
  }
  MethodHandler methodHandler=new MethodHandler(methodInvocation.getMethod(),methodInvocation.getArguments());
  Object thisObject=methodInvocation.getThis();
  IdentifiableBean identifiableBean=(IdentifiableBean)thisObject;
  String beanIdentifier=identifiableBean.getBeanIdentifier();
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  String servletContextName=ClassLoaderPool.getContextName(contextClassLoader);
  MessageBusUtil.sendMessage(destinationName,new MethodHandler(_invokeMethodKey,methodHandler,servletContextName,beanIdentifier));
  return nullResult;
}
