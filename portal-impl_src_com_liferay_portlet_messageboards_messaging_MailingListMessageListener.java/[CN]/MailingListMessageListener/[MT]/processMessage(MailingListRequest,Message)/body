{
  if (MBUtil.hasMailIdHeader(mailMessage)) {
    return;
  }
  String from=null;
  Address[] addresses=mailMessage.getFrom();
  if (ArrayUtil.isNotEmpty(addresses)) {
    Address address=addresses[0];
    if (address instanceof InternetAddress) {
      from=((InternetAddress)address).getAddress();
    }
 else {
      from=address.toString();
    }
  }
  long companyId=mailingListRequest.getCompanyId();
  long groupId=mailingListRequest.getGroupId();
  long categoryId=mailingListRequest.getCategoryId();
  if (_log.isDebugEnabled()) {
    _log.debug("Category id " + categoryId);
  }
  boolean anonymous=false;
  User user=UserLocalServiceUtil.fetchUserByEmailAddress(companyId,from);
  if (user == null) {
    if (!mailingListRequest.isAllowAnonymous()) {
      return;
    }
    anonymous=true;
    user=UserLocalServiceUtil.getUserById(companyId,mailingListRequest.getUserId());
  }
  long parentMessageId=MBUtil.getParentMessageId(mailMessage);
  if (_log.isDebugEnabled()) {
    _log.debug("Parent message id " + parentMessageId);
  }
  MBMessage parentMessage=null;
  try {
    if (parentMessageId > 0) {
      parentMessage=MBMessageLocalServiceUtil.getMessage(parentMessageId);
    }
  }
 catch (  NoSuchMessageException nsme) {
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Parent message " + parentMessage);
  }
  MBMailMessage mbMailMessage=new MBMailMessage();
  MBUtil.collectPartContent(mailMessage,mbMailMessage);
  PermissionCheckerUtil.setThreadValues(user);
  MailingListThreadLocal.setSourceMailingList(true);
  String subject=MBUtil.getSubjectWithoutMessageId(mailMessage);
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddGroupPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setLayoutFullURL(PortalUtil.getLayoutFullURL(groupId,PortletKeys.MESSAGE_BOARDS));
  serviceContext.setScopeGroupId(groupId);
  List<ObjectValuePair<String,InputStream>> inputStreamOVPs=mbMailMessage.getInputStreamOVPs();
  try {
    if (parentMessage == null) {
      MBMessageServiceUtil.addMessage(groupId,categoryId,subject,mbMailMessage.getBody(),MBMessageConstants.DEFAULT_FORMAT,inputStreamOVPs,anonymous,0.0,true,serviceContext);
    }
 else {
      MBMessageServiceUtil.addMessage(parentMessage.getMessageId(),subject,mbMailMessage.getBody(),MBMessageConstants.DEFAULT_FORMAT,inputStreamOVPs,anonymous,0.0,true,serviceContext);
    }
  }
  finally {
    for (    ObjectValuePair<String,InputStream> inputStreamOVP : inputStreamOVPs) {
      InputStream inputStream=inputStreamOVP.getValue();
      StreamUtil.cleanUp(inputStream);
    }
  }
}
