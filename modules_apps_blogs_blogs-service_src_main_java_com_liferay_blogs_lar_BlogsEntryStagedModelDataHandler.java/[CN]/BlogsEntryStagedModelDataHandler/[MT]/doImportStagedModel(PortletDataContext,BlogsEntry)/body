{
  long userId=portletDataContext.getUserId(entry.getUserUuid());
  Element entryElement=portletDataContext.getImportDataStagedModelElement(entry);
  String content=_blogsEntryExportImportContentProcessor.replaceImportContentReferences(portletDataContext,entry,entry.getContent());
  entry.setContent(content);
  Calendar displayDateCal=CalendarFactoryUtil.getCalendar();
  displayDateCal.setTime(entry.getDisplayDate());
  int displayDateMonth=displayDateCal.get(Calendar.MONTH);
  int displayDateDay=displayDateCal.get(Calendar.DATE);
  int displayDateYear=displayDateCal.get(Calendar.YEAR);
  int displayDateHour=displayDateCal.get(Calendar.HOUR);
  int displayDateMinute=displayDateCal.get(Calendar.MINUTE);
  if (displayDateCal.get(Calendar.AM_PM) == Calendar.PM) {
    displayDateHour+=12;
  }
  boolean allowPingbacks=entry.isAllowPingbacks();
  boolean allowTrackbacks=entry.isAllowTrackbacks();
  String[] trackbacks=StringUtil.split(entry.getTrackbacks());
  long smallImageFileEntryId=0;
  ServiceContext serviceContext=portletDataContext.createServiceContext(entry);
  if (entry.isSmallImage()) {
    String smallImagePath=entryElement.attributeValue("small-image-path");
    if (Validator.isNotNull(entry.getSmallImageURL())) {
      String smallImageURL=_blogsEntryExportImportContentProcessor.replaceImportContentReferences(portletDataContext,entry,entry.getSmallImageURL());
      entry.setSmallImageURL(smallImageURL);
    }
 else     if (Validator.isNotNull(smallImagePath)) {
      String smallImageFileName=entry.getSmallImageId() + StringPool.PERIOD + entry.getSmallImageType();
      InputStream inputStream=null;
      try {
        inputStream=portletDataContext.getZipEntryAsInputStream(smallImagePath);
        FileEntry fileEntry=TempFileEntryUtil.addTempFileEntry(serviceContext.getScopeGroupId(),userId,BlogsEntry.class.getName(),smallImageFileName,inputStream,MimeTypesUtil.getContentType(smallImageFileName));
        smallImageFileEntryId=fileEntry.getFileEntryId();
      }
  finally {
        StreamUtil.cleanUp(inputStream);
      }
    }
  }
  if (smallImageFileEntryId == 0) {
    List<Element> attachmentElements=portletDataContext.getReferenceDataElements(entry,DLFileEntry.class,PortletDataContext.REFERENCE_TYPE_WEAK);
    for (    Element attachmentElement : attachmentElements) {
      InputStream inputStream=getSmallImageInputStream(portletDataContext,attachmentElement);
      if (inputStream != null) {
        String path=attachmentElement.attributeValue("path");
        FileEntry fileEntry=(FileEntry)portletDataContext.getZipEntryAsObject(path);
        FileEntry smallImageFileEntry=TempFileEntryUtil.addTempFileEntry(serviceContext.getScopeGroupId(),userId,BlogsEntry.class.getName(),fileEntry.getTitle(),inputStream,fileEntry.getMimeType());
        if (fileEntry != null) {
          smallImageFileEntryId=smallImageFileEntry.getFileEntryId();
        }
      }
    }
  }
  BlogsEntry importedEntry=null;
  if (portletDataContext.isDataStrategyMirror()) {
    serviceContext.setAttribute("urlTitle",entry.getUrlTitle());
    BlogsEntry existingEntry=fetchStagedModelByUuidAndGroupId(entry.getUuid(),portletDataContext.getScopeGroupId());
    if (existingEntry == null) {
      serviceContext.setUuid(entry.getUuid());
      importedEntry=_blogsEntryLocalService.addEntry(userId,entry.getTitle(),entry.getSubtitle(),entry.getDescription(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,entry.getCoverImageCaption(),null,null,serviceContext);
    }
 else {
      importedEntry=_blogsEntryLocalService.updateEntry(userId,existingEntry.getEntryId(),entry.getTitle(),entry.getSubtitle(),entry.getDescription(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,entry.getCoverImageCaption(),null,null,serviceContext);
    }
  }
 else {
    importedEntry=_blogsEntryLocalService.addEntry(userId,entry.getTitle(),entry.getSubtitle(),entry.getDescription(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,entry.getCoverImageCaption(),null,null,serviceContext);
  }
  importedEntry.setSmallImageId(smallImageFileEntryId);
  importedEntry.setSmallImageURL(entry.getSmallImageURL());
  importedEntry.setCoverImageFileEntryId(entry.getCoverImageFileEntryId());
  importedEntry.setCoverImageURL(entry.getCoverImageURL());
  _blogsEntryLocalService.updateBlogsEntry(importedEntry);
  portletDataContext.importClassedModel(entry,importedEntry);
}
