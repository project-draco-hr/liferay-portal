{
  if (Validator.isNotNull(newName) && !DLValidatorUtil.isValidName(newName)) {
    RestoreEntryException ree=new RestoreEntryException(RestoreEntryException.INVALID_NAME);
    ree.setErrorMessage("please-enter-a-valid-name");
    ree.setTrashEntryId(entryId);
    throw ree;
  }
  DLFileEntry dlFileEntry=getDLFileEntry(classPK);
  if (containerModelId == TrashEntryConstants.DEFAULT_CONTAINER_ID) {
    containerModelId=dlFileEntry.getFolderId();
  }
  if (Validator.isNotNull(newName)) {
    originalFileName=DLUtil.getSanitizedFileName(newName,dlFileEntry.getExtension());
    originalTitle=newName;
  }
  DLFolder duplicateDLFolder=_dlFolderLocalService.fetchFolder(dlFileEntry.getGroupId(),containerModelId,originalTitle);
  if (duplicateDLFolder != null) {
    RestoreEntryException ree=new RestoreEntryException(RestoreEntryException.DUPLICATE);
    ree.setDuplicateEntryId(duplicateDLFolder.getFolderId());
    ree.setOldName(duplicateDLFolder.getName());
    ree.setOverridable(false);
    ree.setTrashEntryId(entryId);
    throw ree;
  }
  DLFileEntry duplicateDLFileEntry=_dlFileEntryLocalService.fetchFileEntry(dlFileEntry.getGroupId(),containerModelId,originalTitle);
  if (duplicateDLFileEntry == null) {
    duplicateDLFileEntry=_dlFileEntryLocalService.fetchFileEntryByFileName(dlFileEntry.getGroupId(),containerModelId,originalFileName);
  }
  if (duplicateDLFileEntry != null) {
    RestoreEntryException ree=new RestoreEntryException(RestoreEntryException.DUPLICATE);
    ree.setDuplicateEntryId(duplicateDLFileEntry.getFileEntryId());
    ree.setOldName(duplicateDLFileEntry.getTitle());
    ree.setTrashEntryId(entryId);
    throw ree;
  }
}
