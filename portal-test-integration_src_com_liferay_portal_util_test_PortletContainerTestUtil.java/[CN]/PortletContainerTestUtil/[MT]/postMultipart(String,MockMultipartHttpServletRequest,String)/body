{
  if (mockMultipartHttpServletRequest.getInputStream() == null) {
    throw new IllegalStateException("Input stream is null");
  }
  String[] cookies=mockMultipartHttpServletRequest.getParameterValues("Cookie");
  if ((cookies == null) || (cookies.length == 0)) {
    throw new IllegalStateException("Cookie is null");
  }
  CloseableHttpClient httpClient=null;
  CloseableHttpResponse httpResponse=null;
  try {
    HttpClientBuilder httpClientBuilder=HttpClientBuilder.create();
    httpClient=httpClientBuilder.build();
    RequestBuilder requestBuilder=RequestBuilder.post(url);
    for (    String cookie : cookies) {
      requestBuilder.addHeader(new BasicHeader("Cookie",cookie));
    }
    byte[] bytes=FileUtil.getBytes(mockMultipartHttpServletRequest.getInputStream());
    MultipartEntityBuilder multipartEntityBuilder=MultipartEntityBuilder.create();
    ByteArrayBody byteArrayBody=new ByteArrayBody(bytes,ContentType.DEFAULT_BINARY,fileNameParameter);
    multipartEntityBuilder.addPart(fileNameParameter,byteArrayBody);
    requestBuilder.setEntity(multipartEntityBuilder.build());
    URI uri=requestBuilder.getUri();
    httpResponse=httpClient.execute(new HttpHost(uri.getHost(),uri.getPort()),requestBuilder.build());
    StatusLine statusLine=httpResponse.getStatusLine();
    HttpEntity httpEntity=httpResponse.getEntity();
    StringWriter stringWriter=new StringWriter();
    WriterOutputStream writerOutputStream=new WriterOutputStream(stringWriter);
    httpEntity.writeTo(writerOutputStream);
    stringWriter.close();
    return new Response(statusLine.getStatusCode(),stringWriter.toString(),null);
  }
  finally {
    if (httpResponse != null) {
      httpResponse.close();
    }
    if (httpClient != null) {
      httpClient.close();
    }
  }
}
