{
  if (mockMultipartHttpServletRequest.getInputStream() == null) {
    throw new IllegalStateException("Input stream is null");
  }
  String[] cookies=mockMultipartHttpServletRequest.getParameterValues("Cookie");
  if ((cookies == null) || (cookies.length == 0)) {
    throw new IllegalStateException("Cookie is null");
  }
  CloseableHttpResponse closeableHttpResponse=null;
  HttpClientBuilder httpClientBuilder=HttpClientBuilder.create();
  try (CloseableHttpClient closeableHttpClient=httpClientBuilder.build();StringWriter stringWriter=new StringWriter();WriterOutputStream writerOutputStream=new WriterOutputStream(stringWriter)){
    RequestBuilder requestBuilder=RequestBuilder.post(url);
    for (    String cookie : cookies) {
      requestBuilder.addHeader(new BasicHeader("Cookie",cookie));
    }
    byte[] bytes=FileUtil.getBytes(mockMultipartHttpServletRequest.getInputStream());
    MultipartEntityBuilder multipartEntityBuilder=MultipartEntityBuilder.create();
    ByteArrayBody byteArrayBody=new ByteArrayBody(bytes,ContentType.DEFAULT_BINARY,fileNameParameter);
    multipartEntityBuilder.addPart(fileNameParameter,byteArrayBody);
    requestBuilder.setEntity(multipartEntityBuilder.build());
    URI uri=requestBuilder.getUri();
    closeableHttpResponse=closeableHttpClient.execute(new HttpHost(uri.getHost(),uri.getPort()),requestBuilder.build());
    StatusLine statusLine=closeableHttpResponse.getStatusLine();
    HttpEntity httpEntity=closeableHttpResponse.getEntity();
    httpEntity.writeTo(writerOutputStream);
    writerOutputStream.flush();
    return new Response(statusLine.getStatusCode(),stringWriter.toString(),null);
  }
  finally {
    try {
      if (closeableHttpResponse != null) {
        closeableHttpResponse.close();
      }
    }
 catch (    IOException ioe) {
      if (_log.isWarnEnabled()) {
        _log.warn(ioe,ioe);
      }
    }
  }
}
