{
  int pos=name.indexOf(StringPool.PERIOD);
  if (pos != -1) {
    String referenceId=name.substring(pos + 1);
    if (_classLoaderReferenceIds.contains(referenceId)) {
      return true;
    }
    if (referenceId.equals("portal")) {
      Class<?> callerClass7=Reflection.getCallerClass(7);
      if (isTrustedCallerClass(callerClass7)) {
        return true;
      }
    }
    return false;
  }
  Class<?> callerClass6=Reflection.getCallerClass(6);
  Class<?> callerClass7=Reflection.getCallerClass(7);
  if (_log.isDebugEnabled()) {
    _log.debug(callerClass7.getName() + " is attempting to get the class loader via " + callerClass6.getName());
  }
  if ((callerClass7 == CachedIntrospectionResults.class) || (callerClass7 == ClassUtils.class) || (callerClass7.getEnclosingClass() == LocalVariableTableParameterNameDiscoverer.class)) {
    logGetClassLoader(callerClass7,7);
    return true;
  }
  if (callerClass6 == Class.class) {
    if (isJBossMessages(callerClass7) || isJBossServiceControllerImpl(callerClass7) || isJOnASModuleImpl(callerClass7)|| isTomcatJdbcLeakPrevention(callerClass7)) {
      logGetClassLoader(callerClass7,7);
      return true;
    }
    if (isWebSphereProtectionClassLoader(callerClass7.getEnclosingClass()) && CheckerUtil.isAccessControllerDoPrivileged(8)) {
      logGetClassLoader(callerClass7,7);
      return true;
    }
  }
 else   if (callerClass6 == ClassLoader.class) {
    Class<?> callerClass8=Reflection.getCallerClass(8);
    if (isGlassfishAPIClassLoaderServiceImpl(callerClass8.getEnclosingClass()) && CheckerUtil.isAccessControllerDoPrivileged(9)) {
      logGetClassLoader(callerClass8,8);
      return true;
    }
    if (isResinEnvironmentLocal(callerClass7)) {
      logGetClassLoader(callerClass7,7);
      return true;
    }
    if (isWebLogicGenericClassLoader(callerClass7.getEnclosingClass()) && CheckerUtil.isAccessControllerDoPrivileged(8)) {
      logGetClassLoader(callerClass7,7);
      return true;
    }
    if (isXercesSecuritySupport(callerClass7) && CheckerUtil.isAccessControllerDoPrivileged(8)) {
      logGetClassLoader(callerClass8,8);
      return true;
    }
    Thread currentThread=Thread.currentThread();
    StackTraceElement[] stackTraceElements=currentThread.getStackTrace();
    StackTraceElement stackTraceElement=null;
    if (JavaDetector.isIBM()) {
      stackTraceElement=stackTraceElements[7];
    }
 else {
      stackTraceElement=stackTraceElements[6];
    }
    String methodName=stackTraceElement.getMethodName();
    if (methodName.equals(_METHOD_NAME_GET_SYSTEM_CLASS_LOADER)) {
      if (_log.isInfoEnabled()) {
        _log.info("Allowing " + callerClass7.getName() + " to get the system class loader");
      }
      return true;
    }
  }
 else   if (callerClass6 == Thread.class) {
    boolean allow=false;
    ClassLoader contextClassLoader=PACLClassLoaderUtil.getContextClassLoader();
    ClassLoader portalClassLoader=getPortalClassLoader();
    if (contextClassLoader == portalClassLoader) {
      if (PACLClassLoaderUtil.getClassLoader(callerClass7) != getClassLoader()) {
        allow=true;
      }
    }
 else {
      allow=true;
    }
    if (allow) {
      if (_log.isInfoEnabled()) {
        _log.info("Allowing " + callerClass7.getName() + " to access the context class loader");
      }
      return true;
    }
  }
  return false;
}
