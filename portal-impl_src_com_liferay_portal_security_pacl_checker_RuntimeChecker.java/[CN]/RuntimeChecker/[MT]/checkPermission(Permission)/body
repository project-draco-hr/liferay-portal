{
  String name=permission.getName();
  if (name.startsWith(RUNTIME_PERMISSION_ACCESS_CLASS_IN_PACKAGE)) {
    int pos=name.indexOf(StringPool.PERIOD);
    String pkg=name.substring(pos + 1);
    if (!hasPackageAccess(pkg)) {
      throw new SecurityException("Attempted to access package " + pkg);
    }
  }
 else   if (name.equals(RUNTIME_PERMISSION_GET_CLASSLOADER)) {
    String classLoaderId=null;
    int pos=name.indexOf(StringPool.PERIOD);
    if (pos != -1) {
      classLoaderId=name.substring(pos + 1);
    }
    if (Validator.isNull(classLoaderId)) {
      classLoaderId="foreign";
    }
    Class<?> callerClass=sun.reflect.Reflection.getCallerClass(6);
    if (_log.isDebugEnabled()) {
      _log.debug(callerClass.getName() + " is requesting a class loader");
    }
    ClassLoader classLoader=PACLClassLoaderUtil.getClassLoader(callerClass);
    if ((classLoader == null) || (classLoader == getCommonClassLoader()) || (classLoader == getSystemClassLoader())) {
      return;
    }
    if (!_classLoaderIds.contains(classLoaderId)) {
      throw new SecurityException("Attempted to get class loader " + classLoaderId);
    }
  }
 else   if (name.equals(RUNTIME_PERMISSION_SET_SECURITY_MANAGER)) {
    throw new SecurityException("Attempted to set another security manager");
  }
 else   if (name.equals(RUNTIME_PERMISSION_EXIT_VM)) {
    Thread.dumpStack();
    throw new SecurityException("Attempted to shutdown the VM");
  }
}
