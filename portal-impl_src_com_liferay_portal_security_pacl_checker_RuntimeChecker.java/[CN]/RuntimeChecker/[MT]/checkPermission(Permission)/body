{
  String name=permission.getName();
  if (name.startsWith(RUNTIME_PERMISSION_ACCESS_CLASS_IN_PACKAGE)) {
    int pos=name.indexOf(StringPool.PERIOD);
    String pkg=name.substring(pos + 1);
    if (!hasAccessClassInPackage(pkg)) {
      throwSecurityException(_log,"Attempted to access package " + pkg);
    }
  }
 else   if (name.equals(RUNTIME_PERMISSION_ACCESS_DECLARED_MEMBERS)) {
    if (!hasReflect(permission.getName(),permission.getActions())) {
      throwSecurityException(_log,"Attempted to access declared members");
    }
  }
 else   if (name.equals(RUNTIME_PERMISSION_CREATE_CLASS_LOADER)) {
    if (PortalSecurityManagerThreadLocal.isCheckCreateClassLoader() && !isJSPCompiler(permission.getName(),permission.getActions()) && !hasCreateClassLoader()) {
      throwSecurityException(_log,"Attempted to create a class loader");
    }
  }
 else   if (name.startsWith(RUNTIME_PERMISSION_GET_CLASSLOADER)) {
    if (PortalSecurityManagerThreadLocal.isCheckGetClassLoader() && !isJSPCompiler(permission.getName(),permission.getActions()) && !hasGetClassLoader(name)) {
      throwSecurityException(_log,"Attempted to get class loader");
    }
  }
 else   if (name.startsWith(RUNTIME_PERMISSION_GET_PROTECTION_DOMAIN)) {
    if (!hasGetProtectionDomain()) {
      throwSecurityException(_log,"Attempted to get protection domain");
    }
  }
 else   if (name.startsWith(RUNTIME_PERMISSION_GET_ENV)) {
    int pos=name.indexOf(StringPool.PERIOD);
    String envName=name.substring(pos + 1);
    if (!hasGetEnv(envName)) {
      throwSecurityException(_log,"Attempted to get environment name " + envName);
    }
  }
 else   if (name.equals(RUNTIME_PERMISSION_READ_FILE_DESCRIPTOR)) {
    if (PortalSecurityManagerThreadLocal.isCheckReadFileDescriptor() && !hasReadFileDescriptor()) {
      throwSecurityException(_log,"Attempted to read file descriptor");
    }
  }
 else   if (name.equals(RUNTIME_PERMISSION_SET_CONTEXT_CLASS_LOADER)) {
  }
 else   if (name.equals(RUNTIME_PERMISSION_SET_SECURITY_MANAGER)) {
    throwSecurityException(_log,"Attempted to set another security manager");
  }
 else   if (name.equals(RUNTIME_PERMISSION_WRITE_FILE_DESCRIPTOR)) {
    if (PortalSecurityManagerThreadLocal.isCheckWriteFileDescriptor() && !hasWriteFileDescriptor()) {
      throwSecurityException(_log,"Attempted to write file descriptor");
    }
  }
 else {
    if (_log.isDebugEnabled()) {
      Thread.dumpStack();
    }
    throwSecurityException(_log,"Attempted to " + permission.getName() + " on "+ permission.getActions());
  }
}
