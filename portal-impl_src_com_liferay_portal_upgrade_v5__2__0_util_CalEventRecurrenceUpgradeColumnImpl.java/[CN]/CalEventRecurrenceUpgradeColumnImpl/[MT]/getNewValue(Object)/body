{
  if (Validator.isNull(oldValue)) {
    return StringPool.BLANK;
  }
  String recurrence=(String)oldValue;
  Object obj=Base64.stringToObject(recurrence);
  if (obj instanceof Recurrence) {
    Recurrence recurrenceObj=(Recurrence)obj;
    return JSONFactoryUtil.serialize(recurrenceObj);
  }
 else   if (obj instanceof com.liferay.util.cal.Recurrence) {
    com.liferay.util.cal.Recurrence oldRecurrence=(com.liferay.util.cal.Recurrence)obj;
    com.liferay.util.cal.Duration oldDuration=oldRecurrence.getDuration();
    Duration duration=new Duration(oldDuration.getDays(),oldDuration.getHours(),oldDuration.getMinutes(),oldDuration.getSeconds());
    duration.setWeeks(oldDuration.getWeeks());
    duration.setInterval(oldDuration.getInterval());
    Recurrence recurrenceObj=new Recurrence(oldRecurrence.getDtStart(),duration,oldRecurrence.getFrequency());
    com.liferay.util.cal.DayAndPosition[] oldDayPos=oldRecurrence.getByDay();
    DayAndPosition[] dayPos=null;
    if (oldDayPos != null) {
      dayPos=new DayAndPosition[oldDayPos.length];
      for (int i=0; i < oldDayPos.length; i++) {
        dayPos[i]=new DayAndPosition(oldDayPos[i].getDayOfWeek(),oldDayPos[i].getDayPosition());
      }
    }
    recurrenceObj.setByDay(dayPos);
    recurrenceObj.setByMonth(oldRecurrence.getByMonth());
    recurrenceObj.setByMonthDay(oldRecurrence.getByMonthDay());
    recurrenceObj.setInterval(oldRecurrence.getInterval());
    recurrenceObj.setOccurrence(oldRecurrence.getOccurrence());
    recurrenceObj.setWeekStart(oldRecurrence.getWeekStart());
    recurrenceObj.setUntil(oldRecurrence.getUntil());
    return JSONFactoryUtil.serialize(recurrenceObj);
  }
  return StringPool.BLANK;
}
