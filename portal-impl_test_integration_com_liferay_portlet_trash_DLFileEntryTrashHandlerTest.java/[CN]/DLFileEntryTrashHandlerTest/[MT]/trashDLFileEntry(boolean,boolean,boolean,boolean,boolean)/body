{
  int initialFileRanksCount=0;
  int initialNotInTrashCount=getNotInTrashCount();
  int initialTrashEntriesCount=getTrashEntriesCount();
  int initialSearchFileEntriesCount=searchFileEntriesCount();
  int initialSearchTrashFileEntriesCount=searchTrashEntriesCount("Basic");
  FileEntry fileEntry=null;
  if (draft) {
    fileEntry=addFileEntry(parentFolder.getFolderId(),"Test Basic.txt","Test Basic.txt",null,WorkflowConstants.ACTION_SAVE_DRAFT);
  }
 else {
    fileEntry=addFileEntry(false,"Test Basic.txt");
  }
  long fileEntryId=fileEntry.getFileEntryId();
  if (versioned) {
    updateFileEntry(fileEntryId,null,"Test Basic 2.txt");
  }
  if (fileRank) {
    addFileRank(fileEntryId);
  }
  if (leaveCheckedOut) {
    DLAppServiceUtil.checkOutFileEntry(fileEntryId,new ServiceContext());
  }
  Assert.assertEquals(initialNotInTrashCount + 1,getNotInTrashCount());
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount());
  if (draft) {
    Assert.assertFalse(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
    Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
  }
 else {
    Assert.assertTrue(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
    Assert.assertEquals(initialSearchFileEntriesCount + 1,searchFileEntriesCount());
  }
  Assert.assertEquals(initialSearchTrashFileEntriesCount,searchTrashEntriesCount("Basic"));
  DLAppServiceUtil.moveFileEntryToTrash(fileEntryId);
  Assert.assertEquals(initialNotInTrashCount,getNotInTrashCount());
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount());
  Assert.assertFalse(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
  Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
  Assert.assertEquals(initialSearchTrashFileEntriesCount + 1,searchTrashEntriesCount("Basic"));
  if (fileRank) {
    Assert.assertEquals(initialFileRanksCount,getActiveFileRanksCount(fileEntryId));
  }
  if (delete) {
    TrashEntryServiceUtil.deleteEntries(parentFolder.getGroupId());
    Assert.assertEquals(initialNotInTrashCount,getNotInTrashCount());
    Assert.assertNull(fetchAssetEntry(DLFileEntryConstants.getClassName(),fileEntryId));
    Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
  }
 else {
    DLAppServiceUtil.restoreFileEntryFromTrash(fileEntryId);
    Assert.assertEquals(initialNotInTrashCount + 1,getNotInTrashCount());
    if (draft) {
      Assert.assertFalse(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
      Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
    }
 else {
      Assert.assertTrue(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
      Assert.assertEquals(initialSearchFileEntriesCount + 1,searchFileEntriesCount());
    }
    if (fileRank) {
      Assert.assertEquals(initialFileRanksCount + 1,getActiveFileRanksCount(fileEntryId));
    }
  }
  if (delete) {
    Assert.assertEquals(0,getTrashEntriesCount());
    Assert.assertEquals(0,searchTrashEntriesCount("Basic"));
  }
 else {
    Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount());
    Assert.assertEquals(initialSearchTrashFileEntriesCount,searchTrashEntriesCount("Basic"));
  }
}
