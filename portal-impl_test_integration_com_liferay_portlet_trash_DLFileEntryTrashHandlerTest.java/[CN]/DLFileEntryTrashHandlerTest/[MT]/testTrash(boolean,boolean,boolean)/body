{
  int initialFileEntriesCount=getFileEntriesNotInTrashCount();
  int initialTrashEntriesCount=getTrashEntriesCount();
  int initialSearchFileEntriesCount=searchFileEntriesCount();
  FileEntry fileEntry=addFileEntry(false,"Test Basic.txt");
  long fileEntryId=fileEntry.getFileEntryId();
  if (versioned) {
    updateFileEntry(fileEntryId,null,"Test Basic 2.txt");
  }
  if (leaveCheckedOut) {
    DLAppServiceUtil.checkOutFileEntry(fileEntryId,new ServiceContext());
  }
  Assert.assertEquals(initialFileEntriesCount + 1,getFileEntriesNotInTrashCount());
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount());
  Assert.assertTrue(isAssetEntryVisible(fileEntryId));
  Assert.assertEquals(initialSearchFileEntriesCount + 1,searchFileEntriesCount());
  DLAppServiceUtil.moveFileEntryToTrash(fileEntryId);
  Assert.assertEquals(initialFileEntriesCount,getFileEntriesNotInTrashCount());
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount());
  Assert.assertFalse(isAssetEntryVisible(fileEntryId));
  Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
  if (delete) {
    TrashEntryServiceUtil.deleteEntries(folder.getGroupId());
    Assert.assertEquals(initialFileEntriesCount,getFileEntriesNotInTrashCount());
    Assert.assertNull(fetchAssetEntry(fileEntryId));
    Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
  }
 else {
    DLAppServiceUtil.restoreFileEntryFromTrash(fileEntryId);
    Assert.assertEquals(initialFileEntriesCount + 1,getFileEntriesNotInTrashCount());
    Assert.assertTrue(isAssetEntryVisible(fileEntryId));
    Assert.assertEquals(initialSearchFileEntriesCount + 1,searchFileEntriesCount());
  }
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount());
}
