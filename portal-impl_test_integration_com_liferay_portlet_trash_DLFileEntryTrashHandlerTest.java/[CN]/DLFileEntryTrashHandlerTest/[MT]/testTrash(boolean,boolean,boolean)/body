{
  int initialNotInTrashCount=getNotInTrashCount();
  int initialTrashEntriesCount=getTrashEntriesCount();
  int initialSearchFileEntriesCount=searchFileEntriesCount();
  FileEntry fileEntry=addFileEntry(false,"Test Basic.txt");
  long fileEntryId=fileEntry.getFileEntryId();
  if (versioned) {
    updateFileEntry(fileEntryId,null,"Test Basic 2.txt");
  }
  if (leaveCheckedOut) {
    DLAppServiceUtil.checkOutFileEntry(fileEntryId,new ServiceContext());
  }
  Assert.assertEquals(initialNotInTrashCount + 1,getNotInTrashCount());
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount());
  Assert.assertTrue(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
  Assert.assertEquals(initialSearchFileEntriesCount + 1,searchFileEntriesCount());
  DLAppServiceUtil.moveFileEntryToTrash(fileEntryId);
  Assert.assertEquals(initialNotInTrashCount,getNotInTrashCount());
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount());
  Assert.assertFalse(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
  Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
  if (delete) {
    TrashEntryServiceUtil.deleteEntries(parentFolder.getGroupId());
    Assert.assertEquals(initialNotInTrashCount,getNotInTrashCount());
    Assert.assertNull(fetchAssetEntry(DLFileEntryConstants.getClassName(),fileEntryId));
    Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
  }
 else {
    DLAppServiceUtil.restoreFileEntryFromTrash(fileEntryId);
    Assert.assertEquals(initialNotInTrashCount + 1,getNotInTrashCount());
    Assert.assertTrue(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
    Assert.assertEquals(initialSearchFileEntriesCount + 1,searchFileEntriesCount());
  }
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount());
}
