{
  StringTemplateResource stringTemplateResource=new StringTemplateResource("testId","testContent");
  CacheTemplateResource cacheTemplateResource=new CacheTemplateResource(stringTemplateResource);
  UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
  ObjectOutput objectOutput=new ObjectOutputStream(unsyncByteArrayOutputStream);
  cacheTemplateResource.writeExternal(objectOutput);
  objectOutput.close();
  byte[] externalizedData=unsyncByteArrayOutputStream.toByteArray();
  ObjectInput objectInput=new ObjectInputStream(new UnsyncByteArrayInputStream(externalizedData));
  Assert.assertEquals(cacheTemplateResource.getLastModified(),objectInput.readLong());
  Assert.assertEquals(stringTemplateResource,objectInput.readObject());
  CacheTemplateResource newCacheTemplateResource=new CacheTemplateResource();
  objectInput=new ObjectInputStream(new UnsyncByteArrayInputStream(externalizedData));
  newCacheTemplateResource.readExternal(objectInput);
  Field templateResourceField=ReflectionUtil.getDeclaredField(CacheTemplateResource.class,"_templateResource");
  Assert.assertEquals(stringTemplateResource,templateResourceField.get(newCacheTemplateResource));
  Assert.assertEquals(cacheTemplateResource.getLastModified(),newCacheTemplateResource.getLastModified());
}
