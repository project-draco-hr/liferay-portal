{
  ServiceRegistration<ResourceBundle> serviceRegistrationA=registerResourceBundle(createResourceBundle("common-key","th_TH_TH","th_TH_TH","th_TH_TH"),"th_TH_TH");
  ServiceRegistration<ResourceBundle> serviceRegistrationB=registerResourceBundle(createResourceBundle("common-key","th_TH","th_TH","th_TH"),"th_TH");
  ServiceRegistration<ResourceBundle> serviceRegistrationC=registerResourceBundle(createResourceBundle("common-key","th","th","th"),"th");
  ServiceRegistration<ResourceBundle> serviceRegistrationD=registerResourceBundle(createResourceBundle("common-key","root-bundle","root-bundle","root-bundle"),"");
  PortletConfig portletConfig=_genericPortlet.getPortletConfig();
  ResourceBundle portletResourceBundleA=portletConfig.getResourceBundle(new Locale("th","TH","TH"));
  ResourceBundle portletResourceBundleB=portletConfig.getResourceBundle(new Locale("th","TH"));
  ResourceBundle portletResourceBundleC=portletConfig.getResourceBundle(new Locale("th"));
  ResourceBundle portletResourceBundleD=portletConfig.getResourceBundle(new Locale(""));
  Assert.assertEquals("th_TH_TH",ResourceBundleUtil.getString(portletResourceBundleA,"th_TH_TH"));
  Assert.assertEquals("th_TH",ResourceBundleUtil.getString(portletResourceBundleA,"th_TH"));
  Assert.assertEquals("th",ResourceBundleUtil.getString(portletResourceBundleA,"th"));
  Assert.assertEquals("root-bundle",ResourceBundleUtil.getString(portletResourceBundleA,"root-bundle"));
  Assert.assertEquals("th_TH_TH",ResourceBundleUtil.getString(portletResourceBundleA,"common-key"));
  Assert.assertEquals("th_TH",ResourceBundleUtil.getString(portletResourceBundleB,"common-key"));
  Assert.assertFalse(portletResourceBundleB.containsKey("th_TH_TH"));
  Assert.assertEquals("th",ResourceBundleUtil.getString(portletResourceBundleC,"common-key"));
  Assert.assertFalse(portletResourceBundleC.containsKey("th_TH"));
  Assert.assertEquals("root-bundle",ResourceBundleUtil.getString(portletResourceBundleD,"common-key"));
  Assert.assertFalse(portletResourceBundleD.containsKey("th"));
  serviceRegistrationA.unregister();
  Assert.assertFalse(portletResourceBundleA.containsKey("th_TH_TH"));
  Assert.assertEquals("th_TH",ResourceBundleUtil.getString(portletResourceBundleA,"common-key"));
  serviceRegistrationB.unregister();
  Assert.assertFalse(portletResourceBundleA.containsKey("th_TH"));
  Assert.assertEquals("th",ResourceBundleUtil.getString(portletResourceBundleA,"common-key"));
  serviceRegistrationC.unregister();
  Assert.assertFalse(portletResourceBundleA.containsKey("th"));
  Assert.assertEquals("root-bundle",ResourceBundleUtil.getString(portletResourceBundleA,"common-key"));
  serviceRegistrationD.unregister();
  Assert.assertFalse(portletResourceBundleA.containsKey("root-bundle"));
  Assert.assertFalse(portletResourceBundleA.containsKey("common-key"));
}
