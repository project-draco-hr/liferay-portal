{
  SPIAgentFactoryUtil spiAgentFactoryUtil=new SPIAgentFactoryUtil();
  Set<String> agentClassNames=new HashSet<String>();
  agentClassNames.add(BadMockSPIAgent.class.getName());
  agentClassNames.add(MockSPIAgent.class.getName());
  spiAgentFactoryUtil.setSPIAgentClasses(agentClassNames);
  Map<String,Class<? extends SPIAgent>> spiAgentClasses=ReflectionTestUtil.getFieldValue(SPIAgentFactoryUtil.class,"_spiAgentClasses");
  Assert.assertEquals(2,spiAgentClasses.size());
  Assert.assertSame(BadMockSPIAgent.class,spiAgentClasses.get(BadMockSPIAgent.class.getName()));
  Assert.assertSame(MockSPIAgent.class,spiAgentClasses.get(MockSPIAgent.class.getName()));
  Set<String> spiAgentClassNames=SPIAgentFactoryUtil.getSPIAgentClassNames();
  Assert.assertEquals(2,spiAgentClassNames.size());
  Assert.assertTrue(spiAgentClassNames.contains(BadMockSPIAgent.class.getName()));
  Assert.assertTrue(spiAgentClassNames.contains(MockSPIAgent.class.getName()));
  Assert.assertSame(MockSPIAgent.class,SPIAgentFactoryUtil.unregisterSPIAgentClass(MockSPIAgent.class.getName()));
  Assert.assertNull(SPIAgentFactoryUtil.registerSPIAgentClass(MockSPIAgent.class));
  Assert.assertSame(BadMockSPIAgent.class,SPIAgentFactoryUtil.unregisterSPIAgentClass(BadMockSPIAgent.class.getName()));
  Assert.assertSame(MockSPIAgent.class,SPIAgentFactoryUtil.unregisterSPIAgentClass(MockSPIAgent.class.getName()));
}
