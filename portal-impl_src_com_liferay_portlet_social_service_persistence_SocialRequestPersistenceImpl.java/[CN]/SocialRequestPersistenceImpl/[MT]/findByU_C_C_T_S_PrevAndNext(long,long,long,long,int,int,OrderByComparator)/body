{
  SocialRequest socialRequest=findByPrimaryKey(requestId);
  int count=countByU_C_C_T_S(userId,classNameId,classPK,type,status);
  Session session=null;
  try {
    session=openSession();
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(7 + (orderByComparator.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(7);
    }
    query.append(_SQL_SELECT_SOCIALREQUEST_WHERE);
    query.append(_FINDER_COLUMN_U_C_C_T_S_USERID_2);
    query.append(_FINDER_COLUMN_U_C_C_T_S_CLASSNAMEID_2);
    query.append(_FINDER_COLUMN_U_C_C_T_S_CLASSPK_2);
    query.append(_FINDER_COLUMN_U_C_C_T_S_TYPE_2);
    query.append(_FINDER_COLUMN_U_C_C_T_S_STATUS_2);
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      query.append(SocialRequestModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Query q=session.createQuery(sql);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(userId);
    qPos.add(classNameId);
    qPos.add(classPK);
    qPos.add(type);
    qPos.add(status);
    Object[] objArray=QueryUtil.getPrevAndNext(q,count,orderByComparator,socialRequest);
    SocialRequest[] array=new SocialRequestImpl[3];
    array[0]=(SocialRequest)objArray[0];
    array[1]=(SocialRequest)objArray[1];
    array[2]=(SocialRequest)objArray[2];
    return array;
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
