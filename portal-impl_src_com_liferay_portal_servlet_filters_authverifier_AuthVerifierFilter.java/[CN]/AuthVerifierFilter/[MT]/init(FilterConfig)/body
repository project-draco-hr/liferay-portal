{
  super.init(filterConfig);
  Enumeration<String> enu=filterConfig.getInitParameterNames();
  while (enu.hasMoreElements()) {
    String name=enu.nextElement();
    String value=filterConfig.getInitParameter(name);
    _initParametersMap.put(name,value);
  }
  String portalPropertyPrefix=GetterUtil.getString(_initParametersMap.get("portal_property_prefix"));
  if (Validator.isNotNull(portalPropertyPrefix)) {
    Properties properties=PropsUtil.getProperties(portalPropertyPrefix,true);
    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {
      _initParametersMap.put((String)entry.getKey(),entry.getValue());
    }
  }
  if (_initParametersMap.containsKey("hosts.allowed")) {
    String hostsAllowedString=(String)_initParametersMap.get("hosts.allowed");
    String[] hostsAllowed=StringUtil.split(hostsAllowedString);
    for (    String hostAllowed : hostsAllowed) {
      _hostsAllowed.add(hostAllowed);
    }
    _initParametersMap.remove("hosts.allowed");
  }
  if (_initParametersMap.containsKey("https.required")) {
    _httpsRequired=GetterUtil.getBoolean(_initParametersMap.get("https.required"));
    _initParametersMap.remove("https.required");
  }
  if (_initParametersMap.containsKey("use_permission_checker")) {
    _initParametersMap.remove("use_permission_checker");
    if (_log.isWarnEnabled()) {
      _log.warn("use_permission_checker is deprecated");
    }
  }
}
