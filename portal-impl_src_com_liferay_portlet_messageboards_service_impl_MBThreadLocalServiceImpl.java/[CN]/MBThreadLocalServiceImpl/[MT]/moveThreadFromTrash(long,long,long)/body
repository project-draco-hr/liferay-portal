{
  MBThread thread=mbThreadPersistence.findByPrimaryKey(threadId);
  TrashEntry trashEntry=thread.getTrashEntry();
  if (trashEntry.isTrashEntry(MBThread.class,threadId)) {
    restoreThreadFromTrash(userId,threadId);
  }
 else {
    TrashVersion trashVersion=trashVersionLocalService.fetchVersion(trashEntry.getEntryId(),MBThread.class.getName(),thread.getThreadId());
    int status=WorkflowConstants.STATUS_APPROVED;
    if (trashVersion != null) {
      status=trashVersion.getStatus();
    }
    updateStatus(userId,threadId,status);
    if (trashVersion != null) {
      trashVersionLocalService.deleteTrashVersion(trashVersion);
    }
    restoreDependentsFromTrash(thread.getGroupId(),threadId,trashEntry.getEntryId());
  }
  return moveThread(thread.getGroupId(),categoryId,threadId);
}
