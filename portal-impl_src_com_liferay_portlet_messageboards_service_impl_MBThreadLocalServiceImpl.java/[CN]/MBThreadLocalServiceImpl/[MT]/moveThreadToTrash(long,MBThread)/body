{
  if (thread.getCategoryId() == MBCategoryConstants.DISCUSSION_CATEGORY_ID) {
    return thread;
  }
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  int oldStatus=thread.getStatus();
  if (oldStatus == WorkflowConstants.STATUS_PENDING) {
    MBMessage rootMessage=mbMessageLocalService.getMBMessage(thread.getRootMessageId());
    rootMessage.setStatus(WorkflowConstants.STATUS_DRAFT);
    mbMessagePersistence.update(rootMessage);
  }
  thread.setStatus(WorkflowConstants.STATUS_IN_TRASH);
  thread.setStatusByUserId(user.getUserId());
  thread.setStatusByUserName(user.getFullName());
  thread.setStatusDate(now);
  mbThreadPersistence.update(thread);
  moveThreadMessagesToTrash(thread);
  if (thread.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) {
    MBCategory category=mbCategoryPersistence.findByPrimaryKey(thread.getCategoryId());
    category.setThreadCount(category.getThreadCount() - 1);
    category.setMessageCount(category.getMessageCount() - thread.getMessageCount());
    mbCategoryPersistence.update(category);
  }
  mbStatsUserLocalService.updateStatsUser(thread.getGroupId(),userId);
  socialActivityLocalService.addActivity(userId,thread.getGroupId(),MBThread.class.getName(),thread.getThreadId(),SocialActivityConstants.TYPE_MOVE_TO_TRASH,StringPool.BLANK,0);
  trashEntryLocalService.addTrashEntry(userId,thread.getGroupId(),MBThread.class.getName(),thread.getThreadId(),oldStatus,null,null);
  return thread;
}
