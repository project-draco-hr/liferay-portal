{
  MBMessage rootMessage=mbMessagePersistence.findByPrimaryKey(thread.getRootMessageId());
  Indexer messageIndexer=IndexerRegistryUtil.nullSafeGetIndexer(MBMessage.class);
  long folderId=thread.getAttachmentsFolderId();
  if (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    PortletFileRepositoryUtil.deletePortletFolder(folderId);
  }
  subscriptionLocalService.deleteSubscriptions(thread.getCompanyId(),MBThread.class.getName(),thread.getThreadId());
  mbThreadFlagPersistence.removeByThreadId(thread.getThreadId());
  List<MBMessage> messages=mbMessagePersistence.findByThreadId(thread.getThreadId());
  for (  MBMessage message : messages) {
    ratingsStatsLocalService.deleteStats(message.getWorkflowClassName(),message.getMessageId());
    assetEntryLocalService.deleteEntry(message.getWorkflowClassName(),message.getMessageId());
    if (!message.isDiscussion()) {
      resourceLocalService.deleteResource(message.getCompanyId(),message.getWorkflowClassName(),ResourceConstants.SCOPE_INDIVIDUAL,message.getMessageId());
    }
    messageIndexer.delete(message);
    mbMessagePersistence.remove(message);
    if (!message.isDiscussion()) {
      mbStatsUserLocalService.updateStatsUser(message.getGroupId(),message.getUserId());
    }
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(message.getCompanyId(),message.getGroupId(),message.getWorkflowClassName(),message.getMessageId());
  }
  if ((rootMessage.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (rootMessage.getCategoryId() != MBCategoryConstants.DISCUSSION_CATEGORY_ID)) {
    try {
      MBCategory category=mbCategoryPersistence.findByPrimaryKey(thread.getCategoryId());
      MBUtil.updateCategoryStatistics(category.getCompanyId(),category.getCategoryId());
    }
 catch (    NoSuchCategoryException nsce) {
      if (!thread.isInTrash()) {
        throw nsce;
      }
    }
  }
  AssetEntry assetEntry=assetEntryLocalService.fetchEntry(MBThread.class.getName(),thread.getThreadId());
  if (assetEntry != null) {
    assetEntry.setTitle(rootMessage.getSubject());
    assetEntryLocalService.updateAssetEntry(assetEntry);
  }
  assetEntryLocalService.deleteEntry(MBThread.class.getName(),thread.getThreadId());
  if (thread.isInTrashExplicitly()) {
    trashEntryLocalService.deleteEntry(MBThread.class.getName(),thread.getThreadId());
  }
 else {
    trashVersionLocalService.deleteTrashVersion(MBThread.class.getName(),thread.getThreadId());
  }
  Indexer threadIndexer=IndexerRegistryUtil.nullSafeGetIndexer(MBThread.class);
  threadIndexer.delete(thread);
  mbThreadPersistence.remove(thread);
}
