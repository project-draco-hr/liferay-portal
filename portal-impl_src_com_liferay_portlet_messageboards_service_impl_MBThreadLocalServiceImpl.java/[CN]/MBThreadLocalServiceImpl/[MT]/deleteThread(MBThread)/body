{
  MBMessage rootMessage=mbMessagePersistence.findByPrimaryKey(thread.getRootMessageId());
  Indexer indexer=IndexerRegistryUtil.getIndexer(MBMessage.class);
  indexer.delete(thread);
  long companyId=rootMessage.getCompanyId();
  long repositoryId=CompanyConstants.SYSTEM;
  String dirName=thread.getAttachmentsDir();
  try {
    DLStoreUtil.deleteDirectory(companyId,repositoryId,dirName);
  }
 catch (  NoSuchDirectoryException nsde) {
  }
  mbThreadFlagPersistence.removeByThreadId(thread.getThreadId());
  List<MBMessage> messages=mbMessagePersistence.findByThreadId(thread.getThreadId());
  for (  MBMessage message : messages) {
    socialActivityLocalService.deleteActivities(MBMessage.class.getName(),message.getMessageId());
    ratingsStatsLocalService.deleteStats(MBMessage.class.getName(),message.getMessageId());
    assetEntryLocalService.deleteEntry(MBMessage.class.getName(),message.getMessageId());
    if (!message.isDiscussion()) {
      resourceLocalService.deleteResource(message.getCompanyId(),MBMessage.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,message.getMessageId());
    }
    mbMessagePersistence.remove(message);
    if (!message.isDiscussion()) {
      mbStatsUserLocalService.updateStatsUser(message.getGroupId(),message.getUserId());
    }
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(message.getCompanyId(),message.getGroupId(),message.getWorkflowClassName(),message.getMessageId());
  }
  if ((rootMessage.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (rootMessage.getCategoryId() != MBCategoryConstants.DISCUSSION_CATEGORY_ID)) {
    MBCategory category=mbCategoryPersistence.findByPrimaryKey(thread.getCategoryId());
    category.setThreadCount(category.getThreadCount() - 1);
    category.setMessageCount(category.getMessageCount() - thread.getMessageCount());
    mbCategoryPersistence.update(category,false);
  }
  assetEntryLocalService.deleteEntry(MBThread.class.getName(),thread.getThreadId());
  mbThreadPersistence.remove(thread);
}
