{
  Project project=getProject();
  ConfigurationContainer configurationContainer=project.getConfigurations();
  Configuration configuration=configurationContainer.findByName(configurationName);
  if (configuration == null) {
    return;
  }
  Set<String> forcedExclusions=getForcedExclusions();
  ResolvedConfiguration resolvedConfiguration=configuration.getResolvedConfiguration();
  for (  Dependency dependency : configuration.getDependencies()) {
    Element dependencyElement=document.createElement("dependency");
    dependenciesElement.appendChild(dependencyElement);
    final String dependencyGroup=dependency.getGroup();
    final String dependencyName=dependency.getName();
    XMLUtil.appendElement(document,dependencyElement,"groupId",dependencyGroup);
    XMLUtil.appendElement(document,dependencyElement,"artifactId",dependencyName);
    String dependencyVersion=dependency.getVersion();
    Set<ResolvedDependency> resolvedDependencies=resolvedConfiguration.getFirstLevelModuleDependencies(new Spec<Dependency>(){
      @Override public boolean isSatisfiedBy(      Dependency dependency){
        if (dependencyGroup.equals(dependency.getGroup()) && dependencyName.equals(dependency.getName())) {
          return true;
        }
        return false;
      }
    }
);
    if (!resolvedDependencies.isEmpty()) {
      Iterator<ResolvedDependency> iterator=resolvedDependencies.iterator();
      ResolvedDependency resolvedDependency=iterator.next();
      dependencyVersion=resolvedDependency.getModuleVersion();
    }
 else     if (_logger.isWarnEnabled()) {
      _logger.warn("Unable to find resolved module version for " + dependency);
    }
    XMLUtil.appendElement(document,dependencyElement,"version",dependencyVersion);
    XMLUtil.appendElement(document,dependencyElement,"scope",scope);
    if (!forcedExclusions.isEmpty()) {
      Element exclusionsElement=document.createElement("exclusions");
      dependencyElement.appendChild(exclusionsElement);
      for (      String dependencyNotation : forcedExclusions) {
        appendDependencyExclusionElement(document,exclusionsElement,dependencyNotation);
      }
    }
  }
}
