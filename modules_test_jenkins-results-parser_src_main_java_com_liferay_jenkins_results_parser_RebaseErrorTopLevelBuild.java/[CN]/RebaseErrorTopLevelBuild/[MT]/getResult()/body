{
  String baseResult=super.getResult();
  if ((baseResult == null) || baseResult.equals("SUCCESS")) {
    return baseResult;
  }
  if (baseResult.equals("FAILURE")) {
    Map<String,String> stopProperties=getStopProperties();
    if (stopProperties.containsKey("TOP_LEVEL_GITHUB_COMMENT_ID")) {
      StringBuilder sb=new StringBuilder();
      sb.append("http://mirrors-no-cache.lax.liferay.com/");
      sb.append("github.com/liferay/liferay-jenkins-ee/tests/");
      sb.append(getJobName());
      String jenkinsJobVariant=getParameterValue("JENKINS_JOB_VARIANT");
      if (jenkinsJobVariant != null) {
        sb.append("/");
        sb.append(jenkinsJobVariant);
      }
      sb.append("/report.html");
      try {
        Element rootElement=getElementFromString(JenkinsResultsParserUtil.toString(sb.toString()));
        List<String> expectedCommentTokens=getCommentTokens(rootElement);
        sb=new StringBuilder();
        sb.append("https://api.github.com/repos/");
        sb.append(getParameterValue("GITHUB_RECEIVER_USERNAME"));
        sb.append("/");
        sb.append("liferay-portal-ee");
        sb.append("/issues/comments/");
        sb.append(stopProperties.get("TOP_LEVEL_GITHUB_COMMENT_ID"));
        JSONObject jsonObject=getJSONObjectFromURL(sb.toString());
        String commentBody=jsonObject.getString("body");
        rootElement=getElementFromString(commentBody);
        List<String> actualCommentTokens=getCommentTokens(rootElement);
        boolean matchesTemplate=true;
        for (int i=0; i < expectedCommentTokens.size(); i++) {
          System.out.println();
          System.out.println("Test " + i);
          Pattern pattern=Pattern.compile(expectedCommentTokens.get(i));
          Matcher matcher=pattern.matcher(actualCommentTokens.get(i));
          System.out.println(expectedCommentTokens.get(i));
          System.out.println(actualCommentTokens.get(i));
          if (matcher.find()) {
            System.out.println("Tokens matched.");
          }
 else {
            System.out.println("Tokens mismatched.");
            matchesTemplate=false;
            break;
          }
        }
        if (matchesTemplate) {
          result="SUCCESS";
          return result;
        }
      }
 catch (      Exception e) {
        throw new RuntimeException("An exception occurred while trying to match the " + "output with the expected output",e);
      }
    }
    result=null;
    return result;
  }
  return baseResult;
}
