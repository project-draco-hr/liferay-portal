{
  super.getResult();
  if ((result == null) || _validResult) {
    return result;
  }
  if (result.equals("SUCCESS")) {
    result="FAILURE";
    _validResult=true;
    return result;
  }
  if (!result.equals("FAILURE")) {
    return result;
  }
  Map<String,String> stopPropertiesMap=getStopPropertiesMap();
  if (stopPropertiesMap.containsKey("TOP_LEVEL_GITHUB_COMMENT_ID")) {
    StringBuilder sb=new StringBuilder();
    sb.append("http://mirrors-no-cache.lax.liferay.com/");
    sb.append("github.com/liferay/liferay-jenkins-ee/tests/");
    sb.append(getJobName());
    String jenkinsJobVariant=getParameterValue("JENKINS_JOB_VARIANT");
    if (jenkinsJobVariant != null) {
      sb.append("/");
      sb.append(jenkinsJobVariant);
    }
    sb.append("/report.html");
    try {
      Element rootElement=getElement(JenkinsResultsParserUtil.toString(sb.toString()));
      List<String> expectedCommentTokens=getCommentTokens(rootElement);
      sb=new StringBuilder();
      sb.append("https://api.github.com/repos/");
      sb.append(getParameterValue("GITHUB_RECEIVER_USERNAME"));
      sb.append("/");
      sb.append("liferay-portal-ee");
      sb.append("/issues/comments/");
      sb.append(stopPropertiesMap.get("TOP_LEVEL_GITHUB_COMMENT_ID"));
      JSONObject jsonObject=getJSONObjectFromURL(sb.toString());
      String commentBody=jsonObject.getString("body");
      rootElement=getElement(commentBody);
      List<String> actualCommentTokens=getCommentTokens(rootElement);
      boolean matchesTemplate=true;
      for (int i=0; i < expectedCommentTokens.size(); i++) {
        System.out.println();
        System.out.println("Test " + i);
        Pattern pattern=Pattern.compile(expectedCommentTokens.get(i));
        Matcher matcher=pattern.matcher(actualCommentTokens.get(i));
        System.out.println(expectedCommentTokens.get(i));
        System.out.println(actualCommentTokens.get(i));
        if (matcher.find()) {
          System.out.println("Tokens matched.");
        }
 else {
          System.out.println("Tokens mismatched.");
          _validResult=true;
          return result;
        }
      }
      if (matchesTemplate) {
        result="SUCCESS";
        _validResult=true;
        return result;
      }
    }
 catch (    Exception e) {
      throw new RuntimeException("An exception occurred while trying to match the actual " + "output with the expected output",e);
    }
  }
  result=null;
  return result;
}
