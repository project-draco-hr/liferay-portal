{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  validate(type,parentMicroblogsEntryId);
  long microblogsEntryId=counterLocalService.increment();
  if (parentMicroblogsEntryId == 0) {
    parentMicroblogsEntryId=microblogsEntryId;
  }
  MicroblogsEntry microblogsEntry=microblogsEntryPersistence.create(microblogsEntryId);
  microblogsEntry.setCompanyId(user.getCompanyId());
  microblogsEntry.setUserId(user.getUserId());
  microblogsEntry.setUserName(user.getFullName());
  microblogsEntry.setCreateDate(now);
  microblogsEntry.setModifiedDate(now);
  microblogsEntry.setCreatorClassNameId(creatorClassNameId);
  microblogsEntry.setCreatorClassPK(creatorClassPK);
  microblogsEntry.setContent(content);
  microblogsEntry.setType(type);
  microblogsEntry.setParentMicroblogsEntryId(parentMicroblogsEntryId);
  microblogsEntry.setSocialRelationType(socialRelationType);
  microblogsEntryPersistence.update(microblogsEntry);
  resourceLocalService.addModelResources(microblogsEntry,serviceContext);
  updateAsset(microblogsEntry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  return microblogsEntry;
}
