{
  Sass_File_Context sassFileContext=null;
  try {
    File inputFile=new File(inputFileName);
    String includeDirNames=includeDirName + File.pathSeparator + inputFile.getParent();
    if ((sourceMapFileName == null) || sourceMapFileName.equals("")) {
      sourceMapFileName=getOutputFileName(inputFileName) + ".map";
    }
    sassFileContext=_createSassFileContext(inputFileName,includeDirNames,generateSourceMap,sourceMapFileName);
    Sass_Context sassContext=_liferaysassLibrary.sass_file_context_get_context(sassFileContext);
    int errorStatus=_liferaysassLibrary.sass_context_get_error_status(sassContext);
    if (errorStatus != 0) {
      String errorMessage=_liferaysassLibrary.sass_context_get_error_message(sassContext);
      throw new JniSassCompilerException(errorMessage);
    }
    String output=_liferaysassLibrary.sass_context_get_output_string(sassContext);
    if (generateSourceMap) {
      try {
        File sourceMapFile=new File(sourceMapFileName);
        String sourcemapOutput=_liferaysassLibrary.sass_context_get_source_map_string(sassContext);
        write(sourceMapFile,sourcemapOutput);
      }
 catch (      Exception e) {
        System.out.println("Unable to create source map");
      }
    }
    if (output == null) {
      throw new JniSassCompilerException("Null output");
    }
    return output;
  }
  finally {
    try {
      if (sassFileContext != null) {
        _liferaysassLibrary.sass_delete_file_context(sassFileContext);
      }
    }
 catch (    Throwable t) {
      throw new JniSassCompilerException(t);
    }
  }
}
