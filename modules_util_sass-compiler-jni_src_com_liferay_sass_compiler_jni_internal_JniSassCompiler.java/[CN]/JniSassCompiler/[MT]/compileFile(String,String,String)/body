{
  byte sourceComments=(byte)0;
  String includeDirNames=includeDirName + File.pathSeparator + new File(inputFileName).getParent();
  Sass_File_Context sassFileContext=null;
  try {
    sassFileContext=_liferaysassLibrary.sass_make_file_context(inputFileName);
    Sass_Options sassOptions=_liferaysassLibrary.sass_make_options();
    _liferaysassLibrary.sass_option_set_image_path(sassOptions,imgDirName);
    _liferaysassLibrary.sass_option_set_include_path(sassOptions,includeDirNames);
    _liferaysassLibrary.sass_option_set_input_path(sassOptions,inputFileName);
    _liferaysassLibrary.sass_option_set_output_path(sassOptions,"");
    _liferaysassLibrary.sass_option_set_output_style(sassOptions,Sass_Output_Style.SASS_STYLE_COMPACT);
    _liferaysassLibrary.sass_option_set_source_comments(sassOptions,sourceComments);
    _liferaysassLibrary.sass_file_context_set_options(sassFileContext,sassOptions);
    _liferaysassLibrary.sass_compile_file_context(sassFileContext);
    Sass_Context sassContext=_liferaysassLibrary.sass_file_context_get_context(sassFileContext);
    int errorStatus=_liferaysassLibrary.sass_context_get_error_status(sassContext);
    if (errorStatus != 0) {
      String errorMessage=_liferaysassLibrary.sass_context_get_error_message(sassContext);
      throw new JniSassCompilerException(errorMessage);
    }
    String output=_liferaysassLibrary.sass_context_get_output_string(sassContext);
    if (output == null) {
      throw new JniSassCompilerException("Null output");
    }
    return output;
  }
  finally {
    try {
      if (sassFileContext != null) {
        _liferaysassLibrary.sass_delete_file_context(sassFileContext);
      }
    }
 catch (    Throwable t) {
      throw new JniSassCompilerException(t);
    }
  }
}
