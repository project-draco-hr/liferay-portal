{
  portletDataContext.addPermissions("com.liferay.portlet.journal",portletDataContext.getScopeGroupId());
  String articleId=portletPreferences.getValue("articleId",null);
  if (articleId == null) {
    if (_log.isDebugEnabled()) {
      _log.debug("No article id found in preferences of portlet " + portletId);
    }
    return StringPool.BLANK;
  }
  long articleGroupId=GetterUtil.getLong(portletPreferences.getValue("groupId",StringPool.BLANK));
  if (articleGroupId <= 0) {
    if (_log.isWarnEnabled()) {
      _log.warn("No group id found in preferences of portlet " + portletId);
    }
    return StringPool.BLANK;
  }
  long previousScopeGroupId=portletDataContext.getScopeGroupId();
  if (articleGroupId != portletDataContext.getScopeGroupId()) {
    portletDataContext.setScopeGroupId(articleGroupId);
  }
 else   if (articleGroupId == portletDataContext.getSourceCompanyGroupId()) {
    portletDataContext.setScopeGroupId(portletDataContext.getCompanyGroupId());
  }
  JournalArticle article=null;
  try {
    article=JournalArticleLocalServiceUtil.getLatestArticle(articleGroupId,articleId,WorkflowConstants.STATUS_APPROVED);
  }
 catch (  NoSuchArticleException nsae) {
  }
  if (article == null) {
    try {
      article=JournalArticleLocalServiceUtil.getLatestArticle(articleGroupId,articleId,WorkflowConstants.STATUS_EXPIRED);
    }
 catch (    NoSuchArticleException nsae) {
    }
  }
  Element rootElement=addExportDataRootElement(portletDataContext);
  if (article == null) {
    portletDataContext.setScopeGroupId(previousScopeGroupId);
    return getExportDataRootElementString(rootElement);
  }
  StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,article);
  String defaultTemplateId=article.getTemplateId();
  String preferenceTemplateId=portletPreferences.getValue("templateId",null);
  if (Validator.isNotNull(defaultTemplateId) && Validator.isNotNull(preferenceTemplateId) && !defaultTemplateId.equals(preferenceTemplateId)) {
    DDMTemplate ddmTemplate=DDMTemplateLocalServiceUtil.getTemplate(article.getGroupId(),PortalUtil.getClassNameId(DDMStructure.class),preferenceTemplateId,true);
    StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,ddmTemplate);
    Element articleElement=portletDataContext.getExportDataElement(article);
    portletDataContext.addReferenceElement(articleElement,ddmTemplate);
  }
  portletDataContext.setScopeGroupId(previousScopeGroupId);
  return getExportDataRootElementString(rootElement);
}
