{
  long pk=nextLong();
  RatingsEntry newRatingsEntry=_persistence.create(pk);
  newRatingsEntry.setCompanyId(nextLong());
  newRatingsEntry.setUserId(nextLong());
  newRatingsEntry.setUserName(randomString());
  newRatingsEntry.setCreateDate(nextDate());
  newRatingsEntry.setModifiedDate(nextDate());
  newRatingsEntry.setClassNameId(nextLong());
  newRatingsEntry.setClassPK(nextLong());
  newRatingsEntry.setScore(nextDouble());
  _persistence.update(newRatingsEntry);
  RatingsEntry existingRatingsEntry=_persistence.findByPrimaryKey(newRatingsEntry.getPrimaryKey());
  assertEquals(existingRatingsEntry.getEntryId(),newRatingsEntry.getEntryId());
  assertEquals(existingRatingsEntry.getCompanyId(),newRatingsEntry.getCompanyId());
  assertEquals(existingRatingsEntry.getUserId(),newRatingsEntry.getUserId());
  assertEquals(existingRatingsEntry.getUserName(),newRatingsEntry.getUserName());
  assertEquals(existingRatingsEntry.getCreateDate(),newRatingsEntry.getCreateDate());
  assertEquals(existingRatingsEntry.getModifiedDate(),newRatingsEntry.getModifiedDate());
  assertEquals(existingRatingsEntry.getClassNameId(),newRatingsEntry.getClassNameId());
  assertEquals(existingRatingsEntry.getClassPK(),newRatingsEntry.getClassPK());
  assertEquals(existingRatingsEntry.getScore(),newRatingsEntry.getScore());
}
