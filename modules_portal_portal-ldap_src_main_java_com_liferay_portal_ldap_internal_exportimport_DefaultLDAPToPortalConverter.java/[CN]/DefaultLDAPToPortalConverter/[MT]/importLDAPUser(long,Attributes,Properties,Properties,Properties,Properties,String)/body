{
  boolean autoScreenName=PrefsPropsUtil.getBoolean(companyId,PropsKeys.USERS_SCREEN_NAME_ALWAYS_AUTOGENERATE);
  String screenName=LDAPUtil.getAttributeString(attributes,userMappings,UserConverterKeys.SCREEN_NAME).toLowerCase();
  String emailAddress=LDAPUtil.getAttributeString(attributes,userMappings,UserConverterKeys.EMAIL_ADDRESS);
  if (_log.isDebugEnabled()) {
    _log.debug("Screen name " + screenName + " and email address "+ emailAddress);
  }
  String firstName=LDAPUtil.getAttributeString(attributes,userMappings,UserConverterKeys.FIRST_NAME);
  String middleName=LDAPUtil.getAttributeString(attributes,userMappings,UserConverterKeys.MIDDLE_NAME);
  String lastName=LDAPUtil.getAttributeString(attributes,userMappings,UserConverterKeys.LAST_NAME);
  FullNameDefinition fullNameDefinition=FullNameDefinitionFactory.getInstance(LocaleUtil.getDefault());
  if (Validator.isNull(firstName) || (fullNameDefinition.isFieldRequired("last-name") && Validator.isNull(lastName))) {
    String fullName=LDAPUtil.getAttributeString(attributes,userMappings,UserConverterKeys.FULL_NAME);
    FullNameGenerator fullNameGenerator=FullNameGeneratorFactory.getInstance();
    String[] names=fullNameGenerator.splitFullName(fullName);
    if (Validator.isNull(firstName)) {
      firstName=names[0];
    }
    if (Validator.isNull(middleName)) {
      middleName=names[1];
    }
    if (Validator.isNull(lastName)) {
      lastName=names[2];
    }
  }
  if (!autoScreenName && Validator.isNull(screenName)) {
    throw new UserScreenNameException.MustNotBeNull(ContactConstants.getFullName(firstName,middleName,lastName));
  }
  if (Validator.isNull(emailAddress) && PrefsPropsUtil.getBoolean(companyId,PropsKeys.USERS_EMAIL_ADDRESS_REQUIRED)) {
    throw new UserEmailAddressException.MustNotBeNull(ContactConstants.getFullName(firstName,middleName,lastName));
  }
  LDAPUser ldapUser=new LDAPUser();
  ldapUser.setAutoPassword(password.equals(StringPool.BLANK));
  ldapUser.setAutoScreenName(autoScreenName);
  Contact contact=_contactPersistence.create(0);
  long prefixId=getListTypeId(attributes,contactMappings,ContactConverterKeys.PREFIX,ListTypeConstants.CONTACT_PREFIX);
  contact.setPrefixId(prefixId);
  long suffixId=getListTypeId(attributes,contactMappings,ContactConverterKeys.SUFFIX,ListTypeConstants.CONTACT_SUFFIX);
  contact.setSuffixId(suffixId);
  String gender=LDAPUtil.getAttributeString(attributes,contactMappings,ContactConverterKeys.GENDER);
  gender=StringUtil.toLowerCase(gender);
  if (Validator.isNull(gender) || GetterUtil.getBoolean(gender) || gender.equals("m")|| gender.equals("male")) {
    contact.setMale(true);
  }
 else {
    contact.setMale(false);
  }
  try {
    Date birthday=DateUtil.parseDate(LDAPUtil.getAttributeString(attributes,contactMappings,ContactConverterKeys.BIRTHDAY),LocaleUtil.getDefault());
    contact.setBirthday(birthday);
  }
 catch (  ParseException pe) {
    Calendar birthdayCalendar=CalendarFactoryUtil.getCalendar(1970,Calendar.JANUARY,1);
    contact.setBirthday(birthdayCalendar.getTime());
  }
  contact.setSmsSn(LDAPUtil.getAttributeString(attributes,contactMappings,ContactConverterKeys.SMS_SN));
  contact.setFacebookSn(LDAPUtil.getAttributeString(attributes,contactMappings,ContactConverterKeys.FACEBOOK_SN));
  contact.setJabberSn(LDAPUtil.getAttributeString(attributes,contactMappings,ContactConverterKeys.JABBER_SN));
  contact.setSkypeSn(LDAPUtil.getAttributeString(attributes,contactMappings,ContactConverterKeys.SKYPE_SN));
  contact.setTwitterSn(LDAPUtil.getAttributeString(attributes,contactMappings,ContactConverterKeys.TWITTER_SN));
  contact.setJobTitle(LDAPUtil.getAttributeString(attributes,contactMappings,ContactConverterKeys.JOB_TITLE));
  ldapUser.setContact(contact);
  Map<String,String[]> contactExpandoAttributes=getExpandoAttributes(attributes,contactExpandoMappings);
  ldapUser.setContactExpandoAttributes(contactExpandoAttributes);
  ldapUser.setCreatorUserId(0);
  ldapUser.setGroupIds(null);
  ldapUser.setOrganizationIds(null);
  ldapUser.setPasswordReset(false);
  Object portrait=LDAPUtil.getAttributeObject(attributes,userMappings.getProperty(UserConverterKeys.PORTRAIT));
  if (portrait != null) {
    byte[] portraitBytes=(byte[])portrait;
    if (portraitBytes.length > 0) {
      ldapUser.setPortraitBytes((byte[])portrait);
    }
    ldapUser.setUpdatePortrait(true);
  }
  ldapUser.setRoleIds(null);
  ldapUser.setSendEmail(false);
  ServiceContext serviceContext=new ServiceContext();
  String uuid=LDAPUtil.getAttributeString(attributes,userMappings,UserConverterKeys.UUID);
  serviceContext.setUuid(uuid);
  ldapUser.setServiceContext(serviceContext);
  ldapUser.setUpdatePassword(!password.equals(StringPool.BLANK));
  User user=_userPersistence.create(0);
  user.setCompanyId(companyId);
  user.setEmailAddress(emailAddress);
  user.setFirstName(firstName);
  String jobTitle=LDAPUtil.getAttributeString(attributes,userMappings,UserConverterKeys.JOB_TITLE);
  user.setJobTitle(jobTitle);
  Locale locale=LocaleUtil.getDefault();
  user.setLanguageId(locale.toString());
  user.setLastName(lastName);
  user.setMiddleName(middleName);
  user.setOpenId(StringPool.BLANK);
  user.setPasswordUnencrypted(password);
  user.setScreenName(screenName);
  String status=LDAPUtil.getAttributeString(attributes,userMappings,UserConverterKeys.STATUS);
  if (Validator.isNotNull(status)) {
    user.setStatus(GetterUtil.getInteger(status));
  }
  ldapUser.setUser(user);
  Map<String,String[]> userExpandoAttributes=getExpandoAttributes(attributes,userExpandoMappings);
  ldapUser.setUserExpandoAttributes(userExpandoAttributes);
  ldapUser.setUserGroupIds(null);
  ldapUser.setUserGroupRoles(null);
  return ldapUser;
}
