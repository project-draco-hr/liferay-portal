{
  boolean workflowEnabled=WorkflowThreadLocal.isEnabled();
  try {
    WorkflowThreadLocal.setEnabled(true);
    String subtitle=StringPool.BLANK;
    String description="Description";
    String content="Content";
    int displayDateMonth=1;
    int displayDateDay=1;
    int displayDateYear=2012;
    int displayDateHour=12;
    int displayDateMinute=0;
    boolean allowPingbacks=true;
    boolean allowTrackbacks=true;
    String[] trackbacks=new String[0];
    String smallImageURL=StringPool.BLANK;
    ImageSelector smallImageSelector=null;
    if (smallImage) {
      String smallImageFileName="image.jpg";
      InputStream smallImageInputStream=BlogsTestUtil.class.getResourceAsStream("com/liferay/portal/util/dependencies/test.jpg");
      FileEntry smallImageFileEntry=null;
      try {
        smallImageFileEntry=TempFileUtil.getTempFile(serviceContext.getScopeGroupId(),userId,smallImageFileName,BlogsEntry.class.getName());
      }
 catch (      Exception e) {
        smallImageFileEntry=TempFileUtil.addTempFile(serviceContext.getScopeGroupId(),userId,smallImageFileName,BlogsEntry.class.getName(),smallImageInputStream,MimeTypesUtil.getContentType(smallImageFileName));
      }
      smallImageSelector=new ImageSelector(smallImageFileEntry.getFileEntryId(),smallImageURL);
    }
    serviceContext=(ServiceContext)serviceContext.clone();
    serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
    BlogsEntry entry=BlogsEntryLocalServiceUtil.addEntry(userId,title,subtitle,description,content,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,smallImageSelector,serviceContext);
    if (approved) {
      return updateStatus(entry,serviceContext);
    }
    return entry;
  }
  finally {
    WorkflowThreadLocal.setEnabled(workflowEnabled);
  }
}
