{
  ServiceTrackerMap<String,TrackedTwo> serviceTrackerMap=ServiceTrackerMapFactory.singleValueMap(_bundleContext,TrackedOne.class,("(target=*)"),new ServiceReferenceMapper<String,TrackedOne>(){
    @Override public void map(    ServiceReference<TrackedOne> serviceReference,    Emitter<String> emitter){
      TrackedOne service=_bundleContext.getService(serviceReference);
      String targetProperty=(String)serviceReference.getProperty("target");
      emitter.emit(targetProperty + "-" + service.getKey());
      _bundleContext.ungetService(serviceReference);
    }
  }
,new ServiceTrackerCustomizer<TrackedOne,TrackedTwo>(){
    @Override public TrackedTwo addingService(    ServiceReference<TrackedOne> serviceReference){
      return new TrackedTwo(_bundleContext.getService(serviceReference));
    }
    @Override public void modifiedService(    ServiceReference<TrackedOne> serviceReference,    TrackedTwo service){
      removedService(serviceReference,service);
    }
    @Override public void removedService(    ServiceReference<TrackedOne> serviceReference,    TrackedTwo service){
      _bundleContext.ungetService(serviceReference);
    }
  }
);
  serviceTrackerMap.open();
  TrackedOne one=new TrackedOne("1");
  registerService(one,"one");
  TrackedOne two=new TrackedOne("2");
  registerService(two,"two");
  TrackedTwo twoOne=serviceTrackerMap.getService("one-1");
  Assert.assertEquals(one,twoOne.getTrackedOne());
  TrackedTwo twoTwo=serviceTrackerMap.getService("two-2");
  Assert.assertEquals(two,twoTwo.getTrackedOne());
  serviceTrackerMap.close();
}
