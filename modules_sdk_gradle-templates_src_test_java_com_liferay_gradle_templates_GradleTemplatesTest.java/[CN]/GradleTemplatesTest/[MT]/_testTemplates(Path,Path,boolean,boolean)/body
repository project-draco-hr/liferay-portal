{
  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(rootDirPath)){
    final AtomicReference<String> previousGradlewDistributionUrl=new AtomicReference<>(null);
    for (    Path path : directoryStream) {
      if (!Files.isDirectory(path)) {
        continue;
      }
      Path dirNamePath=path.getFileName();
      Path otherDirPath=otherRootDirPath.resolve(dirNamePath.toString());
      Assert.assertTrue("Missing " + otherDirPath,Files.exists(otherDirPath));
      Path gitIgnorePath=path.resolve("gitignore");
      Path dotGitIgnorePath=path.resolve(".gitignore");
      Assert.assertFalse("Rename " + dotGitIgnorePath + " to "+ gitIgnorePath+ " to bypass GRADLE-1883",Files.exists(dotGitIgnorePath));
      if (gitIgnoreForbidden) {
        Assert.assertFalse("Forbidden " + gitIgnorePath,Files.exists(gitIgnorePath));
      }
 else {
        Assert.assertTrue("Missing " + gitIgnorePath,Files.exists(gitIgnorePath));
      }
      boolean gradlewExists=Files.exists(path.resolve("gradlew"));
      if (gradlewForbidden) {
        Assert.assertFalse("Forbidden Gradle wrapper in " + path,gradlewExists);
      }
 else {
        Assert.assertTrue("Missing Gradle wrapper in " + path,gradlewExists);
        String gradlewDistributionUrl=_readProperty(path.resolve("gradle/wrapper/gradle-wrapper.properties"),"distributionUrl");
        boolean first=previousGradlewDistributionUrl.compareAndSet(null,gradlewDistributionUrl);
        if (!first) {
          Assert.assertEquals("Wrong Gradle wrapper distribution URL in " + path,previousGradlewDistributionUrl.get(),gradlewDistributionUrl);
        }
      }
    }
  }
 }
