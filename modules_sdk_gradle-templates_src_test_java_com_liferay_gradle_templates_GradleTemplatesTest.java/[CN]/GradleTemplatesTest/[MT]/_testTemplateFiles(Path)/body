{
  Files.walkFileTree(rootDirPath,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dirPath,    BasicFileAttributes basicFileAttributes) throws IOException {
      Path languagePropertiesPath=dirPath.resolve("Language.properties");
      if (Files.exists(languagePropertiesPath)) {
        _testLanguageProperties(languagePropertiesPath);
        String glob="Language_*.properties";
        Assert.assertFalse("Forbidden " + dirPath + File.separator+ glob,_exists(dirPath,glob));
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path path,    BasicFileAttributes basicFileAttributes) throws IOException {
      Path fileNamePath=path.getFileName();
      String fileName=fileNamePath.toString();
      String extension=_getExtension(fileName);
      if (!fileName.equals(".gitkeep") && (_isInJavaSrcDir(path) != extension.equals("java"))) {
        Assert.fail("Wrong source directory " + path);
      }
      if (_isTextFile(fileName,extension)) {
        _testTextFileLines(path);
        if (!_trailingEmptyLineAllowedFileNames.contains(fileName)) {
          Assert.assertFalse("Trailing empty line in " + path,_endsWithEmptyLine(path));
        }
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
}
