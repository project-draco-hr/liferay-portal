{
  long pk=ServiceTestUtil.nextLong();
  DLFileRank newDLFileRank=_persistence.create(pk);
  newDLFileRank.setUuid(ServiceTestUtil.randomString());
  newDLFileRank.setGroupId(ServiceTestUtil.nextLong());
  newDLFileRank.setCompanyId(ServiceTestUtil.nextLong());
  newDLFileRank.setUserId(ServiceTestUtil.nextLong());
  newDLFileRank.setUserName(ServiceTestUtil.randomString());
  newDLFileRank.setCreateDate(ServiceTestUtil.nextDate());
  newDLFileRank.setModifiedDate(ServiceTestUtil.nextDate());
  newDLFileRank.setFileEntryId(ServiceTestUtil.nextLong());
  newDLFileRank.setActive(ServiceTestUtil.randomBoolean());
  _persistence.update(newDLFileRank);
  DLFileRank existingDLFileRank=_persistence.findByPrimaryKey(newDLFileRank.getPrimaryKey());
  Assert.assertEquals(existingDLFileRank.getUuid(),newDLFileRank.getUuid());
  Assert.assertEquals(existingDLFileRank.getFileRankId(),newDLFileRank.getFileRankId());
  Assert.assertEquals(existingDLFileRank.getGroupId(),newDLFileRank.getGroupId());
  Assert.assertEquals(existingDLFileRank.getCompanyId(),newDLFileRank.getCompanyId());
  Assert.assertEquals(existingDLFileRank.getUserId(),newDLFileRank.getUserId());
  Assert.assertEquals(existingDLFileRank.getUserName(),newDLFileRank.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingDLFileRank.getCreateDate()),Time.getShortTimestamp(newDLFileRank.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingDLFileRank.getModifiedDate()),Time.getShortTimestamp(newDLFileRank.getModifiedDate()));
  Assert.assertEquals(existingDLFileRank.getFileEntryId(),newDLFileRank.getFileEntryId());
  Assert.assertEquals(existingDLFileRank.getActive(),newDLFileRank.getActive());
}
