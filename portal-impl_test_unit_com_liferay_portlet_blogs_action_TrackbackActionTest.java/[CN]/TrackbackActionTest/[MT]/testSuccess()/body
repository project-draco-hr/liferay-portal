{
  long userId=42;
  String blogName="This is a blog";
  long groupId=16;
  String className=BlogsEntry.class.getName();
  long classPK=142857;
  long threadId=7;
  long parentMessageId=37;
  String title="This is a title";
  _mockOriginalServletRequest.setParameter("blog_name",blogName);
  _mockOriginalServletRequest.setParameter("title",title);
  _mockOriginalServletRequest.setParameter("excerpt","This is an excerpt");
  doReturn(userId).when(_mockUserLocalService).getDefaultUserId(anyLong());
  doReturn(groupId).when(_mockBlogsEntry).getGroupId();
  doReturn(classPK).when(_mockBlogsEntry).getEntryId();
  doReturn("__UrlTitle__").when(_mockBlogsEntry).getUrlTitle();
  doReturn(threadId).when(_mockMBThread).getThreadId();
  doReturn(parentMessageId).when(_mockMBThread).getRootMessageId();
  doReturn(99999L).when(_mockMBMessage).getMessageId();
  doReturn("Read more").when(_mockLanguage).get((Locale)any(),eq("read-more"));
  doReturn("__LayoutFullURL__").when(_mockPortal).getLayoutFullURL(_mockThemeDisplay);
  _initValidUrl();
  _addTrackback();
  _assertSuccess();
  verify(_mockMBMessageLocalService).getDiscussionMessageDisplay(userId,groupId,className,classPK,WorkflowConstants.STATUS_APPROVED);
  verify(_mockMBMessageLocalService).addDiscussionMessage(eq(userId),eq(blogName),eq(groupId),eq(className),eq(classPK),eq(threadId),eq(parentMessageId),eq(title),eq("[...] This is an excerpt [...] [url=__url__]Read more[/url]"),(ServiceContext)any());
  assertEquals("[99999, __url__, __LayoutFullURL__/-/blogs/__UrlTitle__]",_trackback);
}
