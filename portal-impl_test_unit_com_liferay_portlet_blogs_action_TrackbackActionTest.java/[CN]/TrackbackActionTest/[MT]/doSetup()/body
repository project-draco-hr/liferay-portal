{
  MockitoAnnotations.initMocks(this);
  when(_portal.getOriginalServletRequest((HttpServletRequest)any())).thenReturn(_mockOriginalServletRequest);
  when(_portal.getHttpServletRequest((PortletRequest)any())).thenReturn(_mockHttpServletRequest);
  when(_portal.getHttpServletResponse((PortletResponse)any())).thenReturn(_mockHttpServletResponse);
  when(_actionRequest.getAttribute(WebKeys.THEME_DISPLAY)).thenReturn(_themeDisplay);
  when(_actionRequest.getPreferences()).thenReturn(_portletPreferences);
  when(_actionRequest.getAttribute(WebKeys.BLOGS_ENTRY)).thenReturn(_blogsEntry);
  when(_blogsEntry.isAllowTrackbacks()).thenReturn(true);
  mockStatic(UserLocalServiceUtil.class,new CallsRealMethods());
  stub(method(UserLocalServiceUtil.class,"getService")).toReturn(_userLocalService);
  mockStatic(BlogsEntryServiceUtil.class,new CallsRealMethods());
  stub(method(BlogsEntryServiceUtil.class,"getService")).toReturn(_blogsEntryService);
  mockStatic(LinkbackConsumerUtil.class,new CallsRealMethods());
  replace(method(LinkbackConsumerUtil.class,"addNewTrackback")).with(getClass().getMethod("addNewTrackback",Long.TYPE,String.class,String.class));
  new PortalUtil().setPortal(_portal);
  PropsUtil.setProps(_props);
  new HttpUtil().setHttp(_http);
  _themeDisplay.setCompany(_company);
  new LanguageUtil().setLanguage(_language);
}
