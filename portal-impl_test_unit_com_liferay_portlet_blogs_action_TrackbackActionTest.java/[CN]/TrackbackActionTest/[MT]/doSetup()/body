{
  MockitoAnnotations.initMocks(this);
  doReturn(_mockOriginalServletRequest).when(_portal).getOriginalServletRequest((HttpServletRequest)any());
  doReturn(_mockHttpServletRequest).when(_portal).getHttpServletRequest((PortletRequest)any());
  doReturn(_mockHttpServletResponse).when(_portal).getHttpServletResponse((PortletResponse)any());
  doReturn(_themeDisplay).when(_actionRequest).getAttribute(WebKeys.THEME_DISPLAY);
  doReturn(_portletPreferences).when(_actionRequest).getPreferences();
  doReturn(_blogsEntry).when(_actionRequest).getAttribute(WebKeys.BLOGS_ENTRY);
  doReturn(Collections.enumeration(Collections.emptySet())).when(_actionRequest).getParameterNames();
  doReturn(_mbMessageDisplay).when(_mbMessageLocalService).getDiscussionMessageDisplay(anyLong(),anyLong(),eq(BlogsEntry.class.getName()),anyLong(),eq(WorkflowConstants.STATUS_APPROVED));
  doReturn(_mbMessage).when(_mbMessageLocalService).addDiscussionMessage(anyLong(),anyString(),anyLong(),anyString(),anyLong(),anyLong(),anyLong(),anyString(),anyString(),(ServiceContext)any());
  doReturn(_mbThread).when(_mbMessageDisplay).getThread();
  doReturn(true).when(_blogsEntry).isAllowTrackbacks();
  mockStatic(UserLocalServiceUtil.class,new CallsRealMethods());
  stub(method(UserLocalServiceUtil.class,"getService")).toReturn(_userLocalService);
  mockStatic(MBMessageLocalServiceUtil.class,new CallsRealMethods());
  stub(method(MBMessageLocalServiceUtil.class,"getService")).toReturn(_mbMessageLocalService);
  mockStatic(BlogsEntryServiceUtil.class,new CallsRealMethods());
  stub(method(BlogsEntryServiceUtil.class,"getService")).toReturn(_blogsEntryService);
  mockStatic(LinkbackConsumerUtil.class,new CallsRealMethods());
  replace(method(LinkbackConsumerUtil.class,"addNewTrackback")).with(getClass().getMethod("addNewTrackback",Long.TYPE,String.class,String.class));
  new PortalUtil().setPortal(_portal);
  PropsUtil.setProps(_props);
  new HttpUtil().setHttp(_http);
  _themeDisplay.setCompany(_company);
  _themeDisplay.setUser(_user);
  new LanguageUtil().setLanguage(_language);
  new PortletPreferencesFactoryUtil().setPortletPreferencesFactory(_portletPreferencesFactory);
  new ExpandoBridgeFactoryUtil().setExpandoBridgeFactory(_expandoBridgeFactory);
}
