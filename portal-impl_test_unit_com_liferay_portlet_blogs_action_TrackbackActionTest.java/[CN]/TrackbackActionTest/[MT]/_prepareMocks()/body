{
  MockitoAnnotations.initMocks(this);
  doReturn(_mockOriginalServletRequest).when(_mockPortal).getOriginalServletRequest((HttpServletRequest)any());
  doReturn(_mockHttpServletRequest).when(_mockPortal).getHttpServletRequest((PortletRequest)any());
  doReturn(_mockResponse).when(_mockPortal).getHttpServletResponse((PortletResponse)any());
  doReturn(_mockThemeDisplay).when(_mockActionRequest).getAttribute(WebKeys.THEME_DISPLAY);
  doReturn(_mockPortletPreferences).when(_mockActionRequest).getPreferences();
  doReturn(_mockBlogsEntry).when(_mockActionRequest).getAttribute(WebKeys.BLOGS_ENTRY);
  doReturn(Collections.enumeration(Collections.emptySet())).when(_mockActionRequest).getParameterNames();
  doReturn(_mockMBMessageDisplay).when(_mockMBMessageLocalService).getDiscussionMessageDisplay(anyLong(),anyLong(),eq(BlogsEntry.class.getName()),anyLong(),eq(WorkflowConstants.STATUS_APPROVED));
  doReturn(_mockMBMessage).when(_mockMBMessageLocalService).addDiscussionMessage(anyLong(),anyString(),anyLong(),anyString(),anyLong(),anyLong(),anyLong(),anyString(),anyString(),(ServiceContext)any());
  doReturn(_mockMBThread).when(_mockMBMessageDisplay).getThread();
  doReturn(true).when(_mockBlogsEntry).isAllowTrackbacks();
  mockStatic(UserLocalServiceUtil.class,new CallsRealMethods());
  stub(method(UserLocalServiceUtil.class,"getService")).toReturn(_mockUserLocalService);
  mockStatic(MBMessageLocalServiceUtil.class,new CallsRealMethods());
  stub(method(MBMessageLocalServiceUtil.class,"getService")).toReturn(_mockMBMessageLocalService);
  mockStatic(BlogsEntryServiceUtil.class,new CallsRealMethods());
  stub(method(BlogsEntryServiceUtil.class,"getService")).toReturn(_mockBlogsEntryService);
  mockStatic(LinkbackConsumerUtil.class,new CallsRealMethods());
  replace(method(LinkbackConsumerUtil.class,"addNewTrackback")).with(this.getClass().getMethod("addNewTrackback",Long.TYPE,String.class,String.class));
  new PortalUtil().setPortal(_mockPortal);
  PropsUtil.setProps(_mockProps);
  new HttpUtil().setHttp(_mockHttp);
  _mockThemeDisplay.setCompany(_mockCompany);
  _mockThemeDisplay.setUser(_mockUser);
  new LanguageUtil().setLanguage(_mockLanguage);
  new PortletPreferencesFactoryUtil().setPortletPreferencesFactory(_mockPortletPreferencesFactory);
  new ExpandoBridgeFactoryUtil().setExpandoBridgeFactory(_mockExpandoBridgeFactory);
}
