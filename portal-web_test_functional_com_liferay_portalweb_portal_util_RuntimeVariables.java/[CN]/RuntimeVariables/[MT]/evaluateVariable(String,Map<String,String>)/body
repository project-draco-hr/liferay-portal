{
  String varValue=value;
  Pattern pattern=Pattern.compile("\\$\\{([^}]*?)\\}");
  Matcher matcher=pattern.matcher(varValue);
  Pattern statementPattern=Pattern.compile("(.*)\\?(.*)\\(([^\\)]*?)\\)");
  while (matcher.find()) {
    String statement=matcher.group(1);
    Matcher statementMatcher=statementPattern.matcher(statement);
    if (statementMatcher.find()) {
      String operand=statementMatcher.group(1);
      if (!context.containsKey(operand)) {
        continue;
      }
      String[] arguments=StringUtil.split(statementMatcher.group(3),"'");
      List<String> argumentsList=new ArrayList<String>();
      for (int i=1; i < arguments.length; i++) {
        if ((i % 2) == 1) {
          argumentsList.add(arguments[i]);
        }
      }
      String method=statementMatcher.group(2);
      String operandValue=context.get(operand);
      String replaceRegex="\\$\\{([^}]*?)\\}";
      String result="";
      if (method.startsWith("getFirstNumber")) {
        result=operandValue.replaceFirst("\\D*(\\d*).*","$1");
      }
 else       if (method.startsWith("increment")) {
        int i=GetterUtil.getInteger(operandValue) + 1;
        result=String.valueOf(i);
      }
 else       if (method.startsWith("length")) {
        result=String.valueOf(operandValue.length());
      }
 else       if (method.startsWith("lowercase")) {
        result=StringUtil.toLowerCase(operandValue);
      }
 else       if (method.startsWith("replace")) {
        result=operandValue.replace(argumentsList.get(0),argumentsList.get(1));
      }
 else       if (method.startsWith("uppercase")) {
        result=StringUtil.toUpperCase(operandValue);
      }
      varValue=varValue.replaceFirst(replaceRegex,result);
    }
 else {
      String varName=statement;
      if (!context.containsKey(varName)) {
        continue;
      }
      String replaceRegex="\\$\\{([^}]*?)\\}";
      String result=context.get(varName);
      result=Matcher.quoteReplacement(result);
      varValue=varValue.replaceFirst(replaceRegex,result);
    }
  }
  varValue=varValue.replace("\\$","$");
  varValue=varValue.replace("\\{","{");
  varValue=varValue.replace("\\}","}");
  return varValue;
}
