{
  String varValue=value;
  Pattern pattern=Pattern.compile("\\$\\{([^}]*?)\\}");
  Matcher matcher=pattern.matcher(varValue);
  while (matcher.find()) {
    String statement=matcher.group(1);
    Pattern statementPattern=Pattern.compile("(.*)\\?(.*)\\(([^\\)]*?)\\)");
    Matcher statementMatcher=statementPattern.matcher(statement);
    if (statementMatcher.find()) {
      String operand=statementMatcher.group(1);
      if (context.containsKey(operand)) {
        String arguments=statementMatcher.group(3);
        String[] argumentArray=arguments.split("'");
        List<String> argumentList=new ArrayList<String>();
        for (int i=1; i < argumentArray.length; i++) {
          if ((i % 2) == 1) {
            argumentList.add(argumentArray[i]);
          }
        }
        String method=statementMatcher.group(2);
        String operandValue=context.get(operand);
        String replaceRegex="\\$\\{([^}]*?)\\}";
        if (method.startsWith("replace")) {
          String result=operandValue.replace(argumentList.get(0),argumentList.get(1));
          varValue=varValue.replaceFirst(replaceRegex,result);
        }
 else         if (method.startsWith("lowercase")) {
          String result=operandValue.toLowerCase();
          varValue=varValue.replaceFirst(replaceRegex,result);
        }
      }
    }
 else {
      String varName=statement;
      if (context.containsKey(varName)) {
        String replaceRegex="\\$\\{([^}]*?)\\}";
        String result=context.get(varName);
        varValue=varValue.replaceFirst(replaceRegex,result);
      }
    }
  }
  return varValue;
}
