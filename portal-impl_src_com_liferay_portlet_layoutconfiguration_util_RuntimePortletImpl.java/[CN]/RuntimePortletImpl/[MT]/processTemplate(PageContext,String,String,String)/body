{
  if (Validator.isNull(velocityTemplateContent)) {
    return;
  }
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
  TemplateProcessor processor=new TemplateProcessor(request,response,portletId);
  VelocityContext velocityContext=VelocityEngineUtil.getWrappedStandardToolsContext();
  velocityContext.put("processor",processor);
  VelocityVariablesUtil.insertVariables(velocityContext,request);
  UnsyncStringWriter unsyncStringWriter=new UnsyncStringWriter();
  MethodHandler methodHandler=new MethodHandler(_initMethodKey,pageContext.getServletContext(),request,new PipingServletResponse(response,unsyncStringWriter),pageContext);
  Object velocityTaglib=methodHandler.invoke(true);
  velocityContext.put("taglibLiferay",velocityTaglib);
  velocityContext.put("theme",velocityTaglib);
  try {
    VelocityEngineUtil.mergeTemplate(velocityTemplateId,velocityTemplateContent,velocityContext,unsyncStringWriter);
  }
 catch (  Exception e) {
    _log.error(e,e);
    throw e;
  }
  String output=unsyncStringWriter.toString();
  Map<Portlet,Object[]> portletsMap=processor.getPortletsMap();
  Map<String,StringBundler> contentsMap=new HashMap<String,StringBundler>(portletsMap.size());
  for (  Map.Entry<Portlet,Object[]> entry : portletsMap.entrySet()) {
    Portlet portlet=entry.getKey();
    Object[] value=entry.getValue();
    String queryString=(String)value[0];
    String columnId=(String)value[1];
    Integer columnPos=(Integer)value[2];
    Integer columnCount=(Integer)value[3];
    UnsyncStringWriter portletUnsyncStringWriter=new UnsyncStringWriter();
    PipingServletResponse pipingServletResponse=new PipingServletResponse(response,portletUnsyncStringWriter);
    processPortlet(request,pipingServletResponse,portlet,queryString,columnId,columnPos,columnCount,null);
    contentsMap.put(portlet.getPortletId(),portletUnsyncStringWriter.getStringBundler());
  }
  StringBundler sb=StringUtil.replaceWithStringBundler(output,"[$TEMPLATE_PORTLET_","$]",contentsMap);
  sb.writeTo(pageContext.getOut());
}
