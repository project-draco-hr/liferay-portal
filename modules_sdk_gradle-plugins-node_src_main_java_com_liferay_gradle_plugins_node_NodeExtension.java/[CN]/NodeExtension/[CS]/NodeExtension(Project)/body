{
  _nodeDir=new Callable<File>(){
    @Override public File call() throws Exception {
      return new File(project.getBuildDir(),"node");
    }
  }
;
  _nodeExeUrl=new Callable<String>(){
    @Override public String call() throws Exception {
      String nodeVersion=getNodeVersion();
      if (Validator.isNull(nodeVersion)) {
        return null;
      }
      StringBuilder sb=new StringBuilder();
      sb.append("http://nodejs.org/dist/v");
      sb.append(nodeVersion);
      sb.append('/');
      String bitmode=OSDetector.getBitmode();
      if (bitmode.equals("64")) {
        if (nodeVersion.charAt(0) != '0') {
          sb.append("win-x64");
        }
 else {
          sb.append("x64");
        }
      }
 else       if (nodeVersion.charAt(0) != '0') {
        sb.append("win-x86");
      }
      sb.append("/node.exe");
      return sb.toString();
    }
  }
;
  _nodeUrl=new Callable<String>(){
    @Override public String call() throws Exception {
      String nodeVersion=getNodeVersion();
      if (Validator.isNull(nodeVersion)) {
        return null;
      }
      StringBuilder sb=new StringBuilder();
      sb.append("http://nodejs.org/dist/v");
      sb.append(nodeVersion);
      sb.append("/node-v");
      sb.append(nodeVersion);
      sb.append('-');
      String os="linux";
      if (OSDetector.isApple()) {
        os="darwin";
      }
      sb.append(os);
      sb.append("-x");
      String bitmode=OSDetector.getBitmode();
      if (bitmode.equals("32") || OSDetector.isWindows()) {
        bitmode="86";
      }
      sb.append(bitmode);
      sb.append(".tar.gz");
      return sb.toString();
    }
  }
;
  _project=project;
}
