{
  long rightPrimaryKey=1;
  Assert.assertEquals(0,_tableMapperImpl.deleteRightPrimaryKeyTableMappings(rightPrimaryKey));
  long leftPrimaryKey1=2;
  _mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  Assert.assertEquals(1,_tableMapperImpl.deleteRightPrimaryKeyTableMappings(rightPrimaryKey));
  long leftPrimaryKey2=3;
  _mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  _mappingStore.put(leftPrimaryKey2,new long[]{rightPrimaryKey});
  Assert.assertEquals(2,_tableMapperImpl.deleteRightPrimaryKeyTableMappings(rightPrimaryKey));
  RecorderModelListener<Left> leftModelListener=new RecorderModelListener<Left>();
  _leftBasePersistence.registerListener(leftModelListener);
  Assert.assertEquals(0,_tableMapperImpl.deleteRightPrimaryKeyTableMappings(rightPrimaryKey));
  leftModelListener.assertOnBeforeRemoveAssociation(false,null,null,null);
  leftModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  _leftBasePersistence.unregisterListener(leftModelListener);
  RecorderModelListener<Right> rightModelListener=new RecorderModelListener<Right>();
  _rightBasePersistence.registerListener(rightModelListener);
  Assert.assertEquals(0,_tableMapperImpl.deleteRightPrimaryKeyTableMappings(rightPrimaryKey));
  rightModelListener.assertOnBeforeRemoveAssociation(false,null,null,null);
  rightModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  _rightBasePersistence.unregisterListener(rightModelListener);
  leftModelListener=new RecorderModelListener<Left>();
  _leftBasePersistence.registerListener(leftModelListener);
  _mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  Assert.assertEquals(1,_tableMapperImpl.deleteRightPrimaryKeyTableMappings(rightPrimaryKey));
  leftModelListener.assertOnBeforeRemoveAssociation(true,leftPrimaryKey1,Right.class.getName(),rightPrimaryKey);
  leftModelListener.assertOnAfterRemoveAssociation(true,leftPrimaryKey1,Right.class.getName(),rightPrimaryKey);
  _leftBasePersistence.unregisterListener(leftModelListener);
  rightModelListener=new RecorderModelListener<Right>();
  _rightBasePersistence.registerListener(rightModelListener);
  _mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  Assert.assertEquals(1,_tableMapperImpl.deleteRightPrimaryKeyTableMappings(rightPrimaryKey));
  rightModelListener.assertOnBeforeRemoveAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey1);
  rightModelListener.assertOnAfterRemoveAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey1);
  _rightBasePersistence.unregisterListener(rightModelListener);
  leftModelListener=new RecorderModelListener<Left>();
  _leftBasePersistence.registerListener(leftModelListener);
  rightModelListener=new RecorderModelListener<Right>();
  _rightBasePersistence.registerListener(rightModelListener);
  _mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  MockDeleteRightPrimaryKeyTableMappingsSqlUpdate mockDeleteRightPrimaryKeyTableMappingsSqlUpdate=(MockDeleteRightPrimaryKeyTableMappingsSqlUpdate)_tableMapperImpl.deleteRightPrimaryKeyTableMappingsSqlUpdate;
  mockDeleteRightPrimaryKeyTableMappingsSqlUpdate.setDatabaseError(true);
  try {
    _tableMapperImpl.deleteRightPrimaryKeyTableMappings(rightPrimaryKey);
    Assert.fail();
  }
 catch (  SystemException se) {
    Throwable cause=se.getCause();
    Assert.assertSame(RuntimeException.class,cause.getClass());
    Assert.assertEquals("Database error",cause.getMessage());
  }
 finally {
    mockDeleteRightPrimaryKeyTableMappingsSqlUpdate.setDatabaseError(false);
    _mappingStore.remove(rightPrimaryKey);
  }
  leftModelListener.assertOnBeforeRemoveAssociation(true,leftPrimaryKey1,Right.class.getName(),rightPrimaryKey);
  rightModelListener.assertOnBeforeRemoveAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey1);
  leftModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  rightModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
}
