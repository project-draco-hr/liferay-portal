{
  long rightPrimaryKey=1;
  long[] leftPrimaryKeys=_tableMapperImpl.getLeftPrimaryKeys(rightPrimaryKey);
  Assert.assertEquals(0,leftPrimaryKeys.length);
  Assert.assertSame(leftPrimaryKeys,_tableMapperImpl.getLeftPrimaryKeys(rightPrimaryKey));
  long leftPrimaryKey1=3;
  long leftPrimaryKey2=2;
  PortalCache<Long,long[]> rightToLeftPortalCache=_tableMapperImpl.rightToLeftPortalCache;
  rightToLeftPortalCache.remove(rightPrimaryKey);
  _mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  _mappingStore.put(leftPrimaryKey2,new long[]{rightPrimaryKey});
  leftPrimaryKeys=_tableMapperImpl.getLeftPrimaryKeys(rightPrimaryKey);
  Assert.assertArrayEquals(new long[]{leftPrimaryKey2,leftPrimaryKey1},leftPrimaryKeys);
  rightToLeftPortalCache.remove(rightPrimaryKey);
  MockGetLeftPrimaryKeysSqlQuery mockGetLeftPrimaryKeysByRightPrimaryKeyMappingSqlQuery=(MockGetLeftPrimaryKeysSqlQuery)_tableMapperImpl.getLeftPrimaryKeysSqlQuery;
  mockGetLeftPrimaryKeysByRightPrimaryKeyMappingSqlQuery.setDatabaseError(true);
  try {
    _tableMapperImpl.getLeftPrimaryKeys(rightPrimaryKey);
  }
 catch (  SystemException se) {
    Throwable cause=se.getCause();
    Assert.assertSame(RuntimeException.class,cause.getClass());
    Assert.assertEquals("Database error",cause.getMessage());
  }
 finally {
    mockGetLeftPrimaryKeysByRightPrimaryKeyMappingSqlQuery.setDatabaseError(false);
  }
}
