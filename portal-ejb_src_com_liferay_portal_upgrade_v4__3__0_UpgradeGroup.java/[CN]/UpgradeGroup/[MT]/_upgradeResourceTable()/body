{
  _log.info("Upgrade Resource_ table");
  Iterator itr=ResourceLocalServiceUtil.getResources().iterator();
  while (itr.hasNext()) {
    Resource resource=(Resource)itr.next();
    String primKey=resource.getPrimKey();
    if (ResourceImpl.SCOPE_GROUP.equals(resource.getScope())) {
      Long groupId=(Long)_groupIdMap.get(new Long(primKey));
      primKey=String.valueOf(groupId);
      ResourceLocalServiceUtil.updatePrimKey(resource.getResourceId(),primKey);
    }
 else     if (ResourceImpl.SCOPE_INDIVIDUAL.equals(resource.getScope())) {
      if (primKey.startsWith(LayoutImpl.PUBLIC) || primKey.startsWith(LayoutImpl.PRIVATE)) {
        String[] keyParts=StringUtil.split(primKey,StringPool.PERIOD);
        Long groupId=(Long)_groupIdMap.get(new Long(keyParts[1]));
        keyParts[1]=String.valueOf(groupId);
        primKey=StringUtil.merge(keyParts,StringPool.PERIOD);
      }
 else       if (primKey.indexOf("groupId=") != -1 || primKey.indexOf("ownerId=") != -1) {
        String[] keyParts=StringUtil.split(primKey.substring(1,primKey.length() - 1),StringPool.COMMA + StringPool.SPACE);
        for (int i=0; i < keyParts.length; i++) {
          String[] kvp=StringUtil.split(keyParts[i],StringPool.EQUAL);
          if (kvp[0].equals("groupId")) {
            kvp[1]=String.valueOf(_groupIdMap.get(new Long(kvp[1])));
            keyParts[i]=StringUtil.merge(kvp,StringPool.EQUAL);
          }
 else           if (kvp[0].equals("ownerId")) {
            kvp[1]=(String)_ownerIdMap.get(kvp[1]);
            keyParts[i]=StringUtil.merge(kvp,StringPool.EQUAL);
          }
        }
        primKey=StringPool.OPEN_CURLY_BRACE + StringUtil.merge(keyParts,StringPool.COMMA + StringPool.SPACE) + StringPool.CLOSE_CURLY_BRACE;
      }
 else {
        continue;
      }
      ResourceLocalServiceUtil.updatePrimKey(resource.getResourceId(),primKey);
    }
  }
}
