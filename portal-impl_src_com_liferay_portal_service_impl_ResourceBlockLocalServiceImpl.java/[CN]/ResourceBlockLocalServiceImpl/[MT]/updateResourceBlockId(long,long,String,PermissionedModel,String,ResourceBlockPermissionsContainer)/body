{
  ResourceBlock resourceBlock=null;
  while (true) {
    resourceBlock=resourceBlockPersistence.fetchByC_G_N_P(companyId,groupId,name,permissionsHash,false);
    if (resourceBlock == null) {
      try {
        resourceBlock=addResourceBlock(companyId,groupId,name,permissionsHash,resourceBlockPermissionsContainer);
        resourceBlockPersistence.flush();
      }
 catch (      SystemException se) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to add a new resource block. Retrying");
        }
        Session session=resourceBlockPersistence.getCurrentSession();
        session.clear();
        DB db=DBFactoryUtil.getDB();
        if (!db.isSupportsQueryingAfterException()) {
          DataSource dataSource=resourceBlockPersistence.getDataSource();
          Connection connection=CurrentConnectionUtil.getConnection(dataSource);
          try {
            connection.rollback();
            connection.setAutoCommit(false);
          }
 catch (          SQLException sqle) {
            throw new SystemException(sqle);
          }
        }
        continue;
      }
      break;
    }
    Session session=resourceBlockPersistence.openSession();
    try {
      String sql=CustomSQLUtil.get(_RETAIN_RESOURCE_BLOCK);
      SQLQuery sqlQuery=session.createSQLQuery(sql);
      QueryPos qPos=QueryPos.getInstance(sqlQuery);
      qPos.add(resourceBlock.getResourceBlockId());
      if (sqlQuery.executeUpdate() > 0) {
        resourceBlock.setReferenceCount(resourceBlock.getReferenceCount() + 1);
        break;
      }
    }
 catch (    ORMException orme) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to increment reference count for resource " + "block " + resourceBlock.getResourceBlockId() + ". Retrying");
      }
    }
 finally {
      session.evict(resourceBlock);
      resourceBlockPersistence.closeSession(session);
    }
  }
  permissionedModel.setResourceBlockId(resourceBlock.getResourceBlockId());
  Callable<Void> callable=new Callable<Void>(){
    @Override public Void call() throws Exception {
      permissionedModel.persist();
      return null;
    }
  }
;
  TransactionCommitCallbackRegistryUtil.registerCallback(callable);
  return resourceBlock;
}
