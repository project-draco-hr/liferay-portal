{
  UserTracker userTracker=findByPrimaryKey(userTrackerId);
  int count=countBySessionId(sessionId);
  Session session=null;
  try {
    session=openSession();
    StringBundler query=new StringBundler();
    query.append(_SQL_SELECT_USERTRACKER_WHERE);
    if (sessionId == null) {
      query.append(_FINDER_COLUMN_SESSIONID_SESSIONID_1);
    }
 else {
      if (sessionId.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_SESSIONID_SESSIONID_3);
      }
 else {
        query.append(_FINDER_COLUMN_SESSIONID_SESSIONID_2);
      }
    }
    if (obc != null) {
      query.append(" ORDER BY ");
      String[] orderByFields=obc.getOrderByFields();
      for (int i=0; i < orderByFields.length; i++) {
        query.append("userTracker.");
        query.append(orderByFields[i]);
        if (obc.isAscending()) {
          query.append(" ASC");
        }
 else {
          query.append(" DESC");
        }
        if ((i + 1) < orderByFields.length) {
          query.append(", ");
        }
      }
    }
    Query q=session.createQuery(query.toString());
    QueryPos qPos=QueryPos.getInstance(q);
    if (sessionId != null) {
      qPos.add(sessionId);
    }
    Object[] objArray=QueryUtil.getPrevAndNext(q,count,obc,userTracker);
    UserTracker[] array=new UserTrackerImpl[3];
    array[0]=(UserTracker)objArray[0];
    array[1]=(UserTracker)objArray[1];
    array[2]=(UserTracker)objArray[2];
    return array;
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
