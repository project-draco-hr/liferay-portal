{
  Mockito.when(_dlAppLocalService.getFileEntry(SearchTestUtil.ENTRY_CLASS_PK)).thenReturn(_fileEntry);
  Mockito.doThrow(new IllegalArgumentException()).when(_indexer).getSummary((Document)Matchers.any(),Matchers.anyString(),(PortletRequest)Matchers.any(),(PortletResponse)Matchers.any());
  Mockito.when(_indexerRegistry.getIndexer(Mockito.anyString())).thenReturn(_indexer);
  Document document=SearchTestUtil.createAttachmentDocument(_DL_FILE_ENTRY_CLASS_NAME);
  String snippet=RandomTestUtil.randomString();
  document.add(new Field(Field.SNIPPET,snippet));
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(SearchResultTranslatorImpl.class.getName(),Level.WARNING)){
    SearchResult searchResult=assertOneSearchResult(document);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    long entryClassPK=GetterUtil.getLong(document.get(Field.ENTRY_CLASS_PK));
    Assert.assertEquals("Search index is stale and contains entry {" + entryClassPK + "}",logRecord.getMessage());
    Assert.assertEquals(SearchTestUtil.ATTACHMENT_OWNER_CLASS_NAME,searchResult.getClassName());
    Assert.assertEquals(SearchTestUtil.ATTACHMENT_OWNER_CLASS_PK,searchResult.getClassPK());
    Assert.assertNull(searchResult.getSummary());
    Mockito.verify(_indexerRegistry).getIndexer(_DL_FILE_ENTRY_CLASS_NAME);
    Mockito.verify(_indexer).getSummary(document,snippet,null,null);
    assertEmptyFileEntryRelatedSearchResults(searchResult);
    Mockito.verify(_dlAppLocalService).getFileEntry(SearchTestUtil.ENTRY_CLASS_PK);
    assertEmptyCommentRelatedSearchResults(searchResult);
    assertEmptyVersions(searchResult);
  }
 }
