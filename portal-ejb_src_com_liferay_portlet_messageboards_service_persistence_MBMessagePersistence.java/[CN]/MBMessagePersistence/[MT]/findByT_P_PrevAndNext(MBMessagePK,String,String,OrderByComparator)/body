{
  com.liferay.portlet.messageboards.model.MBMessage mbMessage=findByPrimaryKey(mbMessagePK);
  int count=countByT_P(threadId,parentMessageId);
  Session session=null;
  try {
    session=openSession();
    StringBuffer query=new StringBuffer();
    query.append("FROM MBMessage IN CLASS com.liferay.portlet.messageboards.service.persistence.MBMessageHBM WHERE ");
    query.append("threadId = ?");
    query.append(" AND ");
    query.append("parentMessageId = ?");
    query.append(" ");
    if (obc != null) {
      query.append("ORDER BY " + obc.getOrderBy());
    }
 else {
      query.append("ORDER BY ");
      query.append("createDate ASC").append(", ");
      query.append("messageId ASC");
    }
    Query q=session.createQuery(query.toString());
    int queryPos=0;
    q.setString(queryPos++,threadId);
    q.setString(queryPos++,parentMessageId);
    Object[] objArray=QueryUtil.getPrevAndNext(q,count,obc,mbMessage,MBMessageHBMUtil.getInstance());
    com.liferay.portlet.messageboards.model.MBMessage[] array=new com.liferay.portlet.messageboards.model.MBMessage[3];
    array[0]=(com.liferay.portlet.messageboards.model.MBMessage)objArray[0];
    array[1]=(com.liferay.portlet.messageboards.model.MBMessage)objArray[1];
    array[2]=(com.liferay.portlet.messageboards.model.MBMessage)objArray[2];
    return array;
  }
 catch (  HibernateException he) {
    throw new SystemException(he);
  }
 finally {
    closeSession(session);
  }
}
