{
  DDMExpressionImpl<Boolean> expression=new DDMExpressionImpl<>("((1 + 4) / (5 - 2)) <= sum(Var1,Var2)",Boolean.class);
  Expression expressionModel=expression.getModel();
  Assert.assertEquals(ComparisonExpression.class,expressionModel.getClass());
  ComparisonExpression comparisonExpression=(ComparisonExpression)expressionModel;
  Expression comparisonLeftOperandExpression=comparisonExpression.getLeftOperandExpression();
  Expression comparisonRightOperandExpression=comparisonExpression.getRightOperandExpression();
  Assert.assertEquals("<=",comparisonExpression.getOperator());
  Assert.assertEquals(ArithmeticExpression.class,comparisonLeftOperandExpression.getClass());
  Assert.assertEquals(FunctionCallExpression.class,comparisonRightOperandExpression.getClass());
  ArithmeticExpression arithmeticExpression=(ArithmeticExpression)comparisonLeftOperandExpression;
  Expression arithmeticLeftOperandExpression=arithmeticExpression.getLeftOperandExpression();
  Expression arithmeticRightOperandExpression=arithmeticExpression.getRightOperandExpression();
  Assert.assertEquals("/",arithmeticExpression.getOperator());
  Assert.assertEquals(ArithmeticExpression.class,arithmeticLeftOperandExpression.getClass());
  Assert.assertEquals(ArithmeticExpression.class,arithmeticRightOperandExpression.getClass());
  ArithmeticExpression arithmeticExpression2=(ArithmeticExpression)arithmeticLeftOperandExpression;
  Expression arithmeticLeftOperandExpression2=arithmeticExpression2.getLeftOperandExpression();
  Expression arithmeticRightOperandExpression2=arithmeticExpression2.getRightOperandExpression();
  Assert.assertEquals("+",arithmeticExpression2.getOperator());
  Assert.assertEquals(Term.class,arithmeticLeftOperandExpression2.getClass());
  Assert.assertEquals(Term.class,arithmeticRightOperandExpression2.getClass());
  Term term=(Term)arithmeticLeftOperandExpression2;
  Assert.assertEquals("1",term.getValue());
  term=(Term)arithmeticRightOperandExpression2;
  Assert.assertEquals("4",term.getValue());
  ArithmeticExpression arithmeticExpression3=(ArithmeticExpression)arithmeticRightOperandExpression;
  Expression arithmeticLeftOperandExpression3=arithmeticExpression3.getLeftOperandExpression();
  Expression arithmeticRightOperandExpression3=arithmeticExpression3.getRightOperandExpression();
  Assert.assertEquals("-",arithmeticExpression3.getOperator());
  Assert.assertEquals(Term.class,arithmeticLeftOperandExpression3.getClass());
  Assert.assertEquals(Term.class,arithmeticRightOperandExpression3.getClass());
  term=(Term)arithmeticLeftOperandExpression3;
  Assert.assertEquals("5",term.getValue());
  term=(Term)arithmeticRightOperandExpression3;
  Assert.assertEquals("2",term.getValue());
  FunctionCallExpression functionCallExpression=(FunctionCallExpression)comparisonRightOperandExpression;
  Assert.assertEquals("sum",functionCallExpression.getFunctionName());
  Assert.assertEquals(2,functionCallExpression.getArity());
  List<Expression> parameterExpressions=functionCallExpression.getParameterExpressions();
  Assert.assertNotNull(parameterExpressions);
  Assert.assertEquals(2,parameterExpressions.size());
  Expression parameterExpression=parameterExpressions.get(0);
  Assert.assertEquals(Term.class,parameterExpression.getClass());
  term=(Term)parameterExpression;
  Assert.assertEquals("Var1",term.getValue());
  parameterExpression=parameterExpressions.get(1);
  Assert.assertEquals(Term.class,parameterExpression.getClass());
  term=(Term)parameterExpression;
  Assert.assertEquals("Var2",term.getValue());
}
