{
  DDMExpressionImpl<Boolean> expression=new DDMExpressionImpl<>("((1 + 4) / (5 - 2)) <= sum(Var1,Var2)",Boolean.class);
  Expression expressionModel=expression.getModel();
  Assert.assertEquals(ComparisonExpression.class,expressionModel.getClass());
  ComparisonExpression comparisonExpression=(ComparisonExpression)expressionModel;
  Expression comparisonLeftOperand=comparisonExpression.getLeftOperand();
  Expression comparisonRightOperand=comparisonExpression.getRightOperand();
  Assert.assertEquals("<=",comparisonExpression.getOperator());
  Assert.assertEquals(ArithmeticExpression.class,comparisonLeftOperand.getClass());
  Assert.assertEquals(FunctionCallExpression.class,comparisonRightOperand.getClass());
  ArithmeticExpression arithmeticExpression=(ArithmeticExpression)comparisonLeftOperand;
  Expression arithmeticLeftOperand=arithmeticExpression.getLeftOperand();
  Expression arithmeticRightOperand=arithmeticExpression.getRightOperand();
  Assert.assertEquals("/",arithmeticExpression.getOperator());
  Assert.assertEquals(ArithmeticExpression.class,arithmeticLeftOperand.getClass());
  Assert.assertEquals(ArithmeticExpression.class,arithmeticRightOperand.getClass());
  ArithmeticExpression arithmeticExpression2=(ArithmeticExpression)arithmeticLeftOperand;
  Expression arithmeticLeftOperand2=arithmeticExpression2.getLeftOperand();
  Expression arithmeticRightOperand2=arithmeticExpression2.getRightOperand();
  Assert.assertEquals("+",arithmeticExpression2.getOperator());
  Assert.assertEquals(Term.class,arithmeticLeftOperand2.getClass());
  Assert.assertEquals(Term.class,arithmeticRightOperand2.getClass());
  Term term=(Term)arithmeticLeftOperand2;
  Assert.assertEquals("1",term.getValue());
  term=(Term)arithmeticRightOperand2;
  Assert.assertEquals("4",term.getValue());
  ArithmeticExpression arithmeticExpression3=(ArithmeticExpression)arithmeticRightOperand;
  Expression arithmeticLeftOperand3=arithmeticExpression3.getLeftOperand();
  Expression arithmeticRightOperand3=arithmeticExpression3.getRightOperand();
  Assert.assertEquals("-",arithmeticExpression3.getOperator());
  Assert.assertEquals(Term.class,arithmeticLeftOperand3.getClass());
  Assert.assertEquals(Term.class,arithmeticRightOperand3.getClass());
  term=(Term)arithmeticLeftOperand3;
  Assert.assertEquals("5",term.getValue());
  term=(Term)arithmeticRightOperand3;
  Assert.assertEquals("2",term.getValue());
  FunctionCallExpression functionCallExpression=(FunctionCallExpression)comparisonRightOperand;
  Assert.assertEquals("sum",functionCallExpression.getFunctionName());
  Assert.assertEquals(2,functionCallExpression.getArity());
  List<Expression> parameters=functionCallExpression.getParameters();
  Assert.assertNotNull(parameters);
  Assert.assertEquals(2,parameters.size());
  Expression parameter=parameters.get(0);
  Assert.assertEquals(Term.class,parameter.getClass());
  term=(Term)parameter;
  Assert.assertEquals("Var1",term.getValue());
  parameter=parameters.get(1);
  Assert.assertEquals(Term.class,parameter.getClass());
  term=(Term)parameter;
  Assert.assertEquals("Var2",term.getValue());
}
