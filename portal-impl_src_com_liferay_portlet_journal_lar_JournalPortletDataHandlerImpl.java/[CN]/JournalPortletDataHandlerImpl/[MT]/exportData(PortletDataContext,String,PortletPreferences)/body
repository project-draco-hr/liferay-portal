{
  Map parameterMap=context.getParameterMap();
  boolean exportData=MapUtil.getBoolean(parameterMap,_EXPORT_JOURNAL_DATA,_enableExport.getDefaultState());
  if (_log.isDebugEnabled()) {
    if (exportData) {
      _log.debug("Exporting data is enabled");
    }
 else {
      _log.debug("Exporting data is disabled");
    }
  }
  if (!exportData) {
    return null;
  }
  try {
    XStream xStream=new XStream();
    Document doc=DocumentHelper.createDocument();
    Element root=doc.addElement("journal-data");
    root.addAttribute("group-id",String.valueOf(context.getGroupId()));
    List obj=JournalArticleUtil.findByGroupId(context.getGroupId());
    Iterator itr=obj.iterator();
    while (itr.hasNext()) {
      JournalArticle article=(JournalArticle)itr.next();
      String articlePrimaryKey=getPrimaryKey(article.getGroupId(),article.getArticleId());
      if (context.addPrimaryKey(JournalArticle.class,articlePrimaryKey)) {
        itr.remove();
      }
    }
    String xml=xStream.toXML(obj);
    Element el=root.addElement("articles");
    Document tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    obj=JournalStructureUtil.findByGroupId(context.getGroupId());
    itr=obj.iterator();
    while (itr.hasNext()) {
      JournalStructure structure=(JournalStructure)itr.next();
      String structurePrimaryKey=getPrimaryKey(structure.getGroupId(),structure.getStructureId());
      if (context.addPrimaryKey(JournalStructure.class,structurePrimaryKey)) {
        itr.remove();
      }
    }
    xml=xStream.toXML(obj);
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el=root.addElement("structures");
    el.content().add(tempDoc.getRootElement().createCopy());
    obj=JournalTemplateUtil.findByGroupId(context.getGroupId());
    itr=obj.iterator();
    while (itr.hasNext()) {
      JournalTemplate template=(JournalTemplate)itr.next();
      String templatePrimaryKey=getPrimaryKey(template.getGroupId(),template.getTemplateId());
      if (context.addPrimaryKey(JournalTemplate.class,templatePrimaryKey)) {
        itr.remove();
      }
    }
    xml=xStream.toXML(obj);
    el=root.addElement("templates");
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    return doc.asXML();
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
