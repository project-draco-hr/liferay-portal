{
  try {
    Document doc=SAXReaderUtil.read(data);
    Element root=doc.getRootElement();
    List<Element> structureEls=root.element("structures").elements("structure");
    Map<String,String> structureIds=context.getNewPrimaryKeysMap(JournalStructure.class);
    for (    Element structureEl : structureEls) {
      importStructure(context,structureIds,structureEl);
    }
    List<Element> templateEls=root.element("templates").elements("template");
    Map<String,String> templateIds=context.getNewPrimaryKeysMap(JournalTemplate.class);
    for (    Element templateEl : templateEls) {
      importTemplate(context,structureIds,templateIds,templateEl);
    }
    List<Element> feedEls=root.element("feeds").elements("feed");
    Map<String,String> feedIds=context.getNewPrimaryKeysMap(JournalFeed.class);
    for (    Element feedEl : feedEls) {
      importFeed(context,structureIds,templateIds,feedIds,feedEl);
    }
    if (context.getBooleanParameter(_NAMESPACE,"articles")) {
      List<Element> articleEls=root.element("articles").elements("article");
      Map<String,String> articleIds=context.getNewPrimaryKeysMap(JournalArticle.class);
      for (      Element articleEl : articleEls) {
        importArticle(context,structureIds,templateIds,articleIds,articleEl);
      }
    }
    List<Element> dlFolderEls=root.element("dl-folders").elements("folder");
    Map<Long,Long> dlFolderPKs=context.getNewPrimaryKeysMap(DLFolder.class);
    for (    Element folderEl : dlFolderEls) {
      String path=folderEl.attributeValue("path");
      if (context.isPathNotProcessed(path)) {
        DLFolder folder=(DLFolder)context.getZipEntryAsObject(path);
        DLPortletDataHandlerImpl.importFolder(context,dlFolderPKs,folder);
      }
    }
    List<Element> fileEntryEls=root.element("dl-file-entries").elements("file-entry");
    Map<String,String> fileEntryNames=context.getNewPrimaryKeysMap(DLFileEntry.class);
    for (    Element fileEntryEl : fileEntryEls) {
      String path=fileEntryEl.attributeValue("path");
      String binPath=fileEntryEl.attributeValue("bin-path");
      if (context.isPathNotProcessed(path)) {
        DLFileEntry fileEntry=(DLFileEntry)context.getZipEntryAsObject(path);
        DLPortletDataHandlerImpl.importFileEntry(context,dlFolderPKs,fileEntryNames,fileEntry,binPath);
      }
    }
    List<Element> fileRankEls=root.element("dl-file-ranks").elements("file-rank");
    for (    Element fileRankEl : fileRankEls) {
      String path=fileRankEl.attributeValue("path");
      if (context.isPathNotProcessed(path)) {
        DLFileRank fileRank=(DLFileRank)context.getZipEntryAsObject(path);
        DLPortletDataHandlerImpl.importFileRank(context,dlFolderPKs,fileEntryNames,fileRank);
      }
    }
    List<Element> igFolderEls=root.element("ig-folders").elements("folder");
    Map<Long,Long> igFolderPKs=context.getNewPrimaryKeysMap(IGFolder.class);
    for (    Element folderEl : igFolderEls) {
      String path=folderEl.attributeValue("path");
      if (context.isPathNotProcessed(path)) {
        IGFolder folder=(IGFolder)context.getZipEntryAsObject(path);
        IGPortletDataHandlerImpl.importFolder(context,igFolderPKs,folder);
      }
    }
    List<Element> imageEls=root.element("ig-images").elements("image");
    for (    Element imageEl : imageEls) {
      String path=imageEl.attributeValue("path");
      String binPath=imageEl.attributeValue("bin-path");
      if (context.isPathNotProcessed(path)) {
        IGImage image=(IGImage)context.getZipEntryAsObject(path);
        IGPortletDataHandlerImpl.importImage(context,igFolderPKs,image,binPath);
      }
    }
    return prefs;
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
