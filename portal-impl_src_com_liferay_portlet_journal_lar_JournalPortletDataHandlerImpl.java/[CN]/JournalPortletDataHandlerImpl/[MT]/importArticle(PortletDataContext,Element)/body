{
  String path=articleElement.attributeValue("path");
  if (!portletDataContext.isPathNotProcessed(path)) {
    return;
  }
  JournalArticle article=(JournalArticle)portletDataContext.getZipEntryAsObject(path);
  prepareLanguagesForImport(article);
  long userId=portletDataContext.getUserId(article.getUserUuid());
  JournalCreationStrategy creationStrategy=JournalCreationStrategyFactory.getInstance();
  long authorId=creationStrategy.getAuthorUserId(portletDataContext,article);
  if (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {
    userId=authorId;
  }
  User user=UserLocalServiceUtil.getUser(userId);
  Map<Long,Long> folderIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(JournalFolder.class);
  long folderId=MapUtil.getLong(folderIds,article.getFolderId(),article.getFolderId());
  if ((folderId != JournalFolderConstants.DEFAULT_PARENT_FOLDER_ID) && (folderId == article.getFolderId())) {
    String folderPath=getImportFolderPath(portletDataContext,folderId);
    JournalFolder folder=(JournalFolder)portletDataContext.getZipEntryAsObject(folderPath);
    importFolder(portletDataContext,folderPath,folder);
    folderId=MapUtil.getLong(folderIds,article.getFolderId(),article.getFolderId());
  }
  String articleId=article.getArticleId();
  boolean autoArticleId=false;
  if (Validator.isNumber(articleId) || (JournalArticleUtil.fetchByG_A_V(portletDataContext.getScopeGroupId(),articleId,JournalArticleConstants.VERSION_DEFAULT) != null)) {
    autoArticleId=true;
  }
  Map<String,String> articleIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalArticle.class + ".articleId");
  String newArticleId=articleIds.get(articleId);
  if (Validator.isNotNull(newArticleId)) {
    articleId=newArticleId;
    autoArticleId=false;
  }
  String content=article.getContent();
  content=importDLFileEntries(portletDataContext,articleElement,content);
  Group group=GroupLocalServiceUtil.getGroup(portletDataContext.getScopeGroupId());
  content=StringUtil.replace(content,"@data_handler_group_friendly_url@",group.getFriendlyURL());
  content=importLinksToLayout(portletDataContext,content);
  article.setContent(content);
  String newContent=creationStrategy.getTransformedContent(portletDataContext,article);
  if (newContent != JournalCreationStrategy.ARTICLE_CONTENT_UNCHANGED) {
    article.setContent(newContent);
  }
  Map<String,String> structureIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalStructure.class);
  String parentStructureId=MapUtil.getString(structureIds,article.getStructureId(),article.getStructureId());
  Map<String,String> templateIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalTemplate.class);
  String parentTemplateId=MapUtil.getString(templateIds,article.getTemplateId(),article.getTemplateId());
  Date displayDate=article.getDisplayDate();
  int displayDateMonth=0;
  int displayDateDay=0;
  int displayDateYear=0;
  int displayDateHour=0;
  int displayDateMinute=0;
  if (displayDate != null) {
    Calendar displayCal=CalendarFactoryUtil.getCalendar(user.getTimeZone());
    displayCal.setTime(displayDate);
    displayDateMonth=displayCal.get(Calendar.MONTH);
    displayDateDay=displayCal.get(Calendar.DATE);
    displayDateYear=displayCal.get(Calendar.YEAR);
    displayDateHour=displayCal.get(Calendar.HOUR);
    displayDateMinute=displayCal.get(Calendar.MINUTE);
    if (displayCal.get(Calendar.AM_PM) == Calendar.PM) {
      displayDateHour+=12;
    }
  }
  Date expirationDate=article.getExpirationDate();
  int expirationDateMonth=0;
  int expirationDateDay=0;
  int expirationDateYear=0;
  int expirationDateHour=0;
  int expirationDateMinute=0;
  boolean neverExpire=true;
  if (expirationDate != null) {
    Calendar expirationCal=CalendarFactoryUtil.getCalendar(user.getTimeZone());
    expirationCal.setTime(expirationDate);
    expirationDateMonth=expirationCal.get(Calendar.MONTH);
    expirationDateDay=expirationCal.get(Calendar.DATE);
    expirationDateYear=expirationCal.get(Calendar.YEAR);
    expirationDateHour=expirationCal.get(Calendar.HOUR);
    expirationDateMinute=expirationCal.get(Calendar.MINUTE);
    neverExpire=false;
    if (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {
      expirationDateHour+=12;
    }
  }
  Date reviewDate=article.getReviewDate();
  int reviewDateMonth=0;
  int reviewDateDay=0;
  int reviewDateYear=0;
  int reviewDateHour=0;
  int reviewDateMinute=0;
  boolean neverReview=true;
  if (reviewDate != null) {
    Calendar reviewCal=CalendarFactoryUtil.getCalendar(user.getTimeZone());
    reviewCal.setTime(reviewDate);
    reviewDateMonth=reviewCal.get(Calendar.MONTH);
    reviewDateDay=reviewCal.get(Calendar.DATE);
    reviewDateYear=reviewCal.get(Calendar.YEAR);
    reviewDateHour=reviewCal.get(Calendar.HOUR);
    reviewDateMinute=reviewCal.get(Calendar.MINUTE);
    neverReview=false;
    if (reviewCal.get(Calendar.AM_PM) == Calendar.PM) {
      reviewDateHour+=12;
    }
  }
  long structurePrimaryKey=0;
  if (Validator.isNotNull(article.getStructureId())) {
    String structureUuid=articleElement.attributeValue("structure-uuid");
    JournalStructure existingStructure=JournalStructureUtil.fetchByUUID_G(structureUuid,portletDataContext.getScopeGroupId());
    if (existingStructure == null) {
      Group companyGroup=GroupLocalServiceUtil.getCompanyGroup(portletDataContext.getCompanyId());
      long companyGroupId=companyGroup.getGroupId();
      existingStructure=JournalStructureUtil.fetchByUUID_G(structureUuid,companyGroupId);
    }
    if (existingStructure == null) {
      String newStructureId=structureIds.get(article.getStructureId());
      if (Validator.isNotNull(newStructureId)) {
        existingStructure=JournalStructureUtil.fetchByG_S(portletDataContext.getScopeGroupId(),String.valueOf(newStructureId));
      }
      if (existingStructure == null) {
        if (_log.isWarnEnabled()) {
          StringBundler sb=new StringBundler();
          sb.append("Structure ");
          sb.append(article.getStructureId());
          sb.append(" is missing for article ");
          sb.append(article.getArticleId());
          sb.append(", skipping this article.");
          _log.warn(sb.toString());
        }
        return;
      }
    }
    structurePrimaryKey=existingStructure.getPrimaryKey();
    parentStructureId=existingStructure.getStructureId();
  }
  if (Validator.isNotNull(article.getTemplateId())) {
    String templateUuid=articleElement.attributeValue("template-uuid");
    JournalTemplate existingTemplate=JournalTemplateUtil.fetchByUUID_G(templateUuid,portletDataContext.getScopeGroupId());
    if (existingTemplate == null) {
      Group companyGroup=GroupLocalServiceUtil.getCompanyGroup(portletDataContext.getCompanyId());
      long companyGroupId=companyGroup.getGroupId();
      existingTemplate=JournalTemplateUtil.fetchByUUID_G(templateUuid,companyGroupId);
    }
    if (existingTemplate == null) {
      String newTemplateId=templateIds.get(article.getTemplateId());
      if (Validator.isNotNull(newTemplateId)) {
        existingTemplate=JournalTemplateUtil.fetchByG_T(portletDataContext.getScopeGroupId(),newTemplateId);
      }
      if (existingTemplate == null) {
        if (_log.isWarnEnabled()) {
          StringBundler sb=new StringBundler();
          sb.append("Template ");
          sb.append(article.getTemplateId());
          sb.append(" is missing for article ");
          sb.append(article.getArticleId());
          sb.append(", skipping this article.");
          _log.warn(sb.toString());
        }
        return;
      }
    }
    parentTemplateId=existingTemplate.getTemplateId();
  }
  File smallFile=null;
  String smallImagePath=articleElement.attributeValue("small-image-path");
  if (article.isSmallImage() && Validator.isNotNull(smallImagePath)) {
    byte[] bytes=portletDataContext.getZipEntryAsByteArray(smallImagePath);
    smallFile=FileUtil.createTempFile(article.getSmallImageType());
    FileUtil.write(smallFile,bytes);
  }
  Map<String,byte[]> images=new HashMap<String,byte[]>();
  String imagePath=articleElement.attributeValue("image-path");
  if (portletDataContext.getBooleanParameter(_NAMESPACE,"images") && Validator.isNotNull(imagePath)) {
    List<String> imageFiles=portletDataContext.getZipFolderEntries(imagePath);
    for (    String imageFile : imageFiles) {
      String fileName=imageFile;
      if (fileName.contains(StringPool.SLASH)) {
        fileName=fileName.substring(fileName.lastIndexOf(CharPool.SLASH) + 1);
      }
      if (fileName.endsWith(".xml")) {
        continue;
      }
      int pos=fileName.lastIndexOf(CharPool.PERIOD);
      if (pos != -1) {
        fileName=fileName.substring(0,pos);
      }
      images.put(fileName,portletDataContext.getZipEntryAsByteArray(imageFile));
    }
  }
  String articleURL=null;
  boolean addGroupPermissions=creationStrategy.addGroupPermissions(portletDataContext,article);
  boolean addGuestPermissions=creationStrategy.addGuestPermissions(portletDataContext,article);
  ServiceContext serviceContext=portletDataContext.createServiceContext(articleElement,article,_NAMESPACE);
  serviceContext.setAddGroupPermissions(addGroupPermissions);
  serviceContext.setAddGuestPermissions(addGuestPermissions);
  serviceContext.setAttribute("imported",Boolean.TRUE.toString());
  if (article.getStatus() != WorkflowConstants.STATUS_APPROVED) {
    serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
  }
  JournalArticle importedArticle=null;
  String articleResourceUuid=articleElement.attributeValue("article-resource-uuid");
  if (portletDataContext.isDataStrategyMirror()) {
    JournalArticleResource articleResource=JournalArticleResourceUtil.fetchByUUID_G(articleResourceUuid,portletDataContext.getScopeGroupId());
    if (articleResource == null) {
      Group companyGroup=GroupLocalServiceUtil.getCompanyGroup(portletDataContext.getCompanyId());
      long companyGroupId=companyGroup.getGroupId();
      articleResource=JournalArticleResourceUtil.fetchByUUID_G(articleResourceUuid,companyGroupId);
    }
    serviceContext.setUuid(articleResourceUuid);
    serviceContext.setAttribute("urlTitle",article.getUrlTitle());
    JournalArticle existingArticle=null;
    if (articleResource != null) {
      try {
        existingArticle=JournalArticleLocalServiceUtil.getLatestArticle(articleResource.getResourcePrimKey(),WorkflowConstants.STATUS_ANY,false);
      }
 catch (      NoSuchArticleException nsae) {
      }
    }
    if (existingArticle == null) {
      existingArticle=JournalArticleUtil.fetchByG_A_V(portletDataContext.getScopeGroupId(),newArticleId,article.getVersion());
    }
    if (existingArticle == null) {
      importedArticle=JournalArticleLocalServiceUtil.addArticle(userId,portletDataContext.getScopeGroupId(),folderId,article.getClassNameId(),structurePrimaryKey,articleId,autoArticleId,article.getVersion(),article.getTitleMap(),article.getDescriptionMap(),article.getContent(),article.getType(),parentStructureId,parentTemplateId,article.getLayoutUuid(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,article.isIndexable(),article.isSmallImage(),article.getSmallImageURL(),smallFile,images,articleURL,serviceContext);
    }
 else {
      importedArticle=JournalArticleLocalServiceUtil.updateArticle(userId,existingArticle.getGroupId(),folderId,existingArticle.getArticleId(),existingArticle.getVersion(),article.getTitleMap(),article.getDescriptionMap(),article.getContent(),article.getType(),parentStructureId,parentTemplateId,article.getLayoutUuid(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,article.isIndexable(),article.isSmallImage(),article.getSmallImageURL(),smallFile,images,articleURL,serviceContext);
    }
  }
 else {
    importedArticle=JournalArticleLocalServiceUtil.addArticle(userId,portletDataContext.getScopeGroupId(),folderId,article.getClassNameId(),structurePrimaryKey,articleId,autoArticleId,article.getVersion(),article.getTitleMap(),article.getDescriptionMap(),article.getContent(),article.getType(),parentStructureId,parentTemplateId,article.getLayoutUuid(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,article.isIndexable(),article.isSmallImage(),article.getSmallImageURL(),smallFile,images,articleURL,serviceContext);
  }
  if (smallFile != null) {
    smallFile.delete();
  }
  portletDataContext.importClassedModel(article,importedArticle,_NAMESPACE);
  if (Validator.isNull(newArticleId)) {
    articleIds.put(article.getArticleId(),importedArticle.getArticleId());
  }
  Group companyGroup=GroupLocalServiceUtil.getCompanyGroup(portletDataContext.getCompanyId());
  if (importedArticle.getGroupId() == companyGroup.getGroupId()) {
    portletDataContext.addCompanyReference(JournalArticle.class,articleId);
  }
  if (!articleId.equals(importedArticle.getArticleId())) {
    if (_log.isWarnEnabled()) {
      _log.warn("An article with the ID " + articleId + " already "+ "exists. The new generated ID is "+ importedArticle.getArticleId());
    }
  }
}
