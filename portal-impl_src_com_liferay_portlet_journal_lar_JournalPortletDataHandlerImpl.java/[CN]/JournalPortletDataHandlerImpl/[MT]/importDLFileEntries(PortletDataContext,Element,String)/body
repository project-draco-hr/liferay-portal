{
  List<Element> dlReferenceElements=parentElement.elements("dl-reference");
  for (  Element dlReferenceElement : dlReferenceElements) {
    String dlReferencePath=dlReferenceElement.attributeValue("path");
    String fileEntryUUID=null;
    try {
      Object zipEntryObject=portletDataContext.getZipEntryAsObject(dlReferencePath);
      if (zipEntryObject == null) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to reference " + dlReferencePath);
        }
        continue;
      }
      boolean defaultRepository=GetterUtil.getBoolean(dlReferenceElement.attributeValue("default-repository"));
      if (defaultRepository) {
        FileEntry fileEntry=(FileEntry)zipEntryObject;
        fileEntryUUID=fileEntry.getUuid();
      }
 else {
        RepositoryEntry repositoryEntry=(RepositoryEntry)zipEntryObject;
        fileEntryUUID=repositoryEntry.getUuid();
      }
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn(e);
      }
    }
    if (fileEntryUUID == null) {
      continue;
    }
    FileEntry fileEntry=DLAppLocalServiceUtil.getFileEntryByUuidAndGroupId(fileEntryUUID,portletDataContext.getGroupId());
    if (fileEntry == null) {
      continue;
    }
    String dlReference="[$dl-reference=" + dlReferencePath + "$]";
    String url=DLUtil.getPreviewURL(fileEntry,fileEntry.getFileVersion(),null,StringPool.BLANK,false,false);
    content=StringUtil.replace(content,dlReference,url);
  }
  return content;
}
