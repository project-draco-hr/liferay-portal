{
  String path=templateEl.attributeValue("path");
  if (!context.isPathNotProcessed(path)) {
    return;
  }
  JournalTemplate template=(JournalTemplate)context.getZipEntryAsObject(path);
  long userId=context.getUserId(template.getUserUuid());
  long groupId=context.getScopeGroupId();
  String templateId=template.getTemplateId();
  boolean autoTemplateId=false;
  if ((Validator.isNumber(templateId)) || (JournalTemplateUtil.fetchByG_T(groupId,templateId) != null)) {
    autoTemplateId=true;
  }
  Map<String,String> structureIds=(Map<String,String>)context.getNewPrimaryKeysMap(JournalStructure.class);
  String parentStructureId=MapUtil.getString(structureIds,template.getStructureId(),template.getStructureId());
  String xsl=template.getXsl();
  xsl=importDLFileEntries(context,templateEl,xsl);
  xsl=importIGImages(context,templateEl,xsl);
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  xsl=StringUtil.replace(xsl,"@data_handler_group_friendly_url@",group.getFriendlyURL());
  template.setXsl(xsl);
  boolean formatXsl=false;
  JournalCreationStrategy creationStrategy=JournalCreationStrategyFactory.getInstance();
  long authorId=creationStrategy.getAuthorUserId(context,template);
  if (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {
    userId=authorId;
  }
  boolean addCommunityPermissions=creationStrategy.addCommunityPermissions(context,template);
  boolean addGuestPermissions=creationStrategy.addGuestPermissions(context,template);
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(addCommunityPermissions);
  serviceContext.setAddGuestPermissions(addGuestPermissions);
  serviceContext.setCreateDate(template.getCreateDate());
  serviceContext.setModifiedDate(template.getModifiedDate());
  File smallFile=null;
  String smallImagePath=templateEl.attributeValue("small-image-path");
  if (template.isSmallImage() && Validator.isNotNull(smallImagePath)) {
    if (smallImagePath.endsWith(StringPool.PERIOD)) {
      smallImagePath+=template.getSmallImageType();
    }
    byte[] bytes=context.getZipEntryAsByteArray(smallImagePath);
    if (bytes != null) {
      smallFile=File.createTempFile(String.valueOf(template.getSmallImageId()),StringPool.PERIOD + template.getSmallImageType());
      FileUtil.write(smallFile,bytes);
    }
  }
  JournalTemplate existingTemplate=null;
  if (context.isDataStrategyMirror()) {
    existingTemplate=JournalTemplateUtil.fetchByUUID_G(template.getUuid(),groupId);
    if (existingTemplate == null) {
      existingTemplate=JournalTemplateLocalServiceUtil.addTemplate(template.getUuid(),userId,groupId,templateId,autoTemplateId,parentStructureId,template.getName(),template.getDescription(),template.getXsl(),formatXsl,template.getLangType(),template.getCacheable(),template.isSmallImage(),template.getSmallImageURL(),smallFile,serviceContext);
    }
 else {
      existingTemplate=JournalTemplateLocalServiceUtil.updateTemplate(existingTemplate.getGroupId(),existingTemplate.getTemplateId(),existingTemplate.getStructureId(),template.getName(),template.getDescription(),template.getXsl(),formatXsl,template.getLangType(),template.getCacheable(),template.isSmallImage(),template.getSmallImageURL(),smallFile,serviceContext);
    }
  }
 else {
    existingTemplate=JournalTemplateLocalServiceUtil.addTemplate(userId,groupId,templateId,autoTemplateId,parentStructureId,template.getName(),template.getDescription(),template.getXsl(),formatXsl,template.getLangType(),template.getCacheable(),template.isSmallImage(),template.getSmallImageURL(),smallFile,serviceContext);
  }
  Map<String,String> templateIds=(Map<String,String>)context.getNewPrimaryKeysMap(JournalTemplate.class);
  templateIds.put(templateId,existingTemplate.getTemplateId());
  context.importPermissions(JournalTemplate.class,template.getId(),existingTemplate.getId());
  if (!templateId.equals(existingTemplate.getTemplateId())) {
    if (_log.isWarnEnabled()) {
      _log.warn("A template with the ID " + templateId + " already "+ "exists. The new generated ID is "+ existingTemplate.getTemplateId());
    }
  }
}
