{
  String path=feedElement.attributeValue("path");
  if (!portletDataContext.isPathNotProcessed(path)) {
    return;
  }
  JournalFeed feed=(JournalFeed)portletDataContext.getZipEntryAsObject(path);
  long userId=portletDataContext.getUserId(feed.getUserUuid());
  JournalCreationStrategy creationStrategy=JournalCreationStrategyFactory.getInstance();
  long authorId=creationStrategy.getAuthorUserId(portletDataContext,feed);
  if (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {
    userId=authorId;
  }
  long groupId=portletDataContext.getScopeGroupId();
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  String newGroupFriendlyURL=group.getFriendlyURL().substring(1);
  String[] friendlyUrlParts=StringUtil.split(feed.getTargetLayoutFriendlyUrl(),"/");
  String oldGroupFriendlyURL=friendlyUrlParts[2];
  if (oldGroupFriendlyURL.equals("@data_handler_group_friendly_url@")) {
    feed.setTargetLayoutFriendlyUrl(StringUtil.replace(feed.getTargetLayoutFriendlyUrl(),"@data_handler_group_friendly_url@",newGroupFriendlyURL));
  }
  String feedId=feed.getFeedId();
  boolean autoFeedId=false;
  if ((Validator.isNumber(feedId)) || (JournalFeedUtil.fetchByG_F(portletDataContext.getScopeGroupId(),feedId) != null)) {
    autoFeedId=true;
  }
  Map<String,String> structureIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalStructure.class);
  String parentStructureId=MapUtil.getString(structureIds,feed.getStructureId(),feed.getStructureId());
  Map<String,String> templateIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalTemplate.class);
  String parentTemplateId=MapUtil.getString(templateIds,feed.getTemplateId(),feed.getTemplateId());
  String parentRenderTemplateId=MapUtil.getString(templateIds,feed.getRendererTemplateId(),feed.getRendererTemplateId());
  boolean addCommunityPermissions=creationStrategy.addCommunityPermissions(portletDataContext,feed);
  boolean addGuestPermissions=creationStrategy.addGuestPermissions(portletDataContext,feed);
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(addCommunityPermissions);
  serviceContext.setAddGuestPermissions(addGuestPermissions);
  serviceContext.setCreateDate(feed.getCreateDate());
  serviceContext.setModifiedDate(feed.getModifiedDate());
  JournalFeed existingFeed=null;
  if (portletDataContext.isDataStrategyMirror()) {
    existingFeed=JournalFeedUtil.fetchByUUID_G(feed.getUuid(),portletDataContext.getScopeGroupId());
    if (existingFeed == null) {
      serviceContext.setUuid(feed.getUuid());
      existingFeed=JournalFeedLocalServiceUtil.addFeed(userId,portletDataContext.getScopeGroupId(),feedId,autoFeedId,feed.getName(),feed.getDescription(),feed.getType(),parentStructureId,parentTemplateId,parentRenderTemplateId,feed.getDelta(),feed.getOrderByCol(),feed.getOrderByType(),feed.getTargetLayoutFriendlyUrl(),feed.getTargetPortletId(),feed.getContentField(),feed.getFeedType(),feed.getFeedVersion(),serviceContext);
    }
 else {
      existingFeed=JournalFeedLocalServiceUtil.updateFeed(existingFeed.getGroupId(),existingFeed.getFeedId(),feed.getName(),feed.getDescription(),feed.getType(),parentStructureId,parentTemplateId,parentRenderTemplateId,feed.getDelta(),feed.getOrderByCol(),feed.getOrderByType(),feed.getTargetLayoutFriendlyUrl(),feed.getTargetPortletId(),feed.getContentField(),feed.getFeedType(),feed.getFeedVersion(),serviceContext);
    }
  }
 else {
    existingFeed=JournalFeedLocalServiceUtil.addFeed(userId,portletDataContext.getScopeGroupId(),feedId,autoFeedId,feed.getName(),feed.getDescription(),feed.getType(),parentStructureId,parentTemplateId,parentRenderTemplateId,feed.getDelta(),feed.getOrderByCol(),feed.getOrderByType(),feed.getTargetLayoutFriendlyUrl(),feed.getTargetPortletId(),feed.getContentField(),feed.getFeedType(),feed.getFeedVersion(),serviceContext);
  }
  Map<String,String> feedIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalFeed.class);
  feedIds.put(feedId,existingFeed.getFeedId());
  portletDataContext.importPermissions(JournalFeed.class,feed.getId(),existingFeed.getId());
  if (!feedId.equals(existingFeed.getFeedId())) {
    if (_log.isWarnEnabled()) {
      _log.warn("A feed with the ID " + feedId + " already "+ "exists. The new generated ID is "+ existingFeed.getFeedId());
    }
  }
}
