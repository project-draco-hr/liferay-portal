{
  List<String> oldLinksToLayout=new ArrayList<String>();
  List<String> newLinksToLayout=new ArrayList<String>();
  Matcher matcher=_importLinksToLayoutPattern.matcher(content);
  while (matcher.find()) {
    String oldLayoutId=matcher.group(1);
    String newLayoutId=oldLayoutId;
    String type=matcher.group(2);
    boolean privateLayout=type.startsWith("private");
    String layoutUuid=matcher.group(3);
    String friendlyURL=matcher.group(4);
    try {
      Layout layout=LayoutUtil.fetchByUUID_G(layoutUuid,portletDataContext.getScopeGroupId());
      if (layout == null) {
        layout=LayoutUtil.fetchByG_P_F(portletDataContext.getScopeGroupId(),privateLayout,friendlyURL);
      }
      if (layout == null) {
        layout=LayoutUtil.fetchByG_P_L(portletDataContext.getScopeGroupId(),privateLayout,Long.valueOf(oldLayoutId));
      }
      if (layout == null) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to get layout with UUID " + layoutUuid + ", friendly URL "+ friendlyURL+ ", or "+ "layoutId "+ oldLayoutId+ " in group "+ portletDataContext.getScopeGroupId());
        }
      }
 else {
        newLayoutId=String.valueOf(layout.getLayoutId());
      }
    }
 catch (    SystemException e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to get layout in group " + portletDataContext.getScopeGroupId(),e);
      }
    }
    String oldLinkToLayout=matcher.group(0);
    StringBundler sb=new StringBundler(4);
    sb.append(StringPool.AT);
    sb.append(layoutUuid);
    sb.append(StringPool.AT);
    sb.append(friendlyURL);
    String newLinkToLayout=StringUtil.replace(oldLinkToLayout,new String[]{sb.toString(),oldLayoutId},new String[]{StringPool.BLANK,newLayoutId});
    oldLinksToLayout.add(oldLinkToLayout);
    newLinksToLayout.add(newLinkToLayout);
  }
  content=StringUtil.replace(content,ArrayUtil.toStringArray(oldLinksToLayout.toArray()),ArrayUtil.toStringArray(newLinksToLayout.toArray()));
  return content;
}
