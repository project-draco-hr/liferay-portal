{
  List<String> oldLinksToLayout=new ArrayList<String>();
  List<String> newLinksToLayout=new ArrayList<String>();
  Matcher matcher=_importLinksToLayoutPattern.matcher(content);
  while (matcher.find()) {
    String oldLayoutId=matcher.group(1);
    String newLayoutId=oldLayoutId;
    String type=matcher.group(2);
    boolean privateLayout=type.startsWith("private");
    String friendlyURL=matcher.group(3);
    try {
      Layout layout=LayoutUtil.fetchByG_P_F(portletDataContext.getScopeGroupId(),privateLayout,friendlyURL);
      newLayoutId=String.valueOf(layout.getLayoutId());
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to get layout with friendly URL " + friendlyURL + " in group "+ portletDataContext.getScopeGroupId(),e);
      }
    }
    String oldLinkToLayout=matcher.group(0);
    String newLinkToLayout=StringUtil.replace(oldLinkToLayout,new String[]{oldLayoutId,StringPool.AT.concat(friendlyURL)},new String[]{newLayoutId,StringPool.BLANK});
    oldLinksToLayout.add(oldLinkToLayout);
    newLinksToLayout.add(newLinkToLayout);
  }
  content=StringUtil.replace(content,ArrayUtil.toStringArray(oldLinksToLayout.toArray()),ArrayUtil.toStringArray(newLinksToLayout.toArray()));
  return content;
}
