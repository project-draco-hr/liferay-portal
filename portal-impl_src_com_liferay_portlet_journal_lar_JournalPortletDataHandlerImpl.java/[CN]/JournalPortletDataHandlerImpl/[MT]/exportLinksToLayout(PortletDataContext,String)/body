{
  List<String> oldLinksToLayout=new ArrayList<String>();
  List<String> newLinksToLayout=new ArrayList<String>();
  Matcher matcher=_exportLinkToLayoutPattern.matcher(content);
  while (matcher.find()) {
    long layoutId=GetterUtil.getLong(matcher.group(1));
    String layoutType=matcher.group(2);
    boolean privateLayout=layoutType.startsWith("private");
    try {
      Layout layout=LayoutLocalServiceUtil.getLayout(portletDataContext.getScopeGroupId(),privateLayout,layoutId);
      String oldLinkToLayout=matcher.group(0);
      String newLinkToLayout=StringUtil.replace(oldLinkToLayout,layoutType,layoutType.concat(StringPool.AT.concat(layout.getFriendlyURL())));
      oldLinksToLayout.add(oldLinkToLayout);
      newLinksToLayout.add(newLinkToLayout);
    }
 catch (    Exception e) {
      if (_log.isInfoEnabled()) {
        _log.info("Error looking for layout with id " + layoutId + " in group "+ portletDataContext.getScopeGroupId(),e);
      }
    }
  }
  content=StringUtil.replace(content,ArrayUtil.toStringArray(oldLinksToLayout.toArray()),ArrayUtil.toStringArray(newLinksToLayout.toArray()));
  return content;
}
