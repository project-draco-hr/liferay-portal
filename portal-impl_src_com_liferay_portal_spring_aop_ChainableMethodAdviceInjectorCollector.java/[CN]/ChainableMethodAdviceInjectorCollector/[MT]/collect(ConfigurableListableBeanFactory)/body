{
  ChainableMethodAdviceInjectorCollector chainableMethodAdviceInjectorCollector=new ChainableMethodAdviceInjectorCollector();
  List<String> beanNames=chainableMethodAdviceInjectorCollector._beanNames;
  String[] names=configurableListableBeanFactory.getBeanDefinitionNames();
  for (  String name : names) {
    if (!name.contains(SpringFactoryUtil.class.getName())) {
      continue;
    }
    BeanDefinition beanDefinition=configurableListableBeanFactory.getBeanDefinition(name);
    ConstructorArgumentValues constructorArgumentValues=beanDefinition.getConstructorArgumentValues();
    List<ConstructorArgumentValues.ValueHolder> valueHolders=constructorArgumentValues.getGenericArgumentValues();
    if (!valueHolders.isEmpty()) {
      ConstructorArgumentValues.ValueHolder valueHolder=valueHolders.get(0);
      TypedStringValue typedStringValue=(TypedStringValue)valueHolder.getValue();
      String className=typedStringValue.getValue();
      if (className.contains(ChainableMethodAdviceInjector.class.getSimpleName())) {
        beanNames.add(name);
      }
    }
  }
  if (!beanNames.isEmpty()) {
    configurableListableBeanFactory.registerSingleton(BEAN_NAME,chainableMethodAdviceInjectorCollector);
  }
}
