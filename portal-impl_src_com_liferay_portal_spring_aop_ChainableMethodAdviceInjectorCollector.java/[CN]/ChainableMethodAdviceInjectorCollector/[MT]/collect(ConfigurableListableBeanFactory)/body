{
  ChainableMethodAdviceInjectorCollector chainableMethodAdviceInjectorCollector=new ChainableMethodAdviceInjectorCollector();
  String[] beanNames=configurableListableBeanFactory.getBeanDefinitionNames();
  for (  String beanName : beanNames) {
    if (!beanName.contains(SpringFactoryUtil.class.getName())) {
      continue;
    }
    BeanDefinition beanDefinition=configurableListableBeanFactory.getBeanDefinition(beanName);
    ConstructorArgumentValues constructorArgumentValues=beanDefinition.getConstructorArgumentValues();
    List<ConstructorArgumentValues.ValueHolder> valueHolders=constructorArgumentValues.getGenericArgumentValues();
    if (valueHolders.isEmpty()) {
      continue;
    }
    ConstructorArgumentValues.ValueHolder valueHolder=valueHolders.get(0);
    TypedStringValue typedStringValue=(TypedStringValue)valueHolder.getValue();
    String className=typedStringValue.getValue();
    if (className.contains(ChainableMethodAdviceInjector.class.getSimpleName())) {
      chainableMethodAdviceInjectorCollector.addBeanName(beanName);
    }
  }
  if (!chainableMethodAdviceInjectorCollector.hasBeanNames()) {
    configurableListableBeanFactory.registerSingleton(BEAN_NAME,chainableMethodAdviceInjectorCollector);
  }
}
