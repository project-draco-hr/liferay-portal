{
  articleIds=CustomSQLUtil.keywords(articleIds,false);
  titles=CustomSQLUtil.keywords(titles);
  descriptions=CustomSQLUtil.keywords(descriptions,false);
  contents=CustomSQLUtil.keywords(contents,false);
  structureIds=CustomSQLUtil.keywords(structureIds,false);
  templateIds=CustomSQLUtil.keywords(templateIds,false);
  Timestamp displayDateGT_TS=CalendarUtil.getTimestamp(displayDateGT);
  Timestamp displayDateLT_TS=CalendarUtil.getTimestamp(displayDateLT);
  Timestamp reviewDate_TS=CalendarUtil.getTimestamp(reviewDate);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_G_A_V_T_D_C_T_S_T_D_S_R);
    if (groupId <= 0) {
      sql=StringUtil.replace(sql,"(groupId = ?) AND","");
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"articleId",StringPool.LIKE,false,articleIds);
    String groupBy="articleId";
    if (version == null) {
      StringBundler sb=new StringBundler("id_ AS id");
      for (      String field : orderByComparator.getOrderByFields()) {
        sb.append(", ");
        sb.append(field);
      }
      sql=StringUtil.replace(sql,"id_ AS id",sb.toString());
      sql=StringUtil.replace(sql,"(version = ?) [$AND_OR_CONNECTOR$]","");
    }
 else     if (version <= 0) {
      StringBundler sb=new StringBundler(groupBy);
      for (      String field : orderByComparator.getOrderByFields()) {
        if (field.equals("modifiedDate") || field.equals("articleId") || field.equals("version")) {
          continue;
        }
        sb.append(", ");
        sb.append(field);
      }
      groupBy=sb.toString();
      sb.append(", MAX(modifiedDate) as modifiedDate");
      sb.append(", MAX(version) as version");
      sql=StringUtil.replace(sql,"id_ AS id",sb.toString());
      sql=StringUtil.replace(sql,"(version = ?) [$AND_OR_CONNECTOR$]","");
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(title)",StringPool.LIKE,false,titles);
    sql=CustomSQLUtil.replaceKeywords(sql,"description",StringPool.LIKE,false,descriptions);
    sql=CustomSQLUtil.replaceKeywords(sql,"content",StringPool.LIKE,false,contents);
    sql=CustomSQLUtil.replaceKeywords(sql,"structureId",StringPool.EQUAL,false,structureIds);
    sql=CustomSQLUtil.replaceKeywords(sql,"templateId",StringPool.EQUAL,false,templateIds);
    if (status == WorkflowConstants.STATUS_ANY) {
      sql=StringUtil.replace(sql,"(status = ?) AND","");
    }
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    if ((version != null) && (version <= 0)) {
      sql=StringUtil.replace(sql,"[$GROUP_BY_CLAUSE$]","GROUP BY " + groupBy);
    }
 else {
      sql=StringUtil.replace(sql,"[$GROUP_BY_CLAUSE$]","");
    }
    sql=CustomSQLUtil.replaceOrderBy(sql,orderByComparator);
    SQLQuery q=session.createSQLQuery(sql);
    if ((version != null) && (version <= 0)) {
      q.addScalar("articleId",Type.STRING);
    }
 else {
      q.addScalar("id",Type.LONG);
    }
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    if (groupId > 0) {
      qPos.add(groupId);
    }
    qPos.add(articleIds,2);
    if ((version != null) && (version > 0)) {
      qPos.add(version);
    }
    qPos.add(titles,2);
    qPos.add(descriptions,2);
    qPos.add(contents,2);
    qPos.add(type);
    qPos.add(type);
    qPos.add(structureIds,2);
    qPos.add(templateIds,2);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateLT_TS);
    qPos.add(displayDateLT_TS);
    if (status != WorkflowConstants.STATUS_ANY) {
      qPos.add(status);
    }
    qPos.add(reviewDate_TS);
    qPos.add(reviewDate_TS);
    List<JournalArticle> articles=new ArrayList<JournalArticle>();
    Iterator<Object[]> itr=(Iterator<Object[]>)QueryUtil.iterate(q,getDialect(),start,end);
    while (itr.hasNext()) {
      Object value=itr.next();
      JournalArticle article=null;
      if ((version != null) && (version <= 0)) {
        String articleId=(String)value;
        article=getLatestArticle(groupId,articleId,status);
      }
 else {
        long id=(Long)value;
        article=JournalArticleUtil.findByPrimaryKey(id);
      }
      if (article != null) {
        articles.add(article);
      }
    }
    return articles;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
