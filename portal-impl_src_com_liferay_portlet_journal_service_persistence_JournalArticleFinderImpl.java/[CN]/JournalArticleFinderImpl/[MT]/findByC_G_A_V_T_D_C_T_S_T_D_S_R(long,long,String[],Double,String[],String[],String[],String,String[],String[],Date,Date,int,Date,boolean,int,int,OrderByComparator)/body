{
  articleIds=CustomSQLUtil.keywords(articleIds,false);
  titles=CustomSQLUtil.keywords(titles);
  descriptions=CustomSQLUtil.keywords(descriptions,false);
  contents=CustomSQLUtil.keywords(contents,false);
  structureIds=CustomSQLUtil.keywords(structureIds,false);
  templateIds=CustomSQLUtil.keywords(templateIds,false);
  Timestamp displayDateGT_TS=CalendarUtil.getTimestamp(displayDateGT);
  Timestamp displayDateLT_TS=CalendarUtil.getTimestamp(displayDateLT);
  Timestamp reviewDate_TS=CalendarUtil.getTimestamp(reviewDate);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_G_A_V_T_D_C_T_S_T_D_S_R);
    if (groupId <= 0) {
      sql=StringUtil.replace(sql,"(groupId = ?) AND","");
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"articleId",StringPool.LIKE,false,articleIds);
    if (version == null) {
      sql=StringUtil.replace(sql,"(version = ?) [$AND_OR_CONNECTOR$]","");
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(title)",StringPool.LIKE,false,titles);
    sql=CustomSQLUtil.replaceKeywords(sql,"description",StringPool.LIKE,false,descriptions);
    sql=CustomSQLUtil.replaceKeywords(sql,"content",StringPool.LIKE,false,contents);
    sql=CustomSQLUtil.replaceKeywords(sql,"structureId",StringPool.EQUAL,false,structureIds);
    sql=CustomSQLUtil.replaceKeywords(sql,"templateId",StringPool.EQUAL,false,templateIds);
    if (status == StatusConstants.ANY) {
      sql=StringUtil.replace(sql,"(status = ?) AND","");
    }
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    sql=CustomSQLUtil.replaceOrderBy(sql,obc);
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("JournalArticle",JournalArticleImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    if (groupId > 0) {
      qPos.add(groupId);
    }
    qPos.add(articleIds,2);
    if (version != null) {
      qPos.add(version);
    }
    qPos.add(titles,2);
    qPos.add(descriptions,2);
    qPos.add(contents,2);
    qPos.add(type);
    qPos.add(type);
    qPos.add(structureIds,2);
    qPos.add(templateIds,2);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateLT_TS);
    qPos.add(displayDateLT_TS);
    if (status != StatusConstants.ANY) {
      qPos.add(status);
    }
    qPos.add(reviewDate_TS);
    qPos.add(reviewDate_TS);
    return (List<JournalArticle>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
