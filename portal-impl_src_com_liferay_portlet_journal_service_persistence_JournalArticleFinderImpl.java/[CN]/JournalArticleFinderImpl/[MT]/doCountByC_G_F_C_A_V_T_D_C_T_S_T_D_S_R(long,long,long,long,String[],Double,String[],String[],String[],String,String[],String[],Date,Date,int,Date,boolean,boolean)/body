{
  articleIds=CustomSQLUtil.keywords(articleIds,false);
  titles=CustomSQLUtil.keywords(titles);
  descriptions=CustomSQLUtil.keywords(descriptions,false);
  contents=CustomSQLUtil.keywords(contents,false);
  structureIds=CustomSQLUtil.keywords(structureIds,false);
  templateIds=CustomSQLUtil.keywords(templateIds,false);
  Timestamp displayDateGT_TS=CalendarUtil.getTimestamp(displayDateGT);
  Timestamp displayDateLT_TS=CalendarUtil.getTimestamp(displayDateLT);
  Timestamp reviewDate_TS=CalendarUtil.getTimestamp(reviewDate);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(COUNT_BY_C_G_F_C_A_V_T_D_C_T_S_T_D_S_R);
    if (groupId <= 0) {
      sql=StringUtil.replace(sql,"(groupId = ?) AND",StringPool.BLANK);
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"articleId",StringPool.LIKE,false,articleIds);
    if ((version == null) || (version <= 0)) {
      sql=StringUtil.replace(sql,"(version = ?) [$AND_OR_CONNECTOR$]",StringPool.BLANK);
    }
    if (folderId < 0) {
      sql=StringUtil.replace(sql,"(folderId = ?) AND","");
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(title)",StringPool.LIKE,false,titles);
    sql=CustomSQLUtil.replaceKeywords(sql,"description",StringPool.LIKE,false,descriptions);
    sql=CustomSQLUtil.replaceKeywords(sql,"content",StringPool.LIKE,false,contents);
    if (status == WorkflowConstants.STATUS_ANY) {
      sql=StringUtil.replace(sql,"(status = ?) AND",StringPool.BLANK);
    }
    if (Validator.isNull(type)) {
      sql=StringUtil.replace(sql,_TYPE_SQL,StringPool.BLANK);
    }
    if (isArrayNull(structureIds)) {
      sql=StringUtil.replace(sql,_STRUCTUREID_SQL,StringPool.BLANK);
    }
 else {
      sql=CustomSQLUtil.replaceKeywords(sql,"structureId",StringPool.LIKE,false,structureIds);
    }
    if (isArrayNull(templateIds)) {
      sql=StringUtil.replace(sql,_TEMPLATEID_SQL,StringPool.BLANK);
    }
 else {
      sql=CustomSQLUtil.replaceKeywords(sql,"templateId",StringPool.LIKE,false,templateIds);
    }
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    if ((articleIds != null) && ((articleIds.length > 1) || ((articleIds.length == 1) && (articleIds[0] != null))) && (version == null)) {
      sql=StringUtil.replace(sql,"MAX(version) AS tempVersion","version AS tempVersion");
      sql=StringUtil.replace(sql,"[$GROUP_BY_CLAUSE$]",StringPool.BLANK);
    }
 else {
      sql=StringUtil.replace(sql,"[$GROUP_BY_CLAUSE$]","GROUP BY groupId, articleId");
    }
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,JournalArticle.class.getName(),"JournalArticle.resourcePrimKey",groupId);
      sql=StringUtil.replace(sql,"(companyId","(JournalArticle.companyId");
    }
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    if (groupId > 0) {
      qPos.add(groupId);
    }
    if (folderId >= 0) {
      qPos.add(folderId);
    }
    qPos.add(classNameId);
    qPos.add(articleIds,2);
    if ((version != null) && (version > 0)) {
      qPos.add(version);
    }
    qPos.add(titles,2);
    qPos.add(descriptions,2);
    qPos.add(contents,2);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateLT_TS);
    qPos.add(displayDateLT_TS);
    if (status != WorkflowConstants.STATUS_ANY) {
      qPos.add(status);
    }
    qPos.add(reviewDate_TS);
    qPos.add(reviewDate_TS);
    if (Validator.isNotNull(type)) {
      qPos.add(type);
      qPos.add(type);
    }
    if (!isArrayNull(structureIds)) {
      qPos.add(structureIds,2);
    }
    if (!isArrayNull(templateIds)) {
      qPos.add(templateIds,2);
    }
    qPos.add(companyId);
    Iterator<Long> itr=q.iterate();
    if (itr.hasNext()) {
      Long count=itr.next();
      if (count != null) {
        return count.intValue();
      }
    }
    return 0;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
