{
  User user=userPersistence.findByPrimaryKey(userId);
  SCProductEntry productEntry=scProductEntryPersistence.findByPrimaryKey(productEntryId);
  directDownloadURL=directDownloadURL.trim().toLowerCase();
  Date now=new Date();
  validate(0,version,changeLog,downloadPageURL,directDownloadURL,frameworkVersionIds);
  long productVersionId=counterLocalService.increment();
  SCProductVersion productVersion=scProductVersionPersistence.create(productVersionId);
  productVersion.setCompanyId(user.getCompanyId());
  productVersion.setUserId(user.getUserId());
  productVersion.setUserName(user.getFullName());
  productVersion.setCreateDate(now);
  productVersion.setModifiedDate(now);
  productVersion.setProductEntryId(productEntryId);
  productVersion.setVersion(version);
  productVersion.setChangeLog(changeLog);
  productVersion.setDownloadPageURL(downloadPageURL);
  productVersion.setDirectDownloadURL(directDownloadURL);
  productVersion.setRepoStoreArtifact(repoStoreArtifact);
  scProductVersionPersistence.update(productVersion);
  productEntry.setModifiedDate(now);
  scProductEntryPersistence.update(productEntry);
  scProductVersionPersistence.setSCFrameworkVersions(productVersionId,frameworkVersionIds);
  try {
    Indexer.updateProductEntry(productEntry.getCompanyId(),productEntry.getGroupId(),productEntry.getUserId(),productEntry.getUserName(),productEntry.getProductEntryId(),productEntry.getName(),now,productVersion.getVersion(),productEntry.getType(),productEntry.getShortDescription(),productEntry.getLongDescription(),productEntry.getPageURL(),productEntry.getRepoGroupId(),productEntry.getRepoArtifactId());
  }
 catch (  IOException ioe) {
    _log.error("Indexing " + productEntry.getProductEntryId(),ioe);
  }
  return productVersion;
}
