{
  Path repositoryPath=_nettyFabricClientConfig.getRepositoryPath();
  Files.createDirectories(repositoryPath);
  Repository<Channel> repository=new NettyRepository(repositoryPath,_nettyFabricClientConfig.getRepositoryGetFileTimeout());
  ChannelFuture channelFuture=socketChannel.closeFuture();
  channelFuture.addListener(new PostDisconnectChannelFutureListener(repository));
  ChannelPipeline channelPipeline=socketChannel.pipeline();
  channelPipeline.addLast(AnnotatedObjectEncoder.NAME,AnnotatedObjectEncoder.INSTANCE);
  channelPipeline.addLast(AnnotatedObjectDecoder.NAME,new AnnotatedObjectDecoder());
  EventExecutorGroup fileServerEventExecutorGroup=createEventExecutorGroup(_nettyFabricClientConfig.getFileServerGroupThreadCount(),"Netty Fabric Client/File Server Event Executor Group");
  channelPipeline.addLast(fileServerEventExecutorGroup,FileRequestChannelHandler.NAME,new FileRequestChannelHandler(_nettyFabricClientConfig.getFileServerFolderCompressionLevel()));
  channelPipeline.addLast(new FileResponseChannelHandler(repository.getAsyncBroker(),fileServerEventExecutorGroup));
  channelPipeline.addLast(createEventExecutorGroup(_nettyFabricClientConfig.getRPCGroupThreadCount(),"Netty Fabric Client/RPC Event Executor Group"),NettyRPCChannelHandler.NAME,NettyRPCChannelHandler.INSTANCE);
  channelPipeline.addLast(createEventExecutorGroup(_nettyFabricClientConfig.getExecutionGroupThreadCount(),"Netty Fabric Client/Execution Event Executor Group"),new NettyFabricWorkerExecutionChannelHandler(repository,new LocalFabricAgent(_processExecutor),_nettyFabricClientConfig.getExecutionTimeout()));
}
