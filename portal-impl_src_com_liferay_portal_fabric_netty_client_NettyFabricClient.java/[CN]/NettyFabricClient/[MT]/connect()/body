{
  if (_channel != null) {
    throw new IllegalStateException("Netty fabric client has already started");
  }
  if (_log.isInfoEnabled()) {
    _log.info("Starting netty fabric client using " + _nettyFabricClientConfig);
  }
  Runtime runtime=Runtime.getRuntime();
  runtime.addShutdownHook(_shutdownHook);
  _bootstrap=new Bootstrap();
  _bootstrap.attr(_executionEventExecutorGroupAttributeKey,new DefaultEventExecutorGroup(_nettyFabricClientConfig.getExecutionGroupThreadCount(),new NamedThreadFactory("Netty Fabric Client/Execution Event Executor Group",Thread.NORM_PRIORITY,null)));
  _bootstrap.attr(_fileServerEventExecutorGroupAttributeKey,new DefaultEventExecutorGroup(_nettyFabricClientConfig.getFileServerGroupThreadCount(),new NamedThreadFactory("Netty Fabric Client/File Server Event Executor Group",Thread.NORM_PRIORITY,null)));
  _bootstrap.attr(_rpcEventExecutorGroupAttributeKey,new DefaultEventExecutorGroup(_nettyFabricClientConfig.getRPCGroupThreadCount(),new NamedThreadFactory("Netty Fabric Client/RPC Event Executor Group",Thread.NORM_PRIORITY,null)));
  _bootstrap.channel(NioSocketChannel.class);
  _bootstrap.group(new NioEventLoopGroup(_nettyFabricClientConfig.getEventLoopGroupThreadCount(),new NamedThreadFactory("Netty Fabric Client/NIO Event Loop Group",Thread.NORM_PRIORITY,null)));
  _bootstrap.handler(new NettyFabricClientChannelInitializer());
  _reconnectCounter.set(_nettyFabricClientConfig.getReconnectCount());
  doConnect();
}
