{
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId(),TestPropsValues.getUserId());
  FileEntry fileEntry=DLAppLocalServiceUtil.addFileEntry(TestPropsValues.getUserId(),group.getGroupId(),parentFolder.getFolderId(),"Test Trash.txt",ContentTypes.TEXT_PLAIN,RandomTestUtil.randomBytes(TikaSafeRandomizerBumper.INSTANCE),serviceContext);
  MockHttpServletResponse mockHttpServletResponse=testRequestFile(fileEntry,_user,false);
  Assert.assertEquals(MockHttpServletResponse.SC_OK,mockHttpServletResponse.getStatus());
  DLTrashServiceUtil.moveFileEntryToTrash(fileEntry.getFileEntryId());
  mockHttpServletResponse=testRequestFile(fileEntry,_user,false);
  Assert.assertEquals(MockHttpServletResponse.SC_NOT_FOUND,mockHttpServletResponse.getStatus());
  mockHttpServletResponse=testRequestFile(fileEntry,_user,true);
  Assert.assertEquals(MockHttpServletResponse.SC_UNAUTHORIZED,mockHttpServletResponse.getStatus());
  RoleLocalServiceUtil.addUserRoles(_user.getUserId(),new long[]{_role.getRoleId()});
  mockHttpServletResponse=testRequestFile(fileEntry,_user,true);
  Assert.assertEquals(MockHttpServletResponse.SC_OK,mockHttpServletResponse.getStatus());
}
