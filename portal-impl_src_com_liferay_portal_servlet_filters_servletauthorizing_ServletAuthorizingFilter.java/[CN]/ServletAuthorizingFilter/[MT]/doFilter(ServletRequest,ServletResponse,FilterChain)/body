{
  HttpServletRequest httpReq=(HttpServletRequest)req;
  HttpSession ses=httpReq.getSession();
  long companyId=PortalInstances.getCompanyId(httpReq);
  httpReq.setAttribute(WebKeys.COMPANY_ID,new Long(companyId));
  long userId=PortalUtil.getUserId(httpReq);
  String remoteUser=httpReq.getRemoteUser();
  if (!PropsValues.PORTAL_JAAS_ENABLE) {
    String jRemoteUser=(String)ses.getAttribute("j_remoteuser");
    if (jRemoteUser != null) {
      remoteUser=jRemoteUser;
      ses.removeAttribute("j_remoteuser");
    }
  }
  if ((userId > 0) && (remoteUser == null)) {
    remoteUser=String.valueOf(userId);
  }
  req=new ProtectedServletRequest(httpReq,remoteUser);
  httpReq=(HttpServletRequest)req;
  ses=httpReq.getSession();
  User user=null;
  PermissionCheckerImpl permissionChecker=null;
  if ((userId > 0) || (remoteUser != null)) {
    String name=String.valueOf(userId);
    if (remoteUser != null) {
      name=remoteUser;
    }
    PrincipalThreadLocal.setName(name);
    userId=GetterUtil.getLong(name);
    try {
      user=UserLocalServiceUtil.getUserById(userId);
      permissionChecker=PermissionCheckerFactory.create(user,true);
      PermissionThreadLocal.setPermissionChecker(permissionChecker);
      ses.setAttribute(WebKeys.USER_ID,new Long(userId));
      ses.setAttribute(Globals.LOCALE_KEY,user.getLocale());
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  try {
    chain.doFilter(req,res);
  }
  finally {
    try {
      PermissionCheckerFactory.recycle(permissionChecker);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
    CompanyThreadLocal.setCompanyId(0);
    PrincipalThreadLocal.setName(null);
  }
}
