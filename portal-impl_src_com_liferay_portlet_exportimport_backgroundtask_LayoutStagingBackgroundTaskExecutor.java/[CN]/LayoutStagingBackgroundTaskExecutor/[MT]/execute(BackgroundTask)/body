{
  ExportImportConfiguration exportImportConfiguration=getExportImportConfiguration(backgroundTask);
  Map<String,Serializable> settingsMap=exportImportConfiguration.getSettingsMap();
  long userId=MapUtil.getLong(settingsMap,"userId");
  long targetGroupId=MapUtil.getLong(settingsMap,"targetGroupId");
  long sourceGroupId=MapUtil.getLong(settingsMap,"sourceGroupId");
  clearBackgroundTaskStatus(backgroundTask);
  File file=null;
  MissingReferences missingReferences=null;
  try {
    ExportImportThreadLocal.setLayoutStagingInProcess(true);
    ExportImportLifecycleManager.fireExportImportLifecycleEvent(EVENT_PUBLICATION_LAYOUT_LOCAL_STARTED,PROCESS_FLAG_LAYOUT_STAGING_IN_PROCESS,exportImportConfiguration);
    boolean privateLayout=MapUtil.getBoolean(settingsMap,"privateLayout");
    initThreadLocals(sourceGroupId,privateLayout);
    file=ExportImportLocalServiceUtil.exportLayoutsAsFile(exportImportConfiguration);
    markBackgroundTask(backgroundTask.getBackgroundTaskId(),"exported");
    missingReferences=TransactionInvokerUtil.invoke(transactionAttribute,new LayoutStagingImportCallable(backgroundTask.getBackgroundTaskId(),exportImportConfiguration,file,sourceGroupId,targetGroupId,userId));
    ExportImportThreadLocal.setLayoutStagingInProcess(false);
    ExportImportLifecycleManager.fireExportImportLifecycleEvent(EVENT_PUBLICATION_LAYOUT_LOCAL_SUCCEEDED,PROCESS_FLAG_LAYOUT_STAGING_IN_PROCESS,exportImportConfiguration);
  }
 catch (  Throwable t) {
    ExportImportThreadLocal.setLayoutStagingInProcess(false);
    ExportImportLifecycleManager.fireExportImportLifecycleEvent(EVENT_PUBLICATION_LAYOUT_LOCAL_FAILED,PROCESS_FLAG_LAYOUT_STAGING_IN_PROCESS,exportImportConfiguration,t);
    if (_log.isDebugEnabled()) {
      _log.debug(t,t);
    }
 else     if (_log.isWarnEnabled()) {
      _log.warn("Unable to publish layout: " + t.getMessage());
    }
    Group sourceGroup=GroupLocalServiceUtil.getGroup(sourceGroupId);
    if (sourceGroup.hasStagingGroup()) {
      ServiceContext serviceContext=new ServiceContext();
      serviceContext.setUserId(userId);
      StagingLocalServiceUtil.disableStaging(sourceGroup,serviceContext);
    }
    deleteTempLarOnFailure(file);
    throw new SystemException(t);
  }
  deleteTempLarOnSuccess(file);
  return processMissingReferences(backgroundTask.getBackgroundTaskId(),missingReferences);
}
