{
  CollectionNode text=new CollectionNode();
  FormattedTextNode p=null;
  try {
    int alt18=2;
    int LA18_0=input.LA(1);
    if (((LA18_0 >= FORCED_END_OF_LINE && LA18_0 <= 79))) {
      alt18=1;
    }
 else     if ((LA18_0 == EOF)) {
      alt18=1;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return text;
      }
      NoViableAltException nvae=new NoViableAltException("168:1: text_boldcontent returns [ CollectionNode text = new CollectionNode() ] : ( ( NEWLINE )? (p= text_boldcontentpart )* | EOF );",18,0,input);
      throw nvae;
    }
switch (alt18) {
case 1:
{
        int alt16=2;
        int LA16_0=input.LA(1);
        if ((LA16_0 == NEWLINE)) {
          alt16=1;
        }
switch (alt16) {
case 1:
{
            match(input,NEWLINE,FOLLOW_NEWLINE_in_text_boldcontent547);
            if (failed)             return text;
          }
        break;
    }
    loop17:     do {
      int alt17=2;
switch (input.LA(1)) {
case STAR:
{
          int LA17_2=input.LA(2);
          if ((input.LA(2) != STAR)) {
            alt17=1;
          }
        }
      break;
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case EQUAL:
case PIPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case TABLE_OF_CONTENTS_TEXT:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case BRACE_CLOSE:
case COLON_SLASH:
case SLASH:
case TABLE_OF_CONTENTS_OPEN_MARKUP:
case TABLE_OF_CONTENTS_CLOSE_MARKUP:
case INSIGNIFICANT_CHAR:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
{
      alt17=1;
    }
  break;
case FORCED_LINEBREAK:
{
  alt17=1;
}
break;
case ESCAPE:
{
alt17=1;
}
break;
case LINK_OPEN:
{
alt17=1;
}
break;
case IMAGE_OPEN:
{
alt17=1;
}
break;
case EXTENSION:
{
alt17=1;
}
break;
case NOWIKI_OPEN:
{
alt17=1;
}
break;
case ITAL:
{
alt17=1;
}
break;
}
switch (alt17) {
case 1:
{
pushFollow(FOLLOW_text_boldcontentpart_in_text_boldcontent559);
p=text_boldcontentpart();
_fsp--;
if (failed) return text;
if (backtracking == 0) {
text.add(p);
}
}
break;
default :
break loop17;
}
}
 while (true);
}
break;
case 2:
{
match(input,EOF,FOLLOW_EOF_in_text_boldcontent570);
if (failed) return text;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return text;
}
