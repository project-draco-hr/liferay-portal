{
  StringBundler text=new StringBundler();
  Token c=null;
  try {
{
      int cnt146=0;
      loop146:       do {
        int alt146=2;
        int LA146_0=input.LA(1);
        if (((LA146_0 >= FORCED_END_OF_LINE && LA146_0 <= WIKI) || LA146_0 == POUND || (LA146_0 >= EQUAL && LA146_0 <= PIPE) || (LA146_0 >= ESCAPE && LA146_0 <= LINK_CLOSE) || (LA146_0 >= BLANKS && LA146_0 <= 79))) {
          alt146=1;
        }
switch (alt146) {
case 1:
{
            c=(Token)input.LT(1);
            if ((input.LA(1) >= FORCED_END_OF_LINE && input.LA(1) <= WIKI) || input.LA(1) == POUND || (input.LA(1) >= EQUAL && input.LA(1) <= PIPE) || (input.LA(1) >= ESCAPE && input.LA(1) <= LINK_CLOSE) || (input.LA(1) >= BLANKS && input.LA(1) <= 79)) {
              input.consume();
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return text;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_image_alternative_simple_text4594);
              throw mse;
            }
            if (backtracking == 0) {
              text.append(c.getText());
            }
          }
        break;
default :
      if (cnt146 >= 1)       break loop146;
    if (backtracking > 0) {
      failed=true;
      return text;
    }
  EarlyExitException eee=new EarlyExitException(146,input);
throw eee;
}
cnt146++;
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return text;
}
