{
  StringBundler link=new StringBundler();
  Token c=null;
  try {
{
      int cnt133=0;
      loop133:       do {
        int alt133=2;
        int LA133_0=input.LA(1);
        if (((LA133_0 >= FORCED_END_OF_LINE && LA133_0 <= WIKI) || (LA133_0 >= POUND && LA133_0 <= EQUAL) || (LA133_0 >= ITAL && LA133_0 <= LINK_CLOSE)|| (LA133_0 >= BLANKS && LA133_0 <= 78))) {
          alt133=1;
        }
switch (alt133) {
case 1:
{
            c=(Token)input.LT(1);
            if ((input.LA(1) >= FORCED_END_OF_LINE && input.LA(1) <= WIKI) || (input.LA(1) >= POUND && input.LA(1) <= EQUAL) || (input.LA(1) >= ITAL && input.LA(1) <= LINK_CLOSE)|| (input.LA(1) >= BLANKS && input.LA(1) <= 78)) {
              input.consume();
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return link;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_image_uri4248);
              throw mse;
            }
            if (backtracking == 0) {
              link.append(c.getText());
            }
          }
        break;
default :
      if (cnt133 >= 1)       break loop133;
    if (backtracking > 0) {
      failed=true;
      return link;
    }
  EarlyExitException eee=new EarlyExitException(133,input);
throw eee;
}
cnt133++;
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return link;
}
