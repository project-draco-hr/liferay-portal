{
  list_italcontentpart_stack.push(new list_italcontentpart_scope());
  ASTNode contents=null;
  ASTNode c=null;
  ASTNode t=null;
  ((list_italcontentpart_scope)list_italcontentpart_stack.peek()).elements=new ArrayList<ASTNode>();
  try {
    int alt67=2;
    int LA67_0=input.LA(1);
    if ((LA67_0 == STAR)) {
      alt67=1;
    }
 else     if (((LA67_0 >= FORCED_END_OF_LINE && LA67_0 <= WIKI) || LA67_0 == POUND || (LA67_0 >= EQUAL && LA67_0 <= PIPE) || (LA67_0 >= LINK_OPEN && LA67_0 <= 75))) {
      alt67=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return contents;
      }
      NoViableAltException nvae=new NoViableAltException("340:1: list_italcontentpart returns [ASTNode contents = null] : ( bold_markup c= list_bolditalcontent ( bold_markup )? | (t= text_unformattedelement )+ );",67,0,input);
      throw nvae;
    }
switch (alt67) {
case 1:
{
        pushFollow(FOLLOW_bold_markup_in_list_italcontentpart1857);
        bold_markup();
        _fsp--;
        if (failed) {
          return contents;
        }
        pushFollow(FOLLOW_list_bolditalcontent_in_list_italcontentpart1864);
        c=list_bolditalcontent();
        _fsp--;
        if (failed) {
          return contents;
        }
        if (backtracking == 0) {
          contents=new BoldTextNode(c);
        }
        int alt65=2;
        int LA65_0=input.LA(1);
        if ((LA65_0 == STAR)) {
          int LA65_1=input.LA(2);
          if ((LA65_1 == STAR)) {
            alt65=1;
          }
        }
switch (alt65) {
case 1:
{
            pushFollow(FOLLOW_bold_markup_in_list_italcontentpart1871);
            bold_markup();
            _fsp--;
            if (failed) {
              return contents;
            }
          }
        break;
    }
  }
break;
case 2:
{
int cnt66=0;
loop66: do {
  int alt66=2;
switch (input.LA(1)) {
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case EQUAL:
case PIPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case COLON_SLASH:
case SLASH:
case INSIGNIFICANT_CHAR:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
{
      alt66=1;
    }
  break;
case FORCED_LINEBREAK:
{
  alt66=1;
}
break;
case ESCAPE:
{
alt66=1;
}
break;
case LINK_OPEN:
{
alt66=1;
}
break;
case IMAGE_OPEN:
{
alt66=1;
}
break;
case EXTENSION:
{
alt66=1;
}
break;
case NOWIKI_OPEN:
{
alt66=1;
}
break;
}
switch (alt66) {
case 1:
{
pushFollow(FOLLOW_text_unformattedelement_in_list_italcontentpart1885);
t=text_unformattedelement();
_fsp--;
if (failed) {
return contents;
}
if (backtracking == 0) {
((list_italcontentpart_scope)list_italcontentpart_stack.peek()).elements.add(t);
}
}
break;
default :
if (cnt66 >= 1) {
break loop66;
}
if (backtracking > 0) {
failed=true;
return contents;
}
EarlyExitException eee=new EarlyExitException(66,input);
throw eee;
}
cnt66++;
}
 while (true);
if (backtracking == 0) {
contents=new CollectionNode(((list_italcontentpart_scope)list_italcontentpart_stack.peek()).elements);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
list_italcontentpart_stack.pop();
}
return contents;
}
