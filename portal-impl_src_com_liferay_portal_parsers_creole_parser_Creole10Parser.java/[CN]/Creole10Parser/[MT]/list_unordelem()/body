{
  CountLevel_stack.push(new CountLevel_scope());
  UnorderedListItemNode item=null;
  list_unordelem_markup_return um=null;
  CollectionNode elem=null;
  ((CountLevel_scope)CountLevel_stack.peek()).level=0;
  try {
{
      pushFollow(FOLLOW_list_unordelem_markup_in_list_unordelem2012);
      um=list_unordelem_markup();
      _fsp--;
      if (failed)       return item;
      if (backtracking == 0) {
        ++((CountLevel_scope)CountLevel_stack.peek()).level;
        ((CountLevel_scope)CountLevel_stack.peek()).currentMarkup=input.toString(um.start,um.stop);
        ((CountLevel_scope)CountLevel_stack.peek()).groups+=input.toString(um.start,um.stop);
      }
      pushFollow(FOLLOW_list_elem_in_list_unordelem2019);
      elem=list_elem();
      _fsp--;
      if (failed)       return item;
      if (backtracking == 0) {
        item=new UnorderedListItemNode(((CountLevel_scope)CountLevel_stack.peek()).level,elem);
      }
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
    CountLevel_stack.pop();
  }
  return item;
}
