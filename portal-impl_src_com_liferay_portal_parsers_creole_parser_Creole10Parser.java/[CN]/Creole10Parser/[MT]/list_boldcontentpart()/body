{
  list_boldcontentpart_stack.push(new list_boldcontentpart_scope());
  ASTNode contents=null;
  ASTNode c=null;
  ASTNode t=null;
  ((list_boldcontentpart_scope)list_boldcontentpart_stack.peek()).elements=new ArrayList<ASTNode>();
  try {
    int alt81=2;
    int LA81_0=input.LA(1);
    if ((LA81_0 == ITAL)) {
      alt81=1;
    }
 else     if (((LA81_0 >= FORCED_END_OF_LINE && LA81_0 <= WIKI) || LA81_0 == POUND || (LA81_0 >= EQUAL && LA81_0 <= PIPE) || (LA81_0 >= LINK_OPEN && LA81_0 <= 80))) {
      alt81=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return contents;
      }
      NoViableAltException nvae=new NoViableAltException("646:1: list_boldcontentpart returns [ASTNode contents = null] : ( ital_markup c= list_bolditalcontent ( ital_markup )? | (t= text_unformattedelement )+ );",81,0,input);
      throw nvae;
    }
switch (alt81) {
case 1:
{
        pushFollow(FOLLOW_ital_markup_in_list_boldcontentpart2181);
        ital_markup();
        _fsp--;
        if (failed)         return contents;
        pushFollow(FOLLOW_list_bolditalcontent_in_list_boldcontentpart2188);
        c=list_bolditalcontent();
        _fsp--;
        if (failed)         return contents;
        if (backtracking == 0) {
          contents=new ItalicTextNode(c);
        }
        int alt79=2;
        int LA79_0=input.LA(1);
        if ((LA79_0 == ITAL)) {
          alt79=1;
        }
switch (alt79) {
case 1:
{
            pushFollow(FOLLOW_ital_markup_in_list_boldcontentpart2195);
            ital_markup();
            _fsp--;
            if (failed)             return contents;
          }
        break;
    }
  }
break;
case 2:
{
int cnt80=0;
loop80: do {
  int alt80=2;
switch (input.LA(1)) {
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case EQUAL:
case PIPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case BRACE_CLOSE:
case COLON_SLASH:
case SLASH:
case INSIGNIFICANT_CHAR:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
{
      alt80=1;
    }
  break;
case FORCED_LINEBREAK:
{
  alt80=1;
}
break;
case ESCAPE:
{
alt80=1;
}
break;
case LINK_OPEN:
{
alt80=1;
}
break;
case IMAGE_OPEN:
{
alt80=1;
}
break;
case EXTENSION:
{
alt80=1;
}
break;
case NOWIKI_OPEN:
{
alt80=1;
}
break;
}
switch (alt80) {
case 1:
{
pushFollow(FOLLOW_text_unformattedelement_in_list_boldcontentpart2209);
t=text_unformattedelement();
_fsp--;
if (failed) return contents;
if (backtracking == 0) {
((list_boldcontentpart_scope)list_boldcontentpart_stack.peek()).elements.add(t);
}
}
break;
default :
if (cnt80 >= 1) break loop80;
if (backtracking > 0) {
failed=true;
return contents;
}
EarlyExitException eee=new EarlyExitException(80,input);
throw eee;
}
cnt80++;
}
 while (true);
if (backtracking == 0) {
contents=new CollectionNode(((list_boldcontentpart_scope)list_boldcontentpart_stack.peek()).elements);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
list_boldcontentpart_stack.pop();
}
return contents;
}
