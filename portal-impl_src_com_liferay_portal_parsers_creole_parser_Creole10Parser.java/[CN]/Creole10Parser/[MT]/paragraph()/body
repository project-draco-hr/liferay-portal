{
  ASTNode node=null;
  NoWikiSectionNode n=null;
  TableOfContentsNode tof=null;
  ASTNode h=null;
  ASTNode hn=null;
  ListNode l=null;
  TableNode t=null;
  ParagraphNode tp=null;
  try {
    int alt6=3;
switch (input.LA(1)) {
case NOWIKI_OPEN:
{
        int LA6_1=input.LA(2);
        if ((LA6_1 == NEWLINE)) {
          alt6=1;
        }
 else         if (((LA6_1 >= FORCED_END_OF_LINE && LA6_1 <= WIKI) || (LA6_1 >= POUND && LA6_1 <= 80))) {
          alt6=3;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return node;
          }
          NoViableAltException nvae=new NoViableAltException("157:1: paragraph returns [ASTNode node = null] : (n= nowiki_block | blanks paragraph_separator | ( blanks )? (tof= table_of_contents | h= heading | {...}?hn= horizontalrule | l= list | t= table | tp= text_paragraph ) ( paragraph_separator )? );",6,1,input);
          throw nvae;
        }
      }
    break;
case BLANKS:
{
switch (input.LA(2)) {
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case STAR:
case EQUAL:
case PIPE:
case ITAL:
case LINK_OPEN:
case IMAGE_OPEN:
case NOWIKI_OPEN:
case EXTENSION:
case FORCED_LINEBREAK:
case ESCAPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case BRACE_CLOSE:
case COLON_SLASH:
case SLASH:
case INSIGNIFICANT_CHAR:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
{
        alt6=3;
      }
    break;
case NEWLINE:
{
    alt6=2;
  }
break;
case EOF:
{
alt6=2;
}
break;
default :
if (backtracking > 0) {
failed=true;
return node;
}
NoViableAltException nvae=new NoViableAltException("157:1: paragraph returns [ASTNode node = null] : (n= nowiki_block | blanks paragraph_separator | ( blanks )? (tof= table_of_contents | h= heading | {...}?hn= horizontalrule | l= list | t= table | tp= text_paragraph ) ( paragraph_separator )? );",6,2,input);
throw nvae;
}
}
break;
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case STAR:
case EQUAL:
case PIPE:
case ITAL:
case LINK_OPEN:
case IMAGE_OPEN:
case EXTENSION:
case FORCED_LINEBREAK:
case ESCAPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case BRACE_CLOSE:
case COLON_SLASH:
case SLASH:
case INSIGNIFICANT_CHAR:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
{
alt6=3;
}
break;
default :
if (backtracking > 0) {
failed=true;
return node;
}
NoViableAltException nvae=new NoViableAltException("157:1: paragraph returns [ASTNode node = null] : (n= nowiki_block | blanks paragraph_separator | ( blanks )? (tof= table_of_contents | h= heading | {...}?hn= horizontalrule | l= list | t= table | tp= text_paragraph ) ( paragraph_separator )? );",6,0,input);
throw nvae;
}
switch (alt6) {
case 1:
{
pushFollow(FOLLOW_nowiki_block_in_paragraph163);
n=nowiki_block();
_fsp--;
if (failed) return node;
if (backtracking == 0) {
node=n;
}
}
break;
case 2:
{
pushFollow(FOLLOW_blanks_in_paragraph170);
blanks();
_fsp--;
if (failed) return node;
pushFollow(FOLLOW_paragraph_separator_in_paragraph173);
paragraph_separator();
_fsp--;
if (failed) return node;
}
break;
case 3:
{
int alt3=2;
int LA3_0=input.LA(1);
if ((LA3_0 == BLANKS)) {
alt3=1;
}
switch (alt3) {
case 1:
{
pushFollow(FOLLOW_blanks_in_paragraph180);
blanks();
_fsp--;
if (failed) return node;
}
break;
}
int alt4=6;
switch (input.LA(1)) {
case 77:
{
alt4=1;
}
break;
case 78:
{
alt4=1;
}
break;
case EQUAL:
{
alt4=2;
}
break;
case DASH:
{
int LA4_4=input.LA(2);
if ((input.LA(1) == DASH && input.LA(2) == DASH && input.LA(3) == DASH && input.LA(4) == DASH)) {
alt4=3;
}
 else if ((true)) {
alt4=6;
}
 else {
if (backtracking > 0) {
failed=true;
return node;
}
NoViableAltException nvae=new NoViableAltException("161:4: (tof= table_of_contents | h= heading | {...}?hn= horizontalrule | l= list | t= table | tp= text_paragraph )",4,4,input);
throw nvae;
}
}
break;
case POUND:
{
alt4=4;
}
break;
case STAR:
{
int LA4_6=input.LA(2);
if ((!(input.LA(1) != STAR || (input.LA(1) == STAR && input.LA(2) == STAR)))) {
alt4=4;
}
 else if ((input.LA(1) != STAR || (input.LA(1) == STAR && input.LA(2) == STAR))) {
alt4=6;
}
 else {
if (backtracking > 0) {
failed=true;
return node;
}
NoViableAltException nvae=new NoViableAltException("161:4: (tof= table_of_contents | h= heading | {...}?hn= horizontalrule | l= list | t= table | tp= text_paragraph )",4,6,input);
throw nvae;
}
}
break;
case PIPE:
{
alt4=5;
}
break;
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case ITAL:
case LINK_OPEN:
case IMAGE_OPEN:
case NOWIKI_OPEN:
case EXTENSION:
case FORCED_LINEBREAK:
case ESCAPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case CR:
case LF:
case SPACE:
case TABULATOR:
case BRACE_CLOSE:
case COLON_SLASH:
case SLASH:
case INSIGNIFICANT_CHAR:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 79:
case 80:
{
alt4=6;
}
break;
default :
if (backtracking > 0) {
failed=true;
return node;
}
NoViableAltException nvae=new NoViableAltException("161:4: (tof= table_of_contents | h= heading | {...}?hn= horizontalrule | l= list | t= table | tp= text_paragraph )",4,0,input);
throw nvae;
}
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_table_of_contents_in_paragraph194);
tof=table_of_contents();
_fsp--;
if (failed) return node;
if (backtracking == 0) {
node=tof;
}
}
break;
case 2:
{
pushFollow(FOLLOW_heading_in_paragraph208);
h=heading();
_fsp--;
if (failed) return node;
if (backtracking == 0) {
node=h;
}
}
break;
case 3:
{
if (!(input.LA(1) == DASH && input.LA(2) == DASH && input.LA(3) == DASH && input.LA(4) == DASH)) {
if (backtracking > 0) {
failed=true;
return node;
}
throw new FailedPredicateException(input,"paragraph"," input.LA(1) == DASH && input.LA(2) == DASH &&\n\t\t\t\tinput.LA(3) == DASH && input.LA(4) == DASH ");
}
pushFollow(FOLLOW_horizontalrule_in_paragraph227);
hn=horizontalrule();
_fsp--;
if (failed) return node;
if (backtracking == 0) {
node=hn;
}
}
break;
case 4:
{
pushFollow(FOLLOW_list_in_paragraph240);
l=list();
_fsp--;
if (failed) return node;
if (backtracking == 0) {
node=l;
}
}
break;
case 5:
{
pushFollow(FOLLOW_table_in_paragraph253);
t=table();
_fsp--;
if (failed) return node;
if (backtracking == 0) {
node=t;
}
}
break;
case 6:
{
pushFollow(FOLLOW_text_paragraph_in_paragraph266);
tp=text_paragraph();
_fsp--;
if (failed) return node;
if (backtracking == 0) {
node=tp;
}
}
break;
}
int alt5=2;
int LA5_0=input.LA(1);
if ((LA5_0 == NEWLINE)) {
alt5=1;
}
 else if ((LA5_0 == EOF)) {
int LA5_2=input.LA(2);
if ((LA5_2 == EOF)) {
int LA5_4=input.LA(3);
if ((LA5_4 == EOF)) {
alt5=1;
}
}
 else if (((LA5_2 >= FORCED_END_OF_LINE && LA5_2 <= WIKI) || (LA5_2 >= POUND && LA5_2 <= 80))) {
alt5=1;
}
}
switch (alt5) {
case 1:
{
pushFollow(FOLLOW_paragraph_separator_in_paragraph279);
paragraph_separator();
_fsp--;
if (failed) return node;
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return node;
}
