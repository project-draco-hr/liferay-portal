{
  ASTNode item=null;
  ASTNode tu1=null;
  ASTNode tu2=null;
  FormattedTextNode tf=null;
  try {
    int alt22=3;
switch (input.LA(1)) {
case STAR:
{
        int LA22_1=input.LA(2);
        if ((input.LA(2) != STAR)) {
          alt22=1;
        }
 else         if ((true)) {
          alt22=3;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return item;
          }
          NoViableAltException nvae=new NoViableAltException("172:1: text_element returns [ASTNode item = null] : ( onestar tu1= text_unformattedelement | tu2= text_unformattedelement onestar | tf= text_formattedelement );",22,1,input);
          throw nvae;
        }
      }
    break;
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case EQUAL:
case PIPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case TABLE_OF_CONTENTS_TEXT:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case COLON_SLASH:
case SLASH:
case TABLE_OF_CONTENTS_OPEN_MARKUP:
case TABLE_OF_CONTENTS_CLOSE_MARKUP:
case INSIGNIFICANT_CHAR:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
{
    alt22=1;
  }
break;
case FORCED_LINEBREAK:
{
alt22=1;
}
break;
case ESCAPE:
{
alt22=1;
}
break;
case LINK_OPEN:
{
alt22=1;
}
break;
case IMAGE_OPEN:
{
alt22=1;
}
break;
case EXTENSION:
{
alt22=1;
}
break;
case NOWIKI_OPEN:
{
alt22=1;
}
break;
case ITAL:
{
alt22=3;
}
break;
default :
if (backtracking > 0) {
failed=true;
return item;
}
NoViableAltException nvae=new NoViableAltException("172:1: text_element returns [ASTNode item = null] : ( onestar tu1= text_unformattedelement | tu2= text_unformattedelement onestar | tf= text_formattedelement );",22,0,input);
throw nvae;
}
switch (alt22) {
case 1:
{
pushFollow(FOLLOW_onestar_in_text_element626);
onestar();
_fsp--;
if (failed) return item;
pushFollow(FOLLOW_text_unformattedelement_in_text_element633);
tu1=text_unformattedelement();
_fsp--;
if (failed) return item;
if (backtracking == 0) {
item=tu1;
}
}
break;
case 2:
{
pushFollow(FOLLOW_text_unformattedelement_in_text_element644);
tu2=text_unformattedelement();
_fsp--;
if (failed) return item;
pushFollow(FOLLOW_onestar_in_text_element647);
onestar();
_fsp--;
if (failed) return item;
if (backtracking == 0) {
item=tu2;
}
}
break;
case 3:
{
pushFollow(FOLLOW_text_formattedelement_in_text_element658);
tf=text_formattedelement();
_fsp--;
if (failed) return item;
if (backtracking == 0) {
item=tf;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return item;
}
