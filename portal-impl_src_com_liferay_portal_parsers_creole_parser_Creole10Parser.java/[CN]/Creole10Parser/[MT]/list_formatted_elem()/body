{
  CollectionNode contents=new CollectionNode();
  ASTNode boldContents=null;
  ASTNode italContents=null;
  try {
    int alt78=2;
    int LA78_0=input.LA(1);
    if ((LA78_0 == STAR)) {
      alt78=1;
    }
 else     if ((LA78_0 == ITAL)) {
      alt78=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return contents;
      }
      NoViableAltException nvae=new NoViableAltException("604:1: list_formatted_elem returns [CollectionNode contents = new CollectionNode()] : ( bold_markup onestar (boldContents= list_boldcontentpart onestar )* ( bold_markup )? | ital_markup onestar (italContents= list_italcontentpart onestar )* ( ital_markup )? );",78,0,input);
      throw nvae;
    }
switch (alt78) {
case 1:
{
        pushFollow(FOLLOW_bold_markup_in_list_formatted_elem2085);
        bold_markup();
        _fsp--;
        if (failed)         return contents;
        pushFollow(FOLLOW_onestar_in_list_formatted_elem2088);
        onestar();
        _fsp--;
        if (failed)         return contents;
        loop74:         do {
          int alt74=2;
switch (input.LA(1)) {
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case EQUAL:
case PIPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case TABLE_OF_CONTENTS_TEXT:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case BRACE_CLOSE:
case COLON_SLASH:
case SLASH:
case TABLE_OF_CONTENTS_OPEN_MARKUP:
case TABLE_OF_CONTENTS_CLOSE_MARKUP:
case INSIGNIFICANT_CHAR:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
{
              alt74=1;
            }
          break;
case FORCED_LINEBREAK:
{
          alt74=1;
        }
      break;
case ESCAPE:
{
      alt74=1;
    }
  break;
case LINK_OPEN:
{
  alt74=1;
}
break;
case IMAGE_OPEN:
{
alt74=1;
}
break;
case EXTENSION:
{
alt74=1;
}
break;
case NOWIKI_OPEN:
{
alt74=1;
}
break;
case ITAL:
{
alt74=1;
}
break;
}
switch (alt74) {
case 1:
{
pushFollow(FOLLOW_list_boldcontentpart_in_list_formatted_elem2097);
boldContents=list_boldcontentpart();
_fsp--;
if (failed) return contents;
if (backtracking == 0) {
BoldTextNode add=null;
if (boldContents instanceof CollectionNode) {
add=new BoldTextNode(boldContents);
}
 else {
CollectionNode c=new CollectionNode();
c.add(boldContents);
add=new BoldTextNode(c);
}
contents.add(add);
}
pushFollow(FOLLOW_onestar_in_list_formatted_elem2106);
onestar();
_fsp--;
if (failed) return contents;
}
break;
default :
break loop74;
}
}
 while (true);
int alt75=2;
int LA75_0=input.LA(1);
if ((LA75_0 == STAR)) {
int LA75_1=input.LA(2);
if ((LA75_1 == STAR)) {
alt75=1;
}
}
switch (alt75) {
case 1:
{
pushFollow(FOLLOW_bold_markup_in_list_formatted_elem2115);
bold_markup();
_fsp--;
if (failed) return contents;
}
break;
}
}
break;
case 2:
{
pushFollow(FOLLOW_ital_markup_in_list_formatted_elem2123);
ital_markup();
_fsp--;
if (failed) return contents;
pushFollow(FOLLOW_onestar_in_list_formatted_elem2128);
onestar();
_fsp--;
if (failed) return contents;
loop76: do {
int alt76=2;
switch (input.LA(1)) {
case STAR:
{
alt76=1;
}
break;
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case EQUAL:
case PIPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case TABLE_OF_CONTENTS_TEXT:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case BRACE_CLOSE:
case COLON_SLASH:
case SLASH:
case TABLE_OF_CONTENTS_OPEN_MARKUP:
case TABLE_OF_CONTENTS_CLOSE_MARKUP:
case INSIGNIFICANT_CHAR:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
{
alt76=1;
}
break;
case FORCED_LINEBREAK:
{
alt76=1;
}
break;
case ESCAPE:
{
alt76=1;
}
break;
case LINK_OPEN:
{
alt76=1;
}
break;
case IMAGE_OPEN:
{
alt76=1;
}
break;
case EXTENSION:
{
alt76=1;
}
break;
case NOWIKI_OPEN:
{
alt76=1;
}
break;
}
switch (alt76) {
case 1:
{
pushFollow(FOLLOW_list_italcontentpart_in_list_formatted_elem2137);
italContents=list_italcontentpart();
_fsp--;
if (failed) return contents;
if (backtracking == 0) {
ItalicTextNode add=null;
if (italContents instanceof CollectionNode) {
add=new ItalicTextNode(italContents);
}
 else {
CollectionNode c=new CollectionNode();
c.add(italContents);
add=new ItalicTextNode(c);
}
contents.add(add);
}
pushFollow(FOLLOW_onestar_in_list_formatted_elem2146);
onestar();
_fsp--;
if (failed) return contents;
}
break;
default :
break loop76;
}
}
 while (true);
int alt77=2;
int LA77_0=input.LA(1);
if ((LA77_0 == ITAL)) {
alt77=1;
}
switch (alt77) {
case 1:
{
pushFollow(FOLLOW_ital_markup_in_list_formatted_elem2155);
ital_markup();
_fsp--;
if (failed) return contents;
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return contents;
}
