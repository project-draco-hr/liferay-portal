{
  CollectionNode items=new CollectionNode();
  StringBundler contents=null;
  ScapedNode e=null;
  try {
    int alt40=2;
    int LA40_0=input.LA(1);
    if (((LA40_0 >= FORCED_END_OF_LINE && LA40_0 <= WIKI) || LA40_0 == POUND || (LA40_0 >= EQUAL && LA40_0 <= PIPE) || (LA40_0 >= NOWIKI_BLOCK_CLOSE && LA40_0 <= 81))) {
      alt40=1;
    }
 else     if (((LA40_0 >= FORCED_LINEBREAK && LA40_0 <= ESCAPE))) {
      alt40=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return items;
      }
      NoViableAltException nvae=new NoViableAltException("278:1: text_unformatted returns [CollectionNode items = new CollectionNode()] : (contents= text_unformated_text | ( forced_linebreak | e= escaped )+ );",40,0,input);
      throw nvae;
    }
switch (alt40) {
case 1:
{
        pushFollow(FOLLOW_text_unformated_text_in_text_unformatted1137);
        contents=text_unformated_text();
        _fsp--;
        if (failed)         return items;
        if (backtracking == 0) {
          items.add(new UnformattedTextNode(contents.toString()));
        }
      }
    break;
case 2:
{
    int cnt39=0;
    loop39:     do {
      int alt39=3;
      int LA39_0=input.LA(1);
      if ((LA39_0 == FORCED_LINEBREAK)) {
        alt39=1;
      }
 else       if ((LA39_0 == ESCAPE)) {
        alt39=2;
      }
switch (alt39) {
case 1:
{
          pushFollow(FOLLOW_forced_linebreak_in_text_unformatted1146);
          forced_linebreak();
          _fsp--;
          if (failed)           return items;
          if (backtracking == 0) {
            items.add(new ForcedEndOfLineNode());
          }
        }
      break;
case 2:
{
      pushFollow(FOLLOW_escaped_in_text_unformatted1158);
      e=escaped();
      _fsp--;
      if (failed)       return items;
      if (backtracking == 0) {
        items.add(e);
      }
    }
  break;
default :
if (cnt39 >= 1) break loop39;
if (backtracking > 0) {
failed=true;
return items;
}
EarlyExitException eee=new EarlyExitException(39,input);
throw eee;
}
cnt39++;
}
 while (true);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return items;
}
