{
  CollectionNode text=new CollectionNode();
  StringBundler t=null;
  ScapedNode e=null;
  try {
    int alt111=2;
    int LA111_0=input.LA(1);
    if (((LA111_0 >= FORCED_END_OF_LINE && LA111_0 <= WIKI) || LA111_0 == POUND || LA111_0 == EQUAL || (LA111_0 >= NOWIKI_BLOCK_CLOSE && LA111_0 <= 78))) {
      alt111=1;
    }
 else     if (((LA111_0 >= FORCED_LINEBREAK && LA111_0 <= ESCAPE))) {
      alt111=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return text;
      }
      NoViableAltException nvae=new NoViableAltException("498:1: table_unformatted returns [CollectionNode text = new CollectionNode()] : (t= table_unformatted_text | ( forced_linebreak | e= escaped )+ );",111,0,input);
      throw nvae;
    }
switch (alt111) {
case 1:
{
        pushFollow(FOLLOW_table_unformatted_text_in_table_unformatted2951);
        t=table_unformatted_text();
        _fsp--;
        if (failed)         return text;
        if (backtracking == 0) {
          text.add(new UnformattedTextNode(t.toString()));
        }
      }
    break;
case 2:
{
    int cnt110=0;
    loop110:     do {
      int alt110=3;
      int LA110_0=input.LA(1);
      if ((LA110_0 == FORCED_LINEBREAK)) {
        alt110=1;
      }
 else       if ((LA110_0 == ESCAPE)) {
        alt110=2;
      }
switch (alt110) {
case 1:
{
          pushFollow(FOLLOW_forced_linebreak_in_table_unformatted2960);
          forced_linebreak();
          _fsp--;
          if (failed)           return text;
          if (backtracking == 0) {
            text.add(new ForcedEndOfLineNode());
          }
        }
      break;
case 2:
{
      pushFollow(FOLLOW_escaped_in_table_unformatted2973);
      e=escaped();
      _fsp--;
      if (failed)       return text;
      if (backtracking == 0) {
        text.add(e);
      }
    }
  break;
default :
if (cnt110 >= 1) break loop110;
if (backtracking > 0) {
failed=true;
return text;
}
EarlyExitException eee=new EarlyExitException(110,input);
throw eee;
}
cnt110++;
}
 while (true);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return text;
}
