{
  StringBundler text=new StringBundler();
  Token c=null;
  try {
{
      int cnt149=0;
      loop149:       do {
        int alt149=2;
        int LA149_0=input.LA(1);
        if ((LA149_0 == 81)) {
          int LA149_1=input.LA(2);
          if (((LA149_1 >= FORCED_END_OF_LINE && LA149_1 <= WIKI) || (LA149_1 >= POUND && LA149_1 <= STAR) || (LA149_1 >= PIPE && LA149_1 <= ITAL)|| (LA149_1 >= EXTENSION && LA149_1 <= FORCED_LINEBREAK)|| (LA149_1 >= NOWIKI_BLOCK_CLOSE && LA149_1 <= TABLE_OF_CONTENTS_OPEN)|| (LA149_1 >= DASH && LA149_1 <= 81))) {
            alt149=1;
          }
        }
 else         if (((LA149_0 >= FORCED_END_OF_LINE && LA149_0 <= WIKI) || (LA149_0 >= POUND && LA149_0 <= STAR) || (LA149_0 >= PIPE && LA149_0 <= ITAL)|| (LA149_0 >= EXTENSION && LA149_0 <= FORCED_LINEBREAK)|| (LA149_0 >= NOWIKI_BLOCK_CLOSE && LA149_0 <= TABLE_OF_CONTENTS_OPEN)|| (LA149_0 >= DASH && LA149_0 <= 80))) {
          alt149=1;
        }
switch (alt149) {
case 1:
{
            c=(Token)input.LT(1);
            if ((input.LA(1) >= FORCED_END_OF_LINE && input.LA(1) <= WIKI) || (input.LA(1) >= POUND && input.LA(1) <= STAR) || (input.LA(1) >= PIPE && input.LA(1) <= ITAL)|| (input.LA(1) >= EXTENSION && input.LA(1) <= FORCED_LINEBREAK)|| (input.LA(1) >= NOWIKI_BLOCK_CLOSE && input.LA(1) <= TABLE_OF_CONTENTS_OPEN)|| (input.LA(1) >= DASH && input.LA(1) <= 81)) {
              input.consume();
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return text;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_table_of_contents_title_text4790);
              throw mse;
            }
            if (backtracking == 0) {
              text.append(c.getText());
            }
          }
        break;
default :
      if (cnt149 >= 1)       break loop149;
    if (backtracking > 0) {
      failed=true;
      return text;
    }
  EarlyExitException eee=new EarlyExitException(149,input);
throw eee;
}
cnt149++;
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return text;
}
