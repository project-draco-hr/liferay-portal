{
  boolean hasAllowedAttributeName=false;
  List<Attribute> attributes=executeElement.attributes();
  for (  Attribute attribute : attributes) {
    String attributeName=attribute.getName();
    if (ArrayUtil.contains(allowedExecuteAttributeNames,attributeName)) {
      hasAllowedAttributeName=true;
      break;
    }
  }
  if (!hasAllowedAttributeName) {
    throwValidationException(0,fileName);
  }
  String action=executeElement.attributeValue("action");
  String function=executeElement.attributeValue("function");
  String macro=executeElement.attributeValue("macro");
  String selenium=executeElement.attributeValue("selenium");
  String testCase=executeElement.attributeValue("test-case");
  String testSuite=executeElement.attributeValue("test-suite");
  if (Validator.isNotNull(action) && action.matches(allowedExecuteAttributeValuesRegex)) {
    for (    Attribute attribute : attributes) {
      String attributeName=attribute.getName();
      if (!attributeName.equals("action") && !attributeName.startsWith("locator") && !attributeName.startsWith("locator-key")&& !attributeName.startsWith("value")) {
        throwValidationException(0,fileName);
      }
      if (attributeName.equals("locator") || attributeName.equals("locator-key") || attributeName.equals("value")) {
        throwValidationException(0,fileName);
      }
    }
  }
 else   if (Validator.isNotNull(function) && function.matches(allowedExecuteAttributeValuesRegex)) {
    for (    Attribute attribute : attributes) {
      String attributeName=attribute.getName();
      if (!attributeName.startsWith("locator") && !attributeName.equals("function") && !attributeName.startsWith("value")) {
        throwValidationException(0,fileName);
      }
      if (attributeName.equals("locator") || attributeName.equals("value")) {
        throwValidationException(0,fileName);
      }
    }
  }
 else   if (Validator.isNotNull(macro) && macro.matches(allowedExecuteAttributeValuesRegex)) {
    if (attributes.size() != 1) {
      throwValidationException(0,fileName);
    }
  }
 else   if (Validator.isNotNull(selenium) && selenium.matches(allowedExecuteAttributeValuesRegex)) {
    for (    Attribute attribute : attributes) {
      String attributeName=attribute.getName();
      if (!attributeName.equals("argument1") && !attributeName.equals("argument2") && !attributeName.equals("selenium")) {
        throwValidationException(0,fileName);
      }
    }
  }
 else   if (Validator.isNotNull(testCase) && testCase.matches(allowedExecuteAttributeValuesRegex)) {
    if (attributes.size() != 1) {
      throwValidationException(0,fileName);
    }
  }
 else   if (Validator.isNotNull(testSuite) && testSuite.matches(allowedExecuteAttributeValuesRegex)) {
    if (attributes.size() != 1) {
      throwValidationException(0,fileName);
    }
  }
 else {
    throwValidationException(0,fileName);
  }
  List<Element> elements=executeElement.elements();
  if (allowedExecuteChildElementNames.length == 0) {
    if (!elements.isEmpty()) {
      throwValidationException(0,fileName);
    }
  }
 else {
    for (    Element element : elements) {
      String elementName=element.getName();
      if (elementName.equals("var")) {
        validateVarElement(fileName,element);
      }
 else {
        throwValidationException(0,fileName);
      }
    }
  }
}
