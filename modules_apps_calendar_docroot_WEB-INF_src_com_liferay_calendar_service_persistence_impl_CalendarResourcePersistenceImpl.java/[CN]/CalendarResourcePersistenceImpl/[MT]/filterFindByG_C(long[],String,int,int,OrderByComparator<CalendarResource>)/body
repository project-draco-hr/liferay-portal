{
  if (!InlineSQLHelperUtil.isEnabled(groupIds)) {
    return findByG_C(groupIds,code,start,end,orderByComparator);
  }
  if (groupIds == null) {
    groupIds=new long[0];
  }
 else {
    groupIds=ArrayUtil.unique(groupIds);
  }
  StringBundler query=new StringBundler();
  query.append(_SQL_SELECT_CALENDARRESOURCE_WHERE);
  if (groupIds.length > 0) {
    query.append(StringPool.OPEN_PARENTHESIS);
    query.append(_FINDER_COLUMN_G_C_GROUPID_7);
    query.append(StringUtil.merge(groupIds));
    query.append(StringPool.CLOSE_PARENTHESIS);
    query.append(StringPool.CLOSE_PARENTHESIS);
    query.append(WHERE_AND);
  }
  boolean bindCode=false;
  if (code == null) {
    query.append(_FINDER_COLUMN_G_C_CODE_1);
  }
 else   if (code.equals(StringPool.BLANK)) {
    query.append(_FINDER_COLUMN_G_C_CODE_3);
  }
 else {
    bindCode=true;
    query.append(_FINDER_COLUMN_G_C_CODE_2);
  }
  query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
  if (orderByComparator != null) {
    appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
  }
 else {
    query.append(CalendarResourceModelImpl.ORDER_BY_JPQL);
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),CalendarResource.class.getName(),_FILTER_ENTITY_TABLE_FILTER_PK_COLUMN,_FILTER_ENTITY_TABLE_FILTER_USERID_COLUMN,groupIds);
  Session session=null;
  try {
    session=openSession();
    Query q=session.createQuery(sql);
    QueryPos qPos=QueryPos.getInstance(q);
    if (bindCode) {
      qPos.add(code);
    }
    return (List<CalendarResource>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
