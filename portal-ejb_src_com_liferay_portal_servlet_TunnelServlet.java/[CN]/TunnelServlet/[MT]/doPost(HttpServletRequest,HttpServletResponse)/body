{
  PermissionCheckerImpl permissionChecker=null;
  try {
    ObjectInputStream ois=new ObjectInputStream(req.getInputStream());
    Object returnObj=null;
    CompanyThreadLocal.setCompanyId(_companyId);
    try {
      ObjectValuePair ovp=(ObjectValuePair)ois.readObject();
      HttpPrincipal httpPrincipal=(HttpPrincipal)ovp.getKey();
      MethodWrapper methodWrapper=(MethodWrapper)ovp.getValue();
      if (httpPrincipal.getUserId() != null) {
        PrincipalThreadLocal.setName(httpPrincipal.getUserId());
        User user=UserLocalServiceUtil.getUserById(httpPrincipal.getUserId());
        permissionChecker=PermissionCheckerFactory.create(user,true,true);
        PermissionThreadLocal.setPermissionChecker(permissionChecker);
      }
      if (returnObj == null) {
        returnObj=MethodInvoker.invoke(methodWrapper);
      }
    }
 catch (    InvocationTargetException ite) {
      returnObj=ite.getCause();
      if (!(returnObj instanceof PortalException)) {
        ite.printStackTrace();
        returnObj=new SystemException();
      }
    }
catch (    Exception e) {
      _log.error(e,e);
    }
    if (returnObj != null) {
      ObjectOutputStream oos=new ObjectOutputStream(res.getOutputStream());
      oos.writeObject(returnObj);
      oos.flush();
      oos.close();
    }
  }
  finally {
    try {
      PermissionCheckerFactory.recycle(permissionChecker);
    }
 catch (    Exception e) {
    }
  }
}
