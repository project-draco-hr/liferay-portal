{
  final TrackedOne trackedOne=new TrackedOne();
  final Collection<Throwable> throwables=new ArrayList<>();
  ServiceTrackerMap<String,List<TrackedOne>> serviceTrackerMap=ServiceTrackerMapFactory.multiValueMap(_bundleContext,TrackedOne.class,null,new PropertyServiceReferenceMapper<String,TrackedOne>("target"),new DefaultServiceTrackerCustomizer<TrackedOne>(_bundleContext),new PropertyServiceReferenceComparator<TrackedOne>("service.ranking"),new ServiceTrackerMapListener<String,TrackedOne,List<TrackedOne>>(){
    @Override public void update(    ServiceTrackerMap<String,List<TrackedOne>> map,    String key,    TrackedOne service,    List<TrackedOne> content){
      try {
        Assert.assertEquals("aTarget",key);
        Assert.assertEquals(trackedOne,service);
        Assert.assertEquals(content,Arrays.asList(trackedOne));
      }
 catch (      Throwable t) {
        throwables.add(t);
      }
    }
  }
);
  serviceTrackerMap.open();
  ServiceRegistration<TrackedOne> serviceRegistration=null;
  try {
    serviceRegistration=registerService(trackedOne,"aTarget");
    for (    Throwable throwable : throwables) {
      throw throwable;
    }
  }
  finally {
    if (serviceRegistration != null) {
      serviceRegistration.unregister();
    }
    serviceTrackerMap.close();
  }
}
