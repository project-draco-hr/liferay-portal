{
  dlFileEntryPersistence.remove(fileEntry);
  resourceLocalService.deleteResource(fileEntry.getCompanyId(),DLFileEntry.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,fileEntry.getFileEntryId());
  webDAVPropsLocalService.deleteWebDAVProps(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(fileEntry.getCompanyId(),fileEntry.getGroupId(),DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  List<DLFileVersion> fileVersions=dlFileVersionPersistence.findByFileEntryId(fileEntry.getFileEntryId());
  for (  DLFileVersion fileVersion : fileVersions) {
    dlFileVersionPersistence.remove(fileVersion);
  }
  expandoValueLocalService.deleteValues(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  String lockId=Long.toString(fileEntry.getFileEntryId());
  lockLocalService.unlock(DLFileEntry.class.getName(),lockId);
  dlAppHelperLocalService.deleteFileEntry(fileEntry);
  try {
    dlLocalService.deleteFile(fileEntry.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,fileEntry.getRepositoryId(),fileEntry.getName());
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e,e);
    }
  }
}
