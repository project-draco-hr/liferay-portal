{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  DLFileEntry fileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
  long oldFileEntryId=fileEntry.getFileEntryId();
  if (dlLocalService.hasFile(user.getCompanyId(),DLFileEntryImpl.getRepositoryId(fileEntry.getGroupId(),newFolderId),fileEntry.getName(),StringPool.BLANK)) {
    throw new DuplicateFileException(fileEntry.getName());
  }
  long newFileEntryId=counterLocalService.increment();
  DLFileEntry newFileEntry=dlFileEntryPersistence.create(newFileEntryId);
  newFileEntry.setGroupId(fileEntry.getGroupId());
  newFileEntry.setCompanyId(fileEntry.getCompanyId());
  newFileEntry.setUserId(fileEntry.getUserId());
  newFileEntry.setUserName(fileEntry.getUserName());
  newFileEntry.setVersionUserId(fileEntry.getVersionUserId());
  newFileEntry.setVersionUserName(fileEntry.getVersionUserName());
  newFileEntry.setCreateDate(fileEntry.getCreateDate());
  newFileEntry.setModifiedDate(fileEntry.getModifiedDate());
  newFileEntry.setFolderId(newFolderId);
  newFileEntry.setName(fileEntry.getName());
  newFileEntry.setExtension(fileEntry.getExtension());
  newFileEntry.setTitle(fileEntry.getTitle());
  newFileEntry.setDescription(fileEntry.getDescription());
  newFileEntry.setExtraSettings(fileEntry.getExtraSettings());
  newFileEntry.setVersion(fileEntry.getVersion());
  newFileEntry.setSize(fileEntry.getSize());
  newFileEntry.setReadCount(fileEntry.getReadCount());
  dlFileEntryPersistence.update(newFileEntry,false);
  dlFileEntryPersistence.remove(fileEntry);
  workflowInstanceLinkLocalService.updateClassPK(fileEntry.getCompanyId(),fileEntry.getGroupId(),DLFileEntry.class.getName(),oldFileEntryId,newFileEntryId);
  List<DLFileVersion> fileVersions=dlFileVersionPersistence.findByFileEntryId(oldFileEntryId);
  for (  DLFileVersion fileVersion : fileVersions) {
    long newFileVersionId=counterLocalService.increment();
    DLFileVersion newFileVersion=dlFileVersionPersistence.create(newFileVersionId);
    newFileVersion.setGroupId(fileVersion.getGroupId());
    newFileVersion.setCompanyId(fileVersion.getCompanyId());
    newFileVersion.setUserId(fileVersion.getUserId());
    newFileVersion.setUserName(fileVersion.getUserName());
    newFileVersion.setCreateDate(fileVersion.getCreateDate());
    newFileVersion.setFileEntryId(newFileEntryId);
    newFileVersion.setExtension(fileVersion.getExtension());
    newFileVersion.setTitle(fileVersion.getTitle());
    newFileVersion.setDescription(fileVersion.getDescription());
    newFileVersion.setChangeLog(fileVersion.getChangeLog());
    newFileVersion.setExtraSettings(fileVersion.getExtraSettings());
    newFileVersion.setVersion(fileVersion.getVersion());
    newFileVersion.setSize(fileVersion.getSize());
    newFileVersion.setStatus(fileVersion.getStatus());
    newFileVersion.setStatusByUserId(userId);
    newFileVersion.setStatusByUserName(user.getFullName());
    newFileVersion.setStatusDate(serviceContext.getModifiedDate(now));
    dlFileVersionPersistence.update(newFileVersion,false);
    dlFileVersionPersistence.remove(fileVersion);
  }
  resourceLocalService.updateResources(fileEntry.getCompanyId(),DLFileEntry.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,String.valueOf(fileEntry.getFileEntryId()),String.valueOf(newFileEntryId));
  expandoValueLocalService.deleteValues(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  dlAppHelperLocalService.moveFileEntry(oldFileEntryId,newFileEntryId);
  dlLocalService.updateFile(user.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,newFileEntry.getGroupId(),fileEntry.getRepositoryId(),newFileEntry.getRepositoryId(),fileEntry.getName(),newFileEntryId);
  return newFileEntry;
}
