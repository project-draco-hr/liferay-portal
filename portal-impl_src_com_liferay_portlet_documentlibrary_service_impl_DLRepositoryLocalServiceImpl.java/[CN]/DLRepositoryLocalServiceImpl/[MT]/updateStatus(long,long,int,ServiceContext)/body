{
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileEntry fileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
  DLFileVersion latestFileVersion=getLatestFileVersion(fileEntry.getFileEntryId());
  latestFileVersion.setStatus(status);
  latestFileVersion.setStatusByUserId(user.getUserId());
  latestFileVersion.setStatusByUserName(user.getFullName());
  latestFileVersion.setStatusDate(new Date());
  dlFileVersionPersistence.update(latestFileVersion,false);
  if (status == WorkflowConstants.STATUS_APPROVED) {
    if (DLUtil.compareVersions(fileEntry.getVersion(),latestFileVersion.getVersion()) <= 0) {
      fileEntry.setTitle(latestFileVersion.getTitle());
      fileEntry.setDescription(latestFileVersion.getDescription());
      fileEntry.setExtraSettings(latestFileVersion.getExtraSettings());
      fileEntry.setVersion(latestFileVersion.getVersion());
      fileEntry.setVersionUserId(latestFileVersion.getUserId());
      fileEntry.setVersionUserName(latestFileVersion.getUserName());
      fileEntry.setModifiedDate(latestFileVersion.getCreateDate());
      fileEntry.setSize(latestFileVersion.getSize());
      dlFileEntryPersistence.update(fileEntry,false);
    }
    Indexer indexer=IndexerRegistryUtil.getIndexer(DLFileEntry.class);
    indexer.reindex(fileEntry);
  }
 else {
    if (fileEntry.getVersion().equals(latestFileVersion.getVersion())) {
      String newVersion=DLFileEntryConstants.DEFAULT_VERSION;
      List<DLFileVersion> approvedFileVersions=dlFileVersionPersistence.findByF_S(fileEntry.getFileEntryId(),WorkflowConstants.STATUS_APPROVED);
      if (!approvedFileVersions.isEmpty()) {
        newVersion=approvedFileVersions.get(0).getVersion();
      }
      fileEntry.setVersion(newVersion);
      dlFileEntryPersistence.update(fileEntry,false);
    }
    if (latestFileVersion.getVersion().equals(DLFileEntryConstants.DEFAULT_VERSION)) {
      Indexer indexer=IndexerRegistryUtil.getIndexer(DLFileEntry.class);
      indexer.delete(fileEntry);
    }
  }
  dlAppHelperLocalService.updateStatus(userId,new LiferayFileEntry(fileEntry),new LiferayFileVersion(latestFileVersion),status);
  return fileEntry;
}
