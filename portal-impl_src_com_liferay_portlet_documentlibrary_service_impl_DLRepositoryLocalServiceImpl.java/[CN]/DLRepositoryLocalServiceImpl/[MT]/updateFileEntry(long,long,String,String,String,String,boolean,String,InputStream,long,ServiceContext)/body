{
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileEntry dlFileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
  if (Validator.isNull(title)) {
    title=sourceFileName;
    if (Validator.isNull(title)) {
      title=dlFileEntry.getTitle();
    }
  }
  Date now=new Date();
  validateFile(dlFileEntry.getGroupId(),dlFileEntry.getFolderId(),dlFileEntry.getFileEntryId(),dlFileEntry.getExtension(),title,sourceFileName,is);
  String version=getNextVersion(dlFileEntry,majorVersion,serviceContext.getWorkflowAction());
  DLFileVersion dlFileVersion=null;
  String extension=null;
  if (Validator.isNotNull(sourceFileName)) {
    extension=FileUtil.getExtension(sourceFileName);
  }
 else {
    extension=dlFileEntry.getExtension();
  }
  boolean updatedFileVersion=false;
  try {
    DLFileVersion latestDLFileVersion=dlFileEntry.getLatestFileVersion();
    if (size == 0) {
      size=latestDLFileVersion.getSize();
    }
    if (!latestDLFileVersion.isApproved()) {
      if (!PropsValues.DL_FILE_ENTRY_DRAFTS_ENABLED) {
        version=latestDLFileVersion.getVersion();
      }
      if (version.equals(latestDLFileVersion.getVersion())) {
        updatedFileVersion=true;
      }
      updateFileVersion(user,latestDLFileVersion,sourceFileName,extension,title,description,changeLog,extraSettings,version,size,latestDLFileVersion.getStatus(),serviceContext.getModifiedDate(now),serviceContext);
    }
 else {
      dlFileVersion=addFileVersion(user,dlFileEntry,serviceContext.getModifiedDate(now),extension,title,description,changeLog,extraSettings,version,size,WorkflowConstants.STATUS_DRAFT,serviceContext);
    }
    if (dlFileVersion == null) {
      dlFileVersion=latestDLFileVersion;
    }
  }
 catch (  NoSuchFileVersionException nsfve) {
    dlFileVersion=addFileVersion(user,dlFileEntry,serviceContext.getModifiedDate(now),extension,title,description,changeLog,extraSettings,version,size,WorkflowConstants.STATUS_DRAFT,serviceContext);
  }
  if ((is == null) && !updatedFileVersion) {
    int fetchFailures=0;
    while (is == null) {
      try {
        is=dlLocalService.getFileAsStream(user.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName());
      }
 catch (      NoSuchFileException nsfe) {
        fetchFailures++;
        if (PropsValues.DL_HOOK_IMPL.equals(JCRHook.class.getName()) && (fetchFailures < PropsValues.DL_HOOK_JCR_FETCH_MAX_FAILURES)) {
          try {
            Thread.sleep(PropsValues.DL_HOOK_JCR_FETCH_DELAY);
          }
 catch (          InterruptedException ie) {
          }
        }
 else {
          throw nsfe;
        }
      }
    }
  }
  updateAsset(userId,dlFileEntry,dlFileVersion,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  if (dlFileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    DLFolder folder=dlFolderPersistence.findByPrimaryKey(dlFileEntry.getFolderId());
    folder.setLastPostDate(dlFileEntry.getModifiedDate());
    dlFolderPersistence.update(folder,false);
  }
  if (is != null) {
    try {
      dlLocalService.deleteFile(user.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),version);
    }
 catch (    NoSuchFileException nsfe) {
    }
    dlLocalService.updateFile(user.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,dlFileEntry.getGroupId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),dlFileEntry.getExtension(),false,version,sourceFileName,dlFileEntry.getFileEntryId(),dlFileEntry.getLuceneProperties(),dlFileEntry.getModifiedDate(),serviceContext,is);
  }
  if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_PUBLISH) {
    WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),dlFileEntry.getGroupId(),userId,DLFileEntry.class.getName(),dlFileEntry.getFileEntryId(),dlFileEntry,serviceContext);
  }
  return dlFileEntry;
}
