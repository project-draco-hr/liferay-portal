{
  for (int i=7; ; i++) {
    Class<?> callerClass=Reflection.getCallerClass(i);
    if (callerClass == null) {
      return false;
    }
    Boolean allowed=null;
    String callerClassName=callerClass.getName();
    if (ServerDetector.isGeronimo()) {
      if (callerClassName.equals(_ClASS_NAME_COMPILER) || callerClassName.startsWith(_CLASS_NAME_JASPER_SERVLET_CONTEXT_CUSTOMIZER) || callerClassName.equals(_ClASS_NAME_TAG_HANDLER_POOL)) {
        String actualClassLocation=PACLClassUtil.getClassLocation(callerClass);
        String expectedClassLocation=PathUtil.toUnixPath(System.getProperty("org.apache.geronimo.home.dir") + "/repository/org/apache/geronimo/");
        allowed=actualClassLocation.contains(expectedClassLocation);
      }
    }
 else     if (ServerDetector.isGlassfish()) {
      if (callerClassName.equals(_ClASS_NAME_COMPILER) || callerClassName.equals(_ClASS_NAME_JSP_COMPILATION_CONTEXT)) {
        String classLocation=PACLClassUtil.getClassLocation(callerClass);
        allowed=classLocation.startsWith("bundle://");
      }
    }
 else     if (ServerDetector.isJBoss()) {
      if (callerClassName.equals(_ClASS_NAME_COMPILER)) {
        ClassLoader callerClassLoader=PACLClassLoaderUtil.getClassLoader(callerClass);
        String callerClassLoaderString=callerClassLoader.toString();
        allowed=callerClassLoaderString.contains(_MODULE_NAME_ORG_JBOSS_AS_WEB_MAIN);
      }
    }
 else     if (ServerDetector.isJetty()) {
      if (callerClassName.equals(_ClASS_NAME_COMPILER) || callerClassName.equals(_ClASS_NAME_JASPER_LOADER)) {
        ClassLoader callerClassLoader=PACLClassLoaderUtil.getClassLoader(callerClass);
        allowed=(callerClassLoader == _commonClassLoader);
      }
    }
 else     if (ServerDetector.isJOnAS()) {
      if (callerClassName.equals(_ClASS_NAME_DEFAULT_ANNOTATION_PROCESSOR) || callerClassName.equals(_ClASS_NAME_JASPER_LOADER) || callerClassName.equals(_ClASS_NAME_JSP_COMPILATION_CONTEXT)) {
        String classLocation=PACLClassUtil.getClassLocation(callerClass);
        allowed=classLocation.startsWith("bundle://");
      }
    }
 else     if (ServerDetector.isResin()) {
      if (callerClassName.equals(_ClASS_NAME_JSP_MANAGER) || callerClassName.equals(_ClASS_NAME_PAGE_MANAGER)) {
        String actualClassLocation=PACLClassUtil.getClassLocation(callerClass);
        String expectedClassLocation=PathUtil.toUnixPath(System.getProperty("resin.home") + "/lib/resin.jar!/");
        allowed=actualClassLocation.contains(expectedClassLocation);
      }
    }
 else     if (ServerDetector.isTomcat()) {
      if (callerClassName.equals(_ClASS_NAME_DEFAULT_INSTANCE_MANAGER) || callerClassName.equals(_ClASS_NAME_COMPILER) || callerClassName.equals(_ClASS_NAME_TAG_HANDLER_POOL)) {
        ClassLoader callerClassLoader=PACLClassLoaderUtil.getClassLoader(callerClass);
        allowed=(callerClassLoader == _commonClassLoader);
      }
    }
 else     if (ServerDetector.isWebLogic()) {
      if (callerClassName.equals(_CLASS_NAME_JSP_CLASS_LOADER) || callerClassName.equals(_CLASS_NAME_JSP_STUB)) {
        String classLocation=PACLClassUtil.getClassLocation(callerClass);
        allowed=classLocation.contains("/wlserver/server/lib/weblogic.jar!/");
      }
    }
    if (allowed == null) {
      continue;
    }
    if (allowed) {
      if (_log.isDebugEnabled()) {
        if (Validator.isNotNull(actions)) {
          _log.debug("Allowing the JSP compiler via " + callerClassName + " to "+ actions+ " "+ subject);
        }
 else {
          _log.debug("Allowing the JSP compiler via " + callerClassName + " to "+ subject);
        }
      }
      return true;
    }
 else {
      if (Validator.isNotNull(actions)) {
        _log.error("A plugin is hijacking the JSP compiler via " + callerClassName + " to "+ actions+ " "+ subject);
      }
 else {
        _log.error("A plugin is hijacking the JSP compiler via " + callerClassName + " to "+ subject);
      }
      return false;
    }
  }
}
