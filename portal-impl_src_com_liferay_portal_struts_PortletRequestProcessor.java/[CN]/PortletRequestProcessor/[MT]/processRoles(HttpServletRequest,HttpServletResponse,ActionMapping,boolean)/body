{
  long companyId=PortalUtil.getCompanyId(request);
  String path=mapping.getPath();
  try {
    PortletConfigImpl portletConfig=(PortletConfigImpl)request.getAttribute(JavaConstants.JAVAX_PORTLET_CONFIG);
    Portlet portlet=PortletLocalServiceUtil.getPortletById(companyId,portletConfig.getPortletId());
    if (portlet == null) {
      return false;
    }
    String strutsPath=path.substring(1,path.lastIndexOf(CharPool.SLASH));
    if (!strutsPath.equals(portlet.getStrutsPath())) {
      if (_log.isWarnEnabled()) {
        _log.warn("The struts path " + strutsPath + " does not belong "+ "to portlet "+ portlet.getPortletId()+ ". "+ "Check the definition in liferay-portlet.xml");
      }
      throw new PrincipalException();
    }
 else     if (portlet.isActive()) {
      if (PortalUtil.isAllowAddPortletDefaultResource(request,portlet)) {
        PortalUtil.addPortletDefaultResource(request,portlet);
      }
      ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
      Layout layout=themeDisplay.getLayout();
      PermissionChecker permissionChecker=themeDisplay.getPermissionChecker();
      if (!PortletPermissionUtil.contains(permissionChecker,layout.getPlid(),portlet,ActionKeys.VIEW)) {
        throw new PrincipalException();
      }
    }
 else     if (!portlet.isActive()) {
      ForwardConfig forwardConfig=mapping.findForward(_PATH_PORTAL_PORTLET_INACTIVE);
      if (!action) {
        processForwardConfig(request,response,forwardConfig);
      }
      return false;
    }
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e.getMessage());
    }
    ForwardConfig forwardConfig=mapping.findForward(_PATH_PORTAL_PORTLET_ACCESS_DENIED);
    if (!action) {
      processForwardConfig(request,response,forwardConfig);
    }
    return false;
  }
  return true;
}
