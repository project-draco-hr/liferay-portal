{
  try (UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(data))){
    StringBundler sb=new StringBundler();
    String line=null;
    String table=null;
    StringBundler createRulesSqlSB=new StringBundler();
    while ((line=unsyncBufferedReader.readLine()) != null) {
      if (line.startsWith(ALTER_COLUMN_NAME)) {
        String[] template=buildColumnNameTokens(line);
        line=StringUtil.replace("alter table @table@ rename @old-column@ to " + "@new-column@;",REWORD_TEMPLATE,template);
      }
 else       if (line.startsWith(ALTER_COLUMN_TYPE)) {
        String[] template=buildColumnTypeTokens(line);
        line=StringUtil.replace("alter table @table@ alter @old-column@ type @type@ " + "using @old-column@::@type@;",REWORD_TEMPLATE,template);
      }
 else       if (line.startsWith(ALTER_TABLE_NAME)) {
        String[] template=buildTableNameTokens(line);
        line=StringUtil.replace("alter table @old-table@ rename to @new-table@;",RENAME_TABLE_TEMPLATE,template);
      }
 else       if (line.startsWith(CREATE_TABLE)) {
        String[] tokens=StringUtil.split(line,' ');
        table=tokens[2];
      }
 else       if (line.contains(DROP_INDEX)) {
        String[] tokens=StringUtil.split(line,' ');
        line=StringUtil.replace("drop index @index@;","@index@",tokens[2]);
      }
 else       if (line.contains(DROP_PRIMARY_KEY)) {
        String[] tokens=StringUtil.split(line,' ');
        line=StringUtil.replace("alter table @table@ drop constraint @table@_pkey;","@table@",tokens[2]);
      }
 else       if (line.contains(getTemplateBlob())) {
        String[] tokens=StringUtil.split(line,' ');
        createRulesSqlSB.append(StringPool.NEW_LINE);
        createRulesSqlSB.append(getCreateRulesSql(table,tokens[0]));
      }
 else       if (line.contains("\\\'")) {
        line=StringUtil.replace(line,"\\\'","\'\'");
      }
      sb.append(line);
      sb.append("\n");
    }
    sb.append(createRulesSqlSB.toString());
    return sb.toString();
  }
 }
