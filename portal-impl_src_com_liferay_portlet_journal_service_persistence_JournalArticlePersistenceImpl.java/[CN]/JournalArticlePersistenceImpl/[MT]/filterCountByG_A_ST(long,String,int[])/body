{
  if (!InlineSQLHelperUtil.isEnabled(groupId)) {
    return countByG_A_ST(groupId,articleId,statuses);
  }
  StringBundler query=new StringBundler();
  query.append(_FILTER_SQL_COUNT_JOURNALARTICLE_WHERE);
  query.append(_FINDER_COLUMN_G_A_ST_GROUPID_2);
  boolean bindArticleId=false;
  if (articleId == null) {
    query.append(_FINDER_COLUMN_G_A_ST_ARTICLEID_1);
  }
 else   if (articleId.equals(StringPool.BLANK)) {
    query.append(_FINDER_COLUMN_G_A_ST_ARTICLEID_3);
  }
 else {
    bindArticleId=true;
    query.append(_FINDER_COLUMN_G_A_ST_ARTICLEID_2);
  }
  if ((statuses == null) || (statuses.length > 0)) {
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < statuses.length; i++) {
      query.append(_FINDER_COLUMN_G_A_ST_STATUS_2);
      if ((i + 1) < statuses.length) {
        query.append(WHERE_OR);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
  }
  query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),JournalArticle.class.getName(),_FILTER_ENTITY_TABLE_FILTER_PK_COLUMN,groupId);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,com.liferay.portal.kernel.dao.orm.Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    if (bindArticleId) {
      qPos.add(articleId);
    }
    if (statuses != null) {
      qPos.add(statuses);
    }
    Long count=(Long)q.uniqueResult();
    return count.intValue();
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
