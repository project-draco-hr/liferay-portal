{
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  System.out.println("Starting import of layouts at " + stopWatch.getTime());
  LayoutCache layoutCache=new LayoutCache();
  LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(ownerId);
  String companyId=layoutSet.getCompanyId();
  long groupId=layoutSet.getGroupId();
  PortletDataContext context=new PortletDataContext(companyId,groupId,CollectionFactory.getHashSet());
  Group guestGroup=GroupLocalServiceUtil.getGroup(companyId,GroupImpl.GUEST);
  Element root=null;
  try {
    ZipReader zipReader=new ZipReader(is);
    String xml=zipReader.getEntryAsString("layouts.xml");
    SAXReader reader=new SAXReader();
    Document doc=reader.read(new StringReader(xml));
    root=doc.getRootElement();
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
  Element header=(Element)root.element("header");
  int buildNumber=ReleaseInfo.getBuildNumber();
  int importBuildNumber=GetterUtil.getInteger(header.attributeValue("build-number"));
  if (buildNumber != importBuildNumber) {
    throw new LayoutImportException("LAR build number " + importBuildNumber + " does not match "+ "portal build number "+ buildNumber);
  }
  String themeId=header.attributeValue("theme-id");
  String colorSchemeId=header.attributeValue("color-scheme-id");
  LayoutSetLocalServiceUtil.updateLookAndFeel(ownerId,themeId,colorSchemeId,StringPool.BLANK);
  User user=UserUtil.findByPrimaryKey(userId);
  List newLayoutPKs=new ArrayList();
  Iterator itr1=root.elements("layout").iterator();
  while (itr1.hasNext()) {
    Element layoutEl=(Element)itr1.next();
    String layoutId=layoutEl.attributeValue("layout-id");
    String parentLayoutId=layoutEl.elementText("parent-layout-id");
    String name=layoutEl.elementText("name");
    String title=layoutEl.elementText("title");
    String type=layoutEl.elementText("type");
    String typeSettings=layoutEl.elementText("type-settings");
    boolean hidden=GetterUtil.getBoolean(layoutEl.elementText("hidden"));
    String friendlyURL=layoutEl.elementText("friendly-url");
    themeId=layoutEl.elementText("theme-id");
    colorSchemeId=layoutEl.elementText("color-scheme-id");
    int priority=GetterUtil.getInteger(layoutEl.elementText("priority"));
    LayoutPK layoutPK=new LayoutPK(layoutId,ownerId);
    newLayoutPKs.add(layoutPK);
    Layout layout=LayoutUtil.fetchByPrimaryKey(layoutPK);
    if (layout == null) {
      layout=LayoutUtil.create(layoutPK);
    }
    layout.setCompanyId(user.getActualCompanyId());
    layout.setParentLayoutId(parentLayoutId);
    layout.setName(name);
    layout.setTitle(title);
    layout.setType(type);
    layout.setTypeSettings(typeSettings);
    layout.setHidden(hidden);
    layout.setFriendlyURL(friendlyURL);
    layout.setThemeId(themeId);
    layout.setColorSchemeId(colorSchemeId);
    layout.setPriority(priority);
    fixTypeSettings(layout);
    LayoutUtil.update(layout);
    String resourceName=Layout.class.getName();
    String resourcePrimKey=layout.getPrimaryKey().toString();
    Element permissionsEl=layoutEl.element("permissions");
    importGroupPermissions(layoutCache,companyId,groupId,resourceName,resourcePrimKey,permissionsEl,"community-actions",false);
    if (groupId != guestGroup.getGroupId()) {
      importGroupPermissions(layoutCache,companyId,guestGroup.getGroupId(),resourceName,resourcePrimKey,permissionsEl,"guest-actions",false);
    }
    importUserPermissions(layoutCache,companyId,groupId,resourceName,resourcePrimKey,permissionsEl,false);
    importInheritedPermissions(layoutCache,companyId,resourceName,resourcePrimKey,permissionsEl,"organization",false);
    importInheritedPermissions(layoutCache,companyId,resourceName,resourcePrimKey,permissionsEl,"location",false);
    importInheritedPermissions(layoutCache,companyId,resourceName,resourcePrimKey,permissionsEl,"user-group",false);
    Iterator itr2=permissionsEl.elements("portlet").iterator();
    while (itr2.hasNext()) {
      Element portletEl=(Element)itr2.next();
      String portletId=portletEl.attributeValue("portlet-id");
      resourceName=PortletImpl.getRootPortletId(portletId);
      resourcePrimKey=PortletPermission.getPrimaryKey(layout.getPlid(),portletId);
      Portlet portlet=PortletLocalServiceUtil.getPortletById(companyId,resourceName);
      if (portlet == null) {
        if (_log.isDebugEnabled()) {
          _log.debug("Do not import portlet permissions for " + portletId + " because the portlet does not exist");
        }
      }
 else {
        importGroupPermissions(layoutCache,companyId,groupId,resourceName,resourcePrimKey,portletEl,"community-actions",true);
        if (groupId != guestGroup.getGroupId()) {
          importGroupPermissions(layoutCache,companyId,guestGroup.getGroupId(),resourceName,resourcePrimKey,portletEl,"guest-actions",true);
        }
        importUserPermissions(layoutCache,companyId,groupId,resourceName,resourcePrimKey,portletEl,true);
        importInheritedPermissions(layoutCache,companyId,resourceName,resourcePrimKey,portletEl,"organization",true);
        importInheritedPermissions(layoutCache,companyId,resourceName,resourcePrimKey,portletEl,"location",true);
        importInheritedPermissions(layoutCache,companyId,resourceName,resourcePrimKey,portletEl,"user-group",true);
      }
    }
    importPortletPreferences(layoutSet,layoutEl);
    importPortletData(context,layout,layoutEl);
  }
  Element rolesEl=(Element)root.element("roles");
  String resourceName=Layout.class.getName();
  importGroupRoles(layoutCache,companyId,groupId,resourceName,"community",rolesEl);
  importUserRoles(layoutCache,companyId,groupId,resourceName,rolesEl);
  importInheritedRoles(layoutCache,companyId,groupId,resourceName,"organization",rolesEl);
  importInheritedRoles(layoutCache,companyId,groupId,resourceName,"location",rolesEl);
  importInheritedRoles(layoutCache,companyId,groupId,resourceName,"user-group",rolesEl);
  itr1=rolesEl.elements("portlet").iterator();
  while (itr1.hasNext()) {
    Element portletEl=(Element)itr1.next();
    String portletId=portletEl.attributeValue("portlet-id");
    resourceName=PortletImpl.getRootPortletId(portletId);
    Portlet portlet=PortletLocalServiceUtil.getPortletById(companyId,resourceName);
    if (portlet == null) {
      if (_log.isDebugEnabled()) {
        _log.debug("Do not import portlet roles for " + portletId + " because the portlet does not exist");
      }
    }
 else {
      importGroupRoles(layoutCache,companyId,groupId,resourceName,"community",portletEl);
      importUserRoles(layoutCache,companyId,groupId,resourceName,portletEl);
      importInheritedRoles(layoutCache,companyId,groupId,resourceName,"organization",portletEl);
      importInheritedRoles(layoutCache,companyId,groupId,resourceName,"location",portletEl);
      importInheritedRoles(layoutCache,companyId,groupId,resourceName,"user-group",portletEl);
    }
  }
  importPortletPreferences(layoutSet,root);
  deleteMissingLayouts(ownerId,newLayoutPKs);
  LayoutSetLocalServiceUtil.updatePageCount(ownerId);
  System.out.println("Ending import of layouts at " + stopWatch.getTime());
}
