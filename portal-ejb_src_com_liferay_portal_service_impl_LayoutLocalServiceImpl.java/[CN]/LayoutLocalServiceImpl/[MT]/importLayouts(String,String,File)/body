{
  LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(ownerId);
  Group guestGroup=GroupLocalServiceUtil.getGroup(layoutSet.getCompanyId(),Group.GUEST);
  Element root=null;
  try {
    ZipReader zipReader=new ZipReader(file);
    String xml=zipReader.getEntryAsString("layouts.xml");
    SAXReader reader=new SAXReader();
    Document doc=reader.read(new StringReader(xml));
    root=doc.getRootElement();
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
  Element header=(Element)root.element("header");
  int buildNumber=ReleaseInfo.getBuildNumber();
  int importBuildNumber=GetterUtil.getInteger(header.attributeValue("build-number"));
  if (buildNumber != importBuildNumber) {
    throw new LayoutImportException();
  }
  String themeId=header.attributeValue("theme-id");
  String colorSchemeId=header.attributeValue("color-scheme-id");
  LayoutSetLocalServiceUtil.updateLookAndFeel(ownerId,themeId,colorSchemeId);
  User user=UserUtil.findByPrimaryKey(userId);
  Iterator itr=root.elements("layout").iterator();
  List newLayoutPKs=new ArrayList();
  while (itr.hasNext()) {
    Element layoutEl=(Element)itr.next();
    String layoutId=layoutEl.attributeValue("layout-id");
    String parentLayoutId=layoutEl.elementText("parent-layout-id");
    String name=layoutEl.elementText("name");
    String type=layoutEl.elementText("type");
    String typeSettings=layoutEl.elementText("type-settings");
    boolean hidden=GetterUtil.getBoolean(layoutEl.elementText("hidden"));
    String friendlyURL=layoutEl.elementText("friendly-url");
    themeId=layoutEl.elementText("theme-id");
    colorSchemeId=layoutEl.elementText("color-scheme-id");
    int priority=GetterUtil.getInteger(layoutEl.elementText("priority"));
    LayoutPK layoutPK=new LayoutPK(layoutId,ownerId);
    newLayoutPKs.add(layoutPK);
    Layout layout=LayoutUtil.fetchByPrimaryKey(layoutPK);
    if (layout == null) {
      layout=LayoutUtil.create(layoutPK);
    }
    layout.setCompanyId(user.getActualCompanyId());
    layout.setParentLayoutId(parentLayoutId);
    layout.setName(name);
    layout.setType(type);
    layout.setTypeSettings(typeSettings);
    layout.setHidden(hidden);
    layout.setFriendlyURL(friendlyURL);
    layout.setThemeId(themeId);
    layout.setColorSchemeId(colorSchemeId);
    layout.setPriority(priority);
    LayoutUtil.update(layout);
    Element permissionsEl=layoutEl.element("permissions");
    importLayoutPermissions(layout,layout.getGroupId(),permissionsEl,"community-actions");
    if (!layout.getGroupId().equals(guestGroup.getGroupId())) {
      importLayoutPermissions(layout,guestGroup.getGroupId(),permissionsEl,"guest-actions");
    }
    List portlets=permissionsEl.elements("portlet");
    for (int i=0; i < portlets.size(); i++) {
      Element portletEl=(Element)portlets.get(i);
      String portletId=portletEl.attributeValue("portlet-id");
      importPortletPermissions(portletId,layout,layout.getGroupId(),portletEl,"community-actions");
      if (!layout.getGroupId().equals(guestGroup.getGroupId())) {
        importPortletPermissions(portletId,layout,guestGroup.getGroupId(),portletEl,"guest-actions");
      }
    }
  }
  deleteMissingLayouts(ownerId,newLayoutPKs);
  PortletPreferencesUtil.removeByOwnerId(ownerId);
  itr=root.elements("portlet-preferences").iterator();
  while (itr.hasNext()) {
    Element el=(Element)itr.next();
    String portletId=el.attributeValue("portlet-id");
    String layoutId=el.attributeValue("layout-id");
    String preferences=el.elementText("preferences");
    PortletPreferences prefs=PortletPreferencesUtil.create(new PortletPreferencesPK(portletId,layoutId,ownerId));
    prefs.setPreferences(preferences);
    PortletPreferencesUtil.update(prefs);
  }
  itr=root.elements("portlet-data").iterator();
  while (itr.hasNext()) {
    Element el=(Element)itr.next();
    String portletId=el.attributeValue("portlet-id");
    String data=el.elementText("data");
    Portlet portlet=PortletLocalServiceUtil.getPortletById(layoutSet.getCompanyId(),portletId);
    PortletDataHandler portletDataHandler=portlet.getPortletDataHandler();
    if (portletDataHandler != null) {
      try {
        portletDataHandler.importData(layoutSet.getCompanyId(),layoutSet.getGroupId(),data);
      }
 catch (      PortletDataException pde) {
        throw new PortalException(pde);
      }
    }
  }
  LayoutSetLocalServiceUtil.updatePageCount(ownerId);
}
