{
  boolean importPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.IMPORT_PERMISSIONS);
  boolean importPortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.IMPORT_PORTLET_DATA);
  boolean importPortletPreferences=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.IMPORT_PORTLET_PREFERENCES);
  boolean importTheme=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.IMPORT_THEME);
  if (_log.isDebugEnabled()) {
    _log.debug("Import permissions " + importPermissions);
    _log.debug("Import portlet data " + importPortletData);
    _log.debug("Import portlet preferences " + importPortletPreferences);
    _log.debug("Import theme " + importTheme);
  }
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  LayoutCache layoutCache=new LayoutCache();
  LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(ownerId);
  long companyId=layoutSet.getCompanyId();
  long groupId=layoutSet.getGroupId();
  ZipReader zipReader=new ZipReader(is);
  PortletDataContext context=new PortletDataContext(companyId,groupId,parameterMap,CollectionFactory.getHashSet(),zipReader);
  Group guestGroup=GroupLocalServiceUtil.getGroup(companyId,GroupImpl.GUEST);
  Element root=null;
  byte[] themeZip=null;
  try {
    String xml=zipReader.getEntryAsString("layouts.xml");
    SAXReader reader=new SAXReader();
    Document doc=reader.read(new StringReader(xml));
    root=doc.getRootElement();
    if (importTheme) {
      themeZip=zipReader.getEntryAsByteArray("theme.zip");
    }
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
  Element header=(Element)root.element("header");
  int buildNumber=ReleaseInfo.getBuildNumber();
  int importBuildNumber=GetterUtil.getInteger(header.attributeValue("build-number"));
  if (buildNumber != importBuildNumber) {
    throw new LayoutImportException("LAR build number " + importBuildNumber + " does not match "+ "portal build number "+ buildNumber);
  }
  String themeId=header.attributeValue("theme-id");
  String colorSchemeId=header.attributeValue("color-scheme-id");
  boolean useThemeZip=false;
  if (themeZip != null) {
    try {
      String importThemeId=importTheme(layoutSet,themeZip);
      if (importThemeId != null) {
        themeId=importThemeId;
        colorSchemeId=ColorSchemeImpl.getDefaultRegularColorSchemeId();
        useThemeZip=true;
      }
      if (_log.isDebugEnabled()) {
        _log.debug("Importing theme takes " + stopWatch.getTime() + " ms");
      }
    }
 catch (    Exception e) {
      throw new SystemException(e);
    }
  }
  boolean wapTheme=false;
  LayoutSetLocalServiceUtil.updateLookAndFeel(ownerId,themeId,colorSchemeId,StringPool.BLANK,wapTheme);
  User user=UserUtil.findByPrimaryKey(userId);
  List newLayoutPKs=new ArrayList();
  Iterator itr=root.elements("layout").iterator();
  if (_log.isDebugEnabled()) {
    if (itr.hasNext()) {
      _log.debug("Importing layouts");
    }
  }
  while (itr.hasNext()) {
    Element layoutEl=(Element)itr.next();
    String layoutId=layoutEl.attributeValue("layout-id");
    String parentLayoutId=layoutEl.elementText("parent-layout-id");
    if (_log.isDebugEnabled()) {
      _log.debug("Importing layout with layout id " + layoutId + " and parent layout id "+ parentLayoutId);
    }
    String name=layoutEl.elementText("name");
    String title=layoutEl.elementText("title");
    String type=layoutEl.elementText("type");
    String typeSettings=layoutEl.elementText("type-settings");
    boolean hidden=GetterUtil.getBoolean(layoutEl.elementText("hidden"));
    String friendlyURL=layoutEl.elementText("friendly-url");
    if (useThemeZip) {
      themeId=StringPool.BLANK;
      colorSchemeId=StringPool.BLANK;
    }
 else {
      themeId=layoutEl.elementText("theme-id");
      colorSchemeId=layoutEl.elementText("color-scheme-id");
    }
    int priority=GetterUtil.getInteger(layoutEl.elementText("priority"));
    LayoutPK layoutPK=new LayoutPK(layoutId,ownerId);
    newLayoutPKs.add(layoutPK);
    Layout layout=LayoutUtil.fetchByPrimaryKey(layoutPK);
    if (_log.isDebugEnabled()) {
      if (layout == null) {
        _log.debug("Layout with primary key " + layoutPK + " does not exist");
      }
 else {
        _log.debug("Layout with primary key " + layoutPK + " exists");
      }
    }
    if (layout == null) {
      layout=LayoutUtil.create(layoutPK);
    }
    layout.setCompanyId(user.getCompanyId());
    layout.setParentLayoutId(parentLayoutId);
    layout.setName(name);
    layout.setTitle(title);
    layout.setType(type);
    layout.setTypeSettings(typeSettings);
    layout.setHidden(hidden);
    layout.setFriendlyURL(friendlyURL);
    layout.setThemeId(themeId);
    layout.setColorSchemeId(colorSchemeId);
    layout.setPriority(priority);
    fixTypeSettings(layout);
    LayoutUtil.update(layout);
    Element permissionsEl=layoutEl.element("permissions");
    if (importPermissions) {
      importLayoutPermissions(layoutCache,companyId,groupId,guestGroup,layout,permissionsEl);
    }
    if (importPortletPreferences) {
      importPortletPreferences(layoutSet,layoutEl);
    }
    if (importPortletData) {
      importPortletData(context,layout,layoutEl);
    }
    if (importPermissions) {
      importPortletPermissions(layoutCache,companyId,groupId,guestGroup,layout,permissionsEl);
    }
  }
  if (importPortletPreferences) {
    importPortletPreferences(layoutSet,root);
  }
  Element rolesEl=(Element)root.element("roles");
  if (importPermissions) {
    importLayoutRoles(layoutCache,companyId,groupId,rolesEl);
  }
  if (importPermissions) {
    importPortletRoles(layoutCache,companyId,groupId,rolesEl);
  }
  deleteMissingLayouts(ownerId,newLayoutPKs);
  LayoutSetLocalServiceUtil.updatePageCount(ownerId);
  if (_log.isInfoEnabled()) {
    _log.info("Importing layouts takes " + stopWatch.getTime() + " ms");
  }
}
