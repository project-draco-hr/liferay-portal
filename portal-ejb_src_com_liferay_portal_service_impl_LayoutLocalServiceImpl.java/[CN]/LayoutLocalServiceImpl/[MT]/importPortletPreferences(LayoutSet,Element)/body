{
  long defaultUserId=UserLocalServiceUtil.getDefaultUserId(layoutSet.getCompanyId());
  Iterator itr=parentEl.elements("portlet-preferences").iterator();
  while (itr.hasNext()) {
    Element el=(Element)itr.next();
    String portletId=el.attributeValue("portlet-id");
    String layoutId=el.attributeValue("layout-id");
    String ownerId=el.attributeValue("owner-id");
    String preferences=el.elementText("preferences");
    if (ownerId.startsWith(PortletKeys.PREFS_OWNER_ID_GROUP)) {
      ownerId=PortletKeys.PREFS_OWNER_ID_GROUP + StringPool.PERIOD + layoutSet.getGroupId();
    }
 else     if (ownerId.indexOf(PortletKeys.PREFS_OWNER_ID_USER) != -1) {
      ownerId=layoutSet.getOwnerId() + StringPool.PERIOD + PortletKeys.PREFS_OWNER_ID_USER+ StringPool.PERIOD+ defaultUserId;
    }
 else     if (ownerId.startsWith(LayoutImpl.PUBLIC)) {
      ownerId=LayoutImpl.PUBLIC + layoutSet.getGroupId();
    }
 else     if (ownerId.startsWith(LayoutImpl.PRIVATE)) {
      ownerId=LayoutImpl.PRIVATE + layoutSet.getGroupId();
    }
    try {
      PortletPreferencesLocalServiceUtil.deletePortletPreferences(ownerId,layoutId,portletId);
    }
 catch (    NoSuchPortletPreferencesException nsppe) {
    }
    long portletPreferencesId=CounterLocalServiceUtil.increment();
    PortletPreferences portletPreferences=PortletPreferencesUtil.create(portletPreferencesId);
    portletPreferences.setOwnerId(ownerId);
    portletPreferences.setLayoutId(layoutId);
    portletPreferences.setPortletId(portletId);
    portletPreferences.setPreferences(preferences);
    PortletPreferencesUtil.update(portletPreferences);
  }
}
