{
  ZipWriter zipWriter=new ZipWriter();
  int buildNumber=ReleaseInfo.getBuildNumber();
  LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(ownerId);
  Group guestGroup=GroupLocalServiceUtil.getGroup(layoutSet.getCompanyId(),Group.GUEST);
  Document doc=DocumentHelper.createDocument();
  Element root=doc.addElement("root");
  Element header=root.addElement("header");
  header.addAttribute("build-number",Integer.toString(buildNumber));
  header.addAttribute("owner-id",ownerId);
  header.addAttribute("export-date",Time.getRFC822());
  header.addAttribute("theme-id",layoutSet.getThemeId());
  header.addAttribute("color-scheme-id",layoutSet.getColorSchemeId());
  Iterator itr=getLayouts(ownerId).iterator();
  while (itr.hasNext()) {
    Layout layout=(Layout)itr.next();
    Element layoutEl=root.addElement("layout");
    layoutEl.addAttribute("layout-id",layout.getLayoutId());
    layoutEl.addElement("parent-layout-id").addText(layout.getParentLayoutId());
    layoutEl.addElement("name").addCDATA(layout.getName());
    layoutEl.addElement("type").addText(layout.getType());
    layoutEl.addElement("type-settings").addCDATA(layout.getTypeSettings());
    layoutEl.addElement("hidden").addText(Boolean.toString(layout.getHidden()));
    layoutEl.addElement("friendly-url").addText(layout.getFriendlyURL());
    layoutEl.addElement("theme-id").addText(layout.getThemeId());
    layoutEl.addElement("color-scheme-id").addText(layout.getColorSchemeId());
    layoutEl.addElement("priority").addText(Integer.toString(layout.getPriority()));
    Element permissionsEl=layoutEl.addElement("permissions");
    exportLayoutPermissions(layout,layout.getGroupId(),permissionsEl,"community-actions");
    if (!layout.getGroupId().equals(guestGroup.getGroupId())) {
      exportLayoutPermissions(layout,guestGroup.getGroupId(),permissionsEl,"guest-actions");
    }
    if (layout.getType().equals(Layout.TYPE_PORTLET)) {
      LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
      List portletIds=layoutTypePortlet.getPortletIds();
      for (int i=0; i < portletIds.size(); i++) {
        String portletId=(String)portletIds.get(i);
        Element portletEl=permissionsEl.addElement("portlet");
        portletEl.addAttribute("portlet-id",portletId);
        exportPortletPermissions(portletId,layout,layout.getGroupId(),portletEl,"community-actions");
        if (!layout.getGroupId().equals(guestGroup.getGroupId())) {
          exportPortletPermissions(portletId,layout,guestGroup.getGroupId(),portletEl,"guest-actions");
        }
      }
    }
  }
  itr=PortletPreferencesLocalServiceUtil.getPortletPreferences(ownerId).iterator();
  while (itr.hasNext()) {
    PortletPreferences prefs=(PortletPreferences)itr.next();
    Element el=root.addElement("portlet-preferences");
    el.addAttribute("portlet-id",prefs.getPortletId());
    el.addAttribute("layout-id",prefs.getLayoutId());
    el.addElement("preferences").addCDATA(prefs.getPreferences());
  }
  String fileName="layouts.xml";
  try {
    zipWriter.addEntry(fileName,XMLFormatter.toString(doc));
    return zipWriter.finish();
  }
 catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
}
