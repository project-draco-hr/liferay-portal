{
  LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(ownerId);
  PortletDataContext context=new PortletDataContext(layoutSet.getCompanyId(),layoutSet.getGroupId(),CollectionFactory.getHashSet());
  Group guestGroup=GroupLocalServiceUtil.getGroup(layoutSet.getCompanyId(),GroupImpl.GUEST);
  String guestPrefsOwnerId=null;
  if (!layoutSet.isPrivateLayout()) {
    guestPrefsOwnerId=ownerId + StringPool.PERIOD + PortletKeys.PREFS_OWNER_ID_USER+ StringPool.PERIOD+ UserImpl.getDefaultUserId(layoutSet.getCompanyId());
  }
  Document doc=DocumentHelper.createDocument();
  Element root=doc.addElement("root");
  Element header=root.addElement("header");
  header.addAttribute("build-number",String.valueOf(ReleaseInfo.getBuildNumber()));
  header.addAttribute("owner-id",ownerId);
  header.addAttribute("export-date",Time.getRFC822());
  header.addAttribute("theme-id",layoutSet.getThemeId());
  header.addAttribute("color-scheme-id",layoutSet.getColorSchemeId());
  Iterator itr1=getLayouts(ownerId).iterator();
  while (itr1.hasNext()) {
    Layout layout=(Layout)itr1.next();
    Element layoutEl=root.addElement("layout");
    layoutEl.addAttribute("layout-id",layout.getLayoutId());
    layoutEl.addElement("parent-layout-id").addText(layout.getParentLayoutId());
    layoutEl.addElement("name").addCDATA(layout.getName());
    layoutEl.addElement("title").addCDATA(layout.getTitle());
    layoutEl.addElement("type").addText(layout.getType());
    layoutEl.addElement("type-settings").addCDATA(layout.getTypeSettings());
    layoutEl.addElement("hidden").addText(String.valueOf(layout.getHidden()));
    layoutEl.addElement("friendly-url").addText(layout.getFriendlyURL());
    layoutEl.addElement("theme-id").addText(layout.getThemeId());
    layoutEl.addElement("color-scheme-id").addText(layout.getColorSchemeId());
    layoutEl.addElement("priority").addText(String.valueOf(layout.getPriority()));
    Element permissionsEl=layoutEl.addElement("permissions");
    exportLayoutPermissions(layout,layout.getGroupId(),permissionsEl,"community-actions");
    if (layout.getGroupId() != guestGroup.getGroupId()) {
      exportLayoutPermissions(layout,guestGroup.getGroupId(),permissionsEl,"guest-actions");
    }
    if (layout.getType().equals(LayoutImpl.TYPE_PORTLET)) {
      LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
      Iterator itr2=layoutTypePortlet.getPortletIds().iterator();
      while (itr2.hasNext()) {
        String portletId=(String)itr2.next();
        if (layoutTypePortlet.hasPortletId(portletId)) {
          Element portletEl=permissionsEl.addElement("portlet");
          portletEl.addAttribute("portlet-id",portletId);
          exportPortletPermissions(portletId,layout,layout.getGroupId(),portletEl,"community-actions");
          if (layout.getGroupId() != guestGroup.getGroupId()) {
            exportPortletPermissions(portletId,layout,guestGroup.getGroupId(),portletEl,"guest-actions");
          }
        }
      }
      exportPortletPreferences(layout.getLayoutId(),ownerId,layoutTypePortlet,layoutEl);
      if (guestPrefsOwnerId != null) {
        exportPortletPreferences(layout.getLayoutId(),guestPrefsOwnerId,layoutTypePortlet,layoutEl);
      }
      exportPortletData(context,layout,layoutTypePortlet,layoutEl);
    }
  }
  String groupPrefsOwnerId=PortletKeys.PREFS_OWNER_ID_GROUP + StringPool.PERIOD + layoutSet.getGroupId();
  exportPortletPreferences(PortletKeys.PREFS_LAYOUT_ID_SHARED,groupPrefsOwnerId,root);
  try {
    ZipWriter zipWriter=new ZipWriter();
    zipWriter.addEntry("layouts.xml",XMLFormatter.toString(doc));
    return zipWriter.finish();
  }
 catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
}
