{
  Connection con=null;
  Database db=null;
  String type=null;
  try {
    con=dataSource.getConnection();
    DatabaseMetaData metaData=con.getMetaData();
    String dbName=metaData.getDatabaseProductName();
    int dbMajorVersion=metaData.getDatabaseMajorVersion();
    if (_log.isInfoEnabled()) {
      _log.info("Determining DB type for " + dbName + " "+ dbMajorVersion);
    }
    if (dbName.startsWith("DB2/")) {
      db=Database.DB2;
      type=DBUtil.TYPE_DB2;
    }
 else     if ("Apache Derby".equals(dbName)) {
      db=Database.DERBY;
      type=DBUtil.TYPE_DERBY;
    }
 else     if ("HSQL Database Engine".equals(dbName)) {
      if (_log.isWarnEnabled()) {
        StringBuilder sb=new StringBuilder();
        sb.append("Liferay is configured to use Hypersonic as ");
        sb.append("its database. Do NOT use Hypersonic in ");
        sb.append("production. Hypersonic is an embedded ");
        sb.append("database useful for development and demo'ing ");
        sb.append("purposes. The database settings can be ");
        sb.append("changed in portal.properties.");
        _log.warn(sb.toString());
      }
      db=Database.HSQL;
      type=DBUtil.TYPE_HYPERSONIC;
    }
 else     if ("Informix Dynamic Server".equals(dbName)) {
      db=Database.INFORMIX;
      type=DBUtil.TYPE_INFORMIX;
    }
 else     if ("MySQL".equals(dbName)) {
      db=Database.MYSQL;
      type=DBUtil.TYPE_MYSQL;
    }
 else     if ("Oracle".equals(dbName)) {
      db=Database.ORACLE;
      type=DBUtil.TYPE_ORACLE;
    }
 else     if ("PostgreSQL".equals(dbName)) {
      db=Database.POSTGRESQL;
      type=DBUtil.TYPE_POSTGRESQL;
    }
 else     if (dbName.startsWith("Microsoft SQL Server")) {
      db=Database.SQL_SERVER;
      type=DBUtil.TYPE_SQLSERVER;
    }
 else     if ("Sybase SQL Server".equals(dbName)) {
      db=Database.SYBASE;
      type=DBUtil.TYPE_SYBASE;
    }
    if (dbName.equals("ASE") && (dbMajorVersion == 15)) {
      db=Database.SYBASE;
      type=DBUtil.TYPE_SYBASE;
    }
  }
 catch (  Exception e) {
    String msg=GetterUtil.getString(e.getMessage());
    if (msg.indexOf("explicitly set for database: DB2") != -1) {
      db=Database.DB2;
      type=DBUtil.TYPE_DB2;
    }
 else {
      _log.error(e,e);
    }
  }
 finally {
    DataAccess.cleanUp(con);
  }
  if (db == null) {
    throw new RuntimeException("Unable to detect the database");
  }
  if (_log.isInfoEnabled()) {
    _log.info("Detected database " + db.toString());
  }
  if (Validator.isNotNull(PropsValues.JPA_DATABASE_TYPE)) {
    DBUtil.setInstance(PropsValues.JPA_DATABASE_TYPE);
  }
 else {
    DBUtil.setInstance(type);
  }
  return db;
}
