{
  final Set<Path> excludedDirPaths=getDirPaths("build.exclude.dirs",rootDirPath);
  final boolean modulesOnlyBuild=Boolean.getBoolean("modules.only.build");
  final boolean portalBuild=Boolean.getBoolean("portal.build");
  final boolean portalPreBuild=Boolean.getBoolean("portal.pre.build");
  Files.walkFileTree(rootDirPath,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dirPath,    BasicFileAttributes basicFileAttributes){
      if (dirPath.equals(rootDirPath)) {
        return FileVisitResult.CONTINUE;
      }
      if (excludedDirPaths.contains(dirPath)) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      boolean moduleProjectDir=false;
      boolean otherProjectDir=false;
      if (Files.exists(dirPath.resolve("bnd.bnd"))) {
        moduleProjectDir=true;
      }
 else {
        if (Files.exists(dirPath.resolve("build.xml")) || Files.exists(dirPath.resolve("gulpfile.js"))) {
          otherProjectDir=true;
        }
      }
      if (!moduleProjectDir && !otherProjectDir) {
        return FileVisitResult.CONTINUE;
      }
      if (portalBuild && Files.notExists(dirPath.resolve(".lfrbuild-portal"))) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      if (portalPreBuild && Files.notExists(dirPath.resolve(".lfrbuild-portal-pre"))) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      if (moduleProjectDir || !modulesOnlyBuild) {
        _includeProject(settings,dirPath,projectPathRootDirPath,projectPathPrefix);
      }
      return FileVisitResult.SKIP_SUBTREE;
    }
  }
);
}
