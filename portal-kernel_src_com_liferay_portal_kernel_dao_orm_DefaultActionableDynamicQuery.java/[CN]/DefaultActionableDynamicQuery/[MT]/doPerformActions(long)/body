{
  final DynamicQuery dynamicQuery=DynamicQueryFactoryUtil.forClass(_modelClass,_classLoader);
  Property property=PropertyFactoryUtil.forName(_primaryKeyPropertyName);
  dynamicQuery.add(property.gt(previousPrimaryKey));
  dynamicQuery.setLimit(0,_interval);
  addDefaultCriteria(dynamicQuery);
  addCriteria(dynamicQuery);
  addOrderCriteria(dynamicQuery);
  Callable<Long> callable=new Callable<Long>(){
    @Override public Long call() throws Exception {
      List<Object> objects=(List<Object>)executeDynamicQuery(_dynamicQueryMethod,dynamicQuery);
      if (objects.isEmpty()) {
        return -1L;
      }
      if (_parallel) {
        List<Future<Void>> futures=new ArrayList<>(objects.size());
        for (        final Object object : objects) {
          futures.add(_threadPoolExecutor.submit(new Callable<Void>(){
            @Override public Void call() throws PortalException {
              performAction(object);
              return null;
            }
          }
));
        }
        for (        Future<Void> future : futures) {
          future.get();
        }
      }
 else {
        for (        Object object : objects) {
          performAction(object);
        }
      }
      if (objects.size() < _interval) {
        return -1L;
      }
      BaseModel<?> baseModel=(BaseModel<?>)objects.get(objects.size() - 1);
      return (Long)baseModel.getPrimaryKeyObj();
    }
  }
;
  TransactionConfig transactionConfig=getTransactionConfig();
  try {
    if (transactionConfig == null) {
      return callable.call();
    }
 else {
      return TransactionInvokerUtil.invoke(transactionConfig,callable);
    }
  }
 catch (  Throwable t) {
    if (t instanceof PortalException) {
      throw (PortalException)t;
    }
    if (t instanceof SystemException) {
      throw (SystemException)t;
    }
    throw new SystemException(t);
  }
}
