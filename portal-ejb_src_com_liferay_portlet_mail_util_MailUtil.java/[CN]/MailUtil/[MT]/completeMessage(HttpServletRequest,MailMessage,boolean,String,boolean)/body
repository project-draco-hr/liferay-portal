{
  HttpSession ses=req.getSession();
  try {
    if (send && Validator.isNull(mailMessage.getTo()) && Validator.isNull(mailMessage.getCc())&& Validator.isNull(mailMessage.getBcc())) {
      if (_log.isErrorEnabled()) {
        _log.error("A message with no recipients cannot be sent");
      }
      throw new RecipientException();
    }
    Message message=new MimeMessage(MailEngine.getSession());
    message.setFrom(mailMessage.getFrom());
    if (!Validator.isNull(mailMessage.getTo())) {
      message.setRecipients(Message.RecipientType.TO,_resolveAddresses(req,mailMessage.getTo()));
    }
    if (!Validator.isNull(mailMessage.getCc())) {
      message.setRecipients(Message.RecipientType.CC,_resolveAddresses(req,mailMessage.getCc()));
    }
    if (!Validator.isNull(mailMessage.getBcc())) {
      message.setRecipients(Message.RecipientType.BCC,_resolveAddresses(req,mailMessage.getBcc()));
    }
    message.setSubject(mailMessage.getSubject());
    _replaceEmbeddedImages(req,mailMessage,_getAttachmentURL(req));
    Multipart multipart=new MimeMultipart();
    BodyPart bodyPart=new MimeBodyPart();
    bodyPart.setContent(mailMessage.getHtmlBody(),Constants.TEXT_HTML);
    multipart.addBodyPart(bodyPart);
    List attachments=mailMessage.getAttachments();
    Iterator itr=attachments.iterator();
    while (itr.hasNext()) {
      MailAttachment mailAttachment=(MailAttachment)itr.next();
      DataSource dataSource=new ByteArrayDataSource(mailAttachment.getContent(),mailAttachment.getContentType());
      BodyPart attachment=new MimeBodyPart();
      attachment.setFileName(mailAttachment.getFilename());
      attachment.setDataHandler(new DataHandler(dataSource));
      if (Validator.isNotNull(mailAttachment.getContentId())) {
        attachment.addHeader(Constants.CONTENT_ID,mailAttachment.getContentId());
      }
      multipart.addBodyPart(attachment);
    }
    List remoteAttachments=mailMessage.getRemoteAttachments();
    itr=remoteAttachments.iterator();
    while (itr.hasNext()) {
      RemoteMailAttachment remoteMailAttachment=(RemoteMailAttachment)itr.next();
      Object[] parts=getAttachment(req,remoteMailAttachment.getContentPath());
      DataSource dataSource=new ByteArrayDataSource((byte[])parts[0],(String)parts[1]);
      BodyPart attachment=new MimeBodyPart();
      attachment.setFileName(remoteMailAttachment.getFilename());
      attachment.setDataHandler(new DataHandler(dataSource));
      multipart.addBodyPart(attachment);
    }
    message.setContent(multipart);
    message.setSentDate(new Date());
    if (send) {
      Transport.send(message);
    }
    try {
      MailSessionLock.lock(req);
      String lastFolderName=getFolderName(req);
      IMAPFolder folder=null;
      if (send) {
        folder=_getFolder(req,MAIL_SENT_NAME);
        message.setFlag(Flag.SEEN,true);
      }
 else {
        folder=_getFolder(req,MAIL_DRAFTS_NAME);
      }
      folder.appendMessages(new Message[]{message});
      long origId=GetterUtil.getLong(originalId);
      if (wasDraft) {
        folder=_getFolder(req,MAIL_DRAFTS_NAME);
        Message msg=folder.getMessageByUID(origId);
        folder.setFlags(new Message[]{msg},new Flags(Flags.Flag.DELETED),true);
        folder.expunge();
      }
 else       if (origId > 0L) {
        folder=_getFolder(req,lastFolderName);
        Message msg=folder.getMessageByUID(origId);
        folder.setFlags(new Message[]{msg},new Flags(Flags.Flag.ANSWERED),true);
      }
      _closeFolder(ses);
      setFolder(req,lastFolderName);
    }
  finally {
      MailSessionLock.unlock(req);
    }
  }
 catch (  MessagingException me) {
    throw new ContentException(me);
  }
catch (  NamingException ne) {
    throw new ContentException(ne);
  }
}
