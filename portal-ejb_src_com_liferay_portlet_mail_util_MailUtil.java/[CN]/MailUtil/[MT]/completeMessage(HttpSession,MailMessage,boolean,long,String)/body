{
  try {
    if (send && Validator.isNull(mm.getTo()) && Validator.isNull(mm.getCc())&& Validator.isNull(mm.getBcc())) {
      _log.error("A message with no recipients cannot be sent");
      throw new RecipientException();
    }
    String fromAddress=((InternetAddress)mm.getFrom()).getAddress();
    String fromName=((InternetAddress)mm.getFrom()).getPersonal();
    Message message=new MimeMessage(_getSession());
    message.setFrom(new InternetAddress(fromAddress,fromName));
    if (!Validator.isNull(mm.getTo())) {
      message.setRecipients(Message.RecipientType.TO,mm.getTo());
    }
    if (!Validator.isNull(mm.getCc())) {
      message.setRecipients(Message.RecipientType.CC,mm.getCc());
    }
    if (!Validator.isNull(mm.getBcc())) {
      message.setRecipients(Message.RecipientType.BCC,mm.getBcc());
    }
    message.setSubject(mm.getSubject());
    _replaceEmbeddedImages(ses,mm,url);
    Multipart multipart=new MimeMultipart();
    BodyPart bodyPart=new MimeBodyPart();
    bodyPart.setContent(mm.getHtmlBody(),Constants.TEXT_HTML);
    multipart.addBodyPart(bodyPart);
    List attachments=mm.getAttachments();
    Iterator itr=attachments.iterator();
    while (itr.hasNext()) {
      MailAttachment ma=(MailAttachment)itr.next();
      DataSource ds=new ByteArrayDataSource(ma.getContent(),ma.getContentType());
      BodyPart attachment=new MimeBodyPart();
      attachment.setDataHandler(new DataHandler(ds));
      attachment.setFileName(ma.getFilename());
      if (Validator.isNotNull(ma.getContentID())) {
        attachment.addHeader(Constants.CONTENT_ID,ma.getContentID());
      }
      multipart.addBodyPart(attachment);
    }
    List remoteAttachments=mm.getRemoteAttachments();
    itr=remoteAttachments.iterator();
    while (itr.hasNext()) {
      RemoteMailAttachment rma=(RemoteMailAttachment)itr.next();
      Object[] parts=getAttachment(ses,rma.getContentPath());
      DataSource ds=new ByteArrayDataSource((byte[])parts[0],(String)parts[1]);
      BodyPart attachment=new MimeBodyPart();
      attachment.setDataHandler(new DataHandler(ds));
      attachment.setFileName(rma.getFilename());
      multipart.addBodyPart(attachment);
    }
    message.setContent(multipart);
    message.setSentDate(new Date());
    if (send) {
      Transport.send(message);
      setCurrentFolder(ses,MAIL_SENT_NAME);
    }
 else {
      setCurrentFolder(ses,MAIL_DRAFTS_NAME);
    }
    IMAPFolder folder=_getCurrentFolder(ses);
    folder.appendMessages(new Message[]{message});
    if (draftId > 0L) {
      setCurrentFolder(ses,MAIL_DRAFTS_NAME);
      folder=_getCurrentFolder(ses);
      Message msg=folder.getMessageByUID(draftId);
      folder.setFlags(new Message[]{msg},new Flags(Flags.Flag.DELETED),true);
      folder.expunge();
    }
  }
 catch (  Exception e) {
    _log.error("Error in building and sending email object");
    throw new ContentException(e);
  }
}
