{
  try {
    Set envelopes=new TreeSet(comparator);
    IMAPFolder folder=getFolder(ses);
    Message[] messages=folder.getMessages();
    FetchProfile fetchProfile=new FetchProfile();
    fetchProfile.add(FetchProfile.Item.ENVELOPE);
    fetchProfile.add(FetchProfile.Item.FLAGS);
    folder.fetch(messages,fetchProfile);
    for (int i=messages.length - 1; i >= 0; i--) {
      Message message=messages[i];
      if (message.isExpunged()) {
        continue;
      }
      MailEnvelope mailEnvelope=new MailEnvelope();
      mailEnvelope.setMessageId(folder.getUID(message));
      if (MAIL_SENT_NAME.equals(folder.getName()) || MAIL_DRAFTS_NAME.equals(folder.getName())) {
        Address[] recipients=message.getAllRecipients();
        StringBuffer sb=new StringBuffer();
        if (!Validator.isNull(recipients)) {
          for (int j=0; j < recipients.length; j++) {
            InternetAddress address=(InternetAddress)recipients[j];
            String recipient=GetterUtil.getString(address.getPersonal(),address.getAddress());
            sb.append(recipient);
            if (j < (recipients.length - 1)) {
              sb.append(", ");
            }
          }
        }
        if (sb.length() > 0) {
          mailEnvelope.setRecipient(sb.toString());
        }
      }
 else {
        Address[] from=message.getFrom();
        if (from.length > 0) {
          InternetAddress address=(InternetAddress)from[0];
          String recipient=GetterUtil.getString(address.getPersonal(),address.getAddress());
          mailEnvelope.setRecipient(recipient);
        }
      }
      mailEnvelope.setSubject(message.getSubject());
      mailEnvelope.setDate(message.getSentDate());
      mailEnvelope.setRecent(message.isSet(Flag.RECENT));
      mailEnvelope.setFlagged(message.isSet(Flag.FLAGGED));
      mailEnvelope.setAnswered(message.isSet(Flag.ANSWERED));
      envelopes.add(mailEnvelope);
    }
    return envelopes;
  }
 catch (  MessagingException me) {
    throw new FolderException(me);
  }
}
