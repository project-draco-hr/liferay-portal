{
  ConcurrentLRUCache<String,String> concurrentLRUCache=new ConcurrentLRUCache<String,String>(2);
  assertNull(concurrentLRUCache.get(null));
  assertEquals(0,concurrentLRUCache.evictCount());
  assertEquals(0,concurrentLRUCache.hitCount());
  assertEquals(1,concurrentLRUCache.missCount());
  assertEquals(0,concurrentLRUCache.putCount());
  assertEquals(0,concurrentLRUCache.size());
  assertNull(concurrentLRUCache.get("testKey"));
  assertEquals(0,concurrentLRUCache.evictCount());
  assertEquals(0,concurrentLRUCache.hitCount());
  assertEquals(2,concurrentLRUCache.missCount());
  assertEquals(0,concurrentLRUCache.putCount());
  assertEquals(0,concurrentLRUCache.size());
  concurrentLRUCache.put("testKey1","testValue1");
  concurrentLRUCache.put("testKey2","testValue2");
  assertEquals(0,concurrentLRUCache.evictCount());
  assertEquals(0,concurrentLRUCache.hitCount());
  assertEquals(2,concurrentLRUCache.missCount());
  assertEquals(2,concurrentLRUCache.putCount());
  assertEquals(2,concurrentLRUCache.size());
  assertEquals("testValue1",concurrentLRUCache.get("testKey1"));
  assertEquals(0,concurrentLRUCache.evictCount());
  assertEquals(1,concurrentLRUCache.hitCount());
  assertEquals(2,concurrentLRUCache.missCount());
  assertEquals(2,concurrentLRUCache.putCount());
  assertEquals(2,concurrentLRUCache.size());
  concurrentLRUCache.put("testKey3","testValue3");
  assertEquals(1,concurrentLRUCache.evictCount());
  assertEquals(1,concurrentLRUCache.hitCount());
  assertEquals(2,concurrentLRUCache.missCount());
  assertEquals(3,concurrentLRUCache.putCount());
  assertEquals(2,concurrentLRUCache.size());
  assertEquals("testValue1",concurrentLRUCache.get("testKey1"));
  assertNull(concurrentLRUCache.get("testKey2"));
  assertEquals("testValue3",concurrentLRUCache.get("testKey3"));
}
