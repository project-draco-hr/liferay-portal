{
  try {
    ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
    long groupId=ParamUtil.getLong(actionRequest,"groupId");
    boolean privateLayout=ParamUtil.getBoolean(actionRequest,"privateLayout");
    long[] layoutIds=ParamUtil.getLongValues(actionRequest,"layoutIds");
    String fileName=ParamUtil.getString(actionRequest,"exportFileName");
    String range=ParamUtil.getString(actionRequest,"range");
    Date startDate=null;
    Date endDate=null;
    if (range.equals("dateRange")) {
      int startDateMonth=ParamUtil.getInteger(actionRequest,"startDateMonth");
      int startDateDay=ParamUtil.getInteger(actionRequest,"startDateDay");
      int startDateYear=ParamUtil.getInteger(actionRequest,"startDateYear");
      int startDateHour=ParamUtil.getInteger(actionRequest,"startDateHour");
      int startDateMinute=ParamUtil.getInteger(actionRequest,"startDateMinute");
      int startDateAmPm=ParamUtil.getInteger(actionRequest,"startDateAmPm");
      if (startDateAmPm == Calendar.PM) {
        startDateHour+=12;
      }
      startDate=PortalUtil.getDate(startDateMonth,startDateDay,startDateYear,startDateHour,startDateMinute,themeDisplay.getTimeZone(),new PortalException());
      int endDateMonth=ParamUtil.getInteger(actionRequest,"endDateMonth");
      int endDateDay=ParamUtil.getInteger(actionRequest,"endDateDay");
      int endDateYear=ParamUtil.getInteger(actionRequest,"endDateYear");
      int endDateHour=ParamUtil.getInteger(actionRequest,"endDateHour");
      int endDateMinute=ParamUtil.getInteger(actionRequest,"endDateMinute");
      int endDateAmPm=ParamUtil.getInteger(actionRequest,"endDateAmPm");
      if (endDateAmPm == Calendar.PM) {
        endDateHour+=12;
      }
      endDate=PortalUtil.getDate(endDateMonth,endDateDay,endDateYear,endDateHour,endDateMinute,themeDisplay.getTimeZone(),new PortalException());
    }
 else     if (range.equals("fromLastPublishDate")) {
      LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(groupId,privateLayout);
      UnicodeProperties settingsProperties=layoutSet.getSettingsProperties();
      long lastPublishDate=GetterUtil.getLong(settingsProperties.getProperty("last-publish-date"));
      if (lastPublishDate > 0) {
        Calendar cal=Calendar.getInstance(themeDisplay.getTimeZone(),themeDisplay.getLocale());
        endDate=cal.getTime();
        cal.setTimeInMillis(lastPublishDate);
        startDate=cal.getTime();
      }
    }
 else     if (range.equals("last")) {
      int rangeLast=ParamUtil.getInteger(actionRequest,"last");
      Date now=new Date();
      startDate=new Date(now.getTime() - (rangeLast * Time.HOUR));
      endDate=now;
    }
    File file=LayoutServiceUtil.exportLayoutsAsFile(groupId,privateLayout,layoutIds,actionRequest.getParameterMap(),startDate,endDate);
    HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
    HttpServletResponse response=PortalUtil.getHttpServletResponse(actionResponse);
    ServletResponseUtil.sendFile(request,response,fileName,new FileInputStream(file),ContentTypes.APPLICATION_ZIP);
    setForward(actionRequest,ActionConstants.COMMON_NULL);
  }
 catch (  Exception e) {
    _log.error(e,e);
    SessionErrors.add(actionRequest,e.getClass().getName());
    String pagesRedirect=ParamUtil.getString(actionRequest,"pagesRedirect");
    sendRedirect(actionRequest,actionResponse,pagesRedirect);
  }
}
