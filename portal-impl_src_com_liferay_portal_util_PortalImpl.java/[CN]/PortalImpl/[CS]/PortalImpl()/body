{
  _computerName=System.getProperty("env.COMPUTERNAME");
  if (Validator.isNull(_computerName)) {
    _computerName=System.getProperty("env.HOST");
  }
  if (Validator.isNull(_computerName)) {
    _computerName=System.getProperty("env.HOSTNAME");
  }
  if (Validator.isNull(_computerName)) {
    try {
      _computerName=InetAddress.getLocalHost().getHostName();
    }
 catch (    UnknownHostException uhe) {
    }
  }
  try {
    _computerAddress=InetAddress.getByName(_computerName).getHostAddress();
  }
 catch (  UnknownHostException uhe) {
  }
  if (Validator.isNull(_computerAddress)) {
    try {
      _computerAddress=InetAddress.getLocalHost().getHostAddress();
    }
 catch (    UnknownHostException uhe) {
    }
  }
  _globalLibDir=ClassUtil.getParentPath(ReleaseInfo.class.getClassLoader(),ReleaseInfo.class.getName());
  int pos=_globalLibDir.lastIndexOf(".jar!");
  if (pos == -1) {
    pos=_globalLibDir.lastIndexOf(".jar/");
  }
  pos=_globalLibDir.lastIndexOf(CharPool.SLASH,pos);
  _globalLibDir=_globalLibDir.substring(0,pos + 1);
  if (_log.isInfoEnabled()) {
    _log.info("Global lib directory " + _globalLibDir);
  }
  ClassLoader classLoader=getClass().getClassLoader();
  _portalLibDir=WebDirDetector.getLibDir(classLoader);
  String portalLibDir=System.getProperty("liferay.lib.portal.dir");
  if (portalLibDir != null) {
    if (!portalLibDir.endsWith(StringPool.SLASH)) {
      portalLibDir+=StringPool.SLASH;
    }
    _portalLibDir=portalLibDir;
  }
  if (_log.isInfoEnabled()) {
    _log.info("Portal lib directory " + _portalLibDir);
  }
  _portalWebDir=WebDirDetector.getRootDir(_portalLibDir);
  if (_log.isDebugEnabled()) {
    _log.debug("Portal web directory " + _portalWebDir);
  }
  _cdnHostHttp=PropsValues.CDN_HOST_HTTP;
  if (_cdnHostHttp.startsWith("${")) {
    _cdnHostHttp=StringPool.BLANK;
  }
  _cdnHostHttps=PropsValues.CDN_HOST_HTTPS;
  if (_cdnHostHttps.startsWith("${")) {
    _cdnHostHttps=StringPool.BLANK;
  }
  _pathProxy=PropsUtil.get(PropsKeys.PORTAL_PROXY_PATH);
  _pathContext=PropsUtil.get(PropsKeys.PORTAL_CTX);
  if (_pathContext.equals(StringPool.SLASH)) {
    _pathContext=StringPool.BLANK;
  }
  _pathContext=_pathProxy.concat(_pathContext);
  _pathFriendlyURLPrivateGroup=_pathContext + _PRIVATE_GROUP_SERVLET_MAPPING;
  _pathFriendlyURLPrivateUser=_pathContext + _PRIVATE_USER_SERVLET_MAPPING;
  _pathFriendlyURLPublic=_pathContext + _PUBLIC_GROUP_SERVLET_MAPPING;
  _pathImage=_pathContext + PATH_IMAGE;
  _pathMain=_pathContext + PATH_MAIN;
  String customSystemGroups[]=PropsUtil.getArray(PropsKeys.SYSTEM_GROUPS);
  if ((customSystemGroups == null) || (customSystemGroups.length == 0)) {
    _allSystemGroups=GroupConstants.SYSTEM_GROUPS;
  }
 else {
    _allSystemGroups=ArrayUtil.append(GroupConstants.SYSTEM_GROUPS,customSystemGroups);
  }
  _sortedSystemGroups=new String[_allSystemGroups.length];
  System.arraycopy(_allSystemGroups,0,_sortedSystemGroups,0,_allSystemGroups.length);
  Arrays.sort(_sortedSystemGroups,new StringComparator());
  String customSystemRoles[]=PropsUtil.getArray(PropsKeys.SYSTEM_ROLES);
  if ((customSystemRoles == null) || (customSystemRoles.length == 0)) {
    _allSystemRoles=RoleConstants.SYSTEM_ROLES;
  }
 else {
    _allSystemRoles=ArrayUtil.append(RoleConstants.SYSTEM_ROLES,customSystemRoles);
  }
  _sortedSystemRoles=new String[_allSystemRoles.length];
  System.arraycopy(_allSystemRoles,0,_sortedSystemRoles,0,_allSystemRoles.length);
  Arrays.sort(_sortedSystemRoles,new StringComparator());
  String customSystemCommunityRoles[]=PropsUtil.getArray(PropsKeys.SYSTEM_COMMUNITY_ROLES);
  if ((customSystemCommunityRoles == null) || (customSystemCommunityRoles.length == 0)) {
    _allSystemCommunityRoles=RoleConstants.SYSTEM_COMMUNITY_ROLES;
  }
 else {
    _allSystemCommunityRoles=ArrayUtil.append(RoleConstants.SYSTEM_COMMUNITY_ROLES,customSystemCommunityRoles);
  }
  _sortedSystemCommunityRoles=new String[_allSystemCommunityRoles.length];
  System.arraycopy(_allSystemCommunityRoles,0,_sortedSystemCommunityRoles,0,_allSystemCommunityRoles.length);
  Arrays.sort(_sortedSystemCommunityRoles,new StringComparator());
  String customSystemOrganizationRoles[]=PropsUtil.getArray(PropsKeys.SYSTEM_ORGANIZATION_ROLES);
  if ((customSystemOrganizationRoles == null) || (customSystemOrganizationRoles.length == 0)) {
    _allSystemOrganizationRoles=RoleConstants.SYSTEM_ORGANIZATION_ROLES;
  }
 else {
    _allSystemOrganizationRoles=ArrayUtil.append(RoleConstants.SYSTEM_ORGANIZATION_ROLES,customSystemOrganizationRoles);
  }
  _sortedSystemOrganizationRoles=new String[_allSystemOrganizationRoles.length];
  System.arraycopy(_allSystemOrganizationRoles,0,_sortedSystemOrganizationRoles,0,_allSystemOrganizationRoles.length);
  Arrays.sort(_sortedSystemOrganizationRoles,new StringComparator());
  _authTokenIgnoreActions=SetUtil.fromArray(PropsValues.AUTH_TOKEN_IGNORE_ACTIONS);
  _authTokenIgnorePortlets=SetUtil.fromArray(PropsValues.AUTH_TOKEN_IGNORE_PORTLETS);
  _portletAddDefaultResourceCheckWhitelist=SetUtil.fromArray(PropsValues.PORTLET_ADD_DEFAULT_RESOURCE_CHECK_WHITELIST);
  _portletAddDefaultResourceCheckWhitelistActions=SetUtil.fromArray(PropsValues.PORTLET_ADD_DEFAULT_RESOURCE_CHECK_WHITELIST_ACTIONS);
  _reservedParams=new HashSet<String>();
  _reservedParams.add("p_auth");
  _reservedParams.add("p_auth_secret");
  _reservedParams.add("p_l_id");
  _reservedParams.add("p_l_reset");
  _reservedParams.add("p_p_auth");
  _reservedParams.add("p_p_id");
  _reservedParams.add("p_p_lifecycle");
  _reservedParams.add("p_p_url_type");
  _reservedParams.add("p_p_state");
  _reservedParams.add("p_p_mode");
  _reservedParams.add("p_p_resource_id");
  _reservedParams.add("p_p_cacheability");
  _reservedParams.add("p_p_width");
  _reservedParams.add("p_p_col_id");
  _reservedParams.add("p_p_col_pos");
  _reservedParams.add("p_p_col_count");
  _reservedParams.add("p_p_static");
  _reservedParams.add("p_p_isolated");
  _reservedParams.add("p_o_p_id");
  _reservedParams.add("p_f_id");
  _reservedParams.add("saveLastPath");
  _reservedParams.add("scroll");
}
