{
  String computerName=System.getProperty("env.COMPUTERNAME");
  if (Validator.isNull(computerName)) {
    computerName=System.getProperty("env.HOST");
  }
  if (Validator.isNull(computerName)) {
    computerName=System.getProperty("env.HOSTNAME");
  }
  if (Validator.isNull(computerName)) {
    try {
      InetAddress inetAddress=InetAddress.getLocalHost();
      computerName=inetAddress.getHostName();
    }
 catch (    UnknownHostException uhe) {
    }
  }
  _computerName=computerName;
  String computerAddress=null;
  try {
    InetAddress inetAddress=InetAddress.getByName(_computerName);
    computerAddress=inetAddress.getHostAddress();
  }
 catch (  UnknownHostException uhe) {
  }
  if (Validator.isNull(computerAddress)) {
    try {
      InetAddress inetAddress=InetAddress.getLocalHost();
      computerAddress=inetAddress.getHostAddress();
    }
 catch (    UnknownHostException uhe) {
    }
  }
  _computerAddress=computerAddress;
  _pathProxy=PropsValues.PORTAL_PROXY_PATH;
  _pathContext=_pathProxy.concat(ContextPathUtil.getContextPath(PortalContextLoaderListener.getPortalServletContextPath()));
  _pathFriendlyURLPrivateGroup=_pathContext + _PRIVATE_GROUP_SERVLET_MAPPING;
  _pathFriendlyURLPrivateUser=_pathContext + _PRIVATE_USER_SERVLET_MAPPING;
  _pathFriendlyURLPublic=_pathContext + _PUBLIC_GROUP_SERVLET_MAPPING;
  _pathImage=_pathContext + PATH_IMAGE;
  _pathMain=_pathContext + PATH_MAIN;
  _pathModule=_pathContext + PATH_MODULE;
  String[] customSystemGroups=PropsUtil.getArray(PropsKeys.SYSTEM_GROUPS);
  if (ArrayUtil.isEmpty(customSystemGroups)) {
    _allSystemGroups=GroupConstants.SYSTEM_GROUPS;
  }
 else {
    _allSystemGroups=ArrayUtil.append(GroupConstants.SYSTEM_GROUPS,customSystemGroups);
  }
  _sortedSystemGroups=new String[_allSystemGroups.length];
  System.arraycopy(_allSystemGroups,0,_sortedSystemGroups,0,_allSystemGroups.length);
  Arrays.sort(_sortedSystemGroups,new StringComparator());
  String[] customSystemRoles=PropsUtil.getArray(PropsKeys.SYSTEM_ROLES);
  if (ArrayUtil.isEmpty(customSystemRoles)) {
    _allSystemRoles=RoleConstants.SYSTEM_ROLES;
  }
 else {
    _allSystemRoles=ArrayUtil.append(RoleConstants.SYSTEM_ROLES,customSystemRoles);
  }
  _sortedSystemRoles=new String[_allSystemRoles.length];
  System.arraycopy(_allSystemRoles,0,_sortedSystemRoles,0,_allSystemRoles.length);
  Arrays.sort(_sortedSystemRoles,new StringComparator());
  String[] customSystemOrganizationRoles=PropsUtil.getArray(PropsKeys.SYSTEM_ORGANIZATION_ROLES);
  if (ArrayUtil.isEmpty(customSystemOrganizationRoles)) {
    _allSystemOrganizationRoles=RoleConstants.SYSTEM_ORGANIZATION_ROLES;
  }
 else {
    _allSystemOrganizationRoles=ArrayUtil.append(RoleConstants.SYSTEM_ORGANIZATION_ROLES,customSystemOrganizationRoles);
  }
  _sortedSystemOrganizationRoles=new String[_allSystemOrganizationRoles.length];
  System.arraycopy(_allSystemOrganizationRoles,0,_sortedSystemOrganizationRoles,0,_allSystemOrganizationRoles.length);
  Arrays.sort(_sortedSystemOrganizationRoles,new StringComparator());
  String[] customSystemSiteRoles=PropsUtil.getArray(PropsKeys.SYSTEM_SITE_ROLES);
  if (ArrayUtil.isEmpty(customSystemSiteRoles)) {
    _allSystemSiteRoles=RoleConstants.SYSTEM_SITE_ROLES;
  }
 else {
    _allSystemSiteRoles=ArrayUtil.append(RoleConstants.SYSTEM_SITE_ROLES,customSystemSiteRoles);
  }
  _sortedSystemSiteRoles=new String[_allSystemSiteRoles.length];
  System.arraycopy(_allSystemSiteRoles,0,_sortedSystemSiteRoles,0,_allSystemSiteRoles.length);
  Arrays.sort(_sortedSystemSiteRoles,new StringComparator());
  _reservedParams=new HashSet<>();
  _reservedParams.add("p_auth");
  _reservedParams.add("p_auth_secret");
  _reservedParams.add("p_l_id");
  _reservedParams.add("p_l_reset");
  _reservedParams.add("p_p_auth");
  _reservedParams.add("p_p_id");
  _reservedParams.add("p_p_i_id");
  _reservedParams.add("p_p_lifecycle");
  _reservedParams.add("p_p_url_type");
  _reservedParams.add("p_p_state");
  _reservedParams.add("p_p_state_rcv");
  _reservedParams.add("p_p_mode");
  _reservedParams.add("p_p_resource_id");
  _reservedParams.add("p_p_cacheability");
  _reservedParams.add("p_p_width");
  _reservedParams.add("p_p_col_id");
  _reservedParams.add("p_p_col_pos");
  _reservedParams.add("p_p_col_count");
  _reservedParams.add("p_p_boundary");
  _reservedParams.add("p_p_decorate");
  _reservedParams.add("p_p_static");
  _reservedParams.add("p_p_isolated");
  _reservedParams.add("p_t_lifecycle");
  _reservedParams.add("p_v_l_s_g_id");
  _reservedParams.add("p_f_id");
  _reservedParams.add("p_j_a_id");
  _reservedParams.add("saveLastPath");
  _reservedParams.add("scroll");
  _reservedParams.add("switchGroup");
  _servletContextName=PortalContextLoaderListener.getPortalServletContextName();
  if (ArrayUtil.isEmpty(PropsValues.VIRTUAL_HOSTS_VALID_HOSTS) || ArrayUtil.contains(PropsValues.VIRTUAL_HOSTS_VALID_HOSTS,StringPool.STAR)) {
    _validPortalDomainCheckDisabled=true;
  }
 else {
    _validPortalDomainCheckDisabled=false;
  }
  Registry registry=RegistryUtil.getRegistry();
  _alwaysAllowDoAsUserTracker=registry.trackServices(AlwaysAllowDoAsUser.class);
  _alwaysAllowDoAsUserTracker.open();
}
