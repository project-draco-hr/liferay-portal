{
  Long userIdObj=(Long)request.getAttribute(WebKeys.USER_ID);
  if (userIdObj != null) {
    return userIdObj.longValue();
  }
  String actionName=getPortletParam(request,"actionName");
  String mvcRenderCommandName=ParamUtil.getString(request,"mvcRenderCommandName");
  String path=GetterUtil.getString(request.getPathInfo());
  String strutsAction=getStrutsAction(request);
  boolean alwaysAllowDoAsUser=false;
  if (path.equals("/portal/session_click") || mvcRenderCommandName.equals("/document_library/edit_file_entry") || actionName.equals("addFile")|| isAlwaysAllowDoAsUser(path,mvcRenderCommandName,strutsAction,actionName)) {
    try {
      alwaysAllowDoAsUser=isAlwaysAllowDoAsUser(request);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  if ((!PropsValues.PORTAL_JAAS_ENABLE && PropsValues.PORTAL_IMPERSONATION_ENABLE) || alwaysAllowDoAsUser) {
    String doAsUserIdString=ParamUtil.getString(request,"doAsUserId");
    try {
      long doAsUserId=getDoAsUserId(request,doAsUserIdString,alwaysAllowDoAsUser);
      if (doAsUserId > 0) {
        if (_log.isDebugEnabled()) {
          _log.debug("Impersonating user " + doAsUserId);
        }
        return doAsUserId;
      }
    }
 catch (    Exception e) {
      _log.error("Unable to impersonate user " + doAsUserIdString,e);
    }
  }
  HttpSession session=request.getSession();
  userIdObj=(Long)session.getAttribute(WebKeys.USER_ID);
  if (userIdObj != null) {
    request.setAttribute(WebKeys.USER_ID,userIdObj);
    return userIdObj.longValue();
  }
 else {
    return 0;
  }
}
