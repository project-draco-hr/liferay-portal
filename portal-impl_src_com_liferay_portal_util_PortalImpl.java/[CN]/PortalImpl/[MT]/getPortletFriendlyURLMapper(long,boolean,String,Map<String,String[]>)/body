{
  boolean foundFriendlyURLMapper=false;
  String friendlyURL=url;
  String queryString=StringPool.BLANK;
  LinkedHashMap<FriendlyURLMapper,Portlet> friendlyURLMappersAndPortlets=PortletLocalServiceUtil.getFriendlyURLMappersAndPortlets();
  for (  FriendlyURLMapper friendlyURLMapper : friendlyURLMappersAndPortlets.keySet()) {
    if (url.endsWith(StringPool.SLASH + friendlyURLMapper.getMapping())) {
      url+=StringPool.SLASH;
    }
    int pos=-1;
    if (friendlyURLMapper.isCheckMappingWithPrefix()) {
      pos=url.indexOf("/-/" + friendlyURLMapper.getMapping() + StringPool.SLASH);
    }
 else {
      pos=url.indexOf(StringPool.SLASH + friendlyURLMapper.getMapping() + StringPool.SLASH);
    }
    if (pos != -1) {
      foundFriendlyURLMapper=true;
      friendlyURL=url.substring(0,pos);
      Map<String,String[]> actualParams=null;
      if (params != null) {
        actualParams=new HashMap<String,String[]>(params);
      }
 else {
        actualParams=new HashMap<String,String[]>();
      }
      Portlet portlet=friendlyURLMappersAndPortlets.get(friendlyURLMapper);
      Map<String,String> prpIdentifiers=new HashMap<String,String>();
      if (portlet != null) {
        Set<PublicRenderParameter> publicRenderParameters=portlet.getPublicRenderParameters();
        for (        PublicRenderParameter publicRenderParameter : publicRenderParameters) {
          QName qName=publicRenderParameter.getQName();
          String publicRenderParameterIdentifier=qName.getLocalPart();
          String publicRenderParameterName=PortletQNameUtil.getPublicRenderParameterName(qName);
          prpIdentifiers.put(publicRenderParameterIdentifier,publicRenderParameterName);
        }
      }
      if (friendlyURLMapper.isCheckMappingWithPrefix()) {
        friendlyURLMapper.populateParams(url.substring(pos + 2),actualParams,prpIdentifiers);
      }
 else {
        friendlyURLMapper.populateParams(url.substring(pos),actualParams,prpIdentifiers);
      }
      queryString=StringPool.AMPERSAND + HttpUtil.parameterMapToString(actualParams,false);
      break;
    }
  }
  if (!foundFriendlyURLMapper) {
    int x=url.indexOf("/-/");
    if (x != -1) {
      int y=url.indexOf(StringPool.SLASH,x + 3);
      if (y == -1) {
        y=url.length();
      }
      String ppid=url.substring(x + 3,y);
      if (Validator.isNotNull(ppid)) {
        friendlyURL=url.substring(0,x);
        Map<String,String[]> actualParams=null;
        if (params != null) {
          actualParams=new HashMap<String,String[]>(params);
        }
 else {
          actualParams=new HashMap<String,String[]>();
        }
        actualParams.put("p_p_id",new String[]{ppid});
        actualParams.put("p_p_lifecycle",new String[]{"0"});
        actualParams.put("p_p_state",new String[]{WindowState.MAXIMIZED.toString()});
        actualParams.put("p_p_mode",new String[]{PortletMode.VIEW.toString()});
        queryString=StringPool.AMPERSAND + HttpUtil.parameterMapToString(actualParams,false);
      }
    }
  }
  friendlyURL=StringUtil.replace(friendlyURL,StringPool.DOUBLE_SLASH,StringPool.SLASH);
  if (friendlyURL.endsWith(StringPool.SLASH)) {
    friendlyURL=friendlyURL.substring(0,friendlyURL.length() - 1);
  }
  Layout layout=LayoutLocalServiceUtil.getFriendlyURLLayout(groupId,privateLayout,friendlyURL);
  return new Object[]{layout,queryString};
}
