{
  Set<Group> groups=new LinkedHashSet<>();
  Group siteGroup=doGetCurrentSiteGroup(groupId);
  if (siteGroup != null) {
    groups.add(siteGroup);
    groups.addAll(siteGroup.getDescendants(true));
    groups.addAll(GroupLocalServiceUtil.getGroups(siteGroup.getCompanyId(),Layout.class.getName(),siteGroup.getGroupId()));
  }
  if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.SITES_CONTENT_SHARING_THROUGH_ADMINISTRATORS_ENABLED)) {
    LinkedHashMap<String,Object> groupParams=new LinkedHashMap<>();
    groupParams.put("site",Boolean.TRUE);
    groupParams.put("usersGroups",userId);
    groups.addAll(GroupLocalServiceUtil.search(companyId,null,null,groupParams,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null));
  }
  int sitesContentSharingWithChildrenEnabled=PrefsPropsUtil.getInteger(companyId,PropsKeys.SITES_CONTENT_SHARING_WITH_CHILDREN_ENABLED);
  if (sitesContentSharingWithChildrenEnabled != Sites.CONTENT_SHARING_WITH_CHILDREN_DISABLED) {
    groups.addAll(doGetAncestorSiteGroups(groupId,true));
  }
  Iterator<Group> iterator=groups.iterator();
  while (iterator.hasNext()) {
    Group group=iterator.next();
    if (!StagingUtil.isGroupVisible(group,siteGroup)) {
      iterator.remove();
    }
  }
  long[] groupIds=new long[groups.size()];
  int i=0;
  for (  Group group : groups) {
    groupIds[i++]=group.getGroupId();
  }
  return groupIds;
}
