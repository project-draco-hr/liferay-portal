{
  String completeURL=getCurrentCompleteURL(request);
  Set<String> parameters=HttpUtil.getParameterMap(HttpUtil.getQueryString(completeURL)).keySet();
  for (  String parameter : parameters) {
    if (parameter.matches("redirect$") || parameter.matches("_.*_redirect$")) {
      completeURL=HttpUtil.removeParameter(completeURL,parameter);
    }
  }
  String groupPagePart=StringPool.BLANK;
  String parametersPart=StringPool.BLANK;
  int posParameters=completeURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR);
  if (posParameters == -1) {
    posParameters=completeURL.indexOf(StringPool.QUESTION);
  }
  if (posParameters != -1) {
    groupPagePart=completeURL.substring(0,posParameters);
    parametersPart=completeURL.substring(posParameters);
  }
 else {
    groupPagePart=completeURL;
  }
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  Layout layout=themeDisplay.getLayout();
  String layoutFriendlyUrl=layout.getFriendlyURL();
  String groupPart=groupPagePart;
  String pagePart=StringPool.BLANK;
  if (groupPagePart.contains(layoutFriendlyUrl)) {
    int posLayout=groupPagePart.indexOf(layoutFriendlyUrl);
    groupPart=groupPagePart.substring(0,posLayout);
    pagePart=groupPagePart.substring(posLayout);
    if (layout.isFirstParent() && parametersPart.length() == 0) {
      pagePart=StringPool.BLANK;
    }
  }
  String groupFriendlyUrl=layout.getGroup().getFriendlyURL();
  String virtualHost=layout.getLayoutSet().getVirtualHostname();
  if (groupPart.contains(groupFriendlyUrl)) {
    if (Validator.isNotNull(virtualHost)) {
      StringBundler groupPartVirtualHost=new StringBundler();
      groupPartVirtualHost.append(HttpUtil.getProtocol(request));
      groupPartVirtualHost.append(Http.PROTOCOL_DELIMITER);
      groupPartVirtualHost.append(virtualHost);
      int serverPort=themeDisplay.getServerPort();
      if ((serverPort != Http.HTTP_PORT) && (serverPort != Http.HTTPS_PORT)) {
        groupPartVirtualHost.append(CharPool.COLON);
        groupPartVirtualHost.append(request.getServerPort());
      }
      groupPart=groupPartVirtualHost.toString();
    }
 else {
      Company company=getCompany(request);
      String companyVirtualHost=company.getVirtualHostname();
      if (Validator.isNotNull(companyVirtualHost)) {
        if (!groupPart.contains(companyVirtualHost)) {
          StringBundler groupPartCompanyVirtualHost=new StringBundler();
          groupPartCompanyVirtualHost.append(HttpUtil.getProtocol(request));
          groupPartCompanyVirtualHost.append(Http.PROTOCOL_DELIMITER);
          groupPartCompanyVirtualHost.append(virtualHost);
          int serverPort=themeDisplay.getServerPort();
          if ((serverPort != Http.HTTP_PORT) && (serverPort != Http.HTTPS_PORT)) {
            groupPartCompanyVirtualHost.append(CharPool.COLON);
            groupPartCompanyVirtualHost.append(request.getServerPort());
          }
          groupPartCompanyVirtualHost.append(_PUBLIC_GROUP_SERVLET_MAPPING);
          groupPartCompanyVirtualHost.append(groupFriendlyUrl);
          groupPart=groupPartCompanyVirtualHost.toString();
        }
 else {
          Group defaultGroup=GroupLocalServiceUtil.getGroup(themeDisplay.getCompanyId(),PropsValues.VIRTUAL_HOSTS_DEFAULT_SITE_NAME);
          if (layout.getGroupId() == defaultGroup.getGroupId()) {
            int posServletMapping=groupPart.indexOf(_PUBLIC_GROUP_SERVLET_MAPPING);
            if (posServletMapping > 0) {
              groupPart=groupPart.substring(0,posServletMapping);
            }
          }
        }
      }
    }
  }
  String i18nPath=generateI18NPath(request.getLocale());
  int posLang=groupPart.indexOf(i18nPath);
  if (posLang > 0) {
    StringBuffer sb=new StringBuffer(groupPart);
    sb.delete(posLang,posLang + i18nPath.length());
    groupPart=sb.toString();
  }
  return groupPart.concat(pagePart).concat(parametersPart);
}
