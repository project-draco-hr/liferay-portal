{
  UnserializablePipingBackProcessCallable unserializablePipingBackProcessCallable=new UnserializablePipingBackProcessCallable();
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(),Level.WARNING)){
    ProcessChannel<Serializable> processChannel=_localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1),unserializablePipingBackProcessCallable);
    NoticeableFuture<Serializable> noticeableFuture=processChannel.getProcessNoticeableFuture();
    try {
      noticeableFuture.get();
      Assert.fail();
    }
 catch (    ExecutionException ee) {
      Throwable cause=ee.getCause();
      Assert.assertSame(ProcessException.class,cause.getClass());
      cause=cause.getCause();
      Assert.assertSame(NotSerializableException.class,cause.getClass());
      List<LogRecord> logRecords=captureHandler.getLogRecords();
      Assert.assertEquals(1,logRecords.size());
      LogRecord logRecord=logRecords.get(0);
      Assert.assertEquals("Caught a write aborted exception",logRecord.getMessage());
      cause=logRecord.getThrown();
      Assert.assertSame(WriteAbortedException.class,cause.getClass());
      cause=cause.getCause();
      Assert.assertSame(NotSerializableException.class,cause.getClass());
    }
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(),Level.OFF)){
    ProcessChannel<Serializable> processChannel=_localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1),unserializablePipingBackProcessCallable);
    NoticeableFuture<Serializable> noticeableFuture=processChannel.getProcessNoticeableFuture();
    try {
      noticeableFuture.get();
      Assert.fail();
    }
 catch (    ExecutionException ee) {
      Throwable cause=ee.getCause();
      Assert.assertSame(ProcessException.class,cause.getClass());
      cause=cause.getCause();
      Assert.assertSame(NotSerializableException.class,cause.getClass());
      List<LogRecord> logRecords=captureHandler.getLogRecords();
      Assert.assertTrue(logRecords.isEmpty());
    }
  }
 }
