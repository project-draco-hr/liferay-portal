{
  ReturnWithoutExitProcessCallable returnWithoutExitProcessCallable=new ReturnWithoutExitProcessCallable("Premature return value");
  Future<String> future=_localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1),returnWithoutExitProcessCallable);
  for (int i=0; i < 10; i++) {
    try {
      future.get(1,TimeUnit.SECONDS);
      Assert.fail();
    }
 catch (    TimeoutException te) {
    }
  }
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(),Level.OFF);
  try {
    _localProcessExecutor.destroy();
    try {
      future.get();
      Assert.fail();
    }
 catch (    ExecutionException ee) {
      Assert.assertFalse(future.isCancelled());
      Assert.assertTrue(future.isDone());
      Throwable throwable=ee.getCause();
      Assert.assertTrue(throwable instanceof ProcessException);
    }
  }
  finally {
    captureHandler.close();
  }
}
