{
  StagedModelDataHandlerUtil.importReferenceStagedModel(portletDataContext,vote,PollsChoice.class,vote.getChoiceId());
  Map<Long,Long> questionIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(PollsQuestion.class);
  long questionId=MapUtil.getLong(questionIds,vote.getQuestionId(),vote.getQuestionId());
  Map<Long,Long> choiceIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(PollsChoice.class);
  long choiceId=MapUtil.getLong(choiceIds,vote.getChoiceId(),vote.getChoiceId());
  ServiceContext serviceContext=portletDataContext.createServiceContext(vote);
  serviceContext.setCreateDate(vote.getVoteDate());
  if (portletDataContext.isDataStrategyMirror()) {
    PollsVote existingVote=PollsVoteLocalServiceUtil.fetchPollsVoteByUuidAndGroupId(vote.getUuid(),portletDataContext.getScopeGroupId());
    if (existingVote == null) {
      serviceContext.setUuid(vote.getUuid());
    }
  }
  try {
    PollsVoteLocalServiceUtil.addVote(vote.getUserId(),questionId,choiceId,serviceContext);
  }
 catch (  DuplicateVoteException dve) {
  }
}
