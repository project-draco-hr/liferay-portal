{
  Object[] finderArgs=new Object[]{companyId,openId};
  Object result=null;
  if (retrieveFromCache) {
    result=finderCache.getResult(FINDER_PATH_FETCH_BY_C_O,finderArgs,this);
  }
  if (result instanceof User) {
    User user=(User)result;
    if ((companyId != user.getCompanyId()) || !Objects.equals(openId,user.getOpenId())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_USER_WHERE);
    query.append(_FINDER_COLUMN_C_O_COMPANYID_2);
    boolean bindOpenId=false;
    if (openId == null) {
      query.append(_FINDER_COLUMN_C_O_OPENID_1);
    }
 else     if (openId.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_C_O_OPENID_3);
    }
 else {
      bindOpenId=true;
      query.append(_FINDER_COLUMN_C_O_OPENID_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(companyId);
      if (bindOpenId) {
        qPos.add(openId);
      }
      List<User> list=q.list();
      if (list.isEmpty()) {
        finderCache.putResult(FINDER_PATH_FETCH_BY_C_O,finderArgs,list);
      }
 else {
        if ((list.size() > 1) && _log.isWarnEnabled()) {
          _log.warn("UserPersistenceImpl.fetchByC_O(long, String, boolean) with parameters (" + StringUtil.merge(finderArgs) + ") yields a result set with more than 1 result. This violates the logical unique restriction. There is no order guarantee on which result is returned by this finder.");
        }
        User user=list.get(0);
        result=user;
        cacheResult(user);
        if ((user.getCompanyId() != companyId) || (user.getOpenId() == null) || !user.getOpenId().equals(openId)) {
          finderCache.putResult(FINDER_PATH_FETCH_BY_C_O,finderArgs,user);
        }
      }
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_FETCH_BY_C_O,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (User)result;
  }
}
