{
  String[] listenerClassNames=StringUtil.split(GetterUtil.getString(com.liferay.portal.util.PropsUtil.get("value.object.listener.com.liferay.portal.model.User")));
  if (listenerClassNames.length > 0) {
    try {
      List<ModelListener<User>> listenersList=new ArrayList<ModelListener<User>>();
      for (      String listenerClassName : listenerClassNames) {
        listenersList.add((ModelListener<User>)InstanceFactory.newInstance(getClassLoader(),listenerClassName));
      }
      listeners=listenersList.toArray(new ModelListener[listenersList.size()]);
    }
 catch (    Exception e) {
      _log.error(e);
    }
  }
  userToGroupTableMapper=TableMapperFactory.getTableMapper("Users_Groups","userId","groupId",this,groupPersistence);
  userToOrganizationTableMapper=TableMapperFactory.getTableMapper("Users_Orgs","userId","organizationId",this,organizationPersistence);
  userToRoleTableMapper=TableMapperFactory.getTableMapper("Users_Roles","userId","roleId",this,rolePersistence);
  userToTeamTableMapper=TableMapperFactory.getTableMapper("Users_Teams","userId","teamId",this,teamPersistence);
  userToUserGroupTableMapper=TableMapperFactory.getTableMapper("Users_UserGroups","userId","userGroupId",this,userGroupPersistence);
}
