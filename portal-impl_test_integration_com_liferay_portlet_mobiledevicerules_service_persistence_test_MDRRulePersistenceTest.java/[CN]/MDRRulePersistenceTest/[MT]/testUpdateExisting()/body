{
  long pk=RandomTestUtil.nextLong();
  MDRRule newMDRRule=_persistence.create(pk);
  newMDRRule.setUuid(RandomTestUtil.randomString());
  newMDRRule.setGroupId(RandomTestUtil.nextLong());
  newMDRRule.setCompanyId(RandomTestUtil.nextLong());
  newMDRRule.setUserId(RandomTestUtil.nextLong());
  newMDRRule.setUserName(RandomTestUtil.randomString());
  newMDRRule.setCreateDate(RandomTestUtil.nextDate());
  newMDRRule.setModifiedDate(RandomTestUtil.nextDate());
  newMDRRule.setRuleGroupId(RandomTestUtil.nextLong());
  newMDRRule.setName(RandomTestUtil.randomString());
  newMDRRule.setDescription(RandomTestUtil.randomString());
  newMDRRule.setType(RandomTestUtil.randomString());
  newMDRRule.setTypeSettings(RandomTestUtil.randomString());
  _mdrRules.add(_persistence.update(newMDRRule));
  MDRRule existingMDRRule=_persistence.findByPrimaryKey(newMDRRule.getPrimaryKey());
  Assert.assertEquals(existingMDRRule.getUuid(),newMDRRule.getUuid());
  Assert.assertEquals(existingMDRRule.getRuleId(),newMDRRule.getRuleId());
  Assert.assertEquals(existingMDRRule.getGroupId(),newMDRRule.getGroupId());
  Assert.assertEquals(existingMDRRule.getCompanyId(),newMDRRule.getCompanyId());
  Assert.assertEquals(existingMDRRule.getUserId(),newMDRRule.getUserId());
  Assert.assertEquals(existingMDRRule.getUserName(),newMDRRule.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMDRRule.getCreateDate()),Time.getShortTimestamp(newMDRRule.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingMDRRule.getModifiedDate()),Time.getShortTimestamp(newMDRRule.getModifiedDate()));
  Assert.assertEquals(existingMDRRule.getRuleGroupId(),newMDRRule.getRuleGroupId());
  Assert.assertEquals(existingMDRRule.getName(),newMDRRule.getName());
  Assert.assertEquals(existingMDRRule.getDescription(),newMDRRule.getDescription());
  Assert.assertEquals(existingMDRRule.getType(),newMDRRule.getType());
  Assert.assertEquals(existingMDRRule.getTypeSettings(),newMDRRule.getTypeSettings());
}
