{
  final Map<Path,Set<String>> moduleMap=new HashMap<>();
  final Path portalPath=Paths.get(System.getProperty("user.dir"));
  Files.walkFileTree(portalPath,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path path,    BasicFileAttributes basicFileAttributes) throws IOException {
      Path pathFileName=path.getFileName();
      String pathFileNameString=pathFileName.toString();
      if (pathFileNameString.equals("portal-test") || pathFileNameString.equals("portal-test-integration")) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      Path parentPath=path.getParent();
      if (parentPath.equals(portalPath) && Files.exists(path.resolve("src"))) {
        Set<String> packages=_getPackageNames(path.resolve("src"));
        _checkPackageSet(path,portalPath,moduleMap,packages);
        return FileVisitResult.SKIP_SUBTREE;
      }
      if (Files.exists(path.resolve("portal.build"))) {
        Set<String> packages=new HashSet<>();
        if (Files.exists(path.resolve("docroot"))) {
          Path sourcePath=path.resolve(_DOCROOTPATH);
          if (Files.exists(sourcePath)) {
            packages=_getPackageNames(sourcePath);
          }
        }
 else {
          Path sourcePath=path.resolve(_MAINJAVAPATH);
          if (Files.exists(sourcePath)) {
            packages=_getPackageNames(sourcePath);
          }
        }
        _checkPackageSet(path,portalPath,moduleMap,packages);
        return FileVisitResult.SKIP_SUBTREE;
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
}
