{
  DLFolder dlFolder=null;
  if (folderId > DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    dlFolder=dlFolderLocalService.updateFolderAndFileEntryTypes(serviceContext.getUserId(),folderId,parentFolderId,name,description,defaultFileEntryTypeId,fileEntryTypeIds,overrideFileEntryTypes,serviceContext);
    dlFileEntryTypeLocalService.cascadeFileEntryTypes(serviceContext.getUserId(),dlFolder);
  }
  List<ObjectValuePair<Long,String>> workflowDefinitionOVPs=new ArrayList<ObjectValuePair<Long,String>>();
  if (fileEntryTypeIds.isEmpty()) {
    fileEntryTypeIds.add(DLFileEntryTypeConstants.FILE_ENTRY_TYPE_ID_ALL);
  }
 else {
    workflowDefinitionOVPs.add(new ObjectValuePair<Long,String>(DLFileEntryTypeConstants.FILE_ENTRY_TYPE_ID_ALL,StringPool.BLANK));
  }
  for (  long fileEntryTypeId : fileEntryTypeIds) {
    String workflowDefinition=ParamUtil.getString(serviceContext,"workflowDefinition" + fileEntryTypeId);
    workflowDefinitionOVPs.add(new ObjectValuePair<Long,String>(fileEntryTypeId,workflowDefinition));
  }
  Group group=groupLocalService.getGroup(serviceContext.getScopeGroupId());
  if (group.isLayout()) {
    group=group.getParentGroup();
  }
  if (group.isStagingGroup()) {
    group=group.getLiveGroup();
  }
  workflowDefinitionLinkLocalService.updateWorkflowDefinitionLinks(serviceContext.getUserId(),serviceContext.getCompanyId(),group.getGroupId(),DLFolder.class.getName(),folderId,workflowDefinitionOVPs);
  return dlFolder;
}
