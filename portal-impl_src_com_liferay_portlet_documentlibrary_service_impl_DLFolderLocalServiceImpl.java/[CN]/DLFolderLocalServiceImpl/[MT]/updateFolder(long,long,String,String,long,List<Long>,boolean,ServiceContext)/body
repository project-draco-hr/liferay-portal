{
  boolean hasLock=hasFolderLock(serviceContext.getUserId(),folderId);
  Lock lock=null;
  if (!hasLock) {
    lock=lockFolder(serviceContext.getUserId(),folderId,null,false,DLFolderImpl.LOCK_EXPIRATION_TIME);
  }
  try {
    DLFolder dlFolder=null;
    if (folderId > DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
      dlFolder=dlFolderLocalService.updateFolderAndFileEntryTypes(serviceContext.getUserId(),folderId,parentFolderId,name,description,defaultFileEntryTypeId,fileEntryTypeIds,overrideFileEntryTypes,serviceContext);
      dlFileEntryTypeLocalService.cascadeFileEntryTypes(serviceContext.getUserId(),dlFolder);
    }
    List<ObjectValuePair<Long,String>> workflowDefinitionOVPs=new ArrayList<ObjectValuePair<Long,String>>();
    if (fileEntryTypeIds.isEmpty()) {
      fileEntryTypeIds.add(DLFileEntryTypeConstants.FILE_ENTRY_TYPE_ID_ALL);
    }
 else {
      workflowDefinitionOVPs.add(new ObjectValuePair<Long,String>(DLFileEntryTypeConstants.FILE_ENTRY_TYPE_ID_ALL,StringPool.BLANK));
    }
    for (    long fileEntryTypeId : fileEntryTypeIds) {
      String workflowDefinition=StringPool.BLANK;
      if (overrideFileEntryTypes || (folderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID)) {
        workflowDefinition=ParamUtil.getString(serviceContext,"workflowDefinition" + fileEntryTypeId);
      }
      workflowDefinitionOVPs.add(new ObjectValuePair<Long,String>(fileEntryTypeId,workflowDefinition));
    }
    workflowDefinitionLinkLocalService.updateWorkflowDefinitionLinks(serviceContext.getUserId(),serviceContext.getCompanyId(),serviceContext.getScopeGroupId(),DLFolder.class.getName(),folderId,workflowDefinitionOVPs);
    return dlFolder;
  }
  finally {
    if (!hasLock) {
      unlockFolder(folderId,lock.getUuid());
    }
  }
}
