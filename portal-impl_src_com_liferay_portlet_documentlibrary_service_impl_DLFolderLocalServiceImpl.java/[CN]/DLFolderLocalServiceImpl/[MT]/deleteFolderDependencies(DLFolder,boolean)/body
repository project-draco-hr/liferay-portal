{
  resourceLocalService.deleteResource(dlFolder.getCompanyId(),DLFolder.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,dlFolder.getFolderId());
  webDAVPropsLocalService.deleteWebDAVProps(DLFolder.class.getName(),dlFolder.getFolderId());
  dlFileEntryLocalService.deleteFileEntries(dlFolder.getGroupId(),dlFolder.getFolderId(),includeTrashedEntries);
  List<Long> fileEntryTypeIds=new ArrayList<>();
  for (  DLFileEntryType dlFileEntryType : dlFileEntryTypeLocalService.getDLFolderDLFileEntryTypes(dlFolder.getFolderId())) {
    fileEntryTypeIds.add(dlFileEntryType.getFileEntryTypeId());
  }
  if (fileEntryTypeIds.isEmpty()) {
    fileEntryTypeIds.add(DLFileEntryTypeConstants.FILE_ENTRY_TYPE_ID_ALL);
  }
  dlFileEntryTypeLocalService.unsetFolderFileEntryTypes(dlFolder.getFolderId());
  dlFileShortcutLocalService.deleteFileShortcuts(dlFolder.getGroupId(),dlFolder.getFolderId(),includeTrashedEntries);
  expandoRowLocalService.deleteRows(dlFolder.getFolderId());
  ratingsStatsLocalService.deleteStats(DLFolder.class.getName(),dlFolder.getFolderId());
  dlFolderPersistence.remove(dlFolder);
  if (includeTrashedEntries) {
    DLStoreUtil.deleteDirectory(dlFolder.getCompanyId(),dlFolder.getFolderId(),StringPool.BLANK);
  }
  for (  long fileEntryTypeId : fileEntryTypeIds) {
    WorkflowDefinitionLink workflowDefinitionLink=workflowDefinitionLinkLocalService.fetchWorkflowDefinitionLink(dlFolder.getCompanyId(),dlFolder.getGroupId(),DLFolder.class.getName(),dlFolder.getFolderId(),fileEntryTypeId);
    if (workflowDefinitionLink != null) {
      workflowDefinitionLinkLocalService.deleteWorkflowDefinitionLink(workflowDefinitionLink);
    }
  }
}
