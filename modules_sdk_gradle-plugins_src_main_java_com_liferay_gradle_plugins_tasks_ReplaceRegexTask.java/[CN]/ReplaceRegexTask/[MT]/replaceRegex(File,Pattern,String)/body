{
  Path path=file.toPath();
  String content=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);
  String newContent=content;
  for (  Closure<String> closure : getPre()) {
    newContent=closure.call(newContent,file);
  }
  Matcher matcher=pattern.matcher(newContent);
  if (matcher.find()) {
    boolean replace=true;
    int groupCount=matcher.groupCount();
    String group=matcher.group(groupCount);
    for (    Closure<Boolean> closure : getReplaceOnlyIf()) {
      if (!closure.call(group,replacement,newContent)) {
        replace=false;
        break;
      }
    }
    if (replace) {
      newContent=newContent.substring(0,matcher.start(groupCount)) + replacement + newContent.substring(matcher.end(groupCount));
    }
 else     if (_logger.isInfoEnabled()) {
      _logger.info("Skipped replacement of " + group + " to "+ replacement+ " in "+ file);
    }
  }
 else   if (content.equals(newContent)) {
    String message="Unable to match " + pattern + " in "+ file;
    if (isIgnoreUnmatched()) {
      if (_logger.isInfoEnabled()) {
        _logger.info(message);
      }
      return;
    }
    throw new GradleException(message);
  }
  if (!content.equals(newContent)) {
    Files.write(path,newContent.getBytes(StandardCharsets.UTF_8));
    if (_logger.isLifecycleEnabled()) {
      Project project=getProject();
      _logger.lifecycle("Updated " + project.relativePath(file));
    }
  }
}
