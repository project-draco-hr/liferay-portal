{
  String[] devices=StringUtil.split(ParamUtil.getString(actionRequest,"devices"));
  for (  String device : devices) {
    String themeId=ParamUtil.getString(actionRequest,device + "ThemeId");
    String colorSchemeId=ParamUtil.getString(actionRequest,device + "ColorSchemeId");
    String css=ParamUtil.getString(actionRequest,device + "Css");
    boolean wapTheme=device.equals("wap");
    if (Validator.isNotNull(themeId)) {
      Theme theme=ThemeLocalServiceUtil.getTheme(companyId,themeId,wapTheme);
      if (!theme.hasColorSchemes()) {
        colorSchemeId=StringPool.BLANK;
      }
      if (Validator.isNull(colorSchemeId)) {
        ColorScheme colorScheme=ThemeLocalServiceUtil.getColorScheme(companyId,themeId,colorSchemeId,wapTheme);
        colorSchemeId=colorScheme.getColorSchemeId();
      }
      deleteThemeSettings(typeSettingsProperties,device);
      Map<String,ThemeSetting> configurableSettings=theme.getConfigurableSettings();
      if (configurableSettings.isEmpty() || !Validator.equals(themeId,oldThemeId)) {
        continue;
      }
      for (      String key : configurableSettings.keySet()) {
        ThemeSetting themeSetting=configurableSettings.get(key);
        String type=GetterUtil.getString(themeSetting.getType(),"text");
        String property=device + "ThemeSettingsProperties--" + key+ StringPool.DOUBLE_DASH;
        String defaultValue=themeSetting.getValue();
        String newValue=ParamUtil.getString(actionRequest,property);
        if (type.equals("checkbox")) {
          newValue=String.valueOf(GetterUtil.getBoolean(newValue));
        }
        if (!newValue.equals(defaultValue)) {
          typeSettingsProperties.setProperty(ThemeSettingImpl.namespaceProperty(device,key),newValue);
        }
      }
    }
    long groupId=liveGroupId;
    if (stagingGroupId > 0) {
      groupId=stagingGroupId;
    }
    LayoutSetServiceUtil.updateLookAndFeel(groupId,privateLayout,themeId,colorSchemeId,css,wapTheme);
  }
}
