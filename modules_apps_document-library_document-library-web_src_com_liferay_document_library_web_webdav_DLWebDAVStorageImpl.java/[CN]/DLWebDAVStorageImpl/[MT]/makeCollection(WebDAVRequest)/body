{
  try {
    HttpServletRequest request=webDAVRequest.getHttpServletRequest();
    if (request.getContentLength() > 0) {
      return new Status(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
    }
    String[] pathArray=webDAVRequest.getPathArray();
    long companyId=webDAVRequest.getCompanyId();
    long groupId=webDAVRequest.getGroupId();
    long parentFolderId=getParentFolderId(companyId,pathArray);
    String name=WebDAVUtil.getResourceName(pathArray);
    String description=StringPool.BLANK;
    ServiceContext serviceContext=new ServiceContext();
    serviceContext.setAddGroupPermissions(isAddGroupPermissions(groupId));
    serviceContext.setAddGuestPermissions(true);
    _dlAppService.addFolder(groupId,parentFolderId,name,description,serviceContext);
    String location=StringUtil.merge(pathArray,StringPool.SLASH);
    return new Status(location,HttpServletResponse.SC_CREATED);
  }
 catch (  DuplicateFolderNameException dfne) {
    if (_log.isDebugEnabled()) {
      _log.debug(dfne,dfne);
    }
    return new Status(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
  }
catch (  DuplicateFileEntryException dfee) {
    if (_log.isDebugEnabled()) {
      _log.debug(dfee,dfee);
    }
    return new Status(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
  }
catch (  NoSuchFolderException nsfe) {
    if (_log.isDebugEnabled()) {
      _log.debug(nsfe,nsfe);
    }
    return new Status(HttpServletResponse.SC_CONFLICT);
  }
catch (  PrincipalException pe) {
    if (_log.isDebugEnabled()) {
      _log.debug(pe,pe);
    }
    return new Status(HttpServletResponse.SC_FORBIDDEN);
  }
catch (  Exception e) {
    throw new WebDAVException(e);
  }
}
