{
  Class<?> clazz=TableMapping.class;
  ClassLoader classLoader=clazz.getClassLoader();
  RecordInvocationHandler recordInvocationHandler=new RecordInvocationHandler();
  TableMapping<Left,Right> tableMapping=(TableMapping<Left,Right>)ProxyUtil.newProxyInstance(classLoader,new Class<?>[]{TableMapping.class},recordInvocationHandler);
  ReverseTableMapping<Right,Left> reverseTableMapping=new ReverseTableMapping<Right,Left>(tableMapping);
  recordInvocationHandler.setTableMapping(reverseTableMapping);
  reverseTableMapping.addTableMapping(1,2);
  recordInvocationHandler.assertCall("addMapping",2L,1L);
  reverseTableMapping.containsTableMapping(1,2);
  recordInvocationHandler.assertCall("containsMapping",2L,1L);
  reverseTableMapping.deleteLeftPrimaryKeyTableMappings(1);
  recordInvocationHandler.assertCall("deleteMappingsByRightPrimaryKey",1L);
  reverseTableMapping.deleteRightPrimaryKeyTableMappings(2);
  recordInvocationHandler.assertCall("deleteMappingsByLeftPrimaryKey",2L);
  reverseTableMapping.deleteTableMapping(1,2);
  recordInvocationHandler.assertCall("deleteMapping",2L,1L);
  reverseTableMapping.getRightPrimaryKeys(1);
  recordInvocationHandler.assertCall("getLeftPrimaryKeysByRightPrimaryKey",1L);
  reverseTableMapping.getRightBaseModels(1,2,3,null);
  recordInvocationHandler.assertCall("getLeftBaseModelsByRightPrimaryKey",1L,2,3,null);
  reverseTableMapping.getLeftPrimaryKeys(2);
  recordInvocationHandler.assertCall("getRightPrimaryKeysByLeftPrimaryKey",2L);
  reverseTableMapping.getLeftBaseModels(2,2,3,null);
  recordInvocationHandler.assertCall("getRightBaseModelsByLeftPrimaryKey",2L,2,3,null);
  Assert.assertSame(tableMapping,reverseTableMapping.getReverseTableMapping());
  reverseTableMapping.matches("left","right");
  recordInvocationHandler.assertCall("matches","right","left");
}
