{
  names=CustomSQLUtil.keywords(names);
  if (params == null) {
    params=_emptyLinkedHashMap;
  }
  LinkedHashMap<String,Object> params1=params;
  Session session=null;
  try {
    session=openSession();
    String sql=null;
    if (params1.size() > 0) {
      String sqlKey=_buildSQLKey(params1);
      sql=_findByG_NCache.get(sqlKey);
    }
    if (sql == null) {
      String findByG_N=CustomSQLUtil.get(FIND_BY_G_N);
      StringBundler sb=new StringBundler();
      sb.append(StringPool.OPEN_PARENTHESIS);
      sb.append(replaceGroupIdComparator(findByG_N,params1));
      sb.append(StringPool.CLOSE_PARENTHESIS);
      if (params1.size() > 0) {
        String sqlKey=_buildSQLKey(params1);
        _findByG_NCache.put(sqlKey,sb.toString());
      }
      sql=sb.toString();
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(name)",StringPool.LIKE,true,names);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("MDRRuleGroup",MDRRuleGroupImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    setParameterValues(qPos,params1);
    qPos.add(names,2);
    return (List<MDRRuleGroup>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
