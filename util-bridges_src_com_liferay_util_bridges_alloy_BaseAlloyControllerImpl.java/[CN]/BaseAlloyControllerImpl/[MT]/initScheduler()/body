{
  schedulerMessageListener=buildSchedulerMessageListener();
  if (schedulerMessageListener == null) {
    return;
  }
  MessageBus messageBus=MessageBusUtil.getMessageBus();
  Destination destination=messageBus.getDestination(getSchedulerDestinationName());
  if (destination != null) {
    Set<MessageListener> messageListeners=destination.getMessageListeners();
    for (    MessageListener messageListener : messageListeners) {
      if (!(messageListener instanceof InvokerMessageListener)) {
        continue;
      }
      InvokerMessageListener invokerMessageListener=(InvokerMessageListener)messageListener;
      messageListener=invokerMessageListener.getMessageListener();
      if (schedulerMessageListener == messageListener) {
        return;
      }
      Class<?> schedulerMessageListenerClass=schedulerMessageListener.getClass();
      String schedulerMessageListenerClassName=schedulerMessageListenerClass.getName();
      Class<?> messageListenerClass=messageListener.getClass();
      if (!schedulerMessageListenerClassName.equals(messageListenerClass.getName())) {
        continue;
      }
      try {
        SchedulerEngineUtil.unschedule(getSchedulerJobName(),getSchedulerGroupName(),StorageType.MEMORY_CLUSTERED);
        MessageBusUtil.unregisterMessageListener(getSchedulerDestinationName(),messageListener);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      break;
    }
  }
 else {
    SerialDestination serialDestination=new SerialDestination();
    serialDestination.setName(getSchedulerDestinationName());
    serialDestination.open();
    MessageBusUtil.addDestination(serialDestination);
  }
  try {
    MessageBusUtil.registerMessageListener(getSchedulerDestinationName(),schedulerMessageListener);
    SchedulerEngineUtil.schedule(getSchedulerTrigger(),StorageType.MEMORY_CLUSTERED,null,getSchedulerDestinationName(),null,0);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}
