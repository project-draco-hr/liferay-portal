{
  try {
    _badTableNames=ServiceBuilder.getBadTableNames();
    _badCmpFields=ServiceBuilder.getBadCmpFields();
    _hbmFileName=hbmFileName;
    _modelHintsFileName=modelHintsFileName;
    _springEntFileName=springEntFileName;
    _springProFileName=springProFileName;
    _beanLocatorUtilClassName=beanLocatorUtilClassName;
    SAXReader reader=SAXReaderFactory.getInstance();
    Document doc=reader.read(new File(fileName));
    Element root=doc.getRootElement();
    _portalRoot=root.attributeValue("root-dir");
    String packagePath=root.attributeValue("package-path");
    _portletName=root.element("portlet").attributeValue("name");
    _portletShortName=root.element("portlet").attributeValue("short-name");
    _portletPackageName=TextFormatter.format(_portletName,TextFormatter.B);
    _outputPath="src/" + StringUtil.replace(packagePath,".","/") + "/"+ _portletPackageName;
    _packagePath=packagePath + "." + _portletPackageName;
    _ejbList=new ArrayList();
    List entities=root.elements("entity");
    Iterator itr1=entities.iterator();
    while (itr1.hasNext()) {
      Element entityEl=(Element)itr1.next();
      String ejbName=entityEl.attributeValue("name");
      String table=entityEl.attributeValue("table");
      if (Validator.isNull(table)) {
        table=ejbName;
        if (_badTableNames.contains(ejbName)) {
          table+="_";
        }
      }
      boolean localService=GetterUtil.getBoolean(entityEl.attributeValue("local-service"),false);
      boolean remoteService=GetterUtil.getBoolean(entityEl.attributeValue("remote-service"),true);
      String persistenceClass=GetterUtil.getString(entityEl.attributeValue("persistence-class"),_packagePath + ".service.persistence." + ejbName+ "Persistence");
      String dataSource=entityEl.attributeValue("data-source");
      String sessionFactory=entityEl.attributeValue("session-factory");
      Iterator itr2=null;
      List pkList=new ArrayList();
      List regularColList=new ArrayList();
      List collectionList=new ArrayList();
      List columnList=new ArrayList();
      List columns=entityEl.elements("column");
      itr2=columns.iterator();
      while (itr2.hasNext()) {
        Element column=(Element)itr2.next();
        String columnName=column.attributeValue("name");
        String columnDBName=column.attributeValue("db-name");
        if (Validator.isNull(columnDBName)) {
          columnDBName=columnName;
          if (_badCmpFields.contains(columnName)) {
            columnDBName+="_";
          }
        }
        String columnType=column.attributeValue("type");
        boolean primary=GetterUtil.getBoolean(column.attributeValue("primary"),false);
        String collectionEntity=column.attributeValue("entity");
        String mappingKey=column.attributeValue("mapping-key");
        String mappingTable=column.attributeValue("mapping-table");
        String idType=column.attributeValue("id-type");
        String idParam=column.attributeValue("id-param");
        boolean convertNull=GetterUtil.getBoolean(column.attributeValue("convert-null"),true);
        EntityColumn col=new EntityColumn(columnName,columnDBName,columnType,primary,collectionEntity,mappingKey,mappingTable,idType,idParam,convertNull);
        if (primary) {
          pkList.add(col);
        }
        if (columnType.equals("Collection")) {
          collectionList.add(col);
        }
 else {
          regularColList.add(col);
        }
        columnList.add(col);
      }
      EntityOrder order=null;
      Element orderEl=entityEl.element("order");
      if (orderEl != null) {
        boolean asc=true;
        if ((orderEl.attribute("by") != null) && (orderEl.attributeValue("by").equals("desc"))) {
          asc=false;
        }
        List orderColsList=new ArrayList();
        order=new EntityOrder(asc,orderColsList);
        List orderCols=orderEl.elements("order-column");
        Iterator itr3=orderCols.iterator();
        while (itr3.hasNext()) {
          Element orderColEl=(Element)itr3.next();
          String orderColName=orderColEl.attributeValue("name");
          boolean orderColCaseSensitive=GetterUtil.getBoolean(orderColEl.attributeValue("case-sensitive"),true);
          boolean orderColByAscending=asc;
          String orderColBy=GetterUtil.getString(orderColEl.attributeValue("order-by"));
          if (orderColBy.equals("asc")) {
            orderColByAscending=true;
          }
 else           if (orderColBy.equals("desc")) {
            orderColByAscending=false;
          }
          EntityColumn col=Entity.getColumn(orderColName,columnList);
          col=(EntityColumn)col.clone();
          col.setCaseSensitive(orderColCaseSensitive);
          col.setOrderByAscending(orderColByAscending);
          orderColsList.add(col);
        }
      }
      List finderList=new ArrayList();
      List finders=entityEl.elements("finder");
      itr2=finders.iterator();
      while (itr2.hasNext()) {
        Element finderEl=(Element)itr2.next();
        String finderName=finderEl.attributeValue("name");
        String finderReturn=finderEl.attributeValue("return-type");
        String finderWhere=finderEl.attributeValue("where");
        boolean finderDBIndex=GetterUtil.getBoolean(finderEl.attributeValue("db-index"),true);
        List finderColsList=new ArrayList();
        List finderCols=finderEl.elements("finder-column");
        Iterator itr3=finderCols.iterator();
        while (itr3.hasNext()) {
          Element finderColEl=(Element)itr3.next();
          String finderColName=finderColEl.attributeValue("name");
          String finderColDBName=finderColEl.attributeValue("db-name");
          if (Validator.isNull(finderColDBName)) {
            finderColDBName=finderColName;
            if (_badCmpFields.contains(finderColName)) {
              finderColDBName+="_";
            }
          }
          String finderColComparator=GetterUtil.getString(finderColEl.attributeValue("comparator"),"=");
          EntityColumn col=Entity.getColumn(finderColName,columnList);
          col=(EntityColumn)col.clone();
          col.setDBName(finderColDBName);
          col.setComparator(finderColComparator);
          finderColsList.add(col);
        }
        finderList.add(new EntityFinder(finderName,finderReturn,finderColsList,finderWhere,finderDBIndex));
      }
      List referenceList=new ArrayList();
      if (build) {
        List references=entityEl.elements("reference");
        itr2=references.iterator();
        while (itr2.hasNext()) {
          Element reference=(Element)itr2.next();
          String refPackage=reference.attributeValue("package-path");
          String refEntity=reference.attributeValue("entity");
          if ((refPackage == null) || (refEntity == null)) {
            referenceList.add(reference.getText().trim());
          }
 else {
            referenceList.add(getEntity(refPackage + "." + refEntity));
          }
        }
      }
      _ejbList.add(new Entity(_packagePath,_portletName,_portletShortName,ejbName,table,localService,remoteService,persistenceClass,dataSource,sessionFactory,pkList,regularColList,collectionList,columnList,order,finderList,referenceList));
    }
    List exceptionList=new ArrayList();
    if (root.element("exceptions") != null) {
      List exceptions=root.element("exceptions").elements("exception");
      itr1=exceptions.iterator();
      while (itr1.hasNext()) {
        Element exception=(Element)itr1.next();
        exceptionList.add(exception.getText());
      }
    }
    if (build) {
      for (int x=0; x < _ejbList.size(); x++) {
        Entity entity=(Entity)_ejbList.get(x);
        System.out.println("Building " + entity.getName());
        if (true || entity.getName().equals("EmailAddress") || entity.getName().equals("User")) {
          if (entity.hasColumns()) {
            _createHBM(entity);
            _createHBMUtil(entity);
            _createPersistence(entity);
            _createPersistenceUtil(entity);
            _createModel(entity);
            _createExtendedModel(entity);
            _createPool(entity);
            if (entity.getPKList().size() > 1) {
              _createEJBPK(entity);
            }
          }
          if (entity.hasLocalService()) {
            _createServiceImpl(entity,_LOCAL);
            _createService(entity,_LOCAL);
            _createServiceEJB(entity,_LOCAL);
            _createServiceEJBImpl(entity,_LOCAL);
            _createServiceHome(entity,_LOCAL);
            _createServiceFactory(entity,_LOCAL);
            _createServiceUtil(entity,_LOCAL);
          }
          if (entity.hasRemoteService()) {
            _createServiceImpl(entity,_REMOTE);
            _createService(entity,_REMOTE);
            _createServiceEJB(entity,_REMOTE);
            _createServiceEJBImpl(entity,_REMOTE);
            _createServiceHome(entity,_REMOTE);
            _createServiceFactory(entity,_REMOTE);
            _createServiceUtil(entity,_REMOTE);
            _createServiceHttp(entity);
            _createServiceSoap(entity);
          }
        }
      }
      _createEJBXML();
      _createHBMXML();
      _createModelHintsXML();
      _createSpringXML(true);
      _createSpringXML(false);
      _createSQLIndexes();
      _createSQLTables();
      _createSQLSequences();
      _createExceptions(exceptionList);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
