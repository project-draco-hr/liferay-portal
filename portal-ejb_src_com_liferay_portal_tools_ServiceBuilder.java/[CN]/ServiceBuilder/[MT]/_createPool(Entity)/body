{
  File ejbFile=new File(_outputPath + "/service/persistence/" + entity.getName()+ "Pool.java");
  if (!entity.hasUniqueFinders()) {
    if (ejbFile.exists()) {
      System.out.println("Removing deprecated " + ejbFile);
      ejbFile.delete();
    }
    return;
  }
  List finderList=entity.getFinderList();
  String pkClassName=entity.getPKClassName();
  String pkVarName=entity.getPKVarName();
  StringBuffer sb=new StringBuffer();
  sb.append("package " + _packagePath + ".service.persistence;");
  sb.append("import " + _packagePath + ".model."+ entity.getName()+ ";");
  sb.append("import com.liferay.portal.util.ClusterPool;");
  sb.append("import com.liferay.portal.util.PropsUtil;");
  sb.append("import com.liferay.util.GetterUtil;");
  sb.append("import com.liferay.util.StringPool;");
  sb.append("import com.liferay.util.Validator;");
  sb.append("import com.opensymphony.oscache.base.NeedsRefreshException;");
  sb.append("import com.opensymphony.oscache.general.GeneralCacheAdministrator;");
  sb.append("import org.apache.commons.logging.Log;");
  sb.append("import org.apache.commons.logging.LogFactory;");
  sb.append("public class " + entity.getName() + "Pool {");
  sb.append("public static final String GROUP_NAME = " + entity.getName() + "Pool.class.getName();");
  sb.append("public static final String[] GROUP_NAME_ARRAY = new String[] {GROUP_NAME};");
  sb.append("public static void clear() {");
  sb.append("if (_log.isDebugEnabled()) {");
  sb.append("_log.debug(\"Clear\");");
  sb.append("}");
  sb.append("_instance._clear();");
  sb.append("}");
  for (int i=0; i < finderList.size(); i++) {
    EntityFinder finder=(EntityFinder)finderList.get(i);
    List finderColsList=finder.getColumns();
    if (!finder.isCollection()) {
      sb.append("public static " + pkClassName + " getBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(") {");
      sb.append(pkClassName + " pk = _instance._getBy" + finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(");");
      sb.append("if (_log.isInfoEnabled()) {");
      sb.append("_log.info(\"Get " + finder.getName() + "\"");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(" + \" \" + " + col.getName() + ".toString()");
      }
      sb.append(" + \" is \" + ((pk == null) ? \"NOT \" : \"\") + \"in cache\");");
      sb.append("}");
      sb.append("return pk;");
      sb.append("}");
      sb.append("public static " + pkClassName + " putBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName()+ ", ");
      }
      sb.append(pkClassName + " pk) {");
      sb.append("if (_log.isInfoEnabled()) {");
      sb.append("_log.info(\"Put " + finder.getName() + "\"");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(" + \" \" + " + col.getName() + ".toString()");
      }
      sb.append(");");
      sb.append("}");
      sb.append("return _instance._putBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getName() + ", ");
      }
      sb.append("pk, false);");
      sb.append("}");
      sb.append("public static " + pkClassName + " removeBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(") {");
      sb.append("if (_log.isInfoEnabled()) {");
      sb.append("_log.info(\"Remove " + finder.getName() + "\"");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(" + \" \" + " + col.getName() + ".toString()");
      }
      sb.append(");");
      sb.append("}");
      sb.append("return _instance._removeBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(");");
      sb.append("}");
      sb.append("public static " + pkClassName + " updateBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName()+ ", ");
      }
      sb.append(pkClassName + " pk) {");
      sb.append("if (_log.isInfoEnabled()) {");
      sb.append("_log.info(\"Update " + finder.getName() + "\"");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(" + \" \" + " + col.getName() + ".toString()");
      }
      sb.append(");");
      sb.append("}");
      sb.append("return _instance._putBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getName() + ", ");
      }
      sb.append("pk, true);");
      sb.append("}");
    }
  }
  sb.append("private " + entity.getName() + "Pool() {");
  sb.append("_cacheable = " + entity.getName() + ".CACHEABLE;");
  sb.append("_cache = ClusterPool.getCache();");
  sb.append("ClusterPool.registerPool(" + entity.getName() + "Pool.class.getName()"+ ");");
  sb.append("}");
  sb.append("private void _clear() {");
  sb.append("_cache.flushGroup(GROUP_NAME);");
  sb.append("}");
  for (int i=0; i < finderList.size(); i++) {
    EntityFinder finder=(EntityFinder)finderList.get(i);
    List finderColsList=finder.getColumns();
    if (!finder.isCollection()) {
      sb.append("private " + pkClassName + " _getBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(") {");
      sb.append("if (!_cacheable) {");
      sb.append("return null;");
      sb.append("}");
      sb.append("else {");
      sb.append(pkClassName + " pk = null;");
      sb.append("String key = _encodeKey" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(");");
      sb.append("try {");
      sb.append("pk = (" + pkClassName + ")_cache.getFromCache(key);");
      sb.append("}");
      sb.append("catch (NeedsRefreshException nfe) {");
      sb.append("}");
      sb.append("finally {");
      sb.append("if (pk == null) {");
      sb.append("_cache.cancelUpdate(key);");
      sb.append("}");
      sb.append("}");
      sb.append("return pk;");
      sb.append("}");
      sb.append("}");
      sb.append("private String _encodeKey" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(") {");
      sb.append("String key = GROUP_NAME + StringPool.POUND");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(" + " + col.getName() + ".toString()");
      }
      sb.append(";");
      sb.append("if (_log.isDebugEnabled()) {");
      sb.append("_log.debug(\"Key \" + key);");
      sb.append("}");
      sb.append("return key;");
      sb.append("}");
      sb.append("private " + pkClassName + " _putBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName()+ ", ");
      }
      sb.append(pkClassName + " pk, boolean flush) {");
      sb.append("if (!_cacheable) {");
      sb.append("return null;");
      sb.append("}");
      sb.append("else {");
      sb.append("String key = _encodeKey" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(");");
      sb.append("if (Validator.isNotNull(key)) {");
      sb.append("if (flush) {");
      sb.append("_cache.flushEntry(key);");
      sb.append("}");
      sb.append("_cache.putInCache(key, pk, GROUP_NAME_ARRAY);");
      sb.append("}");
      sb.append("return pk;");
      sb.append("}");
      sb.append("}");
      sb.append("private " + pkClassName + " _removeBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(") {");
      sb.append("if (!_cacheable) {");
      sb.append("return null;");
      sb.append("}");
      sb.append("else {");
      sb.append(pkClassName + " pk = null;");
      sb.append("String key = _encodeKey" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(");");
      sb.append("try {");
      sb.append("pk = (" + pkClassName + ")_cache.getFromCache(key);");
      sb.append("_cache.flushEntry(key);");
      sb.append("}");
      sb.append("catch (NeedsRefreshException nfe) {");
      sb.append("}");
      sb.append("finally {");
      sb.append("if (pk == null) {");
      sb.append("_cache.cancelUpdate(key);");
      sb.append("}");
      sb.append("}");
      sb.append("return pk;");
      sb.append("}");
      sb.append("}");
    }
  }
  sb.append("private static Log _log = LogFactory.getLog(" + entity.getName() + "Pool.class);");
  sb.append("private static " + entity.getName() + "Pool _instance = new "+ entity.getName()+ "Pool();");
  sb.append("private GeneralCacheAdministrator _cache;");
  sb.append("private boolean _cacheable;");
  sb.append("}");
  writeFile(ejbFile,sb.toString());
}
