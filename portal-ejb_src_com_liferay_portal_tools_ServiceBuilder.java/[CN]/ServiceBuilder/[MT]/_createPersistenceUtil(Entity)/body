{
  JavaClass javaClass=_getJavaClass(_outputPath + "/service/persistence/" + entity.getName()+ "Persistence.java");
  JavaMethod[] methods=javaClass.getMethods();
  StringBuffer sb=new StringBuffer();
  sb.append("package " + _packagePath + ".service.persistence;");
  sb.append("import com.liferay.portal.model.ModelListener;");
  sb.append("import com.liferay.portal.util.PropsUtil;");
  sb.append("import com.liferay.util.GetterUtil;");
  sb.append("import com.liferay.util.InstancePool;");
  sb.append("import com.liferay.util.Validator;");
  sb.append("import org.apache.commons.logging.Log;");
  sb.append("import org.apache.commons.logging.LogFactory;");
  sb.append("public class " + entity.getName() + "Util {");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isConstructor()) {
      sb.append("public static " + javaMethod.getReturns().getValue() + _getDimensions(javaMethod.getReturns())+ " "+ methodName+ "(");
      JavaParameter[] parameters=javaMethod.getParameters();
      String p0Name="";
      if (parameters.length > 0) {
        p0Name=parameters[0].getName();
      }
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sb.append(javaParameter.getType().getValue() + _getDimensions(javaParameter.getType()) + " "+ javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sb.append(", ");
        }
      }
      sb.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      if (thrownExceptions.length > 0) {
        sb.append(" throws ");
        for (int j=0; j < thrownExceptions.length; j++) {
          Type thrownException=thrownExceptions[j];
          sb.append(thrownException.getValue());
          if ((j + 1) != thrownExceptions.length) {
            sb.append(", ");
          }
        }
      }
      sb.append(" {");
      if (methodName.equals("remove") || methodName.equals("update")) {
        sb.append("ModelListener listener = _getListener();");
        if (methodName.equals("update")) {
          sb.append("boolean isNew = " + p0Name + ".isNew();");
        }
        sb.append("if (listener != null) {");
        if (methodName.equals("remove")) {
          if (entity.getVarName().equals(p0Name)) {
            sb.append("listener.onBeforeRemove(" + p0Name + ");");
          }
 else {
            sb.append("listener.onBeforeRemove(findByPrimaryKey(" + p0Name + "));");
          }
        }
 else {
          sb.append("if (isNew) {");
          sb.append("listener.onBeforeCreate(" + p0Name + ");");
          sb.append("}");
          sb.append("else {");
          sb.append("listener.onBeforeUpdate(" + p0Name + ");");
          sb.append("}");
        }
        sb.append("}");
        if (methodName.equals("remove") && !entity.getVarName().equals(p0Name)) {
          sb.append(_packagePath + ".model." + entity.getName()+ " "+ entity.getVarName()+ " = ");
        }
 else {
          sb.append(entity.getVarName() + " = ");
        }
      }
 else {
        if (!javaMethod.getReturns().getValue().equals("void")) {
          sb.append("return ");
        }
      }
      sb.append("getPersistence()." + methodName + "(");
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sb.append(javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sb.append(", ");
        }
      }
      sb.append(");");
      if (methodName.equals("remove") || methodName.equals("update")) {
        sb.append("if (listener != null) {");
        if (methodName.equals("remove")) {
          sb.append("listener.onAfterRemove(" + entity.getVarName() + ");");
        }
 else {
          sb.append("if (isNew) {");
          sb.append("listener.onAfterCreate(" + entity.getVarName() + ");");
          sb.append("}");
          sb.append("else {");
          sb.append("listener.onAfterUpdate(" + entity.getVarName() + ");");
          sb.append("}");
        }
        sb.append("}");
        sb.append("return " + entity.getVarName() + ";");
      }
      sb.append("}");
    }
  }
  sb.append("public static " + entity.getName() + "Persistence getPersistence() {");
  sb.append("return _getUtil()._persistence;");
  sb.append("}");
  sb.append("public void setPersistence(" + entity.getName() + "Persistence persistence) {");
  sb.append("_persistence = persistence;");
  sb.append("}");
  sb.append("private static " + entity.getName() + "Util _getUtil() {");
  sb.append("if (_util == null) {");
  sb.append("_util = (" + entity.getName() + "Util)"+ _beanLocatorUtilClassName+ ".locate(_UTIL);");
  sb.append("}");
  sb.append("return _util;");
  sb.append("}");
  sb.append("private static ModelListener _getListener() {");
  sb.append("if (Validator.isNotNull(_LISTENER)) {");
  sb.append("try {");
  sb.append("return (ModelListener)Class.forName(_LISTENER).newInstance();");
  sb.append("}");
  sb.append("catch (Exception e) {");
  sb.append("_log.error(e);");
  sb.append("}");
  sb.append("}");
  sb.append("return null;");
  sb.append("}");
  sb.append("private static final String _UTIL = " + entity.getName() + "Util.class.getName();");
  sb.append("private static final String _LISTENER = GetterUtil.getString(PropsUtil.get(\"value.object.listener." + _packagePath + ".model."+ entity.getName()+ "\"));");
  sb.append("private static Log _log = LogFactory.getLog(" + entity.getName() + "Util.class);");
  sb.append("private static " + entity.getName() + "Util _util;");
  sb.append("private " + entity.getName() + "Persistence _persistence;");
  sb.append("}");
  File ejbFile=new File(_outputPath + "/service/persistence/" + entity.getName()+ "Util.java");
  writeFile(ejbFile,sb.toString());
}
