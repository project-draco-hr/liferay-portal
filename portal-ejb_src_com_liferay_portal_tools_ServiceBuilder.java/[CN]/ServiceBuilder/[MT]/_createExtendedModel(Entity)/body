{
  JavaClass javaClass=_getJavaClass(_outputPath + "/model/impl/" + entity.getName()+ "Impl.java");
  JavaMethod[] methods=javaClass.getMethods();
  StringMaker sm=new StringMaker();
  sm.append("package " + _packagePath + ".model;");
  sm.append("public interface " + entity.getName() + " extends "+ entity.getName()+ "Model {");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isConstructor() && !javaMethod.isStatic() && javaMethod.isPublic()) {
      sm.append("public " + javaMethod.getReturns().getValue() + _getDimensions(javaMethod.getReturns())+ " "+ methodName+ "(");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sm.append(javaParameter.getType().getValue() + _getDimensions(javaParameter.getType()) + " "+ javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      Set newExceptions=new LinkedHashSet();
      for (int j=0; j < thrownExceptions.length; j++) {
        Type thrownException=thrownExceptions[j];
        newExceptions.add(thrownException.getValue());
      }
      if (newExceptions.size() > 0) {
        sm.append(" throws ");
        Iterator itr=newExceptions.iterator();
        while (itr.hasNext()) {
          sm.append(itr.next());
          if (itr.hasNext()) {
            sm.append(", ");
          }
        }
      }
      sm.append(";");
    }
  }
  sm.append("}");
  File modelFile=new File(_serviceOutputPath + "/model/" + entity.getName()+ ".java");
  Map jalopySettings=new HashMap();
  String[] classComments={_DEFAULT_CLASS_COMMENTS,"This interface is a model that represents the <code>" + entity.getTable() + "</code> table in the database.","Customize <code>" + _packagePath + ".service.model.impl."+ entity.getName()+ "Impl</code> and rerun the ServiceBuilder to generate the new methods."};
  String[] see={_packagePath + ".service.model." + entity.getName()+ "Model",_packagePath + ".service.model.impl." + entity.getName()+ "Impl",_packagePath + ".service.model.impl." + entity.getName()+ "ModelImpl"};
  jalopySettings.put("classComments",classComments);
  jalopySettings.put("see",see);
  writeFile(modelFile,sm.toString(),jalopySettings);
  if (Validator.isNotNull(_serviceDir)) {
    modelFile=new File(_outputPath + "/model/" + entity.getName()+ ".java");
    if (modelFile.exists()) {
      System.out.println("Relocating " + modelFile);
      modelFile.delete();
    }
  }
}
