{
  String sqlPath=_portalRoot + "/sql";
  File sqlFile=new File(sqlPath + "/portal-tables.sql");
  if (!sqlFile.exists()) {
    FileUtil.write(sqlFile,StringPool.BLANK);
  }
  for (int i=0; i < _ejbList.size(); i++) {
    Entity entity=(Entity)_ejbList.get(i);
    List pkList=entity.getPKList();
    List regularColList=entity.getRegularColList();
    if (regularColList.size() > 0) {
      StringBuffer sb=new StringBuffer();
      sb.append(_CREATE_TABLE + entity.getTable() + " (\n");
      for (int j=0; j < regularColList.size(); j++) {
        EntityColumn col=(EntityColumn)regularColList.get(j);
        String colName=col.getName();
        String colType=col.getType();
        String colIdType=col.getIdType();
        sb.append("\t" + col.getDBName());
        sb.append(" ");
        if (colType.equalsIgnoreCase("boolean")) {
          sb.append("BOOLEAN");
        }
 else         if (colType.equalsIgnoreCase("double") || colType.equalsIgnoreCase("float")) {
          sb.append("DOUBLE");
        }
 else         if (colType.equals("int") || colType.equals("Integer") || colType.equalsIgnoreCase("long")|| colType.equalsIgnoreCase("short")) {
          sb.append("INTEGER");
        }
 else         if (colType.equals("String")) {
          Map hints=ModelHintsUtil.getHints(_packagePath + ".model." + entity.getName(),colName);
          int maxLength=75;
          if (hints != null) {
            maxLength=GetterUtil.getInteger((String)hints.get("max-length"),maxLength);
          }
          if (maxLength < 4000) {
            sb.append("VARCHAR(" + maxLength + ")");
          }
 else           if (maxLength == 4000) {
            sb.append("STRING");
          }
 else           if (maxLength > 4000) {
            sb.append("TEXT");
          }
        }
 else         if (colType.equals("Date")) {
          sb.append("DATE null");
        }
 else {
          sb.append("invalid");
        }
        if (col.isPrimary() || colName.equals("groupId") || colName.equals("companyId")|| colName.equals("userId")) {
          sb.append(" not null");
          if (col.isPrimary() && !entity.hasCompoundPK()) {
            sb.append(" primary key");
          }
        }
 else         if (colType.equals("String")) {
          sb.append(" null");
        }
        if (Validator.isNotNull(colIdType) && colIdType.equals("identity")) {
          sb.append(" IDENTITY");
        }
        if (((j + 1) != regularColList.size()) || (entity.hasCompoundPK())) {
          sb.append(",");
        }
        sb.append("\n");
      }
      if (entity.hasCompoundPK()) {
        sb.append("\tprimary key (");
        for (int k=0; k < pkList.size(); k++) {
          EntityColumn pk=(EntityColumn)pkList.get(k);
          sb.append(pk.getDBName());
          if ((k + 1) != pkList.size()) {
            sb.append(", ");
          }
        }
        sb.append(")\n");
      }
      sb.append(");");
      String newCreateTableString=sb.toString();
      _createSQLTables(sqlFile,newCreateTableString,entity,true);
      _createSQLTables(new File(sqlPath + "/update-4.1.0-4.2.0.sql"),newCreateTableString,entity,false);
    }
  }
}
