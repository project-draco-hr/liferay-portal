{
  XClass xClass=_getXClass(_outputPath + "/service/impl/" + entity.getName()+ "ServiceImpl.java");
  List methods=xClass.getMethods();
  StringBuffer sb=new StringBuffer();
  sb.append("package " + _packagePath + ".service.http;");
  if (_hasHttpMethods(xClass)) {
    sb.append("import " + _packagePath + ".service.spring."+ entity.getName()+ "ServiceUtil;");
  }
  sb.append("import com.liferay.portal.kernel.util.BooleanWrapper;");
  sb.append("import com.liferay.portal.kernel.util.DoubleWrapper;");
  sb.append("import com.liferay.portal.kernel.util.FloatWrapper;");
  sb.append("import com.liferay.portal.kernel.util.IntegerWrapper;");
  sb.append("import com.liferay.portal.kernel.util.LongWrapper;");
  sb.append("import com.liferay.portal.kernel.util.MethodWrapper;");
  sb.append("import com.liferay.portal.kernel.util.NullWrapper;");
  sb.append("import com.liferay.portal.kernel.util.ShortWrapper;");
  sb.append("import com.liferay.portal.kernel.util.StackTraceUtil;");
  sb.append("import com.liferay.portal.security.auth.HttpPrincipal;");
  sb.append("import com.liferay.portal.servlet.TunnelUtil;");
  sb.append("import com.liferay.util.ObjectValuePair;");
  sb.append("import org.apache.commons.logging.Log;");
  sb.append("import org.apache.commons.logging.LogFactory;");
  sb.append("public class " + entity.getName() + "ServiceHttp {");
  for (int i=0; i < methods.size(); i++) {
    XMethod xMethod=(XMethod)methods.get(i);
    String methodName=xMethod.getName();
    if (_isCustomMethod(xMethod) && xMethod.isPublic()) {
      XClass returnType=xMethod.getReturnType().getType();
      String returnTypeName=returnType.getQualifiedName() + xMethod.getReturnType().getDimensionAsString();
      sb.append("public static " + returnTypeName + " "+ methodName+ "(HttpPrincipal httpPrincipal");
      List parameters=xMethod.getParameters();
      for (int j=0; j < parameters.size(); j++) {
        XParameter xParameter=(XParameter)parameters.get(j);
        if (j == 0) {
          sb.append(", ");
        }
        sb.append(xParameter.getType().getQualifiedName() + xParameter.getDimensionAsString() + " "+ xParameter.getName());
        if ((j + 1) != parameters.size()) {
          sb.append(", ");
        }
      }
      sb.append(")");
      List thrownExceptions=xMethod.getThrownExceptions();
      Set newExceptions=new LinkedHashSet();
      for (int j=0; j < thrownExceptions.size(); j++) {
        XClass thrownException=(XClass)thrownExceptions.get(j);
        newExceptions.add(thrownException.getQualifiedName());
      }
      newExceptions.add("com.liferay.portal.SystemException");
      if (newExceptions.size() > 0) {
        sb.append(" throws ");
        Iterator itr=newExceptions.iterator();
        while (itr.hasNext()) {
          sb.append(itr.next());
          if (itr.hasNext()) {
            sb.append(", ");
          }
        }
      }
      sb.append("{");
      sb.append("try {");
      for (int j=0; j < parameters.size(); j++) {
        XParameter xParameter=(XParameter)parameters.get(j);
        String parameterTypeName=xParameter.getType().getQualifiedName() + xParameter.getDimensionAsString();
        sb.append("Object paramObj" + j + " = ");
        if (parameterTypeName.equals("boolean")) {
          sb.append("new BooleanWrapper(" + xParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("double")) {
          sb.append("new DoubleWrapper(" + xParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("float")) {
          sb.append("new FloatWrapper(" + xParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("int")) {
          sb.append("new IntegerWrapper(" + xParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("long")) {
          sb.append("new LongWrapper(" + xParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("short")) {
          sb.append("new ShortWrapper(" + xParameter.getName() + ");");
        }
 else {
          sb.append(xParameter.getName() + ";");
          sb.append("if (" + xParameter.getName() + " == null) {");
          sb.append("paramObj" + j + " = new NullWrapper(\""+ _getClassName(xParameter)+ "\");");
          sb.append("}");
        }
      }
      sb.append("MethodWrapper methodWrapper = new MethodWrapper(");
      sb.append(entity.getName() + "ServiceUtil.class.getName(),");
      sb.append("\"" + methodName + "\",");
      if (parameters.size() == 0) {
        sb.append("new Object[0]);");
      }
 else {
        sb.append("new Object[] {");
        for (int j=0; j < parameters.size(); j++) {
          sb.append("paramObj" + j);
          if ((j + 1) != parameters.size()) {
            sb.append(", ");
          }
        }
        sb.append("});");
      }
      if (!returnTypeName.equals("void")) {
        sb.append("Object returnObj = null;");
      }
      sb.append("try {");
      if (!returnTypeName.equals("void")) {
        sb.append("returnObj =");
      }
      sb.append("TunnelUtil.invoke(httpPrincipal, methodWrapper);");
      sb.append("}");
      sb.append("catch (Exception e) {");
      Iterator itr=newExceptions.iterator();
      while (itr.hasNext()) {
        String exceptionType=(String)itr.next();
        sb.append("if (e instanceof " + exceptionType + ") {");
        sb.append("throw (" + exceptionType + ")e;");
        sb.append("}");
      }
      sb.append("throw new com.liferay.portal.SystemException(e);");
      sb.append("}");
      if (!returnTypeName.equals("void")) {
        if (returnTypeName.equals("boolean")) {
          sb.append("return ((Boolean)returnObj).booleanValue();");
        }
 else         if (returnTypeName.equals("double")) {
          sb.append("return ((Double)returnObj).doubleValue();");
        }
 else         if (returnTypeName.equals("float")) {
          sb.append("return ((Float)returnObj).floatValue();");
        }
 else         if (returnTypeName.equals("int")) {
          sb.append("return ((Integer)returnObj).intValue();");
        }
 else         if (returnTypeName.equals("long")) {
          sb.append("return ((Long)returnObj).longValue();");
        }
 else         if (returnTypeName.equals("short")) {
          sb.append("return ((Short)returnObj).shortValue();");
        }
 else {
          sb.append("return (" + returnTypeName + ")returnObj;");
        }
      }
      sb.append("}");
      sb.append("catch (com.liferay.portal.SystemException se) {");
      sb.append("String stackTrace = StackTraceUtil.getStackTrace(se);");
      sb.append("_log.error(stackTrace);");
      sb.append("throw se;");
      sb.append("}");
      sb.append("}");
    }
  }
  if (sb.indexOf("_log.") != -1) {
    sb.append("private static Log _log = LogFactory.getLog(" + entity.getName() + "ServiceHttp.class);");
  }
  sb.append("}");
  File ejbFile=new File(_outputPath + "/service/http/" + entity.getName()+ "ServiceHttp.java");
  writeFile(ejbFile,sb.toString());
}
