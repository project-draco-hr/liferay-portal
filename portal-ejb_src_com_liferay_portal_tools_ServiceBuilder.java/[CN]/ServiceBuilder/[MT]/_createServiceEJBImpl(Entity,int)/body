{
  JavaClass javaClass=_getJavaClass(_serviceOutputPath + "/service/" + entity.getName()+ (sessionType != _REMOTE ? "Local" : "")+ "Service.java");
  JavaMethod[] methods=javaClass.getMethods();
  StringMaker sm=new StringMaker();
  sm.append("package " + _packagePath + ".service.ejb;");
  sm.append("import " + _packagePath + ".service."+ entity.getName()+ _getSessionTypeName(sessionType)+ "Service;");
  if (methods.length > 0) {
    sm.append("import " + _packagePath + ".service."+ entity.getName()+ _getSessionTypeName(sessionType)+ "ServiceFactory;");
  }
  sm.append("import javax.ejb.CreateException;");
  sm.append("import javax.ejb.SessionContext;");
  sm.append("import javax.ejb.SessionBean;");
  if (sessionType == _REMOTE) {
    sm.append("import com.liferay.portal.service.impl.PrincipalSessionBean;");
  }
  sm.append("public class " + entity.getName() + _getSessionTypeName(sessionType)+ "ServiceEJBImpl implements "+ entity.getName()+ _getSessionTypeName(sessionType)+ "Service, SessionBean {");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isConstructor() && javaMethod.isPublic() && _isCustomMethod(javaMethod)) {
      sm.append("public " + javaMethod.getReturns().getValue() + _getDimensions(javaMethod.getReturns())+ " "+ methodName+ "(");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sm.append(javaParameter.getType().getValue() + _getDimensions(javaParameter.getType()) + " "+ javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      Set newExceptions=new LinkedHashSet();
      for (int j=0; j < thrownExceptions.length; j++) {
        Type thrownException=thrownExceptions[j];
        newExceptions.add(thrownException.getValue());
      }
      if (newExceptions.size() > 0) {
        sm.append(" throws ");
        Iterator itr=newExceptions.iterator();
        while (itr.hasNext()) {
          sm.append(itr.next());
          if (itr.hasNext()) {
            sm.append(", ");
          }
        }
      }
      sm.append("{");
      if (sessionType == _REMOTE) {
        sm.append("PrincipalSessionBean.setThreadValues(_sc);");
      }
      if (!javaMethod.getReturns().getValue().equals("void")) {
        sm.append("return ");
      }
      sm.append(entity.getName() + _getSessionTypeName(sessionType) + "ServiceFactory.getTxImpl()."+ methodName+ "(");
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sm.append(javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(");");
      sm.append("}");
    }
  }
  sm.append("public void ejbCreate() throws CreateException {");
  sm.append("}");
  sm.append("public void ejbRemove() {");
  sm.append("}");
  sm.append("public void ejbActivate() {");
  sm.append("}");
  sm.append("public void ejbPassivate() {");
  sm.append("}");
  sm.append("public SessionContext getSessionContext() {");
  sm.append("return _sc;");
  sm.append("}");
  sm.append("public void setSessionContext(SessionContext sc) {");
  sm.append("_sc = sc;");
  sm.append("}");
  sm.append("private SessionContext _sc;");
  sm.append("}");
  File ejbFile=new File(_outputPath + "/service/ejb/" + entity.getName()+ _getSessionTypeName(sessionType)+ "ServiceEJBImpl.java");
  writeFile(ejbFile,sm.toString());
}
