{
  List columnList=entity.getColumnList();
  List finderList=entity.getFinderList();
  String pkClassName=entity.getPKClassName();
  String pkVarName=entity.getPKVarName();
  StringMaker sm=new StringMaker();
  sm.append("package " + _packagePath + ".service.persistence;");
  sm.append("import " + _packagePath + "."+ _getNoSuchEntityException(entity)+ "Exception;");
  sm.append("import " + _packagePath + ".model."+ entity.getName()+ ";");
  sm.append("import " + _packagePath + ".model.impl."+ entity.getName()+ "Impl;");
  sm.append("import com.liferay.portal.PortalException;");
  sm.append("import com.liferay.portal.SystemException;");
  sm.append("import com.liferay.portal.kernel.dao.DynamicQuery;");
  sm.append("import com.liferay.portal.kernel.dao.DynamicQueryInitializer;");
  sm.append("import com.liferay.portal.kernel.util.OrderByComparator;");
  sm.append("import com.liferay.portal.kernel.util.StringPool;");
  sm.append("import com.liferay.portal.service.persistence.BasePersistence;");
  sm.append("import com.liferay.portal.spring.hibernate.HibernateUtil;");
  sm.append("import com.liferay.util.StringMaker;");
  sm.append("import com.liferay.util.dao.hibernate.QueryPos;");
  sm.append("import com.liferay.util.dao.hibernate.QueryUtil;");
  sm.append("import java.sql.ResultSet;");
  sm.append("import java.sql.SQLException;");
  sm.append("import java.sql.Types;");
  sm.append("import java.util.Collection;");
  sm.append("import java.util.Collections;");
  sm.append("import java.util.Date;");
  sm.append("import java.util.HashSet;");
  sm.append("import java.util.Iterator;");
  sm.append("import java.util.List;");
  sm.append("import java.util.Set;");
  sm.append("import javax.sql.DataSource;");
  sm.append("import org.apache.commons.logging.Log;");
  sm.append("import org.apache.commons.logging.LogFactory;");
  sm.append("import org.hibernate.Hibernate;");
  sm.append("import org.hibernate.HibernateException;");
  sm.append("import org.hibernate.ObjectNotFoundException;");
  sm.append("import org.hibernate.Query;");
  sm.append("import org.hibernate.Session;");
  sm.append("import org.hibernate.SQLQuery;");
  sm.append("import org.springframework.dao.DataAccessException;");
  sm.append("import org.springframework.jdbc.core.SqlParameter;");
  sm.append("import org.springframework.jdbc.object.MappingSqlQuery;");
  sm.append("import org.springframework.jdbc.object.SqlUpdate;");
  sm.append("public class " + entity.getName() + "Persistence extends BasePersistence {");
  sm.append("public " + entity.getName() + " create("+ entity.getPKClassName()+ " "+ pkVarName+ ") {");
  sm.append(entity.getName() + " " + entity.getVarName()+ " = new "+ entity.getName()+ "Impl();");
  sm.append(entity.getVarName() + ".setNew(true);");
  sm.append(entity.getVarName() + ".setPrimaryKey(" + pkVarName+ ");");
  sm.append("return " + entity.getVarName() + ";");
  sm.append("}");
  sm.append("public " + entity.getName() + " remove("+ pkClassName+ " "+ pkVarName+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
  sm.append("Session session = null;");
  sm.append("try {");
  sm.append("session = openSession();");
  sm.append(entity.getName() + " " + entity.getVarName()+ " = ("+ entity.getName()+ ")session.get("+ entity.getName()+ "Impl.class, ");
  if (entity.hasPrimitivePK()) {
    sm.append("new ");
    sm.append(_getPrimitiveObj(entity.getPKClassName()));
    sm.append("(");
  }
  sm.append(pkVarName);
  if (entity.hasPrimitivePK()) {
    sm.append(")");
  }
  sm.append(");");
  sm.append("if (" + entity.getVarName() + " == null) {");
  sm.append("if (_log.isWarnEnabled()) {");
  sm.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + "+ pkVarName+ ");");
  sm.append("}");
  sm.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + "+ pkVarName+ ");");
  sm.append("}");
  sm.append("return remove(" + entity.getVarName() + ");");
  sm.append("}");
  sm.append("catch (HibernateException he) {");
  sm.append("throw new SystemException(he);");
  sm.append("}");
  sm.append("finally {");
  sm.append("closeSession(session);");
  sm.append("}");
  sm.append("}");
  sm.append("public " + entity.getName() + " remove("+ entity.getName()+ " "+ entity.getVarName()+ ") throws SystemException {");
  sm.append("Session session = null;");
  sm.append("try {");
  sm.append("session = openSession();");
  sm.append("session.delete(" + entity.getVarName() + ");");
  sm.append("session.flush();");
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if (col.isCollection() && col.isMappingManyToMany()) {
      Entity tempEntity=getEntity(col.getEJBName());
      sm.append("clear" + tempEntity.getNames() + ".clear("+ entity.getVarName()+ ".getPrimaryKey());");
    }
  }
  sm.append("return " + entity.getVarName() + ";");
  sm.append("}");
  sm.append("catch (HibernateException he) {");
  sm.append("throw new SystemException(he);");
  sm.append("}");
  sm.append("finally {");
  sm.append("closeSession(session);");
  sm.append("}");
  sm.append("}");
  sm.append("public " + _packagePath + ".model."+ entity.getName()+ " update("+ _packagePath+ ".model."+ entity.getName()+ " "+ entity.getVarName()+ ") throws SystemException {");
  sm.append("return update(" + entity.getVarName() + ", false);");
  sm.append("}");
  sm.append("public " + _packagePath + ".model."+ entity.getName()+ " update("+ _packagePath+ ".model."+ entity.getName()+ " "+ entity.getVarName()+ ", boolean saveOrUpdate) throws SystemException {");
  sm.append("Session session = null;");
  sm.append("try {");
  sm.append("session = openSession();");
  sm.append("if (saveOrUpdate) {");
  sm.append("session.saveOrUpdate(" + entity.getVarName() + ");");
  sm.append("}");
  sm.append("else {");
  sm.append("if (" + entity.getVarName() + ".isNew()) {");
  sm.append("session.save(" + entity.getVarName() + ");");
  sm.append("}");
  sm.append("}");
  sm.append("session.flush();");
  sm.append(entity.getVarName() + ".setNew(false);");
  sm.append("return " + entity.getVarName() + ";");
  sm.append("}");
  sm.append("catch (HibernateException he) {");
  sm.append("throw new SystemException(he);");
  sm.append("}");
  sm.append("finally {");
  sm.append("closeSession(session);");
  sm.append("}");
  sm.append("}");
  sm.append("public " + entity.getName() + " findByPrimaryKey("+ pkClassName+ " "+ pkVarName+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
  sm.append(entity.getName() + " " + entity.getVarName()+ " = fetchByPrimaryKey("+ pkVarName+ ");");
  sm.append("if (" + entity.getVarName() + " == null) {");
  sm.append("if (_log.isWarnEnabled()) {");
  sm.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + "+ pkVarName+ ");");
  sm.append("}");
  sm.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + "+ pkVarName+ ");");
  sm.append("}");
  sm.append("return " + entity.getVarName() + ";");
  sm.append("}");
  sm.append("public " + entity.getName() + " fetchByPrimaryKey("+ pkClassName+ " "+ pkVarName+ ") throws SystemException {");
  sm.append("Session session = null;");
  sm.append("try {");
  sm.append("session = openSession();");
  sm.append("return (" + entity.getName() + ")session.get("+ entity.getName()+ "Impl.class, ");
  if (entity.hasPrimitivePK()) {
    sm.append("new ");
    sm.append(_getPrimitiveObj(entity.getPKClassName()));
    sm.append("(");
  }
  sm.append(pkVarName);
  if (entity.hasPrimitivePK()) {
    sm.append(")");
  }
  sm.append(");");
  sm.append("}");
  sm.append("catch (HibernateException he) {");
  sm.append("throw new SystemException(he);");
  sm.append("}");
  sm.append("finally {");
  sm.append("closeSession(session);");
  sm.append("}");
  sm.append("}");
  for (int i=0; i < finderList.size(); i++) {
    EntityFinder finder=(EntityFinder)finderList.get(i);
    List finderColsList=finder.getColumns();
    if (!finder.isCollection()) {
      sm.append("public " + entity.getName() + " findBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(") throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
      sm.append(entity.getName() + " " + entity.getVarName()+ " = fetchBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(");");
      sm.append("if (" + entity.getVarName() + " == null) {");
      sm.append("StringMaker msg = new StringMaker();");
      sm.append("msg.append(\"No " + entity.getName() + " exists with the key \");");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (j == 0) {
          sm.append("msg.append(StringPool.OPEN_CURLY_BRACE);");
        }
        sm.append("msg.append(\"" + col.getName() + "=\");");
        sm.append("msg.append(" + col.getName() + ");");
        if ((j + 1) != finderColsList.size()) {
          sm.append("msg.append(\", \");");
        }
        if ((j + 1) == finderColsList.size()) {
          sm.append("msg.append(StringPool.CLOSE_CURLY_BRACE);");
        }
      }
      sm.append("if (_log.isWarnEnabled()) {");
      sm.append("_log.warn(msg.toString());");
      sm.append("}");
      sm.append("throw new " + _getNoSuchEntityException(entity) + "Exception(msg.toString());");
      sm.append("}");
      sm.append("return " + entity.getVarName() + ";");
      sm.append("}");
      sm.append("public " + entity.getName() + " fetchBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(") throws SystemException {");
      sm.append("Session session = null;");
      sm.append("try {");
      sm.append("session = openSession();");
      sm.append("StringMaker query = new StringMaker();");
      sm.append("query.append(\"FROM " + _packagePath + ".model."+ entity.getName()+ " WHERE \");");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (_requiresNullCheck(col)) {
          _appendNullLogic(col,sm);
        }
        sm.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
        if (_requiresNullCheck(col)) {
          sm.append("}");
        }
        if ((j + 1) != finderColsList.size()) {
          sm.append("query.append(\" AND \");");
        }
 else         if (Validator.isNull(finder.getWhere())) {
          sm.append("query.append(\" \");");
        }
 else {
          sm.append("query.append(\" AND " + finder.getWhere() + " \");");
        }
      }
      EntityOrder order=entity.getOrder();
      if (order != null) {
        List orderList=order.getColumns();
        sm.append("query.append(\"ORDER BY \");");
        for (int j=0; j < orderList.size(); j++) {
          EntityColumn col=(EntityColumn)orderList.get(j);
          sm.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
          if ((j + 1) != orderList.size()) {
            sm.append(".append(\", \");");
          }
 else {
            sm.append(";");
          }
        }
      }
      sm.append("Query q = session.createQuery(query.toString());");
      sm.append("q.setCacheable(true);");
      sm.append("int queryPos = 0;");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (_requiresNullCheck(col)) {
          sm.append("if (" + col.getName() + " != null) {");
        }
        String colType=col.getType();
        String colObjType=colType;
        if (col.isPrimitiveType()) {
          colObjType=_getPrimitiveObj(colType);
        }
        sm.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
        if (colType.equals("Boolean")) {
          sm.append(".booleanValue()");
        }
 else         if (colType.equals("Double")) {
          sm.append(".doubleValue()");
        }
 else         if (colType.equals("Float")) {
          sm.append(".floatValue()");
        }
 else         if (colType.equals("Integer")) {
          sm.append(".intValue()");
        }
 else         if (colType.equals("Long")) {
          sm.append(".longValue()");
        }
 else         if (colType.equals("Short")) {
          sm.append(".shortValue()");
        }
        sm.append(");");
        if (_requiresNullCheck(col)) {
          sm.append("}");
        }
      }
      sm.append("List list = q.list();");
      sm.append("if (list.size() == 0) {");
      sm.append("return null;");
      sm.append("}");
      sm.append(entity.getName() + " " + entity.getVarName()+ " = ("+ entity.getName()+ ")list.get(0);");
      sm.append("return " + entity.getVarName() + ";");
      sm.append("}");
      sm.append("catch (HibernateException he) {");
      sm.append("throw new SystemException(he);");
      sm.append("}");
      sm.append("finally {");
      sm.append("closeSession(session);");
      sm.append("}");
      sm.append("}");
    }
 else {
      sm.append("public List findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(") throws SystemException {");
      sm.append("Session session = null;");
      sm.append("try {");
      sm.append("session = openSession();");
      sm.append("StringMaker query = new StringMaker();");
      sm.append("query.append(\"FROM " + _packagePath + ".model."+ entity.getName()+ " WHERE \");");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (_requiresNullCheck(col)) {
          _appendNullLogic(col,sm);
        }
        sm.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
        if (_requiresNullCheck(col)) {
          sm.append("}");
        }
        if ((j + 1) != finderColsList.size()) {
          sm.append("query.append(\" AND \");");
        }
 else         if (Validator.isNull(finder.getWhere())) {
          sm.append("query.append(\" \");");
        }
 else {
          sm.append("query.append(\" AND " + finder.getWhere() + " \");");
        }
      }
      EntityOrder order=entity.getOrder();
      if (order != null) {
        List orderList=order.getColumns();
        sm.append("query.append(\"ORDER BY \");");
        for (int j=0; j < orderList.size(); j++) {
          EntityColumn col=(EntityColumn)orderList.get(j);
          sm.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
          if ((j + 1) != orderList.size()) {
            sm.append(".append(\", \");");
          }
 else {
            sm.append(";");
          }
        }
      }
      sm.append("Query q = session.createQuery(query.toString());");
      sm.append("q.setCacheable(true);");
      sm.append("int queryPos = 0;");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (_requiresNullCheck(col)) {
          sm.append("if (" + col.getName() + " != null) {");
        }
        String colType=col.getType();
        String colObjType=colType;
        if (col.isPrimitiveType()) {
          colObjType=_getPrimitiveObj(colType);
        }
        sm.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
        if (colType.equals("Boolean")) {
          sm.append(".booleanValue()");
        }
 else         if (colType.equals("Double")) {
          sm.append(".doubleValue()");
        }
 else         if (colType.equals("Float")) {
          sm.append(".floatValue()");
        }
 else         if (colType.equals("Integer")) {
          sm.append(".intValue()");
        }
 else         if (colType.equals("Long")) {
          sm.append(".longValue()");
        }
 else         if (colType.equals("Short")) {
          sm.append(".shortValue()");
        }
        sm.append(");");
        if (_requiresNullCheck(col)) {
          sm.append("}");
        }
      }
      sm.append("return q.list();");
      sm.append("}");
      sm.append("catch (HibernateException he) {");
      sm.append("throw new SystemException(he);");
      sm.append("}");
      sm.append("finally {");
      sm.append("closeSession(session);");
      sm.append("}");
      sm.append("}");
      sm.append("public List findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName()+ ", ");
      }
      sm.append("int begin, int end) throws SystemException {");
      sm.append("return findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append("" + col.getName() + ", ");
      }
      sm.append("begin, end, null);");
      sm.append("}");
      sm.append("public List findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName()+ ", ");
      }
      sm.append("int begin, int end, OrderByComparator obc) throws SystemException {");
      sm.append("Session session = null;");
      sm.append("try {");
      sm.append("session = openSession();");
      sm.append("StringMaker query = new StringMaker();");
      sm.append("query.append(\"FROM " + _packagePath + ".model."+ entity.getName()+ " WHERE \");");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (_requiresNullCheck(col)) {
          _appendNullLogic(col,sm);
        }
        sm.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
        if (_requiresNullCheck(col)) {
          sm.append("}");
        }
        if ((j + 1) != finderColsList.size()) {
          sm.append("query.append(\" AND \");");
        }
 else         if (Validator.isNull(finder.getWhere())) {
          sm.append("query.append(\" \");");
        }
 else {
          sm.append("query.append(\" AND " + finder.getWhere() + " \");");
        }
      }
      sm.append("if (obc != null) {");
      sm.append("query.append(\"ORDER BY \");");
      sm.append("query.append(obc.getOrderBy());");
      sm.append("}");
      if (order != null) {
        List orderList=order.getColumns();
        sm.append("else {");
        sm.append("query.append(\"ORDER BY \");");
        for (int j=0; j < orderList.size(); j++) {
          EntityColumn col=(EntityColumn)orderList.get(j);
          sm.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
          if ((j + 1) != orderList.size()) {
            sm.append(".append(\", \");");
          }
 else {
            sm.append(";");
          }
        }
        sm.append("}");
      }
      sm.append("Query q = session.createQuery(query.toString());");
      sm.append("q.setCacheable(true);");
      sm.append("int queryPos = 0;");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (_requiresNullCheck(col)) {
          sm.append("if (" + col.getName() + " != null) {");
        }
        String colType=col.getType();
        String colObjType=colType;
        if (col.isPrimitiveType()) {
          colObjType=_getPrimitiveObj(colType);
        }
        sm.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
        if (colType.equals("Boolean")) {
          sm.append(".booleanValue()");
        }
 else         if (colType.equals("Double")) {
          sm.append(".doubleValue()");
        }
 else         if (colType.equals("Float")) {
          sm.append(".floatValue()");
        }
 else         if (colType.equals("Integer")) {
          sm.append(".intValue()");
        }
 else         if (colType.equals("Long")) {
          sm.append(".longValue()");
        }
 else         if (colType.equals("Short")) {
          sm.append(".shortValue()");
        }
        sm.append(");");
        if (_requiresNullCheck(col)) {
          sm.append("}");
        }
      }
      sm.append("return QueryUtil.list(q, getDialect(), begin, end);");
      sm.append("}");
      sm.append("catch (HibernateException he) {");
      sm.append("throw new SystemException(he);");
      sm.append("}");
      sm.append("finally {");
      sm.append("closeSession(session);");
      sm.append("}");
      sm.append("}");
      sm.append("public " + entity.getName() + " findBy"+ finder.getName()+ "_First(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName()+ ", ");
      }
      sm.append("OrderByComparator obc) throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
      sm.append("List list = findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append("" + col.getName() + ", ");
      }
      sm.append("0, 1, obc);");
      sm.append("if (list.size() == 0) {");
      sm.append("StringMaker msg = new StringMaker();");
      sm.append("msg.append(\"No " + entity.getName() + " exists with the key \");");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (j == 0) {
          sm.append("msg.append(StringPool.OPEN_CURLY_BRACE);");
        }
        sm.append("msg.append(\"" + col.getName() + "=\");");
        sm.append("msg.append(" + col.getName() + ");");
        if ((j + 1) != finderColsList.size()) {
          sm.append("msg.append(\", \");");
        }
        if ((j + 1) == finderColsList.size()) {
          sm.append("msg.append(StringPool.CLOSE_CURLY_BRACE);");
        }
      }
      sm.append("throw new " + _getNoSuchEntityException(entity) + "Exception(msg.toString());");
      sm.append("}");
      sm.append("else {");
      sm.append("return (" + entity.getName() + ")list.get(0);");
      sm.append("}");
      sm.append("}");
      sm.append("public " + entity.getName() + " findBy"+ finder.getName()+ "_Last(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName()+ ", ");
      }
      sm.append("OrderByComparator obc) throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
      sm.append("int count = countBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append("" + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(");");
      sm.append("List list = findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append("" + col.getName() + ", ");
      }
      sm.append("count - 1, count, obc);");
      sm.append("if (list.size() == 0) {");
      sm.append("StringMaker msg = new StringMaker();");
      sm.append("msg.append(\"No " + entity.getName() + " exists with the key \");");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (j == 0) {
          sm.append("msg.append(StringPool.OPEN_CURLY_BRACE);");
        }
        sm.append("msg.append(\"" + col.getName() + "=\");");
        sm.append("msg.append(" + col.getName() + ");");
        if ((j + 1) != finderColsList.size()) {
          sm.append("msg.append(\", \");");
        }
        if ((j + 1) == finderColsList.size()) {
          sm.append("msg.append(StringPool.CLOSE_CURLY_BRACE);");
        }
      }
      sm.append("throw new " + _getNoSuchEntityException(entity) + "Exception(msg.toString());");
      sm.append("}");
      sm.append("else {");
      sm.append("return (" + entity.getName() + ")list.get(0);");
      sm.append("}");
      sm.append("}");
      sm.append("public " + entity.getName() + "[] findBy"+ finder.getName()+ "_PrevAndNext("+ pkClassName+ " "+ pkVarName+ ", ");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName()+ ", ");
      }
      sm.append("OrderByComparator obc) throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
      sm.append(entity.getName() + " " + entity.getVarName()+ " = findByPrimaryKey("+ pkVarName+ ");");
      sm.append("int count = countBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append("" + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(");");
      sm.append("Session session = null;");
      sm.append("try {");
      sm.append("session = openSession();");
      sm.append("StringMaker query = new StringMaker();");
      sm.append("query.append(\"FROM " + _packagePath + ".model."+ entity.getName()+ " WHERE \");");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (_requiresNullCheck(col)) {
          _appendNullLogic(col,sm);
        }
        sm.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
        if (_requiresNullCheck(col)) {
          sm.append("}");
        }
        if ((j + 1) != finderColsList.size()) {
          sm.append("query.append(\" AND \");");
        }
 else         if (Validator.isNull(finder.getWhere())) {
          sm.append("query.append(\" \");");
        }
 else {
          sm.append("query.append(\" AND " + finder.getWhere() + " \");");
        }
      }
      sm.append("if (obc != null) {");
      sm.append("query.append(\"ORDER BY \");");
      sm.append("query.append(obc.getOrderBy());");
      sm.append("}");
      if (order != null) {
        List orderList=order.getColumns();
        sm.append("else {");
        sm.append("query.append(\"ORDER BY \");");
        for (int j=0; j < orderList.size(); j++) {
          EntityColumn col=(EntityColumn)orderList.get(j);
          sm.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
          if ((j + 1) != orderList.size()) {
            sm.append(".append(\", \");");
          }
 else {
            sm.append(";");
          }
        }
        sm.append("}");
      }
      sm.append("Query q = session.createQuery(query.toString());");
      sm.append("q.setCacheable(true);");
      sm.append("int queryPos = 0;");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (_requiresNullCheck(col)) {
          sm.append("if (" + col.getName() + " != null) {");
        }
        String colType=col.getType();
        String colObjType=colType;
        if (col.isPrimitiveType()) {
          colObjType=_getPrimitiveObj(colType);
        }
        sm.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
        if (colType.equals("Boolean")) {
          sm.append(".booleanValue()");
        }
 else         if (colType.equals("Double")) {
          sm.append(".doubleValue()");
        }
 else         if (colType.equals("Float")) {
          sm.append(".floatValue()");
        }
 else         if (colType.equals("Integer")) {
          sm.append(".intValue()");
        }
 else         if (colType.equals("Long")) {
          sm.append(".longValue()");
        }
 else         if (colType.equals("Short")) {
          sm.append(".shortValue()");
        }
        sm.append(");");
        if (_requiresNullCheck(col)) {
          sm.append("}");
        }
      }
      sm.append("Object[] objArray = QueryUtil.getPrevAndNext(q, count, obc, " + entity.getVarName() + ");");
      sm.append(entity.getName() + "[] array = new " + entity.getName()+ "Impl[3];");
      sm.append("array[0] = (" + entity.getName() + ")objArray[0];");
      sm.append("array[1] = (" + entity.getName() + ")objArray[1];");
      sm.append("array[2] = (" + entity.getName() + ")objArray[2];");
      sm.append("return array;");
      sm.append("}");
      sm.append("catch (HibernateException he) {");
      sm.append("throw new SystemException(he);");
      sm.append("}");
      sm.append("finally {");
      sm.append("closeSession(session);");
      sm.append("}");
      sm.append("}");
    }
  }
  sm.append("public List findWithDynamicQuery(DynamicQueryInitializer queryInitializer) throws SystemException {");
  sm.append("Session session = null;");
  sm.append("try {");
  sm.append("session = openSession();");
  sm.append("DynamicQuery query = queryInitializer.initialize(session);");
  sm.append("return query.list();");
  sm.append("}");
  sm.append("catch (HibernateException he) {");
  sm.append("throw new SystemException(he);");
  sm.append("}");
  sm.append("finally {");
  sm.append("closeSession(session);");
  sm.append("}");
  sm.append("}");
  sm.append("public List findWithDynamicQuery(DynamicQueryInitializer queryInitializer, int begin, int end) throws SystemException {");
  sm.append("Session session = null;");
  sm.append("try {");
  sm.append("session = openSession();");
  sm.append("DynamicQuery query = queryInitializer.initialize(session);");
  sm.append("query.setLimit(begin, end);");
  sm.append("return query.list();");
  sm.append("}");
  sm.append("catch (HibernateException he) {");
  sm.append("throw new SystemException(he);");
  sm.append("}");
  sm.append("finally {");
  sm.append("closeSession(session);");
  sm.append("}");
  sm.append("}");
  sm.append("public List findAll() throws SystemException {");
  sm.append("return findAll(QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);");
  sm.append("}");
  sm.append("public List findAll(int begin, int end) throws SystemException {");
  sm.append("return findAll(begin, end, null);");
  sm.append("}");
  sm.append("public List findAll(int begin, int end, OrderByComparator obc) throws SystemException {");
  sm.append("Session session = null;");
  sm.append("try {");
  sm.append("session = openSession();");
  sm.append("StringMaker query = new StringMaker();");
  sm.append("query.append(\"FROM " + _packagePath + ".model."+ entity.getName()+ " \");");
  sm.append("if (obc != null) {");
  sm.append("query.append(\"ORDER BY \");");
  sm.append("query.append(obc.getOrderBy());");
  sm.append("}");
  EntityOrder order=entity.getOrder();
  if (order != null) {
    List orderList=order.getColumns();
    sm.append("else {");
    sm.append("query.append(\"ORDER BY \");");
    for (int j=0; j < orderList.size(); j++) {
      EntityColumn col=(EntityColumn)orderList.get(j);
      sm.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
      if ((j + 1) != orderList.size()) {
        sm.append(".append(\", \");");
      }
 else {
        sm.append(";");
      }
    }
    sm.append("}");
  }
  sm.append("Query q = session.createQuery(query.toString());");
  sm.append("q.setCacheable(true);");
  sm.append("return QueryUtil.list(q, getDialect(), begin, end);");
  sm.append("}");
  sm.append("catch (HibernateException he) {");
  sm.append("throw new SystemException(he);");
  sm.append("}");
  sm.append("finally {");
  sm.append("closeSession(session);");
  sm.append("}");
  sm.append("}");
  for (int i=0; i < finderList.size(); i++) {
    EntityFinder finder=(EntityFinder)finderList.get(i);
    List finderColsList=finder.getColumns();
    if (!finder.isCollection()) {
      sm.append("public void removeBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(") throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
      sm.append(entity.getName() + " " + entity.getVarName()+ " = findBy"+ finder.getName()+ "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(");");
      sm.append("remove(" + entity.getVarName() + ");");
      sm.append("}");
    }
 else {
      sm.append("public void removeBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getType() + " " + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(") throws SystemException {");
      sm.append("Iterator itr = findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sm.append(col.getName());
        if ((j + 1) != finderColsList.size()) {
          sm.append(", ");
        }
      }
      sm.append(").iterator();");
      sm.append("while (itr.hasNext()) {");
      sm.append(entity.getName() + " " + entity.getVarName()+ " = ("+ entity.getName()+ ")itr.next();");
      sm.append("remove(" + entity.getVarName() + ");");
      sm.append("}");
      sm.append("}");
    }
  }
  sm.append("public void removeAll() throws SystemException {");
  sm.append("Iterator itr = findAll().iterator();");
  sm.append("while (itr.hasNext()) {");
  sm.append("remove((" + entity.getName() + ")itr.next());");
  sm.append("}");
  sm.append("}");
  for (int i=0; i < finderList.size(); i++) {
    EntityFinder finder=(EntityFinder)finderList.get(i);
    List finderColsList=finder.getColumns();
    sm.append("public int countBy" + finder.getName() + "(");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      sm.append(col.getType() + " " + col.getName());
      if ((j + 1) != finderColsList.size()) {
        sm.append(", ");
      }
    }
    sm.append(") throws SystemException {");
    sm.append("Session session = null;");
    sm.append("try {");
    sm.append("session = openSession();");
    sm.append("StringMaker query = new StringMaker();");
    sm.append("query.append(\"SELECT COUNT(*) \");");
    sm.append("query.append(\"FROM " + _packagePath + ".model."+ entity.getName()+ " WHERE \");");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      if (_requiresNullCheck(col)) {
        _appendNullLogic(col,sm);
      }
      sm.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
      if (_requiresNullCheck(col)) {
        sm.append("}");
      }
      if ((j + 1) != finderColsList.size()) {
        sm.append("query.append(\" AND \");");
      }
 else       if (Validator.isNull(finder.getWhere())) {
        sm.append("query.append(\" \");");
      }
 else {
        sm.append("query.append(\" AND " + finder.getWhere() + " \");");
      }
    }
    sm.append("Query q = session.createQuery(query.toString());");
    sm.append("q.setCacheable(true);");
    sm.append("int queryPos = 0;");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      if (_requiresNullCheck(col)) {
        sm.append("if (" + col.getName() + " != null) {");
      }
      String colType=col.getType();
      String colObjType=colType;
      if (col.isPrimitiveType()) {
        colObjType=_getPrimitiveObj(colType);
      }
      sm.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
      if (colType.equals("Boolean")) {
        sm.append(".booleanValue()");
      }
 else       if (colType.equals("Double")) {
        sm.append(".doubleValue()");
      }
 else       if (colType.equals("Float")) {
        sm.append(".floatValue()");
      }
 else       if (colType.equals("Integer")) {
        sm.append(".intValue()");
      }
 else       if (colType.equals("Long")) {
        sm.append(".longValue()");
      }
 else       if (colType.equals("Short")) {
        sm.append(".shortValue()");
      }
      sm.append(");");
      if (_requiresNullCheck(col)) {
        sm.append("}");
      }
    }
    sm.append("Iterator itr = q.list().iterator();");
    sm.append("if (itr.hasNext()) {");
    sm.append("Long count = (Long)itr.next();");
    sm.append("if (count != null) {");
    sm.append("return count.intValue();");
    sm.append("}");
    sm.append("}");
    sm.append("return 0;");
    sm.append("}");
    sm.append("catch (HibernateException he) {");
    sm.append("throw new SystemException(he);");
    sm.append("}");
    sm.append("finally {");
    sm.append("closeSession(session);");
    sm.append("}");
    sm.append("}");
  }
  sm.append("public int countAll() throws SystemException {");
  sm.append("Session session = null;");
  sm.append("try {");
  sm.append("session = openSession();");
  sm.append("StringMaker query = new StringMaker();");
  sm.append("query.append(\"SELECT COUNT(*) \");");
  sm.append("query.append(\"FROM " + _packagePath + ".model."+ entity.getName()+ "\");");
  sm.append("Query q = session.createQuery(query.toString());");
  sm.append("q.setCacheable(true);");
  sm.append("Iterator itr = q.list().iterator();");
  sm.append("if (itr.hasNext()) {");
  sm.append("Long count = (Long)itr.next();");
  sm.append("if (count != null) {");
  sm.append("return count.intValue();");
  sm.append("}");
  sm.append("}");
  sm.append("return 0;");
  sm.append("}");
  sm.append("catch (HibernateException he) {");
  sm.append("throw new SystemException(he);");
  sm.append("}");
  sm.append("finally {");
  sm.append("closeSession(session);");
  sm.append("}");
  sm.append("}");
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if ((col.isCollection()) && (col.isMappingManyToMany() || col.isMappingOneToMany())) {
      Entity tempEntity=getEntity(col.getEJBName());
      EntityOrder tempOrder=tempEntity.getOrder();
      sm.append("public List get" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk) throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
      sm.append("return get" + tempEntity.getNames() + "(pk, QueryUtil.ALL_POS, QueryUtil.ALL_POS);");
      sm.append("}");
      sm.append("public List get" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, int begin, int end) throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
      sm.append("return get" + tempEntity.getNames() + "(pk, begin, end, null);");
      sm.append("}");
      sm.append("public List get" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, int begin, int end, OrderByComparator obc) throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
      sm.append("Session session = null;");
      sm.append("try {");
      sm.append("session = HibernateUtil.openSession();");
      sm.append("StringMaker sm = new StringMaker();");
      sm.append("sm.append(_SQL_GET" + tempEntity.getName().toUpperCase() + "S);");
      sm.append("if (obc != null) {");
      sm.append("sm.append(\"ORDER BY \");");
      sm.append("sm.append(obc.getOrderBy());");
      sm.append("}");
      if (tempOrder != null) {
        List tempOrderList=tempOrder.getColumns();
        sm.append("else {");
        sm.append("sm.append(\"ORDER BY \");");
        for (int j=0; j < tempOrderList.size(); j++) {
          EntityColumn tempOrderCol=(EntityColumn)tempOrderList.get(j);
          sm.append("sm.append(\"" + tempEntity.getTable() + "."+ tempOrderCol.getDBName()+ " "+ (tempOrderCol.isOrderByAscending() ? "ASC" : "DESC")+ "\");");
          if ((j + 1) != tempOrderList.size()) {
            sm.append("sm.append(\", \");");
          }
        }
        sm.append("}");
      }
      sm.append("String sql = sm.toString();");
      sm.append("SQLQuery q = session.createSQLQuery(sql);");
      sm.append("q.setCacheable(false);");
      sm.append("q.addEntity(\"" + tempEntity.getTable() + "\", "+ tempEntity.getPackagePath()+ ".model.impl."+ tempEntity.getName()+ "Impl.class);");
      sm.append("QueryPos qPos = QueryPos.getInstance(q);");
      sm.append("qPos.add(pk);");
      sm.append("return QueryUtil.list(q, HibernateUtil.getDialect(), begin, end);");
      sm.append("}");
      sm.append("catch (Exception e) {");
      sm.append("throw new SystemException(e);");
      sm.append("}");
      sm.append("finally {");
      sm.append("HibernateUtil.closeSession(session);");
      sm.append("}");
      sm.append("}");
      sm.append("public int get" + tempEntity.getNames() + "Size("+ entity.getPKClassName()+ " pk) throws SystemException {");
      sm.append("Session session = null;");
      sm.append("try {");
      sm.append("session = openSession();");
      sm.append("SQLQuery q = session.createSQLQuery(_SQL_GET" + tempEntity.getName().toUpperCase() + "SSIZE);");
      sm.append("q.setCacheable(false);");
      sm.append("q.addScalar(HibernateUtil.getCountColumnName(), Hibernate.LONG);");
      sm.append("QueryPos qPos = QueryPos.getInstance(q);");
      sm.append("qPos.add(pk);");
      sm.append("Iterator itr = q.list().iterator();");
      sm.append("if (itr.hasNext()) {");
      sm.append("Long count = (Long)itr.next();");
      sm.append("if (count != null) {");
      sm.append("return count.intValue();");
      sm.append("}");
      sm.append("}");
      sm.append("return 0;");
      sm.append("}");
      sm.append("catch (HibernateException he) {");
      sm.append("throw new SystemException(he);");
      sm.append("}");
      sm.append("finally {");
      sm.append("closeSession(session);");
      sm.append("}");
      sm.append("}");
      sm.append("public boolean contains" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ " "+ tempEntity.getVarName()+ "PK) throws SystemException {");
      sm.append("try {");
      sm.append("return contains" + tempEntity.getName() + ".contains(pk, "+ tempEntity.getVarName()+ "PK);");
      sm.append("}");
      sm.append("catch (DataAccessException dae) {");
      sm.append("throw new SystemException(dae);");
      sm.append("}");
      sm.append("}");
      sm.append("public boolean contains" + tempEntity.getName() + "s("+ entity.getPKClassName()+ " pk) throws SystemException {");
      sm.append("if (get" + tempEntity.getNames() + "Size(pk) > 0) {");
      sm.append("return true;");
      sm.append("}");
      sm.append("else {");
      sm.append("return false;");
      sm.append("}");
      sm.append("}");
      if (col.isMappingManyToMany()) {
        sm.append("public void add" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ " "+ tempEntity.getVarName()+ "PK) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("add" + tempEntity.getName() + ".add(pk, "+ tempEntity.getVarName()+ "PK);");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void add" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ " "+ tempEntity.getVarName()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("add" + tempEntity.getName() + ".add(pk, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void add" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ "[] "+ tempEntity.getVarName()+ "PKs) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("for (int i = 0; i < " + tempEntity.getVarName() + "PKs.length; i++) {");
        sm.append("add" + tempEntity.getName() + ".add(pk, "+ tempEntity.getVarName()+ "PKs[i]);");
        sm.append("}");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void add" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, List "+ tempEntity.getVarNames()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("for (int i = 0; i < " + tempEntity.getVarNames() + ".size(); i++) {");
        sm.append(tempEntity.getPackagePath() + ".model." + tempEntity.getName()+ " "+ tempEntity.getVarName()+ " = ("+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ ")"+ tempEntity.getVarNames()+ ".get(i);");
        sm.append("add" + tempEntity.getName() + ".add(pk, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
        sm.append("}");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void clear" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk) throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("clear" + tempEntity.getNames() + ".clear(pk);");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void remove" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ " "+ tempEntity.getVarName()+ "PK) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("remove" + tempEntity.getName() + ".remove(pk, "+ tempEntity.getVarName()+ "PK);");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void remove" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ " "+ tempEntity.getVarName()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("remove" + tempEntity.getName() + ".remove(pk, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void remove" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ "[] "+ tempEntity.getVarName()+ "PKs) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("for (int i = 0; i < " + tempEntity.getVarName() + "PKs.length; i++) {");
        sm.append("remove" + tempEntity.getName() + ".remove(pk, "+ tempEntity.getVarName()+ "PKs[i]);");
        sm.append("}");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void remove" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, List "+ tempEntity.getVarNames()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("for (int i = 0; i < " + tempEntity.getVarNames() + ".size(); i++) {");
        sm.append(tempEntity.getPackagePath() + ".model." + tempEntity.getName()+ " "+ tempEntity.getVarName()+ " = ("+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ ")"+ tempEntity.getVarNames()+ ".get(i);");
        sm.append("remove" + tempEntity.getName() + ".remove(pk, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
        sm.append("}");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void set" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ "[] "+ tempEntity.getVarName()+ "PKs) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("clear" + tempEntity.getNames() + ".clear(pk);");
        sm.append("for (int i = 0; i < " + tempEntity.getVarName() + "PKs.length; i++) {");
        sm.append("add" + tempEntity.getName() + ".add(pk, "+ tempEntity.getVarName()+ "PKs[i]);");
        sm.append("}");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
        sm.append("public void set" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, List "+ tempEntity.getVarNames()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
        sm.append("try {");
        sm.append("clear" + tempEntity.getNames() + ".clear(pk);");
        sm.append("for (int i = 0; i < " + tempEntity.getVarNames() + ".size(); i++) {");
        sm.append(tempEntity.getPackagePath() + ".model." + tempEntity.getName()+ " "+ tempEntity.getVarName()+ " = ("+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ ")"+ tempEntity.getVarNames()+ ".get(i);");
        sm.append("add" + tempEntity.getName() + ".add(pk, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
        sm.append("}");
        sm.append("}");
        sm.append("catch (DataAccessException dae) {");
        sm.append("throw new SystemException(dae);");
        sm.append("}");
        sm.append("}");
      }
    }
  }
  sm.append("protected void initDao() {");
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if ((col.isCollection()) && (col.isMappingManyToMany() || col.isMappingOneToMany())) {
      Entity tempEntity=getEntity(col.getEJBName());
      sm.append("contains" + tempEntity.getName() + " = new Contains"+ tempEntity.getName()+ "(this);");
      if (col.isMappingManyToMany()) {
        sm.append("add" + tempEntity.getName() + " = new Add"+ tempEntity.getName()+ "(this);");
        sm.append("clear" + tempEntity.getNames() + " = new Clear"+ tempEntity.getNames()+ "(this);");
        sm.append("remove" + tempEntity.getName() + " = new Remove"+ tempEntity.getName()+ "(this);");
      }
    }
  }
  sm.append("}");
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if ((col.isCollection()) && (col.isMappingManyToMany() || col.isMappingOneToMany())) {
      Entity tempEntity=getEntity(col.getEJBName());
      sm.append("protected Contains" + tempEntity.getName() + " contains"+ tempEntity.getName()+ ";");
      if (col.isMappingManyToMany()) {
        sm.append("protected Add" + tempEntity.getName() + " add"+ tempEntity.getName()+ ";");
        sm.append("protected Clear" + tempEntity.getNames() + " clear"+ tempEntity.getNames()+ ";");
        sm.append("protected Remove" + tempEntity.getName() + " remove"+ tempEntity.getName()+ ";");
      }
    }
  }
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if ((col.isCollection()) && (col.isMappingManyToMany() || col.isMappingOneToMany())) {
      Entity tempEntity=getEntity(col.getEJBName());
      String entitySqlType=_getSqlType(_packagePath + ".model." + entity.getName(),entity.getPKVarName(),entity.getPKClassName());
      String pkVarNameWrapper=pkVarName;
      if (entity.hasPrimitivePK()) {
        pkVarNameWrapper="new " + _getPrimitiveObj(entity.getPKClassName()) + "("+ pkVarName+ ")";
      }
      String tempEntitySqlType=_getSqlType(tempEntity.getPackagePath() + ".model." + entity.getName(),tempEntity.getPKVarName(),tempEntity.getPKClassName());
      String tempEntityPkVarNameWrapper=tempEntity.getPKVarName();
      if (tempEntity.hasPrimitivePK()) {
        tempEntityPkVarNameWrapper="new " + _getPrimitiveObj(tempEntity.getPKClassName()) + "("+ tempEntityPkVarNameWrapper+ ")";
      }
      sm.append("protected class Contains" + tempEntity.getName() + " extends MappingSqlQuery {");
      sm.append("protected Contains" + tempEntity.getName() + "("+ entity.getName()+ "Persistence persistence) {");
      sm.append("super(persistence.getDataSource(), _SQL_CONTAINS" + tempEntity.getName().toUpperCase() + ");");
      sm.append("declareParameter(new SqlParameter(Types." + entitySqlType + "));");
      sm.append("declareParameter(new SqlParameter(Types." + tempEntitySqlType + "));");
      sm.append("compile();");
      sm.append("}");
      sm.append("protected Object mapRow(ResultSet rs, int rowNumber) throws SQLException {");
      sm.append("return new Integer(rs.getInt(\"COUNT_VALUE\"));");
      sm.append("}");
      sm.append("protected boolean contains(" + pkClassName + " "+ pkVarName+ ", "+ tempEntity.getPKClassName()+ " "+ tempEntity.getPKVarName()+ ") {");
      sm.append("List results = execute(new Object[] {" + pkVarNameWrapper + ", "+ tempEntityPkVarNameWrapper+ "});");
      sm.append("if (results.size() > 0) {");
      sm.append("Integer count = (Integer)results.get(0);");
      sm.append("if (count.intValue() > 0) {");
      sm.append("return true;");
      sm.append("}");
      sm.append("}");
      sm.append("return false;");
      sm.append("}");
      sm.append("}");
      if (col.isMappingManyToMany()) {
        sm.append("protected class Add" + tempEntity.getName() + " extends SqlUpdate {");
        sm.append("protected Add" + tempEntity.getName() + "("+ entity.getName()+ "Persistence persistence) {");
        sm.append("super(persistence.getDataSource(), \"INSERT INTO " + col.getMappingTable() + " ("+ pkVarName+ ", "+ tempEntity.getPKVarName()+ ") VALUES (?, ?)\");");
        sm.append("_persistence = persistence;");
        sm.append("declareParameter(new SqlParameter(Types." + entitySqlType + "));");
        sm.append("declareParameter(new SqlParameter(Types." + tempEntitySqlType + "));");
        sm.append("compile();");
        sm.append("}");
        sm.append("protected void add(" + pkClassName + " "+ pkVarName+ ", "+ tempEntity.getPKClassName()+ " "+ tempEntity.getPKVarName()+ ") {");
        sm.append("if (!_persistence.contains" + tempEntity.getName() + ".contains("+ pkVarName+ ", "+ tempEntity.getPKVarName()+ ")) {");
        sm.append("update(new Object[] {" + pkVarNameWrapper + ", "+ tempEntityPkVarNameWrapper+ "});");
        sm.append("}");
        sm.append("}");
        sm.append("private " + entity.getName() + "Persistence _persistence;");
        sm.append("}");
        sm.append("protected class Clear" + tempEntity.getNames() + " extends SqlUpdate {");
        sm.append("protected Clear" + tempEntity.getNames() + "("+ entity.getName()+ "Persistence persistence) {");
        sm.append("super(persistence.getDataSource(), \"DELETE FROM " + col.getMappingTable() + " WHERE "+ pkVarName+ " = ?\");");
        sm.append("declareParameter(new SqlParameter(Types." + entitySqlType + "));");
        sm.append("compile();");
        sm.append("}");
        sm.append("protected void clear(" + pkClassName + " "+ pkVarName+ ") {");
        sm.append("update(new Object[] {" + pkVarNameWrapper + "});");
        sm.append("}");
        sm.append("}");
        sm.append("protected class Remove" + tempEntity.getName() + " extends SqlUpdate {");
        sm.append("protected Remove" + tempEntity.getName() + "("+ entity.getName()+ "Persistence persistence) {");
        sm.append("super(persistence.getDataSource(), \"DELETE FROM " + col.getMappingTable() + " WHERE "+ pkVarName+ " = ? AND "+ tempEntity.getPKVarName()+ " = ?\");");
        sm.append("declareParameter(new SqlParameter(Types." + entitySqlType + "));");
        sm.append("declareParameter(new SqlParameter(Types." + tempEntitySqlType + "));");
        sm.append("compile();");
        sm.append("}");
        sm.append("protected void remove(" + pkClassName + " "+ pkVarName+ ", "+ tempEntity.getPKClassName()+ " "+ tempEntity.getPKVarName()+ ") {");
        sm.append("update(new Object[] {" + pkVarNameWrapper + ", "+ tempEntityPkVarNameWrapper+ "});");
        sm.append("}");
        sm.append("}");
      }
    }
  }
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if (col.isCollection()) {
      Entity tempEntity=getEntity(col.getEJBName());
      if (col.isMappingManyToMany()) {
        sm.append("private static final String _SQL_GET" + tempEntity.getName().toUpperCase() + "S = \"SELECT {"+ tempEntity.getTable()+ ".*} FROM "+ tempEntity.getTable()+ " INNER JOIN "+ col.getMappingTable()+ " ON ("+ col.getMappingTable()+ "."+ tempEntity.getPKVarName()+ " = "+ tempEntity.getTable()+ "."+ tempEntity.getPKVarName()+ ") WHERE ("+ col.getMappingTable()+ "."+ entity.getPKVarName()+ " = ?)\";");
        sm.append("private static final String _SQL_GET" + tempEntity.getName().toUpperCase() + "SSIZE = \"SELECT COUNT(*) AS COUNT_VALUE FROM "+ col.getMappingTable()+ " WHERE "+ entity.getPKVarName()+ " = ?\";");
        sm.append("private static final String _SQL_CONTAINS" + tempEntity.getName().toUpperCase() + " = \"SELECT COUNT(*) AS COUNT_VALUE FROM "+ col.getMappingTable()+ " WHERE "+ entity.getPKVarName()+ " = ? AND "+ tempEntity.getPKVarName()+ " = ?\";");
      }
 else       if (col.isMappingOneToMany()) {
        sm.append("private static final String _SQL_GET" + tempEntity.getName().toUpperCase() + "S = \"SELECT {"+ tempEntity.getTable()+ ".*} FROM "+ tempEntity.getTable()+ " INNER JOIN "+ entity.getTable()+ " ON ("+ entity.getTable()+ "."+ entity.getPKVarName()+ " = "+ tempEntity.getTable()+ "."+ entity.getPKVarName()+ ") WHERE ("+ entity.getTable()+ "."+ entity.getPKVarName()+ " = ?)\";");
        sm.append("private static final String _SQL_GET" + tempEntity.getName().toUpperCase() + "SSIZE = \"SELECT COUNT(*) AS COUNT_VALUE FROM "+ tempEntity.getTable()+ " WHERE "+ entity.getPKVarName()+ " = ?\";");
        sm.append("private static final String _SQL_CONTAINS" + tempEntity.getName().toUpperCase() + " = \"SELECT COUNT(*) AS COUNT_VALUE FROM "+ tempEntity.getTable()+ " WHERE "+ entity.getPKVarName()+ " = ? AND "+ tempEntity.getPKVarName()+ " = ?\";");
      }
    }
  }
  sm.append("private static Log _log = LogFactory.getLog(" + entity.getName() + "Persistence.class);");
  sm.append("}");
  File ejbFile=new File(_outputPath + "/service/persistence/" + entity.getName()+ "Persistence.java");
  writeFile(ejbFile,sm.toString());
}
