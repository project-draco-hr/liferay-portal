{
  List pkList=entity.getPKList();
  List columnList=entity.getColumnList();
  List finderList=entity.getFinderList();
  String pkClassName=entity.getPKClassName();
  String pkVarName=entity.getPKVarName();
  StringBuffer sb=new StringBuffer();
  sb.append("package " + _packagePath + ".service.persistence;");
  sb.append("import com.liferay.portal.PortalException;");
  sb.append("import com.liferay.portal.SystemException;");
  sb.append("import com.liferay.portal.service.persistence.BasePersistence;");
  sb.append("import com.liferay.portal.spring.hibernate.HibernateUtil;");
  sb.append("import com.liferay.util.StringPool;");
  sb.append("import com.liferay.util.dao.hibernate.OrderByComparator;");
  sb.append("import com.liferay.util.dao.hibernate.QueryPos;");
  sb.append("import com.liferay.util.dao.hibernate.QueryUtil;");
  sb.append("import java.util.ArrayList;");
  sb.append("import java.util.Collection;");
  sb.append("import java.util.Collections;");
  sb.append("import java.util.Date;");
  sb.append("import java.util.HashSet;");
  sb.append("import java.util.Iterator;");
  sb.append("import java.util.List;");
  sb.append("import java.util.Set;");
  sb.append("import org.apache.commons.logging.Log;");
  sb.append("import org.apache.commons.logging.LogFactory;");
  sb.append("import org.hibernate.Hibernate;");
  sb.append("import org.hibernate.HibernateException;");
  sb.append("import org.hibernate.ObjectNotFoundException;");
  sb.append("import org.hibernate.Query;");
  sb.append("import org.hibernate.Session;");
  sb.append("import org.hibernate.SQLQuery;");
  sb.append("import " + _packagePath + "."+ _getNoSuchEntityException(entity)+ "Exception;");
  sb.append("public class " + entity.getName() + "Persistence extends BasePersistence {");
  sb.append("public " + _packagePath + ".model."+ entity.getName()+ " create("+ entity.getPKClassName()+ " "+ pkVarName+ ") {");
  sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = new "+ entity.getName()+ "HBM();");
  sb.append(entity.getVarName() + "HBM.setNew(true);");
  sb.append(entity.getVarName() + "HBM.setPrimaryKey(" + pkVarName+ ");");
  sb.append("return " + entity.getName() + "HBMUtil.model("+ entity.getVarName()+ "HBM);");
  sb.append("}");
  sb.append("public " + _packagePath + ".model."+ entity.getName()+ " remove("+ pkClassName+ " "+ pkVarName+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
  sb.append("Session session = null;");
  sb.append("try {");
  sb.append("session = openSession();");
  sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, "+ pkVarName+ ");");
  sb.append("if (" + entity.getVarName() + "HBM == null) {");
  sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + "+ pkVarName+ ".toString());");
  sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + "+ pkVarName+ ".toString());");
  sb.append("}");
  sb.append("session.delete(" + entity.getVarName() + "HBM);");
  sb.append("session.flush();");
  sb.append("return " + entity.getName() + "HBMUtil.model("+ entity.getVarName()+ "HBM);");
  sb.append("}");
  sb.append("catch (HibernateException he) {");
  sb.append("throw new SystemException(he);");
  sb.append("}");
  sb.append("finally {");
  sb.append("closeSession(session);");
  sb.append("}");
  sb.append("}");
  sb.append("public " + _packagePath + ".model."+ entity.getName()+ " update("+ _packagePath+ ".model."+ entity.getName()+ " "+ entity.getVarName()+ ") throws SystemException {");
  sb.append("Session session = null;");
  sb.append("try {");
  sb.append("if (" + entity.getVarName() + ".isNew() || "+ entity.getVarName()+ ".isModified()) {");
  sb.append("session = openSession();");
  sb.append("if (" + entity.getVarName() + ".isNew()) {");
  sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = new "+ entity.getName()+ "HBM();");
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if (!col.isCollection() && col.getEJBName() == null) {
      sb.append(entity.getVarName() + "HBM.set" + col.getMethodName()+ "("+ entity.getVarName()+ ".get"+ col.getMethodName()+ "());");
    }
 else     if (col.isCollection()) {
      sb.append(entity.getVarName() + "HBM.set" + col.getMethodName()+ "(new HashSet());");
    }
  }
  sb.append("session.save(" + entity.getVarName() + "HBM);");
  sb.append("session.flush();");
  sb.append("}");
  sb.append("else {");
  sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, "+ entity.getVarName()+ ".getPrimaryKey());");
  sb.append("if (" + entity.getVarName() + "HBM != null) {");
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if (!col.isPrimary() && !col.isCollection() && col.getEJBName() == null) {
      sb.append(entity.getVarName() + "HBM.set" + col.getMethodName()+ "("+ entity.getVarName()+ ".get"+ col.getMethodName()+ "());");
    }
  }
  sb.append("session.flush();");
  sb.append("}");
  sb.append("else {");
  sb.append(entity.getVarName() + "HBM = new " + entity.getName()+ "HBM();");
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if (!col.isCollection() && col.getEJBName() == null) {
      sb.append(entity.getVarName() + "HBM.set" + col.getMethodName()+ "("+ entity.getVarName()+ ".get"+ col.getMethodName()+ "());");
    }
  }
  sb.append("session.save(" + entity.getVarName() + "HBM);");
  sb.append("session.flush();");
  sb.append("}");
  sb.append("}");
  sb.append(entity.getVarName() + ".setNew(false);");
  sb.append(entity.getVarName() + ".setModified(false);");
  sb.append("}");
  sb.append("return " + entity.getVarName() + ";");
  sb.append("}");
  sb.append("catch (HibernateException he) {");
  sb.append("throw new SystemException(he);");
  sb.append("}");
  sb.append("finally {");
  sb.append("closeSession(session);");
  sb.append("}");
  sb.append("}");
  for (int i=0; i < columnList.size(); i++) {
    EntityColumn col=(EntityColumn)columnList.get(i);
    if ((col.isCollection()) && (col.isMappingManyToMany() || col.isMappingOneToMany())) {
      Entity tempEntity=getEntity(col.getEJBName());
      EntityOrder tempOrder=tempEntity.getOrder();
      EntityColumn tempCol=tempEntity.getColumnByMappingTable(col.getMappingTable());
      sb.append("public List get" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk) throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append("StringBuffer query = new StringBuffer();");
      sb.append("query.append(\"SELECT " + tempEntity.getVarName() + "HBM FROM \");");
      sb.append("query.append(" + entity.getPackagePath() + ".service.persistence."+ entity.getName()+ "HBM.class.getName());");
      sb.append("query.append(\" " + entity.getVarName() + "HBM \");");
      sb.append("query.append(\"JOIN " + entity.getVarName() + "HBM."+ col.getName()+ " AS "+ tempEntity.getVarName()+ "HBM \");");
      sb.append("query.append(\"WHERE " + entity.getVarName() + "HBM."+ pkVarName+ " = ? \");");
      if (tempOrder != null) {
        List tempOrderList=tempOrder.getColumns();
        sb.append("query.append(\"ORDER BY \");");
        for (int j=0; j < tempOrderList.size(); j++) {
          EntityColumn tempOrderCol=(EntityColumn)tempOrderList.get(j);
          sb.append("query.append(\"" + tempEntity.getVarName() + "HBM."+ tempOrderCol.getDBName()+ " "+ (tempOrderCol.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
          if ((j + 1) != tempOrderList.size()) {
            sb.append(".append(\", \");");
          }
 else {
            sb.append(";");
          }
        }
      }
      sb.append("Query q = session.createQuery(query.toString());");
      sb.append("q.set" + pkClassName + "(0, pk);");
      sb.append("Iterator itr = q.list().iterator();");
      sb.append("List list = new ArrayList();");
      sb.append("while (itr.hasNext()) {");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = ("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)itr.next();");
      sb.append("list.add(" + tempEntity.getPackagePath() + ".service.persistence."+ tempEntity.getName()+ "HBMUtil.model("+ tempEntity.getVarName()+ "HBM));");
      sb.append("}");
      sb.append("return list;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public List get" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, int begin, int end) throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
      sb.append("return get" + tempEntity.getNames() + "(pk, begin, end, null);");
      sb.append("}");
      sb.append("public List get" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, int begin, int end, OrderByComparator obc) throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append("StringBuffer query = new StringBuffer();");
      sb.append("query.append(\"SELECT " + tempEntity.getVarName() + "HBM FROM \");");
      sb.append("query.append(" + entity.getPackagePath() + ".service.persistence."+ entity.getName()+ "HBM.class.getName());");
      sb.append("query.append(\" " + entity.getVarName() + "HBM \");");
      sb.append("query.append(\"JOIN " + entity.getVarName() + "HBM."+ col.getName()+ " AS "+ tempEntity.getVarName()+ "HBM \");");
      sb.append("query.append(\"WHERE " + entity.getVarName() + "HBM."+ pkVarName+ " = ? \");");
      sb.append("if (obc != null) {");
      sb.append("query.append(\"ORDER BY \" + obc.getOrderBy());");
      sb.append("}");
      if (tempOrder != null) {
        List tempOrderList=tempOrder.getColumns();
        sb.append("else {");
        sb.append("query.append(\"ORDER BY \");");
        for (int j=0; j < tempOrderList.size(); j++) {
          EntityColumn tempOrderCol=(EntityColumn)tempOrderList.get(j);
          sb.append("query.append(\"" + tempEntity.getVarName() + "HBM."+ tempOrderCol.getDBName()+ " "+ (tempOrderCol.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
          if ((j + 1) != tempOrderList.size()) {
            sb.append(".append(\", \");");
          }
 else {
            sb.append(";");
          }
        }
        sb.append("}");
      }
      sb.append("Query q = session.createQuery(query.toString());");
      sb.append("q.set" + pkClassName + "(0, pk);");
      sb.append("List list = new ArrayList();");
      sb.append("Iterator itr = QueryUtil.iterate(q, getDialect(), begin, end);");
      sb.append("while (itr.hasNext()) {");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = ("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)itr.next();");
      sb.append("list.add(" + tempEntity.getPackagePath() + ".service.persistence."+ tempEntity.getName()+ "HBMUtil.model("+ tempEntity.getVarName()+ "HBM));");
      sb.append("}");
      sb.append("return list;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public int get" + tempEntity.getNames() + "Size("+ entity.getPKClassName()+ " pk) throws SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append("StringBuffer query = new StringBuffer();");
      sb.append("query.append(\"SELECT COUNT(*) FROM \");");
      sb.append("query.append(" + entity.getPackagePath() + ".service.persistence."+ entity.getName()+ "HBM.class.getName());");
      sb.append("query.append(\" " + entity.getVarName() + "HBM \");");
      sb.append("query.append(\"JOIN " + entity.getVarName() + "HBM."+ col.getName()+ " AS "+ tempEntity.getVarName()+ "HBM \");");
      sb.append("query.append(\"WHERE " + entity.getVarName() + "HBM."+ pkVarName+ " = ? \");");
      sb.append("Query q = session.createQuery(query.toString());");
      sb.append("q.set" + pkClassName + "(0, pk);");
      sb.append("Iterator itr = q.iterate();");
      sb.append("if (itr.hasNext()) {");
      sb.append("Long count = (Long)itr.next();");
      sb.append("if (count != null) {");
      sb.append("return count.intValue();");
      sb.append("}");
      sb.append("}");
      sb.append("return 0;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public void set" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ "[] pks) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append("Set " + col.getName() + "Set = new HashSet();");
      sb.append("for (int i = 0; pks != null && i < pks.length; i++) {");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = ("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, pks[i]);");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + pks[i].toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + pks[i].toString());");
      sb.append("}");
      sb.append(col.getName() + "Set.add(" + tempEntity.getVarName()+ "HBM);");
      sb.append("}");
      sb.append(entity.getVarName() + "HBM.set" + col.getMethodName()+ "("+ col.getName()+ "Set);");
      sb.append("session.flush();");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public void set" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, List "+ col.getName()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append("Set " + col.getName() + "Set = new HashSet();");
      sb.append("Iterator itr = " + col.getName() + ".iterator();");
      sb.append("while (itr.hasNext()) {");
      sb.append(tempEntity.getPackagePath() + ".model." + tempEntity.getName()+ " "+ tempEntity.getVarName()+ " = ("+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ ")itr.next();");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = ("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("}");
      sb.append(col.getName() + "Set.add(" + tempEntity.getVarName()+ "HBM);");
      sb.append("}");
      sb.append(entity.getVarName() + "HBM.set" + col.getMethodName()+ "("+ col.getName()+ "Set);");
      sb.append("session.flush();");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public boolean add" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ " "+ tempEntity.getVarName()+ "PK) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = null;");
      sb.append(tempEntity.getVarName() + "HBM = (" + tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, "+ tempEntity.getVarName()+ "PK);");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + "+ tempEntity.getVarName()+ "PK.toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + "+ tempEntity.getVarName()+ "PK.toString());");
      sb.append("}");
      sb.append("boolean value = " + entity.getVarName() + "HBM.get"+ col.getMethodName()+ "().add("+ tempEntity.getVarName()+ "HBM);");
      sb.append("session.flush();");
      sb.append("return value;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public boolean add" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ " "+ tempEntity.getVarName()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = null;");
      sb.append(tempEntity.getVarName() + "HBM = (" + tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("}");
      sb.append("boolean value = " + entity.getVarName() + "HBM.get"+ col.getMethodName()+ "().add("+ tempEntity.getVarName()+ "HBM);");
      sb.append("session.flush();");
      sb.append("return value;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public boolean add" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ "[] "+ tempEntity.getVarName()+ "PKs) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append("boolean value = false;");
      sb.append("for (int i = 0; i < " + tempEntity.getVarName() + "PKs.length; i++) {");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = null;");
      sb.append(tempEntity.getVarName() + "HBM = (" + tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, "+ tempEntity.getVarName()+ "PKs[i]);");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + "+ tempEntity.getVarName()+ "PKs[i].toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + "+ tempEntity.getVarName()+ "PKs[i].toString());");
      sb.append("}");
      sb.append("if (" + entity.getVarName() + "HBM.get"+ col.getMethodName()+ "().add("+ tempEntity.getVarName()+ "HBM)) {");
      sb.append("value = true;");
      sb.append("}");
      sb.append("}");
      sb.append("session.flush();");
      sb.append("return value;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public boolean add" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, List "+ tempEntity.getVarNames()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append("boolean value = false;");
      sb.append("for (int i = 0; i < " + tempEntity.getVarNames() + ".size(); i++) {");
      sb.append(tempEntity.getPackagePath() + ".model." + tempEntity.getName()+ " "+ tempEntity.getVarName()+ " = ("+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ ")"+ tempEntity.getVarNames()+ ".get(i);");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = ("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("}");
      sb.append("if (" + entity.getVarName() + "HBM.get"+ col.getMethodName()+ "().add("+ tempEntity.getVarName()+ "HBM)) {");
      sb.append("value = true;");
      sb.append("}");
      sb.append("}");
      sb.append("session.flush();");
      sb.append("return value;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public void clear" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk) throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append(entity.getVarName() + "HBM.get" + col.getMethodName()+ "().clear();");
      sb.append("session.flush();");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      if (col.isMappingManyToMany()) {
        sb.append("public static final String SQL_CONTAINS" + tempEntity.getName().toUpperCase() + " = \"SELECT COUNT(*) AS COUNT_VALUE FROM "+ col.getMappingTable()+ " WHERE "+ entity.getPKVarName()+ " = ? AND "+ tempEntity.getPKVarName()+ " = ?\";");
        sb.append("public boolean contains" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ " "+ tempEntity.getVarName()+ "PK) throws SystemException {");
        sb.append("Session session = null;");
        sb.append("try {");
        sb.append("session = openSession();");
        sb.append("SQLQuery q = session.createSQLQuery(SQL_CONTAINS" + tempEntity.getName().toUpperCase() + ");");
        sb.append("q.addScalar(HibernateUtil.getCountColumnName(), Hibernate.LONG);");
        sb.append("QueryPos qPos = QueryPos.getInstance(q);");
        sb.append("qPos.add(pk);");
        sb.append("qPos.add(" + tempEntity.getVarName() + "PK);");
        sb.append("Iterator itr = q.list().iterator();");
        sb.append("if (itr.hasNext()) {");
        sb.append("Long count = (Long)itr.next();");
        sb.append("if ((count != null) && (count.intValue() > 0)) {");
        sb.append("return true;");
        sb.append("}");
        sb.append("}");
        sb.append("return false;");
        sb.append("}");
        sb.append("catch (HibernateException he) {");
        sb.append("throw new SystemException(he);");
        sb.append("}");
        sb.append("finally {");
        sb.append("closeSession(session);");
        sb.append("}");
        sb.append("}");
      }
      if (col.isMappingManyToMany()) {
        sb.append("public static final String SQL_CONTAINS" + tempEntity.getName().toUpperCase() + "S = \"SELECT COUNT(*) AS COUNT_VALUE FROM "+ col.getMappingTable()+ " WHERE "+ entity.getPKVarName()+ " = ?\";");
        sb.append("public boolean contains" + tempEntity.getName() + "s("+ entity.getPKClassName()+ " pk) throws SystemException {");
        sb.append("Session session = null;");
        sb.append("try {");
        sb.append("session = openSession();");
        sb.append("SQLQuery q = session.createSQLQuery(SQL_CONTAINS" + tempEntity.getName().toUpperCase() + "S);");
        sb.append("q.addScalar(HibernateUtil.getCountColumnName(), Hibernate.LONG);");
        sb.append("QueryPos qPos = QueryPos.getInstance(q);");
        sb.append("qPos.add(pk);");
        sb.append("Iterator itr = q.list().iterator();");
        sb.append("if (itr.hasNext()) {");
        sb.append("Long count = (Long)itr.next();");
        sb.append("if ((count != null) && (count.intValue() > 0)) {");
        sb.append("return true;");
        sb.append("}");
        sb.append("}");
        sb.append("return false;");
        sb.append("}");
        sb.append("catch (HibernateException he) {");
        sb.append("throw new SystemException(he);");
        sb.append("}");
        sb.append("finally {");
        sb.append("closeSession(session);");
        sb.append("}");
        sb.append("}");
      }
      sb.append("public boolean remove" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ " "+ tempEntity.getVarName()+ "PK) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = null;");
      sb.append(tempEntity.getVarName() + "HBM = (" + tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, "+ tempEntity.getVarName()+ "PK);");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + "+ tempEntity.getVarName()+ "PK.toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + "+ tempEntity.getVarName()+ "PK.toString());");
      sb.append("}");
      sb.append("boolean value = " + entity.getVarName() + "HBM.get"+ col.getMethodName()+ "().remove("+ tempEntity.getVarName()+ "HBM);");
      sb.append("session.flush();");
      sb.append("return value;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public boolean remove" + tempEntity.getName() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ " "+ tempEntity.getVarName()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = null;");
      sb.append(tempEntity.getVarName() + "HBM = (" + tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("}");
      sb.append("boolean value = " + entity.getVarName() + "HBM.get"+ col.getMethodName()+ "().remove("+ tempEntity.getVarName()+ "HBM);");
      sb.append("session.flush();");
      sb.append("return value;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public boolean remove" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, "+ tempEntity.getPKClassName()+ "[] "+ tempEntity.getVarName()+ "PKs) throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append("boolean value = false;");
      sb.append("for (int i = 0; i < " + tempEntity.getVarName() + "PKs.length; i++) {");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = null;");
      sb.append(tempEntity.getVarName() + "HBM = (" + tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, "+ tempEntity.getVarName()+ "PKs[i]);");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + "+ tempEntity.getVarName()+ "PKs[i].toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + "+ tempEntity.getVarName()+ "PKs[i].toString());");
      sb.append("}");
      sb.append("if (" + entity.getVarName() + "HBM.get"+ col.getMethodName()+ "().remove("+ tempEntity.getVarName()+ "HBM)) {");
      sb.append("value = true;");
      sb.append("}");
      sb.append("}");
      sb.append("session.flush();");
      sb.append("return value;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public boolean remove" + tempEntity.getNames() + "("+ entity.getPKClassName()+ " pk, List "+ tempEntity.getVarNames()+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, "+ tempEntity.getPackagePath()+ "."+ _getNoSuchEntityException(tempEntity)+ "Exception, SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, pk);");
      sb.append("if (" + entity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + pk.toString());");
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + pk.toString());");
      sb.append("}");
      sb.append("boolean value = false;");
      sb.append("for (int i = 0; i < " + tempEntity.getVarNames() + ".size(); i++) {");
      sb.append(tempEntity.getPackagePath() + ".model." + tempEntity.getName()+ " "+ tempEntity.getVarName()+ " = ("+ tempEntity.getPackagePath()+ ".model."+ tempEntity.getName()+ ")"+ tempEntity.getVarNames()+ ".get(i);");
      sb.append(tempEntity.getPackagePath() + ".service.persistence." + tempEntity.getName()+ "HBM "+ tempEntity.getVarName()+ "HBM = ("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM)session.get("+ tempEntity.getPackagePath()+ ".service.persistence."+ tempEntity.getName()+ "HBM.class, "+ tempEntity.getVarName()+ ".getPrimaryKey());");
      sb.append("if (" + tempEntity.getVarName() + "HBM == null) {");
      sb.append("_log.warn(\"No " + tempEntity.getName() + " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("throw new " + tempEntity.getPackagePath() + "."+ _getNoSuchEntityException(tempEntity)+ "Exception(\"No "+ tempEntity.getName()+ " exists with the primary key \" + "+ tempEntity.getVarName()+ ".getPrimaryKey().toString());");
      sb.append("}");
      sb.append("if (" + entity.getVarName() + "HBM.get"+ col.getMethodName()+ "().remove("+ tempEntity.getVarName()+ "HBM)) {");
      sb.append("value = true;");
      sb.append("}");
      sb.append("}");
      sb.append("session.flush();");
      sb.append("return value;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
    }
  }
  sb.append("public " + _packagePath + ".model."+ entity.getName()+ " findByPrimaryKey("+ pkClassName+ " "+ pkVarName+ ") throws "+ _getNoSuchEntityException(entity)+ "Exception, SystemException {");
  sb.append("Session session = null;");
  sb.append("try {");
  sb.append("session = openSession();");
  sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)session.get("+ entity.getName()+ "HBM.class, "+ pkVarName+ ");");
  sb.append("if (" + entity.getVarName() + "HBM == null) {");
  sb.append("_log.warn(\"No " + entity.getName() + " exists with the primary key \" + "+ pkVarName+ ".toString());");
  sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(\"No "+ entity.getName()+ " exists with the primary key \" + "+ pkVarName+ ".toString());");
  sb.append("}");
  sb.append("return " + entity.getName() + "HBMUtil.model("+ entity.getVarName()+ "HBM);");
  sb.append("}");
  sb.append("catch (HibernateException he) {");
  sb.append("throw new SystemException(he);");
  sb.append("}");
  sb.append("finally {");
  sb.append("closeSession(session);");
  sb.append("}");
  sb.append("}");
  for (int i=0; i < finderList.size(); i++) {
    EntityFinder finder=(EntityFinder)finderList.get(i);
    List finderColsList=finder.getColumns();
    sb.append("public " + (finder.isCollection() ? "List" : _packagePath + ".model." + entity.getName()) + " findBy"+ finder.getName()+ "(");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      sb.append(col.getType() + " " + col.getName());
      if ((j + 1) != finderColsList.size()) {
        sb.append(", ");
      }
    }
    if (finder.isCollection()) {
      sb.append(") throws SystemException {");
    }
 else {
      sb.append(") throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
    }
    sb.append("Session session = null;");
    sb.append("try {");
    sb.append("session = openSession();");
    sb.append("StringBuffer query = new StringBuffer();");
    sb.append("query.append(\"FROM " + entity.getTable() + " IN CLASS "+ _packagePath+ ".service.persistence."+ entity.getName()+ "HBM WHERE \");");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      sb.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
      if ((j + 1) != finderColsList.size()) {
        sb.append("query.append(\" AND \");");
      }
 else       if (Validator.isNull(finder.getWhere())) {
        sb.append("query.append(\" \");");
      }
 else {
        sb.append("query.append(\" AND " + finder.getWhere() + " \");");
      }
    }
    EntityOrder order=entity.getOrder();
    if (order != null) {
      List orderList=order.getColumns();
      sb.append("query.append(\"ORDER BY \");");
      for (int j=0; j < orderList.size(); j++) {
        EntityColumn col=(EntityColumn)orderList.get(j);
        sb.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
        if ((j + 1) != orderList.size()) {
          sb.append(".append(\", \");");
        }
 else {
          sb.append(";");
        }
      }
    }
    sb.append("Query q = session.createQuery(query.toString());");
    sb.append("int queryPos = 0;");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      String colType=col.getType();
      String colObjType=colType;
      if (col.isPrimitiveType()) {
        if (colType.equals("boolean")) {
          colObjType="Boolean";
        }
 else         if (colType.equals("double")) {
          colObjType="Double";
        }
 else         if (colType.equals("float")) {
          colObjType="Float";
        }
 else         if (colType.equals("int")) {
          colObjType="Integer";
        }
 else         if (colType.equals("long")) {
          colObjType="Long";
        }
 else         if (colType.equals("short")) {
          colObjType="Short";
        }
      }
      sb.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
      if (colType.equals("Boolean")) {
        sb.append(".booleanValue()");
      }
 else       if (colType.equals("Double")) {
        sb.append(".doubleValue()");
      }
 else       if (colType.equals("Float")) {
        sb.append(".floatValue()");
      }
 else       if (colType.equals("Integer")) {
        sb.append(".intValue()");
      }
 else       if (colType.equals("Long")) {
        sb.append(".longValue()");
      }
 else       if (colType.equals("Short")) {
        sb.append(".shortValue()");
      }
      sb.append(");");
    }
    sb.append("Iterator itr = q.list().iterator();");
    if (finder.isCollection()) {
      sb.append("List list = new ArrayList();");
      sb.append("while (itr.hasNext()) {");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)itr.next();");
      sb.append("list.add(" + entity.getName() + "HBMUtil.model("+ entity.getVarName()+ "HBM));");
      sb.append("}");
      sb.append("return list;");
    }
 else {
      sb.append("if (!itr.hasNext()) {");
      sb.append("String msg = \"No " + entity.getName() + " exists with the key \";");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (j == 0) {
          sb.append("msg += StringPool.OPEN_CURLY_BRACE;");
        }
        sb.append("msg += \"" + col.getName() + "=\";");
        sb.append("msg += " + col.getName() + ";");
        if ((j + 1) != finderColsList.size()) {
          sb.append("msg += \", \";");
        }
        if ((j + 1) == finderColsList.size()) {
          sb.append("msg += StringPool.CLOSE_CURLY_BRACE;");
        }
      }
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(msg);");
      sb.append("}");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)itr.next();");
      sb.append("return " + entity.getName() + "HBMUtil.model("+ entity.getVarName()+ "HBM);");
    }
    sb.append("}");
    sb.append("catch (HibernateException he) {");
    sb.append("throw new SystemException(he);");
    sb.append("}");
    sb.append("finally {");
    sb.append("closeSession(session);");
    sb.append("}");
    sb.append("}");
    if (finder.isCollection()) {
      sb.append("public List findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName()+ ", ");
      }
      sb.append("int begin, int end) throws SystemException {");
      sb.append("return findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append("" + col.getName() + ", ");
      }
      sb.append("begin, end, null);");
      sb.append("}");
      sb.append("public List findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName()+ ", ");
      }
      sb.append("int begin, int end, OrderByComparator obc) throws SystemException {");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append("StringBuffer query = new StringBuffer();");
      sb.append("query.append(\"FROM " + entity.getTable() + " IN CLASS "+ _packagePath+ ".service.persistence."+ entity.getName()+ "HBM WHERE \");");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
        if ((j + 1) != finderColsList.size()) {
          sb.append("query.append(\" AND \");");
        }
 else         if (Validator.isNull(finder.getWhere())) {
          sb.append("query.append(\" \");");
        }
 else {
          sb.append("query.append(\" AND " + finder.getWhere() + " \");");
        }
      }
      sb.append("if (obc != null) {");
      sb.append("query.append(\"ORDER BY \" + obc.getOrderBy());");
      sb.append("}");
      if (order != null) {
        List orderList=order.getColumns();
        sb.append("else {");
        sb.append("query.append(\"ORDER BY \");");
        for (int j=0; j < orderList.size(); j++) {
          EntityColumn col=(EntityColumn)orderList.get(j);
          sb.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
          if ((j + 1) != orderList.size()) {
            sb.append(".append(\", \");");
          }
 else {
            sb.append(";");
          }
        }
        sb.append("}");
      }
      sb.append("Query q = session.createQuery(query.toString());");
      sb.append("int queryPos = 0;");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        String colType=col.getType();
        String colObjType=colType;
        if (col.isPrimitiveType()) {
          if (colType.equals("boolean")) {
            colObjType="Boolean";
          }
 else           if (colType.equals("double")) {
            colObjType="Double";
          }
 else           if (colType.equals("float")) {
            colObjType="Float";
          }
 else           if (colType.equals("int")) {
            colObjType="Integer";
          }
 else           if (colType.equals("long")) {
            colObjType="Long";
          }
 else           if (colType.equals("short")) {
            colObjType="Short";
          }
        }
        sb.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
        if (colType.equals("Boolean")) {
          sb.append(".booleanValue()");
        }
 else         if (colType.equals("Double")) {
          sb.append(".doubleValue()");
        }
 else         if (colType.equals("Float")) {
          sb.append(".floatValue()");
        }
 else         if (colType.equals("Integer")) {
          sb.append(".intValue()");
        }
 else         if (colType.equals("Long")) {
          sb.append(".longValue()");
        }
 else         if (colType.equals("Short")) {
          sb.append(".shortValue()");
        }
        sb.append(");");
      }
      sb.append("List list = new ArrayList();");
      sb.append("Iterator itr = QueryUtil.iterate(q, getDialect(), begin, end);");
      sb.append("while (itr.hasNext()) {");
      sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)itr.next();");
      sb.append("list.add(" + entity.getName() + "HBMUtil.model("+ entity.getVarName()+ "HBM));");
      sb.append("}");
      sb.append("return list;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
      sb.append("public " + _packagePath + ".model."+ entity.getName()+ " findBy"+ finder.getName()+ "_First(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName()+ ", ");
      }
      sb.append("OrderByComparator obc) throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
      sb.append("List list = findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append("" + col.getName() + ", ");
      }
      sb.append("0, 1, obc);");
      sb.append("if (list.size() == 0) {");
      sb.append("String msg = \"No " + entity.getName() + " exists with the key \";");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (j == 0) {
          sb.append("msg += StringPool.OPEN_CURLY_BRACE;");
        }
        sb.append("msg += \"" + col.getName() + "=\";");
        sb.append("msg += " + col.getName() + ";");
        if ((j + 1) != finderColsList.size()) {
          sb.append("msg += \", \";");
        }
        if ((j + 1) == finderColsList.size()) {
          sb.append("msg += StringPool.CLOSE_CURLY_BRACE;");
        }
      }
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(msg);");
      sb.append("}");
      sb.append("else {");
      sb.append("return (" + _packagePath + ".model."+ entity.getName()+ ")list.get(0);");
      sb.append("}");
      sb.append("}");
      sb.append("public " + _packagePath + ".model."+ entity.getName()+ " findBy"+ finder.getName()+ "_Last(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName()+ ", ");
      }
      sb.append("OrderByComparator obc) throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
      sb.append("int count = countBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append("" + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(");");
      sb.append("List list = findBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append("" + col.getName() + ", ");
      }
      sb.append("count - 1, count, obc);");
      sb.append("if (list.size() == 0) {");
      sb.append("String msg = \"No " + entity.getName() + " exists with the key \";");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (j == 0) {
          sb.append("msg += StringPool.OPEN_CURLY_BRACE;");
        }
        sb.append("msg += \"" + col.getName() + "=\";");
        sb.append("msg += " + col.getName() + ";");
        if ((j + 1) != finderColsList.size()) {
          sb.append("msg += \", \";");
        }
        if ((j + 1) == finderColsList.size()) {
          sb.append("msg += StringPool.CLOSE_CURLY_BRACE;");
        }
      }
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(msg);");
      sb.append("}");
      sb.append("else {");
      sb.append("return (" + _packagePath + ".model."+ entity.getName()+ ")list.get(0);");
      sb.append("}");
      sb.append("}");
      sb.append("public " + _packagePath + ".model."+ entity.getName()+ "[] findBy"+ finder.getName()+ "_PrevAndNext("+ pkClassName+ " "+ pkVarName+ ", ");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append(col.getType() + " " + col.getName()+ ", ");
      }
      sb.append("OrderByComparator obc) throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
      sb.append(_packagePath + ".model." + entity.getName()+ " "+ entity.getVarName()+ " = findByPrimaryKey("+ pkVarName+ ");");
      sb.append("int count = countBy" + finder.getName() + "(");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append("" + col.getName());
        if ((j + 1) != finderColsList.size()) {
          sb.append(", ");
        }
      }
      sb.append(");");
      sb.append("Session session = null;");
      sb.append("try {");
      sb.append("session = openSession();");
      sb.append("StringBuffer query = new StringBuffer();");
      sb.append("query.append(\"FROM " + entity.getTable() + " IN CLASS "+ _packagePath+ ".service.persistence."+ entity.getName()+ "HBM WHERE \");");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        sb.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
        if ((j + 1) != finderColsList.size()) {
          sb.append("query.append(\" AND \");");
        }
 else         if (Validator.isNull(finder.getWhere())) {
          sb.append("query.append(\" \");");
        }
 else {
          sb.append("query.append(\" AND " + finder.getWhere() + " \");");
        }
      }
      sb.append("if (obc != null) {");
      sb.append("query.append(\"ORDER BY \" + obc.getOrderBy());");
      sb.append("}");
      if (order != null) {
        List orderList=order.getColumns();
        sb.append("else {");
        sb.append("query.append(\"ORDER BY \");");
        for (int j=0; j < orderList.size(); j++) {
          EntityColumn col=(EntityColumn)orderList.get(j);
          sb.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
          if ((j + 1) != orderList.size()) {
            sb.append(".append(\", \");");
          }
 else {
            sb.append(";");
          }
        }
        sb.append("}");
      }
      sb.append("Query q = session.createQuery(query.toString());");
      sb.append("int queryPos = 0;");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        String colType=col.getType();
        String colObjType=colType;
        if (col.isPrimitiveType()) {
          if (colType.equals("boolean")) {
            colObjType="Boolean";
          }
 else           if (colType.equals("double")) {
            colObjType="Double";
          }
 else           if (colType.equals("float")) {
            colObjType="Float";
          }
 else           if (colType.equals("int")) {
            colObjType="Integer";
          }
 else           if (colType.equals("long")) {
            colObjType="Long";
          }
 else           if (colType.equals("short")) {
            colObjType="Short";
          }
        }
        sb.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
        if (colType.equals("Boolean")) {
          sb.append(".booleanValue()");
        }
 else         if (colType.equals("Double")) {
          sb.append(".doubleValue()");
        }
 else         if (colType.equals("Float")) {
          sb.append(".floatValue()");
        }
 else         if (colType.equals("Integer")) {
          sb.append(".intValue()");
        }
 else         if (colType.equals("Long")) {
          sb.append(".longValue()");
        }
 else         if (colType.equals("Short")) {
          sb.append(".shortValue()");
        }
        sb.append(");");
      }
      sb.append("Object[] objArray = QueryUtil.getPrevAndNext(q, count, obc, " + entity.getVarName() + ", "+ entity.getName()+ "HBMUtil.getInstance());");
      sb.append(_packagePath + ".model." + entity.getName()+ "[] array = new "+ _packagePath+ ".model."+ entity.getName()+ "[3];");
      sb.append("array[0] = (" + _packagePath + ".model."+ entity.getName()+ ")objArray[0];");
      sb.append("array[1] = (" + _packagePath + ".model."+ entity.getName()+ ")objArray[1];");
      sb.append("array[2] = (" + _packagePath + ".model."+ entity.getName()+ ")objArray[2];");
      sb.append("return array;");
      sb.append("}");
      sb.append("catch (HibernateException he) {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
      sb.append("finally {");
      sb.append("closeSession(session);");
      sb.append("}");
      sb.append("}");
    }
  }
  sb.append("public List findAll() throws SystemException {");
  sb.append("Session session = null;");
  sb.append("try {");
  sb.append("session = openSession();");
  sb.append("StringBuffer query = new StringBuffer();");
  sb.append("query.append(\"FROM " + entity.getTable() + " IN CLASS "+ _packagePath+ ".service.persistence."+ entity.getName()+ "HBM \");");
  EntityOrder order=entity.getOrder();
  if (order != null) {
    List orderList=order.getColumns();
    sb.append("query.append(\"ORDER BY \");");
    for (int j=0; j < orderList.size(); j++) {
      EntityColumn col=(EntityColumn)orderList.get(j);
      sb.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
      if ((j + 1) != orderList.size()) {
        sb.append(".append(\", \");");
      }
 else {
        sb.append(";");
      }
    }
  }
  sb.append("Query q = session.createQuery(query.toString());");
  sb.append("Iterator itr = q.iterate();");
  sb.append("List list = new ArrayList();");
  sb.append("while (itr.hasNext()) {");
  sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)itr.next();");
  sb.append("list.add(" + entity.getName() + "HBMUtil.model("+ entity.getVarName()+ "HBM));");
  sb.append("}");
  sb.append("return list;");
  sb.append("}");
  sb.append("catch (HibernateException he) {");
  sb.append("throw new SystemException(he);");
  sb.append("}");
  sb.append("finally {");
  sb.append("closeSession(session);");
  sb.append("}");
  sb.append("}");
  for (int i=0; i < finderList.size(); i++) {
    EntityFinder finder=(EntityFinder)finderList.get(i);
    List finderColsList=finder.getColumns();
    sb.append("public void removeBy" + finder.getName() + "(");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      sb.append(col.getType() + " " + col.getName());
      if ((j + 1) != finderColsList.size()) {
        sb.append(", ");
      }
    }
    if (finder.isCollection()) {
      sb.append(") throws SystemException {");
    }
 else {
      sb.append(") throws " + _getNoSuchEntityException(entity) + "Exception, SystemException {");
    }
    sb.append("Session session = null;");
    sb.append("try {");
    sb.append("session = openSession();");
    sb.append("StringBuffer query = new StringBuffer();");
    sb.append("query.append(\"FROM " + entity.getTable() + " IN CLASS "+ _packagePath+ ".service.persistence."+ entity.getName()+ "HBM WHERE \");");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      sb.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
      if ((j + 1) != finderColsList.size()) {
        sb.append("query.append(\" AND \");");
      }
 else       if (Validator.isNull(finder.getWhere())) {
        sb.append("query.append(\" \");");
      }
 else {
        sb.append("query.append(\" AND " + finder.getWhere() + " \");");
      }
    }
    if (order != null) {
      List orderList=order.getColumns();
      sb.append("query.append(\"ORDER BY \");");
      for (int j=0; j < orderList.size(); j++) {
        EntityColumn col=(EntityColumn)orderList.get(j);
        sb.append("query.append(\"" + col.getDBName() + " "+ (col.isOrderByAscending() ? "ASC" : "DESC")+ "\")");
        if ((j + 1) != orderList.size()) {
          sb.append(".append(\", \");");
        }
 else {
          sb.append(";");
        }
      }
    }
    sb.append("Query q = session.createQuery(query.toString());");
    sb.append("int queryPos = 0;");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      String colType=col.getType();
      String colObjType=colType;
      if (col.isPrimitiveType()) {
        if (colType.equals("boolean")) {
          colObjType="Boolean";
        }
 else         if (colType.equals("double")) {
          colObjType="Double";
        }
 else         if (colType.equals("float")) {
          colObjType="Float";
        }
 else         if (colType.equals("int")) {
          colObjType="Integer";
        }
 else         if (colType.equals("long")) {
          colObjType="Long";
        }
 else         if (colType.equals("short")) {
          colObjType="Short";
        }
      }
      sb.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
      if (colType.equals("Boolean")) {
        sb.append(".booleanValue()");
      }
 else       if (colType.equals("Double")) {
        sb.append(".doubleValue()");
      }
 else       if (colType.equals("Float")) {
        sb.append(".floatValue()");
      }
 else       if (colType.equals("Integer")) {
        sb.append(".intValue()");
      }
 else       if (colType.equals("Long")) {
        sb.append(".longValue()");
      }
 else       if (colType.equals("Short")) {
        sb.append(".shortValue()");
      }
      sb.append(");");
    }
    sb.append("Iterator itr = q.list().iterator();");
    sb.append("while (itr.hasNext()) {");
    sb.append(entity.getName() + "HBM " + entity.getVarName()+ "HBM = ("+ entity.getName()+ "HBM)itr.next();");
    sb.append("session.delete(" + entity.getVarName() + "HBM);");
    sb.append("}");
    sb.append("session.flush();");
    sb.append("}");
    sb.append("catch (HibernateException he) {");
    if (finder.isCollection()) {
      sb.append("throw new SystemException(he);");
    }
 else {
      sb.append("if (he instanceof ObjectNotFoundException) {");
      sb.append("String msg = \"No " + entity.getName() + " exists with the key \";");
      for (int j=0; j < finderColsList.size(); j++) {
        EntityColumn col=(EntityColumn)finderColsList.get(j);
        if (j == 0) {
          sb.append("msg += StringPool.OPEN_CURLY_BRACE;");
        }
        sb.append("msg += \"" + col.getName() + "=\";");
        sb.append("msg += " + col.getName() + ";");
        if ((j + 1) != finderColsList.size()) {
          sb.append("msg += \", \";");
        }
        if ((j + 1) == finderColsList.size()) {
          sb.append("msg += StringPool.CLOSE_CURLY_BRACE;");
        }
      }
      sb.append("throw new " + _getNoSuchEntityException(entity) + "Exception(msg);");
      sb.append("}");
      sb.append("else {");
      sb.append("throw new SystemException(he);");
      sb.append("}");
    }
    sb.append("}");
    sb.append("finally {");
    sb.append("closeSession(session);");
    sb.append("}");
    sb.append("}");
  }
  for (int i=0; i < finderList.size(); i++) {
    EntityFinder finder=(EntityFinder)finderList.get(i);
    List finderColsList=finder.getColumns();
    sb.append("public int countBy" + finder.getName() + "(");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      sb.append(col.getType() + " " + col.getName());
      if ((j + 1) != finderColsList.size()) {
        sb.append(", ");
      }
    }
    sb.append(") throws SystemException {");
    sb.append("Session session = null;");
    sb.append("try {");
    sb.append("session = openSession();");
    sb.append("StringBuffer query = new StringBuffer();");
    sb.append("query.append(\"SELECT COUNT(*) \");");
    sb.append("query.append(\"FROM " + entity.getTable() + " IN CLASS "+ _packagePath+ ".service.persistence."+ entity.getName()+ "HBM WHERE \");");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      sb.append("query.append(\"" + col.getDBName() + " "+ col.getComparator()+ " ?\");");
      if ((j + 1) != finderColsList.size()) {
        sb.append("query.append(\" AND \");");
      }
 else       if (Validator.isNull(finder.getWhere())) {
        sb.append("query.append(\" \");");
      }
 else {
        sb.append("query.append(\" AND " + finder.getWhere() + " \");");
      }
    }
    sb.append("Query q = session.createQuery(query.toString());");
    sb.append("int queryPos = 0;");
    for (int j=0; j < finderColsList.size(); j++) {
      EntityColumn col=(EntityColumn)finderColsList.get(j);
      String colType=col.getType();
      String colObjType=colType;
      if (col.isPrimitiveType()) {
        if (colType.equals("boolean")) {
          colObjType="Boolean";
        }
 else         if (colType.equals("double")) {
          colObjType="Double";
        }
 else         if (colType.equals("float")) {
          colObjType="Float";
        }
 else         if (colType.equals("int")) {
          colObjType="Integer";
        }
 else         if (colType.equals("long")) {
          colObjType="Long";
        }
 else         if (colType.equals("short")) {
          colObjType="Short";
        }
      }
      sb.append("q.set" + colObjType + "(queryPos++, "+ col.getName());
      if (colType.equals("Boolean")) {
        sb.append(".booleanValue()");
      }
 else       if (colType.equals("Double")) {
        sb.append(".doubleValue()");
      }
 else       if (colType.equals("Float")) {
        sb.append(".floatValue()");
      }
 else       if (colType.equals("Integer")) {
        sb.append(".intValue()");
      }
 else       if (colType.equals("Long")) {
        sb.append(".longValue()");
      }
 else       if (colType.equals("Short")) {
        sb.append(".shortValue()");
      }
      sb.append(");");
    }
    sb.append("Iterator itr = q.list().iterator();");
    sb.append("if (itr.hasNext()) {");
    sb.append("Long count = (Long)itr.next();");
    sb.append("if (count != null) {");
    sb.append("return count.intValue();");
    sb.append("}");
    sb.append("}");
    sb.append("return 0;");
    sb.append("}");
    sb.append("catch (HibernateException he) {");
    sb.append("throw new SystemException(he);");
    sb.append("}");
    sb.append("finally {");
    sb.append("closeSession(session);");
    sb.append("}");
    sb.append("}");
  }
  sb.append("private static Log _log = LogFactory.getLog(" + entity.getName() + "Persistence.class);");
  sb.append("}");
  File ejbFile=new File(_outputPath + "/service/persistence/" + entity.getName()+ "Persistence.java");
  writeFile(ejbFile,sb.toString());
}
