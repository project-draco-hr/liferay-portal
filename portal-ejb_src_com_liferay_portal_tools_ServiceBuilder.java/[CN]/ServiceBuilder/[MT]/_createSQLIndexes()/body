{
  String sqlPath=_portalRoot + "/sql";
  File sqlFile=new File(sqlPath + "/indexes.sql");
  Map indexSQLs=new TreeMap();
  BufferedReader br=new BufferedReader(new FileReader(sqlFile));
  while (true) {
    String indexSQL=br.readLine();
    if (indexSQL == null) {
      break;
    }
    if (Validator.isNotNull(indexSQL.trim())) {
      int pos=indexSQL.indexOf(" on ");
      String indexSpec=indexSQL.substring(pos + 4);
      indexSQLs.put(indexSpec,indexSQL);
    }
  }
  br.close();
  File indexMapFile=new File(sqlPath + "/indexes.properties");
  Map indexMappings=new TreeMap();
  br=new BufferedReader(new FileReader(indexMapFile));
  while (true) {
    String indexMapping=br.readLine();
    if (indexMapping == null) {
      break;
    }
    if (Validator.isNotNull(indexMapping.trim())) {
      String[] splitIndexMapping=indexMapping.split("\\=");
      indexMappings.put(splitIndexMapping[1],splitIndexMapping[0]);
    }
  }
  br.close();
  for (int i=0; i < _ejbList.size(); i++) {
    Entity entity=(Entity)_ejbList.get(i);
    List finderList=entity.getFinderList();
    for (int j=0; j < finderList.size(); j++) {
      EntityFinder finder=(EntityFinder)finderList.get(j);
      if (finder.isDBIndex()) {
        StringBuffer sb=new StringBuffer();
        sb.append(entity.getTable() + " (");
        List finderColsList=finder.getColumns();
        for (int k=0; k < finderColsList.size(); k++) {
          EntityColumn col=(EntityColumn)finderColsList.get(k);
          sb.append(col.getDBName());
          if ((k + 1) != finderColsList.size()) {
            sb.append(", ");
          }
        }
        sb.append(");");
        String indexSpec=sb.toString();
        String indexHash=Integer.toHexString(indexSpec.hashCode()).toUpperCase();
        String indexName="IX_" + indexHash;
        sb=new StringBuffer();
        sb.append("create index " + indexName + " on ");
        sb.append(indexSpec);
        indexSQLs.put(indexSpec,sb.toString());
        String finderName=entity.getTable() + StringPool.PERIOD + finder.getName();
        indexMappings.put(finderName,indexName);
      }
    }
  }
  StringBuffer sb=new StringBuffer();
  Iterator itr=indexSQLs.values().iterator();
  String prevEntityName=null;
  while (itr.hasNext()) {
    String indexSQL=(String)itr.next();
    String entityName=indexSQL.split(" ")[4];
    if ((prevEntityName != null) && (!prevEntityName.equals(entityName))) {
      sb.append("\n");
    }
    sb.append(indexSQL);
    if (itr.hasNext()) {
      sb.append("\n");
    }
    prevEntityName=entityName;
  }
  FileUtil.write(sqlFile,sb.toString(),true);
  sb=new StringBuffer();
  itr=indexMappings.keySet().iterator();
  prevEntityName=null;
  while (itr.hasNext()) {
    String finderName=(String)itr.next();
    String indexName=(String)indexMappings.get(finderName);
    String entityName=finderName.split("\\.")[0];
    if ((prevEntityName != null) && (!prevEntityName.equals(entityName))) {
      sb.append("\n");
    }
    sb.append(indexName + StringPool.EQUAL + finderName);
    if (itr.hasNext()) {
      sb.append("\n");
    }
    prevEntityName=entityName;
  }
  FileUtil.write(indexMapFile,sb.toString(),true);
}
