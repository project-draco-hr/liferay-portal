{
  JavaClass javaClass=_getJavaClass(_outputPath + "/service/impl/" + entity.getName()+ (sessionType != _REMOTE ? "Local" : "")+ "ServiceImpl.java");
  JavaMethod[] methods=javaClass.getMethods();
  StringBuffer sb=new StringBuffer();
  sb.append("package " + _packagePath + ".service;");
  sb.append("public interface " + entity.getName() + _getSessionTypeName(sessionType)+ "Service {");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isConstructor() && javaMethod.isPublic() && _isCustomMethod(javaMethod)) {
      sb.append("public " + javaMethod.getReturns().getValue() + _getDimensions(javaMethod.getReturns())+ " "+ methodName+ "(");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sb.append(javaParameter.getType().getValue() + _getDimensions(javaParameter.getType()) + " "+ javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sb.append(", ");
        }
      }
      sb.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      Set newExceptions=new LinkedHashSet();
      for (int j=0; j < thrownExceptions.length; j++) {
        Type thrownException=thrownExceptions[j];
        newExceptions.add(thrownException.getValue());
      }
      if (sessionType != _LOCAL) {
        newExceptions.add("java.rmi.RemoteException");
      }
      if (newExceptions.size() > 0) {
        sb.append(" throws ");
        Iterator itr=newExceptions.iterator();
        while (itr.hasNext()) {
          sb.append(itr.next());
          if (itr.hasNext()) {
            sb.append(", ");
          }
        }
      }
      sb.append(";");
    }
  }
  sb.append("}");
  File ejbFile=new File(_serviceOutputPath + "/service/" + entity.getName()+ _getSessionTypeName(sessionType)+ "Service.java");
  writeFile(ejbFile,sb.toString());
  ejbFile=new File(_outputPath + "/service/spring/" + entity.getName()+ _getSessionTypeName(sessionType)+ "Service.java");
  if (ejbFile.exists()) {
    System.out.println("Relocating " + ejbFile);
    ejbFile.delete();
  }
}
