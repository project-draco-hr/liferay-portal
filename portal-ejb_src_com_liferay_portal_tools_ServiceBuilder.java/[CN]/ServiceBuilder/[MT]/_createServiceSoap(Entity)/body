{
  JavaClass javaClass=_getJavaClass(_outputPath + "/service/impl/" + entity.getName()+ "ServiceImpl.java");
  JavaMethod[] methods=javaClass.getMethods();
  StringBuffer sb=new StringBuffer();
  sb.append("package " + _packagePath + ".service.http;");
  if (_hasSoapMethods(javaClass)) {
    sb.append("import " + _packagePath + ".service."+ entity.getName()+ "ServiceUtil;");
  }
  sb.append("import com.liferay.portal.kernel.log.Log;");
  sb.append("import com.liferay.portal.kernel.log.LogFactoryUtil;");
  sb.append("import java.rmi.RemoteException;");
  sb.append("public class " + entity.getName() + "ServiceSoap {");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isConstructor() && javaMethod.isPublic() && _isCustomMethod(javaMethod)&& _isSoapMethod(javaMethod)) {
      String returnValueName=javaMethod.getReturns().getValue();
      String returnValueDimension=_getDimensions(javaMethod.getReturns());
      String extendedModelName=_packagePath + ".model." + entity.getName();
      String soapModelName=_packagePath + ".model." + entity.getName()+ "Soap";
      sb.append("public static ");
      if (returnValueName.equals(extendedModelName)) {
        sb.append(soapModelName + returnValueDimension);
      }
 else       if (returnValueName.equals("java.util.List")) {
        if (entity.hasColumns()) {
          sb.append(soapModelName + "[]");
        }
 else {
          sb.append("java.util.List");
        }
      }
 else {
        sb.append(returnValueName + returnValueDimension);
      }
      sb.append(" " + methodName + "(");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        String parameterTypeName=javaParameter.getType().getValue() + _getDimensions(javaParameter.getType());
        if (parameterTypeName.equals("java.util.Locale")) {
          parameterTypeName="String";
        }
        sb.append(parameterTypeName + " " + javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sb.append(", ");
        }
      }
      sb.append(") throws RemoteException {");
      sb.append("try {");
      if (!returnValueName.equals("void")) {
        sb.append(returnValueName + returnValueDimension + " returnValue = ");
      }
      sb.append(entity.getName() + "ServiceUtil." + methodName+ "(");
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        String parameterTypeName=javaParameter.getType().getValue() + _getDimensions(javaParameter.getType());
        if (parameterTypeName.equals("java.util.Locale")) {
          sb.append("new java.util.Locale(");
        }
        sb.append(javaParameter.getName());
        if (parameterTypeName.equals("java.util.Locale")) {
          sb.append(")");
        }
        if ((j + 1) != parameters.length) {
          sb.append(", ");
        }
      }
      sb.append(");");
      if (!returnValueName.equals("void")) {
        if (returnValueName.equals(extendedModelName)) {
          sb.append("return " + soapModelName + ".toSoapModel(returnValue);");
        }
 else         if (entity.hasColumns() && returnValueName.equals("java.util.List")) {
          sb.append("return " + soapModelName + ".toSoapModels(returnValue);");
        }
 else {
          sb.append("return returnValue;");
        }
      }
      sb.append("}");
      sb.append("catch (Exception e) {");
      sb.append("_log.error(e, e);");
      sb.append("throw new RemoteException(e.getMessage());");
      sb.append("}");
      sb.append("}");
    }
  }
  if (sb.indexOf("_log.") != -1) {
    sb.append("private static Log _log = LogFactoryUtil.getLog(" + entity.getName() + "ServiceSoap.class);");
  }
  sb.append("}");
  File ejbFile=new File(_outputPath + "/service/http/" + entity.getName()+ "ServiceSoap.java");
  writeFile(ejbFile,sb.toString());
}
