{
  if (bean == null) {
    return null;
  }
  long companyId=PortalUtil.getCompanyId(request);
  String className=normalizeClassName(bean.getClass().getName());
  if (Validator.isNotNull(varientSuffix)) {
    className=varientSuffix;
  }
  TemplateResource templateResource=null;
  PortletPreferences preferences=getPortletPreferences(request);
  if (preferences != null) {
    String velocityTemplateContent=preferences.getValue(RENDERER_TEMPLATE_PREFIX + className,StringPool.BLANK);
    if (Validator.isNotNull(velocityTemplateContent)) {
      templateResource=new StringTemplateResource(className,velocityTemplateContent);
    }
  }
  if ((templateResource == null) && Validator.isNotNull(servletContextName)) {
    if (servletContextName.startsWith(StringPool.SLASH)) {
      servletContextName=servletContextName.substring(1);
    }
    try {
      BeanLocator beanLocator=PortletBeanLocatorUtil.getBeanLocator(servletContextName);
      ClassLoader classLoader=beanLocator.getClassLoader();
      URL url=classLoader.getResource(PropsUtil.get(RENDERER_TEMPLATE_PREFIX + className));
      templateResource=new URLTemplateResource(className,url);
    }
 catch (    Exception e) {
    }
  }
  if (templateResource == null) {
    try {
      String velocityTemplateContent=PrefsPropsUtil.getContent(companyId,RENDERER_TEMPLATE_PREFIX + className);
      if (Validator.isNotNull(velocityTemplateContent)) {
        templateResource=new StringTemplateResource(className,velocityTemplateContent);
      }
    }
 catch (    Exception e) {
    }
  }
  if (templateResource == null) {
    _log.warn("No entity renderer template found for " + className);
    return null;
  }
  try {
    Template template=TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_VM,templateResource,false);
    template.prepare(request);
    template.put(_BEAN,bean);
    UnsyncStringWriter unsyncStringWriter=new UnsyncStringWriter();
    template.processTemplate(unsyncStringWriter);
    return unsyncStringWriter.toString();
  }
 catch (  Exception e) {
    _log.error(e,e);
    throw new RendererException(e);
  }
}
