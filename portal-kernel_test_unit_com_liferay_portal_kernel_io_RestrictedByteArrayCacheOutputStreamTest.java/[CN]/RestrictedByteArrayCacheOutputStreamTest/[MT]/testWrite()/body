{
  UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
  final AtomicBoolean flushed=new AtomicBoolean();
  FlushPreAction flushPreAction=new FlushPreAction(){
    @Override public void beforeFlush(){
      flushed.set(true);
    }
  }
;
  RestrictedByteArrayCacheOutputStream restrictedByteArrayCacheOutputStream=new RestrictedByteArrayCacheOutputStream(unsyncByteArrayOutputStream,10,27,flushPreAction);
  StringBuilder sb=new StringBuilder(26);
  for (int i='a'; i <= 'z'; i++) {
    restrictedByteArrayCacheOutputStream.write(i);
    sb.append((char)i);
  }
  Assert.assertFalse(restrictedByteArrayCacheOutputStream.isOverflowed());
  Assert.assertFalse(flushed.get());
  Assert.assertEquals(26,restrictedByteArrayCacheOutputStream.index);
  Assert.assertEquals(26,restrictedByteArrayCacheOutputStream.size());
  String expectedStringResult=sb.toString();
  byte[] expectedBytesResult=expectedStringResult.getBytes(Charset.forName("ASCII"));
  Assert.assertArrayEquals(expectedBytesResult,restrictedByteArrayCacheOutputStream.toByteArray());
  byte[] unsafeGetByteArray=restrictedByteArrayCacheOutputStream.unsafeGetByteArray();
  Assert.assertEquals(27,unsafeGetByteArray.length);
  for (int i=0; i < 26; i++) {
    Assert.assertEquals(expectedBytesResult[i],unsafeGetByteArray[i]);
  }
  ByteBuffer byteBuffer=restrictedByteArrayCacheOutputStream.unsafeGetByteBuffer();
  Assert.assertEquals(26,byteBuffer.remaining());
  byte[] byteBufferArray=byteBuffer.array();
  for (int i=0; i < 26; i++) {
    Assert.assertEquals(expectedBytesResult[i],byteBufferArray[i]);
  }
  for (int i='0'; i <= '9'; i++) {
    restrictedByteArrayCacheOutputStream.write(i);
    sb.append((char)i);
  }
  Assert.assertTrue(restrictedByteArrayCacheOutputStream.isOverflowed());
  Assert.assertTrue(flushed.get());
  Assert.assertNull(restrictedByteArrayCacheOutputStream.cache);
  Assert.assertEquals(-1,restrictedByteArrayCacheOutputStream.index);
  Assert.assertEquals(-1,restrictedByteArrayCacheOutputStream.size());
  Assert.assertEquals(sb.toString(),unsyncByteArrayOutputStream.toString());
  try {
    restrictedByteArrayCacheOutputStream.toByteArray();
    Assert.fail();
  }
 catch (  IllegalStateException ise) {
    Assert.assertEquals("Cache overflowed",ise.getMessage());
  }
  try {
    restrictedByteArrayCacheOutputStream.unsafeGetByteArray();
    Assert.fail();
  }
 catch (  IllegalStateException ise) {
    Assert.assertEquals("Cache overflowed",ise.getMessage());
  }
  try {
    restrictedByteArrayCacheOutputStream.unsafeGetByteBuffer();
    Assert.fail();
  }
 catch (  IllegalStateException ise) {
    Assert.assertEquals("Cache overflowed",ise.getMessage());
  }
  try {
    restrictedByteArrayCacheOutputStream.reset();
    Assert.fail();
  }
 catch (  IllegalStateException ise) {
    Assert.assertEquals("Cache overflowed",ise.getMessage());
  }
  flushed.set(false);
  restrictedByteArrayCacheOutputStream.flush();
  Assert.assertFalse(flushed.get());
}
