{
  UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
  RestrictedByteArrayCacheOutputStream restrictedByteArrayCacheOutputStream=new RestrictedByteArrayCacheOutputStream(unsyncByteArrayOutputStream,9,19,null);
  byte[] bytes={0,1,2,3,4,5,6,7,8,9};
  restrictedByteArrayCacheOutputStream.write(bytes);
  Assert.assertFalse(restrictedByteArrayCacheOutputStream.isOverflowed());
  Assert.assertEquals(10,restrictedByteArrayCacheOutputStream.index);
  Assert.assertEquals(10,restrictedByteArrayCacheOutputStream.size());
  Assert.assertArrayEquals(bytes,restrictedByteArrayCacheOutputStream.toByteArray());
  byte[] unsafeGetByteArray=restrictedByteArrayCacheOutputStream.unsafeGetByteArray();
  Assert.assertEquals(18,unsafeGetByteArray.length);
  for (int i=0; i < 10; i++) {
    Assert.assertEquals(bytes[i],unsafeGetByteArray[i]);
  }
  ByteBuffer byteBuffer=restrictedByteArrayCacheOutputStream.unsafeGetByteBuffer();
  Assert.assertEquals(10,byteBuffer.remaining());
  byte[] byteBufferArray=byteBuffer.array();
  for (int i=0; i < 10; i++) {
    Assert.assertEquals(bytes[i],byteBufferArray[i]);
  }
  restrictedByteArrayCacheOutputStream.write(bytes);
  Assert.assertTrue(restrictedByteArrayCacheOutputStream.isOverflowed());
  Assert.assertNull(restrictedByteArrayCacheOutputStream.cache);
  Assert.assertEquals(-1,restrictedByteArrayCacheOutputStream.index);
  Assert.assertEquals(-1,restrictedByteArrayCacheOutputStream.size());
  Assert.assertArrayEquals(ArrayUtil.append(bytes,bytes),unsyncByteArrayOutputStream.toByteArray());
  restrictedByteArrayCacheOutputStream.write(bytes);
  Assert.assertArrayEquals(ArrayUtil.append(bytes,bytes,bytes),unsyncByteArrayOutputStream.toByteArray());
  restrictedByteArrayCacheOutputStream.write(bytes,0,0);
  Assert.assertArrayEquals(ArrayUtil.append(bytes,bytes,bytes),unsyncByteArrayOutputStream.toByteArray());
}
