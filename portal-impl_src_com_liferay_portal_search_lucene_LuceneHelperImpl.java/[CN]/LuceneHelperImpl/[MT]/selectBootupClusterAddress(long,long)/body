{
  if (!_isLoadIndexFromClusterEnabled()) {
    return null;
  }
  List<Address> clusterNodeAddresses=ClusterExecutorUtil.getClusterNodeAddresses();
  int clusterNodeAddressesCount=clusterNodeAddresses.size();
  if (clusterNodeAddressesCount <= 1) {
    if (_log.isDebugEnabled()) {
      _log.debug("Do not load indexes because there is either one portal " + "instance or no portal instances in the cluster");
    }
    return null;
  }
  ClusterRequest clusterRequest=ClusterRequest.createMulticastRequest(new MethodHandler(_getLastGenerationMethodKey,companyId),true);
  BlockingQueue<ClusterNodeResponse> clusterNodeResponses=ClusterExecutorUtil.execute(clusterRequest).getPartialResults();
  Address bootupAddress=null;
  do {
    clusterNodeAddressesCount--;
    ClusterNodeResponse clusterNodeResponse=null;
    try {
      clusterNodeResponse=clusterNodeResponses.poll(_BOOTUP_CLUSTER_NODE_RESPONSE_TIMEOUT,java.util.concurrent.TimeUnit.MILLISECONDS);
    }
 catch (    Exception e) {
      throw new SystemException(e);
    }
    if (clusterNodeResponse == null) {
      if (_log.isDebugEnabled()) {
        _log.debug("Unable to get cluster node response in " + _BOOTUP_CLUSTER_NODE_RESPONSE_TIMEOUT + java.util.concurrent.TimeUnit.MILLISECONDS);
      }
      continue;
    }
    ClusterNode clusterNode=clusterNodeResponse.getClusterNode();
    if (clusterNode.getPort() > 0) {
      try {
        long remoteLastGeneration=(Long)clusterNodeResponse.getResult();
        if (remoteLastGeneration > localLastGeneration) {
          bootupAddress=clusterNodeResponse.getAddress();
          break;
        }
      }
 catch (      Exception e) {
        if (_log.isDebugEnabled()) {
          _log.debug("Suppress exception caused by remote method " + "invocation",e);
        }
        continue;
      }
    }
 else {
      if (_log.isDebugEnabled()) {
        _log.debug("Cluster node " + clusterNode + " has invalid port");
      }
    }
  }
 while ((bootupAddress == null) && (clusterNodeAddressesCount > 1));
  return bootupAddress;
}
