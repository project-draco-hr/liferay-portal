{
  ThemeLoader themeLoader=ThemeLoaderFactory.getDefaultThemeLoader();
  if (themeLoader == null) {
    _log.error("No theme loaders are deployed");
    return null;
  }
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(themeZip);
  String lookAndFeelXML=zipReader.getEntryAsString("liferay-look-and-feel.xml");
  StringBundler sb=new StringBundler();
  sb.append(String.valueOf(groupId));
  if (privateLayout) {
    sb.append("-private");
  }
 else {
    sb.append("-public");
  }
  if (Validator.isNotNull(layoutId)) {
    sb.append(StringPool.DASH);
    sb.append(String.valueOf(layoutId));
  }
  if (PropsValues.THEME_LOADER_NEW_THEME_ID_ON_IMPORT) {
    sb.append(StringPool.DASH);
    sb.append(Time.getShortTimestamp());
  }
  String themeId=sb.toString();
  lookAndFeelXML=StringUtil.replace(lookAndFeelXML,new String[]{"[$GROUP_ID$]","[$THEME_ID$]","[$THEME_NAME$]"},new String[]{String.valueOf(groupId),themeId,themeId});
  FileUtil.deltree(themeLoader.getFileStorage() + StringPool.SLASH + themeId);
  List<String> zipEntries=zipReader.getEntries();
  for (  String zipEntry : zipEntries) {
    String key=zipEntry;
    sb=new StringBundler(5);
    sb.append(themeLoader.getFileStorage());
    sb.append(StringPool.SLASH);
    sb.append(themeId);
    sb.append(StringPool.SLASH);
    sb.append(key);
    String fileName=sb.toString();
    if (key.equals("liferay-look-and-feel.xml")) {
      FileUtil.write(fileName,lookAndFeelXML.getBytes());
    }
 else {
      InputStream is=zipReader.getEntryAsInputStream(zipEntry);
      FileUtil.write(fileName,is);
    }
  }
  themeLoader.loadThemes();
  ClusterRequest clusterRequest=ClusterRequest.createMulticastRequest(_loadThemesMethodHandler,true);
  clusterRequest.setFireAndForget(true);
  ClusterExecutorUtil.execute(clusterRequest);
  themeId+=PortletConstants.WAR_SEPARATOR + themeLoader.getServletContextName();
  return PortalUtil.getJsSafePortletId(themeId);
}
