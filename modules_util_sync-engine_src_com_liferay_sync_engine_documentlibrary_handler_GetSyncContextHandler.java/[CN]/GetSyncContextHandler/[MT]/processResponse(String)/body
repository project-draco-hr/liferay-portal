{
  ObjectMapper objectMapper=new ObjectMapper();
  SyncContext syncContext=objectMapper.readValue(response,new TypeReference<SyncContext>(){
  }
);
  SyncAccount syncAccount=SyncAccountService.fetchSyncAccount(getSyncAccountId());
  SyncUser remoteSyncUser=syncContext.getSyncUser();
  if (remoteSyncUser == null) {
    throw new HttpResponseException(HttpStatus.SC_UNAUTHORIZED,"Authenticated access required");
  }
  SyncUser localSyncUser=SyncUserService.fetchSyncUser(syncAccount.getSyncAccountId());
  remoteSyncUser.setSyncAccountId(localSyncUser.getSyncAccountId());
  remoteSyncUser.setSyncUserId(localSyncUser.getSyncUserId());
  SyncUserService.update(remoteSyncUser);
  Map<String,String> portletPreferencesMap=syncContext.getPortletPreferencesMap();
  int maxConnections=Integer.parseInt(portletPreferencesMap.get(SyncContext.PREFERENCE_KEY_MAX_CONNECTIONS));
  syncAccount.setMaxConnections(maxConnections);
  int pollInterval=Integer.parseInt(portletPreferencesMap.get(SyncContext.PREFERENCE_KEY_POLL_INTERVAL));
  syncAccount.setPollInterval(pollInterval);
  syncAccount.setSocialOfficeInstalled(syncContext.isSocialOfficeInstalled());
  if ((Boolean)getParameterValue("checkState")) {
    if (ReleaseInfo.isServerCompatible(syncContext)) {
      if (_logger.isDebugEnabled()) {
        _logger.debug("Connected to {}",syncAccount.getUrl());
      }
      syncAccount.setState(SyncAccount.STATE_CONNECTED);
      FileEventUtil.retryFileTransfers(getSyncAccountId());
      ConnectionRetryUtil.resetRetryDelay(getSyncAccountId());
    }
 else {
      syncAccount.setState(SyncAccount.STATE_DISCONNECTED);
      syncAccount.setUiEvent(SyncAccount.UI_EVENT_SYNC_WEB_OUT_OF_DATE);
    }
  }
  SyncAccountService.update(syncAccount);
}
