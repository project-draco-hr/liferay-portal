{
  if (null != pending) {
    return;
  }
  long exclusionComparable=Long.MIN_VALUE;
  while (0 != nInclusionsRemaining && !queue.isEmpty()) {
    HeapElement inclusion=null;
    do {
      HeapElement candidate=queue.poll();
      if (candidate.inclusion) {
        if (exclusionComparable != candidate.comparable()) {
          inclusion=candidate;
          break;
        }
      }
 else {
        exclusionComparable=candidate.comparable();
      }
      reattach(candidate);
      if (0 == nInclusionsRemaining) {
        return;
      }
    }
 while (!queue.isEmpty());
    if (inclusion == null) {
      return;
    }
    long inclusionComparable=inclusion.comparable();
    boolean excluded=exclusionComparable == inclusionComparable;
    while (!queue.isEmpty() && queue.peek().comparable() == inclusionComparable) {
      HeapElement match=queue.poll();
      excluded|=!match.inclusion;
      reattach(match);
      if (0 == nInclusionsRemaining) {
        return;
      }
    }
    if (!excluded) {
      pending=inclusion;
      return;
    }
 else {
      reattach(inclusion);
    }
  }
}
