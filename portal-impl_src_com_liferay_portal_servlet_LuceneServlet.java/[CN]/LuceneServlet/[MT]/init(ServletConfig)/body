{
  super.init(servletConfig);
  long[] companyIds=PortalInstances.getCompanyIds();
  for (int i=0; i < companyIds.length; i++) {
    long companyId=companyIds[i];
    if (GetterUtil.getBoolean(PropsUtil.get(PropsKeys.INDEX_ON_STARTUP))) {
      if (_log.isInfoEnabled()) {
        _log.info("Indexing Lucene on startup");
      }
      LuceneIndexer indexer=new LuceneIndexer(companyId);
      Thread indexerThread=null;
      if (GetterUtil.getBoolean(PropsUtil.get(PropsKeys.INDEX_WITH_THREAD))) {
        indexerThread=new Thread(indexer,THREAD_NAME + "." + companyId);
        indexerThread.setPriority(THREAD_PRIORITY);
        indexerThread.start();
      }
 else {
        indexer.reindex();
      }
      _indexers.add(new ObjectValuePair<LuceneIndexer,Thread>(indexer,indexerThread));
    }
    if (PropsValues.LUCENE_STORE_JDBC_AUTO_CLEAN_UP_ENABLED) {
      _schedulerEntry=new SchedulerEntryImpl();
      _schedulerEntry.setEventListenerClass(CleanUpMessageListener.class.getName());
      _schedulerEntry.setTimeUnit(TimeUnit.MINUTE);
      _schedulerEntry.setTriggerType(TriggerType.SIMPLE);
      _schedulerEntry.setTriggerValue(PropsValues.LUCENE_STORE_JDBC_AUTO_CLEAN_UP_INTERVAL);
      try {
        SchedulerEngineUtil.schedule(_schedulerEntry,StorageType.PERSISTED,PortalClassLoaderUtil.getClassLoader(),0);
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  }
}
