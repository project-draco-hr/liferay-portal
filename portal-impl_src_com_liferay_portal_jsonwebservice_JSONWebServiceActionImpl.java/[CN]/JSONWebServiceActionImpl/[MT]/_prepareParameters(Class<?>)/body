{
  MethodParameter[] methodParameters=_jsonWebServiceActionConfig.getMethodParameters();
  Object[] parameters=new Object[methodParameters.length];
  for (int i=0; i < methodParameters.length; i++) {
    String parameterName=methodParameters[i].getName();
    parameterName=CamelCaseUtil.normalizeCamelCase(parameterName);
    Object value=_jsonWebServiceActionParameters.getParameter(parameterName);
    Object parameterValue=null;
    if (value != null) {
      Class<?> parameterType=methodParameters[i].getType();
      if (value.equals(Void.TYPE)) {
        String parameterTypeName=_jsonWebServiceActionParameters.getParameterTypeName(parameterName);
        if (parameterTypeName != null) {
          ClassLoader classLoader=actionClass.getClassLoader();
          parameterType=classLoader.loadClass(parameterTypeName);
        }
        if (!ReflectUtil.isSubclass(parameterType,methodParameters[i].getType())) {
          throw new IllegalArgumentException("Unmatched argument type " + parameterType.getName() + " for method argument "+ i);
        }
        parameterValue=_createDefaultParameterValue(parameterName,parameterType);
      }
 else       if (parameterType.equals(Calendar.class)) {
        Calendar calendar=Calendar.getInstance();
        calendar.setLenient(false);
        calendar.setTimeInMillis(GetterUtil.getLong(value.toString()));
        parameterValue=calendar;
      }
 else       if (parameterType.equals(List.class)) {
        String stringValue=value.toString().trim();
        if (!stringValue.startsWith(StringPool.OPEN_BRACKET)) {
          stringValue=StringPool.OPEN_BRACKET.concat(stringValue).concat(StringPool.CLOSE_BRACKET);
        }
        List<?> list=JSONFactoryUtil.looseDeserializeSafe(stringValue,ArrayList.class);
        list=_generifyList(list,methodParameters[i].getGenericTypes());
        parameterValue=list;
      }
 else       if (parameterType.equals(Locale.class)) {
        parameterValue=LocaleUtil.fromLanguageId(value.toString());
      }
 else       if (parameterType.equals(Map.class)) {
        Map<?,?> map=JSONFactoryUtil.looseDeserializeSafe(value.toString(),HashMap.class);
        map=_generifyMap(map,methodParameters[i].getGenericTypes());
        parameterValue=map;
      }
 else       if (parameterType.isArray()) {
        String stringValue=value.toString().trim();
        if (!stringValue.startsWith(StringPool.OPEN_BRACKET)) {
          stringValue=StringPool.OPEN_BRACKET.concat(stringValue).concat(StringPool.CLOSE_BRACKET);
        }
        List<?> list=JSONFactoryUtil.looseDeserializeSafe(stringValue,ArrayList.class);
        parameterValue=_convertListToArray(list,parameterType.getComponentType());
      }
 else {
        try {
          parameterValue=TypeConverterManager.convertType(value,parameterType);
        }
 catch (        ClassCastException e) {
          String stringValue=value.toString().trim();
          if (stringValue.startsWith(StringPool.OPEN_CURLY_BRACE)) {
            parameterValue=JSONFactoryUtil.looseDeserializeSafe(stringValue,parameterType);
          }
 else {
            throw e;
          }
        }
      }
    }
    _injectInnerParametersIntoValue(parameterName,parameterValue);
    parameters[i]=parameterValue;
  }
  return parameters;
}
