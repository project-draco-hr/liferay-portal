{
  MethodParameter[] methodParameters=_jsonWebServiceActionConfig.getMethodParameters();
  Object[] parameters=new Object[methodParameters.length];
  for (int i=0; i < methodParameters.length; i++) {
    String parameterName=methodParameters[i].getName();
    Object value=_jsonWebServiceActionParameters.getParameter(parameterName);
    Object parameterValue=null;
    if (value != null) {
      Class<?> parameterType=methodParameters[i].getType();
      if (value.equals(Void.TYPE)) {
        String parameterTypeName=_jsonWebServiceActionParameters.getParameterTypeName(parameterName);
        if (parameterTypeName != null) {
          ClassLoader classLoader=actionClass.getClassLoader();
          parameterType=classLoader.loadClass(parameterTypeName);
        }
        parameterValue=_createDefaultParameterValue(parameterName,parameterType);
      }
 else       if (parameterType.equals(Calendar.class)) {
        Calendar calendar=Calendar.getInstance();
        calendar.setLenient(false);
        calendar.setTimeInMillis(Long.parseLong(value.toString()));
        parameterValue=calendar;
      }
 else       if (parameterType.equals(List.class)) {
        List<?> list=JSONFactoryUtil.looseDeserialize(value.toString(),ArrayList.class);
        list=_generifyList(list,methodParameters[i].getGenericTypes());
        parameterValue=list;
      }
 else       if (parameterType.equals(Locale.class)) {
        parameterValue=LocaleUtil.fromLanguageId(value.toString());
      }
 else       if (parameterType.equals(Map.class)) {
        Map<?,?> map=JSONFactoryUtil.looseDeserialize(value.toString(),HashMap.class);
        map=_generifyMap(map,methodParameters[i].getGenericTypes());
        parameterValue=map;
      }
 else {
        parameterValue=ReflectUtil.castType(value,parameterType);
      }
    }
    if (parameterValue != null) {
      List<KeyValue<String,Object>> innerParameters=_jsonWebServiceActionParameters.getInnerParameters(parameterName);
      if (innerParameters != null) {
        for (        KeyValue<String,Object> innerParameter : innerParameters) {
          BeanUtil.setPropertySilent(parameterValue,innerParameter.getKey(),innerParameter.getValue());
        }
      }
    }
    parameters[i]=parameterValue;
  }
  return parameters;
}
