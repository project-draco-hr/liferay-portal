{
  MethodParameter[] methodParameters=_jsonWebServiceActionConfig.getMethodParameters();
  Object[] parameters=new Object[methodParameters.length];
  for (int i=0; i < methodParameters.length; i++) {
    String parameterName=methodParameters[i].getName();
    parameterName=CamelCaseUtil.normalizeCamelCase(parameterName);
    Object value=_jsonWebServiceActionParameters.getParameter(parameterName);
    Object parameterValue=null;
    if (value != null) {
      Class<?> parameterType=methodParameters[i].getType();
      String parameterTypeName=_jsonWebServiceActionParameters.getParameterTypeName(parameterName);
      if (parameterTypeName != null) {
        ClassLoader classLoader=actionClass.getClassLoader();
        parameterType=classLoader.loadClass(parameterTypeName);
        if (!ReflectUtil.isTypeOf(parameterType,methodParameters[i].getType())) {
          throw new IllegalArgumentException("Unmatched argument type " + parameterType.getName() + " for method argument "+ i);
        }
      }
      if (value.equals(Void.TYPE)) {
        parameterValue=_createDefaultParameterValue(parameterName,parameterType);
      }
 else {
        parameterValue=_convertValueToParameterValue(value,parameterType,methodParameters[i].getGenericTypes());
        ServiceContext serviceContext=_jsonWebServiceActionParameters.getServiceContext();
        if ((serviceContext != null) && parameterName.equals("serviceContext")) {
          if ((parameterValue != null) && (parameterValue instanceof ServiceContext)) {
            serviceContext.merge((ServiceContext)parameterValue);
          }
          parameterValue=serviceContext;
        }
      }
    }
    _injectInnerParametersIntoValue(parameterName,parameterValue);
    parameters[i]=parameterValue;
  }
  return parameters;
}
