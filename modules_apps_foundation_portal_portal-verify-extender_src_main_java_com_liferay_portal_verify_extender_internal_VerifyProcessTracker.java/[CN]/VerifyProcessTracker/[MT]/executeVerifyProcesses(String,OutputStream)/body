{
  PrintWriter printWriter=new PrintWriter(outputStream,true);
  List<VerifyProcess> verifyProcesses=getVerifyProcesses(verifyProcessName);
  boolean indexReadOnly=IndexWriterHelperUtil.isIndexReadOnly();
  IndexWriterHelperUtil.setIndexReadOnly(_verifyProcessTrackerConfiguration.indexReadOnly());
  NotificationThreadLocal.setEnabled(false);
  StagingAdvicesThreadLocal.setEnabled(false);
  WorkflowThreadLocal.setEnabled(false);
  try {
    Release release=_releaseLocalService.fetchRelease(verifyProcessName);
    if ((release != null) && release.isVerified()) {
      return;
    }
    if (release == null) {
      release=_releaseLocalService.createRelease(_counterLocalService.increment());
      release.setServletContextName(verifyProcessName);
      release.setVerified(false);
    }
    printWriter.println("Executing verifiers registered for " + verifyProcessName);
    VerifyException verifyException=null;
    for (    VerifyProcess verifyProcess : verifyProcesses) {
      try {
        verifyProcess.verify();
      }
 catch (      VerifyException ve) {
        _log.error(ve,ve);
        verifyException=ve;
      }
    }
    if (verifyException == null) {
      release.setVerified(true);
      _releaseLocalService.updateRelease(release);
      Dictionary<String,String> dictionary=new HashMapDictionary<>();
      dictionary.put("verify.process.name",verifyProcessName);
      _bundleContext.registerService(VerifyProcessCompletionMarker.class,new VerifyProcessCompletionMarker(){
      }
,dictionary);
    }
  }
  finally {
    IndexWriterHelperUtil.setIndexReadOnly(indexReadOnly);
    NotificationThreadLocal.setEnabled(true);
    StagingAdvicesThreadLocal.setEnabled(true);
    WorkflowThreadLocal.setEnabled(true);
  }
}
