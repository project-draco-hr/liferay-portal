{
  LoggerElement lineContainerLoggerElement=new LoggerElement();
  lineContainerLoggerElement.setClassName("line-container");
  lineContainerLoggerElement.setName("div");
  if (element.attributeValue("macro") != null) {
    lineContainerLoggerElement.setAttribute("onmouseout","macroHover(this, false)");
    lineContainerLoggerElement.setAttribute("onmouseover","macroHover(this, true)");
  }
  StringBuilder sb=new StringBuilder();
  sb.append(_getLineItemText("misc","&lt;"));
  sb.append(_getLineItemText("action-type",element.getName()));
  List<Attribute> attributes=element.attributes();
  for (  Attribute attribute : attributes) {
    String attributeName=attribute.getName();
    if (attributeName.equals("line-number")) {
      continue;
    }
    sb.append(_getLineItemText("tag-type",attributeName));
    sb.append(_getLineItemText("misc","="));
    sb.append(_getLineItemText("misc quote","\""));
    sb.append(_getLineItemText("name",attribute.getValue()));
    sb.append(_getLineItemText("misc quote","\""));
  }
  List<Element> elements=element.elements();
  String innerText=element.getText();
  innerText=innerText.trim();
  if (elements.isEmpty() && Validator.isNull(innerText)) {
    sb.append(_getLineItemText("misc","/&gt;"));
  }
 else {
    sb.append(_getLineItemText("misc","&gt;"));
  }
  if (Validator.isNotNull(innerText)) {
    sb.append(_getLineItemText("name",HtmlUtil.escape(innerText)));
    sb.append(_getLineItemText("misc","&lt;/"));
    sb.append(_getLineItemText("action-type",element.getName()));
    sb.append(_getLineItemText("misc","&gt;"));
  }
  lineContainerLoggerElement.setText(sb.toString());
  String elementName=element.getName();
  if (elementName.equals("execute") && !elements.isEmpty()) {
    lineContainerLoggerElement.addChildLoggerElement(_getParameterContainerLoggerElement(element));
  }
  return lineContainerLoggerElement;
}
