{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long userId=PortalUtil.getUserId(actionRequest);
  long liveGroupId=ParamUtil.getLong(actionRequest,"liveGroupId");
  String name=ParamUtil.getString(actionRequest,"name");
  String description=ParamUtil.getString(actionRequest,"description");
  int type=ParamUtil.getInteger(actionRequest,"type");
  String friendlyURL=ParamUtil.getString(actionRequest,"friendlyURL");
  boolean active=ParamUtil.getBoolean(actionRequest,"active");
  ServiceContext serviceContext=ServiceContextFactory.getInstance(Group.class.getName(),actionRequest);
  Group liveGroup=null;
  String oldFriendlyURL=null;
  String oldStagingFriendlyURL=null;
  if (liveGroupId <= 0) {
    liveGroup=GroupServiceUtil.addGroup(name,description,type,friendlyURL,true,active,serviceContext);
    LiveUsers.joinGroup(themeDisplay.getCompanyId(),liveGroup.getGroupId(),userId);
  }
 else {
    liveGroup=GroupLocalServiceUtil.getGroup(liveGroupId);
    oldFriendlyURL=liveGroup.getFriendlyURL();
    liveGroup=GroupServiceUtil.updateGroup(liveGroupId,name,description,type,friendlyURL,active,serviceContext);
    if (type == GroupConstants.TYPE_SITE_OPEN) {
      List<MembershipRequest> membershipRequests=MembershipRequestLocalServiceUtil.search(liveGroupId,MembershipRequestConstants.STATUS_PENDING,QueryUtil.ALL_POS,QueryUtil.ALL_POS);
      for (      MembershipRequest membershipRequest : membershipRequests) {
        MembershipRequestServiceUtil.updateStatus(membershipRequest.getMembershipRequestId(),themeDisplay.translate("your-membership-has-been-approved"),MembershipRequestConstants.STATUS_APPROVED,serviceContext);
        LiveUsers.joinGroup(themeDisplay.getCompanyId(),membershipRequest.getGroupId(),new long[]{membershipRequest.getUserId()});
      }
    }
  }
  UnicodeProperties typeSettingsProperties=liveGroup.getTypeSettingsProperties();
  String customJspServletContextName=ParamUtil.getString(actionRequest,"customJspServletContextName");
  typeSettingsProperties.setProperty("customJspServletContextName",customJspServletContextName);
  String googleAnalyticsId=ParamUtil.getString(actionRequest,"googleAnalyticsId");
  typeSettingsProperties.setProperty("googleAnalyticsId",googleAnalyticsId);
  String publicRobots=ParamUtil.getString(actionRequest,"publicRobots");
  String privateRobots=ParamUtil.getString(actionRequest,"privateRobots");
  typeSettingsProperties.setProperty("false-robots.txt",publicRobots);
  typeSettingsProperties.setProperty("true-robots.txt",privateRobots);
  String publicVirtualHost=ParamUtil.getString(actionRequest,"publicVirtualHost");
  String privateVirtualHost=ParamUtil.getString(actionRequest,"privateVirtualHost");
  LayoutSetServiceUtil.updateVirtualHost(liveGroup.getGroupId(),false,publicVirtualHost);
  LayoutSetServiceUtil.updateVirtualHost(liveGroup.getGroupId(),true,privateVirtualHost);
  if (liveGroup.hasStagingGroup()) {
    Group stagingGroup=liveGroup.getStagingGroup();
    oldStagingFriendlyURL=stagingGroup.getFriendlyURL();
    publicVirtualHost=ParamUtil.getString(actionRequest,"stagingPublicVirtualHost");
    privateVirtualHost=ParamUtil.getString(actionRequest,"stagingPrivateVirtualHost");
    friendlyURL=ParamUtil.getString(actionRequest,"stagingFriendlyURL");
    LayoutSetServiceUtil.updateVirtualHost(stagingGroup.getGroupId(),false,publicVirtualHost);
    LayoutSetServiceUtil.updateVirtualHost(stagingGroup.getGroupId(),true,privateVirtualHost);
    GroupServiceUtil.updateFriendlyURL(stagingGroup.getGroupId(),friendlyURL);
  }
  liveGroup=GroupServiceUtil.updateGroup(liveGroup.getGroupId(),typeSettingsProperties.toString());
  LayoutSet privateLayoutSet=liveGroup.getPrivateLayoutSet();
  LayoutSet publicLayoutSet=liveGroup.getPublicLayoutSet();
  if (!liveGroup.isStaged()) {
    long privateLayoutSetPrototypeId=ParamUtil.getLong(actionRequest,"privateLayoutSetPrototypeId");
    long publicLayoutSetPrototypeId=ParamUtil.getLong(actionRequest,"publicLayoutSetPrototypeId");
    boolean privateLayoutSetPrototypeLinkEnabled=ParamUtil.getBoolean(actionRequest,"privateLayoutSetPrototypeLinkEnabled");
    boolean publicLayoutSetPrototypeLinkEnabled=ParamUtil.getBoolean(actionRequest,"publicLayoutSetPrototypeLinkEnabled");
    if ((privateLayoutSetPrototypeId == 0) && (publicLayoutSetPrototypeId == 0) && !privateLayoutSetPrototypeLinkEnabled&& !publicLayoutSetPrototypeLinkEnabled) {
      long layoutSetPrototypeId=ParamUtil.getLong(actionRequest,"layoutSetPrototypeId");
      int layoutSetVisibility=ParamUtil.getInteger(actionRequest,"layoutSetVisibility");
      boolean layoutSetPrototypeLinkEnabled=ParamUtil.getBoolean(actionRequest,"layoutSetPrototypeLinkEnabled",(layoutSetPrototypeId > 0));
      if (layoutSetVisibility == _LAYOUT_SET_VISIBILITY_PRIVATE) {
        privateLayoutSetPrototypeId=layoutSetPrototypeId;
        privateLayoutSetPrototypeLinkEnabled=layoutSetPrototypeLinkEnabled;
      }
 else {
        publicLayoutSetPrototypeId=layoutSetPrototypeId;
        publicLayoutSetPrototypeLinkEnabled=layoutSetPrototypeLinkEnabled;
      }
    }
    SitesUtil.updateLayoutSetPrototypesLinks(liveGroup,publicLayoutSetPrototypeId,privateLayoutSetPrototypeId,publicLayoutSetPrototypeLinkEnabled,privateLayoutSetPrototypeLinkEnabled);
  }
  String redirect=ParamUtil.getString(actionRequest,"redirect");
  long refererPlid=GetterUtil.getLong(HttpUtil.getParameter(redirect,"refererPlid",false));
  if (!privateLayoutSet.isLayoutSetPrototypeLinkActive() && !publicLayoutSet.isLayoutSetPrototypeLinkActive()) {
    if ((refererPlid > 0) && liveGroup.hasStagingGroup() && (themeDisplay.getScopeGroupId() != liveGroup.getGroupId())) {
      Layout firstLayout=LayoutLocalServiceUtil.fetchFirstLayout(liveGroup.getGroupId(),false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
      if (firstLayout == null) {
        firstLayout=LayoutLocalServiceUtil.fetchFirstLayout(liveGroup.getGroupId(),true,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
      }
      if (firstLayout != null) {
        refererPlid=firstLayout.getPlid();
      }
 else {
        refererPlid=0;
      }
    }
    StagingUtil.updateStaging(actionRequest,liveGroup);
  }
  return new Object[]{liveGroup,oldFriendlyURL,oldStagingFriendlyURL,refererPlid};
}
