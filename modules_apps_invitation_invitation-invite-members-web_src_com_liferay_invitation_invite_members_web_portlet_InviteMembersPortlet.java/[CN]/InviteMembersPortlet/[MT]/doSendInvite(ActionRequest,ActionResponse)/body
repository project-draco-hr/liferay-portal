{
  long groupId=ParamUtil.getLong(actionRequest,"groupId");
  long[] receiverUserIds=getLongArray(actionRequest,"receiverUserIds");
  String[] receiverEmailAddresses=getStringArray(actionRequest,"receiverEmailAddresses");
  long invitedRoleId=ParamUtil.getLong(actionRequest,"invitedRoleId");
  long invitedTeamId=ParamUtil.getLong(actionRequest,"invitedTeamId");
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  if (!_userLocalService.hasGroupUser(groupId,themeDisplay.getUserId())) {
    return;
  }
  Group group=_groupLocalService.getGroup(groupId);
  PortletURL portletURL=PortletProviderUtil.getPortletURL(actionRequest,group,UserNotificationEvent.class.getName(),PortletProvider.Action.VIEW);
  ServiceContext serviceContext=ServiceContextFactory.getInstance(actionRequest);
  serviceContext.setAttribute("redirectURL",portletURL.toString());
  HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
  String createAccountURL=PortalUtil.getCreateAccountURL(request,themeDisplay);
  serviceContext.setAttribute("createAccountURL",createAccountURL);
  serviceContext.setAttribute("loginURL",themeDisplay.getURLSignIn());
  _memberRequestLocalService.addMemberRequests(themeDisplay.getUserId(),groupId,receiverUserIds,invitedRoleId,invitedTeamId,serviceContext);
  _memberRequestLocalService.addMemberRequests(themeDisplay.getUserId(),groupId,receiverEmailAddresses,invitedRoleId,invitedTeamId,serviceContext);
}
