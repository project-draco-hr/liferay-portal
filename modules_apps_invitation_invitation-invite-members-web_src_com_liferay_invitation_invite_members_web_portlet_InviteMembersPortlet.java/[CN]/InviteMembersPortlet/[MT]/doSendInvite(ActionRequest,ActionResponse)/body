{
  long groupId=ParamUtil.getLong(actionRequest,"groupId");
  long[] receiverUserIds=getLongArray(actionRequest,"receiverUserIds");
  String[] receiverEmailAddresses=getStringArray(actionRequest,"receiverEmailAddresses");
  long invitedRoleId=ParamUtil.getLong(actionRequest,"invitedRoleId");
  long invitedTeamId=ParamUtil.getLong(actionRequest,"invitedTeamId");
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  if (!UserLocalServiceUtil.hasGroupUser(groupId,themeDisplay.getUserId())) {
    return;
  }
  ServiceContext serviceContext=ServiceContextFactory.getInstance(actionRequest);
  long plid=themeDisplay.getPlid();
  Layout layout=LayoutLocalServiceUtil.getLayout(plid);
  if (layout.isPrivateLayout()) {
    Group guestGroup=GroupLocalServiceUtil.getGroup(themeDisplay.getCompanyId(),GroupConstants.GUEST);
    plid=guestGroup.getDefaultPublicPlid();
  }
  PortletURL portletURL=PortletURLFactoryUtil.create(actionRequest,PortletKeys.NOTIFICATIONS,plid,PortletRequest.RENDER_PHASE);
  portletURL.setParameter("mvcPath","/notifications/view.jsp");
  portletURL.setParameter("actionable",StringPool.TRUE);
  portletURL.setWindowState(WindowState.MAXIMIZED);
  serviceContext.setAttribute("redirectURL",portletURL.toString());
  String createAccountURL=getCreateAccountURL(PortalUtil.getHttpServletRequest(actionRequest),themeDisplay);
  serviceContext.setAttribute("createAccountURL",createAccountURL);
  serviceContext.setAttribute("loginURL",themeDisplay.getURLSignIn());
  MemberRequestLocalServiceUtil.addMemberRequests(themeDisplay.getUserId(),groupId,receiverUserIds,invitedRoleId,invitedTeamId,serviceContext);
  MemberRequestLocalServiceUtil.addMemberRequests(themeDisplay.getUserId(),groupId,receiverEmailAddresses,invitedRoleId,invitedTeamId,serviceContext);
}
