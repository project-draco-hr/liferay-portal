{
  try {
    Destination destination=new SerialDestination(DestinationNames.SCHEDULER);
    MessageBusUtil.addDestination(destination);
    MessageBusUtil.registerMessageListener(destination.getName(),new QuartzMessageListener());
    Properties props=new Properties();
    props.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_ID,StdSchedulerFactory.AUTO_GENERATE_INSTANCE_ID);
    props.put(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,PropsUtil.get(PropsUtil.QUARTZ_THREAD_POOL_CLASS));
    props.put("org.quartz.threadPool.threadCount",PropsUtil.get(PropsUtil.QUARTZ_THREAD_POOL_COUNT));
    props.put("org.quartz.threadPool.threadPriority",PropsUtil.get(PropsUtil.QUARTZ_THREAD_POOL_PRIORITY));
    props.put("org.quartz.jobStore.misfireThreshold",PropsUtil.get(PropsUtil.QUARTZ_JOBSTORE_MISFIRE_THRESHOLD));
    props.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS,PropsUtil.get(PropsUtil.QUARTZ_JOBSTORE_CLASS));
    props.put("org.quartz.jobStore.isClustered",PropsUtil.get(PropsUtil.QUARTZ_JOBSTORE_CLUSTERED));
    props.put(StdSchedulerFactory.PROP_JOB_STORE_USE_PROP,"true");
    props.put("org.quartz.jobStore.dataSource","ds");
    props.put("org.quartz.dataSource.ds.connectionProvider.class",QuartzConnectionProviderImpl.class.getName());
    props.put("org.quartz.jobStore.tablePrefix","quartz_");
    props.put("org.quartz.jobStore.driverDelegateClass",getDriverDelegateClass());
    StdSchedulerFactory factory=new StdSchedulerFactory();
    factory.initialize(props);
    _scheduler=factory.getScheduler();
  }
 catch (  Exception e) {
    _log.error("Unable to initialize engine",e);
  }
}
