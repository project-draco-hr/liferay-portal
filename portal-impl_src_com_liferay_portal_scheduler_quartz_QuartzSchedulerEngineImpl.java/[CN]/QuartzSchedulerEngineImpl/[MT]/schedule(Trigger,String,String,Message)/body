{
  try {
    String jobName=trigger.getName();
    String groupName=trigger.getGroup();
    JobDetail jobDetail=new JobDetail(jobName,groupName,MessageSenderJob.class);
    jobDetail.setDurability(true);
    SchedulerContext schedulerContext=_scheduler.getContext();
    ObjectValuePair<TriggerState,Exception> jobState=(ObjectValuePair<TriggerState,Exception>)schedulerContext.get(jobDetail.getFullName());
    if (jobState == null) {
      jobState=new ObjectValuePair<TriggerState,Exception>();
      schedulerContext.put(jobDetail.getFullName(),jobState);
    }
    JobDataMap jobDataMap=jobDetail.getJobDataMap();
    jobDataMap.put(DESCRIPTION,description);
    jobDataMap.put(DESTINATION_NAME,destinationName);
    jobDataMap.put(MESSAGE,message);
synchronized (this) {
      _scheduler.deleteJob(jobName,groupName);
      _scheduler.scheduleJob(jobDetail,trigger);
    }
  }
 catch (  ObjectAlreadyExistsException oare) {
    if (_log.isInfoEnabled()) {
      _log.info("Message is already scheduled");
    }
  }
}
