{
  if (!PropsValues.SCHEDULER_ENABLED) {
    return null;
  }
  try {
    JobDetail jobDetail=_scheduler.getJobDetail(jobName,groupName);
    if (jobDetail == null) {
      return null;
    }
    JobDataMap jobDataMap=jobDetail.getJobDataMap();
    String description=jobDataMap.getString(DESCRIPTION);
    String destinationName=jobDataMap.getString(DESTINATION_NAME);
    Message message=getMessage(jobDataMap);
    SchedulerResponse schedulerResponse=null;
    Trigger trigger=_scheduler.getTrigger(jobName,groupName);
    handleJobState(jobName,groupName,message,trigger);
    if (trigger == null) {
      schedulerResponse=new SchedulerResponse();
      schedulerResponse.setDescription(description);
      schedulerResponse.setDestinationName(destinationName);
      schedulerResponse.setGroupName(groupName);
      schedulerResponse.setJobName(jobName);
      schedulerResponse.setMessage(message);
    }
 else {
      if (CronTrigger.class.isAssignableFrom(trigger.getClass())) {
        CronTrigger cronTrigger=CronTrigger.class.cast(trigger);
        schedulerResponse=new SchedulerResponse();
        schedulerResponse.setDescription(description);
        schedulerResponse.setDestinationName(destinationName);
        schedulerResponse.setMessage(message);
        schedulerResponse.setTrigger(new com.liferay.portal.kernel.scheduler.CronTrigger(jobName,groupName,cronTrigger.getStartTime(),cronTrigger.getEndTime(),cronTrigger.getCronExpression()));
      }
 else       if (SimpleTrigger.class.isAssignableFrom(trigger.getClass())) {
        SimpleTrigger simpleTrigger=SimpleTrigger.class.cast(trigger);
        schedulerResponse=new SchedulerResponse();
        schedulerResponse.setDescription(description);
        schedulerResponse.setDestinationName(destinationName);
        schedulerResponse.setMessage(message);
        schedulerResponse.setTrigger(new IntervalTrigger(jobName,groupName,simpleTrigger.getStartTime(),simpleTrigger.getEndTime(),simpleTrigger.getRepeatInterval()));
      }
    }
    return schedulerResponse;
  }
 catch (  Exception e) {
    throw new SchedulerException("Unable to get job",e);
  }
}
