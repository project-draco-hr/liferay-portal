{
  if (!PropsValues.SCHEDULER_ENABLED) {
    return new ArrayList<SchedulerRequest>();
  }
  try {
    String[] jobNames=_scheduler.getJobNames(groupName);
    List<SchedulerRequest> requests=new ArrayList<SchedulerRequest>();
    for (    String jobName : jobNames) {
      JobDetail jobDetail=_scheduler.getJobDetail(jobName,groupName);
      if (jobDetail == null) {
        continue;
      }
      JobDataMap jobDataMap=jobDetail.getJobDataMap();
      String description=jobDataMap.getString(DESCRIPTION);
      Message message=(Message)jobDataMap.get(MESSAGE);
      SchedulerRequest schedulerRequest=null;
      Trigger trigger=_scheduler.getTrigger(jobName,groupName);
      if (CronTrigger.class.isAssignableFrom(trigger.getClass())) {
        CronTrigger cronTrigger=CronTrigger.class.cast(trigger);
        schedulerRequest=SchedulerRequest.createRetrieveResponseRequest(new com.liferay.portal.kernel.scheduler.CronTrigger(jobName,groupName,cronTrigger.getStartTime(),cronTrigger.getEndTime(),cronTrigger.getCronExpression()),description,message);
      }
 else       if (SimpleTrigger.class.isAssignableFrom(trigger.getClass())) {
        SimpleTrigger simpleTrigger=SimpleTrigger.class.cast(trigger);
        schedulerRequest=SchedulerRequest.createRetrieveResponseRequest(new IntervalTrigger(jobName,groupName,simpleTrigger.getStartTime(),simpleTrigger.getEndTime(),simpleTrigger.getRepeatInterval()),description,message);
      }
      if (schedulerRequest != null) {
        requests.add(schedulerRequest);
      }
    }
    return requests;
  }
 catch (  org.quartz.SchedulerException se) {
    throw new SchedulerException("Unable to retrieve job",se);
  }
}
