{
  PortletPreferences prefs=PrefsPropsUtil.getPreferences();
  boolean enabled=ParamUtil.getBoolean(req,"enabled");
  boolean required=ParamUtil.getBoolean(req,"required");
  String url=ParamUtil.getString(req,"url");
  String principal=ParamUtil.getString(req,"principal");
  String credentials=ParamUtil.getString(req,"credentials");
  String searchFilter=ParamUtil.getString(req,"searchFilter");
  String passwordEncryptionAlgorithm=ParamUtil.getString(req,"passwordEncryptionAlgorithm");
  String userMappings=ParamUtil.getString(req,"userMappings");
  try {
    if (enabled) {
      Properties env=new Properties();
      env.put(Context.INITIAL_CONTEXT_FACTORY,PrefsPropsUtil.getString(PropsUtil.AUTH_IMPL_LDAP_FACTORY_INITIAL));
      env.put(Context.PROVIDER_URL,url);
      env.put(Context.SECURITY_PRINCIPAL,principal);
      env.put(Context.SECURITY_CREDENTIALS,credentials);
      if (_log.isDebugEnabled()) {
        StringWriter sw=new StringWriter();
        env.list(new PrintWriter(sw));
        _log.debug(sw.getBuffer().toString());
      }
      new InitialLdapContext(env,null);
    }
  }
 catch (  Exception e) {
    SessionErrors.add(req,"ldapAuthentication");
    return;
  }
  prefs.setValue(PropsUtil.AUTH_IMPL_LDAP_ENABLED,Boolean.toString(enabled));
  prefs.setValue(PropsUtil.AUTH_IMPL_LDAP_REQUIRED,Boolean.toString(required));
  prefs.setValue(PropsUtil.AUTH_IMPL_LDAP_PROVIDER_URL,url);
  prefs.setValue(PropsUtil.AUTH_IMPL_LDAP_SECURITY_PRINCIPAL,principal);
  prefs.setValue(PropsUtil.AUTH_IMPL_LDAP_SECURITY_CREDENTIALS,credentials);
  prefs.setValue(PropsUtil.AUTH_IMPL_LDAP_SEARCH_FILTER,searchFilter);
  prefs.setValue(PropsUtil.AUTH_IMPL_LDAP_PASSWORD_ENCRYPTION_ALGORITHM,passwordEncryptionAlgorithm);
  prefs.setValue(PropsUtil.AUTH_IMPL_LDAP_USER_MAPPINGS,userMappings);
  prefs.store();
  LDAPAuth ldapAuth=(LDAPAuth)InstancePool.get(LDAPAuth.class.getName());
  ldapAuth.setEnabled(enabled);
}
