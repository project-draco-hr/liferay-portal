{
  long pk=nextLong();
  MBThread newMBThread=_persistence.create(pk);
  newMBThread.setGroupId(nextLong());
  newMBThread.setCompanyId(nextLong());
  newMBThread.setCategoryId(nextLong());
  newMBThread.setRootMessageId(nextLong());
  newMBThread.setRootMessageUserId(nextLong());
  newMBThread.setMessageCount(nextInt());
  newMBThread.setViewCount(nextInt());
  newMBThread.setLastPostByUserId(nextLong());
  newMBThread.setLastPostDate(nextDate());
  newMBThread.setPriority(nextDouble());
  newMBThread.setStatus(nextInt());
  newMBThread.setStatusByUserId(nextLong());
  newMBThread.setStatusByUserName(randomString());
  newMBThread.setStatusDate(nextDate());
  newMBThread.setQuestion(randomBoolean());
  _persistence.update(newMBThread,false);
  MBThread existingMBThread=_persistence.findByPrimaryKey(newMBThread.getPrimaryKey());
  assertEquals(existingMBThread.getThreadId(),newMBThread.getThreadId());
  assertEquals(existingMBThread.getGroupId(),newMBThread.getGroupId());
  assertEquals(existingMBThread.getCompanyId(),newMBThread.getCompanyId());
  assertEquals(existingMBThread.getCategoryId(),newMBThread.getCategoryId());
  assertEquals(existingMBThread.getRootMessageId(),newMBThread.getRootMessageId());
  assertEquals(existingMBThread.getRootMessageUserId(),newMBThread.getRootMessageUserId());
  assertEquals(existingMBThread.getMessageCount(),newMBThread.getMessageCount());
  assertEquals(existingMBThread.getViewCount(),newMBThread.getViewCount());
  assertEquals(existingMBThread.getLastPostByUserId(),newMBThread.getLastPostByUserId());
  assertEquals(Time.getShortTimestamp(existingMBThread.getLastPostDate()),Time.getShortTimestamp(newMBThread.getLastPostDate()));
  assertEquals(existingMBThread.getPriority(),newMBThread.getPriority());
  assertEquals(existingMBThread.getStatus(),newMBThread.getStatus());
  assertEquals(existingMBThread.getStatusByUserId(),newMBThread.getStatusByUserId());
  assertEquals(existingMBThread.getStatusByUserName(),newMBThread.getStatusByUserName());
  assertEquals(Time.getShortTimestamp(existingMBThread.getStatusDate()),Time.getShortTimestamp(newMBThread.getStatusDate()));
  assertEquals(existingMBThread.getQuestion(),newMBThread.getQuestion());
}
