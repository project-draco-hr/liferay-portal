{
  verifyProperties();
  String classPath=_getClassPath();
  List commands=new ArrayList<>();
  if (JAVA_HOME != null) {
    commands.add(JAVA_HOME + "/bin/java");
  }
 else {
    commands.add("java");
  }
  commands.add("-Xmx2048m");
  commands.add("-Dfile.encoding=UTF8");
  commands.add("-Duser.country=US");
  commands.add("-Duser.language=en");
  commands.add("-Duser.timezone=GMT");
  commands.add("-cp");
  commands.add(classPath);
  commands.add("com.liferay.portal.tools.DBUpgrader");
  ProcessBuilder processBuilder=new ProcessBuilder();
  processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
  processBuilder.redirectInput(ProcessBuilder.Redirect.INHERIT);
  processBuilder.command(commands);
  Process process=processBuilder.start();
  try (InputStreamReader isr=new InputStreamReader(process.getInputStream());BufferedReader br=new BufferedReader(isr)){
    String line;
    while ((line=br.readLine()) != null) {
      if (line.equals("Running modules upgrades. Connect to your Gogo " + "Shell to check the status.")) {
        break;
      }
 else {
        System.out.println(line);
      }
    }
    System.out.flush();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
  try (GogoTelnetClient client=new GogoTelnetClient()){
    System.out.println("You are now connected to Gogo Shell");
    _printHelp();
    _consoleReader.setPrompt("g! ");
    String line;
    while ((line=_consoleReader.readLine()) != null) {
      if (line.equals("exit") || line.equals("quit")) {
        break;
      }
 else       if (line.equals("help")) {
        _printHelp();
      }
 else {
        System.out.println(client.send(line));
      }
    }
    System.out.print("Making sure all upgrades steps have been completed");
    boolean upgrading=true;
    while (upgrading) {
      System.out.print("...");
      String upgradeSteps=client.send("upgrade:list | grep Registered | grep step");
      upgrading=upgradeSteps.contains("true");
    }
    System.out.println("done.");
    System.out.println("Exiting Gogo Shell");
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
  process.getInputStream().close();
  process.getOutputStream().close();
  process.getErrorStream().close();
  if (!process.waitFor(5,TimeUnit.SECONDS)) {
    process.destroy();
  }
}
