{
  FileEntry tempFileEntry=null;
  InputStream tempImageStream=null;
  try {
    tempFileEntry=getTempImageFileEntry(actionRequest);
    tempImageStream=tempFileEntry.getContentStream();
    ImageBag imageBag=ImageToolUtil.read(tempImageStream);
    RenderedImage renderedImage=imageBag.getRenderedImage();
    String cropRegionJSON=ParamUtil.getString(actionRequest,"cropRegion");
    if (Validator.isNotNull(cropRegionJSON)) {
      JSONObject jsonObject=JSONFactoryUtil.createJSONObject(cropRegionJSON);
      int height=jsonObject.getInt("height");
      int width=jsonObject.getInt("width");
      int x=jsonObject.getInt("x");
      int y=jsonObject.getInt("y");
      if (!isResized(renderedImage,jsonObject)) {
        return tempFileEntry;
      }
      if ((height + y) > renderedImage.getHeight()) {
        height=renderedImage.getHeight() - y;
      }
      if ((width + x) > renderedImage.getWidth()) {
        width=renderedImage.getWidth() - x;
      }
      renderedImage=ImageToolUtil.crop(renderedImage,height,width,x,y);
    }
    byte[] bytes=ImageToolUtil.getBytes(renderedImage,imageBag.getType());
    ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
    File file=FileUtil.createTempFile(bytes);
    try {
      TempFileUtil.deleteTempFile(themeDisplay.getScopeGroupId(),themeDisplay.getUserId(),getTempImageFileName(actionRequest),getTempImageFolderName());
    }
 catch (    Exception e) {
    }
    return TempFileUtil.addTempFile(themeDisplay.getScopeGroupId(),themeDisplay.getUserId(),getTempImageFileName(actionRequest),getTempImageFolderName(),file,tempFileEntry.getMimeType());
  }
 catch (  NoSuchFileEntryException nsfee) {
    throw new UploadException(nsfee);
  }
catch (  NoSuchRepositoryException nsre) {
    throw new UploadException(nsre);
  }
 finally {
    StreamUtil.cleanUp(tempImageStream);
  }
}
