{
  String originalExtension=FilenameUtils.getExtension(fileName);
  fileName=FilenameUtils.getBaseName(fileName);
  String extension=originalExtension;
  if (!keepTestExtension && originalExtension.startsWith("test")) {
    extension=extension.substring(4);
  }
  String fullFileName=_DIR_NAME + StringPool.SLASH + fileName+ "."+ originalExtension;
  File newFile=temporaryFolder.newFile(fileName + "." + extension);
  URL url=classLoader.getResource(fullFileName);
  try (InputStream inputStream=url.openStream()){
    FileUtils.copyInputStreamToFile(inputStream,newFile);
  }
   SourceFormatterBean sourceFormatterBean=getSourceFormatterBean();
  sourceFormatterBean.setFileNames(Collections.singletonList(newFile.getAbsolutePath()));
  SourceFormatter sourceFormatter=new SourceFormatter(sourceFormatterBean);
  sourceFormatter.format();
  List<String> processedFiles=sourceFormatter.getProcessedFiles();
  if (processedFiles.isEmpty()) {
    throw new IllegalArgumentException("The file name " + newFile.getAbsolutePath() + " does not end with a valid extension");
  }
  List<String> errorMessages=sourceFormatter.getErrorMessages();
  if (!errorMessages.isEmpty() || (expectedErrorMessages.length > 0)) {
    Assert.assertEquals(expectedErrorMessages.length,errorMessages.size());
    for (int i=0; i < errorMessages.size(); i++) {
      String actualErrorMessage=errorMessages.get(i);
      String expectedErrorMessage=expectedErrorMessages[i];
      StringBundler sb=new StringBundler(5);
      sb.append(expectedErrorMessage);
      sb.append(StringPool.SPACE);
      sb.append(newFile.getAbsolutePath());
      if (lineNumbers != null) {
        sb.append(StringPool.SPACE);
        sb.append(lineNumbers[i]);
      }
      Assert.assertEquals(sb.toString(),actualErrorMessage);
    }
  }
 else {
    String actualFormattedContent=FileUtils.readFileToString(new File(processedFiles.get(0)));
    URL expectedUrl=classLoader.getResource(_DIR_NAME + "/expected/" + fileName+ "."+ originalExtension);
    String expectedFormattedContent=IOUtils.toString(expectedUrl,StringPool.UTF8);
    expectedFormattedContent=StringUtil.replace(expectedFormattedContent,StringPool.RETURN_NEW_LINE,StringPool.NEW_LINE);
    Assert.assertEquals(expectedFormattedContent,actualFormattedContent);
  }
}
