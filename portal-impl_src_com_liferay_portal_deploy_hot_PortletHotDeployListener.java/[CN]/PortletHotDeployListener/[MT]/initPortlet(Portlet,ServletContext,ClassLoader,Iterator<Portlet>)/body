{
  String servletContextName=servletContext.getServletContextName();
  PortletApp portletApp=portlet.getPortletApp();
  if (!portletApp.isWARFile()) {
    String contextPath=PortalUtil.getPathContext();
    servletContext=VelocityContextPool.get(contextPath);
    portletClassLoader=PortalClassLoaderUtil.getClassLoader();
  }
  Class<?> portletClass=null;
  try {
    portletClass=portletClassLoader.loadClass(portlet.getPortletClass());
  }
 catch (  Throwable e) {
    _log.error(e,e);
    portletsItr.remove();
    PortletLocalServiceUtil.destroyPortlet(portlet);
    return;
  }
  javax.portlet.Portlet portletInstance=(javax.portlet.Portlet)portletClass.newInstance();
  if (ClassUtil.isSubclass(portletClass,StrutsPortlet.class.getName())) {
    _strutsBridges=true;
  }
  ConfigurationAction configurationActionInstance=null;
  if (Validator.isNotNull(portlet.getConfigurationActionClass())) {
    configurationActionInstance=(ConfigurationAction)newInstance(portletClassLoader,ConfigurationAction.class,portlet.getConfigurationActionClass());
  }
  Indexer indexerInstance=null;
  if (Validator.isNotNull(portlet.getIndexerClass())) {
    indexerInstance=(Indexer)newInstance(portletClassLoader,Indexer.class,portlet.getIndexerClass());
    IndexerRegistryUtil.register(indexerInstance);
  }
  OpenSearch openSearchInstance=null;
  if (Validator.isNotNull(portlet.getOpenSearchClass())) {
    openSearchInstance=(OpenSearch)newInstance(portletClassLoader,OpenSearch.class,portlet.getOpenSearchClass());
  }
  Scheduler schedulerInstance=null;
  if (PropsValues.SCHEDULER_ENABLED && Validator.isNotNull(portlet.getSchedulerClass())) {
    schedulerInstance=(Scheduler)newInstance(portletClassLoader,Scheduler.class,portlet.getSchedulerClass());
    schedulerInstance.schedule();
  }
  if (PropsValues.SCHEDULER_ENABLED) {
    List<SchedulerEntry> schedulerEntries=portlet.getSchedulerEntries();
    if ((schedulerEntries != null) && !schedulerEntries.isEmpty()) {
      for (      SchedulerEntry schedulerEntry : schedulerEntries) {
        initSchedulerEntry(schedulerEntry,portletClassLoader);
      }
    }
  }
  FriendlyURLMapper friendlyURLMapperInstance=null;
  if (Validator.isNotNull(portlet.getFriendlyURLMapperClass())) {
    friendlyURLMapperInstance=(FriendlyURLMapper)newInstance(portletClassLoader,FriendlyURLMapper.class,portlet.getFriendlyURLMapperClass());
  }
  URLEncoder urlEncoderInstance=null;
  if (Validator.isNotNull(portlet.getURLEncoderClass())) {
    urlEncoderInstance=(URLEncoder)newInstance(portletClassLoader,URLEncoder.class,portlet.getURLEncoderClass());
  }
  PortletDataHandler portletDataHandlerInstance=null;
  if (Validator.isNotNull(portlet.getPortletDataHandlerClass())) {
    portletDataHandlerInstance=(PortletDataHandler)newInstance(portletClassLoader,PortletDataHandler.class,portlet.getPortletDataHandlerClass());
  }
  PortletLayoutListener portletLayoutListenerInstance=null;
  if (Validator.isNotNull(portlet.getPortletLayoutListenerClass())) {
    portletLayoutListenerInstance=(PortletLayoutListener)newInstance(portletClassLoader,PortletLayoutListener.class,portlet.getPortletLayoutListenerClass());
  }
  PollerProcessor pollerProcessorInstance=null;
  if (Validator.isNotNull(portlet.getPollerProcessorClass())) {
    pollerProcessorInstance=(PollerProcessor)newInstance(portletClassLoader,PollerProcessor.class,portlet.getPollerProcessorClass());
    PollerProcessorUtil.addPollerProcessor(portlet.getPortletId(),pollerProcessorInstance);
  }
  com.liferay.portal.kernel.pop.MessageListener popMessageListenerInstance=null;
  if (Validator.isNotNull(portlet.getPopMessageListenerClass())) {
    popMessageListenerInstance=(com.liferay.portal.kernel.pop.MessageListener)newInstance(portletClassLoader,com.liferay.portal.kernel.pop.MessageListener.class,portlet.getPopMessageListenerClass());
    POPServerUtil.addListener(popMessageListenerInstance);
  }
  SocialActivityInterpreter socialActivityInterpreterInstance=null;
  if (Validator.isNotNull(portlet.getSocialActivityInterpreterClass())) {
    socialActivityInterpreterInstance=(SocialActivityInterpreter)newInstance(portletClassLoader,SocialActivityInterpreter.class,portlet.getSocialActivityInterpreterClass());
    socialActivityInterpreterInstance=new SocialActivityInterpreterImpl(portlet.getPortletId(),socialActivityInterpreterInstance);
    SocialActivityInterpreterLocalServiceUtil.addActivityInterpreter(socialActivityInterpreterInstance);
  }
  SocialRequestInterpreter socialRequestInterpreterInstance=null;
  if (Validator.isNotNull(portlet.getSocialRequestInterpreterClass())) {
    socialRequestInterpreterInstance=(SocialRequestInterpreter)newInstance(portletClassLoader,SocialRequestInterpreter.class,portlet.getSocialRequestInterpreterClass());
    socialRequestInterpreterInstance=new SocialRequestInterpreterImpl(portlet.getPortletId(),socialRequestInterpreterInstance);
    SocialRequestInterpreterLocalServiceUtil.addRequestInterpreter(socialRequestInterpreterInstance);
  }
  WebDAVStorage webDAVStorageInstance=null;
  if (Validator.isNotNull(portlet.getWebDAVStorageClass())) {
    webDAVStorageInstance=(WebDAVStorage)newInstance(portletClassLoader,WebDAVStorage.class,portlet.getWebDAVStorageClass());
    webDAVStorageInstance.setToken(portlet.getWebDAVStorageToken());
    WebDAVUtil.addStorage(webDAVStorageInstance);
  }
  Method xmlRpcMethodInstance=null;
  if (Validator.isNotNull(portlet.getXmlRpcMethodClass())) {
    xmlRpcMethodInstance=(Method)newInstance(portletClassLoader,Method.class,portlet.getXmlRpcMethodClass());
    XmlRpcServlet.registerMethod(xmlRpcMethodInstance);
  }
  ControlPanelEntry controlPanelEntryInstance=null;
  if (Validator.isNotNull(portlet.getControlPanelEntryClass())) {
    controlPanelEntryInstance=(ControlPanelEntry)newInstance(portletClassLoader,ControlPanelEntry.class,portlet.getControlPanelEntryClass());
  }
  List<AssetRendererFactory> assetRendererFactoryInstances=new ArrayList<AssetRendererFactory>();
  for (  String assetRendererFactoryClass : portlet.getAssetRendererFactoryClasses()) {
    AssetRendererFactory assetRendererFactoryInstance=(AssetRendererFactory)newInstance(portletClassLoader,AssetRendererFactory.class,assetRendererFactoryClass);
    assetRendererFactoryInstance.setClassNameId(PortalUtil.getClassNameId(assetRendererFactoryInstance.getClassName()));
    assetRendererFactoryInstance.setPortletId(portlet.getPortletId());
    assetRendererFactoryInstances.add(assetRendererFactoryInstance);
    AssetRendererFactoryRegistryUtil.register(assetRendererFactoryInstance);
  }
  List<CustomAttributesDisplay> customAttributesDisplayInstances=new ArrayList<CustomAttributesDisplay>();
  for (  String customAttributesDisplayClass : portlet.getCustomAttributesDisplayClasses()) {
    CustomAttributesDisplay customAttributesDisplayInstance=(CustomAttributesDisplay)newInstance(portletClassLoader,CustomAttributesDisplay.class,customAttributesDisplayClass);
    customAttributesDisplayInstance.setClassNameId(PortalUtil.getClassNameId(customAttributesDisplayInstance.getClassName()));
    customAttributesDisplayInstance.setPortletId(portlet.getPortletId());
    customAttributesDisplayInstances.add(customAttributesDisplayInstance);
  }
  List<WorkflowHandler> workflowHandlerInstances=new ArrayList<WorkflowHandler>();
  for (  String workflowHandlerClass : portlet.getWorkflowHandlerClasses()) {
    WorkflowHandler workflowHandlerInstance=(WorkflowHandler)newInstance(portletClassLoader,WorkflowHandler.class,workflowHandlerClass);
    workflowHandlerInstances.add(workflowHandlerInstance);
    WorkflowHandlerRegistryUtil.register(workflowHandlerInstance);
  }
  PreferencesValidator preferencesValidatorInstance=null;
  if (Validator.isNotNull(portlet.getPreferencesValidator())) {
    preferencesValidatorInstance=(PreferencesValidator)newInstance(portletClassLoader,PreferencesValidator.class,portlet.getPreferencesValidator());
    try {
      if (PropsValues.PREFERENCE_VALIDATE_ON_STARTUP) {
        preferencesValidatorInstance.validate(PortletPreferencesSerializer.fromDefaultXML(portlet.getDefaultPreferences()));
      }
    }
 catch (    Exception e) {
      _log.warn("Portlet with the name " + portlet.getPortletId() + " does not have valid default preferences");
    }
  }
  Map<String,ResourceBundle> resourceBundles=null;
  if (Validator.isNotNull(portlet.getResourceBundle())) {
    resourceBundles=new HashMap<String,ResourceBundle>();
    initResourceBundle(resourceBundles,portlet,portletClassLoader,LocaleUtil.getDefault());
    Iterator<String> supportLocalesItr=portlet.getSupportedLocales().iterator();
    while (supportLocalesItr.hasNext()) {
      String supportedLocale=supportLocalesItr.next();
      Locale locale=LocaleUtil.fromLanguageId(supportedLocale);
      initResourceBundle(resourceBundles,portlet,portletClassLoader,locale);
    }
  }
  PortletBag portletBag=new PortletBagImpl(portlet.getPortletId(),servletContext,portletInstance,configurationActionInstance,indexerInstance,openSearchInstance,schedulerInstance,friendlyURLMapperInstance,urlEncoderInstance,portletDataHandlerInstance,portletLayoutListenerInstance,pollerProcessorInstance,popMessageListenerInstance,socialActivityInterpreterInstance,socialRequestInterpreterInstance,webDAVStorageInstance,xmlRpcMethodInstance,controlPanelEntryInstance,assetRendererFactoryInstances,customAttributesDisplayInstances,workflowHandlerInstances,preferencesValidatorInstance,resourceBundles);
  PortletBagPool.put(portlet.getPortletId(),portletBag);
  if (!_portletAppInitialized) {
    initPortletApp(portlet,servletContextName,servletContext,portletClassLoader);
    _portletAppInitialized=true;
  }
  try {
    PortletInstanceFactoryUtil.create(portlet,servletContext);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
}
