{
  String servletContextName=null;
  try {
    ServletContext ctx=event.getServletContext();
    servletContextName=ctx.getServletContextName();
    if (_log.isDebugEnabled()) {
      _log.debug("Invoking deploy for " + servletContextName);
    }
    long[] companyIds=PortalInstances.getCompanyIds();
    String[] xmls=new String[]{Http.URLtoString(ctx.getResource("/WEB-INF/" + PortalUtil.PORTLET_XML_FILE_NAME_STANDARD)),Http.URLtoString(ctx.getResource("/WEB-INF/" + PortalUtil.PORTLET_XML_FILE_NAME_CUSTOM)),Http.URLtoString(ctx.getResource("/WEB-INF/liferay-portlet.xml")),Http.URLtoString(ctx.getResource("/WEB-INF/web.xml"))};
    if (xmls[0] == null) {
      return;
    }
    if (_log.isInfoEnabled()) {
      _log.info("Registering portlets for " + servletContextName);
    }
    List portlets=PortletLocalServiceUtil.initWAR(servletContextName,xmls,event.getPluginPackage());
    ClassLoader portletClassLoader=event.getContextClassLoader();
    ctx.setAttribute(PortletServlet.PORTLET_CLASS_LOADER,portletClassLoader);
    boolean strutsBridges=false;
    Iterator itr1=portlets.iterator();
    while (itr1.hasNext()) {
      Portlet portlet=(Portlet)itr1.next();
      Class portletClass=portletClassLoader.loadClass(portlet.getPortletClass());
      javax.portlet.Portlet portletInstance=(javax.portlet.Portlet)portletClass.newInstance();
      if (ClassUtil.isSubclass(portletClass,StrutsPortlet.class.getName())) {
        strutsBridges=true;
      }
      ConfigurationAction configurationActionInstance=null;
      if (Validator.isNotNull(portlet.getConfigurationActionClass())) {
        configurationActionInstance=(ConfigurationAction)portletClassLoader.loadClass(portlet.getConfigurationActionClass()).newInstance();
      }
      Indexer indexerInstance=null;
      if (Validator.isNotNull(portlet.getIndexerClass())) {
        indexerInstance=(Indexer)portletClassLoader.loadClass(portlet.getIndexerClass()).newInstance();
      }
      Scheduler schedulerInstance=null;
      if (Validator.isNotNull(portlet.getSchedulerClass())) {
        schedulerInstance=(Scheduler)portletClassLoader.loadClass(portlet.getSchedulerClass()).newInstance();
      }
      URLEncoder urlEncoderInstance=null;
      if (Validator.isNotNull(portlet.getURLEncoderClass())) {
        urlEncoderInstance=(URLEncoder)portletClassLoader.loadClass(portlet.getURLEncoderClass()).newInstance();
      }
      PortletDataHandler portletDataHandlerInstance=null;
      if (Validator.isNotNull(portlet.getPortletDataHandlerClass())) {
        portletDataHandlerInstance=(PortletDataHandler)portletClassLoader.loadClass(portlet.getPortletDataHandlerClass()).newInstance();
      }
      PortletLayoutListener portletLayoutListenerInstance=null;
      if (Validator.isNotNull(portlet.getPortletLayoutListenerClass())) {
        portletLayoutListenerInstance=(PortletLayoutListener)portletClassLoader.loadClass(portlet.getPortletLayoutListenerClass()).newInstance();
      }
      ActivityTrackerInterpreter activityTrackerInterpreterInstance=null;
      if (Validator.isNotNull(portlet.getActivityTrackerInterpreterClass())) {
        activityTrackerInterpreterInstance=(ActivityTrackerInterpreter)portletClassLoader.loadClass(portlet.getActivityTrackerInterpreterClass()).newInstance();
        activityTrackerInterpreterInstance=new ActivityTrackerInterpreterImpl(activityTrackerInterpreterInstance);
        ActivityTrackerInterpreterUtil.addActivityTrackerInterpreter(activityTrackerInterpreterInstance);
      }
      MessageListener smtpMessageListenerInstance=null;
      if (Validator.isNotNull(portlet.getSmtpMessageListenerClass())) {
        smtpMessageListenerInstance=(MessageListener)portletClassLoader.loadClass(portlet.getSmtpMessageListenerClass()).newInstance();
        SMTPServerUtil.addListener(smtpMessageListenerInstance);
      }
      PreferencesValidator prefsValidatorInstance=null;
      if (Validator.isNotNull(portlet.getPreferencesValidator())) {
        prefsValidatorInstance=(PreferencesValidator)portletClassLoader.loadClass(portlet.getPreferencesValidator()).newInstance();
        try {
          if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.PREFERENCE_VALIDATE_ON_STARTUP))) {
            prefsValidatorInstance.validate(PortletPreferencesSerializer.fromDefaultXML(portlet.getDefaultPreferences()));
          }
        }
 catch (        Exception e1) {
          _log.warn("Portlet with the name " + portlet.getPortletId() + " does not have valid default preferences");
        }
      }
      Map resourceBundles=null;
      if (Validator.isNotNull(portlet.getResourceBundle())) {
        resourceBundles=CollectionFactory.getHashMap();
        Iterator itr2=portlet.getSupportedLocales().iterator();
        while (itr2.hasNext()) {
          String supportedLocale=(String)itr2.next();
          Locale locale=LocaleUtil.fromLanguageId(supportedLocale);
          try {
            ResourceBundle resourceBundle=ResourceBundle.getBundle(portlet.getResourceBundle(),locale,portletClassLoader);
            resourceBundles.put(LocaleUtil.toLanguageId(locale),resourceBundle);
          }
 catch (          MissingResourceException mre) {
            _log.warn(mre.getMessage());
          }
        }
      }
      Map customUserAttributes=CollectionFactory.getHashMap();
      Iterator itr2=portlet.getCustomUserAttributes().entrySet().iterator();
      while (itr2.hasNext()) {
        Map.Entry entry=(Map.Entry)itr2.next();
        String attrCustomClass=(String)entry.getValue();
        customUserAttributes.put(attrCustomClass,portletClassLoader.loadClass(attrCustomClass).newInstance());
      }
      PortletContextWrapper pcw=new PortletContextWrapper(portlet.getPortletId(),ctx,portletInstance,configurationActionInstance,indexerInstance,schedulerInstance,urlEncoderInstance,portletDataHandlerInstance,portletLayoutListenerInstance,activityTrackerInterpreterInstance,smtpMessageListenerInstance,prefsValidatorInstance,resourceBundles,customUserAttributes);
      PortletContextPool.put(portlet.getPortletId(),pcw);
    }
    if (!strutsBridges) {
      strutsBridges=GetterUtil.getBoolean(ctx.getInitParameter("struts-bridges-context-provider"));
    }
    if (strutsBridges) {
      ctx.setAttribute(ServletContextProvider.STRUTS_BRIDGES_CONTEXT_PROVIDER,new LiferayServletContextProvider());
    }
    String xml=Http.URLtoString(ctx.getResource("/WEB-INF/liferay-display.xml"));
    PortletCategory newPortletCategory=PortletLocalServiceUtil.getWARDisplay(servletContextName,xml);
    for (int i=0; i < companyIds.length; i++) {
      long companyId=companyIds[i];
      PortletCategory portletCategory=(PortletCategory)WebAppPool.get(String.valueOf(companyId),WebKeys.PORTLET_CATEGORY);
      if (portletCategory != null) {
        portletCategory.merge(newPortletCategory);
      }
 else {
        _log.error("Unable to register portlet for company " + companyId + " because it does not exist");
      }
    }
    String portletPropsName=ctx.getInitParameter("portlet_properties");
    if (Validator.isNotNull(portletPropsName)) {
      if (_log.isDebugEnabled()) {
        _log.debug("Loading portlet properties " + portletPropsName);
      }
      Properties portletProps=new Properties();
      PropertiesUtil.load(portletProps,StringUtil.read(portletClassLoader,portletPropsName));
      if (_log.isDebugEnabled()) {
        String portletPropsString=PropertiesUtil.list(portletProps);
        _log.debug(portletPropsString);
      }
      processProperties(servletContextName,portletClassLoader,portletProps);
    }
    processServiceBuilder(ctx,portletClassLoader);
    _vars.put(servletContextName,new ObjectValuePair(companyIds,portlets));
    if (_log.isInfoEnabled()) {
      _log.info("Portlets for " + servletContextName + " registered successfully");
    }
  }
 catch (  Exception e2) {
    throw new HotDeployException("Error registering portlets for " + servletContextName,e2);
  }
}
