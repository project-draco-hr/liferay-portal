{
  ServletContext servletContext=hotDeployEvent.getServletContext();
  String servletContextName=servletContext.getServletContextName();
  if (_log.isDebugEnabled()) {
    _log.debug("Invoking deploy for " + servletContextName);
  }
  String[] xmls=new String[]{HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/" + Portal.PORTLET_XML_FILE_NAME_STANDARD)),HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/" + Portal.PORTLET_XML_FILE_NAME_CUSTOM)),HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-portlet.xml")),HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/web.xml"))};
  if ((xmls[0] == null) && (xmls[1] == null)) {
    return;
  }
  if (_log.isInfoEnabled()) {
    _log.info("Registering portlets for " + servletContextName);
  }
  PortletContextBag portletContextBag=new PortletContextBag(servletContextName);
  PortletContextBagPool.put(servletContextName,portletContextBag);
  List<Portlet> portlets=PortletLocalServiceUtil.initWAR(servletContextName,servletContext,xmls,hotDeployEvent.getPluginPackage());
  boolean portletAppInitialized=false;
  boolean phpPortlet=false;
  boolean strutsBridges=false;
  ClassLoader classLoader=servletContext.getClassLoader();
  Iterator<Portlet> itr=portlets.iterator();
  while (itr.hasNext()) {
    Portlet portlet=itr.next();
    PortletBag portletBag=PortletBagPool.get(portlet.getRootPortletId());
    if (!portletAppInitialized) {
      initPortletApp(servletContextName,servletContext,classLoader,portlet);
      portletAppInitialized=true;
    }
    javax.portlet.Portlet portletInstance=portletBag.getPortletInstance();
    if (ClassUtil.isSubclass(portletInstance.getClass(),PHPPortlet.class.getName())) {
      phpPortlet=true;
    }
    if (ClassUtil.isSubclass(portletInstance.getClass(),StrutsPortlet.class.getName())) {
      strutsBridges=true;
    }
  }
  if (phpPortlet) {
    bindDataSource(servletContextName);
  }
  if (!strutsBridges) {
    strutsBridges=GetterUtil.getBoolean(servletContext.getInitParameter("struts-bridges-context-provider"));
  }
  if (strutsBridges) {
    servletContext.setAttribute(ServletContextProvider.STRUTS_BRIDGES_CONTEXT_PROVIDER,new LiferayServletContextProvider());
  }
  String xml=HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-display.xml"));
  PortletCategory newPortletCategory=PortletLocalServiceUtil.getWARDisplay(servletContextName,xml);
  long[] companyIds=PortalInstances.getCompanyIds();
  for (  long companyId : companyIds) {
    PortletCategory portletCategory=(PortletCategory)WebAppPool.get(companyId,WebKeys.PORTLET_CATEGORY);
    if (portletCategory != null) {
      portletCategory.merge(newPortletCategory);
    }
 else {
      _log.error("Unable to register portlet for company " + companyId + " because it does not exist");
    }
  }
  processPortletProperties(servletContextName,classLoader);
  for (  Portlet portlet : portlets) {
    List<String> modelNames=ResourceActionsUtil.getPortletModelResources(portlet.getPortletId());
    List<String> portletActions=ResourceActionsUtil.getPortletResourceActions(portlet.getPortletId());
    ResourceActionLocalServiceUtil.checkResourceActions(portlet.getPortletId(),portletActions);
    checkResourceBundles(classLoader,portlet);
    for (    String modelName : modelNames) {
      List<String> modelActions=ResourceActionsUtil.getModelResourceActions(modelName);
      ResourceActionLocalServiceUtil.checkResourceActions(modelName,modelActions);
    }
    for (    long companyId : companyIds) {
      Portlet curPortlet=PortletLocalServiceUtil.getPortletById(companyId,portlet.getPortletId());
      PortletLocalServiceUtil.checkPortlet(curPortlet);
    }
  }
  for (  Portlet portlet : portlets) {
    boolean ready=GetterUtil.getBoolean(servletContext.getInitParameter("portlets-ready-by-default"),true);
    portlet.setReady(ready);
  }
  registerClpMessageListeners(servletContext,classLoader);
  JavadocManagerUtil.load(servletContextName,classLoader);
  DirectServletRegistryUtil.clearServlets();
  FileTimestampUtil.reset();
  _portlets.put(servletContextName,portlets);
  servletContext.setAttribute(WebKeys.PLUGIN_PORTLETS,portlets);
  if (_log.isInfoEnabled()) {
    if (portlets.size() == 1) {
      _log.info("1 portlet for " + servletContextName + " is available for use");
    }
 else {
      _log.info(portlets.size() + " portlets for " + servletContextName+ " are available for use");
    }
  }
}
