{
  PortletApp portletApp=portlet.getPortletApp();
  Set<PortletFilter> portletFilters=portletApp.getPortletFilters();
  for (  PortletFilter portletFilter : portletFilters) {
    PortletFilterFactory.destroy(portletFilter);
  }
  Set<PortletURLListener> portletURLListeners=portletApp.getPortletURLListeners();
  for (  PortletURLListener portletURLListener : portletURLListeners) {
    PortletURLListenerFactory.destroy(portletURLListener);
  }
  Indexer indexer=portlet.getIndexerInstance();
  if (indexer != null) {
    IndexerRegistryUtil.unregister(indexer);
  }
  Scheduler scheduler=portlet.getSchedulerInstance();
  if (scheduler != null) {
    scheduler.unschedule();
  }
  List<SchedulerEntry> schedulerEntries=portlet.getSchedulerEntries();
  if (schedulerEntries != null && schedulerEntries.size() > 0) {
    for (    SchedulerEntry schedulerEntry : schedulerEntries) {
      try {
        com.liferay.portal.kernel.messaging.MessageListener schedulerEventListener=schedulerEntry.getEventListener();
        if (schedulerEventListener == null) {
          throw new SystemException("Unable to create scheduler listener " + "from class:" + schedulerEntry.getEventListenerClass());
        }
        MessageBusUtil.unregisterMessageListener(DestinationNames.SCHEDULER_DISPATCH,schedulerEventListener);
        SchedulerEngineUtil.unschedule(schedulerEntry.getTrigger());
      }
 catch (      Exception ex) {
        if (_log.isErrorEnabled()) {
          _log.error("Failed to remove scheduler for " + "portlet:" + portlet.getPortletName(),ex);
        }
        continue;
      }
    }
  }
  PollerProcessorUtil.deletePollerProcessor(portlet.getPortletId());
  POPServerUtil.deleteListener(portlet.getPopMessageListenerInstance());
  SocialActivityInterpreterLocalServiceUtil.deleteActivityInterpreter(portlet.getSocialActivityInterpreterInstance());
  SocialRequestInterpreterLocalServiceUtil.deleteRequestInterpreter(portlet.getSocialRequestInterpreterInstance());
  WebDAVUtil.deleteStorage(portlet.getWebDAVStorageInstance());
  List<AssetRendererFactory> assetRendererFactories=portlet.getAssetRendererFactoryInstances();
  if (assetRendererFactories != null) {
    AssetRendererFactoryRegistryUtil.unregister(assetRendererFactories);
  }
  List<WorkflowHandler> workflowHandlers=portlet.getWorkflowHandlerInstances();
  if (workflowHandlers != null) {
    WorkflowHandlerRegistryUtil.unregister(workflowHandlers);
  }
  PortletInstanceFactoryUtil.destroy(portlet);
  portletIds.add(portlet.getPortletId());
}
