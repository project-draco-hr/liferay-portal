{
  final IndexableActionableDynamicQuery indexableActionableDynamicQuery=_bookmarksEntryLocalService.getIndexableActionableDynamicQuery();
  indexableActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      Property folderIdProperty=PropertyFactoryUtil.forName("folderId");
      dynamicQuery.add(folderIdProperty.eq(folderId));
      Property statusProperty=PropertyFactoryUtil.forName("status");
      Integer[] statuses={WorkflowConstants.STATUS_APPROVED,WorkflowConstants.STATUS_IN_TRASH};
      dynamicQuery.add(statusProperty.in(statuses));
    }
  }
);
  indexableActionableDynamicQuery.setCompanyId(companyId);
  indexableActionableDynamicQuery.setGroupId(groupId);
  indexableActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<BookmarksEntry>(){
    @Override public void performAction(    BookmarksEntry entry){
      try {
        Document document=getDocument(entry);
        indexableActionableDynamicQuery.addDocuments(document);
      }
 catch (      PortalException pe) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to index bookmarks entry " + entry.getEntryId(),pe);
        }
      }
    }
  }
);
  indexableActionableDynamicQuery.setSearchEngineId(getSearchEngineId());
  indexableActionableDynamicQuery.performActions();
}
