{
  Class<?> declaringClass=ReflectionUtil.getAnnotationDeclaringClass(ExecutionTestListeners.class,clazz);
  List<Class<? extends ExecutionTestListener>> executionTestListenerClasses=new ArrayList<Class<? extends ExecutionTestListener>>();
  while (declaringClass != null) {
    ExecutionTestListeners executionTestListeners=declaringClass.getAnnotation(ExecutionTestListeners.class);
    executionTestListenerClasses.addAll(ListUtil.toList(executionTestListeners.listeners()));
    declaringClass=ReflectionUtil.getAnnotationDeclaringClass(ExecutionTestListeners.class,declaringClass.getSuperclass());
  }
  executionTestListenerClasses=ListUtil.unique(executionTestListenerClasses);
  ExecutionTestListener[] executionTestListeners=new ExecutionTestListener[executionTestListenerClasses.size()];
  for (int i=0; i < executionTestListeners.length; i++) {
    Class<? extends ExecutionTestListener> executionTestListenerClass=null;
    try {
      executionTestListenerClass=executionTestListenerClasses.get(i);
      executionTestListeners[i]=executionTestListenerClass.newInstance();
    }
 catch (    Exception e) {
      _log.error("Unable to instantiate " + executionTestListenerClass,e);
    }
  }
  return executionTestListeners;
}
