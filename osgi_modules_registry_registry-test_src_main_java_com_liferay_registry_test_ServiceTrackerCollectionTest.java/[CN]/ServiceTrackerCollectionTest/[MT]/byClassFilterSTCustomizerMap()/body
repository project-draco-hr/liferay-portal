{
  final Registry registry=RegistryUtil.getRegistry();
  final AtomicInteger counter=new AtomicInteger();
  ServiceTrackerCustomizer<InterfaceOne,InterfaceOne> customizer=new TestCustomizer(counter);
  Map<String,Object> map=new HashMap<String,Object>();
  map.put("a.property","G");
  Filter filter=registry.getFilter("(a.property=G)");
  ServiceTrackerList<InterfaceOne> serviceTrackerList=ServiceTrackerCollections.list(InterfaceOne.class,filter,customizer,map);
  Assert.assertEquals(0,serviceTrackerList.size());
  InterfaceOne a=getInstance();
  InterfaceOne b=getInstance();
  ServiceRegistration<InterfaceOne> serviceRegistrationA=registry.registerService(InterfaceOne.class,a);
  Assert.assertNotNull(serviceRegistrationA);
  serviceTrackerList.add(b);
  Assert.assertEquals(1,serviceTrackerList.size());
  for (  InterfaceOne interfaceOne : serviceTrackerList) {
    Assert.assertNotNull(interfaceOne);
  }
  Collection<InterfaceOne> services=registry.getServices(InterfaceOne.class,"(a.property=G)");
  Assert.assertEquals(1,services.size());
  Assert.assertEquals(1,counter.intValue());
  serviceRegistrationA.unregister();
  Assert.assertEquals(1,serviceTrackerList.size());
  Assert.assertEquals(1,counter.intValue());
  services=registry.getServices(InterfaceOne.class,"(a.property=G)");
  Assert.assertEquals(1,services.size());
  serviceTrackerList.remove(b);
  services=registry.getServices(InterfaceOne.class,"(a.property=G)");
  Assert.assertEquals(0,services.size());
  Assert.assertEquals(0,serviceTrackerList.size());
  Assert.assertEquals(2,counter.intValue());
}
