{
  Session session=null;
  try {
    session=openSession();
    StringBundler sb=new StringBundler(5);
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(getFoldersSQL(FIND_F_BY_G_F,groupId,queryDefinition,inlineSQLHelper));
    sb.append(") UNION ALL (");
    sb.append(getArticlesSQL(FIND_A_BY_G_U_F,groupId,queryDefinition,inlineSQLHelper));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    String sql=updateSQL(sb.toString(),folderId);
    String ownerClause=StringPool.BLANK;
    if (userId > 0) {
      ownerClause="((JournalArticle.userId = ?) AND (JournalArticle.status " + "!= ?)) OR ";
    }
    sql=StringUtil.replace(sql,"[$OWNER$] OR ",ownerClause);
    sql=CustomSQLUtil.replaceOrderBy(sql,queryDefinition.getOrderByComparator());
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addScalar("modelFolderId",Type.LONG);
    q.addScalar("modelFolder",Type.LONG);
    q.addScalar("articleId",Type.STRING);
    q.addScalar("version",Type.DOUBLE);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    qPos.add(queryDefinition.getStatus());
    if (folderId >= 0) {
      qPos.add(folderId);
    }
    qPos.add(groupId);
    if (userId > 0) {
      qPos.add(userId);
      qPos.add(WorkflowConstants.STATUS_IN_TRASH);
    }
    qPos.add(queryDefinition.getStatus());
    if (folderId >= 0) {
      qPos.add(folderId);
    }
    List<Object> models=new ArrayList<>();
    Iterator<Object[]> itr=(Iterator<Object[]>)QueryUtil.iterate(q,getDialect(),queryDefinition.getStart(),queryDefinition.getEnd());
    while (itr.hasNext()) {
      Object[] array=itr.next();
      long curFolderId=(Long)array[0];
      long modelFolder=(Long)array[1];
      Object obj=null;
      if (modelFolder == 1) {
        obj=JournalFolderUtil.findByPrimaryKey(curFolderId);
      }
 else {
        String articleId=(String)array[2];
        double version=(Double)array[3];
        obj=JournalArticleUtil.findByG_A_V(groupId,articleId,version);
      }
      models.add(obj);
    }
    return models;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
