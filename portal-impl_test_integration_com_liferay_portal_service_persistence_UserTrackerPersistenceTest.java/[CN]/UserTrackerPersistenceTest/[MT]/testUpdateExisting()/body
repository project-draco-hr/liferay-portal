{
  long pk=ServiceTestUtil.nextLong();
  UserTracker newUserTracker=_persistence.create(pk);
  newUserTracker.setMvccVersion(ServiceTestUtil.nextLong());
  newUserTracker.setCompanyId(ServiceTestUtil.nextLong());
  newUserTracker.setUserId(ServiceTestUtil.nextLong());
  newUserTracker.setModifiedDate(ServiceTestUtil.nextDate());
  newUserTracker.setSessionId(ServiceTestUtil.randomString());
  newUserTracker.setRemoteAddr(ServiceTestUtil.randomString());
  newUserTracker.setRemoteHost(ServiceTestUtil.randomString());
  newUserTracker.setUserAgent(ServiceTestUtil.randomString());
  _persistence.update(newUserTracker);
  UserTracker existingUserTracker=_persistence.findByPrimaryKey(newUserTracker.getPrimaryKey());
  Assert.assertEquals(existingUserTracker.getMvccVersion(),newUserTracker.getMvccVersion());
  Assert.assertEquals(existingUserTracker.getUserTrackerId(),newUserTracker.getUserTrackerId());
  Assert.assertEquals(existingUserTracker.getCompanyId(),newUserTracker.getCompanyId());
  Assert.assertEquals(existingUserTracker.getUserId(),newUserTracker.getUserId());
  Assert.assertEquals(Time.getShortTimestamp(existingUserTracker.getModifiedDate()),Time.getShortTimestamp(newUserTracker.getModifiedDate()));
  Assert.assertEquals(existingUserTracker.getSessionId(),newUserTracker.getSessionId());
  Assert.assertEquals(existingUserTracker.getRemoteAddr(),newUserTracker.getRemoteAddr());
  Assert.assertEquals(existingUserTracker.getRemoteHost(),newUserTracker.getRemoteHost());
  Assert.assertEquals(existingUserTracker.getUserAgent(),newUserTracker.getUserAgent());
}
