{
  StringBundler sb1=new StringBundler(51);
  sb1.append("select DLFolder.companyId, DLFolder.userId, ");
  sb1.append("DLFolder.userName, DLFolder.createDate, ");
  sb1.append("DLFolder.modifiedDate, DLFolder.repositoryId, ");
  sb1.append("DLFolder.parentFolderId as parentFolderId, ");
  sb1.append("DLFolder.treePath, DLFolder.name, '' as extension, ");
  sb1.append("'' as mimeType, DLFolder.description, '' as ");
  sb1.append("changeLog, '' as version, 0 as versionId, 0 as size, '");
  sb1.append(SyncDLObjectConstants.TYPE_FOLDER);
  sb1.append("' as type, DLFolder.folderId as typePK, ");
  sb1.append("DLFolder.uuid_ as typeUuid, DLFolder.status ");
  sb1.append("from DLFolder where DLFolder.repositoryId = ");
  sb1.append(groupId);
  sb1.append(" union all select DLFileVersion.companyId, ");
  sb1.append("DLFileVersion.userId, DLFileVersion.userName, ");
  sb1.append("DLFileVersion.createDate, DLFileVersion.modifiedDate, ");
  sb1.append("DLFileVersion.repositoryId, DLFileVersion.folderId as ");
  sb1.append("parentFolderId, DLFileVersion.treePath, ");
  sb1.append("DLFileVersion.title as name, DLFileVersion.extension, ");
  sb1.append("DLFileVersion.mimeType, DLFileVersion.description, ");
  sb1.append("DLFileVersion.changeLog, DLFileVersion.version, ");
  sb1.append("DLFileVersion.fileVersionId as versionId, ");
  sb1.append("DLFileVersion.size_ as size, '");
  sb1.append(SyncDLObjectConstants.TYPE_FILE);
  sb1.append("' as type, DLFileVersion.fileEntryId as typePK, ");
  sb1.append("DLFileEntry.uuid_ as typeUuid, DLFileVersion.status ");
  sb1.append("from DLFileEntry, DLFileVersion where ");
  sb1.append("DLFileEntry.repositoryId = ");
  sb1.append(groupId);
  sb1.append(" and DLFileEntry.fileEntryId = DLFileVersion.fileEntryId ");
  sb1.append("and DLFileEntry.version = DLFileVersion.version ");
  sb1.append("union all select DLFileVersion.companyId, ");
  sb1.append("DLFileVersion.userId, DLFileVersion.userName, ");
  sb1.append("DLFileVersion.createDate, DLFileVersion.modifiedDate, ");
  sb1.append("DLFileVersion.repositoryId, DLFileVersion.folderId  ");
  sb1.append("as parentFolderId, DLFileVersion.treePath, ");
  sb1.append("DLFileVersion.title as name, DLFileVersion.extension, ");
  sb1.append("DLFileVersion.mimeType, DLFileVersion.description, ");
  sb1.append("DLFileVersion.changeLog, DLFileVersion.version, ");
  sb1.append("DLFileVersion.fileVersionId as versionId, ");
  sb1.append("DLFileVersion.size_ as size, '");
  sb1.append(SyncDLObjectConstants.TYPE_PRIVATE_WORKING_COPY);
  sb1.append("' as type, DLFileVersion.fileEntryId as typePK, ");
  sb1.append("DLFileEntry.uuid_ as typeUuid, DLFileVersion.status ");
  sb1.append("from DLFileEntry, DLFileVersion where ");
  sb1.append("DLFileEntry.repositoryId = ");
  sb1.append(groupId);
  sb1.append(" and DLFileEntry.fileEntryId = DLFileVersion.fileEntryId ");
  sb1.append("and DLFileVersion.version = '");
  sb1.append(DLFileEntryConstants.PRIVATE_WORKING_COPY_VERSION);
  sb1.append("'");
  StringBundler sb2=new StringBundler(6);
  sb2.append("insert into SyncDLObject (syncDLObjectId, companyId, ");
  sb2.append("userId, userName, createTime, modifiedTime, ");
  sb2.append("repositoryId, parentFolderId, treePath, name, extension, ");
  sb2.append("mimeType, description, changeLog, version, versionId, ");
  sb2.append("size_, event, type_, typePK, typeUuid) values (?, ?, ?, ");
  sb2.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  try (PreparedStatement ps1=connection.prepareStatement(sb1.toString());PreparedStatement ps2=AutoBatchPreparedStatementUtil.concurrentAutoBatch(connection,sb2.toString());ResultSet rs=ps1.executeQuery()){
    while (rs.next()) {
      Timestamp createDate=rs.getTimestamp("createDate");
      Timestamp modifiedDate=rs.getTimestamp("modifiedDate");
      int status=rs.getInt("status");
      String event=StringPool.BLANK;
      if (status == WorkflowConstants.STATUS_IN_TRASH) {
        event=SyncDLObjectConstants.EVENT_TRASH;
      }
 else {
        event=SyncDLObjectConstants.EVENT_ADD;
      }
      ps2.setLong(1,_increment());
      ps2.setLong(2,rs.getLong("companyId"));
      ps2.setLong(3,rs.getLong("userId"));
      ps2.setString(4,rs.getString("userName"));
      ps2.setLong(5,createDate.getTime());
      ps2.setLong(6,modifiedDate.getTime());
      ps2.setLong(7,groupId);
      ps2.setLong(8,rs.getLong("parentFolderId"));
      ps2.setString(9,rs.getString("treePath"));
      ps2.setString(10,rs.getString("name"));
      ps2.setString(11,rs.getString("extension"));
      ps2.setString(12,rs.getString("mimeType"));
      ps2.setString(13,rs.getString("description"));
      ps2.setString(14,rs.getString("changeLog"));
      ps2.setString(15,rs.getString("version"));
      ps2.setLong(16,rs.getLong("versionId"));
      ps2.setLong(17,rs.getLong("size"));
      ps2.setString(18,event);
      ps2.setString(19,rs.getString("type"));
      ps2.setLong(20,rs.getLong("typePK"));
      ps2.setString(21,rs.getString("typeUuid"));
      ps2.addBatch();
    }
    ps2.executeBatch();
  }
 }
