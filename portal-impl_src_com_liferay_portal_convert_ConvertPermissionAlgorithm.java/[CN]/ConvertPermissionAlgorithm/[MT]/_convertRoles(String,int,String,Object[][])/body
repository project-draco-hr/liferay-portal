{
  BufferedReader br=new BufferedReader(new FileReader(legacyFile));
  BufferedWriter rolePermMapBuff=new BufferedWriter(new FileWriter(legacyFile + _ROLE_PERM_MAP_EXT));
  BufferedWriter roleBuff=new BufferedWriter(new FileWriter(legacyFile + _ROLE_EXT));
  BufferedWriter otherRoleMapBuff=new BufferedWriter(new FileWriter(legacyFile + _OTHER_ROLE_MAP_EXT));
  try {
    MultiValueMap mvp=new MultiValueMap();
    String line;
    while ((line=br.readLine()) != null) {
      String[] values=StringUtil.split(line);
      long resourceId=PermissionView.getResourceId(values);
      mvp.put(resourceId,values);
    }
    for (    Long key : (Set<Long>)mvp.keySet()) {
      List<String[]> valuesList=new ArrayList<String[]>((Collection<String[]>)mvp.getCollection(key));
      String[] values=valuesList.get(0);
      long groupId=PermissionView.getPrimaryKey(values);
      long companyId=PermissionView.getCompanyId(values);
      String name=PermissionView.getNameId(values);
      int scope=PermissionView.getScopeId(values);
      List<String> actionsIds=new ArrayList<String>();
      List<Long> permissionIds=new ArrayList<Long>();
      for (      String[] values2 : valuesList) {
        actionsIds.add(PermissionView.getActionId(values2));
        permissionIds.add(PermissionView.getPermissionId(values2));
      }
      if (type != RoleConstants.TYPE_ORGANIZATION && scope == ResourceConstants.SCOPE_INDIVIDUAL) {
        List<String> defaultActions=null;
        if (type == RoleConstants.TYPE_REGULAR) {
          if (name.contains(StringPool.PERIOD)) {
            defaultActions=ResourceActionsUtil.getModelResourceActions(name);
          }
 else {
            defaultActions=ResourceActionsUtil.getPortletResourceActions(name);
          }
        }
 else {
          if (name.contains(StringPool.PERIOD)) {
            defaultActions=ResourceActionsUtil.getModelResourceCommunityDefaultActions(name);
          }
 else {
            defaultActions=ResourceActionsUtil.getPortletResourceCommunityDefaultActions(name);
          }
        }
        Role defaultRole=null;
        if (type == RoleConstants.TYPE_REGULAR) {
          Collections.sort(actionsIds);
          Collections.sort(defaultActions);
          if (defaultActions.equals(actionsIds)) {
            defaultRole=_ownerRolesMap.get(companyId);
          }
        }
 else {
          if (defaultActions.containsAll(actionsIds)) {
            Role[] defaultRoles=_defaultRolesMap.get(companyId);
            Group group=_groupsMap.get(groupId);
            if (group.isCommunity()) {
              defaultRole=defaultRoles[0];
            }
 else             if (group.isOrganization()) {
              defaultRole=defaultRoles[1];
            }
 else             if (group.isUser() || group.isUserGroup()) {
              defaultRole=defaultRoles[2];
            }
          }
        }
        if (defaultRole != null) {
          long roleId=defaultRole.getRoleId();
          for (          Long permissionId : permissionIds) {
            String key2=roleId + "_" + permissionId;
            if (_rolesPermissions.contains(key2)) {
              continue;
            }
 else {
              _rolesPermissions.add(key2);
            }
            rolePermMapBuff.write(roleId + "," + permissionId+ ",\n");
          }
          continue;
        }
      }
      long roleId=CounterLocalServiceUtil.increment();
      String roleName=StringUtil.upperCaseFirstLetter(RoleConstants.getTypeLabel(type)) + " " + Long.toHexString(roleId);
      String[] roleColumns=new String[]{Long.toString(roleId),Long.toString(companyId),Long.toString(ClassNameLocalServiceUtil.getClassNameId(Role.class)),Long.toString(roleId),roleName,StringPool.BLANK,"Autogenerated role from portal upgrade",Integer.toString(type),StringPool.BLANK};
      for (int i=0; i < roleColumns.length; i++) {
        roleBuff.write(roleColumns[i] + StringPool.COMMA);
        if (i == (roleColumns.length - 1)) {
          roleBuff.write(StringPool.NEW_LINE);
        }
      }
      for (      Long permissionId : permissionIds) {
        String key2=roleId + "_" + permissionId;
        if (_rolesPermissions.contains(key2)) {
          continue;
        }
 else {
          _rolesPermissions.add(key2);
        }
        rolePermMapBuff.write(roleId + "," + permissionId+ ",\n");
      }
      for (int i=0; i < newColumns.length - 1; i++) {
        otherRoleMapBuff.write(values[i] + StringPool.COMMA);
      }
      otherRoleMapBuff.write(roleId + ",\n");
    }
  }
  finally {
    br.close();
    roleBuff.close();
    rolePermMapBuff.close();
    otherRoleMapBuff.close();
  }
  Table roleTable=new Table(RoleModelImpl.TABLE_NAME,RoleModelImpl.TABLE_COLUMNS);
  roleTable.populateTable(legacyFile + _ROLE_EXT);
  Table rolesPermissionsTable=new Table("Roles_Permissions",new Object[][]{{"roleId",Types.BIGINT},{"permissionId",Types.BIGINT}});
  rolesPermissionsTable.populateTable(legacyFile + _ROLE_PERM_MAP_EXT);
  Table othersRolesTable=new Table(newName,newColumns);
  othersRolesTable.populateTable(legacyFile + _OTHER_ROLE_MAP_EXT);
  FileUtil.delete(legacyFile + _ROLE_EXT);
  FileUtil.delete(legacyFile + _ROLE_PERM_MAP_EXT);
  FileUtil.delete(legacyFile + _OTHER_ROLE_MAP_EXT);
}
