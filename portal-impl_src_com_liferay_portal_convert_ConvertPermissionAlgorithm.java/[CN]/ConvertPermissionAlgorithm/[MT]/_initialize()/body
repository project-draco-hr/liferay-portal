{
  long[] companyIds=PortalInstances.getCompanyIds();
  _defaultRolesMap=new HashMap<Long,Role[]>();
  _ownerRolesMap=new HashMap<Long,Role>();
  _guestRolesMap=new HashMap<Long,Role>();
  _guestUsersSet=new HashSet<Long>();
  _rolesPermissions=new HashSet<String>();
  for (  long companyId : companyIds) {
    _defaultRolesMap.put(companyId,new Role[]{RoleLocalServiceUtil.getRole(companyId,RoleConstants.COMMUNITY_MEMBER),RoleLocalServiceUtil.getRole(companyId,RoleConstants.ORGANIZATION_MEMBER),RoleLocalServiceUtil.getRole(companyId,RoleConstants.POWER_USER)});
    Role ownerRole=RoleLocalServiceUtil.getRole(companyId,RoleConstants.OWNER);
    _ownerRolesMap.put(companyId,ownerRole);
    Role guestRole=RoleLocalServiceUtil.getRole(companyId,RoleConstants.GUEST);
    _guestRolesMap.put(companyId,guestRole);
    _guestUsersSet.add(UserLocalServiceUtil.getDefaultUserId(companyId));
  }
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    con=DataAccess.getConnection();
    ps=con.prepareStatement("SELECT * FROM Roles_Permissions ");
    rs=ps.executeQuery();
    while (rs.next()) {
      long roleId=rs.getLong("roleId");
      long permissionId=rs.getLong("permissionId");
      _rolesPermissions.add(roleId + "_" + permissionId);
    }
  }
  finally {
    DataAccess.cleanUp(con,ps,rs);
  }
  List<Group> groups=GroupLocalServiceUtil.getGroups(QueryUtil.ALL_POS,QueryUtil.ALL_POS);
  _groupsMap=new HashMap<Long,Group>(groups.size());
  for (  Group group : groups) {
    _groupsMap.put(group.getGroupId(),group);
  }
  List<ResourceCode> resourceCodes=ResourceCodeLocalServiceUtil.getResourceCodes(QueryUtil.ALL_POS,QueryUtil.ALL_POS);
  for (  ResourceCode resourceCode : resourceCodes) {
    String name=resourceCode.getName();
    if (!name.contains(StringPool.PERIOD)) {
      ResourceActionsUtil.getPortletResourceActions(name);
    }
  }
}
