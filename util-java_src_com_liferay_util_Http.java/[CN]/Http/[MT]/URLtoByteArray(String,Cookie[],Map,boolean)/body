{
  byte[] byteArray=null;
  HttpMethod method=null;
  try {
    if (location == null) {
      return byteArray;
    }
 else     if (!location.startsWith(HTTP_WITH_SLASH) && !location.startsWith(HTTPS_WITH_SLASH)) {
      location=HTTP_WITH_SLASH + location;
    }
    HostConfiguration hostConfig=getHostConfig(location);
    HttpClient client=getClient(hostConfig);
    if (post) {
      method=new PostMethod(location);
      if ((parts != null) && (parts.size() > 0)) {
        List nvpList=new ArrayList();
        List stringPartsList=new ArrayList();
        Iterator itr=parts.entrySet().iterator();
        while (itr.hasNext()) {
          Map.Entry entry=(Map.Entry)itr.next();
          String key=(String)entry.getKey();
          String value=(String)entry.getValue();
          if (value != null) {
            nvpList.add(new NameValuePair(key,value));
            stringPartsList.add(new StringPart(key,value));
          }
        }
        NameValuePair[] nvpArray=(NameValuePair[])nvpList.toArray(new NameValuePair[nvpList.size()]);
        StringPart[] stringPartsArray=(StringPart[])stringPartsList.toArray(new StringPart[0]);
        method.setQueryString(nvpArray);
        PostMethod postMethod=(PostMethod)method;
        RequestEntity requestEntity=new MultipartRequestEntity(stringPartsArray,method.getParams());
        postMethod.setRequestEntity(requestEntity);
      }
    }
 else {
      method=new GetMethod(location);
    }
    method.addRequestHeader("Content-Type","application/x-www-form-urlencoded");
    method.addRequestHeader("User-agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)");
    HttpState state=new HttpState();
    if ((cookies != null) && (cookies.length > 0)) {
      state.addCookies(cookies);
      method.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
    }
    proxifyState(state,hostConfig);
    client.executeMethod(hostConfig,method,state);
    Header locationHeader=method.getResponseHeader("location");
    if (locationHeader != null) {
      return URLtoByteArray(locationHeader.getValue(),cookies,post);
    }
    InputStream is=method.getResponseBodyAsStream();
    if (is != null) {
      ByteArrayMaker bam=new ByteArrayMaker();
      byte[] bytes=new byte[512];
      for (int i=is.read(bytes,0,512); i != -1; i=is.read(bytes,0,512)) {
        bam.write(bytes,0,i);
      }
      byteArray=bam.toByteArray();
      is.close();
      bam.close();
    }
    return byteArray;
  }
  finally {
    try {
      if (method != null) {
        method.releaseConnection();
      }
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
}
