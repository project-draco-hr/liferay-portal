{
  if (!PropsValues.BLOGS_PINGBACK_ENABLED) {
    throw new PingbackDisabledException("Pingbacks are disabled");
  }
  validateSource();
  BlogsEntry entry=getBlogsEntry(companyId);
  if (!entry.isAllowPingbacks()) {
    throw new PingbackDisabledException("Pingbacks are disabled");
  }
  long userId=UserLocalServiceUtil.getDefaultUserId(companyId);
  long groupId=entry.getGroupId();
  String className=BlogsEntry.class.getName();
  long classPK=entry.getEntryId();
  MBMessageDisplay messageDisplay=MBMessageLocalServiceUtil.getDiscussionMessageDisplay(userId,groupId,className,classPK,WorkflowConstants.STATUS_APPROVED);
  MBThread thread=messageDisplay.getThread();
  long threadId=thread.getThreadId();
  long parentMessageId=thread.getRootMessageId();
  String body="[...] " + getExcerpt() + " [...] [url="+ _sourceUri+ "]"+ LanguageUtil.get(LocaleUtil.getSiteDefault(),"read-more")+ "[/url]";
  List<MBMessage> messages=MBMessageLocalServiceUtil.getThreadMessages(threadId,WorkflowConstants.STATUS_APPROVED);
  for (  MBMessage message : messages) {
    if (message.getBody().equals(body)) {
      throw new DuplicateCommentException();
    }
  }
  ServiceContext serviceContext=new ServiceContext();
  String pingbackUserName=LanguageUtil.get(LocaleUtil.getSiteDefault(),"pingback");
  serviceContext.setAttribute("pingbackUserName",pingbackUserName);
  StringBundler sb=new StringBundler(5);
  String layoutFullURL=PortalUtil.getLayoutFullURL(groupId,PortletKeys.BLOGS);
  sb.append(layoutFullURL);
  sb.append(Portal.FRIENDLY_URL_SEPARATOR);
  Portlet portlet=PortletLocalServiceUtil.getPortletById(companyId,PortletKeys.BLOGS);
  sb.append(portlet.getFriendlyURLMapping());
  sb.append(StringPool.SLASH);
  sb.append(entry.getUrlTitle());
  serviceContext.setAttribute("redirect",sb.toString());
  serviceContext.setLayoutFullURL(layoutFullURL);
  MBMessageLocalServiceUtil.addDiscussionMessage(userId,StringPool.BLANK,groupId,className,classPK,threadId,parentMessageId,StringPool.BLANK,body,serviceContext);
}
