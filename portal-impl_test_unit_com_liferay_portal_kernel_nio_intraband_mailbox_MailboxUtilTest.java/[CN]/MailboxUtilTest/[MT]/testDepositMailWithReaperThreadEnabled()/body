{
  PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_REAPER_THREAD_ENABLED,Boolean.TRUE.toString());
  PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_STORAGE_LIFE,String.valueOf(0));
  Assert.assertEquals(0,MailboxUtil.depositMail(ByteBuffer.allocate(0)));
  Assert.assertEquals(1,MailboxUtil.depositMail(ByteBuffer.allocate(0)));
  Assert.assertEquals(2,MailboxUtil.depositMail(ByteBuffer.allocate(0)));
  Assert.assertEquals(3,MailboxUtil.depositMail(ByteBuffer.allocate(0)));
  Thread reaperThread=null;
  for (  Thread thread : ThreadUtil.getThreads()) {
    if ((thread != null) && thread.getName().equals(MailboxUtil.class.getName())) {
      reaperThread=thread;
      break;
    }
  }
  Assert.assertNotNull(reaperThread);
  reaperThread.interrupt();
  while (reaperThread.isInterrupted())   ;
  Assert.assertTrue(reaperThread.isAlive());
  BlockingQueue<Object> overdueMailQueue=getOverdueMailQueue();
  while (!overdueMailQueue.isEmpty())   ;
  ReceiptStubAdvice._throwException=true;
  RecorderUncaughtExceptionHandler recorderUncaughtExceptionHandler=new RecorderUncaughtExceptionHandler();
  reaperThread.setUncaughtExceptionHandler(recorderUncaughtExceptionHandler);
  overdueMailQueue.offer(createReceiptStub());
  reaperThread.join(1000);
  Assert.assertSame(reaperThread,RecorderUncaughtExceptionHandler._thread);
  Throwable throwable=RecorderUncaughtExceptionHandler._throwable;
  Assert.assertSame(IllegalStateException.class,throwable.getClass());
  Assert.assertFalse(reaperThread.isAlive());
}
