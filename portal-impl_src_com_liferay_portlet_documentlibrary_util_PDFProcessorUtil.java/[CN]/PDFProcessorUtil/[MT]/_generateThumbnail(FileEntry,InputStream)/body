{
  String id=DLUtil.getTempFileId(fileEntry.getFileEntryId(),fileEntry.getVersion());
  File thumbnailFile=_getThumbnailFile(id);
  if (thumbnailFile.exists()) {
    return;
  }
  if (PropsValues.IMAGEMAGICK_ENABLED) {
    if (fileEntry.getExtension().equals("pdf")) {
      InputStream tempInputStream=DLRepositoryLocalServiceUtil.getFileAsStream(fileEntry.getUserId(),fileEntry.getFileEntryId(),fileEntry.getVersion());
      String filePath=DocumentConversionUtil.getFilePath(id,"pdf");
      File file=new File(filePath);
      try {
        FileUtil.write(file,tempInputStream);
        _generateThumbnail(fileEntry,file);
      }
  finally {
        file.delete();
      }
    }
 else {
      File file=DocumentConversionUtil.convert(id,inputStream,fileEntry.getExtension(),"pdf");
      _generateThumbnail(fileEntry,file);
    }
  }
 else {
    PDDocument pdDocument=null;
    try {
      pdDocument=PDDocument.load(inputStream);
      PDDocumentCatalog pdDocumentCatalog=pdDocument.getDocumentCatalog();
      List<?> pdPages=pdDocumentCatalog.getAllPages();
      PDPage pdPage=(PDPage)pdPages.get(0);
      RenderedImage renderedImage=pdPage.convertToImage(BufferedImage.TYPE_USHORT_565_RGB,72);
      RenderedImage thumbnailImage=ImageProcessorUtil.scale(renderedImage,_DIMENSION,_DIMENSION);
      thumbnailFile.createNewFile();
      ImageIO.write(thumbnailImage,THUMBNAIL_TYPE,new FileOutputStream(thumbnailFile));
    }
  finally {
      if (pdDocument != null) {
        pdDocument.close();
      }
    }
  }
}
