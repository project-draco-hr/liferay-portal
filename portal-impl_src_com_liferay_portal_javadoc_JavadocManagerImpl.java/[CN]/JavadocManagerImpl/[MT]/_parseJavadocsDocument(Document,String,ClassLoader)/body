{
  List<Node> nodeList=document.selectNodes("/javadocs/javadoc");
  for (  Node javadocNode : nodeList) {
    String typeName=_getChildNodeText(javadocNode,"type");
    Class type=null;
    try {
      type=JavadocUtil.loadClass(typeName,classLoader);
    }
 catch (    ClassNotFoundException e) {
      if (_log.isWarnEnabled()) {
        _log.warn(typeName + " not found.",e);
      }
    }
    JavadocType javadocType=_parseJavadocType(type,javadocNode);
    javadocType.setServletContextName(servletContextName);
    _javadocTypes.put(type,javadocType);
    List<Node> methodNodeList=javadocNode.selectNodes("method");
    for (    Node methodNode : methodNodeList) {
      String methodName=_getChildNodeText(methodNode,"name");
      try {
        if (type.getSimpleName().equals(methodName)) {
          JavadocConstructor javadocConstructor=_parseJavadocConstructor(type,methodNode);
          javadocConstructor.setServletContextName(servletContextName);
          _javadocConstructors.put(javadocConstructor.getConstructor(),javadocConstructor);
        }
 else {
          JavadocMethod javadocMethod=_parseJavadocMethod(type,methodNode);
          javadocMethod.setServletContextName(servletContextName);
          _javadocMethods.put(javadocMethod.getMethod(),javadocMethod);
        }
      }
 catch (      Exception e) {
        if (_log.isWarnEnabled()) {
          _log.warn(typeName + '#' + methodName+ " not found.",e);
        }
      }
    }
  }
}
