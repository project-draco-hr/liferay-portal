{
  String name=methodElement.elementText("name");
  if (name.equals(clazz.getSimpleName()) || name.startsWith(StringPool.UNDERLINE)) {
    return null;
  }
  List<Element> paramElements=methodElement.elements("param");
  Class<?>[] parameterTypeClasses=new Class<?>[paramElements.size()];
  String[] parameterComments=new String[paramElements.size()];
  for (int i=0; i < paramElements.size(); i++) {
    Element paramElement=paramElements.get(i);
    String parameterType=paramElement.elementText("type");
    Class<?> parametarTypeClass=JavadocUtil.loadClass(clazz.getClassLoader(),parameterType);
    parameterTypeClasses[i]=parametarTypeClass;
    String parameterComment=paramElement.elementText("comment");
    parameterComments[i]=parameterComment;
  }
  Method method=clazz.getDeclaredMethod(name,parameterTypeClasses);
  String comment=methodElement.elementText("comment");
  if (Validator.isNull(comment)) {
    return new EmptyJavadocMethod(servletContextName,method);
  }
  String returnComment=null;
  Element returnElement=methodElement.element("return");
  if (returnElement != null) {
    returnComment=returnElement.elementText("comment");
  }
  List<Element> throwsElements=methodElement.elements("throws");
  String[] throwsComments=new String[throwsElements.size()];
  for (int i=0; i < throwsElements.size(); i++) {
    Element throwElement=throwsElements.get(i);
    throwsComments[i]=throwElement.elementText("comment");
  }
  return new JavadocMethodImpl(servletContextName,comment,method,parameterComments,returnComment,throwsComments);
}
