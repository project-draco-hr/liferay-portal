{
  String name=methodElement.elementText("name");
  List<Element> paramElements=methodElement.elements("param");
  Class<?>[] parameterTypeClasses=new Class<?>[paramElements.size()];
  String[] parameterComments=new String[paramElements.size()];
  for (int i=0; i < paramElements.size(); i++) {
    Element paramElement=paramElements.get(i);
    String parameterType=paramElement.elementText("type");
    Class<?> parametarTypeClass=JavadocUtil.loadClass(clazz.getClassLoader(),parameterType);
    parameterTypeClasses[i]=parametarTypeClass;
    String parameterComment=paramElement.elementText("comment");
    parameterComments[i]=parameterComment;
  }
  Method method=clazz.getDeclaredMethod(name,parameterTypeClasses);
  JavadocMethod javadocMethod=new JavadocMethod(method);
  String comment=methodElement.elementText("comment");
  javadocMethod.setComment(comment);
  javadocMethod.setParameterComments(parameterComments);
  Element returnElement=methodElement.element("return");
  if (javadocMethod != null) {
    String returnComment=returnElement.elementText("comment");
    javadocMethod.setReturnComment(returnComment);
  }
  javadocMethod.setServletContextName(servletContextName);
  List<Element> throwsElements=methodElement.elements("throws");
  String[] throwsComments=new String[throwsElements.size()];
  for (int i=0; i < throwsElements.size(); i++) {
    Element throwElement=throwsElements.get(i);
    throwsComments[i]=throwElement.elementText("comment");
  }
  javadocMethod.setThrowsComments(throwsComments);
  return javadocMethod;
}
