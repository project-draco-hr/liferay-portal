{
  final Indexer indexer=Mockito.mock(Indexer.class);
class IndexerRegistryGetIndexer implements InvocationHandler {
    @Override public Indexer invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      String className=(String)args[0];
      if (DLFILEENTRY_CLASS_NAME.equals(className)) {
        return indexer;
      }
      if (SearchTestUtil.ATTACHMENT_OWNER_CLASS_NAME.equals(className)) {
        return null;
      }
      throw new IllegalArgumentException();
    }
  }
  replace(method(IndexerRegistryUtil.class,"getIndexer",String.class)).with(new IndexerRegistryGetIndexer());
  String title=RandomTestUtil.randomString();
  String content=RandomTestUtil.randomString();
  Summary summary=new Summary(null,title,content,null);
  doReturn(summary).when(indexer).getSummary((Document)Matchers.any(),Matchers.anyString(),(PortletURL)Matchers.any(),(PortletRequest)Matchers.isNull(),(PortletResponse)Matchers.isNull());
class AssetRendererFactoryRegistryGetAssetRendererFactoryByClassName implements InvocationHandler {
    @Override public AssetRendererFactory invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      String className=(String)args[0];
      if (DLFILEENTRY_CLASS_NAME.equals(className)) {
        return null;
      }
      if (SearchTestUtil.ATTACHMENT_OWNER_CLASS_NAME.equals(className)) {
        return assetRendererFactory;
      }
      throw new IllegalArgumentException();
    }
  }
  replace(method(AssetRendererFactoryRegistryUtil.class,"getAssetRendererFactoryByClassName",String.class)).with(new AssetRendererFactoryRegistryGetAssetRendererFactoryByClassName());
  when(assetRendererFactory.getAssetRenderer(SearchTestUtil.ATTACHMENT_OWNER_CLASS_PK)).thenReturn(assetRenderer);
  when(assetRenderer.getSearchSummary((Locale)Matchers.any())).thenReturn(SearchTestUtil.SUMMARY_CONTENT);
  when(assetRenderer.getTitle((Locale)Matchers.any())).thenReturn(SearchTestUtil.SUMMARY_TITLE);
  when(dlAppLocalService.getFileEntry(SearchTestUtil.ENTRY_CLASS_PK)).thenReturn(fileEntry);
  SearchResult searchResult=assertThatSearchSingleDocumentReturnsOneSearchResult(createDLFileEntryAttachmentDocument());
  Assert.assertEquals(SearchTestUtil.ATTACHMENT_OWNER_CLASS_NAME,searchResult.getClassName());
  Assert.assertEquals(SearchTestUtil.ATTACHMENT_OWNER_CLASS_PK,searchResult.getClassPK());
  Summary searchResultSummary=searchResult.getSummary();
  Assert.assertNotSame("Summary in searchResult is not the same one returned by Indexer",summary,searchResultSummary);
  Assert.assertEquals(SearchTestUtil.SUMMARY_CONTENT,searchResultSummary.getContent());
  Assert.assertEquals(SearchTestUtil.SUMMARY_TITLE,searchResultSummary.getTitle());
  List<Tuple> fileEntryTuples=searchResult.getFileEntryTuples();
  Assert.assertEquals(1,fileEntryTuples.size());
  Tuple tuple=fileEntryTuples.get(0);
  FileEntry tupleFileEntry=(FileEntry)tuple.getObject(0);
  Summary tupleSummary=(Summary)tuple.getObject(1);
  Assert.assertSame(fileEntry,tupleFileEntry);
  Assert.assertSame("Summary in tuple must be the same one returned by Indexer",summary,tupleSummary);
  Assert.assertEquals(content,tupleSummary.getContent());
  Assert.assertEquals(title,tupleSummary.getTitle());
  assertThatMBMessagesAndVersionsAreEmpty(searchResult);
}
