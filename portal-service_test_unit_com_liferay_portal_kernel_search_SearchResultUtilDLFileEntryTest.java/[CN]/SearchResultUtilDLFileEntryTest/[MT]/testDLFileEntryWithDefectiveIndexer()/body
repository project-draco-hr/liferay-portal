{
  Indexer indexer=Mockito.mock(Indexer.class);
  Mockito.doThrow(IllegalArgumentException.class).when(indexer).getSummary((Document)Matchers.any(),Matchers.anyString(),(PortletURL)Matchers.any(),(PortletRequest)Matchers.any(),(PortletResponse)Matchers.any());
  stub(method(IndexerRegistryUtil.class,"getIndexer",String.class)).toReturn(indexer);
  when(dlAppLocalService.getFileEntry(SearchTestUtil.ENTRY_CLASS_PK)).thenReturn(fileEntry);
  Document document=createDLFileEntryDocumentWithAlternateKey();
  document.add(new Field(Field.SNIPPET,"__snippet__"));
  SearchResult searchResult=searchSingleDocument(document);
  Assert.assertEquals(SearchTestUtil.DOCUMENT_CLASS_NAME,searchResult.getClassName());
  Assert.assertEquals(SearchTestUtil.DOCUMENT_CLASS_PK,searchResult.getClassPK());
  Assert.assertNull("Indexer is attempted, exception is discarded, no summary returned",searchResult.getSummary());
  verifyStatic();
  IndexerRegistryUtil.getIndexer(DLFILEENTRY_CLASS_NAME);
  Mockito.verify(indexer).getSummary(document,"__snippet__",portletURL,null,null);
  List<Tuple> fileEntryTuples=searchResult.getFileEntryTuples();
  Assert.assertTrue("No file entry tuples even though a FileEntry was found",fileEntryTuples.isEmpty());
  Mockito.verify(dlAppLocalService).getFileEntry(SearchTestUtil.ENTRY_CLASS_PK);
  assertThatMBMessagesAndVersionsAreEmpty(searchResult);
}
