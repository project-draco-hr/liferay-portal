{
  if (_velocityEngine != null) {
    return;
  }
  _velocityEngine=new VelocityEngine();
  LiferayResourceLoader.setVelocityResourceListeners(PropsValues.VELOCITY_ENGINE_RESOURCE_LISTENERS);
  ExtendedProperties extendedProperties=new FastExtendedProperties();
  extendedProperties.setProperty(_RESOURCE_LOADER,"string,servlet");
  extendedProperties.setProperty("string." + _RESOURCE_LOADER + ".cache",String.valueOf(PropsValues.VELOCITY_ENGINE_RESOURCE_MANAGER_CACHE_ENABLED));
  extendedProperties.setProperty("string." + _RESOURCE_LOADER + ".class",StringResourceLoader.class.getName());
  extendedProperties.setProperty("string." + _RESOURCE_LOADER + ".repository.class",StringResourceRepositoryImpl.class.getName());
  extendedProperties.setProperty("servlet." + _RESOURCE_LOADER + ".cache",String.valueOf(PropsValues.VELOCITY_ENGINE_RESOURCE_MANAGER_CACHE_ENABLED));
  extendedProperties.setProperty("servlet." + _RESOURCE_LOADER + ".class",LiferayResourceLoader.class.getName());
  extendedProperties.setProperty(VelocityEngine.RESOURCE_MANAGER_CLASS,PropsUtil.get(PropsKeys.VELOCITY_ENGINE_RESOURCE_MANAGER));
  extendedProperties.setProperty(VelocityEngine.RESOURCE_MANAGER_CACHE_CLASS,PropsUtil.get(PropsKeys.VELOCITY_ENGINE_RESOURCE_MANAGER_CACHE));
  extendedProperties.setProperty(VelocityEngine.VM_LIBRARY,PropsUtil.get(PropsKeys.VELOCITY_ENGINE_VELOCIMACRO_LIBRARY));
  extendedProperties.setProperty(VelocityEngine.VM_LIBRARY_AUTORELOAD,String.valueOf(!PropsValues.VELOCITY_ENGINE_RESOURCE_MANAGER_CACHE_ENABLED));
  extendedProperties.setProperty(VelocityEngine.VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL,String.valueOf(!PropsValues.VELOCITY_ENGINE_RESOURCE_MANAGER_CACHE_ENABLED));
  extendedProperties.setProperty(VelocityEngine.RUNTIME_LOG_LOGSYSTEM_CLASS,PropsUtil.get(PropsKeys.VELOCITY_ENGINE_LOGGER));
  extendedProperties.setProperty(VelocityEngine.RUNTIME_LOG_LOGSYSTEM + ".log4j.category",PropsUtil.get(PropsKeys.VELOCITY_ENGINE_LOGGER_CATEGORY));
  _velocityEngine.setExtendedProperties(extendedProperties);
  try {
    _velocityEngine.init();
  }
 catch (  Exception e) {
    throw new TemplateException(e);
  }
  _restrictedContext=new VelocityContext();
  Map<String,Object> helperUtilities=_templateContextHelper.getRestrictedHelperUtilities();
  for (  Map.Entry<String,Object> entry : helperUtilities.entrySet()) {
    _restrictedContext.put(entry.getKey(),entry.getValue());
  }
  _standardContext=new VelocityContext();
  helperUtilities=_templateContextHelper.getHelperUtilities();
  for (  Map.Entry<String,Object> entry : helperUtilities.entrySet()) {
    _standardContext.put(entry.getKey(),entry.getValue());
  }
}
