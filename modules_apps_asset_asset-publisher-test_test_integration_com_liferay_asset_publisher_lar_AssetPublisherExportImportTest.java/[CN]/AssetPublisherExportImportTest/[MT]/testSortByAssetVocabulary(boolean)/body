{
  long groupId=group.getGroupId();
  if (globalVocabulary) {
    Company company=CompanyLocalServiceUtil.getCompany(layout.getCompanyId());
    groupId=company.getGroupId();
  }
  AssetVocabulary assetVocabulary=AssetVocabularyLocalServiceUtil.addVocabulary(TestPropsValues.getUserId(),groupId,RandomTestUtil.randomString(),ServiceContextTestUtil.getServiceContext(groupId));
  Map<String,String[]> preferenceMap=new HashMap<>();
  preferenceMap.put("assetVocabularyId",new String[]{String.valueOf(assetVocabulary.getVocabularyId())});
  PortletPreferences portletPreferences=getImportedPortletPreferences(preferenceMap);
  Assert.assertNotNull("Portlet preference \"assetVocabularyId\" is null",portletPreferences.getValue("assetVocabularyId",null));
  long importedAssetVocabularyId=GetterUtil.getLong(portletPreferences.getValue("assetVocabularyId",null));
  AssetVocabulary importedVocabulary=AssetVocabularyLocalServiceUtil.fetchAssetVocabulary(importedAssetVocabularyId);
  Assert.assertNotNull("Vocabulary " + importedAssetVocabularyId + " does not exist",importedVocabulary);
  long expectedGroupId=groupId;
  if (!globalVocabulary) {
    expectedGroupId=importedGroup.getGroupId();
  }
  Assert.assertEquals("Vocabulary " + importedAssetVocabularyId + " does not belong to group "+ expectedGroupId,expectedGroupId,importedVocabulary.getGroupId());
  AssetVocabularyLocalServiceUtil.deleteAssetVocabulary(assetVocabulary);
}
