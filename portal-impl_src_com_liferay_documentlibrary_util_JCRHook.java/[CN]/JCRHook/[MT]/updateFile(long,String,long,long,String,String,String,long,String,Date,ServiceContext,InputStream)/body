{
  String versionLabel=versionNumber;
  Session session=null;
  try {
    session=JCRFactoryUtil.createSession();
    Node rootNode=getRootNode(session,companyId);
    Node repositoryNode=getFolderNode(rootNode,repositoryId);
    Node fileNode=repositoryNode.getNode(fileName);
    Node contentNode=fileNode.getNode(JCRConstants.JCR_CONTENT);
    contentNode.checkout();
    contentNode.setProperty(JCRConstants.JCR_MIME_TYPE,"text/plain");
    contentNode.setProperty(JCRConstants.JCR_DATA,is);
    contentNode.setProperty(JCRConstants.JCR_LAST_MODIFIED,Calendar.getInstance());
    session.save();
    Version version=contentNode.checkin();
    contentNode.getVersionHistory().addVersionLabel(version.getName(),versionLabel,PropsValues.DL_HOOK_JCR_MOVE_VERSION_LABELS);
    Indexer indexer=IndexerRegistryUtil.getIndexer(FileModel.class);
    FileModel fileModel=new FileModel();
    fileModel.setAssetCategoryIds(serviceContext.getAssetCategoryIds());
    fileModel.setAssetTagNames(serviceContext.getAssetTagNames());
    fileModel.setCompanyId(companyId);
    fileModel.setFileEntryId(fileEntryId);
    fileModel.setFileName(fileName);
    fileModel.setGroupId(groupId);
    fileModel.setModifiedDate(modifiedDate);
    fileModel.setPortletId(portletId);
    fileModel.setProperties(properties);
    fileModel.setRepositoryId(repositoryId);
    indexer.reindex(fileModel);
  }
 catch (  PathNotFoundException pnfe) {
    throw new NoSuchFileException(fileName);
  }
catch (  RepositoryException re) {
    throw new SystemException(re);
  }
 finally {
    if (session != null) {
      session.logout();
    }
  }
}
