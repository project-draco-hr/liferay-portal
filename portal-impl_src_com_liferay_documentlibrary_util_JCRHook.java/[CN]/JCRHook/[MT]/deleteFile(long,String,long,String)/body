{
  Session session=null;
  try {
    session=JCRFactoryUtil.createSession();
    Node rootNode=getRootNode(session,companyId);
    Node repositoryNode=getFolderNode(rootNode,repositoryId);
    Node fileNode=repositoryNode.getNode(fileName);
    Node contentNode=fileNode.getNode(JCRConstants.JCR_CONTENT);
    contentNode.checkout();
    contentNode.setProperty(JCRConstants.JCR_MIME_TYPE,"text/plain");
    contentNode.setProperty(JCRConstants.JCR_DATA,"");
    contentNode.setProperty(JCRConstants.JCR_LAST_MODIFIED,Calendar.getInstance());
    session.save();
    Version version=contentNode.checkin();
    contentNode.getVersionHistory().addVersionLabel(version.getName(),"0.0",false);
  }
 catch (  PathNotFoundException pnfe) {
    throw new NoSuchFileException(fileName);
  }
catch (  RepositoryException re) {
    throw new SystemException(re);
  }
 finally {
    if (session != null) {
      session.logout();
    }
  }
  try {
    session=JCRFactoryUtil.createSession();
    Node rootNode=getRootNode(session,companyId);
    Node repositoryNode=getFolderNode(rootNode,repositoryId);
    Node fileNode=repositoryNode.getNode(fileName);
    Node contentNode=fileNode.getNode(JCRConstants.JCR_CONTENT);
    VersionHistory versionHistory=contentNode.getVersionHistory();
    VersionIterator itr=versionHistory.getAllVersions();
    while (itr.hasNext()) {
      Version version=itr.nextVersion();
      if (itr.getPosition() == itr.getSize()) {
        break;
      }
 else {
        if (!StringUtils.equals(JCRConstants.JCR_ROOT_VERSION,version.getName())) {
          versionHistory.removeVersion(version.getName());
        }
      }
    }
    session.save();
  }
 catch (  PathNotFoundException pnfe) {
    throw new NoSuchFileException(fileName);
  }
catch (  RepositoryException re) {
    throw new SystemException(re);
  }
 finally {
    if (session != null) {
      session.logout();
    }
  }
  try {
    session=JCRFactoryUtil.createSession();
    Node rootNode=getRootNode(session,companyId);
    Node repositoryNode=getFolderNode(rootNode,repositoryId);
    Node fileNode=repositoryNode.getNode(fileName);
    Indexer.deleteFile(companyId,portletId,repositoryId,fileName);
    fileNode.remove();
    session.save();
  }
 catch (  SearchException se) {
    throw new SystemException(se);
  }
catch (  PathNotFoundException pnfe) {
    throw new NoSuchFileException(fileName);
  }
catch (  RepositoryException re) {
    throw new SystemException(re);
  }
 finally {
    if (session != null) {
      session.logout();
    }
  }
}
