{
  long userId=portletDataContext.getUserId(calendarBooking.getUserUuid());
  Map<Long,Long> calendarIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(Calendar.class);
  long calendarId=MapUtil.getLong(calendarIds,calendarBooking.getCalendarId(),calendarBooking.getCalendarId());
  long parentCalendarBookingId=CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT;
  if (!calendarBooking.isMasterBooking()) {
    Map<Long,Long> calendarBookingIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(CalendarBooking.class);
    parentCalendarBookingId=MapUtil.getLong(calendarBookingIds,calendarBooking.getParentCalendarBookingId(),calendarBooking.getParentCalendarBookingId());
  }
  ServiceContext serviceContext=portletDataContext.createServiceContext(calendarBooking);
  CalendarBooking importedCalendarBooking=null;
  if (portletDataContext.isDataStrategyMirror()) {
    CalendarBooking existingCalendarBooking=fetchStagedModelByUuidAndGroupId(calendarBooking.getUuid(),portletDataContext.getScopeGroupId());
    if (existingCalendarBooking == null) {
      serviceContext.setUuid(calendarBooking.getUuid());
      importedCalendarBooking=CalendarBookingLocalServiceUtil.addCalendarBooking(userId,calendarId,new long[0],parentCalendarBookingId,calendarBooking.getTitleMap(),calendarBooking.getDescriptionMap(),calendarBooking.getLocation(),calendarBooking.getStartTime(),calendarBooking.getEndTime(),calendarBooking.isAllDay(),calendarBooking.getRecurrence(),calendarBooking.getFirstReminder(),calendarBooking.getFirstReminderType(),calendarBooking.getSecondReminder(),calendarBooking.getSecondReminderType(),serviceContext);
    }
 else {
      importedCalendarBooking=CalendarBookingLocalServiceUtil.updateCalendarBooking(userId,existingCalendarBooking.getCalendarBookingId(),calendarId,calendarBooking.getTitleMap(),calendarBooking.getDescriptionMap(),calendarBooking.getLocation(),calendarBooking.getStartTime(),calendarBooking.getEndTime(),calendarBooking.isAllDay(),calendarBooking.getRecurrence(),calendarBooking.getFirstReminder(),calendarBooking.getFirstReminderType(),calendarBooking.getSecondReminder(),calendarBooking.getSecondReminderType(),calendarBooking.getStatus(),serviceContext);
    }
  }
 else {
    importedCalendarBooking=CalendarBookingLocalServiceUtil.addCalendarBooking(userId,calendarId,new long[0],parentCalendarBookingId,calendarBooking.getTitleMap(),calendarBooking.getDescriptionMap(),calendarBooking.getLocation(),calendarBooking.getStartTime(),calendarBooking.getEndTime(),calendarBooking.isAllDay(),calendarBooking.getRecurrence(),calendarBooking.getFirstReminder(),calendarBooking.getFirstReminderType(),calendarBooking.getSecondReminder(),calendarBooking.getSecondReminderType(),serviceContext);
  }
  List<Element> mbMessageElements=portletDataContext.getReferenceElements(calendarBooking,MBMessage.class);
  if (ListUtil.isNotEmpty(mbMessageElements)) {
    MBMessageLocalServiceUtil.addDiscussionMessage(userId,importedCalendarBooking.getUserName(),importedCalendarBooking.getGroupId(),CalendarBooking.class.getName(),importedCalendarBooking.getCalendarBookingId(),WorkflowConstants.ACTION_PUBLISH);
  }
  portletDataContext.importClassedModel(calendarBooking,importedCalendarBooking);
}
