{
  List<WikiPage> children=wikiPagePersistence.findByN_H_P(page.getNodeId(),true,page.getTitle());
  for (  WikiPage curPage : children) {
    deletePage(curPage);
  }
  wikiPagePersistence.removeByN_T(page.getNodeId(),page.getTitle());
  wikiPagePersistence.removeByN_R(page.getNodeId(),page.getTitle());
  resourceLocalService.deleteResource(page.getCompanyId(),WikiPage.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,page.getResourcePrimKey());
  try {
    wikiPageResourceLocalService.deletePageResource(page.getNodeId(),page.getTitle());
  }
 catch (  NoSuchPageResourceException nspre) {
  }
  PortletFileRepositoryUtil.deleteFolder(page.getAttachmentsFolderId());
  subscriptionLocalService.deleteSubscriptions(page.getCompanyId(),WikiPage.class.getName(),page.getResourcePrimKey());
  List<WikiPage> versionPages=wikiPagePersistence.findByN_T(page.getNodeId(),page.getTitle());
  for (  WikiPage versionPage : versionPages) {
    assetEntryLocalService.deleteEntry(WikiPage.class.getName(),versionPage.getPrimaryKey());
  }
  assetEntryLocalService.deleteEntry(WikiPage.class.getName(),page.getResourcePrimKey());
  expandoValueLocalService.deleteValues(WikiPage.class.getName(),page.getResourcePrimKey());
  mbMessageLocalService.deleteDiscussionMessages(WikiPage.class.getName(),page.getResourcePrimKey());
  if (page.isInTrash()) {
    page.setTitle(TrashUtil.stripTrashNamespace(page.getTitle()));
    trashEntryLocalService.deleteEntry(WikiPage.class.getName(),page.getResourcePrimKey());
  }
  Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(WikiPage.class);
  indexer.delete(page);
  clearPageCache(page);
  List<WikiPage> pages=wikiPagePersistence.findByN_T(page.getNodeId(),page.getTitle());
  for (  WikiPage curPage : pages) {
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(curPage.getCompanyId(),curPage.getGroupId(),WikiPage.class.getName(),curPage.getPageId());
  }
}
