{
  List<WikiPage> childrenPages=wikiPagePersistence.findByN_P(page.getNodeId(),page.getTitle());
  for (  WikiPage childrenPage : childrenPages) {
    if (!childrenPage.isApproved() || (!childrenPage.isInTrash() && page.isInTrash())) {
      childrenPage.setParentTitle(StringPool.BLANK);
      wikiPagePersistence.update(childrenPage);
    }
 else {
      deletePage(childrenPage);
    }
  }
  List<WikiPage> versionPages=wikiPagePersistence.findByN_T(page.getNodeId(),page.getTitle());
  wikiPagePersistence.removeByN_T(page.getNodeId(),page.getTitle());
  wikiPagePersistence.removeByN_R(page.getNodeId(),page.getTitle());
  resourceLocalService.deleteResource(page.getCompanyId(),WikiPage.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,page.getResourcePrimKey());
  WikiPageResource pageResource=wikiPageResourceLocalService.fetchPageResource(page.getNodeId(),page.getTitle());
  if (pageResource != null) {
    wikiPageResourceLocalService.deleteWikiPageResource(pageResource);
  }
  long folderId=page.getAttachmentsFolderId();
  if (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    PortletFileRepositoryUtil.deletePortletFolder(folderId);
  }
  subscriptionLocalService.deleteSubscriptions(page.getCompanyId(),WikiPage.class.getName(),page.getResourcePrimKey());
  for (  WikiPage versionPage : versionPages) {
    assetEntryLocalService.deleteEntry(WikiPage.class.getName(),versionPage.getPrimaryKey());
  }
  assetEntryLocalService.deleteEntry(WikiPage.class.getName(),page.getResourcePrimKey());
  expandoRowLocalService.deleteRows(page.getPrimaryKey());
  mbMessageLocalService.deleteDiscussionMessages(WikiPage.class.getName(),page.getResourcePrimKey());
  if (page.isInTrash()) {
    if (page.isInTrashExplicitly()) {
      page.setTitle(TrashUtil.getOriginalTitle(page.getTitle()));
      trashEntryLocalService.deleteEntry(WikiPage.class.getName(),page.getResourcePrimKey());
    }
 else {
      for (      WikiPage versionPage : versionPages) {
        trashVersionLocalService.deleteTrashVersion(WikiPage.class.getName(),versionPage.getPageId());
      }
    }
  }
  Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(WikiPage.class);
  indexer.delete(page);
  clearPageCache(page);
  for (  WikiPage versionPage : versionPages) {
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(versionPage.getCompanyId(),versionPage.getGroupId(),WikiPage.class.getName(),versionPage.getPageId());
  }
  if (pageResource != null) {
    JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
    extraDataJSONObject.put("version",page.getVersion());
    systemEventLocalService.addSystemEvent(0,page.getGroupId(),page.getModelClassName(),page.getPrimaryKey(),pageResource.getUuid(),null,SystemEventConstants.TYPE_DELETE,extraDataJSONObject.toString());
  }
}
