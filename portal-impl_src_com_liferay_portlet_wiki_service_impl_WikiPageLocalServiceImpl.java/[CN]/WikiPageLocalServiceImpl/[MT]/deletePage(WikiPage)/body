{
  List<WikiPage> childrenPages=wikiPagePersistence.findByN_P(page.getNodeId(),page.getTitle());
  for (  WikiPage childrenPage : childrenPages) {
    if (!childrenPage.isApproved() || (!childrenPage.isInTrash() && page.isInTrash())) {
      childrenPage.setParentTitle(StringPool.BLANK);
      wikiPagePersistence.update(childrenPage);
    }
 else {
      deletePage(childrenPage);
    }
  }
  wikiPagePersistence.removeByN_T(page.getNodeId(),page.getTitle());
  wikiPagePersistence.removeByN_R(page.getNodeId(),page.getTitle());
  resourceLocalService.deleteResource(page.getCompanyId(),WikiPage.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,page.getResourcePrimKey());
  try {
    wikiPageResourceLocalService.deletePageResource(page.getNodeId(),page.getTitle());
  }
 catch (  NoSuchPageResourceException nspre) {
  }
  long folderId=page.getAttachmentsFolderId();
  if (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    PortletFileRepositoryUtil.deletePortletFolder(folderId);
  }
  subscriptionLocalService.deleteSubscriptions(page.getCompanyId(),WikiPage.class.getName(),page.getResourcePrimKey());
  List<WikiPage> versionPages=wikiPagePersistence.findByN_T(page.getNodeId(),page.getTitle());
  for (  WikiPage versionPage : versionPages) {
    assetEntryLocalService.deleteEntry(WikiPage.class.getName(),versionPage.getPrimaryKey());
  }
  assetEntryLocalService.deleteEntry(WikiPage.class.getName(),page.getResourcePrimKey());
  expandoRowLocalService.deleteRows(page.getPrimaryKey());
  mbMessageLocalService.deleteDiscussionMessages(WikiPage.class.getName(),page.getResourcePrimKey());
  if (page.isInTrash()) {
    page.setTitle(TrashUtil.getOriginalTitle(page.getTitle()));
    trashEntryLocalService.deleteEntry(WikiPage.class.getName(),page.getResourcePrimKey());
  }
  Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(WikiPage.class);
  indexer.delete(page);
  clearPageCache(page);
  List<WikiPage> pages=wikiPagePersistence.findByN_T(page.getNodeId(),page.getTitle());
  for (  WikiPage curPage : pages) {
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(curPage.getCompanyId(),curPage.getGroupId(),WikiPage.class.getName(),curPage.getPageId());
  }
}
