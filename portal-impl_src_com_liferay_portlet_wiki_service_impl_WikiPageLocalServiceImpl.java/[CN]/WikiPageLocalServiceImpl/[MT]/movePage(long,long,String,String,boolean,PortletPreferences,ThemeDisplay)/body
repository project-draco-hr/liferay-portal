{
  validateTitle(newTitle);
  if (isUsedTitle(nodeId,newTitle)) {
    WikiPage page=getPage(nodeId,newTitle);
    if (((page.getVersion() == WikiPageImpl.DEFAULT_VERSION) && (page.getContent().equals(WikiPageImpl.MOVED))) || !strict) {
      deletePage(nodeId,newTitle);
    }
 else {
      throw new DuplicatePageException(newTitle);
    }
  }
  List<WikiPage> pageVersions=wikiPagePersistence.findByN_T(nodeId,title);
  if (pageVersions.size() == 0) {
    return;
  }
  for (  WikiPage page : pageVersions) {
    page.setTitle(newTitle);
    wikiPagePersistence.update(page,false);
  }
  List<WikiPage> children=wikiPagePersistence.findByN_P(nodeId,title);
  for (  WikiPage page : children) {
    page.setParentTitle(newTitle);
    wikiPagePersistence.update(page,false);
  }
  WikiPage page=pageVersions.get(pageVersions.size() - 1);
  WikiPageResource wikiPageResource=wikiPageResourcePersistence.findByPrimaryKey(page.getResourcePrimKey());
  wikiPageResource.setTitle(newTitle);
  wikiPageResourcePersistence.update(wikiPageResource,false);
  String uuid=null;
  double version=WikiPageImpl.DEFAULT_VERSION;
  String format=page.getFormat();
  boolean head=true;
  String parentTitle=page.getParentTitle();
  String redirectTitle=page.getTitle();
  String content=StringPool.DOUBLE_OPEN_BRACKET + redirectTitle + StringPool.DOUBLE_CLOSE_BRACKET;
  String summary=WikiPageImpl.MOVED + " to " + title;
  String[] tagsEntries=null;
  addPage(uuid,userId,nodeId,title,version,content,summary,false,format,head,parentTitle,redirectTitle,tagsEntries,prefs,themeDisplay);
  List<WikiPage> redirectedPages=wikiPagePersistence.findByN_R(nodeId,title);
  for (  WikiPage redirectedPage : redirectedPages) {
    redirectedPage.setRedirectTitle(newTitle);
    wikiPagePersistence.update(redirectedPage,false);
  }
  updateTagsAsset(userId,page,tagsEntries);
  try {
    Indexer.updatePage(page.getCompanyId(),page.getNode().getGroupId(),nodeId,newTitle,content,tagsEntries);
  }
 catch (  SearchException se) {
    _log.error("Indexing " + newTitle,se);
  }
}
