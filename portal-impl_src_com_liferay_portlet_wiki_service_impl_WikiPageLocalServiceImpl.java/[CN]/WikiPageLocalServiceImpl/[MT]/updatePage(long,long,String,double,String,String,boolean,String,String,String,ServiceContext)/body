{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  validate(nodeId,content,format);
  WikiPage page=null;
  try {
    page=getPage(nodeId,title);
  }
 catch (  NoSuchPageException nspe) {
    return addPage(null,userId,nodeId,title,WikiPageConstants.DEFAULT_VERSION,content,summary,minorEdit,format,true,parentTitle,redirectTitle,serviceContext);
  }
  double oldVersion=page.getVersion();
  if ((version > 0) && (version != oldVersion)) {
    throw new PageVersionException();
  }
  long resourcePrimKey=page.getResourcePrimKey();
  long groupId=page.getGroupId();
  page.setHead(false);
  page.setModifiedDate(now);
  wikiPagePersistence.update(page,false);
  double newVersion=MathUtil.format(oldVersion + 0.1,1,1);
  long pageId=counterLocalService.increment();
  page=wikiPagePersistence.create(pageId);
  page.setResourcePrimKey(resourcePrimKey);
  page.setGroupId(groupId);
  page.setCompanyId(user.getCompanyId());
  page.setUserId(user.getUserId());
  page.setUserName(user.getFullName());
  page.setCreateDate(now);
  page.setModifiedDate(now);
  page.setNodeId(nodeId);
  page.setTitle(title);
  page.setVersion(newVersion);
  page.setMinorEdit(minorEdit);
  page.setContent(content);
  page.setSummary(summary);
  page.setFormat(format);
  page.setHead(true);
  if (Validator.isNotNull(parentTitle)) {
    page.setParentTitle(parentTitle);
  }
  if (Validator.isNotNull(redirectTitle)) {
    page.setRedirectTitle(redirectTitle);
  }
  wikiPagePersistence.update(page,false);
  ExpandoBridge expandoBridge=page.getExpandoBridge();
  expandoBridge.setAttributes(serviceContext);
  WikiNode node=wikiNodePersistence.findByPrimaryKey(nodeId);
  node.setLastPostDate(now);
  wikiNodePersistence.update(node,false);
  updateAsset(userId,page,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  socialActivityLocalService.addActivity(userId,page.getGroupId(),WikiPage.class.getName(),page.getResourcePrimKey(),WikiActivityKeys.UPDATE_PAGE,StringPool.BLANK,0);
  if (!minorEdit && NotificationThreadLocal.isEnabled()) {
    notifySubscribers(node,page,serviceContext,true);
  }
  reIndex(page);
  clearPageCache(page);
  return page;
}
