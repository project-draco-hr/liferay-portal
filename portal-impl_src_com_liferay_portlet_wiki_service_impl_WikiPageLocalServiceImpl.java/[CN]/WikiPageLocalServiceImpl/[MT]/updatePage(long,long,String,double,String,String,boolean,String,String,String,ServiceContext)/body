{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  WikiPage oldPage=null;
  try {
    oldPage=wikiPagePersistence.findByN_T_First(nodeId,title,null);
  }
 catch (  NoSuchPageException nspe) {
    return addPage(userId,nodeId,title,WikiPageConstants.VERSION_DEFAULT,content,summary,minorEdit,format,true,parentTitle,redirectTitle,serviceContext);
  }
  long pageId=0;
  if (oldPage.isApproved()) {
    pageId=counterLocalService.increment();
  }
 else {
    pageId=oldPage.getPageId();
  }
  content=SanitizerUtil.sanitize(user.getCompanyId(),oldPage.getGroupId(),userId,WikiPage.class.getName(),pageId,"text/" + format,content);
  validate(nodeId,content,format);
  double oldVersion=oldPage.getVersion();
  if ((version > 0) && (version != oldVersion)) {
    throw new PageVersionException();
  }
  serviceContext.validateModifiedDate(oldPage,PageVersionException.class);
  long resourcePrimKey=wikiPageResourceLocalService.getPageResourcePrimKey(nodeId,title);
  long groupId=oldPage.getGroupId();
  WikiPage page=oldPage;
  double newVersion=oldVersion;
  if (oldPage.isApproved()) {
    newVersion=MathUtil.format(oldVersion + 0.1,1,1);
    page=wikiPagePersistence.create(pageId);
  }
  page.setResourcePrimKey(resourcePrimKey);
  page.setGroupId(groupId);
  page.setCompanyId(user.getCompanyId());
  page.setUserId(user.getUserId());
  page.setUserName(user.getFullName());
  page.setCreateDate(serviceContext.getModifiedDate(now));
  page.setModifiedDate(serviceContext.getModifiedDate(now));
  page.setNodeId(nodeId);
  page.setTitle(title);
  page.setVersion(newVersion);
  page.setMinorEdit(minorEdit);
  page.setContent(content);
  if (oldPage.isPending()) {
    page.setStatus(oldPage.getStatus());
  }
 else {
    page.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  page.setSummary(summary);
  page.setFormat(format);
  if (Validator.isNotNull(parentTitle)) {
    page.setParentTitle(parentTitle);
  }
  if (Validator.isNotNull(redirectTitle)) {
    page.setRedirectTitle(redirectTitle);
  }
  wikiPagePersistence.update(page,false);
  ExpandoBridge expandoBridge=page.getExpandoBridge();
  expandoBridge.setAttributes(serviceContext);
  WikiNode node=wikiNodePersistence.findByPrimaryKey(nodeId);
  node.setLastPostDate(serviceContext.getModifiedDate(now));
  wikiNodePersistence.update(node,false);
  if (serviceContext.getCommand().equals(Constants.REVERT)) {
    String[] assetTagNames=AssetTagLocalServiceUtil.getTagNames(WikiPage.class.getName(),page.getResourcePrimKey());
    long[] assetCategoryIds=AssetCategoryLocalServiceUtil.getCategoryIds(WikiPage.class.getName(),page.getResourcePrimKey());
    AssetEntry entry=AssetEntryLocalServiceUtil.getEntry(WikiPage.class.getName(),page.getResourcePrimKey());
    List<AssetLink> assetLinks=AssetLinkLocalServiceUtil.getLinks(entry.getEntryId());
    long[] assetLinkIds=StringUtil.split(ListUtil.toString(assetLinks,AssetLink.ENTRY_ID2_ACCESSOR),0L);
    updateAsset(userId,page,assetCategoryIds,assetTagNames,assetLinkIds);
  }
 else {
    updateAsset(userId,page,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  }
  WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),page.getGroupId(),userId,WikiPage.class.getName(),page.getPageId(),page,serviceContext);
  return page;
}
