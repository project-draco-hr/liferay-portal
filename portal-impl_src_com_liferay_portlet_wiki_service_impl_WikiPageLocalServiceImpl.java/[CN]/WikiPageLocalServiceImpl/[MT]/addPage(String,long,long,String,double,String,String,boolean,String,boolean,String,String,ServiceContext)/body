{
  User user=userPersistence.findByPrimaryKey(userId);
  WikiNode node=wikiNodePersistence.findByPrimaryKey(nodeId);
  Date now=new Date();
  validate(title,nodeId,content,format);
  long pageId=counterLocalService.increment();
  long resourcePrimKey=wikiPageResourceLocalService.getPageResourcePrimKey(nodeId,title);
  WikiPage page=wikiPagePersistence.create(pageId);
  page.setUuid(uuid);
  page.setResourcePrimKey(resourcePrimKey);
  page.setCompanyId(user.getCompanyId());
  page.setUserId(user.getUserId());
  page.setUserName(user.getFullName());
  page.setCreateDate(now);
  page.setModifiedDate(now);
  page.setNodeId(nodeId);
  page.setTitle(title);
  page.setVersion(version);
  page.setMinorEdit(minorEdit);
  page.setContent(content);
  page.setSummary(summary);
  page.setFormat(format);
  page.setHead(head);
  page.setParentTitle(parentTitle);
  page.setRedirectTitle(redirectTitle);
  wikiPagePersistence.update(page,false);
  addPageResources(page.getNode(),page,true,true);
  node.setLastPostDate(now);
  wikiNodePersistence.update(node,false);
  socialActivityLocalService.addActivity(userId,node.getGroupId(),WikiPage.class.getName(),resourcePrimKey,WikiActivityKeys.ADD_PAGE,StringPool.BLANK,0);
  if (!minorEdit && NotificationThreadLocal.isNotificationEnabled()) {
    notifySubscribers(node,page,serviceContext,false);
  }
  updateTagsAsset(userId,page,serviceContext.getTagsCategories(),serviceContext.getTagsEntries());
  try {
    Indexer.addPage(page.getCompanyId(),node.getGroupId(),resourcePrimKey,nodeId,title,content,serviceContext.getTagsEntries(),page.getExpandoBridge());
  }
 catch (  SearchException se) {
    _log.error("Indexing " + pageId,se);
  }
  clearReferralsCache(page);
  clearPageCache(page);
  return page;
}
