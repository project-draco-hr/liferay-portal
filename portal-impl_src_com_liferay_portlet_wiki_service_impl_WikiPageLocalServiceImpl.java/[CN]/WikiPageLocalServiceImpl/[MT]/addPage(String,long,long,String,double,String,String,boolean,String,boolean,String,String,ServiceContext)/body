{
  User user=userPersistence.findByPrimaryKey(userId);
  WikiNode node=wikiNodePersistence.findByPrimaryKey(nodeId);
  Date now=new Date();
  validate(title,nodeId,content,format);
  String upperCaseTitle=StringUtil.upperCaseFirstLetter(title);
  long pageId=counterLocalService.increment();
  long resourcePrimKey=wikiPageResourceLocalService.getPageResourcePrimKey(nodeId,upperCaseTitle);
  int status=WorkflowConstants.STATUS_DRAFT;
  if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_PUBLISH) {
    status=WorkflowConstants.STATUS_APPROVED;
  }
  WikiPage page=wikiPagePersistence.create(pageId);
  page.setUuid(uuid);
  page.setResourcePrimKey(resourcePrimKey);
  page.setGroupId(node.getGroupId());
  page.setCompanyId(user.getCompanyId());
  page.setUserId(user.getUserId());
  page.setUserName(user.getFullName());
  page.setCreateDate(serviceContext.getCreateDate(now));
  page.setModifiedDate(serviceContext.getModifiedDate(now));
  page.setNodeId(nodeId);
  page.setTitle(upperCaseTitle);
  page.setVersion(version);
  page.setMinorEdit(minorEdit);
  page.setContent(content);
  page.setStatus(status);
  page.setSummary(summary);
  page.setFormat(format);
  page.setHead(head);
  page.setParentTitle(parentTitle);
  page.setRedirectTitle(redirectTitle);
  wikiPagePersistence.update(page,false);
  if (serviceContext.getAddCommunityPermissions() || serviceContext.getAddGuestPermissions()) {
    addPageResources(page,serviceContext.getAddCommunityPermissions(),serviceContext.getAddGuestPermissions());
  }
 else {
    addPageResources(page,serviceContext.getCommunityPermissions(),serviceContext.getGuestPermissions());
  }
  node.setLastPostDate(serviceContext.getModifiedDate(now));
  wikiNodePersistence.update(node,false);
  updateAsset(userId,page,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  ExpandoBridge expandoBridge=page.getExpandoBridge();
  expandoBridge.setAttributes(serviceContext);
  if (PropsValues.WIKI_PAGE_COMMENTS_ENABLED) {
    mbMessageLocalService.addDiscussionMessage(userId,page.getUserName(),WikiPage.class.getName(),resourcePrimKey,WorkflowConstants.ACTION_PUBLISH);
  }
  socialActivityLocalService.addActivity(userId,page.getGroupId(),WikiPage.class.getName(),resourcePrimKey,WikiActivityKeys.ADD_PAGE,StringPool.BLANK,0);
  if (page.isApproved() && !minorEdit && NotificationThreadLocal.isEnabled()) {
    notifySubscribers(node,page,serviceContext,false);
  }
  if (page.isApproved()) {
    Indexer indexer=IndexerRegistryUtil.getIndexer(WikiPage.class);
    indexer.reindex(page);
  }
  clearPageCache(page);
  clearReferralsCache(page);
  return page;
}
