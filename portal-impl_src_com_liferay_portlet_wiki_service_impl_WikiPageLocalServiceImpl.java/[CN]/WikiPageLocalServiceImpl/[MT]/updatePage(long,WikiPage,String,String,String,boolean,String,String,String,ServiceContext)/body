{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  long nodeId=oldPage.getNodeId();
  long pageId=0;
  if (oldPage.isApproved()) {
    pageId=counterLocalService.increment();
  }
 else {
    pageId=oldPage.getPageId();
  }
  content=SanitizerUtil.sanitize(user.getCompanyId(),oldPage.getGroupId(),userId,WikiPage.class.getName(),pageId,"text/" + format,content);
  validate(nodeId,content,format);
  double oldVersion=oldPage.getVersion();
  serviceContext.validateModifiedDate(oldPage,PageVersionException.class);
  long resourcePrimKey=wikiPageResourceLocalService.getPageResourcePrimKey(nodeId,oldPage.getTitle());
  long groupId=oldPage.getGroupId();
  WikiPage page=oldPage;
  double newVersion=oldVersion;
  if (oldPage.isApproved()) {
    newVersion=MathUtil.format(oldVersion + 0.1,1,1);
    page=wikiPagePersistence.create(pageId);
    page.setUuid(serviceContext.getUuid());
  }
  page.setResourcePrimKey(resourcePrimKey);
  page.setGroupId(groupId);
  page.setCompanyId(user.getCompanyId());
  page.setUserId(user.getUserId());
  page.setUserName(user.getFullName());
  page.setCreateDate(serviceContext.getModifiedDate(now));
  page.setModifiedDate(serviceContext.getModifiedDate(now));
  page.setNodeId(nodeId);
  page.setTitle(Validator.isNull(newTitle) ? oldPage.getTitle() : newTitle);
  page.setVersion(newVersion);
  page.setMinorEdit(minorEdit);
  page.setContent(content);
  if (oldPage.isPending()) {
    page.setStatus(oldPage.getStatus());
  }
 else {
    page.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  page.setSummary(summary);
  page.setFormat(format);
  if (Validator.isNotNull(parentTitle)) {
    page.setParentTitle(parentTitle);
  }
  if (Validator.isNotNull(redirectTitle)) {
    page.setRedirectTitle(redirectTitle);
  }
  page.setExpandoBridgeAttributes(serviceContext);
  wikiPagePersistence.update(page);
  WikiNode node=wikiNodePersistence.findByPrimaryKey(nodeId);
  node.setLastPostDate(serviceContext.getModifiedDate(now));
  wikiNodePersistence.update(node);
  updateAsset(userId,page,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  if (!page.isMinorEdit() || PropsValues.WIKI_PAGE_MINOR_EDIT_ADD_SOCIAL_ACTIVITY) {
    if (oldVersion == newVersion) {
      SocialActivity lastSocialActivity=socialActivityLocalService.fetchFirstActivity(WikiPage.class.getName(),page.getResourcePrimKey(),WikiActivityKeys.UPDATE_PAGE);
      if (lastSocialActivity != null) {
        lastSocialActivity.setCreateDate(now.getTime() + 1);
        lastSocialActivity.setUserId(serviceContext.getUserId());
        socialActivityPersistence.update(lastSocialActivity);
      }
    }
 else {
      JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
      extraDataJSONObject.put("title",page.getTitle());
      extraDataJSONObject.put("version",page.getVersion());
      socialActivityLocalService.addActivity(userId,page.getGroupId(),WikiPage.class.getName(),page.getResourcePrimKey(),WikiActivityKeys.UPDATE_PAGE,extraDataJSONObject.toString(),0);
    }
  }
  startWorkflowInstance(userId,page,serviceContext);
  return page;
}
