{
  int oldStatus=page.getStatus();
  if (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {
    return;
  }
  List<WikiPage> versionPages=wikiPagePersistence.findByR_N(page.getResourcePrimKey(),page.getNodeId());
  for (  WikiPage versionPage : versionPages) {
    int versionPageOldStatus=versionPage.getStatus();
    versionPage.setStatus(WorkflowConstants.STATUS_IN_TRASH);
    wikiPagePersistence.update(versionPage);
    int status=versionPageOldStatus;
    if (versionPageOldStatus == WorkflowConstants.STATUS_PENDING) {
      status=WorkflowConstants.STATUS_DRAFT;
    }
    if (versionPageOldStatus != WorkflowConstants.STATUS_APPROVED) {
      trashVersionLocalService.addTrashVersion(trashEntryId,WikiPage.class.getName(),versionPage.getPageId(),status,null);
    }
  }
  if (oldStatus == WorkflowConstants.STATUS_APPROVED) {
    assetEntryLocalService.updateVisible(WikiPage.class.getName(),page.getResourcePrimKey(),false);
  }
  Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(WikiPage.class);
  indexer.reindex(page);
  if (WikiCacheThreadLocal.isClearCache()) {
    WikiCacheUtil.clearCache(page.getNodeId());
  }
  if (oldStatus == WorkflowConstants.STATUS_PENDING) {
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(page.getCompanyId(),page.getGroupId(),WikiPage.class.getName(),page.getResourcePrimKey());
  }
  String title=page.getTitle();
  moveDependentChildrenToTrash(page,title,title,trashEntryId);
  moveDependentRedirectPagesToTrash(page,title,title,trashEntryId);
}
