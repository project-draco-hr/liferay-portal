{
  String trashTitle=page.getTitle();
  TrashVersion trashVersion=trashVersionLocalService.fetchVersion(WikiPage.class.getName(),page.getPageId());
  long oldNodeId=page.getNodeId();
  if (newNodeId == 0) {
    newNodeId=oldNodeId;
  }
  page.setNodeId(newNodeId);
  WikiPageResource pageResource=wikiPageResourcePersistence.findByPrimaryKey(page.getResourcePrimKey());
  pageResource.setNodeId(newNodeId);
  if (trashVersion != null) {
    String originalTitle=TrashUtil.getOriginalTitle(page.getTitle());
    pageResource.setTitle(originalTitle);
    page.setTitle(originalTitle);
  }
  wikiPageResourcePersistence.update(pageResource);
  page.setParentTitle(newParentTitle);
  wikiPagePersistence.update(page);
  int oldStatus=WorkflowConstants.STATUS_APPROVED;
  if (trashVersion != null) {
    oldStatus=trashVersion.getStatus();
  }
  List<WikiPage> versionPages=wikiPagePersistence.findByR_N(page.getResourcePrimKey(),page.getNodeId());
  for (  WikiPage versionPage : versionPages) {
    versionPage.setParentTitle(newParentTitle);
    versionPage.setNodeId(newNodeId);
    versionPage.setTitle(page.getTitle());
    trashVersion=trashVersionLocalService.fetchVersion(WikiPage.class.getName(),versionPage.getPageId());
    int versionPageOldStatus=WorkflowConstants.STATUS_APPROVED;
    if (trashVersion != null) {
      versionPageOldStatus=trashVersion.getStatus();
    }
    versionPage.setStatus(versionPageOldStatus);
    wikiPagePersistence.update(versionPage);
    if (trashVersion != null) {
      trashVersionLocalService.deleteTrashVersion(trashVersion);
    }
  }
  if (oldStatus == WorkflowConstants.STATUS_APPROVED) {
    assetEntryLocalService.updateVisible(WikiPage.class.getName(),page.getResourcePrimKey(),true);
  }
  Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(WikiPage.class);
  indexer.reindex(page);
  moveDependentChildPagesFromTrash(page,oldNodeId,page.getTitle(),trashTitle);
  moveDependentRedirectPagesFromTrash(page,oldNodeId,page.getTitle(),trashTitle);
}
