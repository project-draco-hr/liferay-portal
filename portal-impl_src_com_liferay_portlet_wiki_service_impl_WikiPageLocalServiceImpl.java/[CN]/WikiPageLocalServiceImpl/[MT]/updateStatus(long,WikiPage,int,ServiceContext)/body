{
  User user=userPersistence.findByPrimaryKey(userId);
  WikiNode node=wikiNodePersistence.findByPrimaryKey(page.getNodeId());
  Date now=new Date();
  int oldStatus=page.getStatus();
  page.setStatus(status);
  page.setStatusByUserId(userId);
  page.setStatusByUserName(user.getFullName());
  page.setStatusDate(now);
  if (status == WorkflowConstants.STATUS_APPROVED) {
    if ((oldStatus != WorkflowConstants.STATUS_APPROVED) && (page.getVersion() != WikiPageConstants.DEFAULT_VERSION)) {
      try {
        AssetEntry draftAssetEntry=assetEntryLocalService.getEntry(WikiPage.class.getName(),page.getPrimaryKey());
        long[] assetCategoryIds=draftAssetEntry.getCategoryIds();
        String[] assetTagNames=draftAssetEntry.getTagNames();
        List<AssetLink> assetLinks=assetLinkLocalService.getDirectLinks(draftAssetEntry.getEntryId(),AssetLinkConstants.TYPE_RELATED);
        long[] assetLinkEntryIds=StringUtil.split(ListUtil.toString(assetLinks,AssetLink.ENTRYID2_ACCESSOR),0L);
        AssetEntry assetEntry=assetEntryLocalService.updateEntry(userId,page.getGroupId(),WikiPage.class.getName(),page.getResourcePrimKey(),page.getUuid(),assetCategoryIds,assetTagNames,true,null,null,null,null,ContentTypes.TEXT_HTML,page.getTitle(),null,null,null,null,0,0,null,false);
        assetLinkLocalService.updateLinks(userId,assetEntry.getEntryId(),assetLinkEntryIds,AssetLinkConstants.TYPE_RELATED);
        assetEntryLocalService.deleteEntry(draftAssetEntry.getEntryId());
      }
 catch (      NoSuchEntryException nsee) {
      }
    }
    assetEntryLocalService.updateVisible(WikiPage.class.getName(),page.getResourcePrimKey(),true);
    int activity=WikiActivityKeys.ADD_PAGE;
    String actionId=ActionKeys.ADD_PAGE;
    if (page.getVersion() > 1.1) {
      activity=WikiActivityKeys.UPDATE_PAGE;
      actionId=ActionKeys.UPDATE;
    }
    socialActivityLocalService.addActivity(userId,page.getGroupId(),WikiPage.class.getName(),page.getResourcePrimKey(),activity,StringPool.BLANK,0);
    socialEquityLogLocalService.addEquityLogs(userId,WikiPage.class.getName(),page.getResourcePrimKey(),actionId,StringPool.BLANK);
    if (!page.isMinorEdit() && NotificationThreadLocal.isEnabled()) {
      boolean update=false;
      if (page.getVersion() > 1.1) {
        update=true;
      }
      notifySubscribers(node,page,serviceContext,update);
    }
    Indexer indexer=IndexerRegistryUtil.getIndexer(WikiPage.class);
    indexer.reindex(page);
    clearPageCache(page);
    page.setHead(true);
    List<WikiPage> pages=wikiPagePersistence.findByN_T_H(page.getNodeId(),page.getTitle(),true);
    for (    WikiPage curPage : pages) {
      if (!curPage.equals(page)) {
        curPage.setHead(false);
        wikiPagePersistence.update(curPage,false);
      }
    }
  }
 else {
    page.setHead(false);
    List<WikiPage> pages=wikiPagePersistence.findByN_T_S(page.getNodeId(),page.getTitle(),WorkflowConstants.STATUS_APPROVED);
    for (    WikiPage curPage : pages) {
      if (!curPage.equals(page)) {
        curPage.setHead(true);
        wikiPagePersistence.update(curPage,false);
        break;
      }
    }
  }
  return wikiPagePersistence.update(page,false);
}
