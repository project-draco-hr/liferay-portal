{
  Object[] finderArgs=new Object[]{groupId,classUuid};
  Object result=null;
  if (retrieveFromCache) {
    result=finderCache.getResult(FINDER_PATH_FETCH_BY_G_CU,finderArgs,this);
  }
  if (result instanceof AssetEntry) {
    AssetEntry assetEntry=(AssetEntry)result;
    if ((groupId != assetEntry.getGroupId()) || !Validator.equals(classUuid,assetEntry.getClassUuid())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_ASSETENTRY_WHERE);
    query.append(_FINDER_COLUMN_G_CU_GROUPID_2);
    boolean bindClassUuid=false;
    if (classUuid == null) {
      query.append(_FINDER_COLUMN_G_CU_CLASSUUID_1);
    }
 else     if (classUuid.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_CU_CLASSUUID_3);
    }
 else {
      bindClassUuid=true;
      query.append(_FINDER_COLUMN_G_CU_CLASSUUID_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      if (bindClassUuid) {
        qPos.add(classUuid);
      }
      List<AssetEntry> list=q.list();
      if (list.isEmpty()) {
        finderCache.putResult(FINDER_PATH_FETCH_BY_G_CU,finderArgs,list);
      }
 else {
        if ((list.size() > 1) && _log.isWarnEnabled()) {
          _log.warn("AssetEntryPersistenceImpl.fetchByG_CU(long, String, boolean) with parameters (" + StringUtil.merge(finderArgs) + ") yields a result set with more than 1 result. This violates the logical unique restriction. There is no order guarantee on which result is returned by this finder.");
        }
        AssetEntry assetEntry=list.get(0);
        result=assetEntry;
        cacheResult(assetEntry);
        if ((assetEntry.getGroupId() != groupId) || (assetEntry.getClassUuid() == null) || !assetEntry.getClassUuid().equals(classUuid)) {
          finderCache.putResult(FINDER_PATH_FETCH_BY_G_CU,finderArgs,assetEntry);
        }
      }
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_FETCH_BY_G_CU,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (AssetEntry)result;
  }
}
