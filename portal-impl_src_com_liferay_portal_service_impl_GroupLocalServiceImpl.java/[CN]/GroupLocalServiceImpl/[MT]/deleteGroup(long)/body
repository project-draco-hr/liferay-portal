{
  Group group=groupPersistence.findByPrimaryKey(groupId);
  if (PortalUtil.isSystemGroup(group.getName())) {
    throw new RequiredGroupException(String.valueOf(groupId));
  }
  layoutSetBranchLocalService.deleteLayoutSetBranches(groupId,true);
  layoutSetBranchLocalService.deleteLayoutSetBranches(groupId,false);
  try {
    layoutSetLocalService.deleteLayoutSet(groupId,true);
  }
 catch (  NoSuchLayoutSetException nslse) {
  }
  try {
    layoutSetLocalService.deleteLayoutSet(groupId,false);
  }
 catch (  NoSuchLayoutSetException nslse) {
  }
  userGroupRoleLocalService.deleteUserGroupRolesByGroupId(groupId);
  userGroupGroupRoleLocalService.deleteUserGroupGroupRolesByGroupId(groupId);
  membershipRequestLocalService.deleteMembershipRequests(group.getGroupId());
  subscriptionLocalService.deleteSubscriptions(group.getCompanyId(),BlogsEntry.class.getName(),group.getGroupId());
  subscriptionLocalService.deleteSubscriptions(group.getCompanyId(),JournalArticle.class.getName(),group.getGroupId());
  teamLocalService.deleteTeams(group.getGroupId());
  unscheduleStaging(group);
  if (group.hasStagingGroup()) {
    deleteGroup(group.getStagingGroup().getGroupId());
  }
  if (group.isCommunity()) {
    assetEntryLocalService.deleteEntry(Group.class.getName(),groupId);
  }
  blogsEntryLocalService.deleteEntries(groupId);
  blogsStatsUserLocalService.deleteStatsUserByGroupId(groupId);
  bookmarksFolderLocalService.deleteFolders(groupId);
  calEventLocalService.deleteEvents(groupId);
  dlRepositoryLocalService.deleteFolders(groupId);
  igFolderLocalService.deleteFolders(groupId);
  journalArticleLocalService.deleteArticles(groupId);
  journalTemplateLocalService.deleteTemplates(groupId);
  journalStructureLocalService.deleteStructures(groupId);
  mbBanLocalService.deleteBansByGroupId(groupId);
  mbCategoryLocalService.deleteCategories(groupId);
  mbStatsUserLocalService.deleteStatsUsersByGroupId(groupId);
  pollsQuestionLocalService.deleteQuestions(groupId);
  shoppingCartLocalService.deleteGroupCarts(groupId);
  shoppingCategoryLocalService.deleteCategories(groupId);
  shoppingCouponLocalService.deleteCoupons(groupId);
  shoppingOrderLocalService.deleteOrders(groupId);
  scFrameworkVersionLocalService.deleteFrameworkVersions(groupId);
  scProductEntryLocalService.deleteProductEntries(groupId);
  tasksProposalLocalService.deleteProposals(groupId);
  wikiNodeLocalService.deleteNodes(groupId);
  Iterator<Resource> itr=resourceFinder.findByC_P(group.getCompanyId(),String.valueOf(groupId)).iterator();
  while (itr.hasNext()) {
    Resource resource=itr.next();
    resourceLocalService.deleteResource(resource);
  }
  if (!group.isStagingGroup() && (group.isCommunity() || group.isOrganization())) {
    resourceLocalService.deleteResource(group.getCompanyId(),Group.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,group.getGroupId());
  }
  groupPersistence.remove(group);
  PermissionCacheUtil.clearCache();
}
