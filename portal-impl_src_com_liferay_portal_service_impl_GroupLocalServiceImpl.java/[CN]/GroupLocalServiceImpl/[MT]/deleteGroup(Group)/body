{
  boolean deleteInProcess=GroupThreadLocal.isDeleteInProcess();
  try {
    GroupThreadLocal.setDeleteInProcess(true);
    if (((group.isCompany() && !group.isCompanyStagingGroup()) || PortalUtil.isSystemGroup(group.getGroupKey())) && !CompanyThreadLocal.isDeleteInProcess()) {
      throw new RequiredGroupException.MustNotDeleteSystemGroup(group.getGroupId());
    }
    if (groupPersistence.countByC_P_S(group.getCompanyId(),group.getGroupId(),true) > 0) {
      throw new RequiredGroupException.MustNotDeleteGroupThatHasChild(group.getGroupId());
    }
    List<BackgroundTask> backgroundTasks=backgroundTaskLocalService.getBackgroundTasks(group.getGroupId(),BackgroundTaskConstants.STATUS_IN_PROGRESS);
    if (!backgroundTasks.isEmpty()) {
      throw new PendingBackgroundTaskException("Unable to delete group with pending background tasks");
    }
    backgroundTaskLocalService.deleteGroupBackgroundTasks(group.getGroupId());
    layoutSetBranchLocalService.deleteLayoutSetBranches(group.getGroupId(),true,true);
    layoutSetBranchLocalService.deleteLayoutSetBranches(group.getGroupId(),false,true);
    ServiceContext serviceContext=new ServiceContext();
    try {
      layoutSetLocalService.deleteLayoutSet(group.getGroupId(),true,serviceContext);
    }
 catch (    NoSuchLayoutSetException nslse) {
    }
    try {
      layoutSetLocalService.deleteLayoutSet(group.getGroupId(),false,serviceContext);
    }
 catch (    NoSuchLayoutSetException nslse) {
    }
    userGroupRoleLocalService.deleteUserGroupRolesByGroupId(group.getGroupId());
    userGroupGroupRoleLocalService.deleteUserGroupGroupRolesByGroupId(group.getGroupId());
    membershipRequestLocalService.deleteMembershipRequests(group.getGroupId());
    portletPreferencesLocalService.deletePortletPreferences(group.getGroupId(),PortletKeys.PREFS_OWNER_TYPE_GROUP,PortletKeys.PREFS_PLID_SHARED);
    dlAppLocalService.deleteAllRepositories(group.getGroupId());
    teamLocalService.deleteTeams(group.getGroupId());
    exportImportConfigurationLocalService.deleteExportImportConfigurations(group.getGroupId());
    unscheduleStaging(group);
    if (group.hasStagingGroup()) {
      try {
        stagingLocalService.disableStaging(group,serviceContext);
      }
 catch (      Exception e) {
        _log.error("Unable to disable staging for group " + group.getGroupId());
      }
    }
    ThemeLoader themeLoader=ThemeLoaderFactory.getDefaultThemeLoader();
    if (themeLoader != null) {
      String themePath=themeLoader.getFileStorage() + StringPool.SLASH + group.getGroupId();
      FileUtil.deltree(themePath + "-private");
      FileUtil.deltree(themePath + "-public");
    }
    deletePortletData(group);
    if (group.isRegularSite()) {
      assetEntryLocalService.deleteEntry(Group.class.getName(),group.getGroupId());
    }
    assetEntryLocalService.deleteGroupEntries(group.getGroupId());
    assetTagLocalService.deleteGroupTags(group.getGroupId());
    assetVocabularyLocalService.deleteVocabularies(group.getGroupId());
    expandoRowLocalService.deleteRows(group.getGroupId());
    shoppingCartLocalService.deleteGroupCarts(group.getGroupId());
    shoppingCategoryLocalService.deleteCategories(group.getGroupId());
    shoppingCouponLocalService.deleteCoupons(group.getGroupId());
    shoppingOrderLocalService.deleteOrders(group.getGroupId());
    socialActivityLocalService.deleteActivities(group.getGroupId());
    socialActivitySettingLocalService.deleteActivitySettings(group.getGroupId());
    socialRequestLocalService.deleteRequests(classNameLocalService.getClassNameId(Group.class),group.getGroupId());
    scFrameworkVersionLocalService.deleteFrameworkVersions(group.getGroupId());
    scProductEntryLocalService.deleteProductEntries(group.getGroupId());
    List<ResourcePermission> resourcePermissions=resourcePermissionPersistence.findByC_LikeP(group.getCompanyId(),String.valueOf(group.getGroupId()));
    for (    ResourcePermission resourcePermission : resourcePermissions) {
      resourcePermissionLocalService.deleteResourcePermission(resourcePermission);
    }
    if (!group.isStagingGroup() && (group.isOrganization() || group.isRegularSite())) {
      resourceLocalService.deleteResource(group.getCompanyId(),Group.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,group.getGroupId());
    }
    trashEntryLocalService.deleteEntries(group.getGroupId());
    List<WorkflowHandler<?>> scopeableWorkflowHandlers=WorkflowHandlerRegistryUtil.getScopeableWorkflowHandlers();
    for (    WorkflowHandler<?> scopeableWorkflowHandler : scopeableWorkflowHandlers) {
      if (!scopeableWorkflowHandler.isVisible()) {
        continue;
      }
      WorkflowDefinitionLink workflowDefinitionLink=workflowDefinitionLinkLocalService.fetchWorkflowDefinitionLink(group.getCompanyId(),group.getGroupId(),scopeableWorkflowHandler.getClassName(),0,0,true);
      if (workflowDefinitionLink == null) {
        continue;
      }
      workflowDefinitionLinkLocalService.deleteWorkflowDefinitionLink(workflowDefinitionLink);
    }
    if (!group.isStagingGroup() && group.isOrganization() && group.isSite()) {
      group.setSite(false);
      groupPersistence.update(group);
    }
 else {
      groupPersistence.remove(group);
    }
    PermissionCacheUtil.clearCache();
    return group;
  }
  finally {
    GroupThreadLocal.setDeleteInProcess(deleteInProcess);
  }
}
