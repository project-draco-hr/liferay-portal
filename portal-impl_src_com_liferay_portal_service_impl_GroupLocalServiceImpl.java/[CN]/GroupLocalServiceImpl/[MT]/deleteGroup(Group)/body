{
  if (PortalUtil.isSystemGroup(group.getName())) {
    throw new RequiredGroupException(String.valueOf(group.getGroupId()),RequiredGroupException.SYSTEM_GROUP);
  }
  if (groupPersistence.countByC_P_S(group.getCompanyId(),group.getGroupId(),true) > 0) {
    throw new RequiredGroupException(String.valueOf(group.getGroupId()),RequiredGroupException.PARENT_GROUP);
  }
  layoutSetBranchLocalService.deleteLayoutSetBranches(group.getGroupId(),true,true);
  layoutSetBranchLocalService.deleteLayoutSetBranches(group.getGroupId(),false,true);
  ServiceContext serviceContext=new ServiceContext();
  try {
    layoutSetLocalService.deleteLayoutSet(group.getGroupId(),true,serviceContext);
  }
 catch (  NoSuchLayoutSetException nslse) {
  }
  try {
    layoutSetLocalService.deleteLayoutSet(group.getGroupId(),false,serviceContext);
  }
 catch (  NoSuchLayoutSetException nslse) {
  }
  userGroupRoleLocalService.deleteUserGroupRolesByGroupId(group.getGroupId());
  userGroupGroupRoleLocalService.deleteUserGroupGroupRolesByGroupId(group.getGroupId());
  membershipRequestLocalService.deleteMembershipRequests(group.getGroupId());
  subscriptionLocalService.deleteSubscriptions(group.getCompanyId(),BlogsEntry.class.getName(),group.getGroupId());
  subscriptionLocalService.deleteSubscriptions(group.getCompanyId(),JournalArticle.class.getName(),group.getGroupId());
  teamLocalService.deleteTeams(group.getGroupId());
  unscheduleStaging(group);
  if (group.hasStagingGroup()) {
    try {
      StagingUtil.disableStaging(group,group,serviceContext);
    }
 catch (    Exception e) {
      if (_log.isErrorEnabled()) {
        _log.error("Unable to disable staging for group: " + group);
      }
    }
  }
  ThemeLoader themeLoader=ThemeLoaderFactory.getDefaultThemeLoader();
  if (themeLoader != null) {
    String themePath=themeLoader.getFileStorage() + StringPool.SLASH + group.getGroupId();
    FileUtil.deltree(themePath + "-private");
    FileUtil.deltree(themePath + "-public");
  }
  if (group.isRegularSite()) {
    assetEntryLocalService.deleteEntry(Group.class.getName(),group.getGroupId());
  }
  assetVocabularyLocalService.deleteVocabularies(group.getGroupId());
  blogsEntryLocalService.deleteEntries(group.getGroupId());
  blogsStatsUserLocalService.deleteStatsUserByGroupId(group.getGroupId());
  bookmarksFolderLocalService.deleteFolders(group.getGroupId());
  calEventLocalService.deleteEvents(group.getGroupId());
  repositoryLocalService.deleteRepositories(group.getGroupId());
  dlFileEntryTypeLocalService.deleteFileEntryTypes(group.getGroupId());
  journalArticleLocalService.deleteArticles(group.getGroupId());
  journalTemplateLocalService.deleteTemplates(group.getGroupId());
  journalStructureLocalService.deleteStructures(group.getGroupId());
  mbBanLocalService.deleteBansByGroupId(group.getGroupId());
  mbCategoryLocalService.deleteCategories(group.getGroupId());
  mbStatsUserLocalService.deleteStatsUsersByGroupId(group.getGroupId());
  mbThreadLocalService.deleteThreads(group.getGroupId(),MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID);
  pollsQuestionLocalService.deleteQuestions(group.getGroupId());
  shoppingCartLocalService.deleteGroupCarts(group.getGroupId());
  shoppingCategoryLocalService.deleteCategories(group.getGroupId());
  shoppingCouponLocalService.deleteCoupons(group.getGroupId());
  shoppingOrderLocalService.deleteOrders(group.getGroupId());
  socialActivitySettingLocalService.deleteActivitySettings(group.getGroupId());
  scFrameworkVersionLocalService.deleteFrameworkVersions(group.getGroupId());
  scProductEntryLocalService.deleteProductEntries(group.getGroupId());
  wikiNodeLocalService.deleteNodes(group.getGroupId());
  List<ResourcePermission> resourcePermissions=resourcePermissionPersistence.findByC_P(group.getCompanyId(),String.valueOf(group.getGroupId()));
  for (  ResourcePermission resourcePermission : resourcePermissions) {
    resourcePermissionLocalService.deleteResourcePermission(resourcePermission);
  }
  if (!group.isStagingGroup() && (group.isOrganization() || group.isRegularSite())) {
    resourceLocalService.deleteResource(group.getCompanyId(),Group.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,group.getGroupId());
  }
  if (group.isOrganization() && group.isSite()) {
    group.setSite(false);
    groupPersistence.update(group,false);
  }
 else {
    groupPersistence.remove(group);
  }
  PermissionCacheUtil.clearCache();
  return group;
}
