{
  boolean parentGroupIdEquals=true;
  if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
    parentGroupIdEquals=false;
  }
  params=new LinkedHashMap<>(params);
  Boolean active=(Boolean)params.remove("active");
  List<Long> excludedGroupIds=(List<Long>)params.remove("excludedGroupIds");
  List<Group> groupsTree=(List<Group>)params.remove("groupsTree");
  Boolean manualMembership=(Boolean)params.remove("manualMembership");
  Integer membershipRestriction=(Integer)params.remove("membershipRestriction");
  Boolean site=(Boolean)params.remove("site");
  List<Integer> types=(List<Integer>)params.remove("types");
  Collection<Group> groups=new HashSet<>();
  Long userId=(Long)params.remove("usersGroups");
  for (  long classNameId : classNameIds) {
    groups.addAll(groupPersistence.findByC_C(companyId,classNameId));
  }
  Iterator<Group> iterator=groups.iterator();
  while (iterator.hasNext()) {
    Group group=iterator.next();
    long liveGroupId=group.getLiveGroupId();
    if (liveGroupId != 0) {
      iterator.remove();
      continue;
    }
    long groupParentGroupId=group.getParentGroupId();
    if ((parentGroupIdEquals && (groupParentGroupId != parentGroupId)) || (!parentGroupIdEquals && (groupParentGroupId == parentGroupId))) {
      iterator.remove();
      continue;
    }
    String groupKey=group.getGroupKey();
    if (groupKey.equals(GroupConstants.CONTROL_PANEL) || groupKey.equals(GroupConstants.USER_PERSONAL_PANEL)) {
      iterator.remove();
      continue;
    }
    boolean containsName=matches(group.getNameCurrentValue(),names);
    boolean containsDescription=matches(group.getDescriptionCurrentValue(),descriptions);
    if ((andOperator && (!containsName || !containsDescription)) || (!andOperator && !containsName && !containsDescription)) {
      iterator.remove();
      continue;
    }
    if (active != null) {
      if (active != group.isActive()) {
        iterator.remove();
        continue;
      }
    }
    if ((excludedGroupIds != null) && excludedGroupIds.contains(group.getGroupId())) {
      iterator.remove();
      continue;
    }
    if (groupsTree != null) {
      String treePath=group.getTreePath();
      boolean matched=false;
      for (      Group groupTree : groupsTree) {
        String groupTreePath=StringUtil.quote(String.valueOf(groupTree.getGroupId()),StringPool.SLASH);
        if (treePath.contains(groupTreePath)) {
          matched=true;
          break;
        }
      }
      if (!matched) {
        iterator.remove();
        continue;
      }
    }
    if ((manualMembership != null) && (manualMembership != group.isManualMembership())) {
      iterator.remove();
      continue;
    }
    if ((membershipRestriction != null) && (membershipRestriction != group.getMembershipRestriction())) {
      iterator.remove();
      continue;
    }
    if (site != null) {
      if (site != group.isSite()) {
        iterator.remove();
        continue;
      }
    }
    int type=group.getType();
    if (type == 4) {
      iterator.remove();
      continue;
    }
    if ((types != null) && !types.contains(type)) {
      iterator.remove();
      continue;
    }
  }
  List<?> rolePermissions=(List<?>)params.remove("rolePermissions");
  if (rolePermissions != null) {
    String resourceName=(String)rolePermissions.get(0);
    Integer resourceScope=(Integer)rolePermissions.get(1);
    String resourceActionId=(String)rolePermissions.get(2);
    Long resourceRoleId=(Long)rolePermissions.get(3);
    ResourceAction resourceAction=resourceActionLocalService.fetchResourceAction(resourceName,resourceActionId);
    if (resourceAction != null) {
      Set<Group> rolePermissionsGroups=new HashSet<>();
      if (resourceBlockLocalService.isSupported(resourceName)) {
        for (        ResourceTypePermission resourceTypePermission : resourceTypePermissionPersistence.findByRoleId(resourceRoleId)) {
          if ((resourceTypePermission.getCompanyId() == companyId) && resourceName.equals(resourceTypePermission.getName()) && resourceTypePermission.hasAction(resourceAction)) {
            Group group=groupPersistence.fetchByPrimaryKey(resourceTypePermission.getGroupId());
            if (group != null) {
              rolePermissionsGroups.add(group);
            }
          }
        }
      }
 else {
        for (        ResourcePermission resourcePermission : resourcePermissionPersistence.findByC_N_S(companyId,resourceName,resourceScope)) {
          if ((resourcePermission.getRoleId() == resourceRoleId) && resourcePermission.hasAction(resourceAction)) {
            Group group=groupPersistence.fetchByPrimaryKey(GetterUtil.getLong(resourcePermission.getPrimKey()));
            if (group != null) {
              rolePermissionsGroups.add(group);
            }
          }
        }
      }
      groups.retainAll(rolePermissionsGroups);
    }
  }
  if (userId == null) {
    return groups;
  }
  Set<Group> joinedGroups=new HashSet<>(userPersistence.getGroups(userId));
  boolean inherit=GetterUtil.getBoolean(params.remove("inherit"),true);
  if (inherit) {
    long[] organizationIds=userPersistence.getOrganizationPrimaryKeys(userId);
    for (    long organizationId : organizationIds) {
      for (      Group group : groups) {
        if (organizationId == group.getClassPK()) {
          joinedGroups.add(group);
        }
      }
    }
    for (    long organizationId : organizationIds) {
      joinedGroups.addAll(organizationPersistence.getGroups(organizationId));
    }
    long[] userGroupIds=userPersistence.getUserGroupPrimaryKeys(userId);
    for (    long userGroupId : userGroupIds) {
      joinedGroups.addAll(userGroupPersistence.getGroups(userGroupId));
    }
  }
  if (_log.isDebugEnabled() && !params.isEmpty()) {
    _log.debug("Unprocessed parameters " + MapUtil.toString(params));
  }
  Long roleId=(Long)params.remove("groupsRoles");
  if (roleId != null) {
    joinedGroups.retainAll(rolePersistence.getGroups(roleId));
  }
  if (joinedGroups.size() > groups.size()) {
    groups.retainAll(joinedGroups);
    return groups;
  }
 else {
    joinedGroups.retainAll(groups);
    return joinedGroups;
  }
}
