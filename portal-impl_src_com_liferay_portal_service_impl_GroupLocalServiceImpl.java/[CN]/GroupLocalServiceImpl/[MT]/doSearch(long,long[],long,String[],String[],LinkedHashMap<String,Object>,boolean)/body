{
  boolean parentGroupIdEquals=true;
  if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
    parentGroupIdEquals=false;
  }
  params=new LinkedHashMap<String,Object>(params);
  Boolean active=(Boolean)params.remove("active");
  List<Long> excludedGroupIds=(List<Long>)params.remove("excludedGroupIds");
  List<Group> groupsTree=(List<Group>)params.remove("groupsTree");
  Boolean manualMembership=(Boolean)params.remove("manualMembership");
  Integer membershipRestriction=(Integer)params.remove("membershipRestriction");
  Boolean site=(Boolean)params.remove("site");
  List<Integer> types=(List<Integer>)params.remove("types");
  List<Group> groups=new ArrayList<Group>();
  for (  long classNameId : classNameIds) {
    groups.addAll(groupPersistence.findByC_C(companyId,classNameId));
  }
  Iterator<Group> iterator=groups.iterator();
  while (iterator.hasNext()) {
    Group group=iterator.next();
    long liveGroupId=group.getLiveGroupId();
    if (liveGroupId != 0) {
      iterator.remove();
      continue;
    }
    long groupParentGroupId=group.getParentGroupId();
    if ((parentGroupIdEquals && (groupParentGroupId != parentGroupId)) || (!parentGroupIdEquals && (groupParentGroupId == parentGroupId))) {
      iterator.remove();
      continue;
    }
    String name=group.getName();
    if (name.equals(GroupConstants.CONTROL_PANEL)) {
      iterator.remove();
      continue;
    }
    boolean containsName=matches(name,names);
    boolean containsDescription=matches(group.getDescription(),descriptions);
    if ((andOperator && (!containsName || !containsDescription)) || (!andOperator && (!containsName && !containsDescription))) {
      iterator.remove();
      continue;
    }
    if (active != null) {
      if (active != group.isActive()) {
        iterator.remove();
        continue;
      }
    }
    if ((excludedGroupIds != null) && excludedGroupIds.contains(group.getGroupId())) {
      iterator.remove();
      continue;
    }
    if (groupsTree != null) {
      String treePath=group.getTreePath();
      boolean matched=false;
      for (      Group groupTree : groupsTree) {
        String groupTreePath=StringUtil.quote(String.valueOf(groupTree.getGroupId()),StringPool.SLASH);
        if (treePath.contains(groupTreePath)) {
          matched=true;
          break;
        }
      }
      if (!matched) {
        iterator.remove();
        continue;
      }
    }
    if ((manualMembership != null) && (manualMembership != group.isManualMembership())) {
      iterator.remove();
      continue;
    }
    if ((membershipRestriction != null) && (membershipRestriction != group.getMembershipRestriction())) {
      iterator.remove();
      continue;
    }
    if (site != null) {
      if (site != group.isSite()) {
        iterator.remove();
        continue;
      }
    }
    int type=group.getType();
    if (type == 4) {
      iterator.remove();
      continue;
    }
    if ((types != null) && !types.contains(type)) {
      iterator.remove();
      continue;
    }
  }
  List<?> rolePermissions=(List<?>)params.remove("rolePermissions");
  if (rolePermissions != null) {
    String resourceName=(String)rolePermissions.get(0);
    Integer resourceScope=(Integer)rolePermissions.get(1);
    String resourceActionId=(String)rolePermissions.get(2);
    Long resourceRoleId=(Long)rolePermissions.get(3);
    ResourceAction resourceAction=resourceActionLocalService.fetchResourceAction(resourceName,resourceActionId);
    if (resourceAction != null) {
      long bitwiseValue=resourceAction.getBitwiseValue();
      if (resourceBlockLocalService.isSupported(resourceName)) {
        iterator=groups.iterator();
        while (iterator.hasNext()) {
          Group group=iterator.next();
          ResourceTypePermission resourceTypePermission=resourceTypePermissionPersistence.fetchByC_G_N_R(companyId,group.getGroupId(),resourceName,resourceRoleId);
          if ((resourceTypePermission == null) || ((resourceTypePermission.getActionIds() & bitwiseValue) == 0)) {
            iterator.remove();
          }
        }
      }
 else {
        iterator=groups.iterator();
        while (iterator.hasNext()) {
          Group group=iterator.next();
          ResourcePermission resourcePermission=resourcePermissionPersistence.fetchByC_N_S_P_R(companyId,resourceName,resourceScope,String.valueOf(group.getGroupId()),resourceRoleId);
          if ((resourcePermission == null) || ((resourcePermission.getActionIds() & bitwiseValue) == 0)) {
            iterator.remove();
          }
        }
      }
    }
  }
  Long userId=(Long)params.remove("usersGroups");
  if (userId == null) {
    return groups;
  }
  Set<Group> resultGroups=new HashSet<Group>(groups);
  Long roleId=(Long)params.remove("groupsRoles");
  if (roleId != null) {
    resultGroups.retainAll(rolePersistence.getGroups(roleId));
  }
  resultGroups.retainAll(userPersistence.getGroups(userId));
  boolean inherit=GetterUtil.getBoolean(params.remove("inherit"),true);
  if (inherit) {
    List<Organization> organizations=userPersistence.getOrganizations(userId);
    for (    Organization organization : organizations) {
      long organizationId=organization.getOrganizationId();
      for (      Group group : groups) {
        if (organizationId == group.getClassPK()) {
          resultGroups.add(group);
        }
      }
    }
    for (    Organization organization : organizations) {
      List<Group> tempGroups=new ArrayList<Group>(groups);
      tempGroups.retainAll(organizationPersistence.getGroups(organization.getOrganizationId()));
      if (!tempGroups.isEmpty()) {
        resultGroups.addAll(tempGroups);
      }
    }
    List<UserGroup> userGroups=userPersistence.getUserGroups(userId);
    for (    UserGroup userGroup : userGroups) {
      List<Group> tempGroups=new ArrayList<Group>(groups);
      tempGroups.retainAll(userGroupPersistence.getGroups(userGroup.getUserGroupId()));
      if (!tempGroups.isEmpty()) {
        resultGroups.addAll(tempGroups);
      }
    }
  }
  if (_log.isDebugEnabled() && !params.isEmpty()) {
    _log.debug("Unprocessed parameters " + MapUtil.toString(params));
  }
  return new ArrayList<Group>(resultGroups);
}
