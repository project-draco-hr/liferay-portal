{
  DynamicQuery dynamicQuery=DynamicQueryFactoryUtil.forClass(Group.class);
  dynamicQuery.setProjection(ProjectionFactoryUtil.property("groupId"));
  Property companyIdProperty=PropertyFactoryUtil.forName("companyId");
  dynamicQuery.add(companyIdProperty.eq(companyId));
  Property parentGroupIdProperty=PropertyFactoryUtil.forName("parentGroupId");
  dynamicQuery.add(parentGroupIdProperty.eq(parentGroupId));
  int start=0;
  while (true) {
    int end=start + PropsValues.BULK_OPERATIONS_CHUNK_SIZE;
    dynamicQuery.setLimit(start,end);
    List<Long> groupIds=(List<Long>)dynamicQuery(dynamicQuery);
    if (groupIds.isEmpty()) {
      break;
    }
    for (    Long groupId : groupIds) {
      path.append(groupId);
      path.append(StringPool.SLASH);
      buildTreePath(companyId,groupId,path);
      Group group=groupPersistence.findByPrimaryKey(groupId);
      group.setTreePath(path.toString());
      groupPersistence.update(group);
      path.setIndex(path.index() - 2);
    }
    start=end;
  }
}
