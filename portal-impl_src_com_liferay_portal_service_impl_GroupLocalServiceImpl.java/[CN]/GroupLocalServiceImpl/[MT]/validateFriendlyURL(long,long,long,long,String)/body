{
  Company company=companyPersistence.findByPrimaryKey(companyId);
  if (company.isSystem()) {
    return;
  }
  if (Validator.isNull(friendlyURL)) {
    return;
  }
  int exceptionType=LayoutImpl.validateFriendlyURL(friendlyURL);
  if (exceptionType != -1) {
    throw new GroupFriendlyURLException(exceptionType);
  }
  Group group=groupPersistence.fetchByC_F(companyId,friendlyURL);
  if ((group != null) && (group.getGroupId() != groupId)) {
    throw new GroupFriendlyURLException(GroupFriendlyURLException.DUPLICATE);
  }
  String groupIdFriendlyURL=friendlyURL.substring(1);
  if (Validator.isNumber(groupIdFriendlyURL)) {
    long groupClassNameId=PortalUtil.getClassNameId(Group.class);
    if (((classNameId != groupClassNameId) && (!groupIdFriendlyURL.equals(String.valueOf(classPK)))) || ((classNameId == groupClassNameId) && (!groupIdFriendlyURL.equals(String.valueOf(groupId))))) {
      GroupFriendlyURLException gfurle=new GroupFriendlyURLException(GroupFriendlyURLException.POSSIBLE_DUPLICATE);
      gfurle.setKeywordConflict(groupIdFriendlyURL);
      throw gfurle;
    }
  }
  String screenName=friendlyURL.substring(1);
  User user=userPersistence.fetchByC_SN(companyId,screenName);
  if (user != null) {
    long userClassNameId=PortalUtil.getClassNameId(User.class);
    if ((classNameId == userClassNameId) && (classPK == user.getUserId())) {
    }
 else {
      throw new GroupFriendlyURLException(GroupFriendlyURLException.DUPLICATE);
    }
  }
  if (StringUtil.count(friendlyURL,StringPool.SLASH) > 1) {
    throw new GroupFriendlyURLException(GroupFriendlyURLException.TOO_DEEP);
  }
}
