{
  Deque<Object[]> traces=new LinkedList<Object[]>();
  traces.push(new Object[]{GroupConstants.DEFAULT_PARENT_GROUP_ID,StringPool.SLASH,0L});
  Object[] trace=null;
  while ((trace=traces.poll()) != null) {
    Long parentGroupId=(Long)trace[0];
    String parentPath=(String)trace[1];
    Long previousGroupId=(Long)trace[2];
    List<Long> childGroupIds=groupFinder.findByC_P(companyId,parentGroupId,previousGroupId,PropsValues.BULK_OPERATIONS_CHUNK_SIZE);
    if (childGroupIds.isEmpty()) {
      continue;
    }
    if (childGroupIds.size() == PropsValues.BULK_OPERATIONS_CHUNK_SIZE) {
      trace[2]=childGroupIds.get(childGroupIds.size() - 1);
      traces.push(trace);
    }
    for (    long childGroupId : childGroupIds) {
      String path=parentPath.concat(String.valueOf(childGroupId)).concat(StringPool.SLASH);
      Group group=groupPersistence.findByPrimaryKey(childGroupId);
      group.setTreePath(path);
      groupPersistence.update(group);
      traces.push(new Object[]{childGroupId,path,0L});
    }
  }
}
