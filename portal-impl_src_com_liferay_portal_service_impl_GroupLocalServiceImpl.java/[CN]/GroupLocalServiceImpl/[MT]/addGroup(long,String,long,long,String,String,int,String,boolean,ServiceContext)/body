{
  User user=userPersistence.findByPrimaryKey(userId);
  className=GetterUtil.getString(className);
  long classNameId=PortalUtil.getClassNameId(className);
  String friendlyName=name;
  if (className.equals(Organization.class.getName())) {
    Organization organization=organizationPersistence.findByPrimaryKey(classPK);
    friendlyName=organization.getName();
    name=String.valueOf(classPK);
  }
  long groupId=0;
  while (true) {
    groupId=counterLocalService.increment();
    User userScreenName=userPersistence.fetchByC_SN(user.getCompanyId(),String.valueOf(groupId));
    if (userScreenName == null) {
      break;
    }
  }
  boolean staging=isStaging(serviceContext);
  long groupClassNameId=PortalUtil.getClassNameId(Group.class);
  if ((classNameId <= 0) || className.equals(Group.class.getName())) {
    className=Group.class.getName();
    classNameId=groupClassNameId;
    classPK=groupId;
  }
 else   if (className.equals(Organization.class.getName()) && staging) {
    classPK=liveGroupId;
  }
 else {
    name=String.valueOf(classPK);
  }
  long parentGroupId=GroupConstants.DEFAULT_PARENT_GROUP_ID;
  if (className.equals(Layout.class.getName())) {
    Layout layout=layoutLocalService.getLayout(classPK);
    parentGroupId=layout.getGroupId();
  }
  friendlyURL=getFriendlyURL(user.getCompanyId(),groupId,classNameId,classPK,friendlyName,friendlyURL);
  if (staging) {
    name=name.concat(" (Staging)");
    friendlyURL=friendlyURL.concat("-staging");
  }
  if ((classNameId <= 0) || className.equals(Group.class.getName())) {
    validateName(groupId,user.getCompanyId(),name);
  }
  validateFriendlyURL(user.getCompanyId(),groupId,classNameId,classPK,friendlyURL);
  Group group=groupPersistence.create(groupId);
  group.setCompanyId(user.getCompanyId());
  group.setCreatorUserId(userId);
  group.setClassNameId(classNameId);
  group.setClassPK(classPK);
  group.setParentGroupId(parentGroupId);
  group.setLiveGroupId(liveGroupId);
  group.setName(name);
  group.setDescription(description);
  group.setType(type);
  group.setFriendlyURL(friendlyURL);
  group.setActive(active);
  groupPersistence.update(group,false);
  layoutSetLocalService.addLayoutSet(groupId,true);
  layoutSetLocalService.addLayoutSet(groupId,false);
  if ((classNameId == groupClassNameId) && !user.isDefaultUser()) {
    resourceLocalService.addResources(group.getCompanyId(),0,0,Group.class.getName(),group.getGroupId(),false,false,false);
    Role role=roleLocalService.getRole(group.getCompanyId(),RoleConstants.COMMUNITY_OWNER);
    userGroupRoleLocalService.addUserGroupRoles(userId,groupId,new long[]{role.getRoleId()});
    userLocalService.addGroupUsers(group.getGroupId(),new long[]{userId});
    if (serviceContext != null) {
      updateAsset(userId,group,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
    }
  }
 else   if (className.equals(Organization.class.getName()) && !user.isDefaultUser()) {
    resourceLocalService.addResources(group.getCompanyId(),0,0,Group.class.getName(),group.getGroupId(),false,false,false);
  }
  return group;
}
