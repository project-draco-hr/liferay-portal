{
  if (Validator.isNull(PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY)) {
    if (_log.isDebugEnabled()) {
      _log.debug("Skipping passwords upgrade scheme because " + PropsKeys.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY + " is blank");
    }
    try {
      return _parentPasswordEncryptor.encrypt(algorithm,plainTextPassword,encryptedPassword);
    }
 catch (    Exception e) {
      StringBundler sb=new StringBundler(5);
      sb.append("Password upgrade was not successfully configured. ");
      sb.append("Please set the property ");
      sb.append("\"passwords.encryption.algorithm.legacy\" with the");
      sb.append("previous password encryption algorithm and ");
      sb.append("restart.");
      throw new PwdEncryptorException(sb.toString(),e);
    }
  }
  if (_log.isDebugEnabled()) {
    String message="Using legacy detection scheme for algorithm " + algorithm + " with current password ";
    if (Validator.isNull(encryptedPassword)) {
      message+="empty";
    }
 else {
      message+="provided";
    }
    _log.debug(message);
  }
  boolean prependAlgorithm=true;
  if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) != CharPool.OPEN_CURLY_BRACE)) {
    algorithm=PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY;
    prependAlgorithm=false;
    if (_log.isDebugEnabled()) {
      _log.debug("Using legacy algorithm " + algorithm);
    }
  }
 else   if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) == CharPool.OPEN_CURLY_BRACE)) {
    int index=encryptedPassword.indexOf(CharPool.CLOSE_CURLY_BRACE);
    if (index > 0) {
      algorithm=encryptedPassword.substring(1,index);
      encryptedPassword=encryptedPassword.substring(index + 1);
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Upgraded password to use algorithm " + algorithm);
    }
  }
  String newEncryptedPassword=_parentPasswordEncryptor.encrypt(algorithm,plainTextPassword,encryptedPassword);
  if (!prependAlgorithm) {
    if (_log.isDebugEnabled()) {
      _log.debug("Generated password without algorithm prefix using " + algorithm);
    }
    return newEncryptedPassword;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Generated password with algorithm prefix using " + algorithm);
  }
  StringBundler sb=new StringBundler(4);
  sb.append(StringPool.OPEN_CURLY_BRACE);
  sb.append(getAlgorithmName(algorithm));
  sb.append(StringPool.CLOSE_CURLY_BRACE);
  sb.append(newEncryptedPassword);
  return sb.toString();
}
