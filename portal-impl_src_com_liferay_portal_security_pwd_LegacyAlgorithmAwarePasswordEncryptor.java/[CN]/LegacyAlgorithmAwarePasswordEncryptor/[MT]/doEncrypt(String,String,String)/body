{
  if (Validator.isNull(PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY)) {
    if (_log.isDebugEnabled()) {
      _log.debug("Skipping passwords upgrade scheme, " + PropsKeys.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY + " is null.");
    }
    return _parentPasswordEncryptor.encrypt(algorithm,clearTextPassword,currentEncryptedPassword);
  }
  if (_log.isDebugEnabled()) {
    boolean isCEPNull=Validator.isNull(currentEncryptedPassword);
    _log.debug("Using legacy detection scheme for algorithm " + algorithm + " with current password "+ (isCEPNull ? "empty" : "provided"));
  }
  boolean prependAlgorithm=true;
  if (Validator.isNotNull(currentEncryptedPassword) && (currentEncryptedPassword.charAt(0) != CharPool.OPEN_CURLY_BRACE)) {
    algorithm=PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY;
    prependAlgorithm=false;
    if (_log.isDebugEnabled()) {
      _log.debug("Using legacy algorithm " + algorithm);
    }
  }
 else   if (Validator.isNotNull(currentEncryptedPassword) && (currentEncryptedPassword.charAt(0) == CharPool.OPEN_CURLY_BRACE)) {
    int endPos=currentEncryptedPassword.indexOf(CharPool.CLOSE_CURLY_BRACE);
    if (endPos > 0) {
      algorithm=currentEncryptedPassword.substring(1,endPos);
      currentEncryptedPassword=currentEncryptedPassword.substring(endPos + 1);
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Upgraded password, using new algorithm " + algorithm);
    }
  }
  String encryptedPassword=_parentPasswordEncryptor.encrypt(algorithm,clearTextPassword,currentEncryptedPassword);
  if (!prependAlgorithm) {
    if (_log.isDebugEnabled()) {
      _log.debug("Generated password without algorithm prefix using " + algorithm);
    }
    return encryptedPassword;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Generated password with algorithm prefix using " + algorithm);
  }
  StringBuilder result=new StringBuilder(4);
  result.append(StringPool.OPEN_CURLY_BRACE);
  result.append(getAlgorithmName(algorithm));
  result.append(StringPool.CLOSE_CURLY_BRACE);
  result.append(encryptedPassword);
  return result.toString();
}
