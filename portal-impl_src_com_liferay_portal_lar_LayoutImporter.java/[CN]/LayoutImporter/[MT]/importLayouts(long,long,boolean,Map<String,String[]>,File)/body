{
  boolean deleteMissingLayouts=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.DELETE_MISSING_LAYOUTS,Boolean.TRUE.booleanValue());
  boolean deletePortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.DELETE_PORTLET_DATA);
  boolean importCategories=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.CATEGORIES);
  boolean importPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean importUserPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean importPortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA);
  boolean importPortletSetup=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_SETUP);
  boolean importPortletArchivedSetups=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);
  boolean importPortletUserPreferences=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);
  boolean importTheme=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.THEME);
  boolean layoutSetPrototypeInherited=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.LAYOUT_SET_PROTOTYPE_INHERITED);
  boolean publishToRemote=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PUBLISH_TO_REMOTE);
  String layoutsImportMode=MapUtil.getString(parameterMap,PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE,PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_MERGE_BY_LAYOUT_ID);
  String portletsMergeMode=MapUtil.getString(parameterMap,PortletDataHandlerKeys.PORTLETS_MERGE_MODE,PortletDataHandlerKeys.PORTLETS_MERGE_MODE_REPLACE);
  String userIdStrategy=MapUtil.getString(parameterMap,PortletDataHandlerKeys.USER_ID_STRATEGY);
  if (_log.isDebugEnabled()) {
    _log.debug("Delete portlet data " + deletePortletData);
    _log.debug("Import categories " + importCategories);
    _log.debug("Import permissions " + importPermissions);
    _log.debug("Import user permissions " + importUserPermissions);
    _log.debug("Import portlet data " + importPortletData);
    _log.debug("Import portlet setup " + importPortletSetup);
    _log.debug("Import portlet archived setups " + importPortletArchivedSetups);
    _log.debug("Import portlet user preferences " + importPortletUserPreferences);
    _log.debug("Import theme " + importTheme);
  }
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  LayoutCache layoutCache=new LayoutCache();
  LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(groupId,privateLayout);
  long companyId=layoutSet.getCompanyId();
  User user=UserUtil.findByPrimaryKey(userId);
  UserIdStrategy strategy=_portletImporter.getUserIdStrategy(user,userIdStrategy);
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(file);
  PortletDataContext portletDataContext=new PortletDataContextImpl(companyId,groupId,parameterMap,new HashSet<String>(),strategy,zipReader);
  portletDataContext.setPortetDataContextListener(new PortletDataContextListenerImpl(portletDataContext));
  portletDataContext.setPrivateLayout(privateLayout);
  Element rootElement=null;
  InputStream themeZip=null;
  String xml=portletDataContext.getZipEntryAsString("/manifest.xml");
  if (xml == null) {
    throw new LARFileException("manifest.xml not found in the LAR");
  }
  try {
    Document document=SAXReaderUtil.read(xml);
    rootElement=document.getRootElement();
  }
 catch (  Exception e) {
    throw new LARFileException(e);
  }
  Element headerElement=rootElement.element("header");
  int buildNumber=ReleaseInfo.getBuildNumber();
  int importBuildNumber=GetterUtil.getInteger(headerElement.attributeValue("build-number"));
  if (buildNumber != importBuildNumber) {
    throw new LayoutImportException("LAR build number " + importBuildNumber + " does not match "+ "portal build number "+ buildNumber);
  }
  String larType=headerElement.attributeValue("type");
  if (!larType.equals("layout-set")) {
    throw new LARTypeException("Invalid type of LAR file (" + larType + ")");
  }
  long sourceGroupId=GetterUtil.getLong(headerElement.attributeValue("group-id"));
  portletDataContext.setSourceGroupId(sourceGroupId);
  String layoutSetPrototypeUuid=headerElement.attributeValue("layout-set-prototype-uuid");
  if (layoutSetPrototypeInherited && Validator.isNotNull(layoutSetPrototypeUuid)) {
    if (publishToRemote) {
      ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
      importLayoutSetPrototype(portletDataContext,user,layoutSetPrototypeUuid,serviceContext);
    }
    UnicodeProperties settingsProperties=layoutSet.getSettingsProperties();
    settingsProperties.setProperty("layoutSetPrototypeUuid",layoutSetPrototypeUuid);
    layoutSet.setSettingsProperties(settingsProperties);
    LayoutSetLocalServiceUtil.updateSettings(layoutSet.getGroupId(),layoutSet.isPrivateLayout(),settingsProperties.toString());
  }
  if (importTheme) {
    themeZip=portletDataContext.getZipEntryAsInputStream("theme.zip");
  }
  String themeId=layoutSet.getThemeId();
  Attribute themeIdAttribute=headerElement.attribute("theme-id");
  if (themeIdAttribute != null) {
    themeId=themeIdAttribute.getValue();
  }
  String colorSchemeId=layoutSet.getColorSchemeId();
  Attribute colorSchemeIdAttribute=headerElement.attribute("color-scheme-id");
  if (colorSchemeIdAttribute != null) {
    colorSchemeId=colorSchemeIdAttribute.getValue();
  }
  String css=GetterUtil.getString(headerElement.elementText("css"));
  boolean useThemeZip=false;
  if (themeZip != null) {
    String importThemeId=importTheme(layoutSet,themeZip);
    if (importThemeId != null) {
      themeId=importThemeId;
      colorSchemeId=ColorSchemeImpl.getDefaultRegularColorSchemeId();
      useThemeZip=true;
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Importing theme takes " + stopWatch.getTime() + " ms");
    }
  }
  boolean wapTheme=false;
  LayoutSetLocalServiceUtil.updateLookAndFeel(groupId,privateLayout,themeId,colorSchemeId,css,wapTheme);
  if (importPermissions) {
    _permissionImporter.readPortletDataPermissions(portletDataContext);
  }
  if (importCategories) {
    _portletImporter.readAssetCategories(portletDataContext);
  }
  _portletImporter.readAssetTags(portletDataContext);
  _portletImporter.readComments(portletDataContext);
  _portletImporter.readExpandoTables(portletDataContext);
  _portletImporter.readLocks(portletDataContext);
  _portletImporter.readRatingsEntries(portletDataContext);
  List<Layout> previousLayouts=LayoutUtil.findByG_P(groupId,privateLayout);
  List<Layout> newLayouts=new ArrayList<Layout>();
  Set<Long> newLayoutIds=new HashSet<Long>();
  Map<Long,Layout> newLayoutsMap=(Map<Long,Layout>)portletDataContext.getNewPrimaryKeysMap(Layout.class);
  Element layoutsElement=rootElement.element("layouts");
  List<Element> layoutElements=layoutsElement.elements("layout");
  if (_log.isDebugEnabled()) {
    if (layoutElements.size() > 0) {
      _log.debug("Importing layouts");
    }
  }
  for (  Element layoutElement : layoutElements) {
    importLayout(portletDataContext,user,layoutCache,previousLayouts,newLayouts,newLayoutsMap,newLayoutIds,portletsMergeMode,themeId,colorSchemeId,layoutsImportMode,privateLayout,importPermissions,importUserPermissions,useThemeZip,rootElement,layoutElement);
  }
  Element portletsElement=rootElement.element("portlets");
  List<Element> portletElements=portletsElement.elements("portlet");
  if (deletePortletData) {
    if (_log.isDebugEnabled()) {
      if (portletElements.size() > 0) {
        _log.debug("Deleting portlet data");
      }
    }
    for (    Element portletElement : portletElements) {
      String portletId=portletElement.attributeValue("portlet-id");
      long layoutId=GetterUtil.getLong(portletElement.attributeValue("layout-id"));
      long plid=newLayoutsMap.get(layoutId).getPlid();
      portletDataContext.setPlid(plid);
      _portletImporter.deletePortletData(portletDataContext,portletId,plid);
    }
  }
  if (_log.isDebugEnabled()) {
    if (portletElements.size() > 0) {
      _log.debug("Importing portlets");
    }
  }
  for (  Element portletElement : portletElements) {
    String portletPath=portletElement.attributeValue("path");
    String portletId=portletElement.attributeValue("portlet-id");
    long layoutId=GetterUtil.getLong(portletElement.attributeValue("layout-id"));
    long plid=newLayoutsMap.get(layoutId).getPlid();
    long oldPlid=GetterUtil.getLong(portletElement.attributeValue("old-plid"));
    Portlet portlet=PortletLocalServiceUtil.getPortletById(portletDataContext.getCompanyId(),portletId);
    if (!portlet.isActive() || portlet.isUndeployedPortlet()) {
      continue;
    }
    Layout layout=null;
    try {
      layout=LayoutUtil.findByPrimaryKey(plid);
    }
 catch (    NoSuchLayoutException nsle) {
      continue;
    }
    portletDataContext.setPlid(plid);
    portletDataContext.setOldPlid(oldPlid);
    Document portletDocument=SAXReaderUtil.read(portletDataContext.getZipEntryAsString(portletPath));
    portletElement=portletDocument.getRootElement();
    _portletImporter.importPortletPreferences(portletDataContext,layoutSet.getCompanyId(),layout.getGroupId(),layout,null,portletElement,importPortletSetup,importPortletArchivedSetups,importPortletUserPreferences,false);
    String scopeType=GetterUtil.getString(portletElement.attributeValue("scope-type"));
    String scopeLayoutUuid=GetterUtil.getString(portletElement.attributeValue("scope-layout-uuid"));
    portletDataContext.setScopeType(scopeType);
    portletDataContext.setScopeLayoutUuid(scopeLayoutUuid);
    Element portletDataElement=portletElement.element("portlet-data");
    if (importPortletData && (portletDataElement != null)) {
      _portletImporter.importPortletData(portletDataContext,portletId,plid,portletDataElement);
    }
    if (importPermissions) {
      _permissionImporter.importPortletPermissions(layoutCache,companyId,groupId,userId,layout,portletElement,portletId,importUserPermissions);
    }
    _portletImporter.importPortletPreferences(portletDataContext,layoutSet.getCompanyId(),groupId,null,null,portletElement,importPortletSetup,importPortletArchivedSetups,importPortletUserPreferences,false);
  }
  if (deleteMissingLayouts) {
    deleteMissingLayouts(groupId,privateLayout,newLayoutIds,previousLayouts);
  }
  LayoutSetLocalServiceUtil.updatePageCount(groupId,privateLayout);
  if (_log.isInfoEnabled()) {
    _log.info("Importing layouts takes " + stopWatch.getTime() + " ms");
  }
  GroupLocalServiceUtil.updateSite(groupId,true);
  for (  Layout layout : newLayouts) {
    UnicodeProperties typeSettingsProperties=layout.getTypeSettingsProperties();
    String articleId=typeSettingsProperties.getProperty("article-id");
    if (Validator.isNotNull(articleId)) {
      Map<String,String> articleIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalArticle.class);
      typeSettingsProperties.setProperty("article-id",MapUtil.getString(articleIds,articleId,articleId));
      LayoutUtil.update(layout,false);
    }
  }
  zipReader.close();
}
