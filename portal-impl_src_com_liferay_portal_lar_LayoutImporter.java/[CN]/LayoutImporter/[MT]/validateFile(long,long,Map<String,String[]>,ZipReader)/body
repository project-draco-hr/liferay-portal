{
  String xml=zipReader.getEntryAsString("/manifest.xml");
  if (xml == null) {
    throw new LARFileException("manifest.xml not found in the LAR");
  }
  Element rootElement=null;
  try {
    Document document=SAXReaderUtil.read(xml);
    rootElement=document.getRootElement();
  }
 catch (  Exception e) {
    throw new LARFileException(e);
  }
  int buildNumber=ReleaseInfo.getBuildNumber();
  Element headerElement=rootElement.element("header");
  int importBuildNumber=GetterUtil.getInteger(headerElement.attributeValue("build-number"));
  if (buildNumber != importBuildNumber) {
    throw new LayoutImportException("LAR build number " + importBuildNumber + " does not match "+ "portal build number "+ buildNumber);
  }
  String larType=headerElement.attributeValue("type");
  if (!larType.equals("layout-prototype") && !larType.equals("layout-set") && !larType.equals("layout-set-prototype")) {
    throw new LARTypeException(larType);
  }
  Group group=GroupLocalServiceUtil.fetchGroup(groupId);
  String layoutsImportMode=MapUtil.getString(parameterMap,PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE);
  if (larType.equals("layout-prototype") && !group.isLayoutPrototype() && !layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {
    throw new LARTypeException("A page template can only be imported to a page template");
  }
  if (larType.equals("layout-set")) {
    if (group.isLayoutPrototype() || group.isLayoutSetPrototype()) {
      throw new LARTypeException("A site can only be imported to a site");
    }
    long sourceCompanyGroupId=GetterUtil.getLong(headerElement.attributeValue("company-group-id"));
    long sourceGroupId=GetterUtil.getLong(headerElement.attributeValue("group-id"));
    boolean companySourceGroup=false;
    if (sourceCompanyGroupId == sourceGroupId) {
      companySourceGroup=true;
    }
 else     if (group.isStaged() || group.hasStagingGroup()) {
      Group sourceGroup=GroupLocalServiceUtil.fetchGroup(sourceGroupId);
      companySourceGroup=sourceGroup.isCompany();
    }
    if (group.isCompany() ^ companySourceGroup) {
      throw new LARTypeException("A company site can only be imported to a company site");
    }
  }
  if (larType.equals("layout-set-prototype") && !group.isLayoutSetPrototype() && !layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {
    throw new LARTypeException("A site template can only be imported to a site template");
  }
  Locale[] sourceAvailableLocales=LocaleUtil.fromLanguageIds(StringUtil.split(headerElement.attributeValue("available-locales")));
  for (  Locale sourceAvailableLocale : sourceAvailableLocales) {
    if (!LanguageUtil.isAvailableLocale(groupId,sourceAvailableLocale)) {
      LocaleException le=new LocaleException(LocaleException.TYPE_EXPORT_IMPORT);
      le.setSourceAvailableLocales(sourceAvailableLocales);
      le.setTargetAvailableLocales(LanguageUtil.getAvailableLocales(groupId));
      throw le;
    }
  }
  Element layoutsElement=rootElement.element(Layout.class.getSimpleName());
  validateLayoutPrototypes(companyId,layoutsElement);
}
