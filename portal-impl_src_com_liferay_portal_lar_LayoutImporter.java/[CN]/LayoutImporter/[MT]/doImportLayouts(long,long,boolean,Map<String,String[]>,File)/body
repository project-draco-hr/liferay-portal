{
  boolean deleteMissingLayouts=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.DELETE_MISSING_LAYOUTS,Boolean.TRUE.booleanValue());
  boolean deletePortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.DELETE_PORTLET_DATA);
  boolean importCategories=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.CATEGORIES);
  boolean importPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean importLogo=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.LOGO);
  boolean importLayoutSetSettings=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.LAYOUT_SET_SETTINGS);
  boolean layoutSetPrototypeLinkEnabled=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.LAYOUT_SET_PROTOTYPE_LINK_ENABLED,true);
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  if (group.isLayoutSetPrototype()) {
    layoutSetPrototypeLinkEnabled=false;
  }
  String layoutsImportMode=MapUtil.getString(parameterMap,PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE,PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_MERGE_BY_LAYOUT_UUID);
  String userIdStrategy=MapUtil.getString(parameterMap,PortletDataHandlerKeys.USER_ID_STRATEGY);
  if (_log.isDebugEnabled()) {
    _log.debug("Delete portlet data " + deletePortletData);
    _log.debug("Import categories " + importCategories);
    _log.debug("Import permissions " + importPermissions);
  }
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  LayoutCache layoutCache=new LayoutCache();
  LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(groupId,privateLayout);
  long companyId=layoutSet.getCompanyId();
  User user=UserUtil.findByPrimaryKey(userId);
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  if (serviceContext == null) {
    serviceContext=new ServiceContext();
    serviceContext.setCompanyId(companyId);
    serviceContext.setSignedIn(false);
    serviceContext.setUserId(userId);
    ServiceContextThreadLocal.pushServiceContext(serviceContext);
  }
  UserIdStrategy strategy=_portletImporter.getUserIdStrategy(user,userIdStrategy);
  ManifestSummary manifestSummary=ExportImportHelperUtil.getManifestSummary(userId,groupId,parameterMap,file);
  if (BackgroundTaskThreadLocal.hasBackgroundTask()) {
    PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("layout",manifestSummary);
  }
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(file);
  PortletDataContext portletDataContext=PortletDataContextFactoryUtil.createImportPortletDataContext(companyId,groupId,parameterMap,strategy,zipReader);
  portletDataContext.setManifestSummary(manifestSummary);
  portletDataContext.setPortetDataContextListener(new PortletDataContextListenerImpl(portletDataContext));
  portletDataContext.setPrivateLayout(privateLayout);
  validateFile(portletDataContext);
  long sourceCompanyId=GetterUtil.getLong(_headerElement.attributeValue("company-id"));
  portletDataContext.setSourceCompanyId(sourceCompanyId);
  long sourceCompanyGroupId=GetterUtil.getLong(_headerElement.attributeValue("company-group-id"));
  portletDataContext.setSourceCompanyGroupId(sourceCompanyGroupId);
  long sourceGroupId=GetterUtil.getLong(_headerElement.attributeValue("group-id"));
  portletDataContext.setSourceGroupId(sourceGroupId);
  long sourceUserPersonalSiteGroupId=GetterUtil.getLong(_headerElement.attributeValue("user-personal-site-group-id"));
  portletDataContext.setSourceUserPersonalSiteGroupId(sourceUserPersonalSiteGroupId);
  String layoutSetPrototypeUuid=_layoutsElement.attributeValue("layout-set-prototype-uuid");
  String larType=_headerElement.attributeValue("type");
  if (group.isLayoutPrototype() && larType.equals("layout-prototype")) {
    deleteMissingLayouts=false;
    LayoutPrototype layoutPrototype=LayoutPrototypeLocalServiceUtil.getLayoutPrototype(group.getClassPK());
    String layoutPrototypeUuid=GetterUtil.getString(_headerElement.attributeValue("type-uuid"));
    LayoutPrototype existingLayoutPrototype=null;
    if (Validator.isNotNull(layoutPrototypeUuid)) {
      try {
        existingLayoutPrototype=LayoutPrototypeLocalServiceUtil.getLayoutPrototypeByUuidAndCompanyId(layoutPrototypeUuid,companyId);
      }
 catch (      NoSuchLayoutPrototypeException nslpe) {
      }
    }
    if (existingLayoutPrototype == null) {
      List<Layout> layouts=LayoutLocalServiceUtil.getLayoutsByLayoutPrototypeUuid(layoutPrototype.getUuid());
      layoutPrototype.setUuid(layoutPrototypeUuid);
      LayoutPrototypeLocalServiceUtil.updateLayoutPrototype(layoutPrototype);
      for (      Layout layout : layouts) {
        layout.setLayoutPrototypeUuid(layoutPrototypeUuid);
        LayoutLocalServiceUtil.updateLayout(layout);
      }
    }
  }
 else   if (group.isLayoutSetPrototype() && larType.equals("layout-set-prototype")) {
    LayoutSetPrototype layoutSetPrototype=LayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototype(group.getClassPK());
    String importedLayoutSetPrototypeUuid=GetterUtil.getString(_headerElement.attributeValue("type-uuid"));
    LayoutSetPrototype existingLayoutSetPrototype=null;
    if (Validator.isNotNull(importedLayoutSetPrototypeUuid)) {
      try {
        existingLayoutSetPrototype=LayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototypeByUuidAndCompanyId(importedLayoutSetPrototypeUuid,companyId);
      }
 catch (      NoSuchLayoutSetPrototypeException nslspe) {
      }
    }
    if (existingLayoutSetPrototype == null) {
      layoutSetPrototype.setUuid(importedLayoutSetPrototypeUuid);
      LayoutSetPrototypeLocalServiceUtil.updateLayoutSetPrototype(layoutSetPrototype);
    }
  }
 else   if (larType.equals("layout-set-prototype")) {
    layoutSetPrototypeUuid=GetterUtil.getString(_headerElement.attributeValue("type-uuid"));
  }
  if (Validator.isNotNull(layoutSetPrototypeUuid)) {
    layoutSet.setLayoutSetPrototypeUuid(layoutSetPrototypeUuid);
    layoutSet.setLayoutSetPrototypeLinkEnabled(layoutSetPrototypeLinkEnabled);
    LayoutSetLocalServiceUtil.updateLayoutSet(layoutSet);
  }
  if (importLogo) {
    String logoPath=_headerElement.attributeValue("logo-path");
    byte[] iconBytes=portletDataContext.getZipEntryAsByteArray(logoPath);
    if (ArrayUtil.isNotEmpty(iconBytes)) {
      File logo=null;
      try {
        logo=FileUtil.createTempFile(iconBytes);
        LayoutSetLocalServiceUtil.updateLogo(groupId,privateLayout,true,logo);
      }
  finally {
        FileUtil.delete(logo);
      }
    }
 else {
      LayoutSetLocalServiceUtil.updateLogo(groupId,privateLayout,false,(File)null);
    }
  }
  _themeImporter.importTheme(portletDataContext,layoutSet);
  if (importLayoutSetSettings) {
    String settings=GetterUtil.getString(_headerElement.elementText("settings"));
    LayoutSetLocalServiceUtil.updateSettings(groupId,privateLayout,settings);
  }
  Element portletsElement=_rootElement.element("portlets");
  List<Element> portletElements=portletsElement.elements("portlet");
  if (importPermissions) {
    for (    Element portletElement : portletElements) {
      String portletPath=portletElement.attributeValue("path");
      Document portletDocument=SAXReaderUtil.read(portletDataContext.getZipEntryAsString(portletPath));
      _permissionImporter.checkRoles(layoutCache,companyId,groupId,userId,portletDocument.getRootElement());
    }
    _permissionImporter.readPortletDataPermissions(portletDataContext);
  }
  _portletImporter.readAssetCategories(portletDataContext);
  _portletImporter.readAssetTags(portletDataContext);
  _portletImporter.readComments(portletDataContext);
  _portletImporter.readExpandoTables(portletDataContext);
  _portletImporter.readLocks(portletDataContext);
  _portletImporter.readRatingsEntries(portletDataContext);
  List<Layout> previousLayouts=LayoutUtil.findByG_P(groupId,privateLayout);
  if (Validator.isNotNull(layoutSetPrototypeUuid) && layoutSetPrototypeLinkEnabled) {
    LayoutSetPrototype layoutSetPrototype=LayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototypeByUuidAndCompanyId(layoutSetPrototypeUuid,companyId);
    for (    Layout layout : previousLayouts) {
      String sourcePrototypeLayoutUuid=layout.getSourcePrototypeLayoutUuid();
      if (Validator.isNull(layout.getSourcePrototypeLayoutUuid())) {
        continue;
      }
      Layout sourcePrototypeLayout=LayoutUtil.fetchByUUID_G_P(sourcePrototypeLayoutUuid,layoutSetPrototype.getGroupId(),true);
      if (sourcePrototypeLayout == null) {
        LayoutLocalServiceUtil.deleteLayout(layout,false,serviceContext);
      }
    }
  }
  List<String> sourceLayoutsUuids=new ArrayList<String>();
  List<Layout> newLayouts=new ArrayList<Layout>();
  if (_log.isDebugEnabled()) {
    if (_layoutElements.size() > 0) {
      _log.debug("Importing layouts");
    }
  }
  for (  Element layoutElement : _layoutElements) {
    importLayout(portletDataContext,sourceLayoutsUuids,newLayouts,layoutElement);
  }
  Map<Long,Layout> newLayoutsMap=(Map<Long,Layout>)portletDataContext.getNewPrimaryKeysMap(Layout.class + ".layout");
  if (deletePortletData) {
    if (_log.isDebugEnabled()) {
      if (portletElements.size() > 0) {
        _log.debug("Deleting portlet data");
      }
    }
    for (    Element portletElement : portletElements) {
      String portletId=portletElement.attributeValue("portlet-id");
      long layoutId=GetterUtil.getLong(portletElement.attributeValue("layout-id"));
      Layout layout=newLayoutsMap.get(layoutId);
      long plid=layout.getPlid();
      portletDataContext.setPlid(plid);
      _portletImporter.deletePortletData(portletDataContext,portletId,plid);
    }
  }
  if (_log.isDebugEnabled()) {
    if (portletElements.size() > 0) {
      _log.debug("Importing portlets");
    }
  }
  for (  Element portletElement : portletElements) {
    String portletPath=portletElement.attributeValue("path");
    String portletId=portletElement.attributeValue("portlet-id");
    long layoutId=GetterUtil.getLong(portletElement.attributeValue("layout-id"));
    long oldPlid=GetterUtil.getLong(portletElement.attributeValue("old-plid"));
    Portlet portlet=PortletLocalServiceUtil.getPortletById(portletDataContext.getCompanyId(),portletId);
    if (!portlet.isActive() || portlet.isUndeployedPortlet()) {
      continue;
    }
    Layout layout=newLayoutsMap.get(layoutId);
    long plid=LayoutConstants.DEFAULT_PLID;
    if (layout != null) {
      plid=layout.getPlid();
    }
    portletDataContext.setPlid(plid);
    portletDataContext.setOldPlid(oldPlid);
    Document portletDocument=SAXReaderUtil.read(portletDataContext.getZipEntryAsString(portletPath));
    portletElement=portletDocument.getRootElement();
    setPortletScope(portletDataContext,portletElement);
    long portletPreferencesGroupId=groupId;
    Element portletDataElement=portletElement.element("portlet-data");
    boolean[] importPortletControls=ExportImportHelperUtil.getImportPortletControls(companyId,portletId,parameterMap,portletDataElement,manifestSummary);
    try {
      if (layout != null) {
        portletPreferencesGroupId=layout.getGroupId();
      }
      _portletImporter.importPortletPreferences(portletDataContext,layoutSet.getCompanyId(),portletPreferencesGroupId,layout,null,portletElement,false,importPortletControls[0],importPortletControls[1],importPortletControls[2],importPortletControls[3]);
      if (importPortletControls[1]) {
        _portletImporter.importPortletData(portletDataContext,portletId,plid,portletDataElement);
      }
    }
  finally {
      _portletImporter.resetPortletScope(portletDataContext,portletPreferencesGroupId);
    }
    if (importPermissions) {
      _permissionImporter.importPortletPermissions(layoutCache,companyId,groupId,userId,layout,portletElement,portletId);
    }
    _portletImporter.importPortletPreferences(portletDataContext,layoutSet.getCompanyId(),groupId,null,null,portletElement,false,importPortletControls[0],importPortletControls[1],importPortletControls[2],importPortletControls[3]);
  }
  if (importPermissions) {
    if (userId > 0) {
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(User.class);
      indexer.reindex(userId);
    }
  }
  _portletImporter.readAssetLinks(portletDataContext);
  if (deleteMissingLayouts) {
    deleteMissingLayouts(sourceLayoutsUuids,previousLayouts,serviceContext);
  }
  layoutSet=LayoutSetLocalServiceUtil.updatePageCount(groupId,privateLayout);
  GroupLocalServiceUtil.updateSite(groupId,true);
  long lastMergeTime=System.currentTimeMillis();
  for (  Layout layout : newLayouts) {
    boolean modifiedTypeSettingsProperties=false;
    UnicodeProperties typeSettingsProperties=layout.getTypeSettingsProperties();
    String articleId=typeSettingsProperties.getProperty("article-id");
    if (Validator.isNotNull(articleId)) {
      Map<String,String> articleIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalArticle.class + ".articleId");
      typeSettingsProperties.setProperty("article-id",MapUtil.getString(articleIds,articleId,articleId));
      modifiedTypeSettingsProperties=true;
    }
    if (layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {
      typeSettingsProperties.setProperty(Sites.LAST_MERGE_TIME,String.valueOf(lastMergeTime));
      modifiedTypeSettingsProperties=true;
    }
    if (modifiedTypeSettingsProperties) {
      LayoutUtil.update(layout);
    }
  }
  if (layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {
    UnicodeProperties settingsProperties=layoutSet.getSettingsProperties();
    String mergeFailFriendlyURLLayouts=settingsProperties.getProperty(Sites.MERGE_FAIL_FRIENDLY_URL_LAYOUTS);
    if (Validator.isNull(mergeFailFriendlyURLLayouts)) {
      settingsProperties.setProperty(Sites.LAST_MERGE_TIME,String.valueOf(lastMergeTime));
      LayoutSetLocalServiceUtil.updateLayoutSet(layoutSet);
    }
  }
  _deletionSystemEventImporter.importDeletionSystemEvents(portletDataContext);
  if (_log.isInfoEnabled()) {
    _log.info("Importing layouts takes " + stopWatch.getTime() + " ms");
  }
  zipReader.close();
}
