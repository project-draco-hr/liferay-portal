{
  boolean deleteMissingLayouts=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.DELETE_MISSING_LAYOUTS,Boolean.TRUE.booleanValue());
  boolean deletePortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.DELETE_PORTLET_DATA);
  boolean importCategories=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.CATEGORIES);
  boolean importPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean importPublicLayoutPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PUBLIC_LAYOUT_PERMISSIONS);
  boolean importPortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA);
  boolean importPortletSetup=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_SETUP);
  boolean importPortletArchivedSetups=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);
  boolean importPortletUserPreferences=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);
  boolean importTheme=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.THEME);
  boolean importThemeSettings=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.THEME_REFERENCE);
  boolean importLogo=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.LOGO);
  boolean importLayoutSetSettings=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.LAYOUT_SET_SETTINGS);
  boolean layoutSetPrototypeLinkEnabled=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.LAYOUT_SET_PROTOTYPE_LINK_ENABLED,true);
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  if (group.isLayoutSetPrototype()) {
    layoutSetPrototypeLinkEnabled=false;
  }
  String layoutsImportMode=MapUtil.getString(parameterMap,PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE,PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_MERGE_BY_LAYOUT_UUID);
  String portletsMergeMode=MapUtil.getString(parameterMap,PortletDataHandlerKeys.PORTLETS_MERGE_MODE,PortletDataHandlerKeys.PORTLETS_MERGE_MODE_REPLACE);
  String userIdStrategy=MapUtil.getString(parameterMap,PortletDataHandlerKeys.USER_ID_STRATEGY);
  if (_log.isDebugEnabled()) {
    _log.debug("Delete portlet data " + deletePortletData);
    _log.debug("Import categories " + importCategories);
    _log.debug("Import permissions " + importPermissions);
    _log.debug("Import portlet data " + importPortletData);
    _log.debug("Import portlet setup " + importPortletSetup);
    _log.debug("Import portlet archived setups " + importPortletArchivedSetups);
    _log.debug("Import portlet user preferences " + importPortletUserPreferences);
    _log.debug("Import theme " + importTheme);
  }
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  LayoutCache layoutCache=new LayoutCache();
  LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(groupId,privateLayout);
  long companyId=layoutSet.getCompanyId();
  User user=UserUtil.findByPrimaryKey(userId);
  UserIdStrategy strategy=_portletImporter.getUserIdStrategy(user,userIdStrategy);
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(file);
  PortletDataContext portletDataContext=new PortletDataContextImpl(companyId,groupId,parameterMap,new HashSet<String>(),strategy,zipReader);
  portletDataContext.setPortetDataContextListener(new PortletDataContextListenerImpl(portletDataContext));
  portletDataContext.setPrivateLayout(privateLayout);
  Element rootElement=null;
  InputStream themeZip=null;
  String xml=portletDataContext.getZipEntryAsString("/manifest.xml");
  if (xml == null) {
    throw new LARFileException("manifest.xml not found in the LAR");
  }
  try {
    Document document=SAXReaderUtil.read(xml);
    rootElement=document.getRootElement();
  }
 catch (  Exception e) {
    throw new LARFileException(e);
  }
  Element headerElement=rootElement.element("header");
  int buildNumber=ReleaseInfo.getBuildNumber();
  int importBuildNumber=GetterUtil.getInteger(headerElement.attributeValue("build-number"));
  if (buildNumber != importBuildNumber) {
    throw new LayoutImportException("LAR build number " + importBuildNumber + " does not match "+ "portal build number "+ buildNumber);
  }
  String larType=headerElement.attributeValue("type");
  if (!larType.equals("layout-prototype") && !larType.equals("layout-set") && !larType.equals("layout-set-prototype")) {
    throw new LARTypeException("Invalid type of LAR file (" + larType + ")");
  }
  Locale[] sourceAvailableLocales=LocaleUtil.fromLanguageIds(StringUtil.split(headerElement.attributeValue("available-locales")));
  Locale[] targetAvailableLocales=LanguageUtil.getAvailableLocales();
  for (  Locale sourceAvailableLocale : sourceAvailableLocales) {
    if (!ArrayUtil.contains(targetAvailableLocales,sourceAvailableLocale)) {
      LocaleException le=new LocaleException();
      le.setSourceAvailableLocales(sourceAvailableLocales);
      le.setTargetAvailableLocales(targetAvailableLocales);
      throw le;
    }
  }
  Element layoutsElement=rootElement.element("layouts");
  List<Element> layoutElements=layoutsElement.elements("layout");
  validateLayoutPrototypes(companyId,layoutsElement,layoutElements);
  long sourceGroupId=GetterUtil.getLong(headerElement.attributeValue("group-id"));
  portletDataContext.setSourceGroupId(sourceGroupId);
  String layoutSetPrototypeUuid=layoutsElement.attributeValue("layout-set-prototype-uuid");
  if (group.isLayoutPrototype() && larType.equals("layout-prototype")) {
    deleteMissingLayouts=false;
    LayoutPrototype layoutPrototype=LayoutPrototypeLocalServiceUtil.getLayoutPrototype(group.getClassPK());
    String layoutPrototypeUuid=GetterUtil.getString(headerElement.attributeValue("type-uuid"));
    LayoutPrototype existingLayoutPrototype=null;
    if (Validator.isNotNull(layoutPrototypeUuid)) {
      try {
        existingLayoutPrototype=LayoutPrototypeLocalServiceUtil.getLayoutPrototypeByUuidAndCompanyId(layoutPrototypeUuid,companyId);
      }
 catch (      NoSuchLayoutPrototypeException nslpe) {
      }
    }
    if (existingLayoutPrototype == null) {
      layoutPrototype.setUuid(layoutPrototypeUuid);
      LayoutPrototypeLocalServiceUtil.updateLayoutPrototype(layoutPrototype);
    }
  }
 else   if (group.isLayoutSetPrototype() && larType.equals("layout-set-prototype")) {
    LayoutSetPrototype layoutSetPrototype=LayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototype(group.getClassPK());
    String importedLayoutSetPrototypeUuid=GetterUtil.getString(headerElement.attributeValue("type-uuid"));
    LayoutSetPrototype existingLayoutSetPrototype=null;
    if (Validator.isNotNull(importedLayoutSetPrototypeUuid)) {
      try {
        existingLayoutSetPrototype=LayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototypeByUuidAndCompanyId(importedLayoutSetPrototypeUuid,companyId);
      }
 catch (      NoSuchLayoutSetPrototypeException nslspe) {
      }
    }
    if (existingLayoutSetPrototype == null) {
      layoutSetPrototype.setUuid(importedLayoutSetPrototypeUuid);
      LayoutSetPrototypeLocalServiceUtil.updateLayoutSetPrototype(layoutSetPrototype);
    }
  }
 else   if (larType.equals("layout-set-prototype")) {
    layoutSetPrototypeUuid=GetterUtil.getString(headerElement.attributeValue("type-uuid"));
  }
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  if (Validator.isNotNull(layoutSetPrototypeUuid)) {
    layoutSet.setLayoutSetPrototypeUuid(layoutSetPrototypeUuid);
    layoutSet.setLayoutSetPrototypeLinkEnabled(layoutSetPrototypeLinkEnabled);
    LayoutSetLocalServiceUtil.updateLayoutSet(layoutSet);
  }
  if (importTheme) {
    themeZip=portletDataContext.getZipEntryAsInputStream("theme.zip");
  }
  String themeId=layoutSet.getThemeId();
  String colorSchemeId=layoutSet.getColorSchemeId();
  if (importThemeSettings) {
    Attribute themeIdAttribute=headerElement.attribute("theme-id");
    if (themeIdAttribute != null) {
      themeId=themeIdAttribute.getValue();
    }
    Attribute colorSchemeIdAttribute=headerElement.attribute("color-scheme-id");
    if (colorSchemeIdAttribute != null) {
      colorSchemeId=colorSchemeIdAttribute.getValue();
    }
  }
  if (importLogo) {
    String logoPath=headerElement.attributeValue("logo-path");
    byte[] iconBytes=portletDataContext.getZipEntryAsByteArray(logoPath);
    if ((iconBytes != null) && (iconBytes.length > 0)) {
      File logo=FileUtil.createTempFile(iconBytes);
      LayoutSetLocalServiceUtil.updateLogo(groupId,privateLayout,true,logo);
    }
 else {
      LayoutSetLocalServiceUtil.updateLogo(groupId,privateLayout,false,(File)null);
    }
  }
  if (importLayoutSetSettings) {
    String settings=GetterUtil.getString(headerElement.elementText("settings"));
    LayoutSetLocalServiceUtil.updateSettings(groupId,privateLayout,settings);
  }
  String css=GetterUtil.getString(headerElement.elementText("css"));
  if (themeZip != null) {
    String importThemeId=importTheme(layoutSet,themeZip);
    if (importThemeId != null) {
      themeId=importThemeId;
      colorSchemeId=ColorSchemeImpl.getDefaultRegularColorSchemeId();
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Importing theme takes " + stopWatch.getTime() + " ms");
    }
  }
  boolean wapTheme=false;
  LayoutSetLocalServiceUtil.updateLookAndFeel(groupId,privateLayout,themeId,colorSchemeId,css,wapTheme);
  if (importPermissions) {
    _permissionImporter.readPortletDataPermissions(portletDataContext);
  }
  if (importCategories || group.isCompany()) {
    _portletImporter.readAssetCategories(portletDataContext);
  }
  _portletImporter.readAssetTags(portletDataContext);
  _portletImporter.readComments(portletDataContext);
  _portletImporter.readExpandoTables(portletDataContext);
  _portletImporter.readLocks(portletDataContext);
  _portletImporter.readRatingsEntries(portletDataContext);
  List<Layout> previousLayouts=LayoutUtil.findByG_P(groupId,privateLayout);
  if (Validator.isNotNull(layoutSetPrototypeUuid) && layoutSetPrototypeLinkEnabled) {
    LayoutSetPrototype layoutSetPrototype=LayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototypeByUuidAndCompanyId(layoutSetPrototypeUuid,companyId);
    Group layoutSetPrototypeGroup=layoutSetPrototype.getGroup();
    for (    Layout layout : previousLayouts) {
      String sourcePrototypeLayoutUuid=layout.getSourcePrototypeLayoutUuid();
      if (Validator.isNull(layout.getSourcePrototypeLayoutUuid())) {
        continue;
      }
      Layout sourcePrototypeLayout=LayoutUtil.fetchByUUID_G_P(sourcePrototypeLayoutUuid,layoutSetPrototypeGroup.getGroupId(),true);
      if (sourcePrototypeLayout == null) {
        LayoutLocalServiceUtil.deleteLayout(layout,false,serviceContext);
      }
    }
  }
  List<Layout> newLayouts=new ArrayList<Layout>();
  Map<Long,Layout> newLayoutsMap=(Map<Long,Layout>)portletDataContext.getNewPrimaryKeysMap(Layout.class);
  if (_log.isDebugEnabled()) {
    if (layoutElements.size() > 0) {
      _log.debug("Importing layouts");
    }
  }
  for (  Element layoutElement : layoutElements) {
    importLayout(portletDataContext,user,layoutCache,previousLayouts,newLayouts,newLayoutsMap,portletsMergeMode,themeId,colorSchemeId,layoutsImportMode,privateLayout,importPermissions,importPublicLayoutPermissions,importThemeSettings,rootElement,layoutElement);
  }
  Element portletsElement=rootElement.element("portlets");
  List<Element> portletElements=portletsElement.elements("portlet");
  if (deletePortletData) {
    if (_log.isDebugEnabled()) {
      if (portletElements.size() > 0) {
        _log.debug("Deleting portlet data");
      }
    }
    for (    Element portletElement : portletElements) {
      String portletId=portletElement.attributeValue("portlet-id");
      long layoutId=GetterUtil.getLong(portletElement.attributeValue("layout-id"));
      long plid=newLayoutsMap.get(layoutId).getPlid();
      portletDataContext.setPlid(plid);
      _portletImporter.deletePortletData(portletDataContext,portletId,plid);
    }
  }
  if (_log.isDebugEnabled()) {
    if (portletElements.size() > 0) {
      _log.debug("Importing portlets");
    }
  }
  for (  Element portletElement : portletElements) {
    String portletPath=portletElement.attributeValue("path");
    String portletId=portletElement.attributeValue("portlet-id");
    long layoutId=GetterUtil.getLong(portletElement.attributeValue("layout-id"));
    long oldPlid=GetterUtil.getLong(portletElement.attributeValue("old-plid"));
    Portlet portlet=PortletLocalServiceUtil.getPortletById(portletDataContext.getCompanyId(),portletId);
    if (!portlet.isActive() || portlet.isUndeployedPortlet()) {
      continue;
    }
    Layout layout=newLayoutsMap.get(layoutId);
    long plid=LayoutConstants.DEFAULT_PLID;
    if (layout != null) {
      plid=layout.getPlid();
    }
    layout=LayoutUtil.fetchByPrimaryKey(plid);
    if ((layout == null) && !group.isCompany()) {
      continue;
    }
    portletDataContext.setPlid(plid);
    portletDataContext.setOldPlid(oldPlid);
    Document portletDocument=SAXReaderUtil.read(portletDataContext.getZipEntryAsString(portletPath));
    portletElement=portletDocument.getRootElement();
    _portletImporter.setPortletScope(portletDataContext,portletElement);
    long portletPreferencesGroupId=groupId;
    Element portletDataElement=portletElement.element("portlet-data");
    boolean importData=importPortletData && (portletDataElement != null);
    try {
      if ((layout != null) && !group.isCompany()) {
        portletPreferencesGroupId=layout.getGroupId();
      }
      _portletImporter.importPortletPreferences(portletDataContext,layoutSet.getCompanyId(),portletPreferencesGroupId,layout,null,portletElement,importPortletSetup,importPortletArchivedSetups,importPortletUserPreferences,false,importData);
      if (importData) {
        _portletImporter.importPortletData(portletDataContext,portletId,plid,portletDataElement);
      }
    }
  finally {
      _portletImporter.resetPortletScope(portletDataContext,portletPreferencesGroupId);
    }
    if (importPermissions) {
      _permissionImporter.importPortletPermissions(layoutCache,companyId,groupId,userId,layout,portletElement,portletId);
    }
    _portletImporter.importPortletPreferences(portletDataContext,layoutSet.getCompanyId(),groupId,null,null,portletElement,importPortletSetup,importPortletArchivedSetups,importPortletUserPreferences,false,importData);
  }
  if (importPermissions) {
    if (userId > 0) {
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(User.class);
      indexer.reindex(userId);
    }
  }
  _portletImporter.readAssetLinks(portletDataContext);
  if (deleteMissingLayouts) {
    deleteMissingLayouts(groupId,privateLayout,newLayouts,previousLayouts,serviceContext);
  }
  layoutSet=LayoutSetLocalServiceUtil.updatePageCount(groupId,privateLayout);
  if (_log.isInfoEnabled()) {
    _log.info("Importing layouts takes " + stopWatch.getTime() + " ms");
  }
  GroupLocalServiceUtil.updateSite(groupId,true);
  boolean importModeCreatedFromPrototype=layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE);
  long lastMergeTime=System.currentTimeMillis();
  for (  Layout layout : newLayouts) {
    boolean modifiedTypeSettingsProperties=false;
    UnicodeProperties typeSettingsProperties=layout.getTypeSettingsProperties();
    String articleId=typeSettingsProperties.getProperty("article-id");
    if (Validator.isNotNull(articleId)) {
      modifiedTypeSettingsProperties=true;
      Map<String,String> articleIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalArticle.class + ".articleId");
      typeSettingsProperties.setProperty("article-id",MapUtil.getString(articleIds,articleId,articleId));
    }
    if (importModeCreatedFromPrototype) {
      modifiedTypeSettingsProperties=true;
      typeSettingsProperties.setProperty(SitesUtil.LAST_MERGE_TIME,String.valueOf(lastMergeTime));
    }
    if (modifiedTypeSettingsProperties) {
      LayoutUtil.update(layout);
    }
  }
  if (importModeCreatedFromPrototype) {
    UnicodeProperties settingsProperties=layoutSet.getSettingsProperties();
    settingsProperties.setProperty(SitesUtil.LAST_MERGE_TIME,String.valueOf(lastMergeTime));
    LayoutSetLocalServiceUtil.updateLayoutSet(layoutSet);
  }
  zipReader.close();
}
