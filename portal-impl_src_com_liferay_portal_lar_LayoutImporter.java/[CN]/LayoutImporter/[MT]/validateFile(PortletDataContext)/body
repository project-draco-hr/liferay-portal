{
  readXML(portletDataContext);
  int buildNumber=ReleaseInfo.getBuildNumber();
  Element rootElement=portletDataContext.getImportDataRootElement();
  Element headerElement=rootElement.element("header");
  int importBuildNumber=GetterUtil.getInteger(headerElement.attributeValue("build-number"));
  if (buildNumber != importBuildNumber) {
    throw new LayoutImportException("LAR build number " + importBuildNumber + " does not match "+ "portal build number "+ buildNumber);
  }
  String larType=headerElement.attributeValue("type");
  if (!larType.equals("layout-prototype") && !larType.equals("layout-set") && !larType.equals("layout-set-prototype")) {
    throw new LARTypeException(larType);
  }
  Group group=GroupLocalServiceUtil.fetchGroup(portletDataContext.getGroupId());
  String layoutsImportMode=MapUtil.getString(portletDataContext.getParameterMap(),PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE);
  if (larType.equals("layout-prototype") && !group.isLayoutPrototype() && !layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {
    throw new LARTypeException("A page template can only be imported to a page template");
  }
  if (larType.equals("layout-set")) {
    if (group.isLayoutPrototype() || group.isLayoutSetPrototype()) {
      throw new LARTypeException("A site can only be imported to a site");
    }
    long sourceCompanyGroupId=GetterUtil.getLong(headerElement.attributeValue("company-group-id"));
    long sourceGroupId=GetterUtil.getLong(headerElement.attributeValue("group-id"));
    if (group.isCompany() ^ (sourceCompanyGroupId == sourceGroupId)) {
      throw new LARTypeException("A company site can only be imported to a company site");
    }
  }
  if (larType.equals("layout-set-prototype") && !group.isLayoutSetPrototype() && !layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {
    throw new LARTypeException("A site template can only be imported to a site template");
  }
  Locale[] sourceAvailableLocales=LocaleUtil.fromLanguageIds(StringUtil.split(headerElement.attributeValue("available-locales")));
  Locale[] targetAvailableLocales=LanguageUtil.getAvailableLocales(portletDataContext.getScopeGroupId());
  for (  Locale sourceAvailableLocale : sourceAvailableLocales) {
    if (!ArrayUtil.contains(targetAvailableLocales,sourceAvailableLocale)) {
      LocaleException le=new LocaleException(LocaleException.TYPE_EXPORT_IMPORT);
      le.setSourceAvailableLocales(sourceAvailableLocales);
      le.setTargetAvailableLocales(targetAvailableLocales);
      throw le;
    }
  }
  validateLayoutPrototypes(portletDataContext.getCompanyId(),portletDataContext.getImportDataGroupElement(Layout.class));
}
