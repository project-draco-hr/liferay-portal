{
  Collection<JavaFileObject> javaFileObjects=_javaFileObjects.get(path);
  if (javaFileObjects != null) {
    return javaFileObjects;
  }
  List<URL> urls=null;
  Map<String,List<URL>> extraPackageMap=_serviceTracker.getService();
  if (extraPackageMap != null) {
    urls=extraPackageMap.get(path.replace('/','.'));
  }
  if ((urls == null) || urls.isEmpty()) {
    ClassLoader classLoader=bundleWiring.getClassLoader();
    try {
      Enumeration<URL> enumeration=classLoader.getResources(path);
      if ((enumeration == null) || ((enumeration != null) && !enumeration.hasMoreElements())) {
        enumeration=classLoader.getResources(path + StringPool.SLASH);
      }
      if ((enumeration != null) && enumeration.hasMoreElements()) {
        urls=Collections.list(enumeration);
      }
    }
 catch (    IOException ioe) {
      _logger.log(Logger.LOG_ERROR,ioe.getMessage(),ioe);
    }
  }
  if ((urls == null) || urls.isEmpty()) {
    _javaFileObjects.put(path,Collections.<JavaFileObject>emptyList());
    return Collections.emptyList();
  }
  for (  URL url : urls) {
    try {
      File file=getFile(url);
      if (file == null) {
        _logger.log(Logger.LOG_WARNING,"Ignoring " + url + " while handling system bundle");
        continue;
      }
      try (FileSystem fileSystem=FileSystems.newFileSystem(file.toPath(),null)){
        FileSystemProvider fileSystemProvider=fileSystem.provider();
        try (DirectoryStream<Path> directoryStream=fileSystemProvider.newDirectoryStream(fileSystem.getPath(path),new Filter<Path>(){
          @Override public boolean accept(          Path entryPath){
            String entryPathString=entryPath.toString();
            return entryPathString.endsWith(".class");
          }
        }
)){
          for (          Path entryPath : directoryStream) {
            if (javaFileObjects == null) {
              javaFileObjects=new ArrayList<>();
            }
            String entryPathString=entryPath.toString();
            entryPathString=entryPathString.substring(1);
            javaFileObjects.add(new JarJavaFileObject(getClassName(entryPathString),file,entryPathString));
          }
        }
       }
     }
 catch (    IOException ioe) {
      _logger.log(Logger.LOG_ERROR,ioe.getMessage(),ioe);
    }
  }
  if (javaFileObjects == null) {
    javaFileObjects=Collections.<JavaFileObject>emptyList();
  }
  _javaFileObjects.put(path,javaFileObjects);
  return javaFileObjects;
}
