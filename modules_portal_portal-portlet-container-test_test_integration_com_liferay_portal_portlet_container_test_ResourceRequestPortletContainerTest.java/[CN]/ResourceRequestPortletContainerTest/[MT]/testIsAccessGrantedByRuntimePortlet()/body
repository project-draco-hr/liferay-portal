{
  Map<String,String> ignored=new HashMap<>();
  testPortlet=new TestPortlet(ignored){
    @Override public void serveResource(    ResourceRequest resourceRequest,    ResourceResponse resourceResponse) throws IOException, PortletException {
      PortletContext portletContext=getPortletContext();
      PortletRequestDispatcher requestDispatcher=portletContext.getRequestDispatcher("/runtime_portlet.jsp");
      requestDispatcher.include(resourceRequest,resourceResponse);
    }
  }
;
  String testRuntimePortletId="TEST_EMBEDDED";
  setUpPortlet(new TestPortlet(map),properties,testRuntimePortletId,false);
  setUpPortlet(testPortlet,properties,TEST_PORTLET_ID);
  HttpServletRequest httpServletRequest=getHttpServletRequest();
  PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.RESOURCE_PHASE);
  portletURL.setParameter("testRuntimePortletId",testRuntimePortletId);
  Map<String,List<String>> responseMap=request(portletURL.toString());
  Assert.assertEquals("200",getString(responseMap,"code"));
  Assert.assertTrue(map.containsKey("render"));
}
