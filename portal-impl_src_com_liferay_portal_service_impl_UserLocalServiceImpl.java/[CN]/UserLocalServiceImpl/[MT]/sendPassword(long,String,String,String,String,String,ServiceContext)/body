{
  Company company=companyPersistence.findByPrimaryKey(companyId);
  if (!company.isSendPassword() && !company.isSendPasswordResetLink()) {
    throw new SendPasswordException.MustBeEnabled(company);
  }
  emailAddress=StringUtil.toLowerCase(emailAddress.trim());
  if (Validator.isNull(emailAddress)) {
    throw new UserEmailAddressException.MustNotBeNull();
  }
  User user=userPersistence.findByC_EA(companyId,emailAddress);
  PasswordPolicy passwordPolicy=user.getPasswordPolicy();
  String newPassword=StringPool.BLANK;
  String passwordResetURL=StringPool.BLANK;
  if (company.isSendPasswordResetLink()) {
    Date expirationDate=null;
    if ((passwordPolicy != null) && (passwordPolicy.getResetTicketMaxAge() > 0)) {
      expirationDate=new Date(System.currentTimeMillis() + (passwordPolicy.getResetTicketMaxAge() * 1000));
    }
    Ticket ticket=ticketLocalService.addDistinctTicket(companyId,User.class.getName(),user.getUserId(),TicketConstants.TYPE_PASSWORD,null,expirationDate,serviceContext);
    passwordResetURL=serviceContext.getPortalURL() + serviceContext.getPathMain() + "/portal/update_password?p_l_id="+ serviceContext.getPlid()+ "&ticketKey="+ ticket.getKey();
  }
 else {
    if (!Objects.equals(PasswordEncryptorUtil.getDefaultPasswordAlgorithmType(),PasswordEncryptorUtil.TYPE_NONE)) {
      if (LDAPSettingsUtil.isPasswordPolicyEnabled(user.getCompanyId())) {
        if (_log.isWarnEnabled()) {
          StringBundler sb=new StringBundler(5);
          sb.append("When LDAP password policy is enabled, it ");
          sb.append("is possible that portal generated ");
          sb.append("passwords will not match the LDAP policy.");
          sb.append("Using RegExpToolkit to generate new ");
          sb.append("password.");
          _log.warn(sb.toString());
        }
        RegExpToolkit regExpToolkit=new RegExpToolkit();
        newPassword=regExpToolkit.generate(null);
      }
 else {
        newPassword=PwdToolkitUtil.generate(passwordPolicy);
      }
      boolean passwordReset=false;
      if (passwordPolicy.getChangeable() && passwordPolicy.getChangeRequired()) {
        passwordReset=true;
      }
      user.setPassword(PasswordEncryptorUtil.encrypt(newPassword));
      user.setPasswordUnencrypted(newPassword);
      user.setPasswordEncrypted(true);
      user.setPasswordReset(passwordReset);
      user.setPasswordModified(true);
      user.setPasswordModifiedDate(new Date());
      userPersistence.update(user);
      user.setPasswordModified(false);
    }
 else {
      newPassword=user.getPassword();
    }
  }
  sendPasswordNotification(user,companyId,newPassword,passwordResetURL,fromName,fromAddress,subject,body,serviceContext);
  return company.isSendPassword();
}
