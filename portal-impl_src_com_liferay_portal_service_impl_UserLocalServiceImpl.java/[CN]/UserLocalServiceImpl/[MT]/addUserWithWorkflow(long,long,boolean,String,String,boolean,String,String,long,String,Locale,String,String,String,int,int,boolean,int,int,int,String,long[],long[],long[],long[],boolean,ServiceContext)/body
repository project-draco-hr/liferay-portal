{
  Company company=companyPersistence.findByPrimaryKey(companyId);
  screenName=getLogin(screenName);
  openId=StringUtil.trim(openId);
  Date now=new Date();
  if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.USERS_SCREEN_NAME_ALWAYS_AUTOGENERATE)) {
    autoScreenName=true;
  }
  long userId=counterLocalService.increment();
  EmailAddressGenerator emailAddressGenerator=EmailAddressGeneratorFactory.getInstance();
  if ((emailAddress == null) || emailAddressGenerator.isGenerated(emailAddress)) {
    emailAddress=StringPool.BLANK;
  }
 else {
    emailAddress=StringUtil.toLowerCase(emailAddress.trim());
  }
  if (!PrefsPropsUtil.getBoolean(companyId,PropsKeys.USERS_EMAIL_ADDRESS_REQUIRED) && Validator.isNull(emailAddress)) {
    emailAddress=emailAddressGenerator.generate(companyId,userId);
  }
  validate(companyId,userId,autoPassword,password1,password2,autoScreenName,screenName,emailAddress,openId,firstName,middleName,lastName,organizationIds);
  if (!autoPassword) {
    if (Validator.isNull(password1) || Validator.isNull(password2)) {
      throw new UserPasswordException.MustBeValid(userId);
    }
  }
  if (autoScreenName) {
    ScreenNameGenerator screenNameGenerator=ScreenNameGeneratorFactory.getInstance();
    try {
      screenName=screenNameGenerator.generate(companyId,userId,emailAddress);
    }
 catch (    Exception e) {
      throw new SystemException(e);
    }
  }
  User defaultUser=getDefaultUser(companyId);
  FullNameGenerator fullNameGenerator=FullNameGeneratorFactory.getInstance();
  String fullName=fullNameGenerator.getFullName(firstName,middleName,lastName);
  String greeting=LanguageUtil.format(locale,"welcome-x",fullName,false);
  User user=userPersistence.create(userId);
  if (serviceContext != null) {
    String uuid=serviceContext.getUuid();
    if (Validator.isNotNull(uuid)) {
      user.setUuid(uuid);
    }
  }
  user.setCompanyId(companyId);
  user.setCreateDate(now);
  user.setModifiedDate(now);
  user.setDefaultUser(false);
  user.setContactId(counterLocalService.increment());
  if (Validator.isNotNull(password1)) {
    user.setPassword(PasswordEncryptorUtil.encrypt(password1));
    user.setPasswordUnencrypted(password1);
  }
  user.setPasswordEncrypted(true);
  PasswordPolicy passwordPolicy=defaultUser.getPasswordPolicy();
  if ((passwordPolicy != null) && passwordPolicy.isChangeable() && passwordPolicy.isChangeRequired()) {
    user.setPasswordReset(true);
  }
 else {
    user.setPasswordReset(false);
  }
  user.setDigest(StringPool.BLANK);
  user.setScreenName(screenName);
  user.setEmailAddress(emailAddress);
  user.setFacebookId(facebookId);
  Long ldapServerId=null;
  if (serviceContext != null) {
    ldapServerId=(Long)serviceContext.getAttribute("ldapServerId");
  }
  if (ldapServerId != null) {
    user.setLdapServerId(ldapServerId);
  }
 else {
    user.setLdapServerId(-1);
  }
  user.setOpenId(openId);
  user.setLanguageId(LocaleUtil.toLanguageId(locale));
  user.setTimeZoneId(defaultUser.getTimeZoneId());
  user.setGreeting(greeting);
  user.setFirstName(firstName);
  user.setMiddleName(middleName);
  user.setLastName(lastName);
  user.setJobTitle(jobTitle);
  user.setStatus(WorkflowConstants.STATUS_DRAFT);
  user.setExpandoBridgeAttributes(serviceContext);
  userPersistence.update(user,serviceContext);
  String creatorUserName=StringPool.BLANK;
  if (creatorUserId <= 0) {
    creatorUserId=user.getUserId();
  }
 else {
    User creatorUser=userPersistence.findByPrimaryKey(creatorUserId);
    creatorUserName=creatorUser.getFullName();
  }
  Date birthday=getBirthday(birthdayMonth,birthdayDay,birthdayYear);
  Contact contact=contactPersistence.create(user.getContactId());
  contact.setCompanyId(user.getCompanyId());
  contact.setUserId(creatorUserId);
  contact.setUserName(creatorUserName);
  contact.setCreateDate(now);
  contact.setModifiedDate(now);
  contact.setClassName(User.class.getName());
  contact.setClassPK(user.getUserId());
  contact.setAccountId(company.getAccountId());
  contact.setParentContactId(ContactConstants.DEFAULT_PARENT_CONTACT_ID);
  contact.setEmailAddress(user.getEmailAddress());
  contact.setFirstName(firstName);
  contact.setMiddleName(middleName);
  contact.setLastName(lastName);
  contact.setPrefixId(prefixId);
  contact.setSuffixId(suffixId);
  contact.setMale(male);
  contact.setBirthday(birthday);
  contact.setJobTitle(jobTitle);
  contactPersistence.update(contact,serviceContext);
  groupLocalService.addGroup(user.getUserId(),GroupConstants.DEFAULT_PARENT_GROUP_ID,User.class.getName(),user.getUserId(),null,null,0,StringPool.SLASH + screenName,false,true,null);
  if (groupIds != null) {
    List<Group> groups=new ArrayList<Group>();
    for (    long groupId : groupIds) {
      Group group=groupLocalService.fetchGroup(groupId);
      if (group != null) {
        groups.add(group);
      }
 else {
        if (_log.isWarnEnabled()) {
          _log.warn("Group " + groupId + " does not exist");
        }
      }
    }
    groupLocalService.addUserGroups(userId,groups);
  }
  addDefaultGroups(userId);
  updateOrganizations(userId,organizationIds,false);
  if (roleIds != null) {
    roleIds=UsersAdminUtil.addRequiredRoles(user,roleIds);
    userPersistence.setRoles(userId,roleIds);
  }
  addDefaultRoles(userId);
  if (userGroupIds != null) {
    if (PropsValues.USER_GROUPS_COPY_LAYOUTS_TO_USER_PERSONAL_SITE) {
      for (      long userGroupId : userGroupIds) {
        userGroupLocalService.copyUserGroupLayouts(userGroupId,new long[]{userId});
      }
    }
    userPersistence.setUserGroups(userId,userGroupIds);
  }
  addDefaultUserGroups(userId);
  resourceLocalService.addResources(companyId,0,creatorUserId,User.class.getName(),user.getUserId(),false,false,false);
  if (serviceContext != null) {
    updateAsset(creatorUserId,user,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  }
  if ((serviceContext == null) || serviceContext.isIndexingEnabled()) {
    reindex(user);
  }
  long workflowUserId=creatorUserId;
  if (workflowUserId == userId) {
    workflowUserId=defaultUser.getUserId();
  }
  ServiceContext workflowServiceContext=serviceContext;
  if (workflowServiceContext == null) {
    workflowServiceContext=new ServiceContext();
  }
  workflowServiceContext.setAttribute("autoPassword",autoPassword);
  workflowServiceContext.setAttribute("passwordUnencrypted",password1);
  workflowServiceContext.setAttribute("sendEmail",sendEmail);
  WorkflowHandlerRegistryUtil.startWorkflowInstance(companyId,workflowUserId,User.class.getName(),userId,user,workflowServiceContext);
  if (serviceContext != null) {
    String passwordUnencrypted=(String)serviceContext.getAttribute("passwordUnencrypted");
    if (Validator.isNotNull(passwordUnencrypted)) {
      user.setPasswordUnencrypted(passwordUnencrypted);
    }
  }
  return user;
}
