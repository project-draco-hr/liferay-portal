{
  login=login.trim().toLowerCase();
  long userId=GetterUtil.getLong(login);
  if (authType.equals(CompanyConstants.AUTH_TYPE_EA)) {
    if (!Validator.isEmailAddress(login)) {
      throw new UserEmailAddressException();
    }
  }
 else   if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
    if (Validator.isNull(login)) {
      throw new UserScreenNameException();
    }
  }
 else   if (authType.equals(CompanyConstants.AUTH_TYPE_ID)) {
    if (Validator.isNull(login)) {
      throw new UserIdException();
    }
  }
  if (Validator.isNull(password)) {
    throw new UserPasswordException(UserPasswordException.PASSWORD_INVALID);
  }
  int authResult=Authenticator.FAILURE;
  if (authType.equals(CompanyConstants.AUTH_TYPE_EA)) {
    authResult=AuthPipeline.authenticateByEmailAddress(PropsKeys.AUTH_PIPELINE_PRE,companyId,login,password,headerMap,parameterMap);
  }
 else   if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
    authResult=AuthPipeline.authenticateByScreenName(PropsKeys.AUTH_PIPELINE_PRE,companyId,login,password,headerMap,parameterMap);
  }
 else   if (authType.equals(CompanyConstants.AUTH_TYPE_ID)) {
    authResult=AuthPipeline.authenticateByUserId(PropsKeys.AUTH_PIPELINE_PRE,companyId,userId,password,headerMap,parameterMap);
  }
  User user=null;
  try {
    if (authType.equals(CompanyConstants.AUTH_TYPE_EA)) {
      user=userPersistence.findByC_EA(companyId,login);
    }
 else     if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
      user=userPersistence.findByC_SN(companyId,login);
    }
 else     if (authType.equals(CompanyConstants.AUTH_TYPE_ID)) {
      user=userPersistence.findByC_U(companyId,GetterUtil.getLong(login));
    }
  }
 catch (  NoSuchUserException nsue) {
    return Authenticator.DNE;
  }
  if (user.isDefaultUser()) {
    _log.error("The default user should never be allowed to authenticate");
    return Authenticator.DNE;
  }
  if (!user.isPasswordEncrypted()) {
    user.setPassword(PwdEncryptor.encrypt(user.getPassword()));
    user.setPasswordEncrypted(true);
    userPersistence.update(user,false);
  }
  checkLockout(user);
  checkPasswordExpired(user);
  if (authResult == Authenticator.SUCCESS) {
    if (PropsValues.AUTH_PIPELINE_ENABLE_LIFERAY_CHECK) {
      String encPassword=PwdEncryptor.encrypt(password,user.getPassword());
      if (user.getPassword().equals(encPassword)) {
        authResult=Authenticator.SUCCESS;
      }
 else       if (GetterUtil.getBoolean(PropsUtil.get(PropsKeys.AUTH_MAC_ALLOW))) {
        try {
          MessageDigest digester=MessageDigest.getInstance(PropsUtil.get(PropsKeys.AUTH_MAC_ALGORITHM));
          digester.update(login.getBytes("UTF8"));
          String shardKey=PropsUtil.get(PropsKeys.AUTH_MAC_SHARED_KEY);
          encPassword=Base64.encode(digester.digest(shardKey.getBytes("UTF8")));
          if (password.equals(encPassword)) {
            authResult=Authenticator.SUCCESS;
          }
 else {
            authResult=Authenticator.FAILURE;
          }
        }
 catch (        NoSuchAlgorithmException nsae) {
          throw new SystemException(nsae);
        }
catch (        UnsupportedEncodingException uee) {
          throw new SystemException(uee);
        }
      }
 else {
        authResult=Authenticator.FAILURE;
      }
    }
  }
  if (authResult == Authenticator.SUCCESS) {
    if (authType.equals(CompanyConstants.AUTH_TYPE_EA)) {
      authResult=AuthPipeline.authenticateByEmailAddress(PropsKeys.AUTH_PIPELINE_POST,companyId,login,password,headerMap,parameterMap);
    }
 else     if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
      authResult=AuthPipeline.authenticateByScreenName(PropsKeys.AUTH_PIPELINE_POST,companyId,login,password,headerMap,parameterMap);
    }
 else     if (authType.equals(CompanyConstants.AUTH_TYPE_ID)) {
      authResult=AuthPipeline.authenticateByUserId(PropsKeys.AUTH_PIPELINE_POST,companyId,userId,password,headerMap,parameterMap);
    }
  }
  if (authResult == Authenticator.FAILURE) {
    try {
      if (authType.equals(CompanyConstants.AUTH_TYPE_EA)) {
        AuthPipeline.onFailureByEmailAddress(PropsKeys.AUTH_FAILURE,companyId,login,headerMap,parameterMap);
      }
 else       if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
        AuthPipeline.onFailureByScreenName(PropsKeys.AUTH_FAILURE,companyId,login,headerMap,parameterMap);
      }
 else       if (authType.equals(CompanyConstants.AUTH_TYPE_ID)) {
        AuthPipeline.onFailureByUserId(PropsKeys.AUTH_FAILURE,companyId,userId,headerMap,parameterMap);
      }
      if (!LDAPSettingsUtil.isPasswordPolicyEnabled(user.getCompanyId())) {
        PasswordPolicy passwordPolicy=user.getPasswordPolicy();
        int failedLoginAttempts=user.getFailedLoginAttempts();
        int maxFailures=passwordPolicy.getMaxFailure();
        if ((failedLoginAttempts >= maxFailures) && (maxFailures != 0)) {
          if (authType.equals(CompanyConstants.AUTH_TYPE_EA)) {
            AuthPipeline.onMaxFailuresByEmailAddress(PropsKeys.AUTH_MAX_FAILURES,companyId,login,headerMap,parameterMap);
          }
 else           if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
            AuthPipeline.onMaxFailuresByScreenName(PropsKeys.AUTH_MAX_FAILURES,companyId,login,headerMap,parameterMap);
          }
 else           if (authType.equals(CompanyConstants.AUTH_TYPE_ID)) {
            AuthPipeline.onMaxFailuresByUserId(PropsKeys.AUTH_MAX_FAILURES,companyId,userId,headerMap,parameterMap);
          }
        }
      }
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  return authResult;
}
