{
  User user=getUserByEmailAddress(companyId,emailAddress);
  if (user.getStatus() != WorkflowConstants.STATUS_INCOMPLETE) {
    throw new PortalException("Invalid user status");
  }
  User defaultUser=getDefaultUser(companyId);
  if (facebookId > 0) {
    autoPassword=false;
    if ((password1 == null) || (password2 == null)) {
      password1=PwdGenerator.getPassword();
      password2=password1;
    }
    sendEmail=false;
  }
  if (updateUserInformation) {
    autoScreenName=false;
    if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.USERS_SCREEN_NAME_ALWAYS_AUTOGENERATE)) {
      autoScreenName=true;
    }
    validate(companyId,user.getUserId(),autoPassword,password1,password2,autoScreenName,screenName,emailAddress,openId,firstName,middleName,lastName,null);
    if (!autoPassword) {
      if (Validator.isNull(password1) || Validator.isNull(password2)) {
        throw new UserPasswordException.MustBeValid(user.getUserId());
      }
    }
    if (autoScreenName) {
      ScreenNameGenerator screenNameGenerator=ScreenNameGeneratorFactory.getInstance();
      try {
        screenName=screenNameGenerator.generate(companyId,user.getUserId(),emailAddress);
      }
 catch (      Exception e) {
        throw new SystemException(e);
      }
    }
    FullNameGenerator fullNameGenerator=FullNameGeneratorFactory.getInstance();
    String fullName=fullNameGenerator.getFullName(firstName,middleName,lastName);
    String greeting=LanguageUtil.format(locale,"welcome-x",fullName,false);
    if (Validator.isNotNull(password1)) {
      user.setPassword(PasswordEncryptorUtil.encrypt(password1));
      user.setPasswordUnencrypted(password1);
    }
    user.setPasswordEncrypted(true);
    PasswordPolicy passwordPolicy=defaultUser.getPasswordPolicy();
    if ((passwordPolicy != null) && passwordPolicy.isChangeable() && passwordPolicy.isChangeRequired()) {
      user.setPasswordReset(true);
    }
 else {
      user.setPasswordReset(false);
    }
    user.setScreenName(screenName);
    user.setFacebookId(facebookId);
    user.setOpenId(openId);
    user.setLanguageId(locale.toString());
    user.setTimeZoneId(defaultUser.getTimeZoneId());
    user.setGreeting(greeting);
    user.setFirstName(firstName);
    user.setMiddleName(middleName);
    user.setLastName(lastName);
    user.setJobTitle(jobTitle);
    user.setExpandoBridgeAttributes(serviceContext);
    Date birthday=getBirthday(birthdayMonth,birthdayDay,birthdayYear);
    Contact contact=user.getContact();
    contact.setFirstName(firstName);
    contact.setMiddleName(middleName);
    contact.setLastName(lastName);
    contact.setPrefixId(prefixId);
    contact.setSuffixId(suffixId);
    contact.setMale(male);
    contact.setBirthday(birthday);
    contact.setJobTitle(jobTitle);
    contactPersistence.update(contact,serviceContext);
    Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(User.class);
    indexer.reindex(user);
  }
  user.setStatus(WorkflowConstants.STATUS_DRAFT);
  userPersistence.update(user,serviceContext);
  long workflowUserId=creatorUserId;
  if (workflowUserId == user.getUserId()) {
    workflowUserId=defaultUser.getUserId();
  }
  ServiceContext workflowServiceContext=serviceContext;
  if (workflowServiceContext == null) {
    workflowServiceContext=new ServiceContext();
  }
  workflowServiceContext.setAttribute("autoPassword",autoPassword);
  workflowServiceContext.setAttribute("passwordUnencrypted",password1);
  workflowServiceContext.setAttribute("sendEmail",sendEmail);
  WorkflowHandlerRegistryUtil.startWorkflowInstance(companyId,workflowUserId,User.class.getName(),user.getUserId(),user,workflowServiceContext);
  return getUserByEmailAddress(companyId,emailAddress);
}
