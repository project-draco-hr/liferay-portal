{
  if (!PropsValues.USERS_DELETE) {
    throw new RequiredUserException();
  }
  User user=userPersistence.findByPrimaryKey(userId);
  try {
    UserIndexer.deleteUser(user.getCompanyId(),user.getUserId());
  }
 catch (  SearchException se) {
    _log.error("Indexing " + userId,se);
  }
  Group group=user.getGroup();
  groupLocalService.deleteGroup(group.getGroupId());
  imageLocalService.deleteImage(user.getPortraitId());
  passwordPolicyRelLocalService.deletePasswordPolicyRel(User.class.getName(),userId);
  passwordTrackerLocalService.deletePasswordTrackers(userId);
  subscriptionLocalService.deleteSubscriptions(userId);
  userIdMapperLocalService.deleteUserIdMappers(userId);
  announcementsDeliveryLocalService.deleteDeliveries(userId);
  blogsStatsUserLocalService.deleteStatsUserByUserId(userId);
  dlFileRankLocalService.deleteFileRanks(userId);
  expandoValueLocalService.deleteValues(User.class.getName(),userId);
  mbBanLocalService.deleteBansByBanUserId(userId);
  mbMessageFlagLocalService.deleteFlags(userId);
  mbStatsUserLocalService.deleteStatsUserByUserId(userId);
  shoppingCartLocalService.deleteUserCarts(userId);
  socialActivityLocalService.deleteUserActivities(userId);
  socialRequestLocalService.deleteReceiverUserRequests(userId);
  socialRequestLocalService.deleteUserRequests(userId);
  tagsAssetLocalService.deleteAsset(User.class.getName(),userId);
  mailService.deleteUser(userId,user.getCompanyMx());
  contactLocalService.deleteContact(user.getContactId());
  resourceLocalService.deleteResource(user.getCompanyId(),User.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,user.getUserId());
  userGroupRoleLocalService.deleteUserGroupRolesByUserId(userId);
  userPersistence.remove(userId);
  PermissionCacheUtil.clearCache();
}
