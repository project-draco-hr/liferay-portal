{
  Company company=companyPersistence.findByPrimaryKey(companyId);
  screenName=getScreenName(screenName);
  emailAddress=emailAddress.trim().toLowerCase();
  openId=openId.trim();
  Date now=new Date();
  if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.USERS_SCREEN_NAME_ALWAYS_AUTOGENERATE)) {
    autoScreenName=true;
  }
  long userId=counterLocalService.increment();
  EmailAddressGenerator emailAddressGenerator=(EmailAddressGenerator)InstancePool.get(PropsValues.USERS_EMAIL_ADDRESS_GENERATOR);
  if (emailAddressGenerator.isGenerated(emailAddress)) {
    emailAddress=StringPool.BLANK;
  }
  if (!PropsValues.USERS_EMAIL_ADDRESS_REQUIRED && Validator.isNull(emailAddress)) {
    emailAddress=emailAddressGenerator.generate(companyId,userId);
  }
  validate(companyId,userId,autoPassword,password1,password2,autoScreenName,screenName,emailAddress,firstName,lastName,organizationIds);
  if (autoPassword) {
    password1=PwdToolkitUtil.generate();
  }
 else {
    if (Validator.isNull(password1) || Validator.isNull(password2)) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_INVALID);
    }
  }
  if (autoScreenName) {
    ScreenNameGenerator screenNameGenerator=ScreenNameGeneratorFactory.getInstance();
    try {
      screenName=screenNameGenerator.generate(companyId,userId,emailAddress);
    }
 catch (    Exception e) {
      throw new SystemException(e);
    }
  }
  User defaultUser=getDefaultUser(companyId);
  String fullName=ContactConstants.getFullName(firstName,middleName,lastName);
  String greeting=LanguageUtil.format(locale,"welcome-x"," " + fullName,false);
  User user=userPersistence.create(userId);
  user.setCompanyId(companyId);
  user.setCreateDate(now);
  user.setModifiedDate(now);
  user.setDefaultUser(false);
  user.setContactId(counterLocalService.increment());
  user.setPassword(PwdEncryptor.encrypt(password1));
  user.setPasswordUnencrypted(password1);
  user.setPasswordEncrypted(true);
  user.setPasswordReset(false);
  user.setScreenName(screenName);
  user.setEmailAddress(emailAddress);
  user.setOpenId(openId);
  user.setLanguageId(locale.toString());
  user.setTimeZoneId(defaultUser.getTimeZoneId());
  user.setGreeting(greeting);
  user.setFirstName(firstName);
  user.setMiddleName(middleName);
  user.setLastName(lastName);
  user.setJobTitle(jobTitle);
  user.setActive(true);
  userPersistence.update(user,false);
  String creatorUserName=StringPool.BLANK;
  if (creatorUserId <= 0) {
    creatorUserId=user.getUserId();
  }
 else {
    User creatorUser=userPersistence.findByPrimaryKey(creatorUserId);
    creatorUserName=creatorUser.getFullName();
  }
  resourceLocalService.addResources(companyId,0,creatorUserId,User.class.getName(),user.getUserId(),false,false,false);
  if (user.hasCompanyMx()) {
    mailService.addUser(companyId,userId,password1,firstName,middleName,lastName,emailAddress);
  }
  Date birthday=PortalUtil.getDate(birthdayMonth,birthdayDay,birthdayYear,new ContactBirthdayException());
  Contact contact=contactPersistence.create(user.getContactId());
  contact.setCompanyId(user.getCompanyId());
  contact.setUserId(creatorUserId);
  contact.setUserName(creatorUserName);
  contact.setCreateDate(now);
  contact.setModifiedDate(now);
  contact.setAccountId(company.getAccountId());
  contact.setParentContactId(ContactConstants.DEFAULT_PARENT_CONTACT_ID);
  contact.setFirstName(firstName);
  contact.setMiddleName(middleName);
  contact.setLastName(lastName);
  contact.setPrefixId(prefixId);
  contact.setSuffixId(suffixId);
  contact.setMale(male);
  contact.setBirthday(birthday);
  contact.setJobTitle(jobTitle);
  contactPersistence.update(contact,false);
  groupLocalService.addGroup(user.getUserId(),User.class.getName(),user.getUserId(),null,null,0,StringPool.SLASH + screenName,true,null);
  if (groupIds != null) {
    groupLocalService.addUserGroups(userId,groupIds);
  }
  addDefaultGroups(userId);
  updateOrganizations(userId,organizationIds);
  if (roleIds != null) {
    roleIds=EnterpriseAdminUtil.addRequiredRoles(userId,roleIds);
    userPersistence.setRoles(userId,roleIds);
  }
  addDefaultRoles(userId);
  if (userGroupIds != null) {
    for (    long userGroupId : userGroupIds) {
      copyUserGroupLayouts(userGroupId,new long[]{userId});
    }
    userPersistence.setUserGroups(userId,userGroupIds);
  }
  addDefaultUserGroups(userId);
  if (serviceContext != null) {
    updateAsset(creatorUserId,user,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  }
  user.setExpandoBridgeAttributes(serviceContext);
  if (sendEmail) {
    try {
      sendEmail(user,password1);
    }
 catch (    IOException ioe) {
      throw new SystemException(ioe);
    }
  }
  try {
    UserIndexer.updateUser(user);
  }
 catch (  SearchException se) {
    _log.error("Indexing " + userId,se);
  }
  return user;
}
