{
  User user=userPersistence.findByPrimaryKey(userId);
  Company company=companyPersistence.findByPrimaryKey(user.getCompanyId());
  String password=oldPassword;
  screenName=getScreenName(screenName);
  emailAddress=emailAddress.trim().toLowerCase();
  openId=openId.trim();
  aimSn=aimSn.trim().toLowerCase();
  facebookSn=facebookSn.trim().toLowerCase();
  icqSn=icqSn.trim().toLowerCase();
  jabberSn=jabberSn.trim().toLowerCase();
  msnSn=msnSn.trim().toLowerCase();
  mySpaceSn=mySpaceSn.trim().toLowerCase();
  skypeSn=skypeSn.trim().toLowerCase();
  twitterSn=twitterSn.trim().toLowerCase();
  ymSn=ymSn.trim().toLowerCase();
  Date now=new Date();
  EmailAddressGenerator emailAddressGenerator=EmailAddressGeneratorFactory.getInstance();
  if (emailAddressGenerator.isGenerated(emailAddress)) {
    emailAddress=StringPool.BLANK;
  }
  if (!PropsValues.USERS_EMAIL_ADDRESS_REQUIRED && Validator.isNull(emailAddress)) {
    emailAddress=emailAddressGenerator.generate(user.getCompanyId(),userId);
  }
  validate(userId,screenName,emailAddress,firstName,middleName,lastName,smsSn);
  if (Validator.isNotNull(newPassword1) || Validator.isNotNull(newPassword2)) {
    user=updatePassword(userId,newPassword1,newPassword2,passwordReset);
    password=newPassword1;
  }
  user.setModifiedDate(now);
  if (user.getContactId() <= 0) {
    user.setContactId(counterLocalService.increment());
  }
  user.setPasswordReset(passwordReset);
  if (Validator.isNotNull(reminderQueryQuestion) && Validator.isNotNull(reminderQueryAnswer)) {
    user.setReminderQueryQuestion(reminderQueryQuestion);
    user.setReminderQueryAnswer(reminderQueryAnswer);
  }
  user.setScreenName(screenName);
  setEmailAddress(user,password,firstName,middleName,lastName,emailAddress);
  user.setOpenId(openId);
  user.setLanguageId(languageId);
  user.setTimeZoneId(timeZoneId);
  user.setGreeting(greeting);
  user.setComments(comments);
  user.setFirstName(firstName);
  user.setMiddleName(middleName);
  user.setLastName(lastName);
  user.setJobTitle(jobTitle);
  userPersistence.update(user,false);
  Date birthday=PortalUtil.getDate(birthdayMonth,birthdayDay,birthdayYear,new ContactBirthdayException());
  long contactId=user.getContactId();
  Contact contact=contactPersistence.fetchByPrimaryKey(contactId);
  if (contact == null) {
    contact=contactPersistence.create(contactId);
    contact.setCompanyId(user.getCompanyId());
    contact.setUserName(StringPool.BLANK);
    contact.setCreateDate(now);
    contact.setAccountId(company.getAccountId());
    contact.setParentContactId(ContactConstants.DEFAULT_PARENT_CONTACT_ID);
  }
  contact.setModifiedDate(now);
  contact.setFirstName(firstName);
  contact.setMiddleName(middleName);
  contact.setLastName(lastName);
  contact.setPrefixId(prefixId);
  contact.setSuffixId(suffixId);
  contact.setMale(male);
  contact.setBirthday(birthday);
  contact.setSmsSn(smsSn);
  contact.setAimSn(aimSn);
  contact.setFacebookSn(facebookSn);
  contact.setIcqSn(icqSn);
  contact.setJabberSn(jabberSn);
  contact.setMsnSn(msnSn);
  contact.setMySpaceSn(mySpaceSn);
  contact.setSkypeSn(skypeSn);
  contact.setTwitterSn(twitterSn);
  contact.setYmSn(ymSn);
  contact.setJobTitle(jobTitle);
  contactPersistence.update(contact,false);
  Group group=groupLocalService.getUserGroup(user.getCompanyId(),userId);
  group.setFriendlyURL(StringPool.SLASH + screenName);
  groupPersistence.update(group,false);
  updateGroups(userId,groupIds);
  updateOrganizations(userId,organizationIds);
  if (roleIds != null) {
    roleIds=EnterpriseAdminUtil.addRequiredRoles(user,roleIds);
    userPersistence.setRoles(userId,roleIds);
  }
  if (userGroupRoles != null) {
    List<UserGroupRole> previousUserGroupRoles=userGroupRolePersistence.findByUserId(userId);
    for (    UserGroupRole userGroupRole : previousUserGroupRoles) {
      if (userGroupRoles.contains(userGroupRole)) {
        userGroupRoles.remove(userGroupRole);
      }
 else {
        userGroupRoleLocalService.deleteUserGroupRole(userGroupRole);
      }
    }
    long[] validGroupIds=new long[0];
    if (groupIds != null) {
      validGroupIds=ArrayUtil.append(validGroupIds,groupIds);
    }
    if (organizationIds != null) {
      long[] organizationGroupIds=new long[organizationIds.length];
      for (int i=0; i < organizationIds.length; i++) {
        long organizationId=organizationIds[i];
        Organization organization=organizationPersistence.findByPrimaryKey(organizationId);
        Group organizationGroup=organization.getGroup();
        organizationGroupIds[i]=organizationGroup.getGroupId();
      }
      validGroupIds=ArrayUtil.append(validGroupIds,organizationGroupIds);
    }
    Arrays.sort(validGroupIds);
    for (    UserGroupRole userGroupRole : userGroupRoles) {
      if (Arrays.binarySearch(validGroupIds,userGroupRole.getGroupId()) == -1) {
        userGroupRoleLocalService.addUserGroupRole(userGroupRole);
      }
    }
  }
  if (userGroupIds != null) {
    userGroupLocalService.copyUserGroupLayouts(userGroupIds,userId);
    userPersistence.setUserGroups(userId,userGroupIds);
  }
  announcementsDeliveryLocalService.getUserDeliveries(user.getUserId());
  if (serviceContext != null) {
    updateAsset(userId,user,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  }
  user.setExpandoBridgeAttributes(serviceContext);
  Indexer indexer=IndexerRegistryUtil.getIndexer(User.class);
  indexer.reindex(user);
  PermissionCacheUtil.clearCache();
  return user;
}
