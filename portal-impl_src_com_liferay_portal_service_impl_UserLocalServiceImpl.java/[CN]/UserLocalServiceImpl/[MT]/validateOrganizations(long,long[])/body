{
  boolean organizationRequired=GetterUtil.getBoolean(PropsUtil.get(PropsUtil.ORGANIZATIONS_PARENT_ORGANIZATION_REQUIRED));
  boolean locationRequired=GetterUtil.getBoolean(PropsUtil.get(PropsUtil.ORGANIZATIONS_LOCATION_REQUIRED));
  boolean strictLocationValidation=GetterUtil.getBoolean(PropsUtil.get(PropsUtil.ORGANIZATIONS_LOCATION_STRICT_VALIDATION));
  if (locationRequired) {
    organizationRequired=true;
  }
  List regularOrganizations=new ArrayList();
  List locations=new ArrayList();
  for (int i=0; i < organizationIds.length; i++) {
    long organizationId=organizationIds[i];
    if (organizationId > 0) {
      Organization organization=organizationPersistence.findByPrimaryKey(organizationId);
      if (organization.isRegular()) {
        regularOrganizations.add(organization);
      }
 else {
        locations.add(organization);
      }
    }
  }
  if (organizationRequired && (regularOrganizations.size() == 0)) {
    throw new NoSuchOrganizationException("User must have at least one regular organization");
  }
  if (locationRequired && (locations.size() == 0)) {
    throw new NoSuchOrganizationException("User must have at least one location");
  }
  if (strictLocationValidation) {
    Iterator itr1=locations.iterator();
    while (itr1.hasNext()) {
      Organization location=(Organization)itr1.next();
      boolean validLocation=false;
      Iterator itr2=regularOrganizations.iterator();
      while (itr2.hasNext()) {
        Organization organization=(Organization)itr2.next();
        if (organizationLocalService.isAncestor(location.getOrganizationId(),organization.getOrganizationId())) {
          validLocation=true;
          break;
        }
      }
      if (!validLocation) {
        throw new OrganizationParentException("Location " + location.getOrganizationId() + " is not valid for the organizations: "+ StringUtil.merge(organizationIds));
      }
    }
  }
}
