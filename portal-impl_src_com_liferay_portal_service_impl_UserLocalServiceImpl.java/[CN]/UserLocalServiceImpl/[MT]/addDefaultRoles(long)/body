{
  User user=userPersistence.findByPrimaryKey(userId);
  Set<Long> roleIdSet=new HashSet<>();
  String[] defaultRoleNames=PrefsPropsUtil.getStringArray(user.getCompanyId(),PropsKeys.ADMIN_DEFAULT_ROLE_NAMES,StringPool.NEW_LINE,PropsValues.ADMIN_DEFAULT_ROLE_NAMES);
  for (  String defaultRoleName : defaultRoleNames) {
    try {
      Role role=rolePersistence.findByC_N(user.getCompanyId(),defaultRoleName);
      if (!userPersistence.containsRole(userId,role.getRoleId())) {
        roleIdSet.add(role.getRoleId());
      }
    }
 catch (    NoSuchRoleException nsre) {
    }
  }
  Set<Long> groupRoleIdsSet=new HashSet<>();
  Set<Long> regularRoleIdsSet=new HashSet<>();
  long[] roleIds=ArrayUtil.toLongArray(roleIdSet);
  roleIds=UsersAdminUtil.addRequiredRoles(user,roleIds);
  for (  long roleId : roleIds) {
    Role role=roleLocalService.getRole(roleId);
    if (role.getType() == RoleConstants.TYPE_REGULAR) {
      regularRoleIdsSet.add(roleId);
    }
 else {
      groupRoleIdsSet.add(roleId);
    }
  }
  long[] regularRoleIds=ArrayUtil.toLongArray(regularRoleIdsSet);
  userPersistence.addRoles(userId,regularRoleIds);
  Set<UserGroupRole> userGroupRolesSet=new LinkedHashSet<>();
  long[] groupIds=user.getGroupIds();
  for (  long groupRoleId : groupRoleIdsSet) {
    for (    long groupId : groupIds) {
      UserGroupRolePK userGroupRolePK=new UserGroupRolePK(userId,groupId,groupRoleId);
      UserGroupRole userGroupRole=userGroupRolePersistence.create(userGroupRolePK);
      userGroupRolesSet.add(userGroupRole);
    }
  }
  List<UserGroupRole> previousUserGroupRoles=userGroupRolePersistence.findByUserId(userId);
  updateUserGroupRoles(user,groupIds,null,new ArrayList<>(userGroupRolesSet),previousUserGroupRoles);
}
