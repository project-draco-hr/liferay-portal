{
  User user=userPersistence.findByPrimaryKey(userId);
  if (!silentUpdate) {
    validatePassword(user.getCompanyId(),userId,password1,password2);
  }
  String oldEncPwd=user.getPassword();
  if (!user.isPasswordEncrypted()) {
    oldEncPwd=PasswordEncryptorUtil.encrypt(user.getPassword());
  }
  String newEncPwd=PasswordEncryptorUtil.encrypt(password1);
  if (user.hasCompanyMx()) {
    mailService.updatePassword(user.getCompanyId(),userId,password1);
  }
  user.setPassword(newEncPwd);
  user.setPasswordUnencrypted(password1);
  user.setPasswordEncrypted(true);
  user.setPasswordReset(passwordReset);
  if (!silentUpdate || (user.getPasswordModifiedDate() == null)) {
    user.setPasswordModifiedDate(new Date());
  }
  user.setDigest(StringPool.BLANK);
  user.setGraceLoginCount(0);
  if (!silentUpdate) {
    user.setPasswordModified(true);
  }
  boolean passwordModified=PrincipalThreadLocal.isPasswordModified();
  PrincipalThreadLocal.setPasswordModified(user.getPasswordModified());
  String passwordUnencrypted=PrincipalThreadLocal.getPasswordUnencrypted();
  PrincipalThreadLocal.setPasswordUnencrypted(user.getPasswordUnencrypted());
  try {
    try {
      user=userPersistence.update(user);
    }
 catch (    ModelListenerException mle) {
      String msg=GetterUtil.getString(mle.getCause().getMessage());
      if (LDAPSettingsUtil.isPasswordPolicyEnabled(user.getCompanyId())) {
        String[] errorPasswordHistoryKeywords=LDAPSettingsUtil.getErrorPasswordHistoryKeywords(user.getCompanyId());
        for (        String errorPasswordHistoryKeyword : errorPasswordHistoryKeywords) {
          if (msg.contains(errorPasswordHistoryKeyword)) {
            throw new UserPasswordException.MustNotBeRecentlyUsed(userId);
          }
        }
      }
      throw new UserPasswordException.MustComplyWithModelListeners(userId,mle);
    }
    if (!silentUpdate) {
      user.setPasswordModified(false);
      passwordTrackerLocalService.trackPassword(userId,oldEncPwd);
    }
    if (!silentUpdate && (PrincipalThreadLocal.getUserId() != userId)) {
      sendPasswordNotification(user,user.getCompanyId(),password1,null,null,null,null,null,ServiceContextThreadLocal.getServiceContext());
    }
  }
  finally {
    PrincipalThreadLocal.setPasswordModified(passwordModified);
    PrincipalThreadLocal.setPasswordUnencrypted(passwordUnencrypted);
  }
  return user;
}
