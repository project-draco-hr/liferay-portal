{
  User user=userPersistence.findByPrimaryKey(userId);
  if (!silentUpdate) {
    validatePassword(user.getCompanyId(),userId,password1,password2);
    trackPassword(user);
  }
  String newEncPwd=PasswordEncryptorUtil.encrypt(password1);
  if (user.hasCompanyMx()) {
    mailService.updatePassword(user.getCompanyId(),userId,password1);
  }
  user.setPassword(newEncPwd);
  user.setPasswordUnencrypted(password1);
  user.setPasswordEncrypted(true);
  user.setPasswordReset(passwordReset);
  if (!silentUpdate || (user.getPasswordModifiedDate() == null)) {
    user.setPasswordModifiedDate(new Date());
  }
  user.setDigest(StringPool.BLANK);
  user.setGraceLoginCount(0);
  if (!silentUpdate) {
    user.setPasswordModified(true);
  }
  PasswordModificationThreadLocal.setPasswordModified(user.getPasswordModified());
  PasswordModificationThreadLocal.setPasswordUnencrypted(user.getPasswordUnencrypted());
  try {
    user=userPersistence.update(user);
  }
 catch (  ModelListenerException mle) {
    String msg=GetterUtil.getString(mle.getCause().getMessage());
    if (LDAPSettingsUtil.isPasswordPolicyEnabled(user.getCompanyId())) {
      String[] errorPasswordHistoryKeywords=LDAPSettingsUtil.getErrorPasswordHistoryKeywords(user.getCompanyId());
      for (      String errorPasswordHistoryKeyword : errorPasswordHistoryKeywords) {
        if (msg.contains(errorPasswordHistoryKeyword)) {
          throw new UserPasswordException.MustNotBeRecentlyUsed(userId);
        }
      }
    }
    throw new UserPasswordException.MustComplyWithModelListeners(userId,mle);
  }
  if (!silentUpdate) {
    user.setPasswordModified(false);
  }
  if (!silentUpdate && (PrincipalThreadLocal.getUserId() != userId)) {
    sendPasswordNotification(user,user.getCompanyId(),password1,null,null,null,null,null,ServiceContextThreadLocal.getServiceContext());
  }
  return user;
}
