{
  int initialNotInTrashCount=getNotInTrashCount();
  int initialTrashEntriesCount=getTrashEntriesCount();
  int initialSearchFileEntriesCount=searchFileEntriesCount();
  Folder folder=addFolder(false,"Test Folder");
  Folder subfolder=addFolder(folder.getFolderId(),"Test Subfolder");
  long fileEntryId=0;
  if (file) {
    FileEntry fileEntry=addFileEntry(subfolder.getFolderId(),"Test File.txt");
    fileEntryId=fileEntry.getFileEntryId();
    addFileRank(fileEntryId);
    Thread.sleep(1000 * TestPropsValues.JUNIT_DELAY_FACTOR);
    Assert.assertEquals(initialSearchFileEntriesCount + 1,searchFileEntriesCount());
    Assert.assertTrue(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
    if (trashFile) {
      DLAppServiceUtil.moveFileEntryToTrash(fileEntryId);
    }
  }
  Assert.assertEquals(initialNotInTrashCount + 1,getNotInTrashCount());
  if (trashFile) {
    Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount());
  }
 else {
    Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount());
  }
  DLAppServiceUtil.moveFolderToTrash(folder.getFolderId());
  Assert.assertEquals(initialNotInTrashCount,getNotInTrashCount());
  if (trashFile) {
    Assert.assertEquals(initialTrashEntriesCount + 2,getTrashEntriesCount());
  }
 else {
    Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount());
  }
  Thread.sleep(1000 * TestPropsValues.JUNIT_DELAY_FACTOR);
  Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
  if (file) {
    Assert.assertFalse(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
    Assert.assertEquals(0,getActiveFileRanksCount(fileEntryId));
  }
  if (delete) {
    TrashEntryServiceUtil.deleteEntries(folder.getGroupId());
    Thread.sleep(1000 * TestPropsValues.JUNIT_DELAY_FACTOR);
    Assert.assertEquals(initialNotInTrashCount,getNotInTrashCount());
    Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
    if (file) {
      Assert.assertNull(fetchAssetEntry(DLFileEntryConstants.getClassName(),fileEntryId));
    }
  }
 else   if (moveFileFromTrash) {
    DLAppServiceUtil.moveFileEntryFromTrash(fileEntryId,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,ServiceTestUtil.getServiceContext());
    Thread.sleep(1000 * TestPropsValues.JUNIT_DELAY_FACTOR);
    Assert.assertTrue(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
    Assert.assertEquals(1,getActiveFileRanksCount(fileEntryId));
    Assert.assertEquals(initialSearchFileEntriesCount + 1,searchFileEntriesCount());
  }
 else {
    DLAppServiceUtil.restoreFolderFromTrash(folder.getFolderId());
    Thread.sleep(1000 * TestPropsValues.JUNIT_DELAY_FACTOR);
    Assert.assertEquals(initialNotInTrashCount + 1,getNotInTrashCount());
    if (file) {
      if (trashFile) {
        Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount());
        Assert.assertEquals(initialSearchFileEntriesCount,searchFileEntriesCount());
        Assert.assertFalse(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
        return;
      }
 else {
        Assert.assertEquals(initialSearchFileEntriesCount + 1,searchFileEntriesCount());
        Assert.assertTrue(isAssetEntryVisible(DLFileEntryConstants.getClassName(),fileEntryId));
        Assert.assertEquals(1,getActiveFileRanksCount(fileEntryId));
      }
    }
  }
  if (moveFileFromTrash) {
    Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount());
    DLAppServiceUtil.deleteFileEntry(fileEntryId);
  }
 else {
    Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount());
  }
}
