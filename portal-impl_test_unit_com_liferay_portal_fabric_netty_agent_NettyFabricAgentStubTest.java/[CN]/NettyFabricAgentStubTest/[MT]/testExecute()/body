{
  final NettyFabricAgentStub nettyFabricAgentStub=new NettyFabricAgentStub(_embeddedChannel,new MockRepository(),Paths.get("RepositoryPath"),0);
  AtomicLong idGenerator=ReflectionTestUtil.getFieldValue(nettyFabricAgentStub,"_idGenerator");
  long id=idGenerator.get();
  Builder builder=new Builder();
  ProcessConfig processConfig=builder.build();
  final File testFile1=new File("TestFile1");
  final File testFile2=new File("TestFile2");
  final File testFile3=new File("TestFile3");
  ProcessCallable<String> processCallable=new ProcessCallable<String>(){
    @Override public String call(){
      return "Test Result";
    }
    @OutputResource private final File _testOutput1=testFile1;
    @SuppressWarnings("unused") private final File _testOutput2=testFile2;
    @OutputResource private final File _testOutput3=testFile3;
    @OutputResource private final String _notAFile="Not a File";
  }
;
  ChannelPipeline channelPipeline=_embeddedChannel.pipeline();
  channelPipeline.addLast(new ChannelOutboundHandlerAdapter(){
    @Override public void write(    ChannelHandlerContext channelHandlerContext,    Object obj,    ChannelPromise channelPromise) throws Exception {
      super.write(channelHandlerContext,obj,channelPromise);
      if (!(obj instanceof NettyFabricWorkerConfig)) {
        return;
      }
      NettyFabricWorkerConfig<?> nettyFabricWorkerConfig=(NettyFabricWorkerConfig<?>)obj;
      nettyFabricAgentStub.finsihStartup(nettyFabricWorkerConfig.getId());
    }
  }
);
  FabricWorker<String> fabricWorker=ReflectionTestUtil.invokeBridge(nettyFabricAgentStub,"execute",new Class<?>[]{ProcessConfig.class,ProcessCallable.class},processConfig,processCallable);
  Queue<Object> messages=_embeddedChannel.outboundMessages();
  Assert.assertEquals(1,messages.size());
  NettyFabricWorkerConfig<String> nettyFabricWorkerConfig=(NettyFabricWorkerConfig<String>)messages.poll();
  Assert.assertEquals(id,nettyFabricWorkerConfig.getId());
  Assert.assertSame(processConfig,nettyFabricWorkerConfig.getProcessConfig());
  Assert.assertSame(processCallable,nettyFabricWorkerConfig.getProcessCallable());
  Collection<? extends FabricWorker<?>> fabricWorkers=nettyFabricAgentStub.getFabricWorkers();
  Assert.assertEquals(1,fabricWorkers.size());
  Assert.assertTrue(fabricWorkers.contains(fabricWorker));
  NoticeableFuture<String> noticeableFuture=fabricWorker.getProcessNoticeableFuture();
  Assert.assertFalse(noticeableFuture.isDone());
  NettyFabricWorkerStub<String> nettyFabricWorkerStub=(NettyFabricWorkerStub<String>)nettyFabricAgentStub.takeNettyStubFabricWorker(id);
  Assert.assertTrue(fabricWorkers.isEmpty());
  Map<Path,Path> outputResourceMap=ReflectionTestUtil.getFieldValue(nettyFabricWorkerStub,"_outputResourceMap");
  Assert.assertEquals(2,outputResourceMap.size());
  Path path1=testFile1.toPath();
  path1=path1.toAbsolutePath();
  Path mappedPath1=outputResourceMap.get(path1);
  Assert.assertNotNull(mappedPath1);
  Assert.assertEquals(ReflectionTestUtil.getFieldValue(processCallable,"_testOutput1"),mappedPath1.toFile());
  Path path3=testFile3.toPath();
  path3=path3.toAbsolutePath();
  Path mappedPath3=outputResourceMap.get(path3);
  Assert.assertNotNull(mappedPath3);
  Assert.assertEquals(ReflectionTestUtil.getFieldValue(processCallable,"_testOutput3"),mappedPath3.toFile());
  nettyFabricWorkerStub.setResult(processCallable.call());
  Assert.assertEquals(processCallable.call(),noticeableFuture.get());
  nettyFabricAgentStub.finsihStartup(id);
}
