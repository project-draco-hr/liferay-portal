{
  final NettyFabricAgentStub nettyFabricAgentStub=new NettyFabricAgentStub(_embeddedChannel,new MockRepository(),Paths.get("RepositoryPath"),0,Long.MAX_VALUE);
  AtomicLong idGenerator=ReflectionTestUtil.getFieldValue(nettyFabricAgentStub,"_idGenerator");
  long id=idGenerator.get();
  Builder builder=new Builder();
  ProcessConfig processConfig=builder.build();
  File testFile1=new File("TestFile1");
  File testFile2=new File("TestFile2");
  File testFile3=new File("TestFile3");
  ProcessCallable<String> processCallable=new TestProcessCallable(testFile1,testFile2,testFile3);
  ChannelPipeline channelPipeline=_embeddedChannel.pipeline();
  channelPipeline.addLast(new ChannelOutboundHandlerAdapter(){
    @Override public void write(    ChannelHandlerContext channelHandlerContext,    Object obj,    ChannelPromise channelPromise) throws Exception {
      super.write(channelHandlerContext,obj,channelPromise);
      if (!(obj instanceof NettyFabricWorkerConfig)) {
        return;
      }
      NettyFabricWorkerConfig<?> nettyFabricWorkerConfig=(NettyFabricWorkerConfig<?>)obj;
      nettyFabricAgentStub.finsihStartup(nettyFabricWorkerConfig.getId());
    }
  }
);
  FabricWorker<String> fabricWorker=ReflectionTestUtil.invokeBridge(nettyFabricAgentStub,"execute",new Class<?>[]{ProcessConfig.class,ProcessCallable.class},processConfig,processCallable);
  Queue<Object> messages=_embeddedChannel.outboundMessages();
  Assert.assertEquals(1,messages.size());
  NettyFabricWorkerConfig<String> nettyFabricWorkerConfig=(NettyFabricWorkerConfig<String>)messages.poll();
  Assert.assertEquals(id,nettyFabricWorkerConfig.getId());
  Assert.assertSame(processConfig,nettyFabricWorkerConfig.getProcessConfig());
  ProcessCallable<String> nettyFabricWorkerProcessCallable=nettyFabricWorkerConfig.getProcessCallable();
  Assert.assertNotSame(processCallable,nettyFabricWorkerProcessCallable);
  Assert.assertEquals(processCallable.toString(),nettyFabricWorkerProcessCallable.toString());
  Assert.assertEquals(processCallable.call(),nettyFabricWorkerProcessCallable.call());
  Collection<? extends FabricWorker<?>> fabricWorkers=nettyFabricAgentStub.getFabricWorkers();
  Assert.assertEquals(1,fabricWorkers.size());
  Assert.assertTrue(fabricWorkers.contains(fabricWorker));
  NoticeableFuture<String> noticeableFuture=fabricWorker.getProcessNoticeableFuture();
  Assert.assertFalse(noticeableFuture.isDone());
  NettyFabricWorkerStub<String> nettyFabricWorkerStub=(NettyFabricWorkerStub<String>)nettyFabricAgentStub.takeNettyStubFabricWorker(id);
  Assert.assertTrue(fabricWorkers.isEmpty());
  Map<Path,Path> outputPathMap=ReflectionTestUtil.getFieldValue(nettyFabricWorkerStub,"_outputPathMap");
  Assert.assertEquals(2,outputPathMap.size());
  Path path1=testFile1.toPath();
  File testOutput1=ReflectionTestUtil.getFieldValue(processCallable,"_testOutput1");
  Assert.assertEquals(path1,outputPathMap.get(testOutput1.toPath()));
  Path path3=testFile3.toPath();
  File testOutput3=ReflectionTestUtil.getFieldValue(processCallable,"_testOutput3");
  Assert.assertEquals(path3,outputPathMap.get(testOutput3.toPath()));
  nettyFabricWorkerStub.setResult(processCallable.call());
  Assert.assertEquals(processCallable.call(),noticeableFuture.get());
  nettyFabricAgentStub.finsihStartup(id);
}
