{
  long pk=RandomTestUtil.nextLong();
  KaleoTransition newKaleoTransition=_persistence.create(pk);
  newKaleoTransition.setGroupId(RandomTestUtil.nextLong());
  newKaleoTransition.setCompanyId(RandomTestUtil.nextLong());
  newKaleoTransition.setUserId(RandomTestUtil.nextLong());
  newKaleoTransition.setUserName(RandomTestUtil.randomString());
  newKaleoTransition.setCreateDate(RandomTestUtil.nextDate());
  newKaleoTransition.setModifiedDate(RandomTestUtil.nextDate());
  newKaleoTransition.setKaleoDefinitionId(RandomTestUtil.nextLong());
  newKaleoTransition.setKaleoNodeId(RandomTestUtil.nextLong());
  newKaleoTransition.setName(RandomTestUtil.randomString());
  newKaleoTransition.setDescription(RandomTestUtil.randomString());
  newKaleoTransition.setSourceKaleoNodeId(RandomTestUtil.nextLong());
  newKaleoTransition.setSourceKaleoNodeName(RandomTestUtil.randomString());
  newKaleoTransition.setTargetKaleoNodeId(RandomTestUtil.nextLong());
  newKaleoTransition.setTargetKaleoNodeName(RandomTestUtil.randomString());
  newKaleoTransition.setDefaultTransition(RandomTestUtil.randomBoolean());
  _kaleoTransitions.add(_persistence.update(newKaleoTransition));
  KaleoTransition existingKaleoTransition=_persistence.findByPrimaryKey(newKaleoTransition.getPrimaryKey());
  Assert.assertEquals(existingKaleoTransition.getKaleoTransitionId(),newKaleoTransition.getKaleoTransitionId());
  Assert.assertEquals(existingKaleoTransition.getGroupId(),newKaleoTransition.getGroupId());
  Assert.assertEquals(existingKaleoTransition.getCompanyId(),newKaleoTransition.getCompanyId());
  Assert.assertEquals(existingKaleoTransition.getUserId(),newKaleoTransition.getUserId());
  Assert.assertEquals(existingKaleoTransition.getUserName(),newKaleoTransition.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoTransition.getCreateDate()),Time.getShortTimestamp(newKaleoTransition.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoTransition.getModifiedDate()),Time.getShortTimestamp(newKaleoTransition.getModifiedDate()));
  Assert.assertEquals(existingKaleoTransition.getKaleoDefinitionId(),newKaleoTransition.getKaleoDefinitionId());
  Assert.assertEquals(existingKaleoTransition.getKaleoNodeId(),newKaleoTransition.getKaleoNodeId());
  Assert.assertEquals(existingKaleoTransition.getName(),newKaleoTransition.getName());
  Assert.assertEquals(existingKaleoTransition.getDescription(),newKaleoTransition.getDescription());
  Assert.assertEquals(existingKaleoTransition.getSourceKaleoNodeId(),newKaleoTransition.getSourceKaleoNodeId());
  Assert.assertEquals(existingKaleoTransition.getSourceKaleoNodeName(),newKaleoTransition.getSourceKaleoNodeName());
  Assert.assertEquals(existingKaleoTransition.getTargetKaleoNodeId(),newKaleoTransition.getTargetKaleoNodeId());
  Assert.assertEquals(existingKaleoTransition.getTargetKaleoNodeName(),newKaleoTransition.getTargetKaleoNodeName());
  Assert.assertEquals(existingKaleoTransition.getDefaultTransition(),newKaleoTransition.getDefaultTransition());
}
