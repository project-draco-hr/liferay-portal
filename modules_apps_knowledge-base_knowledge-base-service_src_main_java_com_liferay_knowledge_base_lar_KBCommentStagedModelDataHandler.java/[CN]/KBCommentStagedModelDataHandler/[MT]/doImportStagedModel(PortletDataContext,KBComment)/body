{
  long userId=portletDataContext.getUserId(kbComment.getUserUuid());
  Map<Long,Long> relatedClassPKs=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(kbComment.getClassName());
  long newClassPK=MapUtil.getLong(relatedClassPKs,kbComment.getClassPK(),kbComment.getClassPK());
  ServiceContext serviceContext=portletDataContext.createServiceContext(kbComment);
  KBComment importedKBComment=null;
  if (portletDataContext.isDataStrategyMirror()) {
    KBComment existingKBComment=fetchStagedModelByUuidAndGroupId(kbComment.getUuid(),portletDataContext.getScopeGroupId());
    if (existingKBComment == null) {
      serviceContext.setUuid(kbComment.getUuid());
      importedKBComment=KBCommentLocalServiceUtil.addKBComment(userId,kbComment.getClassNameId(),newClassPK,kbComment.getContent(),kbComment.getUserRating(),serviceContext);
    }
 else {
      importedKBComment=KBCommentLocalServiceUtil.updateKBComment(existingKBComment.getKbCommentId(),kbComment.getClassNameId(),newClassPK,kbComment.getContent(),kbComment.getUserRating(),kbComment.getStatus(),serviceContext);
    }
  }
 else {
    importedKBComment=KBCommentLocalServiceUtil.addKBComment(userId,kbComment.getClassNameId(),newClassPK,kbComment.getContent(),kbComment.getUserRating(),serviceContext);
  }
  portletDataContext.importClassedModel(kbComment,importedKBComment);
}
