{
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  final Thread mainThread=Thread.currentThread();
  Thread interruptThread=new Thread(){
    @Override public void run(){
      try {
        countDownLatch.await();
        while (mainThread.getState() != State.WAITING)         ;
        ExecutorService executorService=_getExecutorService();
        executorService.shutdownNow();
      }
 catch (      Exception e) {
        fail();
      }
    }
  }
;
  interruptThread.start();
  final Future<?> future=ProcessUtil.execute(new OutputProcessor<Void,Void>(){
    public Void processStdErr(    InputStream stdErrInputStream){
      return null;
    }
    public Void processStdOut(    InputStream stdOutInputStream){
      return null;
    }
  }
,_buildArguments(Pause.class));
  try {
    countDownLatch.countDown();
    future.get();
    fail();
  }
 catch (  ExecutionException ee) {
    Throwable throwable=ee.getCause();
    assertEquals(ProcessException.class,throwable.getClass());
    assertEquals("Forcibly killed subprocess on interruption",throwable.getMessage());
  }
}
