{
  Logger logger=_getLogger();
  Level level=logger.getLevel();
  logger.setLevel(Level.INFO);
  CaptureHandler captureHandler=new CaptureHandler();
  logger.addHandler(captureHandler);
  try {
    Future<?> future=ProcessUtil.execute(ProcessUtil.LOGGING_OUTPUT_PROCESSOR,_buildArguments(Echo.class,"2"));
    future.get();
    future.cancel(true);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    List<String> messageRecords=new ArrayList<String>();
    for (    LogRecord logRecord : logRecords) {
      messageRecords.add(logRecord.getMessage());
    }
    assertTrue(messageRecords.contains("{stdErr}" + Echo.class.getName() + "0"));
    assertTrue(messageRecords.contains("{stdErr}" + Echo.class.getName() + "1"));
    assertTrue(messageRecords.contains("{stdOut}" + Echo.class.getName() + "0"));
    assertTrue(messageRecords.contains("{stdOut}" + Echo.class.getName() + "1"));
  }
  finally {
    logger.removeHandler(captureHandler);
    logger.setLevel(level);
  }
}
