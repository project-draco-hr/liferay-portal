{
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(LoggingOutputProcessor.class.getName(),Level.INFO);
  try {
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Future<ObjectValuePair<Void,Void>> loggingFuture=ProcessUtil.execute(ProcessUtil.LOGGING_OUTPUT_PROCESSOR,_buildArguments(Echo.class,"2"));
    loggingFuture.get();
    loggingFuture.cancel(true);
    List<String> messageRecords=new ArrayList<>();
    for (    LogRecord logRecord : logRecords) {
      messageRecords.add(logRecord.getMessage());
    }
    Assert.assertTrue(messageRecords.contains(Echo.buildMessage(false,0)));
    Assert.assertTrue(messageRecords.contains(Echo.buildMessage(false,1)));
    Assert.assertTrue(messageRecords.contains(Echo.buildMessage(true,0)));
    Assert.assertTrue(messageRecords.contains(Echo.buildMessage(true,1)));
  }
  finally {
    captureHandler.close();
  }
  Future<ObjectValuePair<byte[],byte[]>> collectorFuture=ProcessUtil.execute(ProcessUtil.COLLECTOR_OUTPUT_PROCESSOR,_buildArguments(Echo.class,"2"));
  ObjectValuePair<byte[],byte[]> objectValuePair=collectorFuture.get();
  collectorFuture.cancel(true);
  Assert.assertEquals(Echo.buildMessage(true,0) + "\n" + Echo.buildMessage(true,1)+ "\n",new String(objectValuePair.getKey()));
  Assert.assertEquals(Echo.buildMessage(false,0) + "\n" + Echo.buildMessage(false,1)+ "\n",new String(objectValuePair.getValue()));
}
