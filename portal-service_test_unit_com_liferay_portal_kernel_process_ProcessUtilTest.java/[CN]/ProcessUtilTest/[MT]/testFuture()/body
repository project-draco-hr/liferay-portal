{
  String[] arguments=_buildArguments(Pause.class);
  Future<?> future=ProcessUtil.execute(ProcessUtil.CONSUMER_OUTPUT_PROCESSOR,arguments);
  assertFalse(future.isCancelled());
  assertFalse(future.isDone());
  try {
    future.get(1,TimeUnit.SECONDS);
    fail();
  }
 catch (  TimeoutException te) {
  }
  future.cancel(true);
  future.cancel(true);
  future=ProcessUtil.execute(new ConsumerOutputProcessor(){
    @Override public Void processStdErr(    InputStream stdOutInputStream) throws ProcessException {
      return null;
    }
  }
,arguments);
  assertFalse(future.isCancelled());
  assertFalse(future.isDone());
  try {
    future.get(1,TimeUnit.SECONDS);
    fail();
  }
 catch (  TimeoutException te) {
  }
  future.cancel(true);
  arguments=_buildArguments(Echo.class,"0");
  future=ProcessUtil.execute(ProcessUtil.CONSUMER_OUTPUT_PROCESSOR,arguments);
  future.get(1,TimeUnit.SECONDS);
}
