{
  ProcessUtil processUtil=new ProcessUtil();
  processUtil.destroy();
  Assert.assertNull(_getExecutorService());
  ExecutorService executorService=_invokeGetThreadPoolExecutor();
  Assert.assertNotNull(executorService);
  Assert.assertNotNull(_getExecutorService());
  processUtil.destroy();
  Assert.assertNull(_getExecutorService());
  executorService=_invokeGetThreadPoolExecutor();
  Assert.assertNotNull(executorService);
  Assert.assertNotNull(_getExecutorService());
  DummyJob dummyJob=new DummyJob();
  Future<Void> future=executorService.submit(dummyJob);
  dummyJob.waitUntilStarted();
  processUtil.destroy();
  try {
    future.get();
    Assert.fail();
  }
 catch (  ExecutionException ee) {
    Throwable throwable=ee.getCause();
    Assert.assertTrue(throwable instanceof InterruptedException);
  }
  Assert.assertNull(_getExecutorService());
  _invokeGetThreadPoolExecutor();
  final ProcessUtil referenceProcessUtil=processUtil;
  Thread thread=new Thread(){
    @Override public void run(){
      referenceProcessUtil.destroy();
    }
  }
;
synchronized (ProcessUtil.class) {
    thread.start();
    while (thread.getState() != Thread.State.BLOCKED)     ;
    processUtil.destroy();
  }
  thread.join();
  _invokeGetThreadPoolExecutor();
  processUtil.destroy();
  processUtil.destroy();
  Assert.assertNull(_getExecutorService());
}
