{
  Collection<JavaFileObject> javaFileObjects=_javaFileObjectCache.get(path);
  if (javaFileObjects != null) {
    return javaFileObjects;
  }
  List<URL> urls=null;
  Map<String,List<URL>> extraPackageMap=_serviceTracker.getService();
  if (extraPackageMap != null) {
    urls=extraPackageMap.get(path.replace('/','.'));
  }
  if ((urls == null) || urls.isEmpty()) {
    ClassLoader classLoader=bundleWiring.getClassLoader();
    try {
      Enumeration<URL> enumeration=classLoader.getResources(path);
      if ((enumeration != null) && enumeration.hasMoreElements()) {
        urls=Collections.list(enumeration);
      }
    }
 catch (    IOException ioe) {
      _logger.log(Logger.LOG_ERROR,ioe.getMessage(),ioe);
    }
  }
  if ((urls == null) || urls.isEmpty()) {
    _javaFileObjectCache.put(path,Collections.<JavaFileObject>emptyList());
    return Collections.emptyList();
  }
  for (  URL url : urls) {
    try (FileSystem fileSystem=openFileSystem(url)){
      FileSystemProvider fileSystemProvider=fileSystem.provider();
      try (DirectoryStream<Path> directoryStream=fileSystemProvider.newDirectoryStream(fileSystem.getPath(path),new Filter<Path>(){
        @Override public boolean accept(        Path entryPath){
          Path fileNamePath=entryPath.getFileName();
          String fileName=fileNamePath.toString();
          return fileName.endsWith(".class");
        }
      }
)){
        for (        Path filePath : directoryStream) {
          if (javaFileObjects == null) {
            javaFileObjects=new ArrayList<>();
          }
          URI uri=filePath.toUri();
          String filePathString=filePath.toString();
          javaFileObjects.add(getJavaFileObject(uri.toURL(),filePathString.substring(1)));
        }
      }
     }
 catch (    Exception e) {
      _logger.log(Logger.LOG_ERROR,e.getMessage(),e);
    }
  }
  if (javaFileObjects == null) {
    javaFileObjects=Collections.<JavaFileObject>emptyList();
  }
  _javaFileObjectCache.put(path,javaFileObjects);
  return javaFileObjects;
}
