{
  String key=path + "/*.class";
  Collection<String> resources=_jspResourceCache.get(key);
  if (resources != null) {
    return resources;
  }
  resources=new ArrayList<>();
  String packageName=path.replace('/','.');
  List<URL> urls=null;
  Map<String,List<URL>> extraPackageMap=_serviceTracker.getService();
  if (extraPackageMap != null) {
    urls=extraPackageMap.get(packageName);
  }
  if ((urls == null) || urls.isEmpty()) {
    ClassLoader classLoader=bundleWiring.getClassLoader();
    try {
      Enumeration<URL> enumeration=classLoader.getResources(path);
      if ((enumeration != null) && enumeration.hasMoreElements()) {
        urls=Collections.list(enumeration);
      }
    }
 catch (    IOException ioe) {
      _logger.log(Logger.LOG_ERROR,ioe.getMessage(),ioe);
    }
  }
  if ((urls == null) || urls.isEmpty()) {
    _jspResourceCache.put(key,resources);
    return resources;
  }
  String matcherRegex=replace("*.class",'*',"[^/]*");
  matcherRegex=replace(matcherRegex,'.',"\\.");
  matcherRegex=path + "/" + matcherRegex;
  Pattern pattern=Pattern.compile(matcherRegex);
  for (  URL url : urls) {
    try {
      JarFile jarFile=getJarFile(url);
      Enumeration<? extends ZipEntry> enumeration=jarFile.entries();
      while (enumeration.hasMoreElements()) {
        ZipEntry zipEntry=enumeration.nextElement();
        String name=zipEntry.getName();
        Matcher matcher=pattern.matcher(name);
        if (matcher.matches()) {
          resources.add(name);
        }
      }
    }
 catch (    Exception e) {
      _logger.log(Logger.LOG_ERROR,e.getMessage(),e);
    }
  }
  _jspResourceCache.put(key,resources);
  return resources;
}
