{
  UploadPortletRequest uploadPortletRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  String cmd=ParamUtil.getString(uploadPortletRequest,Constants.CMD);
  long fileEntryId=ParamUtil.getLong(uploadPortletRequest,"fileEntryId");
  long repositoryId=ParamUtil.getLong(uploadPortletRequest,"repositoryId");
  long folderId=ParamUtil.getLong(uploadPortletRequest,"folderId");
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  if (folderId > 0) {
    DLFolder folder=DLFolderLocalServiceUtil.getFolder(folderId);
    if (folder.getGroupId() != themeDisplay.getScopeGroupId()) {
      throw new NoSuchFolderException();
    }
  }
  String sourceFileName=uploadPortletRequest.getFileName("file");
  String title=ParamUtil.getString(uploadPortletRequest,"title");
  String description=ParamUtil.getString(uploadPortletRequest,"description");
  String changeLog=ParamUtil.getString(uploadPortletRequest,"changeLog");
  boolean majorVersion=ParamUtil.getBoolean(uploadPortletRequest,"majorVersion");
  InputStream inputStream=null;
  try {
    String contentType=uploadPortletRequest.getContentType("file");
    long size=uploadPortletRequest.getSize("file");
    if (cmd.equals(Constants.ADD) && (size == 0)) {
      contentType=MimeTypesUtil.getContentType(title);
    }
    if (cmd.equals(Constants.ADD) || (size > 0)) {
      String portletName=portletConfig.getPortletName();
      if (portletName.equals(PortletKeys.MEDIA_GALLERY_DISPLAY)) {
        String portletResource=ParamUtil.getString(actionRequest,"portletResource");
        PortletPreferences portletPreferences=null;
        if (Validator.isNotNull(portletResource)) {
          PortletPreferencesFactoryUtil.getPortletSetup(actionRequest,portletResource);
        }
 else {
          portletPreferences=actionRequest.getPreferences();
        }
        String[] mimeTypes=DLUtil.getMediaGalleryMimeTypes(portletPreferences,actionRequest);
        if (Arrays.binarySearch(mimeTypes,contentType) < 0) {
          throw new FileMimeTypeException(contentType);
        }
      }
    }
    inputStream=uploadPortletRequest.getFileAsStream("file");
    ServiceContext serviceContext=ServiceContextFactory.getInstance(DLFileEntry.class.getName(),actionRequest);
    FileEntry fileEntry=null;
    if (cmd.equals(Constants.ADD)) {
      if (Validator.isNull(title)) {
        title=sourceFileName;
      }
      fileEntry=DLAppServiceUtil.addFileEntry(repositoryId,folderId,sourceFileName,contentType,title,description,changeLog,inputStream,size,serviceContext);
      AssetPublisherUtil.addAndStoreSelection(actionRequest,DLFileEntry.class.getName(),fileEntry.getFileEntryId(),-1);
    }
 else     if (cmd.equals(Constants.UPDATE_AND_CHECKIN)) {
      fileEntry=DLAppServiceUtil.updateFileEntryAndCheckIn(fileEntryId,sourceFileName,contentType,title,description,changeLog,majorVersion,inputStream,size,serviceContext);
    }
 else {
      fileEntry=DLAppServiceUtil.updateFileEntry(fileEntryId,sourceFileName,contentType,title,description,changeLog,majorVersion,inputStream,size,serviceContext);
    }
    AssetPublisherUtil.addRecentFolderId(actionRequest,DLFileEntry.class.getName(),folderId);
  }
  finally {
    StreamUtil.cleanUp(inputStream);
  }
}
