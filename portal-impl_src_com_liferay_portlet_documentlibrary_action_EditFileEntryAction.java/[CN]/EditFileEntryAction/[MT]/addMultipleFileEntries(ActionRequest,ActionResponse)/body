{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long repositoryId=ParamUtil.getLong(actionRequest,"repositoryId");
  long folderId=ParamUtil.getLong(actionRequest,"folderId");
  String description=ParamUtil.getString(actionRequest,"description");
  String changeLog=ParamUtil.getString(actionRequest,"changeLog");
  long fileEntryTypeId=ParamUtil.getLong(actionRequest,"fileEntryTypeId");
  String[] selectedFileNames=ParamUtil.getParameterValues(actionRequest,"selectedFileName");
  List<String> validUpdateFileEntries=new ArrayList<String>();
  List<KeyValuePair> invalidUpdateFileEntries=new ArrayList<KeyValuePair>();
  for (  String selectedFileName : selectedFileNames) {
    String contentType=MimeTypesUtil.getContentType(selectedFileName);
    File file=TempFileUtil.getTempFile(themeDisplay.getUserId(),selectedFileName,_TEMP_FOLDERNAME);
    try {
      if (Validator.isNotNull(selectedFileName) && !file.exists()) {
        file.createNewFile();
      }
      ServiceContext serviceContext=ServiceContextFactory.getInstance(DLFileEntry.class.getName(),actionRequest);
      serviceContext.setAttribute("fileEntryTypeId",fileEntryTypeId);
      serviceContext.setAttribute("sourceFileName",selectedFileName);
      HashMap<String,Fields> fieldsMap=getFieldsMap(actionRequest,fileEntryTypeId);
      serviceContext.setAttribute("fieldsMap",fieldsMap);
      FileEntry fileEntry=DLAppServiceUtil.addFileEntry(repositoryId,folderId,contentType,selectedFileName,description,changeLog,file,serviceContext);
      AssetPublisherUtil.addAndStoreSelection(actionRequest,DLFileEntry.class.getName(),fileEntry.getFileEntryId(),-1);
      AssetPublisherUtil.addRecentFolderId(actionRequest,DLFileEntry.class.getName(),folderId);
      validUpdateFileEntries.add(selectedFileName);
    }
 catch (    Exception e) {
      String errorMessage=LanguageUtil.get(themeDisplay.getLocale(),"an-unexpected-error-occurred-while-saving-your-" + "document");
      if (e instanceof DuplicateFileException) {
        errorMessage=LanguageUtil.get(themeDisplay.getLocale(),"the-folder-you-selected-already-has-an-entry-" + "with-this-name.-please-select-a-different-" + "folder");
      }
 else       if (e instanceof FileExtensionException) {
        errorMessage=LanguageUtil.format(themeDisplay.getLocale(),"please-enter-a-file-with-a-valid-extension-x",StringUtil.merge(PrefsPropsUtil.getStringArray(PropsKeys.DL_FILE_EXTENSIONS,StringPool.COMMA)));
      }
 else       if (e instanceof FileNameException) {
        errorMessage=LanguageUtil.get(themeDisplay.getLocale(),"please-enter-a-file-with-a-valid-file-name");
      }
 else       if (e instanceof FileSizeException) {
        long maxSizeMB=PrefsPropsUtil.getLong(PropsKeys.DL_FILE_MAX_SIZE) / 1024 / 1024;
        errorMessage=LanguageUtil.format(themeDisplay.getLocale(),"file-size-is-larger-than-x-megabytes",maxSizeMB);
      }
      invalidUpdateFileEntries.add(new KeyValuePair(selectedFileName,errorMessage));
    }
 finally {
      FileUtil.delete(file);
    }
  }
  JSONArray jsonArray=JSONFactoryUtil.createJSONArray();
  for (  String validUpdateFileEntry : validUpdateFileEntries) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
    jsonObject.put("fileName",validUpdateFileEntry);
    jsonObject.put("added",Boolean.TRUE);
    jsonArray.put(jsonObject);
  }
  for (  KeyValuePair invalidUpdateFileEntry : invalidUpdateFileEntries) {
    String fileName=invalidUpdateFileEntry.getKey();
    String errorMessage=invalidUpdateFileEntry.getValue();
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
    jsonObject.put("fileName",fileName);
    jsonObject.put("added",Boolean.FALSE);
    jsonObject.put("errorMessage",errorMessage);
    jsonArray.put(jsonObject);
  }
  HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
  HttpServletResponse response=PortalUtil.getHttpServletResponse(actionResponse);
  InputStream is=new UnsyncByteArrayInputStream(jsonArray.toString().getBytes());
  String contentType=ContentTypes.TEXT_JAVASCRIPT;
  ServletResponseUtil.sendFile(request,response,null,is,contentType);
}
