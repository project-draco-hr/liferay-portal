{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long repositoryId=ParamUtil.getLong(actionRequest,"repositoryId");
  long folderId=ParamUtil.getLong(actionRequest,"folderId");
  String contentType=MimeTypesUtil.getContentType(selectedFileName);
  String description=ParamUtil.getString(actionRequest,"description");
  String changeLog=ParamUtil.getString(actionRequest,"changeLog");
  long fileEntryTypeId=ParamUtil.getLong(actionRequest,"fileEntryTypeId");
  File file=null;
  try {
    file=TempFileUtil.getTempFile(themeDisplay.getUserId(),selectedFileName,_TEMP_FOLDER_NAME);
    if (Validator.isNotNull(selectedFileName) && !file.exists()) {
      file.createNewFile();
    }
    ServiceContext serviceContext=ServiceContextFactory.getInstance(DLFileEntry.class.getName(),actionRequest);
    HashMap<String,Fields> fieldsMap=getFieldsMap(actionRequest,fileEntryTypeId);
    serviceContext.setAttribute("fieldsMap",fieldsMap);
    serviceContext.setAttribute("fileEntryTypeId",fileEntryTypeId);
    serviceContext.setAttribute("sourceFileName",selectedFileName);
    FileEntry fileEntry=DLAppServiceUtil.addFileEntry(repositoryId,folderId,contentType,selectedFileName,description,changeLog,file,serviceContext);
    AssetPublisherUtil.addAndStoreSelection(actionRequest,DLFileEntry.class.getName(),fileEntry.getFileEntryId(),-1);
    AssetPublisherUtil.addRecentFolderId(actionRequest,DLFileEntry.class.getName(),folderId);
    validFileNames.add(selectedFileName);
    return;
  }
 catch (  Exception e) {
    String errorMessage=getAddMultipleFileEntriesErrorMessage(themeDisplay,e);
    invalidFileNameKVPs.add(new KeyValuePair(selectedFileName,errorMessage));
  }
 finally {
    FileUtil.delete(file);
  }
}
