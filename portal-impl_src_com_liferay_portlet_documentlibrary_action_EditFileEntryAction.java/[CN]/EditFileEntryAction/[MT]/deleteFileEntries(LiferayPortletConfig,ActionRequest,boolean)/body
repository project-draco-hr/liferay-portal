{
  long[] deleteFileEntryIds=null;
  long fileEntryId=ParamUtil.getLong(actionRequest,"fileEntryId");
  String version=ParamUtil.getString(actionRequest,"version");
  if ((fileEntryId > 0) && Validator.isNotNull(version)) {
    DLAppServiceUtil.deleteFileVersion(fileEntryId,version);
  }
 else {
    if (fileEntryId > 0) {
      deleteFileEntryIds=new long[]{fileEntryId};
    }
 else {
      deleteFileEntryIds=StringUtil.split(ParamUtil.getString(actionRequest,"deleteFileEntryIds"),0L);
    }
    for (    long deleteFileEntryId : deleteFileEntryIds) {
      if (moveToTrash) {
        DLAppServiceUtil.moveFileEntryToTrash(deleteFileEntryId);
      }
 else {
        DLAppServiceUtil.deleteFileEntry(deleteFileEntryId);
      }
    }
  }
  if (moveToTrash && (deleteFileEntryIds != null) && (deleteFileEntryIds.length > 0)) {
    Map<String,long[]> data=new HashMap<String,long[]>();
    data.put("restoreFileEntryIds",deleteFileEntryIds);
    SessionMessages.add(actionRequest,liferayPortletConfig.getPortletId() + SessionMessages.KEY_SUFFIX_DELETE_SUCCESS_DATA,data);
    SessionMessages.add(actionRequest,liferayPortletConfig.getPortletId() + SessionMessages.KEY_SUFFIX_HIDE_DEFAULT_SUCCESS_MESSAGE);
  }
}
