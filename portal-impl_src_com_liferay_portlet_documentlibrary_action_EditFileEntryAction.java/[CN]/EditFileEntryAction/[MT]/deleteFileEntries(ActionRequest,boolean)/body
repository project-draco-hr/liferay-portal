{
  long[] deleteFileEntryIds=null;
  long fileEntryId=ParamUtil.getLong(actionRequest,"fileEntryId");
  String version=ParamUtil.getString(actionRequest,"version");
  if ((fileEntryId > 0) && Validator.isNotNull(version)) {
    DLAppServiceUtil.deleteFileVersion(fileEntryId,version);
  }
 else {
    if (fileEntryId > 0) {
      deleteFileEntryIds=new long[]{fileEntryId};
    }
 else {
      deleteFileEntryIds=StringUtil.split(ParamUtil.getString(actionRequest,"deleteFileEntryIds"),0L);
    }
    for (    long deleteFileEntryId : deleteFileEntryIds) {
      if (moveToTrash) {
        DLAppServiceUtil.moveFileEntryToTrash(deleteFileEntryId);
      }
 else {
        DLAppServiceUtil.deleteFileEntry(deleteFileEntryId);
      }
    }
  }
  if (moveToTrash && (deleteFileEntryIds.length > 0)) {
    HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
    String portletId=(String)request.getAttribute(WebKeys.PORTLET_ID);
    Map<String,String> data=new HashMap<String,String>();
    data.put("trashedFileEntryIds",StringUtil.merge(deleteFileEntryIds));
    SessionMessages.add(actionRequest,WebKeys.TRASHED_ENTRIES,data);
    SessionMessages.add(actionRequest,WebKeys.UNDO_TYPE,PortletKeys.DOCUMENT_LIBRARY);
    SessionMessages.add(actionRequest,portletId + SessionMessages.KEY_SUFFIX_DELETE_SUCCESS,Boolean.TRUE);
  }
}
