{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long repositoryId=ParamUtil.getLong(actionRequest,"repositoryId");
  long folderId=ParamUtil.getLong(actionRequest,"folderId");
  String description=ParamUtil.getString(actionRequest,"description");
  String changeLog=ParamUtil.getString(actionRequest,"changeLog");
  FileEntry tempFileEntry=null;
  try {
    tempFileEntry=TempFileUtil.getTempFile(themeDisplay.getScopeGroupId(),themeDisplay.getUserId(),selectedFileName,_TEMP_FOLDER_NAME);
    String mimeType=tempFileEntry.getMimeType();
    InputStream inputStream=tempFileEntry.getContentStream();
    long size=tempFileEntry.getSize();
    ServiceContext serviceContext=ServiceContextFactory.getInstance(DLFileEntry.class.getName(),actionRequest);
    FileEntry fileEntry=DLAppServiceUtil.addFileEntry(repositoryId,folderId,selectedFileName,mimeType,selectedFileName,description,changeLog,inputStream,size,serviceContext);
    AssetPublisherUtil.addAndStoreSelection(actionRequest,DLFileEntry.class.getName(),fileEntry.getFileEntryId(),-1);
    AssetPublisherUtil.addRecentFolderId(actionRequest,DLFileEntry.class.getName(),folderId);
    validFileNames.add(selectedFileName);
    return;
  }
 catch (  Exception e) {
    String errorMessage=getAddMultipleFileEntriesErrorMessage(portletConfig,actionRequest,actionResponse,e);
    invalidFileNameKVPs.add(new KeyValuePair(selectedFileName,errorMessage));
  }
 finally {
    if (tempFileEntry != null) {
      TempFileUtil.deleteTempFile(tempFileEntry.getFileEntryId());
    }
  }
}
