{
  if (Validator.isNotNull(PropsValues.IGNORE_ERRORS_FILE_NAME)) {
    String content=FileUtil.read(PropsValues.IGNORE_ERRORS_FILE_NAME);
    InputStream inputStream=new ByteArrayInputStream(content.getBytes("UTF-8"));
    SAXReader saxReader=new SAXReader();
    Document document=saxReader.read(inputStream);
    Element rootElement=document.getRootElement();
    List<Element> ignoreErrorElements=rootElement.elements("ignore-error");
    for (    Element ignoreErrorElement : ignoreErrorElements) {
      Element containsElement=ignoreErrorElement.element("contains");
      Element matchesElement=ignoreErrorElement.element("matches");
      String partialMessage=containsElement.getText();
      String regex=matchesElement.getText();
      if (Validator.isNotNull(partialMessage) && Validator.isNotNull(regex)) {
        if (line.matches(regex) && line.contains(partialMessage)) {
          return true;
        }
      }
 else       if (Validator.isNotNull(partialMessage)) {
        if (line.contains(partialMessage)) {
          return true;
        }
      }
 else       if (Validator.isNotNull(regex)) {
        if (line.matches(regex)) {
          return true;
        }
      }
    }
  }
  if (Validator.equals(PropsValues.LIFERAY_PORTAL_BUNDLE,"6.2.10.1") || Validator.equals(PropsValues.LIFERAY_PORTAL_BUNDLE,"6.2.10.2") || Validator.equals(PropsValues.LIFERAY_PORTAL_BUNDLE,"6.2.10.3")|| Validator.equals(PropsValues.LIFERAY_PORTAL_BUNDLE,"6.2.10.4")|| Validator.equals(PropsValues.LIFERAY_PORTAL_BRANCH,"ee-6.2.10")) {
    if (line.contains("com.liferay.portal.kernel.search.SearchException: " + "java.nio.channels.ClosedByInterruptException")) {
      return true;
    }
    if (line.contains("org.apache.lucene.store.AlreadyClosedException")) {
      return true;
    }
  }
  if (Validator.isNotNull(PropsValues.IGNORE_ERRORS)) {
    if (Validator.isNotNull(PropsValues.IGNORE_ERRORS_DELIMITER)) {
      String ignoreErrorsDelimiter=PropsValues.IGNORE_ERRORS_DELIMITER;
      if (ignoreErrorsDelimiter.equals("|")) {
        ignoreErrorsDelimiter="\\|";
      }
      String[] ignoreErrors=PropsValues.IGNORE_ERRORS.split(ignoreErrorsDelimiter);
      for (      String ignoreError : ignoreErrors) {
        if (line.contains(ignoreError)) {
          return true;
        }
      }
    }
 else     if (line.contains(PropsValues.IGNORE_ERRORS)) {
      return true;
    }
  }
  return false;
}
