{
  try {
    List<String> commands=new ArrayList<String>(arguments.size() + 4);
    commands.add(java);
    commands.add("-cp");
    commands.add(classPath);
    commands.addAll(arguments);
    commands.add(ProcessExecutor.class.getName());
    ProcessBuilder processBuilder=new ProcessBuilder(commands.toArray(new String[commands.size()]));
    Process process=processBuilder.start();
    ObjectOutputStream objectOutputStream=new ObjectOutputStream(process.getOutputStream());
    try {
      objectOutputStream.writeObject(processCallable);
    }
  finally {
      objectOutputStream.close();
    }
    ExecutorService executorService=_getExecutorService();
    SubprocessReactor subprocessReactor=new SubprocessReactor(process);
    Future<ProcessCallable<? extends Serializable>> futureResponseProcessCallable=executorService.submit(subprocessReactor);
    return new ProcessExecutionFutureResult<T>(futureResponseProcessCallable,process);
  }
 catch (  IOException ioe) {
    throw new ProcessException(ioe);
  }
}
