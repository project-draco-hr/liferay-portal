{
  final DefaultNoticeableFuture<T> defaultNoticeableFuture=new DefaultNoticeableFuture<T>();
  defaultNoticeableFuture.addFutureListener(new FutureListener<T>(){
    @Override public void complete(    Future<T> future){
      if (future.isCancelled()) {
        processCallableNoticeableFuture.cancel(true);
        process.destroy();
      }
    }
  }
);
  processCallableNoticeableFuture.addFutureListener(new FutureListener<ProcessCallable<? extends Serializable>>(){
    @Override public void complete(    Future<ProcessCallable<? extends Serializable>> future){
      try {
        ProcessCallable<?> processCallable=future.get();
        if (processCallable instanceof ReturnProcessCallable<?>) {
          defaultNoticeableFuture.set((T)processCallable.call());
        }
        ExceptionProcessCallable exceptionProcessCallable=(ExceptionProcessCallable)processCallable;
        defaultNoticeableFuture.setException(exceptionProcessCallable.call());
      }
 catch (      Throwable t) {
        if (t instanceof ExecutionException) {
          t=t.getCause();
        }
        defaultNoticeableFuture.setException(t);
      }
    }
  }
);
  return defaultNoticeableFuture;
}
