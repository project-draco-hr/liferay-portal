{
  _installPredictableRandom();
  for (int i=0; i < 256; i++) {
    byte b=(byte)(i * 8);
    byte[] bytes=new byte[8];
    for (int j=0; j < 8; j++) {
      bytes[j]=(byte)(b + j);
    }
    Assert.assertEquals(BigEndianCodec.getDouble(bytes,0),SecureRandomUtil.nextDouble(),0);
  }
  long firstLong=_getFirstLong();
  long gapSeed=_getGapSeed();
  long result=firstLong ^ gapSeed;
  Assert.assertEquals(Double.longBitsToDouble(result),SecureRandomUtil.nextDouble(),0);
  for (int i=0; i < 256; i++) {
    byte b=(byte)(i * 8);
    byte[] bytes=new byte[8];
    for (int j=0; j < 8; j++) {
      bytes[j]=(byte)(b + j);
    }
    Assert.assertEquals(BigEndianCodec.getDouble(bytes,0),SecureRandomUtil.nextDouble(),0);
  }
}
