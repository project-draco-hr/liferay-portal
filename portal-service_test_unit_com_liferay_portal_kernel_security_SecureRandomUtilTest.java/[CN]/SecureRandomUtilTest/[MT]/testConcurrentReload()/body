{
  SecureRandom secureRandom=installPredictableRandom();
  FutureTask<Long> futureTask=new FutureTask<Long>(new Callable<Long>(){
    @Override public Long call(){
      return reload();
    }
  }
);
  Thread reloadThread=new Thread(futureTask);
  long gapValue=-1;
synchronized (secureRandom) {
    reloadThread.start();
    while (reloadThread.getState() != Thread.State.BLOCKED)     ;
    long gapSeed=getGapSeed();
    gapValue=reload();
    Assert.assertEquals(getFirstLong() ^ gapSeed,gapValue);
    Assert.assertEquals(gapValue,getGapSeed());
  }
  reloadThread.join();
  Assert.assertEquals((Long)(getFirstLong() ^ gapValue),futureTask.get());
}
