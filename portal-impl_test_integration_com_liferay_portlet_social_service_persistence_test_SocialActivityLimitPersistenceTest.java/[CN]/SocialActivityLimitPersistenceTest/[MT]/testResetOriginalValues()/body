{
  SocialActivityLimit newSocialActivityLimit=addSocialActivityLimit();
  _persistence.clearCache();
  SocialActivityLimit existingSocialActivityLimit=_persistence.findByPrimaryKey(newSocialActivityLimit.getPrimaryKey());
  Assert.assertEquals(Long.valueOf(existingSocialActivityLimit.getGroupId()),ReflectionTestUtil.<Long>invoke(existingSocialActivityLimit,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialActivityLimit.getUserId()),ReflectionTestUtil.<Long>invoke(existingSocialActivityLimit,"getOriginalUserId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialActivityLimit.getClassNameId()),ReflectionTestUtil.<Long>invoke(existingSocialActivityLimit,"getOriginalClassNameId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialActivityLimit.getClassPK()),ReflectionTestUtil.<Long>invoke(existingSocialActivityLimit,"getOriginalClassPK",new Class<?>[0]));
  Assert.assertEquals(Integer.valueOf(existingSocialActivityLimit.getActivityType()),ReflectionTestUtil.<Integer>invoke(existingSocialActivityLimit,"getOriginalActivityType",new Class<?>[0]));
  Assert.assertTrue(Objects.equals(existingSocialActivityLimit.getActivityCounterName(),ReflectionTestUtil.invoke(existingSocialActivityLimit,"getOriginalActivityCounterName",new Class<?>[0])));
}
