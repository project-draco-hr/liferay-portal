{
  if (!PropsValues.HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE) {
    return;
  }
  SocialActivityLimit newSocialActivityLimit=addSocialActivityLimit();
  _persistence.clearCache();
  SocialActivityLimit existingSocialActivityLimit=_persistence.findByPrimaryKey(newSocialActivityLimit.getPrimaryKey());
  Assert.assertEquals(existingSocialActivityLimit.getGroupId(),ReflectionTestUtil.invoke(existingSocialActivityLimit,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(existingSocialActivityLimit.getUserId(),ReflectionTestUtil.invoke(existingSocialActivityLimit,"getOriginalUserId",new Class<?>[0]));
  Assert.assertEquals(existingSocialActivityLimit.getClassNameId(),ReflectionTestUtil.invoke(existingSocialActivityLimit,"getOriginalClassNameId",new Class<?>[0]));
  Assert.assertEquals(existingSocialActivityLimit.getClassPK(),ReflectionTestUtil.invoke(existingSocialActivityLimit,"getOriginalClassPK",new Class<?>[0]));
  Assert.assertEquals(existingSocialActivityLimit.getActivityType(),ReflectionTestUtil.invoke(existingSocialActivityLimit,"getOriginalActivityType",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingSocialActivityLimit.getActivityCounterName(),ReflectionTestUtil.invoke(existingSocialActivityLimit,"getOriginalActivityCounterName",new Class<?>[0])));
}
