{
  long pk=nextLong();
  DeletionEntry newDeletionEntry=_persistence.create(pk);
  newDeletionEntry.setGroupId(nextLong());
  newDeletionEntry.setCompanyId(nextLong());
  newDeletionEntry.setCreateDate(nextDate());
  newDeletionEntry.setClassNameId(nextLong());
  newDeletionEntry.setClassPK(nextLong());
  newDeletionEntry.setClassUuid(randomString());
  newDeletionEntry.setParentId(nextLong());
  _persistence.update(newDeletionEntry,false);
  DeletionEntry existingDeletionEntry=_persistence.findByPrimaryKey(newDeletionEntry.getPrimaryKey());
  assertEquals(existingDeletionEntry.getEntryId(),newDeletionEntry.getEntryId());
  assertEquals(existingDeletionEntry.getGroupId(),newDeletionEntry.getGroupId());
  assertEquals(existingDeletionEntry.getCompanyId(),newDeletionEntry.getCompanyId());
  assertEquals(Time.getShortTimestamp(existingDeletionEntry.getCreateDate()),Time.getShortTimestamp(newDeletionEntry.getCreateDate()));
  assertEquals(existingDeletionEntry.getClassNameId(),newDeletionEntry.getClassNameId());
  assertEquals(existingDeletionEntry.getClassPK(),newDeletionEntry.getClassPK());
  assertEquals(existingDeletionEntry.getClassUuid(),newDeletionEntry.getClassUuid());
  assertEquals(existingDeletionEntry.getParentId(),newDeletionEntry.getParentId());
}
