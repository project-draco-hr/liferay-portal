{
  if ((args == null) || (args.length == 0)) {
    System.err.println("== Usage: <cmd> <list of lpkg files or directories " + "containing lpkg files>");
    return;
  }
  String moduleFrameworkBaseDirName=System.getProperty("module.framework.base.dir");
  if (moduleFrameworkBaseDirName == null) {
    System.err.println("== -Dmodule.framework.base.dir= must point to a valid " + "directory");
    return;
  }
  Path outputDirPath=Paths.get(moduleFrameworkBaseDirName,Indexer.DIR_NAME_TARGET_PLATFORM);
  String outputDirName=System.getProperty("output.dir");
  if (outputDirName != null) {
    outputDirPath=Paths.get(outputDirName);
  }
  Files.createDirectories(outputDirPath);
  List<File> lpkgFiles=new ArrayList<>();
  for (  String arg : args) {
    File file=new File(arg);
    if (!file.exists() || !file.canRead()) {
      continue;
    }
    if (!file.isDirectory()) {
      String name=file.getName();
      if (name.endsWith(".lpkg")) {
        lpkgFiles.add(file);
      }
      continue;
    }
    File[] childFiles=file.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.endsWith(".lpkg");
      }
    }
);
    for (    File childFile : childFiles) {
      if (childFile.exists() && childFile.canRead()) {
        lpkgFiles.add(childFile);
      }
    }
  }
  if (lpkgFiles.isEmpty()) {
    System.err.println("== No LPKG files found in " + Arrays.toString(args));
    return;
  }
  for (  File lpkgFile : lpkgFiles) {
    LPKGIndexer lpkgIndexer=new LPKGIndexer(lpkgFile);
    ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    lpkgIndexer.index(byteArrayOutputStream);
    Path indexFilePath=_getIndexFilePath(outputDirPath,lpkgFile);
    Files.write(indexFilePath,byteArrayOutputStream.toByteArray());
    System.out.println("== Wrote index file " + indexFilePath);
  }
}
