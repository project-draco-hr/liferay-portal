{
  Map<String,Serializable> taskContextMap=backgroundTask.getTaskContextMap();
  long userId=MapUtil.getLong(taskContextMap,"userId");
  long targetGroupId=MapUtil.getLong(taskContextMap,"targetGroupId");
  StagingUtil.lockGroup(userId,targetGroupId);
  long sourceGroupId=MapUtil.getLong(taskContextMap,"sourceGroupId");
  boolean privateLayout=MapUtil.getBoolean(taskContextMap,"privateLayout");
  long[] layoutIds=GetterUtil.getLongValues(taskContextMap.get("layoutIds"));
  Map<String,String[]> parameterMap=(Map<String,String[]>)taskContextMap.get("parameterMap");
  Date startDate=(Date)taskContextMap.get("startDate");
  Date endDate=(Date)taskContextMap.get("endDate");
  BackgroundTaskStatus backgroundTaskStatus=BackgroundTaskStatusRegistryUtil.getBackgroundTaskStatus(backgroundTask.getBackgroundTaskId());
  backgroundTaskStatus.clearAttributes();
  File larFile=null;
  MissingReferences missingReferences=null;
  try {
    larFile=LayoutLocalServiceUtil.exportLayoutsAsFile(sourceGroupId,privateLayout,layoutIds,parameterMap,startDate,endDate);
    missingReferences=LayoutLocalServiceUtil.validateImportLayoutsFile(userId,targetGroupId,privateLayout,parameterMap,larFile);
    LayoutLocalServiceUtil.importLayouts(userId,targetGroupId,privateLayout,parameterMap,larFile);
  }
  finally {
    FileUtil.delete(larFile);
    StagingUtil.unlockGroup(targetGroupId);
  }
  BackgroundTaskResult backgroundTaskResult=new BackgroundTaskResult(BackgroundTaskConstants.STATUS_SUCCESSFUL);
  Map<String,MissingReference> weakMissingReferences=missingReferences.getWeakMissingReferences();
  if ((weakMissingReferences != null) && !weakMissingReferences.isEmpty()) {
    JSONArray jsonArray=StagingUtil.getWarningMessagesJSONArray(getLocale(backgroundTask),weakMissingReferences,backgroundTask.getTaskContextMap());
    backgroundTaskResult.setStatusMessage(jsonArray.toString());
  }
  return backgroundTaskResult;
}
