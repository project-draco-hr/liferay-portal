{
  if (rerouteExecute(request,response)) {
    return null;
  }
  String callback=ParamUtil.getString(request,"callback");
  String json=null;
  try {
    checkAuthToken(request);
    json=getJSON(actionMapping,actionForm,request,response);
    if (Validator.isNotNull(callback)) {
      StringBundler sb=new StringBundler(5);
      sb.append("/**/");
      sb.append(callback);
      sb.append(StringPool.OPEN_PARENTHESIS);
      sb.append(json);
      sb.append(StringPool.CLOSE_PARENTHESIS);
      json=sb.toString();
    }
  }
 catch (  SecurityException se) {
    if (_log.isWarnEnabled()) {
      _log.warn(se.getMessage());
    }
    json=JSONFactoryUtil.serializeThrowable(se);
  }
catch (  PrincipalException pe) {
    _log.error(pe.getMessage());
    PortalUtil.sendError(HttpServletResponse.SC_FORBIDDEN,pe,request,response);
    return null;
  }
catch (  Exception e) {
    _log.error(e.getMessage());
    PortalUtil.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,e,request,response);
    return null;
  }
  boolean refresh=ParamUtil.getBoolean(request,"refresh");
  if (refresh) {
    return actionMapping.findForward(ActionConstants.COMMON_REFERER);
  }
 else   if (Validator.isNotNull(json)) {
    response.setCharacterEncoding(StringPool.UTF8);
    response.setContentType(ContentTypes.APPLICATION_JSON);
    response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_NO_CACHE_VALUE);
    try (OutputStream outputStream=response.getOutputStream()){
      byte[] bytes=json.getBytes(StringPool.UTF8);
      outputStream.write(bytes);
    }
   }
  return null;
}
