{
  char[] buf=mOutputBuffer;
  int ptr=mOutputPtr;
  if ((ptr + 10) >= buf.length) {
    flushBuffer();
    ptr=mOutputPtr;
  }
  buf[ptr++]='&';
  if (c < 256) {
    if (c == '&') {
      buf[ptr++]='a';
      buf[ptr++]='m';
      buf[ptr++]='p';
    }
 else     if (c == '<') {
      buf[ptr++]='l';
      buf[ptr++]='t';
    }
 else     if (c == '>') {
      buf[ptr++]='g';
      buf[ptr++]='t';
    }
 else     if (c == '\'') {
      buf[ptr++]='a';
      buf[ptr++]='p';
      buf[ptr++]='o';
      buf[ptr++]='s';
    }
 else     if (c == '"') {
      buf[ptr++]='q';
      buf[ptr++]='u';
      buf[ptr++]='o';
      buf[ptr++]='t';
    }
 else {
      buf[ptr++]='#';
      ;
      buf[ptr++]='x';
      ;
      if (c >= 16) {
        int digit=(c >> 4);
        buf[ptr++]=(char)((digit < 10) ? ('0' + digit) : (('a' - 10) + digit));
        c&=0xF;
      }
      buf[ptr++]=(char)((c < 10) ? ('0' + c) : (('a' - 10) + c));
    }
  }
 else {
    buf[ptr++]='#';
    buf[ptr++]='x';
    int shift=20;
    int origPtr=ptr;
    do {
      int digit=(c >> shift) & 0xF;
      if (digit > 0 || (ptr != origPtr)) {
        buf[ptr++]=(char)((digit < 10) ? ('0' + digit) : (('a' - 10) + digit));
      }
      shift-=4;
    }
 while (shift > 0);
    c&=0xF;
    buf[ptr++]=(char)((c < 10) ? ('0' + c) : (('a' - 10) + c));
  }
  buf[ptr++]=';';
  mOutputPtr=ptr;
}
