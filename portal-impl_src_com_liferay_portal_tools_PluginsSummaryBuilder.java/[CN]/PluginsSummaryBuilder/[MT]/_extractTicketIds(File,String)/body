{
  Set<String> ticketIds=new TreeSet<>(new NaturalOrderStringComparator());
  Runtime runtime=Runtime.getRuntime();
  String command="git log " + range + " .";
  if (OSDetector.isWindows()) {
    command="cmd /c " + command;
  }
  Process process=runtime.exec(command,null,pluginDir);
  String content=StringUtil.read(process.getInputStream());
  content=StringUtil.replace(content,'\n',' ');
  for (  String ticketIdPrefix : _TICKET_ID_PREFIXES) {
    int x=0;
    while (true) {
      x=content.indexOf(ticketIdPrefix + "-",x);
      if (x == -1) {
        break;
      }
      int y=x + ticketIdPrefix.length() + 1;
      while (true) {
        if ((y + 1) > content.length()) {
          break;
        }
        if (Character.isDigit(content.charAt(y))) {
          y++;
        }
 else {
          break;
        }
      }
      String ticketId=content.substring(x,y);
      ticketIds.add(ticketId);
      x=y;
    }
  }
  File buildXmlFile=new File(pluginDir,"build.xml");
  System.out.println("## read a " + buildXmlFile);
  String buildXmlContent=_fileUtil.read(buildXmlFile);
  int x=buildXmlContent.indexOf("import.shared");
  if (x == -1) {
    return ticketIds;
  }
  x=buildXmlContent.indexOf("value=\"",x);
  x=buildXmlContent.indexOf("\"",x);
  int y=buildXmlContent.indexOf("\" />",x);
  if ((x == -1) || (y == -1)) {
    return ticketIds;
  }
  String[] importShared=StringUtil.split(buildXmlContent.substring(x + 1,y));
  if (importShared.length == 0) {
    return ticketIds;
  }
  for (  String currentImportShared : importShared) {
    File currentImportSharedDir=new File(pluginDir,"../../shared/" + currentImportShared);
    if (!currentImportSharedDir.exists()) {
      continue;
    }
    ticketIds.addAll(_extractTicketIds(currentImportSharedDir,range));
  }
  return ticketIds;
}
