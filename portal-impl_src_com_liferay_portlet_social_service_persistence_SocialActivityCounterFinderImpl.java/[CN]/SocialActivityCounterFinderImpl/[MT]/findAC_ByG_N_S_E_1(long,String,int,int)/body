{
  Serializable cacheKey=encodeCacheKey("findAC_ByG_N_S_E",new Object[]{groupId,counterName,startPeriod,endPeriod});
  List<SocialActivityCounter> list=null;
  if (startPeriod != SocialCounterPeriodUtil.getStartPeriod()) {
    list=(List<SocialActivityCounter>)_portalCache.get(cacheKey);
  }
  if (list == null) {
    Session session=null;
    try {
      session=openSession();
      String sql=CustomSQLUtil.get(FIND_AC_BY_G_N_S_E_1);
      SQLQuery q=session.createSQLQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      qPos.add(counterName);
      qPos.add(startPeriod);
      qPos.add(endPeriod);
      List<Object[]> results=(List<Object[]>)QueryUtil.list(q,getDialect(),-1,-1);
      list=new ArrayList<SocialActivityCounter>();
      for (      Object[] result : results) {
        SocialActivityCounter activityCounter=new SocialActivityCounterImpl();
        activityCounter.setName(GetterUtil.getString((Serializable)result[0]));
        activityCounter.setCurrentValue(GetterUtil.getInteger((Serializable)result[1]));
        activityCounter.setStartPeriod(GetterUtil.getInteger((Serializable)result[2]));
        activityCounter.setEndPeriod(GetterUtil.getInteger((Serializable)result[3]));
        list.add(activityCounter);
      }
    }
 catch (    Exception e) {
      throw new SystemException(e);
    }
 finally {
      if (list == null) {
        _portalCache.remove(cacheKey);
      }
 else {
        if (startPeriod != SocialCounterPeriodUtil.getStartPeriod()) {
          _portalCache.put(cacheKey,list);
        }
      }
      closeSession(session);
    }
  }
  return list;
}
