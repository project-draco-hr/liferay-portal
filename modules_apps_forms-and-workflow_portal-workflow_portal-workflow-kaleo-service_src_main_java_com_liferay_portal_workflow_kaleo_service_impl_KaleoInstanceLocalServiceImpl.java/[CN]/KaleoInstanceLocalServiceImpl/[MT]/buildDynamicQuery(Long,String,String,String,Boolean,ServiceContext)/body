{
  DynamicQuery dynamicQuery=DynamicQueryFactoryUtil.forClass(KaleoInstance.class,getClassLoader());
  Property companyIdProperty=PropertyFactoryUtil.forName("companyId");
  dynamicQuery.add(companyIdProperty.eq(serviceContext.getCompanyId()));
  if (Validator.isNotNull(userId)) {
    Property userIdProperty=PropertyFactoryUtil.forName("userId");
    dynamicQuery.add(userIdProperty.eq(userId));
  }
  if (completed != null) {
    if (completed) {
      Property completionDateProperty=PropertyFactoryUtil.forName("completionDate");
      dynamicQuery.add(completionDateProperty.isNotNull());
    }
 else {
      Property completionDateProperty=PropertyFactoryUtil.forName("completionDate");
      dynamicQuery.add(completionDateProperty.isNull());
    }
  }
  Junction junction=RestrictionsFactoryUtil.disjunction();
  if (Validator.isNotNull(assetType)) {
    Property classNameProperty=PropertyFactoryUtil.forName("className");
    junction.add(classNameProperty.like(assetType));
  }
  if (Validator.isNotNull(kaleoDefinitionName)) {
    Property kaleoDefinitionNameProperty=PropertyFactoryUtil.forName("kaleoDefinitionName");
    junction.add(kaleoDefinitionNameProperty.eq(kaleoDefinitionName));
  }
  if (Validator.isNotNull(nodeName)) {
    Property kaleoInstanceIdProperty=PropertyFactoryUtil.forName("kaleoInstanceId");
    DynamicQuery subdynamicQuery=DynamicQueryFactoryUtil.forClass(KaleoInstanceToken.class,getClassLoader()).setProjection(kaleoInstanceIdProperty);
    Property currentKaleoNodeNameProperty=PropertyFactoryUtil.forName("currentKaleoNodeName");
    subdynamicQuery.add(currentKaleoNodeNameProperty.like(nodeName));
    junction.add(kaleoInstanceIdProperty.in(subdynamicQuery));
  }
  dynamicQuery.add(junction);
  return dynamicQuery;
}
