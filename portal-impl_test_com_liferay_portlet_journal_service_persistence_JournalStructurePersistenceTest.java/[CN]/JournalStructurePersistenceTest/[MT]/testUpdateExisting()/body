{
  long pk=nextLong();
  JournalStructure newJournalStructure=_persistence.create(pk);
  newJournalStructure.setUuid(randomString());
  newJournalStructure.setGroupId(nextLong());
  newJournalStructure.setCompanyId(nextLong());
  newJournalStructure.setUserId(nextLong());
  newJournalStructure.setUserName(randomString());
  newJournalStructure.setCreateDate(nextDate());
  newJournalStructure.setModifiedDate(nextDate());
  newJournalStructure.setStructureId(randomString());
  newJournalStructure.setName(randomString());
  newJournalStructure.setDescription(randomString());
  newJournalStructure.setXsd(randomString());
  _persistence.update(newJournalStructure,false);
  JournalStructure existingJournalStructure=_persistence.findByPrimaryKey(newJournalStructure.getPrimaryKey());
  assertEquals(existingJournalStructure.getUuid(),newJournalStructure.getUuid());
  assertEquals(existingJournalStructure.getId(),newJournalStructure.getId());
  assertEquals(existingJournalStructure.getGroupId(),newJournalStructure.getGroupId());
  assertEquals(existingJournalStructure.getCompanyId(),newJournalStructure.getCompanyId());
  assertEquals(existingJournalStructure.getUserId(),newJournalStructure.getUserId());
  assertEquals(existingJournalStructure.getUserName(),newJournalStructure.getUserName());
  assertEquals(existingJournalStructure.getCreateDate(),newJournalStructure.getCreateDate());
  assertEquals(existingJournalStructure.getModifiedDate(),newJournalStructure.getModifiedDate());
  assertEquals(existingJournalStructure.getStructureId(),newJournalStructure.getStructureId());
  assertEquals(existingJournalStructure.getName(),newJournalStructure.getName());
  assertEquals(existingJournalStructure.getDescription(),newJournalStructure.getDescription());
  assertEquals(existingJournalStructure.getXsd(),newJournalStructure.getXsd());
}
