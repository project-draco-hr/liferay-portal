{
  if (!PropsValues.HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE) {
    return;
  }
  LayoutFriendlyURL newLayoutFriendlyURL=addLayoutFriendlyURL();
  _persistence.clearCache();
  LayoutFriendlyURL existingLayoutFriendlyURL=_persistence.findByPrimaryKey(newLayoutFriendlyURL.getPrimaryKey());
  Assert.assertTrue(Validator.equals(existingLayoutFriendlyURL.getUuid(),ReflectionTestUtil.invoke(existingLayoutFriendlyURL,"getOriginalUuid",new Class<?>[0])));
  Assert.assertEquals(existingLayoutFriendlyURL.getGroupId(),ReflectionTestUtil.invoke(existingLayoutFriendlyURL,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(existingLayoutFriendlyURL.getPlid(),ReflectionTestUtil.invoke(existingLayoutFriendlyURL,"getOriginalPlid",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingLayoutFriendlyURL.getLanguageId(),ReflectionTestUtil.invoke(existingLayoutFriendlyURL,"getOriginalLanguageId",new Class<?>[0])));
  Assert.assertEquals(existingLayoutFriendlyURL.getGroupId(),ReflectionTestUtil.invoke(existingLayoutFriendlyURL,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(existingLayoutFriendlyURL.getPrivateLayout(),ReflectionTestUtil.invoke(existingLayoutFriendlyURL,"getOriginalPrivateLayout",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingLayoutFriendlyURL.getFriendlyURL(),ReflectionTestUtil.invoke(existingLayoutFriendlyURL,"getOriginalFriendlyURL",new Class<?>[0])));
  Assert.assertTrue(Validator.equals(existingLayoutFriendlyURL.getLanguageId(),ReflectionTestUtil.invoke(existingLayoutFriendlyURL,"getOriginalLanguageId",new Class<?>[0])));
}
