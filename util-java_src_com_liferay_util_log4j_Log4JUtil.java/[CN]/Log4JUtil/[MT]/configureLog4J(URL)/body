{
  if (url == null) {
    return;
  }
  Map<String,String> replacements=new HashMap<String,String>();
  replacements.put("liferay.home",PropsUtil.get(PropsKeys.LIFERAY_HOME));
  String urlContent=null;
  try {
    InputStream urlStream=url.openStream();
    byte[] urlBytes=FileUtil.readAsByteArray(urlStream);
    urlContent=new String(urlBytes,StringPool.UTF8);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
  for (  Map.Entry<String,String> replacement : replacements.entrySet()) {
    urlContent=urlContent.replaceAll("@" + replacement.getKey() + "@",replacement.getValue());
  }
  Reader urlReader=new StringReader(urlContent);
  if (!ServerDetector.isJBoss()) {
    new DOMConfigurator().doConfigure(urlReader,LogManager.getLoggerRepository());
  }
  Set<String> currentLoggerNames=new HashSet<String>();
  Enumeration<Logger> enu=LogManager.getCurrentLoggers();
  while (enu.hasMoreElements()) {
    Logger logger=enu.nextElement();
    currentLoggerNames.add(logger.getName());
  }
  try {
    SAXReader reader=new SAXReader();
    Document doc=reader.read(urlReader,url.toExternalForm());
    Element root=doc.getRootElement();
    Iterator<Element> itr=root.elements("category").iterator();
    while (itr.hasNext()) {
      Element category=itr.next();
      String name=category.attributeValue("name");
      String priority=category.element("priority").attributeValue("value");
      setLevel(name,priority);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
