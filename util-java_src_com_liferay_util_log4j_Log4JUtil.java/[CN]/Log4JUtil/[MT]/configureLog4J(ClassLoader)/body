{
  if (_isLog4jCleanUp()) {
    Runtime runtime=Runtime.getRuntime();
    final File liferayHomeDir=new File(_getLiferayHome());
    runtime.addShutdownHook(new Thread(){
      @Override public void run(){
        Queue<File> queue=new LinkedList<File>();
        queue.offer(liferayHomeDir);
        File file=null;
        while ((file=queue.poll()) != null) {
          if (file.isFile()) {
            file.delete();
          }
 else           if (file.isDirectory()) {
            File[] files=file.listFiles();
            if (files.length == 0) {
              file.delete();
            }
 else {
              queue.addAll(Arrays.asList(files));
              queue.add(file);
            }
          }
        }
      }
    }
);
  }
  configureLog4J(classLoader.getResource("META-INF/portal-log4j.xml"));
  try {
    Enumeration<URL> enu=classLoader.getResources("META-INF/portal-log4j-ext.xml");
    while (enu.hasMoreElements()) {
      configureLog4J(enu.nextElement());
    }
  }
 catch (  IOException ioe) {
    java.util.logging.Logger logger=java.util.logging.Logger.getLogger(Log4JUtil.class.getName());
    logger.log(java.util.logging.Level.WARNING,"Unable to load portal-log4j-ext.xml",ioe);
  }
  if (ServerDetector.isJBoss5()) {
    Logger rootLogger=LogManager.getRootLogger();
    Enumeration<Appender> enu=rootLogger.getAllAppenders();
    while (enu.hasMoreElements()) {
      Appender appender=enu.nextElement();
      if (appender instanceof WriterAppender) {
        WriterAppender writerAppender=(WriterAppender)appender;
        writerAppender.activateOptions();
      }
    }
  }
}
