{
  if (PropsValues.PASSWORDS_PASSWORDPOLICYTOOLKIT_GENERATOR.equals("static")) {
    return PropsValues.PASSWORDS_PASSWORDPOLICYTOOLKIT_STATIC;
  }
 else {
    int alphaNumericMinLength=Math.max(passwordPolicy.getMinAlphaNumeric(),passwordPolicy.getMinLowerCase() + passwordPolicy.getMinNumbers() + passwordPolicy.getMinUpperCase());
    int passwordMinLength=Math.max(passwordPolicy.getMinLength(),alphaNumericMinLength + passwordPolicy.getMinSymbols());
    StringBundler sb=new StringBundler(passwordMinLength);
    if (passwordPolicy.getMinLowerCase() > 0) {
      sb.append(getRandomString(passwordPolicy.getMinLowerCase(),_lowerCaseCharsetArray));
    }
    if (passwordPolicy.getMinNumbers() > 0) {
      sb.append(getRandomString(passwordPolicy.getMinNumbers(),_numbersCharsetArray));
    }
    if (passwordPolicy.getMinSymbols() > 0) {
      sb.append(getRandomString(passwordPolicy.getMinSymbols(),_symbolsCharsetArray));
    }
    if (passwordPolicy.getMinUpperCase() > 0) {
      sb.append(getRandomString(passwordPolicy.getMinUpperCase(),_upperCaseCharsetArray));
    }
    if (alphaNumericMinLength > passwordPolicy.getMinAlphaNumeric()) {
      int count=alphaNumericMinLength - passwordPolicy.getMinAlphaNumeric();
      sb.append(getRandomString(count,_alphaNumericCharsetArray));
    }
    if (passwordMinLength > (alphaNumericMinLength + passwordPolicy.getMinSymbols())) {
      int count=passwordMinLength - (alphaNumericMinLength + passwordPolicy.getMinSymbols());
      sb.append(PwdGenerator.getPassword(_completeCharset,count));
    }
    Randomizer randomizer=Randomizer.getInstance();
    return randomizer.randomize(sb.toString());
  }
}
