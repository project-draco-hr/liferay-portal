{
  if (passwordPolicy.isCheckSyntax()) {
    if (!passwordPolicy.isAllowDictionaryWords() && WordsUtil.isDictionaryWord(password1)) {
      throw new UserPasswordException.MustNotContainDictionaryWords(userId,WordsUtil.getDictionarySet());
    }
    if (password1.length() < passwordPolicy.getMinLength()) {
      throw new UserPasswordException.MustBeLonger(userId,passwordPolicy.getMinLength());
    }
    if ((getUsageCount(password1,_alphanumericCharsetArray) < passwordPolicy.getMinAlphanumeric()) || (getUsageCount(password1,_lowerCaseCharsetArray) < passwordPolicy.getMinLowerCase()) || (getUsageCount(password1,_numbersCharsetArray) < passwordPolicy.getMinNumbers())|| (getUsageCount(password1,_symbolsCharsetArray) < passwordPolicy.getMinSymbols())|| (getUsageCount(password1,_upperCaseCharsetArray) < passwordPolicy.getMinUpperCase())) {
      throw new UserPasswordException.MustNotBeTrivial(userId);
    }
    if (Validator.isNotNull(passwordPolicy.getRegex()) && !password1.matches(passwordPolicy.getRegex())) {
      throw new UserPasswordException.MustBeValid(userId);
    }
  }
  if (!passwordPolicy.isChangeable() && (userId != 0)) {
    throw new UserPasswordException.MustNotBeChanged(userId);
  }
  if (userId == 0) {
    return;
  }
  User user=UserLocalServiceUtil.getUserById(userId);
  Date passwordModfiedDate=user.getPasswordModifiedDate();
  if (passwordModfiedDate != null) {
    Date now=new Date();
    long passwordModificationElapsedTime=now.getTime() - passwordModfiedDate.getTime();
    long minAge=passwordPolicy.getMinAge() * 1000;
    if ((passwordModificationElapsedTime < minAge) && !user.getPasswordReset()) {
      throw new UserPasswordException.MustNotBeChangedYet(userId,new Date(passwordModfiedDate.getTime() + minAge));
    }
  }
  if (PasswordTrackerLocalServiceUtil.isSameAsCurrentPassword(userId,password1)) {
    throw new UserPasswordException.MustNotBeEqualToCurrent(userId);
  }
 else   if (!PasswordTrackerLocalServiceUtil.isValidPassword(userId,password1)) {
    throw new UserPasswordException.MustNotBeRecentlyUsed(userId);
  }
}
