{
  if (passwordPolicy.isCheckSyntax()) {
    if (!passwordPolicy.isAllowDictionaryWords() && WordsUtil.isDictionaryWord(password1)) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_CONTAINS_TRIVIAL_WORDS);
    }
    if (password1.length() < passwordPolicy.getMinLength()) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_LENGTH);
    }
    if ((getUsageCount(password1,_alphanumericCharsetArray) < passwordPolicy.getMinAlphanumeric()) || (getUsageCount(password1,_lowerCaseCharsetArray) < passwordPolicy.getMinLowerCase()) || (getUsageCount(password1,_numbersCharsetArray) < passwordPolicy.getMinNumbers())|| (getUsageCount(password1,_symbolsCharsetArray) < passwordPolicy.getMinSymbols())|| (getUsageCount(password1,_upperCaseCharsetArray) < passwordPolicy.getMinUpperCase())) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_TOO_TRIVIAL);
    }
    if (Validator.isNotNull(passwordPolicy.getRegex()) && !password1.matches(passwordPolicy.getRegex())) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_INVALID);
    }
  }
  if (!passwordPolicy.isChangeable()) {
    throw new UserPasswordException(UserPasswordException.PASSWORD_NOT_CHANGEABLE);
  }
  if (userId != 0) {
    User user=UserLocalServiceUtil.getUserById(userId);
    Date passwordModfiedDate=user.getPasswordModifiedDate();
    if (passwordModfiedDate != null) {
      Date now=new Date();
      long passwordModificationElapsedTime=now.getTime() - passwordModfiedDate.getTime();
      long userCreationElapsedTime=now.getTime() - user.getCreateDate().getTime();
      long minAge=passwordPolicy.getMinAge() * 1000;
      if ((passwordModificationElapsedTime < minAge) && (userCreationElapsedTime > minAge)) {
        throw new UserPasswordException(UserPasswordException.PASSWORD_TOO_YOUNG);
      }
    }
    if (PasswordTrackerLocalServiceUtil.isSameAsCurrentPassword(userId,password1)) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_SAME_AS_CURRENT);
    }
 else     if (!PasswordTrackerLocalServiceUtil.isValidPassword(userId,password1)) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_ALREADY_USED);
    }
  }
}
