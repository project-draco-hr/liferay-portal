{
  if (passwordPolicy.isCheckSyntax()) {
    if (!passwordPolicy.isAllowDictionaryWords() && WordsUtil.isDictionaryWord(password1)) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_CONTAINS_TRIVIAL_WORDS);
    }
    if (password1.length() < passwordPolicy.getMinLength()) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_LENGTH);
    }
    int minAlphaNumeric=passwordPolicy.getMinAlphaNumeric();
    int minLowerCase=passwordPolicy.getMinLowerCase();
    int minNumbers=passwordPolicy.getMinNumbers();
    int minSymbols=passwordPolicy.getMinSymbols();
    int minUpperCase=passwordPolicy.getMinUpperCase();
    int alphaCount=0;
    int lowerCaseCount=0;
    int numbersCount=0;
    int symbolCount=0;
    int upperCaseCount=0;
    for (int i=0; i < password1.length(); i++) {
      if (Arrays.binarySearch(_charsAlphaNumeric,password1.charAt(i)) >= 0) {
        alphaCount++;
      }
    }
    for (int i=0; i < password1.length(); i++) {
      if (Arrays.binarySearch(_charsLowerCase,password1.charAt(i)) >= 0) {
        lowerCaseCount++;
      }
    }
    for (int i=0; i < password1.length(); i++) {
      if (Arrays.binarySearch(_charsNumbers,password1.charAt(i)) >= 0) {
        numbersCount++;
      }
    }
    for (int i=0; i < password1.length(); i++) {
      if (Arrays.binarySearch(_charsSymbols,password1.charAt(i)) >= 0) {
        symbolCount++;
      }
    }
    for (int i=0; i < password1.length(); i++) {
      if (Arrays.binarySearch(_charsUpperCase,password1.charAt(i)) >= 0) {
        upperCaseCount++;
      }
    }
    if ((alphaCount < minAlphaNumeric) || (lowerCaseCount < minLowerCase) || (numbersCount < minNumbers)|| (symbolCount < minSymbols)|| (upperCaseCount < minUpperCase)) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_TOO_TRIVIAL);
    }
  }
  if (!passwordPolicy.isChangeable()) {
    throw new UserPasswordException(UserPasswordException.PASSWORD_NOT_CHANGEABLE);
  }
  if (userId != 0) {
    User user=UserLocalServiceUtil.getUserById(userId);
    Date passwordModfiedDate=user.getPasswordModifiedDate();
    if (passwordModfiedDate != null) {
      Date now=new Date();
      long passwordModificationElapsedTime=now.getTime() - passwordModfiedDate.getTime();
      long userCreationElapsedTime=now.getTime() - user.getCreateDate().getTime();
      long minAge=passwordPolicy.getMinAge() * 1000;
      if ((passwordModificationElapsedTime < minAge) && (userCreationElapsedTime > minAge)) {
        throw new UserPasswordException(UserPasswordException.PASSWORD_TOO_YOUNG);
      }
    }
    if (PasswordTrackerLocalServiceUtil.isSameAsCurrentPassword(userId,password1)) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_SAME_AS_CURRENT);
    }
 else     if (!PasswordTrackerLocalServiceUtil.isValidPassword(userId,password1)) {
      throw new UserPasswordException(UserPasswordException.PASSWORD_ALREADY_USED);
    }
  }
}
