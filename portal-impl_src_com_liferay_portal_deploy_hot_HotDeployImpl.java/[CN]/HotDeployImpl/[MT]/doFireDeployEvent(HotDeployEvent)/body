{
  String servletContextName=hotDeployEvent.getServletContextName();
  if (_deployedServletContextNames.contains(servletContextName)) {
    return;
  }
  boolean hasDependencies=true;
  for (  String dependentServletContextName : hotDeployEvent.getDependentServletContextNames()) {
    if (!_deployedServletContextNames.contains(dependentServletContextName)) {
      hasDependencies=false;
      break;
    }
  }
  if (hasDependencies) {
    if (_log.isInfoEnabled()) {
      _log.info("Deploying " + servletContextName + " from queue");
    }
    for (    HotDeployListener hotDeployListener : _hotDeployListeners) {
      try {
        PortletClassLoaderUtil.setClassLoader(hotDeployEvent.getContextClassLoader());
        PortletClassLoaderUtil.setServletContextName(hotDeployEvent.getServletContextName());
        hotDeployListener.invokeDeploy(hotDeployEvent);
      }
 catch (      HotDeployException hde) {
        _log.error(hde,hde);
      }
 finally {
        PortletClassLoaderUtil.setClassLoader(null);
        PortletClassLoaderUtil.setServletContextName(null);
      }
    }
    _deployedServletContextNames.add(servletContextName);
    _dependentHotDeployEvents.remove(hotDeployEvent);
    ClassLoader contextClassLoader=getContextClassLoader();
    try {
      setContextClassLoader(PACLClassLoaderUtil.getPortalClassLoader());
      List<HotDeployEvent> dependentEvents=new ArrayList<HotDeployEvent>(_dependentHotDeployEvents);
      for (      HotDeployEvent dependentEvent : dependentEvents) {
        setContextClassLoader(dependentEvent.getContextClassLoader());
        doFireDeployEvent(dependentEvent);
      }
    }
  finally {
      setContextClassLoader(contextClassLoader);
    }
  }
 else {
    if (!_dependentHotDeployEvents.contains(hotDeployEvent)) {
      if (_log.isInfoEnabled()) {
        StringBundler sb=new StringBundler(4);
        sb.append("Queueing ");
        sb.append(servletContextName);
        sb.append(" for deploy because it is missing ");
        sb.append(getRequiredServletContextNames(hotDeployEvent));
        _log.info(sb.toString());
      }
      _dependentHotDeployEvents.add(hotDeployEvent);
    }
 else {
      if (_log.isInfoEnabled()) {
        for (        HotDeployEvent dependentHotDeployEvent : _dependentHotDeployEvents) {
          StringBundler sb=new StringBundler(3);
          sb.append(servletContextName);
          sb.append(" is still in queue because it is missing ");
          sb.append(getRequiredServletContextNames(dependentHotDeployEvent));
          _log.info(sb.toString());
        }
      }
    }
  }
}
