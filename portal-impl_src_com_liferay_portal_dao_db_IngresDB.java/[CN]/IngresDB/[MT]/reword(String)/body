{
  StringBundler sb=new StringBundler();
  try (UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(data))){
    String line=null;
    while ((line=unsyncBufferedReader.readLine()) != null) {
      if (line.startsWith(ALTER_COLUMN_NAME)) {
        line="-- " + line;
        if (_log.isWarnEnabled()) {
          _log.warn("This statement is not supported by Ingres: " + line);
        }
      }
 else       if (line.startsWith(ALTER_COLUMN_TYPE)) {
        String[] template=buildColumnTypeTokens(line);
        line=StringUtil.replace("alter table @table@ alter @old-column@ @type@;",REWORD_TEMPLATE,template);
      }
 else       if (line.startsWith(ALTER_TABLE_NAME)) {
        String[] template=buildTableNameTokens(line);
        line=StringUtil.replace("alter table @old-table@ rename to @new-table@;",RENAME_TABLE_TEMPLATE,template);
      }
 else       if (line.contains(DROP_INDEX)) {
        String[] tokens=StringUtil.split(line,' ');
        line=StringUtil.replace("drop index @index@;","@index@",tokens[2]);
      }
 else       if (line.contains(DROP_PRIMARY_KEY)) {
        String[] tokens=StringUtil.split(line,' ');
        line=StringUtil.replace("alter table @table@ drop constraint @table@_pkey;","@table@",tokens[2]);
      }
      sb.append(line);
      sb.append("\n");
    }
  }
   return sb.toString();
}
