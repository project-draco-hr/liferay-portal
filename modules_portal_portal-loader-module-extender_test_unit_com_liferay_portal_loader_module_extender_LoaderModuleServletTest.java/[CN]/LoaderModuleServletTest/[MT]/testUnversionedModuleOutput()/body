{
  LoaderModulesServlet loaderModulesServlet=_buildLoaderModulesServlet(Collections.<String,Object>singletonMap("loader.modules.apply.versioning",Boolean.FALSE));
  ServiceReference<ServletContext> serviceReference=_buildServiceReference("test",new Version("1.0.0"),true,0,_getResource("dependencies/config1.js"));
  loaderModulesServlet.addingService(serviceReference);
  MockHttpServletRequest httpServletRequest=new MockHttpServletRequest();
  MockHttpServletResponse httpServletResponse=new MockHttpServletResponse();
  loaderModulesServlet.service(httpServletRequest,httpServletResponse);
  String content=httpServletResponse.getContentAsString();
  content=content.replace('"','\'');
  assertContains("'test': '/test-1.0.0'",content);
  assertContains("'test@1.0.0': '/test-1.0.0'",content);
  assertContains("'test/some.es':{'dependencies':['exports','test/other.es']}",content);
  assertNotContains("'test/some.es':{'dependencies':['exports','test@1.0.0/other.es']}",content);
  assertContains("'test/other.es':{'dependencies':['exports']}",content);
  assertNotContains("'test@1.0.0/some.es':" + "{'dependencies':['exports','test@1.0.0/other.es']}",content);
  assertNotContains("'test@1.0.0/other.es':{'dependencies':['exports']}",content);
}
