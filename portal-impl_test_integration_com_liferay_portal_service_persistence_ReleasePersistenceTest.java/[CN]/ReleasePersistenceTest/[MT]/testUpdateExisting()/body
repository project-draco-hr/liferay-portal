{
  long pk=RandomTestUtil.nextLong();
  Release newRelease=_persistence.create(pk);
  newRelease.setMvccVersion(RandomTestUtil.nextLong());
  newRelease.setCreateDate(RandomTestUtil.nextDate());
  newRelease.setModifiedDate(RandomTestUtil.nextDate());
  newRelease.setServletContextName(RandomTestUtil.randomString());
  newRelease.setBuildNumber(RandomTestUtil.nextInt());
  newRelease.setBuildDate(RandomTestUtil.nextDate());
  newRelease.setVerified(RandomTestUtil.randomBoolean());
  newRelease.setState(RandomTestUtil.nextInt());
  newRelease.setTestString(RandomTestUtil.randomString());
  _models.add(_persistence.update(newRelease));
  Release existingRelease=_persistence.findByPrimaryKey(newRelease.getPrimaryKey());
  Assert.assertEquals(existingRelease.getMvccVersion(),newRelease.getMvccVersion());
  Assert.assertEquals(existingRelease.getReleaseId(),newRelease.getReleaseId());
  Assert.assertEquals(Time.getShortTimestamp(existingRelease.getCreateDate()),Time.getShortTimestamp(newRelease.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingRelease.getModifiedDate()),Time.getShortTimestamp(newRelease.getModifiedDate()));
  Assert.assertEquals(existingRelease.getServletContextName(),newRelease.getServletContextName());
  Assert.assertEquals(existingRelease.getBuildNumber(),newRelease.getBuildNumber());
  Assert.assertEquals(Time.getShortTimestamp(existingRelease.getBuildDate()),Time.getShortTimestamp(newRelease.getBuildDate()));
  Assert.assertEquals(existingRelease.getVerified(),newRelease.getVerified());
  Assert.assertEquals(existingRelease.getState(),newRelease.getState());
  Assert.assertEquals(existingRelease.getTestString(),newRelease.getTestString());
}
