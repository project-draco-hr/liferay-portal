{
  ExportActionableDynamicQuery exportActionableDynamicQuery=DDMStructureLocalServiceUtil.getExportActionableDynamicQuery(portletDataContext);
  final ActionableDynamicQuery.AddCriteriaMethod addCriteriaMethod=exportActionableDynamicQuery.getAddCriteriaMethod();
  exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      addCriteriaMethod.addCriteria(dynamicQuery);
      Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
      long classNameId=PortalUtil.getClassNameId(JournalArticle.class);
      dynamicQuery.add(classNameIdProperty.eq(classNameId));
    }
  }
);
  exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod(){
    @Override public void performAction(    Object object) throws PortalException {
      DDMStructure ddmStructure=(DDMStructure)object;
      if (export) {
        StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,ddmStructure);
      }
      try {
        List<DDMTemplate> ddmStructureDDMTemplates=DDMTemplateLocalServiceUtil.getTemplatesByClassPK(ddmStructure.getGroupId(),ddmStructure.getStructureId());
        ddmTemplates.addAll(ddmStructureDDMTemplates);
      }
 catch (      SystemException se) {
      }
    }
  }
);
  exportActionableDynamicQuery.setStagedModelType(new StagedModelType(DDMStructure.class.getName(),JournalArticle.class.getName()));
  return exportActionableDynamicQuery;
}
