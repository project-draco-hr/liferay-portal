{
  portletDataContext.addPermissions("com.liferay.portlet.journal",portletDataContext.getScopeGroupId());
  Element rootElement=addExportDataRootElement(portletDataContext);
  rootElement.addAttribute("group-id",String.valueOf(portletDataContext.getScopeGroupId()));
  ActionableDynamicQuery structureActionableDynamicQuery=new DDMStructureActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
      Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
      long classNameId=PortalUtil.getClassNameId(JournalArticle.class);
      dynamicQuery.add(classNameIdProperty.eq(classNameId));
    }
    @Override protected void performAction(    Object object) throws PortalException {
      DDMStructure ddmStructure=(DDMStructure)object;
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,ddmStructure);
      List<DDMTemplate> ddmTemplates=Collections.emptyList();
      try {
        ddmTemplates=ddmStructure.getTemplates();
      }
 catch (      SystemException se) {
      }
      for (      DDMTemplate ddmTemplate : ddmTemplates) {
        StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,ddmTemplate);
      }
    }
  }
;
  structureActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  structureActionableDynamicQuery.performActions();
  ActionableDynamicQuery feedActionableDynamicQuery=new JournalFeedActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
    }
    @Override protected void performAction(    Object object) throws PortalException {
      JournalFeed feed=(JournalFeed)object;
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,feed);
    }
  }
;
  feedActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  feedActionableDynamicQuery.performActions();
  if (!portletDataContext.getBooleanParameter(NAMESPACE,"web-content")) {
    getExportDataRootElementString(rootElement);
  }
  ActionableDynamicQuery folderActionableDynamicQuery=new JournalFolderActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
      Property statusProperty=PropertyFactoryUtil.forName("status");
      dynamicQuery.add(statusProperty.ne(WorkflowConstants.STATUS_IN_TRASH));
    }
    @Override protected void performAction(    Object object) throws PortalException {
      JournalFolder folder=(JournalFolder)object;
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,folder);
    }
  }
;
  folderActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  folderActionableDynamicQuery.performActions();
  ActionableDynamicQuery articleActionableDynamicQuery=new JournalArticleActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
      Property statusProperty=PropertyFactoryUtil.forName("status");
      dynamicQuery.add(statusProperty.in(new Integer[]{WorkflowConstants.STATUS_APPROVED,WorkflowConstants.STATUS_EXPIRED}));
    }
    @Override protected void performAction(    Object object) throws PortalException {
      JournalArticle article=(JournalArticle)object;
      boolean latestVersion=false;
      try {
        latestVersion=JournalArticleLocalServiceUtil.isLatestVersion(article.getGroupId(),article.getArticleId(),article.getVersion(),WorkflowConstants.STATUS_APPROVED);
      }
 catch (      Exception e) {
      }
      if (portletDataContext.getBooleanParameter(NAMESPACE,"version-history") || latestVersion) {
        StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,article);
      }
    }
  }
;
  articleActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  articleActionableDynamicQuery.performActions();
  return getExportDataRootElementString(rootElement);
}
