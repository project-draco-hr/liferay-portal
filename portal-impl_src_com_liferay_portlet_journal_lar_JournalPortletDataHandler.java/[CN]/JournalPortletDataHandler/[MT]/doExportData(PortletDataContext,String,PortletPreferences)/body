{
  portletDataContext.addPermissions(JournalPermission.RESOURCE_NAME,portletDataContext.getScopeGroupId());
  Element rootElement=addExportDataRootElement(portletDataContext);
  rootElement.addAttribute("group-id",String.valueOf(portletDataContext.getScopeGroupId()));
  ActionableDynamicQuery ddmStructureActionableDynamicQuery=new DDMStructureExportActionableDynamicQuery(portletDataContext){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      super.addCriteria(dynamicQuery);
      Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
      long classNameId=PortalUtil.getClassNameId(JournalArticle.class);
      dynamicQuery.add(classNameIdProperty.eq(classNameId));
    }
    @Override protected void performAction(    Object object) throws PortalException {
      DDMStructure ddmStructure=(DDMStructure)object;
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,ddmStructure);
      List<DDMTemplate> ddmTemplates=Collections.emptyList();
      try {
        ddmTemplates=ddmStructure.getTemplates();
      }
 catch (      SystemException se) {
      }
      for (      DDMTemplate ddmTemplate : ddmTemplates) {
        StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,ddmTemplate);
      }
    }
  }
;
  ddmStructureActionableDynamicQuery.performActions();
  ActionableDynamicQuery feedActionableDynamicQuery=new JournalFeedExportActionableDynamicQuery(portletDataContext);
  feedActionableDynamicQuery.performActions();
  if (portletDataContext.getBooleanParameter(NAMESPACE,"web-content")) {
    ActionableDynamicQuery folderActionableDynamicQuery=getFolderActionableDynamicQuery(portletDataContext);
    folderActionableDynamicQuery.performActions();
    ActionableDynamicQuery articleActionableDynamicQuery=getArticleActionableDynamicQuery(portletDataContext);
    articleActionableDynamicQuery.performActions();
  }
  return getExportDataRootElementString(rootElement);
}
