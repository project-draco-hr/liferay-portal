{
  return new JournalArticleExportActionableDynamicQuery(portletDataContext){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      super.addCriteria(dynamicQuery);
      Property statusProperty=PropertyFactoryUtil.forName("status");
      dynamicQuery.add(statusProperty.in(new Integer[]{WorkflowConstants.STATUS_APPROVED,WorkflowConstants.STATUS_EXPIRED}));
    }
    @Override protected void performAction(    Object object) throws PortalException {
      JournalArticle article=(JournalArticle)object;
      boolean latestVersion=false;
      try {
        latestVersion=JournalArticleLocalServiceUtil.isLatestVersion(article.getGroupId(),article.getArticleId(),article.getVersion(),WorkflowConstants.STATUS_APPROVED);
      }
 catch (      Exception e) {
      }
      if (portletDataContext.getBooleanParameter(NAMESPACE,"version-history") || latestVersion) {
        StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,article);
      }
    }
    @Override protected Projection getCountProjection(){
      return ProjectionFactoryUtil.countDistinct("articleId");
    }
  }
;
}
