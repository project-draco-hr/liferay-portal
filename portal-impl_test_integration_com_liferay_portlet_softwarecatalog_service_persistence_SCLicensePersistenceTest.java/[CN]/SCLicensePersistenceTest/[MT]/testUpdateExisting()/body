{
  long pk=RandomTestUtil.nextLong();
  SCLicense newSCLicense=_persistence.create(pk);
  newSCLicense.setName(RandomTestUtil.randomString());
  newSCLicense.setUrl(RandomTestUtil.randomString());
  newSCLicense.setOpenSource(RandomTestUtil.randomBoolean());
  newSCLicense.setActive(RandomTestUtil.randomBoolean());
  newSCLicense.setRecommended(RandomTestUtil.randomBoolean());
  _persistence.update(newSCLicense);
  SCLicense existingSCLicense=_persistence.findByPrimaryKey(newSCLicense.getPrimaryKey());
  Assert.assertEquals(existingSCLicense.getLicenseId(),newSCLicense.getLicenseId());
  Assert.assertEquals(existingSCLicense.getName(),newSCLicense.getName());
  Assert.assertEquals(existingSCLicense.getUrl(),newSCLicense.getUrl());
  Assert.assertEquals(existingSCLicense.getOpenSource(),newSCLicense.getOpenSource());
  Assert.assertEquals(existingSCLicense.getActive(),newSCLicense.getActive());
  Assert.assertEquals(existingSCLicense.getRecommended(),newSCLicense.getRecommended());
}
