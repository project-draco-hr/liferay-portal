{
  try {
    long groupId=ParamUtil.getLong(req,"groupId");
    String templateId=getTemplateId(req);
    ThemeDisplay themeDisplay=(ThemeDisplay)req.getAttribute(WebKeys.THEME_DISPLAY);
    Map<String,String> tokens=JournalUtil.getTokens(groupId,themeDisplay);
    tokens.put("template_id",templateId);
    String languageId=LanguageUtil.getLanguageId(req);
    boolean transform=ParamUtil.get(req,"transform",true);
    JournalTemplate template=JournalTemplateLocalServiceUtil.getTemplate(groupId,templateId);
    String script=JournalUtil.getTemplateScript(template,tokens,languageId,transform);
    String extension=JournalTemplateImpl.LANG_TYPE_VM;
    if (template.getLangType() != null) {
      extension=template.getLangType();
    }
    String fileName=null;
    byte[] byteArray=script.getBytes();
    String contentType=ContentTypes.TEXT_PLAIN_UTF8;
    if (Validator.equals(extension,JournalTemplateImpl.LANG_TYPE_CSS)) {
      contentType=ContentTypes.TEXT_CSS_UTF8;
    }
 else     if (Validator.equals(extension,JournalTemplateImpl.LANG_TYPE_XSL)) {
      contentType=ContentTypes.TEXT_XML_UTF8;
    }
    ServletResponseUtil.sendFile(res,fileName,byteArray,contentType);
    return null;
  }
 catch (  PortalException pe) {
    if (pe instanceof PrincipalException) {
      PortalUtil.sendError(HttpServletResponse.SC_FORBIDDEN,pe,req,res);
    }
 else     if (pe instanceof NoSuchTemplateException) {
      PortalUtil.sendError(HttpServletResponse.SC_NOT_FOUND,pe,req,res);
    }
    return null;
  }
catch (  Exception e) {
    req.setAttribute(PageContext.EXCEPTION,e);
    return mapping.findForward(ActionConstants.COMMON_ERROR);
  }
}
