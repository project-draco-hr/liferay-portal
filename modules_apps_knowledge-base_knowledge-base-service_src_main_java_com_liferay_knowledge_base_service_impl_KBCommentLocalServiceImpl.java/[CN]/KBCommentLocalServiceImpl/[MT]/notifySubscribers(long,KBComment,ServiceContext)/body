{
  KBGroupServiceConfiguration kbGroupServiceConfiguration=getKBGroupServiceConfiguration(kbComment.getGroupId());
  int status=kbComment.getStatus();
  if ((status == KBCommentConstants.STATUS_COMPLETED) && !kbGroupServiceConfiguration.emailKBArticleSuggestionResolvedEnabled()) {
    return;
  }
 else   if ((status == KBCommentConstants.STATUS_IN_PROGRESS) && !kbGroupServiceConfiguration.emailKBArticleSuggestionInProgressEnabled()) {
    return;
  }
 else   if ((status == KBCommentConstants.STATUS_NEW) && !kbGroupServiceConfiguration.emailKBArticleSuggestionReceivedEnabled()) {
    return;
  }
 else   if ((status != KBCommentConstants.STATUS_COMPLETED) && (status != KBCommentConstants.STATUS_IN_PROGRESS) && (status != KBCommentConstants.STATUS_NEW)) {
    return;
  }
  String fromName=kbGroupServiceConfiguration.emailFromName();
  String fromAddress=kbGroupServiceConfiguration.emailFromAddress();
  String subject=StringPool.BLANK;
  String body=StringPool.BLANK;
  if (status == KBCommentConstants.STATUS_COMPLETED) {
    subject=kbGroupServiceConfiguration.emailKBArticleSuggestionResolvedSubject();
    body=kbGroupServiceConfiguration.emailKBArticleSuggestionResolvedBody();
  }
 else   if (status == KBCommentConstants.STATUS_IN_PROGRESS) {
    subject=kbGroupServiceConfiguration.emailKBArticleSuggestionInProgressSubject();
    body=kbGroupServiceConfiguration.emailKBArticleSuggestionInProgressBody();
  }
 else   if (status == KBCommentConstants.STATUS_NEW) {
    subject=kbGroupServiceConfiguration.emailKBArticleSuggestionReceivedSubject();
    body=kbGroupServiceConfiguration.emailKBArticleSuggestionReceivedBody();
  }
  KBArticle kbArticle=kbArticleLocalService.getLatestKBArticle(kbComment.getClassPK(),WorkflowConstants.STATUS_APPROVED);
  String kbArticleContent=StringUtil.replace(kbArticle.getContent(),new String[]{"href=\"/","src=\"/"},new String[]{"href=\"" + serviceContext.getPortalURL() + "/","src=\"" + serviceContext.getPortalURL() + "/"});
  SubscriptionSender subscriptionSender=new AdminSubscriptionSender(kbArticle,serviceContext);
  subscriptionSender.setBody(body);
  subscriptionSender.setCompanyId(kbArticle.getCompanyId());
  subscriptionSender.setContextAttribute("[$ARTICLE_CONTENT$]",kbArticleContent,false);
  subscriptionSender.setContextAttribute("[$COMMENT_CONTENT$]",kbComment.getContent(),false);
  subscriptionSender.setContextAttribute("[$COMMENT_CREATE_DATE$]",_getFormattedKBCommentCreateDate(kbComment,serviceContext),false);
  subscriptionSender.setContextCreatorUserPrefix("ARTICLE");
  subscriptionSender.setCreatorUserId(kbArticle.getUserId());
  subscriptionSender.setCurrentUserId(userId);
  subscriptionSender.setFrom(fromAddress,fromName);
  subscriptionSender.setHtmlFormat(true);
  subscriptionSender.setMailId("kb_article",kbArticle.getKbArticleId());
  subscriptionSender.setPortletId(serviceContext.getPortletId());
  subscriptionSender.setReplyToAddress(fromAddress);
  subscriptionSender.setScopeGroupId(kbArticle.getGroupId());
  subscriptionSender.setSubject(subject);
  User user=userLocalService.getUser(kbComment.getUserId());
  subscriptionSender.addRuntimeSubscribers(user.getEmailAddress(),user.getFullName());
  subscriptionSender.flushNotificationsAsync();
}
