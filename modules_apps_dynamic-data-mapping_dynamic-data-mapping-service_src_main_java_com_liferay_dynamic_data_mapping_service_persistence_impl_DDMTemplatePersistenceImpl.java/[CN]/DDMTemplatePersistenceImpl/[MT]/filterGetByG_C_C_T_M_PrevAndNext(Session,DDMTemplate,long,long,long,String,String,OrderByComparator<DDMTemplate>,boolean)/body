{
  StringBundler query=null;
  if (orderByComparator != null) {
    query=new StringBundler(9 + (orderByComparator.getOrderByConditionFields().length * 3) + (orderByComparator.getOrderByFields().length * 3));
  }
 else {
    query=new StringBundler(8);
  }
  if (getDB().isSupportsInlineDistinct()) {
    query.append(_FILTER_SQL_SELECT_DDMTEMPLATE_WHERE);
  }
 else {
    query.append(_FILTER_SQL_SELECT_DDMTEMPLATE_NO_INLINE_DISTINCT_WHERE_1);
  }
  query.append(_FINDER_COLUMN_G_C_C_T_M_GROUPID_2);
  query.append(_FINDER_COLUMN_G_C_C_T_M_CLASSNAMEID_2);
  query.append(_FINDER_COLUMN_G_C_C_T_M_CLASSPK_2);
  boolean bindType=false;
  if (type == null) {
    query.append(_FINDER_COLUMN_G_C_C_T_M_TYPE_1_SQL);
  }
 else   if (type.equals(StringPool.BLANK)) {
    query.append(_FINDER_COLUMN_G_C_C_T_M_TYPE_3_SQL);
  }
 else {
    bindType=true;
    query.append(_FINDER_COLUMN_G_C_C_T_M_TYPE_2_SQL);
  }
  boolean bindMode=false;
  if (mode == null) {
    query.append(_FINDER_COLUMN_G_C_C_T_M_MODE_1_SQL);
  }
 else   if (mode.equals(StringPool.BLANK)) {
    query.append(_FINDER_COLUMN_G_C_C_T_M_MODE_3_SQL);
  }
 else {
    bindMode=true;
    query.append(_FINDER_COLUMN_G_C_C_T_M_MODE_2_SQL);
  }
  if (!getDB().isSupportsInlineDistinct()) {
    query.append(_FILTER_SQL_SELECT_DDMTEMPLATE_NO_INLINE_DISTINCT_WHERE_2);
  }
  if (orderByComparator != null) {
    String[] orderByConditionFields=orderByComparator.getOrderByConditionFields();
    if (orderByConditionFields.length > 0) {
      query.append(WHERE_AND);
    }
    for (int i=0; i < orderByConditionFields.length; i++) {
      if (getDB().isSupportsInlineDistinct()) {
        query.append(_ORDER_BY_ENTITY_ALIAS);
      }
 else {
        query.append(_ORDER_BY_ENTITY_TABLE);
      }
      query.append(orderByConditionFields[i]);
      if ((i + 1) < orderByConditionFields.length) {
        if (orderByComparator.isAscending() ^ previous) {
          query.append(WHERE_GREATER_THAN_HAS_NEXT);
        }
 else {
          query.append(WHERE_LESSER_THAN_HAS_NEXT);
        }
      }
 else {
        if (orderByComparator.isAscending() ^ previous) {
          query.append(WHERE_GREATER_THAN);
        }
 else {
          query.append(WHERE_LESSER_THAN);
        }
      }
    }
    query.append(ORDER_BY_CLAUSE);
    String[] orderByFields=orderByComparator.getOrderByFields();
    for (int i=0; i < orderByFields.length; i++) {
      if (getDB().isSupportsInlineDistinct()) {
        query.append(_ORDER_BY_ENTITY_ALIAS);
      }
 else {
        query.append(_ORDER_BY_ENTITY_TABLE);
      }
      query.append(orderByFields[i]);
      if ((i + 1) < orderByFields.length) {
        if (orderByComparator.isAscending() ^ previous) {
          query.append(ORDER_BY_ASC_HAS_NEXT);
        }
 else {
          query.append(ORDER_BY_DESC_HAS_NEXT);
        }
      }
 else {
        if (orderByComparator.isAscending() ^ previous) {
          query.append(ORDER_BY_ASC);
        }
 else {
          query.append(ORDER_BY_DESC);
        }
      }
    }
  }
 else {
    if (getDB().isSupportsInlineDistinct()) {
      query.append(DDMTemplateModelImpl.ORDER_BY_JPQL);
    }
 else {
      query.append(DDMTemplateModelImpl.ORDER_BY_SQL);
    }
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),DDMTemplate.class.getName(),_FILTER_ENTITY_TABLE_FILTER_PK_COLUMN,groupId);
  SQLQuery q=session.createSynchronizedSQLQuery(sql);
  q.setFirstResult(0);
  q.setMaxResults(2);
  if (getDB().isSupportsInlineDistinct()) {
    q.addEntity(_FILTER_ENTITY_ALIAS,DDMTemplateImpl.class);
  }
 else {
    q.addEntity(_FILTER_ENTITY_TABLE,DDMTemplateImpl.class);
  }
  QueryPos qPos=QueryPos.getInstance(q);
  qPos.add(groupId);
  qPos.add(classNameId);
  qPos.add(classPK);
  if (bindType) {
    qPos.add(type);
  }
  if (bindMode) {
    qPos.add(mode);
  }
  if (orderByComparator != null) {
    Object[] values=orderByComparator.getOrderByConditionValues(ddmTemplate);
    for (    Object value : values) {
      qPos.add(value);
    }
  }
  List<DDMTemplate> list=q.list();
  if (list.size() == 2) {
    return list.get(1);
  }
 else {
    return null;
  }
}
