{
  CmdLineParser cmdLineParser=new CmdLineParser();
  CmdLineParser.Option basedirOption=cmdLineParser.addStringOption("basedir");
  CmdLineParser.Option minimizeOption=cmdLineParser.addStringOption("minimize");
  CmdLineParser.Option reportDuplicatesOption=cmdLineParser.addStringOption("reportDuplicates");
  cmdLineParser.parse(args);
  _basedir=(String)cmdLineParser.getOptionValue(basedirOption);
  String minimizeTestFileName=(String)cmdLineParser.getOptionValue(minimizeOption);
  minimizeTestFileName=normalizeFileName(minimizeTestFileName);
  String minimizeTestContent=getNormalizedContent(minimizeTestFileName);
  _reportDuplicates=GetterUtil.getBoolean((String)cmdLineParser.getOptionValue(reportDuplicatesOption));
  int testHtmlCount=0;
  Map<String,ObjectValuePair<String,IntegerWrapper>> testHtmlMap=new HashMap<String,ObjectValuePair<String,IntegerWrapper>>();
  Set<String> fileNames=getFileNames();
  for (  String fileName : fileNames) {
    if (fileName.length() > 161) {
      System.out.println("Exceeds 177 characters: portal-web/test/" + fileName);
    }
    if (fileName.endsWith("Test.html")) {
      testHtmlCount++;
      String content=getNormalizedContent(fileName);
      if ((content != null) && content.equals(minimizeTestContent)) {
        minimizeTestCase(fileName,minimizeTestFileName);
      }
      ObjectValuePair<String,IntegerWrapper> testHtmlOVP=testHtmlMap.get(content);
      if (testHtmlOVP == null) {
        testHtmlOVP=new ObjectValuePair<String,IntegerWrapper>(fileName,new IntegerWrapper());
        testHtmlMap.put(content,testHtmlOVP);
      }
 else {
        IntegerWrapper integerWrapper=testHtmlOVP.getValue();
        integerWrapper.increment();
      }
      translateTestCase(fileName);
    }
 else     if (fileName.endsWith("Tests.html")) {
      translateTestSuite(fileName);
    }
 else     if (fileName.endsWith("Test.java") || fileName.endsWith("Tests.java")) {
      if (!fileNames.contains(fileName.substring(0,fileName.length() - 5) + ".html")) {
        System.out.println("Unused: " + fileName);
      }
    }
  }
  List<ObjectValuePair<String,IntegerWrapper>> testHtmlOVPs=new ArrayList<ObjectValuePair<String,IntegerWrapper>>();
  int duplicateTestHtmlCount=0;
  for (  Map.Entry<String,ObjectValuePair<String,IntegerWrapper>> entry : testHtmlMap.entrySet()) {
    ObjectValuePair<String,IntegerWrapper> testHtmlOVP=entry.getValue();
    testHtmlOVPs.add(testHtmlOVP);
    IntegerWrapper integerWrapper=testHtmlOVP.getValue();
    duplicateTestHtmlCount+=integerWrapper.getValue();
  }
  Collections.sort(testHtmlOVPs,new TestHtmlCountComparator());
  StringBundler sb=new StringBundler();
  for (  ObjectValuePair<String,IntegerWrapper> testHtmlOVP : testHtmlOVPs) {
    String fileName=testHtmlOVP.getKey();
    IntegerWrapper integerWrapper=testHtmlOVP.getValue();
    if (integerWrapper.getValue() > 0) {
      sb.append(fileName);
      sb.append(",");
      sb.append(integerWrapper.getValue());
      sb.append("\n");
    }
  }
  if (_reportDuplicates && (sb.index() > 0)) {
    System.out.println("There are " + duplicateTestHtmlCount + " duplicate tests out of "+ testHtmlCount+ ". See duplicate_selenium_tests.txt.");
    FileUtil.write("duplicate_selenium_tests.txt",sb.toString());
  }
}
