{
  file=StringUtil.replace(file,StringPool.BACK_SLASH,StringPool.SLASH);
  int x=file.lastIndexOf(StringPool.SLASH);
  int y=file.indexOf(StringPool.PERIOD);
  String testPackagePath=StringUtil.replace(file.substring(0,x),StringPool.SLASH,StringPool.PERIOD);
  String testName=file.substring(x + 1,y);
  String testMethodName="test" + testName.substring(0,testName.length() - 4);
  String testFileName=basedir + "/" + file.substring(0,y)+ ".java";
  StringBuilder sb=new StringBuilder();
  sb.append("package " + testPackagePath + ";\n\n");
  sb.append("import com.liferay.portal.kernel.util.StringPool;\n");
  sb.append("import com.liferay.portalweb.portal.BaseTestCase;\n\n");
  sb.append("import com.liferay.portalweb.portal.util.RuntimeVariables;\n\n");
  sb.append("public class " + testName + " extends BaseTestCase {");
  sb.append("public void " + testMethodName + "() throws Exception {");
  String xml=_fileUtil.read(basedir + "/" + file);
  if ((xml.indexOf("<title>" + testName + "</title>") == -1) || (xml.indexOf("colspan=\"3\">" + testName + "</td>") == -1)) {
    System.out.println(testName + " has an invalid test name");
  }
  x=xml.indexOf("<tbody>");
  y=xml.indexOf("</tbody>");
  xml=xml.substring(x,y + 8);
  x=0;
  y=0;
  while (true) {
    x=xml.indexOf("<tr>",x);
    y=xml.indexOf("\n</tr>",x);
    if ((x == -1) || (y == -1)) {
      break;
    }
    x+=6;
    y++;
    String step=xml.substring(x,y);
    String[] params=getParams(step);
    String param1=params[0];
    String param2=fixParam(params[1]);
    String param3=fixParam(params[2]);
    if (param1.equals("assertConfirmation")) {
      param2=StringUtil.replace(param2,"?","[\\\\s\\\\S]");
      sb.append("assertTrue(selenium.getConfirmation().matches(\"^");
      sb.append(param2);
      sb.append("$\"));");
    }
 else     if (param1.equals("assertElementPresent") || param1.equals("assertElementNotPresent")) {
      if (param1.equals("assertElementPresent")) {
        sb.append("assertTrue");
      }
 else       if (param1.equals("assertElementNotPresent")) {
        sb.append("assertFalse");
      }
      sb.append("(selenium.isElementPresent(\"");
      sb.append(param2);
      sb.append("\"));");
    }
 else     if (param1.equals("captureEntirePageScreenshotAndWait")) {
      sb.append("selenium.captureEntirePageScreenshot(\"");
      sb.append(param2);
      sb.append("\", \"\");");
      sb.append("selenium.waitForPageToLoad(\"30000\");");
    }
 else     if (param1.equals("click") || param1.equals("mouseDown") || param1.equals("mouseUp")|| param1.equals("open")|| param1.equals("selectFrame")|| param1.equals("selectWindow")) {
      sb.append("selenium.");
      sb.append(param1);
      sb.append("(\"");
      sb.append(param2);
      sb.append("\");");
    }
 else     if (param1.equals("clickAndWait")) {
      sb.append("selenium.click(\"");
      sb.append(param2);
      sb.append("\");");
      sb.append("selenium.waitForPageToLoad(\"30000\");");
    }
 else     if (param1.equals("close")) {
      sb.append("selenium.");
      sb.append(param1);
      sb.append("();");
    }
 else     if (param1.equals("pause")) {
      sb.append("Thread.sleep(");
      sb.append(param2);
      sb.append(");");
    }
 else     if (param1.equals("addSelection") || param1.equals("select") || param1.equals("type")|| param1.equals("typeKeys")|| param1.equals("waitForPopUp")) {
      sb.append("selenium.");
      sb.append(param1);
      sb.append("(\"");
      sb.append(param2);
      sb.append("\", RuntimeVariables.replace(\"");
      sb.append(param3);
      sb.append("\"));");
    }
 else     if (param1.equals("selectAndWait")) {
      sb.append("selenium.select(\"");
      sb.append(param2);
      sb.append("\", \"");
      sb.append(param3);
      sb.append("\");");
      sb.append("selenium.waitForPageToLoad(\"30000\");");
    }
 else     if (param1.equals("storeText")) {
      sb.append("String ");
      sb.append(param3);
      sb.append(" = selenium.getText(\"");
      sb.append(param2);
      sb.append("\");");
      sb.append("RuntimeVariables.setValue(\"");
      sb.append(param3);
      sb.append("\", ");
      sb.append(param3);
      sb.append(");");
    }
 else     if (param1.equals("verifyElementPresent") || param1.equals("verifyElementNotPresent")) {
      if (param1.equals("verifyElementPresent")) {
        sb.append("verifyTrue");
      }
 else       if (param1.equals("verifyElementNotPresent")) {
        sb.append("verifyFalse");
      }
      sb.append("(selenium.isElementPresent(\"");
      sb.append(param2);
      sb.append("\"));");
    }
 else     if (param1.equals("verifyTextPresent") || param1.equals("verifyTextNotPresent")) {
      if (param1.equals("verifyTextPresent")) {
        sb.append("verifyTrue");
      }
 else       if (param1.equals("verifyTextNotPresent")) {
        sb.append("verifyFalse");
      }
      sb.append("(selenium.isTextPresent(\"");
      sb.append(param2);
      sb.append("\"));");
    }
 else     if (param1.equals("verifyTitle")) {
      sb.append("verifyEquals(\"");
      sb.append(param2);
      sb.append("\", selenium.getTitle());");
    }
 else     if (param1.equals("waitForElementNotPresent") || param1.equals("waitForElementPresent") || param1.equals("waitForTextNotPresent")|| param1.equals("waitForTextPresent")) {
      sb.append("for (int second = 0;; second++) {");
      sb.append("if (second >= 60) {");
      sb.append("fail(\"timeout\");");
      sb.append("}");
      sb.append("try {");
      sb.append("if (");
      if (param1.equals("waitForElementNotPresent") || param1.equals("waitForTextNotPresent")) {
        sb.append("!");
      }
      sb.append("selenium.");
      if (param1.equals("waitForElementNotPresent") || param1.equals("waitForElementPresent")) {
        sb.append("isElementPresent");
      }
 else       if (param1.equals("waitForTextNotPresent") || param1.equals("waitForTextPresent")) {
        sb.append("isTextPresent");
      }
      sb.append("(\"");
      sb.append(param2);
      sb.append("\")) {");
      sb.append("break;");
      sb.append("}");
      sb.append("}");
      sb.append("catch (Exception e) {");
      sb.append("}");
      sb.append("Thread.sleep(1000);");
      sb.append("}");
    }
 else     if (param1.equals("waitForTable")) {
      sb.append("for (int second = 0;; second++) {");
      sb.append("if (second >= 60) {");
      sb.append("fail(\"timeout\");");
      sb.append("}");
      sb.append("try {");
      sb.append("if (StringPool.BLANK.equals(selenium.getTable(\"");
      sb.append(param2);
      sb.append("\"))) {");
      sb.append("break;");
      sb.append("}");
      sb.append("}");
      sb.append("catch (Exception e) {");
      sb.append("}");
      sb.append("Thread.sleep(1000);");
      sb.append("}");
    }
 else {
      System.out.println(param1 + " was not translated");
    }
  }
  sb.append("}");
  sb.append("}");
  String content=sb.toString();
  ServiceBuilder.writeFile(new File(testFileName),content);
}
