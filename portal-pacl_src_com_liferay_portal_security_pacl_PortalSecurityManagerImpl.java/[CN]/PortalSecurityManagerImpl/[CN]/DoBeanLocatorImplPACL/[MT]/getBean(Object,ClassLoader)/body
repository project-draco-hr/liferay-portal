{
  Class<?> beanClass=bean.getClass();
  if (ProxyUtil.isProxyClass(beanClass) && (ProxyUtil.getInvocationHandler(bean) instanceof PACLInvocationHandler)) {
    return bean;
  }
  Class<?>[] interfaces=ReflectionUtil.getInterfaces(bean,classLoader);
  if (interfaces.length == 0) {
    return bean;
  }
  if (classLoader == ClassLoaderUtil.getPortalClassLoader()) {
    int stackIndex=Reflection.getStackIndex(5,5);
    Class<?> callerClass=Reflection.getCallerClass(stackIndex);
    ClassLoader callerClassLoader=ClassLoaderUtil.getClassLoader(callerClass);
    if (callerClassLoader == classLoader) {
      String callerClassName=callerClass.getName();
      if (!callerClassName.equals(BeanReferenceAnnotationBeanPostProcessor.class.getName())) {
        return bean;
      }
    }
  }
  InvocationHandler invocationHandler=new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] arguments) throws Throwable {
      return method.invoke(bean,arguments);
    }
  }
;
  invocationHandler=new PACLInvocationHandler(invocationHandler);
  return ProxyUtil.newProxyInstance(classLoader,interfaces,invocationHandler);
}
