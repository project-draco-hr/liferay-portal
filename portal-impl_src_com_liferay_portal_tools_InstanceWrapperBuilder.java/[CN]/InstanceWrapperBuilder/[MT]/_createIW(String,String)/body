{
  JavaClass javaClass=_getJavaClass(parentDir,srcFile);
  JavaMethod[] methods=javaClass.getMethods();
  StringMaker sm=new StringMaker();
  sm.append("package " + javaClass.getPackage() + ";");
  sm.append("public class " + javaClass.getName() + "_IW {");
  sm.append("public static " + javaClass.getName() + "_IW getInstance() {");
  sm.append("return _instance;");
  sm.append("}");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (javaMethod.isPublic() && javaMethod.isStatic()) {
      if (methodName.equals("getInstance")) {
        methodName="getWrappedInstance";
      }
      sm.append("public " + javaMethod.getReturns().getValue() + _getDimensions(javaMethod.getReturns())+ " "+ methodName+ "(");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sm.append(javaParameter.getType().getValue() + javaParameter.getGenericsName() + _getDimensions(javaParameter.getType())+ " "+ javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      Set<String> newExceptions=new LinkedHashSet<String>();
      for (int j=0; j < thrownExceptions.length; j++) {
        Type thrownException=thrownExceptions[j];
        newExceptions.add(thrownException.getValue());
      }
      if (newExceptions.size() > 0) {
        sm.append(" throws ");
        Iterator<String> itr=newExceptions.iterator();
        while (itr.hasNext()) {
          sm.append(itr.next());
          if (itr.hasNext()) {
            sm.append(", ");
          }
        }
      }
      sm.append("{");
      if (!javaMethod.getReturns().getValue().equals("void")) {
        sm.append("return ");
      }
      sm.append(javaClass.getName() + "." + javaMethod.getName()+ "(");
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sm.append(javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(");");
      sm.append("}");
    }
  }
  sm.append("private " + javaClass.getName() + "_IW() {");
  sm.append("}");
  sm.append("private static " + javaClass.getName() + "_IW _instance = new "+ javaClass.getName()+ "_IW();");
  sm.append("}");
  File file=new File(parentDir + "/" + StringUtil.replace(javaClass.getPackage(),".","/")+ "/"+ javaClass.getName()+ "_IW.java");
  ServiceBuilder.writeFile(file,sm.toString());
}
