{
  JavaClass javaClass=_getJavaClass(parentDir,srcFile);
  JavaMethod[] methods=javaClass.getMethods();
  StringBundler sb=new StringBundler();
  sb.append("package ");
  sb.append(javaClass.getPackage().getName());
  sb.append(";");
  sb.append("public class ");
  sb.append(javaClass.getName());
  sb.append("_IW {");
  sb.append("public static ");
  sb.append(javaClass.getName());
  sb.append("_IW getInstance() {");
  sb.append("return _instance;");
  sb.append("}\n");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isPublic() || !javaMethod.isStatic()) {
      continue;
    }
    if (methodName.equals("getInstance")) {
      methodName="getWrappedInstance";
    }
    DocletTag[] docletTags=javaMethod.getTagsByName("deprecated");
    if ((docletTags != null) && (docletTags.length > 0)) {
      sb.append("\t/**\n");
      sb.append("\t * @deprecated\n");
      sb.append("\t */\n");
    }
    sb.append("public ");
    sb.append(javaMethod.getReturns().getValue());
    sb.append(_getDimensions(javaMethod.getReturns()));
    sb.append(" ");
    sb.append(methodName);
    sb.append("(");
    JavaParameter[] parameters=javaMethod.getParameters();
    for (int j=0; j < parameters.length; j++) {
      JavaParameter javaParameter=parameters[j];
      sb.append(javaParameter.getType().getValue());
      sb.append(javaParameter.getGenericsName());
      sb.append(_getDimensions(javaParameter.getType()));
      sb.append(" ");
      sb.append(javaParameter.getName());
      if ((j + 1) != parameters.length) {
        sb.append(", ");
      }
    }
    sb.append(")");
    Type[] thrownExceptions=javaMethod.getExceptions();
    Set<String> newExceptions=new LinkedHashSet<String>();
    for (int j=0; j < thrownExceptions.length; j++) {
      Type thrownException=thrownExceptions[j];
      newExceptions.add(thrownException.getValue());
    }
    if (newExceptions.size() > 0) {
      sb.append(" throws ");
      Iterator<String> itr=newExceptions.iterator();
      while (itr.hasNext()) {
        sb.append(itr.next());
        if (itr.hasNext()) {
          sb.append(", ");
        }
      }
    }
    sb.append("{\n");
    if (!javaMethod.getReturns().getValue().equals("void")) {
      sb.append("return ");
    }
    sb.append(javaClass.getName());
    sb.append(".");
    sb.append(javaMethod.getName());
    sb.append("(");
    for (int j=0; j < parameters.length; j++) {
      JavaParameter javaParameter=parameters[j];
      sb.append(javaParameter.getName());
      if ((j + 1) != parameters.length) {
        sb.append(", ");
      }
    }
    sb.append(");");
    sb.append("}\n");
  }
  sb.append("private ");
  sb.append(javaClass.getName());
  sb.append("_IW() {");
  sb.append("}");
  sb.append("private static ");
  sb.append(javaClass.getName());
  sb.append("_IW _instance = new ");
  sb.append(javaClass.getName());
  sb.append("_IW();");
  sb.append("}");
  File file=new File(parentDir + "/" + StringUtil.replace(javaClass.getPackage().getName(),".","/")+ "/"+ javaClass.getName()+ "_IW.java");
  ServiceBuilder.writeFile(file,sb.toString());
}
