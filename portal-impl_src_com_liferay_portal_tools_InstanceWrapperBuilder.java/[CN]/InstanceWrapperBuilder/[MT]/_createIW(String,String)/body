{
  JavaClass javaClass=_getJavaClass(parentDir,srcFile);
  JavaMethod[] methods=javaClass.getMethods();
  StringBuilder sb=new StringBuilder();
  sb.append("package " + javaClass.getPackage().getName() + ";");
  sb.append("public class " + javaClass.getName() + "_IW {");
  sb.append("public static " + javaClass.getName() + "_IW getInstance() {");
  sb.append("return _instance;");
  sb.append("}\n");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isPublic() || !javaMethod.isStatic()) {
      continue;
    }
    if (methodName.equals("getInstance")) {
      methodName="getWrappedInstance";
    }
    DocletTag[] docletTags=javaMethod.getTagsByName("deprecated");
    if ((docletTags != null) && (docletTags.length > 0)) {
      sb.append("\t/**\n");
      sb.append("\t * @deprecated\n");
      sb.append("\t */\n");
    }
    sb.append("public ");
    TypeVariable[] typeParameters=javaMethod.getTypeParameters();
    if (typeParameters.length > 0) {
      sb.append(" " + typeParameters[0].getGenericValue() + " ");
    }
    sb.append(_getTypeGenericsName(javaMethod.getReturns()) + " " + methodName+ "(");
    JavaParameter[] parameters=javaMethod.getParameters();
    for (int j=0; j < parameters.length; j++) {
      JavaParameter javaParameter=parameters[j];
      sb.append(_getTypeGenericsName(javaParameter.getType()));
      if (javaParameter.isVarArgs()) {
        sb.append("...");
      }
      sb.append(" " + javaParameter.getName());
      if ((j + 1) != parameters.length) {
        sb.append(", ");
      }
    }
    sb.append(")");
    Type[] thrownExceptions=javaMethod.getExceptions();
    Set<String> newExceptions=new LinkedHashSet<String>();
    for (int j=0; j < thrownExceptions.length; j++) {
      Type thrownException=thrownExceptions[j];
      newExceptions.add(thrownException.getValue());
    }
    if (newExceptions.size() > 0) {
      sb.append(" throws ");
      Iterator<String> itr=newExceptions.iterator();
      while (itr.hasNext()) {
        sb.append(itr.next());
        if (itr.hasNext()) {
          sb.append(", ");
        }
      }
    }
    sb.append("{\n");
    if (!javaMethod.getReturns().getValue().equals("void")) {
      sb.append("return ");
    }
    sb.append(javaClass.getName() + "." + javaMethod.getName()+ "(");
    for (int j=0; j < parameters.length; j++) {
      JavaParameter javaParameter=parameters[j];
      sb.append(javaParameter.getName());
      if ((j + 1) != parameters.length) {
        sb.append(", ");
      }
    }
    sb.append(");");
    sb.append("}\n");
  }
  sb.append("private " + javaClass.getName() + "_IW() {");
  sb.append("}");
  sb.append("private static " + javaClass.getName() + "_IW _instance = new "+ javaClass.getName()+ "_IW();");
  sb.append("}");
  File file=new File(parentDir + "/" + StringUtil.replace(javaClass.getPackage().getName(),".","/")+ "/"+ javaClass.getName()+ "_IW.java");
  ServiceBuilder.writeFile(file,sb.toString());
}
