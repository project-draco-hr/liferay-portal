{
  JavaClass javaClass=_getJavaClass(parentDir,srcFile);
  JavaMethod[] javaMethods=javaClass.getMethods();
  StringBundler sb=new StringBundler();
  sb.append("package ");
  sb.append(javaClass.getPackage().getName());
  sb.append(";");
  sb.append("public class ");
  sb.append(javaClass.getName());
  sb.append("_IW {");
  sb.append("public static ");
  sb.append(javaClass.getName());
  sb.append("_IW getInstance() {");
  sb.append("return _instance;");
  sb.append("}\n");
  for (  JavaMethod javaMethod : javaMethods) {
    String methodName=javaMethod.getName();
    if (!javaMethod.isPublic() || !javaMethod.isStatic()) {
      continue;
    }
    if (methodName.equals("getInstance")) {
      methodName="getWrappedInstance";
    }
    DocletTag[] docletTags=javaMethod.getTagsByName("deprecated");
    if (ArrayUtil.isNotEmpty(docletTags)) {
      sb.append("\t/**\n");
      sb.append("\t * @deprecated\n");
      sb.append("\t */\n");
      sb.append("\t@Deprecated\n");
    }
    sb.append("public ");
    TypeVariable[] typeParameters=javaMethod.getTypeParameters();
    if (typeParameters.length > 0) {
      sb.append(" <");
      for (int i=0; i < typeParameters.length; i++) {
        TypeVariable typeParameter=typeParameters[i];
        sb.append(typeParameter.getName());
        sb.append(", ");
      }
      sb.setIndex(sb.index() - 1);
      sb.append("> ");
    }
    sb.append(_getTypeGenericsName(javaMethod.getReturnType()));
    sb.append(" ");
    sb.append(methodName);
    sb.append(StringPool.OPEN_PARENTHESIS);
    JavaParameter[] javaParameters=javaMethod.getParameters();
    for (int i=0; i < javaParameters.length; i++) {
      JavaParameter javaParameter=javaParameters[i];
      sb.append(_getTypeGenericsName(javaParameter.getType()));
      if (javaParameter.isVarArgs()) {
        sb.append("...");
      }
      sb.append(" ");
      sb.append(javaParameter.getName());
      sb.append(", ");
    }
    if (javaParameters.length > 0) {
      sb.setIndex(sb.index() - 1);
    }
    sb.append(StringPool.CLOSE_PARENTHESIS);
    Type[] thrownExceptions=javaMethod.getExceptions();
    Set<String> newExceptions=new LinkedHashSet<>();
    for (int j=0; j < thrownExceptions.length; j++) {
      Type thrownException=thrownExceptions[j];
      newExceptions.add(thrownException.getValue());
    }
    if (!newExceptions.isEmpty()) {
      sb.append(" throws ");
      for (      String newException : newExceptions) {
        sb.append(newException);
        sb.append(", ");
      }
      sb.setIndex(sb.index() - 1);
    }
    sb.append("{\n");
    if (!javaMethod.getReturnType().getValue().equals("void")) {
      sb.append("return ");
    }
    sb.append(javaClass.getName());
    sb.append(".");
    sb.append(javaMethod.getName());
    sb.append("(");
    for (int j=0; j < javaParameters.length; j++) {
      JavaParameter javaParameter=javaParameters[j];
      sb.append(javaParameter.getName());
      sb.append(", ");
    }
    if (javaParameters.length > 0) {
      sb.setIndex(sb.index() - 1);
    }
    sb.append(");");
    sb.append("}\n");
  }
  sb.append("private ");
  sb.append(javaClass.getName());
  sb.append("_IW() {");
  sb.append("}");
  sb.append("private static ");
  sb.append(javaClass.getName());
  sb.append("_IW _instance = new ");
  sb.append(javaClass.getName());
  sb.append("_IW();");
  sb.append("}");
  File file=new File(parentDir + "/" + StringUtil.replace(javaClass.getPackage().getName(),".","/")+ "/"+ javaClass.getName()+ "_IW.java");
  ToolsUtil.writeFile(file,sb.toString(),null);
}
