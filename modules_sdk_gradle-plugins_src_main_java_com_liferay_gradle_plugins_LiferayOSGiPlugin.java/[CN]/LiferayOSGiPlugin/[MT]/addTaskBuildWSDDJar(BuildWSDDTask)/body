{
  Project project=buildWSDDTask.getProject();
  Jar jar=GradleUtil.addTask(project,buildWSDDTask.getName() + "Jar",Jar.class);
  jar.dependsOn(buildWSDDTask);
  jar.deleteAllActions();
  jar.doLast(new Action<Task>(){
    @Override public void execute(    Task task){
      Project project=task.getProject();
      BundleExtension bundleExtension=GradleUtil.getExtension(project,BundleExtension.class);
      Factory<JarBuilder> jarBuilderFactory=bundleExtension.getJarBuilderFactory();
      JarBuilder jarBuilder=jarBuilderFactory.create();
      Map<String,String> properties=_getProperties(project);
      jarBuilder.withBase(BundleUtils.getBase(project));
      jarBuilder.withClasspath(_getClasspath(project));
      jarBuilder.withName(properties.get(Constants.BUNDLE_SYMBOLICNAME));
      jarBuilder.withProperties(properties);
      jarBuilder.withResources(new File[0]);
      jarBuilder.withSourcepath(BundleUtils.getSources(project));
      jarBuilder.withTrace(bundleExtension.isTrace());
      jarBuilder.withVersion(BundleUtils.getVersion(project));
      TaskOutputs taskOutputs=task.getOutputs();
      FileCollection fileCollection=taskOutputs.getFiles();
      jarBuilder.writeJarTo(fileCollection.getSingleFile());
    }
    private File[] _getClasspath(    Project project){
      SourceSet sourceSet=GradleUtil.getSourceSet(project,SourceSet.MAIN_SOURCE_SET_NAME);
      SourceSetOutput sourceSetOutput=sourceSet.getOutput();
      return new File[]{sourceSetOutput.getClassesDir(),sourceSetOutput.getResourcesDir()};
    }
    private Map<String,String> _getProperties(    Project project){
      LiferayOSGiExtension liferayOSGiExtension=GradleUtil.getExtension(project,LiferayOSGiExtension.class);
      Map<String,String> properties=liferayOSGiExtension.getBundleDefaultInstructions();
      properties.remove(Constants.DONOTCOPY);
      String bundleName=getBundleInstruction(project,Constants.BUNDLE_NAME);
      if (Validator.isNotNull(bundleName)) {
        properties.put(Constants.BUNDLE_NAME,bundleName + " WSDD descriptors");
      }
      String bundleSymbolicName=getBundleInstruction(project,Constants.BUNDLE_SYMBOLICNAME);
      properties.put(Constants.BUNDLE_SYMBOLICNAME,bundleSymbolicName + ".wsdd");
      properties.put(Constants.FRAGMENT_HOST,bundleSymbolicName);
      properties.put(Constants.IMPORT_PACKAGE,"javax.servlet,javax.servlet.http");
      StringBuilder sb=new StringBuilder();
      sb.append("WEB-INF/=");
      sb.append(FileUtil.getRelativePath(project,buildWSDDTask.getServerConfigFile()));
      sb.append(',');
      sb.append(FileUtil.getRelativePath(project,buildWSDDTask.getOutputDir()));
      sb.append(";filter:=*.wsdd");
      properties.put(Constants.INCLUDE_RESOURCE,sb.toString());
      return properties;
    }
  }
);
  String taskName=buildWSDDTask.getName();
  if (taskName.equals(WSDDBuilderPlugin.BUILD_WSDD_TASK_NAME)) {
    jar.setAppendix("wsdd");
  }
 else {
    jar.setAppendix("wsdd-" + taskName);
  }
  buildWSDDTask.finalizedBy(jar);
  addDeployedFile(jar,true);
  return jar;
}
