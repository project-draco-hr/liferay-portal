{
  Project project=buildWSDDTask.getProject();
  final Jar jar=GradleUtil.addTask(project,buildWSDDTask.getName() + "Jar",Jar.class);
  jar.dependsOn(buildWSDDTask);
  String taskName=buildWSDDTask.getName();
  if (taskName.equals(WSDDBuilderPlugin.BUILD_WSDD_TASK_NAME)) {
    jar.setAppendix("wsdd");
  }
 else {
    jar.setAppendix("wsdd-" + taskName);
  }
  jar.deleteAllActions();
  jar.doLast(new Action<Task>(){
    @Override public void execute(    Task task){
      Project project=task.getProject();
      BundleExtension bundleExtension=GradleUtil.getExtension(project,BundleExtension.class);
      Factory<JarBuilder> jarBuilderFactory=bundleExtension.getJarBuilderFactory();
      JarBuilder jarBuilder=jarBuilderFactory.create();
      jarBuilder.withBase(BundleUtils.getBase(project));
      SourceSet sourceSet=GradleUtil.getSourceSet(project,SourceSet.MAIN_SOURCE_SET_NAME);
      SourceSetOutput sourceSetOutput=sourceSet.getOutput();
      jarBuilder.withClasspath(new File[]{sourceSetOutput.getClassesDir(),sourceSetOutput.getResourcesDir()});
      LiferayOSGiExtension liferayOSGiExtension=GradleUtil.getExtension(project,LiferayOSGiExtension.class);
      Map<String,String> properties=liferayOSGiExtension.getBundleDefaultInstructions();
      String bundleName=getBundleInstruction(project,Constants.BUNDLE_NAME);
      properties.put(Constants.BUNDLE_NAME,bundleName + " WSDD descriptors");
      String bundleSymbolicName=getBundleInstruction(project,Constants.BUNDLE_SYMBOLICNAME);
      properties.put(Constants.BUNDLE_SYMBOLICNAME,bundleSymbolicName + ".wsdd");
      properties.put(Constants.FRAGMENT_HOST,bundleSymbolicName);
      properties.put(Constants.IMPORT_PACKAGE,"javax.servlet,javax.servlet.http");
      StringBuilder sb=new StringBuilder();
      sb.append("WEB-INF/=");
      sb.append(FileUtil.getRelativePath(project,buildWSDDTask.getServerConfigFile()));
      sb.append(',');
      sb.append(FileUtil.getRelativePath(project,buildWSDDTask.getOutputDir()));
      sb.append(";filter:=*.wsdd");
      properties.put(Constants.INCLUDE_RESOURCE,sb.toString());
      jarBuilder.withProperties(properties);
      jarBuilder.withName(properties.get(Constants.BUNDLE_SYMBOLICNAME));
      jarBuilder.withResources(new File[0]);
      jarBuilder.withSourcepath(BundleUtils.getSources(project));
      jarBuilder.withTrace(bundleExtension.isTrace());
      jarBuilder.withVersion(BundleUtils.getVersion(project));
      TaskOutputs taskOutputs=task.getOutputs();
      FileCollection fileCollection=taskOutputs.getFiles();
      jarBuilder.writeJarTo(fileCollection.getSingleFile());
    }
  }
);
  buildWSDDTask.finalizedBy(jar);
  addCleanDeployedFile(project,new Callable<String>(){
    @Override public String call() throws Exception {
      return jar.getArchiveName();
    }
  }
);
  Task task=GradleUtil.getTask(project,DEPLOY_TASK_NAME);
  if (task instanceof Copy) {
    Copy copy=(Copy)task;
    copy.from(new Callable<File>(){
      @Override public File call() throws Exception {
        return jar.getArchivePath();
      }
    }
);
  }
  return jar;
}
