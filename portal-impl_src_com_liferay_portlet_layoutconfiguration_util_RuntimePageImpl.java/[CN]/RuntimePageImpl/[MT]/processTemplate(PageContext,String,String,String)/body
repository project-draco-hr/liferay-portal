{
  if (Validator.isNull(velocityTemplateContent)) {
    return;
  }
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
  TemplateProcessor processor=new TemplateProcessor(request,response,portletId);
  Template template=TemplateManagerUtil.getTemplate(TemplateManager.VELOCITY,velocityTemplateId,velocityTemplateContent,TemplateContextType.STANDARD);
  template.put("processor",processor);
  template.prepare(request);
  UnsyncStringWriter unsyncStringWriter=new UnsyncStringWriter();
  MethodHandler methodHandler=new MethodHandler(_initMethodKey,pageContext.getServletContext(),request,new PipingServletResponse(response,unsyncStringWriter),pageContext);
  Object velocityTaglib=methodHandler.invoke(true);
  template.put("taglibLiferay",velocityTaglib);
  template.put("theme",velocityTaglib);
  try {
    template.processTemplate(unsyncStringWriter);
  }
 catch (  Exception e) {
    _log.error(e,e);
    throw e;
  }
  Map<Integer,List<PortletRenderer>> portletRenderersMap=processor.getPortletRenderersMap();
  Map<String,StringBundler> contentsMap=new HashMap<String,StringBundler>();
  Lock mergeLock=null;
  long timeStamp=0;
  boolean parallelRenderEnable=GetterUtil.getBoolean(request.getAttribute(WebKeys.PORTLET_PARALLEL_RENDER));
  for (  Map.Entry<Integer,List<PortletRenderer>> entry : portletRenderersMap.entrySet()) {
    if (_log.isDebugEnabled()) {
      _log.debug("Processing render weight : " + entry.getKey());
    }
    List<PortletRenderer> portletRenderers=entry.getValue();
    if (parallelRenderEnable && (portletRenderers.size() > 1)) {
      if (_log.isDebugEnabled()) {
        _log.debug("Start parallel rendering.");
        timeStamp=System.currentTimeMillis();
      }
      if (mergeLock == null) {
        mergeLock=new ReentrantLock();
      }
      request.setAttribute(WebKeys.PARALLEL_RENDERING_MERGE_LOCK,mergeLock);
      ExecutorService executorService=PortalExecutorManagerUtil.getPortalExecutor(RuntimePageImpl.class.getName());
      Map<Future<StringBundler>,PortletRenderer> futureResultMap=new HashMap<Future<StringBundler>,PortletRenderer>(portletRenderers.size());
      for (      PortletRenderer portletRenderer : portletRenderers) {
        if (_log.isDebugEnabled()) {
          _log.debug("Submit parallel rendering request for portlet : " + portletRenderer.getPortlet().getPortletId());
        }
        Future<StringBundler> futureResult=executorService.submit(portletRenderer.getCallable(request,response));
        futureResultMap.put(futureResult,portletRenderer);
      }
      long waitTime=_waitTime;
      for (      Map.Entry<Future<StringBundler>,PortletRenderer> futureResultEntry : futureResultMap.entrySet()) {
        Future<StringBundler> futureResult=futureResultEntry.getKey();
        PortletRenderer portletRenderer=futureResultEntry.getValue();
        Portlet portlet=portletRenderer.getPortlet();
        if ((waitTime > 0) || futureResult.isDone()) {
          try {
            long startTime=System.currentTimeMillis();
            StringBundler result=futureResult.get(waitTime,TimeUnit.MILLISECONDS);
            long duration=System.currentTimeMillis() - startTime;
            waitTime-=duration;
            contentsMap.put(portlet.getPortletId(),result);
            portletRenderer.finishParallelRender();
            if (_log.isDebugEnabled()) {
              _log.debug("Successfully parallel rendered portlet : " + portlet.getPortletId());
            }
            continue;
          }
 catch (          ExecutionException ee) {
            throw ee;
          }
catch (          InterruptedException ie) {
            waitTime=-1;
          }
catch (          TimeoutException te) {
            waitTime=-1;
          }
        }
        futureResult.cancel(true);
        StringBundler result=null;
        if (processor.isAjaxableRenderEnable() && portlet.isAjaxable()) {
          if (_log.isDebugEnabled()) {
            _log.debug("Fall back to ajax rendering portlet : " + portlet.getPortletId());
          }
          result=portletRenderer.renderAjax(request,response);
        }
 else {
          if (_log.isDebugEnabled()) {
            if (processor.isAjaxableRenderEnable()) {
              _log.debug("Fall back to error page, as portlet : " + portlet.getPortletId() + " is not ajaxable");
            }
 else {
              _log.debug("Fall back to error page for portlet : " + portlet.getPortletId() + ", as ajaxable render is disabled");
            }
          }
          result=portletRenderer.renderError(request,response);
        }
        contentsMap.put(portlet.getPortletId(),result);
      }
      request.removeAttribute(WebKeys.PARALLEL_RENDERING_MERGE_LOCK);
      if (_log.isDebugEnabled()) {
        long duration=System.currentTimeMillis() - timeStamp;
        _log.debug("End parallel rendering. Took " + duration + " ms");
      }
    }
 else {
      if (_log.isDebugEnabled()) {
        _log.debug("Start serial rendering.");
        timeStamp=System.currentTimeMillis();
      }
      for (      PortletRenderer portletRenderer : portletRenderers) {
        StringBundler result=portletRenderer.render(request,response);
        Portlet portlet=portletRenderer.getPortlet();
        contentsMap.put(portlet.getPortletId(),result);
        if (_log.isDebugEnabled()) {
          _log.debug("Serial rendered portlet : " + portlet.getPortletId());
        }
      }
      if (_log.isDebugEnabled()) {
        long duration=System.currentTimeMillis() - timeStamp;
        _log.debug("End serial rendering. Took " + duration + " ms");
      }
    }
  }
  if (parallelRenderEnable && (_waitTime == Integer.MAX_VALUE)) {
    _waitTime=PropsValues.LAYOUT_PARALLEL_RENDER_TIMEOUT;
  }
  String output=unsyncStringWriter.toString();
  StringBundler sb=StringUtil.replaceWithStringBundler(output,"[$TEMPLATE_PORTLET_","$]",contentsMap);
  sb.writeTo(pageContext.getOut());
}
