{
  long pk=RandomTestUtil.nextLong();
  TrashVersion newTrashVersion=_persistence.create(pk);
  newTrashVersion.setEntryId(RandomTestUtil.nextLong());
  newTrashVersion.setClassNameId(RandomTestUtil.nextLong());
  newTrashVersion.setClassPK(RandomTestUtil.nextLong());
  newTrashVersion.setTypeSettings(RandomTestUtil.randomString());
  newTrashVersion.setStatus(RandomTestUtil.nextInt());
  _trashVersions.add(_persistence.update(newTrashVersion));
  TrashVersion existingTrashVersion=_persistence.findByPrimaryKey(newTrashVersion.getPrimaryKey());
  Assert.assertEquals(existingTrashVersion.getVersionId(),newTrashVersion.getVersionId());
  Assert.assertEquals(existingTrashVersion.getEntryId(),newTrashVersion.getEntryId());
  Assert.assertEquals(existingTrashVersion.getClassNameId(),newTrashVersion.getClassNameId());
  Assert.assertEquals(existingTrashVersion.getClassPK(),newTrashVersion.getClassPK());
  Assert.assertEquals(existingTrashVersion.getTypeSettings(),newTrashVersion.getTypeSettings());
  Assert.assertEquals(existingTrashVersion.getStatus(),newTrashVersion.getStatus());
}
