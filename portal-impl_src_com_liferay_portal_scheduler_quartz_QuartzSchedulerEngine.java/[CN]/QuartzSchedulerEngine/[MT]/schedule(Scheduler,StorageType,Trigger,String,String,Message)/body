{
  try {
    JobBuilder jobBuilder=JobBuilder.newJob(MessageSenderJob.class);
    jobBuilder.withIdentity(trigger.getJobKey());
    JobDetail jobDetail=jobBuilder.build();
    JobDataMap jobDataMap=jobDetail.getJobDataMap();
    jobDataMap.put(DESCRIPTION,description);
    jobDataMap.put(DESTINATION_NAME,destinationName);
    jobDataMap.put(MESSAGE,JSONFactoryUtil.serialize(message));
    jobDataMap.put(STORAGE_TYPE,storageType.toString());
    JobState jobState=new JobState(TriggerState.NORMAL,message.getInteger(EXCEPTIONS_MAX_SIZE));
    jobDataMap.put(JOB_STATE,JobStateSerializeUtil.serialize(jobState));
    unregisterMessageListener(scheduler,trigger.getJobKey());
synchronized (this) {
      scheduler.deleteJob(trigger.getJobKey());
      scheduler.scheduleJob(jobDetail,trigger);
    }
  }
 catch (  ObjectAlreadyExistsException oaee) {
    if (_log.isInfoEnabled()) {
      _log.info("Message is already scheduled");
    }
  }
}
