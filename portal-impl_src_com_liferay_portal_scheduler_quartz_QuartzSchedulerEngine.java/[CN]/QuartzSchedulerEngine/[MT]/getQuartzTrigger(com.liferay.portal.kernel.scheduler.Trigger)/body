{
  if (trigger == null) {
    return null;
  }
  Date endDate=trigger.getEndDate();
  String jobName=fixMaxLength(trigger.getJobName(),JOB_NAME_MAX_LENGTH);
  String groupName=fixMaxLength(trigger.getGroupName(),GROUP_NAME_MAX_LENGTH);
  Date startDate=trigger.getStartDate();
  Trigger quartzTrigger=null;
  TriggerType triggerType=trigger.getTriggerType();
  if (triggerType.equals(TriggerType.CRON)) {
    try {
      TriggerBuilder<Trigger> triggerBuilder=TriggerBuilder.newTrigger();
      triggerBuilder.endAt(endDate);
      triggerBuilder.forJob(jobName,groupName);
      triggerBuilder.startAt(startDate);
      triggerBuilder.withIdentity(jobName,groupName);
      CronScheduleBuilder cronScheduleBuilder=CronScheduleBuilder.cronSchedule((String)trigger.getTriggerContent());
      triggerBuilder.withSchedule(cronScheduleBuilder);
      quartzTrigger=triggerBuilder.build();
    }
 catch (    ParseException pe) {
      throw new SchedulerException("Unable to parse cron text " + trigger.getTriggerContent());
    }
  }
 else   if (triggerType.equals(TriggerType.SIMPLE)) {
    long interval=(Long)trigger.getTriggerContent();
    if (interval <= 0) {
      if (_log.isDebugEnabled()) {
        _log.debug("Not scheduling " + trigger.getJobName() + " because interval is less than or equal to 0");
      }
      return null;
    }
    TriggerBuilder<Trigger> triggerBuilder=TriggerBuilder.newTrigger();
    triggerBuilder.endAt(endDate);
    triggerBuilder.forJob(jobName,groupName);
    triggerBuilder.startAt(startDate);
    triggerBuilder.withIdentity(jobName,groupName);
    SimpleScheduleBuilder simpleScheduleBuilder=SimpleScheduleBuilder.simpleSchedule();
    simpleScheduleBuilder.withIntervalInMilliseconds(interval);
    simpleScheduleBuilder.withRepeatCount(SimpleTrigger.REPEAT_INDEFINITELY);
    triggerBuilder.withSchedule(simpleScheduleBuilder);
    quartzTrigger=triggerBuilder.build();
  }
 else {
    throw new SchedulerException("Unknown trigger type " + trigger.getTriggerType());
  }
  return quartzTrigger;
}
