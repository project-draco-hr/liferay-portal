{
  if (trigger == null) {
    return null;
  }
  Date startDate=trigger.getStartDate();
  if (startDate == null) {
    if (ServerDetector.getServerId().equals(ServerDetector.TOMCAT_ID)) {
      startDate=new Date(System.currentTimeMillis() + Time.MINUTE);
    }
 else {
      startDate=new Date(System.currentTimeMillis() + Time.MINUTE * 3);
    }
  }
  Date endDate=trigger.getEndDate();
  String jobName=fixMaxLength(trigger.getJobName(),JOB_NAME_MAX_LENGTH);
  String groupName=fixMaxLength(trigger.getGroupName(),GROUP_NAME_MAX_LENGTH);
  Trigger quartzTrigger=null;
  TriggerType triggerType=trigger.getTriggerType();
  if (triggerType.equals(TriggerType.CRON)) {
    try {
      quartzTrigger=TriggerBuilder.newTrigger().withIdentity(jobName,groupName).withSchedule(CronScheduleBuilder.cronSchedule((String)trigger.getTriggerContent())).forJob(jobName,groupName).startAt(startDate).endAt(endDate).build();
    }
 catch (    ParseException pe) {
      throw new SchedulerException("Unable to parse cron text " + trigger.getTriggerContent());
    }
  }
 else   if (triggerType.equals(TriggerType.SIMPLE)) {
    long interval=(Long)trigger.getTriggerContent();
    if (interval <= 0) {
      if (_log.isDebugEnabled()) {
        _log.debug("Not scheduling " + trigger.getJobName() + " because interval is less than or equal to 0");
      }
      return null;
    }
    quartzTrigger=TriggerBuilder.newTrigger().withIdentity(jobName,groupName).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInMilliseconds(interval).withRepeatCount(SimpleTrigger.REPEAT_INDEFINITELY)).forJob(jobName,groupName).startAt(startDate).endAt(endDate).build();
  }
 else {
    throw new SchedulerException("Unknown trigger type " + trigger.getTriggerType());
  }
  return quartzTrigger;
}
