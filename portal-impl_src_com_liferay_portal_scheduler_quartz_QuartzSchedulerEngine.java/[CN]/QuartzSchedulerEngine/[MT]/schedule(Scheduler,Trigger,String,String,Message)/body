{
  try {
    String jobName=trigger.getName();
    String groupName=trigger.getGroup();
    JobDetail jobDetail=new JobDetail(jobName,groupName,MessageSenderJob.class);
    JobDataMap jobDataMap=jobDetail.getJobDataMap();
    jobDataMap.put(DESCRIPTION,description);
    jobDataMap.put(DESTINATION_NAME,destinationName);
    jobDataMap.put(MESSAGE,JSONFactoryUtil.serialize(message));
    JobState jobState=new JobState(TriggerState.NORMAL,message.getInteger(EXCEPTIONS_MAX_SIZE));
    SchedulerContext schedulerContext=scheduler.getContext();
    schedulerContext.put(jobDetail.getFullName(),jobState);
    if (scheduler == _memoryScheduler) {
      scheduler.scheduleJob(jobDetail,trigger);
    }
 else {
      jobDetail.setDurability(true);
synchronized (this) {
        scheduler.deleteJob(jobName,groupName);
        scheduler.scheduleJob(jobDetail,trigger);
      }
    }
  }
 catch (  ObjectAlreadyExistsException oare) {
    if (_log.isInfoEnabled()) {
      _log.info("Message is already scheduled");
    }
  }
}
