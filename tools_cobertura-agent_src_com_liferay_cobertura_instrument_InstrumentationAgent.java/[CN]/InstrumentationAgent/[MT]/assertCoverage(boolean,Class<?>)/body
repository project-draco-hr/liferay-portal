{
  if (!_dynamicallyInstrumented) {
    return;
  }
  File dataFile=CoverageDataFileHandler.getDefaultDataFile();
  try {
    ProjectData projectData=ProjectDataUtil.captureProjectData(dataFile,_lockFile);
    for (    Class<?> clazz : classes) {
      ClassData classData=projectData.getClassData(clazz.getName());
      _assertClassDataCoverage(clazz,classData);
      if (includeInnerClasses) {
        Class<?>[] declaredClasses=clazz.getDeclaredClasses();
        declaredClass:         for (        Class<?> declaredClass : declaredClasses) {
          for (          Class<?> clazz2 : classes) {
            if (clazz2.equals(declaredClass)) {
              continue declaredClass;
            }
          }
          classData=projectData.getClassData(declaredClass.getName());
          _assertClassDataCoverage(declaredClass,classData);
        }
      }
    }
  }
  finally {
    dataFile.delete();
    System.clearProperty("junit.code.coverage");
    _dynamicallyInstrumented=false;
    _instrumentation.removeTransformer(_coberturaClassFileTransformer);
    _coberturaClassFileTransformer=null;
    if (_originalClassDefinitions != null) {
      try {
        List<ClassDefinition> classDefinitions=new ArrayList<ClassDefinition>(_originalClassDefinitions.size());
        for (int i=0; i < _originalClassDefinitions.size(); i++) {
          OriginalClassDefinition originalClassDefinition=_originalClassDefinitions.get(i);
          ClassDefinition classDefinition=originalClassDefinition.toClassDefinition();
          if (classDefinition != null) {
            classDefinitions.add(classDefinition);
          }
        }
        _originalClassDefinitions=null;
        _instrumentation.redefineClasses(classDefinitions.toArray(new ClassDefinition[classDefinitions.size()]));
      }
 catch (      Exception e) {
        throw new RuntimeException("Unable to uninstrument classes",e);
      }
    }
  }
}
