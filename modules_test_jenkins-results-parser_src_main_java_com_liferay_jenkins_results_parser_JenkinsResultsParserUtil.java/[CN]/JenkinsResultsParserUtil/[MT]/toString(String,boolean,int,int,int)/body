{
  url=fixURL(url);
  String key=url.replace("//","/");
  if (checkCache && _toStringCache.containsKey(key) && !url.startsWith("file:")) {
    System.out.println("Loading " + url);
    return _toStringCache.get(key);
  }
  int retryCount=0;
  while (true) {
    try {
      System.out.println("Downloading " + url);
      StringBuilder sb=new StringBuilder();
      URL urlObject=new URL(url);
      URLConnection urlConnection=urlObject.openConnection();
      if (timeout != 0) {
        urlConnection.setConnectTimeout(timeout);
        urlConnection.setReadTimeout(timeout);
      }
      int bytes=0;
      String line=null;
      try (BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))){
        while ((line=bufferedReader.readLine()) != null) {
          byte[] lineBytes=line.getBytes();
          bytes+=lineBytes.length;
          if (bytes > (30 * 1024 * 1024)) {
            sb.append("Response for ");
            sb.append(url);
            sb.append(" was truncated due to its size.");
            break;
          }
          sb.append(line);
          sb.append("\n");
        }
      }
       if (!url.startsWith("file:") && (bytes < (3 * 1024 * 1024))) {
        _toStringCache.put(key,sb.toString());
      }
      return sb.toString();
    }
 catch (    FileNotFoundException fnfe) {
      retryCount++;
      if ((maxRetries >= 0) && (retryCount >= maxRetries)) {
        throw fnfe;
      }
      System.out.println("Retry in " + retryPeriod + " seconds");
      sleep(1000 * retryPeriod);
    }
  }
}
