{
  Group newGroup=addGroup();
  _persistence.clearCache();
  Group existingGroup=_persistence.findByPrimaryKey(newGroup.getPrimaryKey());
  Assert.assertTrue(Objects.equals(existingGroup.getUuid(),ReflectionTestUtil.invoke(existingGroup,"getOriginalUuid",new Class<?>[0])));
  Assert.assertEquals(Long.valueOf(existingGroup.getGroupId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingGroup.getLiveGroupId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalLiveGroupId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingGroup.getCompanyId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertTrue(Objects.equals(existingGroup.getGroupKey(),ReflectionTestUtil.invoke(existingGroup,"getOriginalGroupKey",new Class<?>[0])));
  Assert.assertEquals(Long.valueOf(existingGroup.getCompanyId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertTrue(Objects.equals(existingGroup.getFriendlyURL(),ReflectionTestUtil.invoke(existingGroup,"getOriginalFriendlyURL",new Class<?>[0])));
  Assert.assertEquals(Long.valueOf(existingGroup.getCompanyId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingGroup.getClassNameId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalClassNameId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingGroup.getClassPK()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalClassPK",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingGroup.getCompanyId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingGroup.getLiveGroupId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalLiveGroupId",new Class<?>[0]));
  Assert.assertTrue(Objects.equals(existingGroup.getGroupKey(),ReflectionTestUtil.invoke(existingGroup,"getOriginalGroupKey",new Class<?>[0])));
  Assert.assertEquals(Long.valueOf(existingGroup.getCompanyId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingGroup.getClassNameId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalClassNameId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingGroup.getLiveGroupId()),ReflectionTestUtil.<Long>invoke(existingGroup,"getOriginalLiveGroupId",new Class<?>[0]));
  Assert.assertTrue(Objects.equals(existingGroup.getGroupKey(),ReflectionTestUtil.invoke(existingGroup,"getOriginalGroupKey",new Class<?>[0])));
}
