{
  Map<String,String> arguments=ArgumentsUtil.parseArguments(args);
  String lpVersion=GetterUtil.getString(arguments.get("lp.version"));
  String propertiesDir=GetterUtil.getString(arguments.get("properties.dir"));
  File propertiesDirectory=new File(propertiesDir);
  if (!propertiesDirectory.exists()) {
    System.out.println(propertiesDirectory.getPath() + " not found");
    return;
  }
  File[] files=propertiesDirectory.listFiles();
  List<String> htmlFileNames=new ArrayList<String>();
  for (  File file : files) {
    String fileName=file.getName();
    if (fileName.endsWith(".properties.html")) {
      htmlFileNames.add(fileName.substring(0,fileName.length() - 5));
    }
  }
  if (htmlFileNames.isEmpty()) {
    System.out.println("No *.properties.html files found in " + propertiesDirectory.getPath());
    return;
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put("htmlFileNames",htmlFileNames);
  context.put("lpVersion",lpVersion);
  try {
    String indexHTMLFileName=propertiesDir + "/index.html";
    File indexHTMLFile=new File(indexHTMLFileName);
    indexHTMLFileName=StringUtil.replace(indexHTMLFileName,StringPool.BACK_SLASH,StringPool.SLASH);
    Writer writer=new FileWriter(indexHTMLFile);
    try {
      FreeMarkerUtil.process("com/liferay/portal/tools/propertiesdoc" + "/dependencies/index.ftl",context,writer);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    System.out.println("Writing " + indexHTMLFileName);
    writer.flush();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}
