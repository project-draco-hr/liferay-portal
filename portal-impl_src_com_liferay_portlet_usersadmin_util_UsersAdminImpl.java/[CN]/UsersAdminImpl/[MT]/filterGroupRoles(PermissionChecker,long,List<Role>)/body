{
  List<Role> filteredGroupRoles=ListUtil.copy(roles);
  Iterator<Role> itr=filteredGroupRoles.iterator();
  while (itr.hasNext()) {
    Role groupRole=itr.next();
    String roleName=groupRole.getName();
    if (roleName.equals(RoleConstants.ORGANIZATION_USER) || roleName.equals(RoleConstants.SITE_MEMBER)) {
      itr.remove();
    }
  }
  if (permissionChecker.isCompanyAdmin() || permissionChecker.isGroupOwner(groupId)) {
    return filteredGroupRoles;
  }
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  if (!GroupPermissionUtil.contains(permissionChecker,group,ActionKeys.ASSIGN_USER_ROLES) && !OrganizationPermissionUtil.contains(permissionChecker,group.getOrganizationId(),ActionKeys.ASSIGN_USER_ROLES)) {
    return Collections.emptyList();
  }
  itr=filteredGroupRoles.iterator();
  while (itr.hasNext()) {
    Role groupRole=itr.next();
    String roleName=groupRole.getName();
    if (roleName.equals(RoleConstants.ORGANIZATION_ADMINISTRATOR) || roleName.equals(RoleConstants.ORGANIZATION_OWNER) || roleName.equals(RoleConstants.SITE_ADMINISTRATOR)|| roleName.equals(RoleConstants.SITE_OWNER)) {
      itr.remove();
    }
  }
  itr=filteredGroupRoles.iterator();
  while (itr.hasNext()) {
    Role role=itr.next();
    if (!RolePermissionUtil.contains(permissionChecker,groupId,role.getRoleId(),ActionKeys.ASSIGN_MEMBERS)) {
      itr.remove();
    }
  }
  return filteredGroupRoles;
}
