{
  validateExport(portletDataContext,stagedModel);
  String path=ExportImportPathUtil.getModelPath(stagedModel);
  if (portletDataContext.isPathExportedInScope(path)) {
    return;
  }
  try {
    ExportImportLifecycleManager.fireExportImportLifecycleEvent(ExportImportLifecycleConstants.EVENT_STAGED_MODEL_EXPORT_STARTED,PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext),new TransientValue<T>(stagedModel));
    ManifestSummary manifestSummary=portletDataContext.getManifestSummary();
    PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("stagedModel",stagedModel,manifestSummary);
    doExportStagedModel(portletDataContext,(T)stagedModel.clone());
    exportAssetCategories(portletDataContext,stagedModel);
    exportComments(portletDataContext,stagedModel);
    exportRatings(portletDataContext,stagedModel);
    if (countStagedModel(portletDataContext,stagedModel)) {
      manifestSummary.incrementModelAdditionCount(stagedModel.getStagedModelType());
    }
    portletDataContext.cleanUpMissingReferences(stagedModel);
    ExportImportLifecycleManager.fireExportImportLifecycleEvent(ExportImportLifecycleConstants.EVENT_STAGED_MODEL_EXPORT_FINISHED,PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext),new TransientValue<T>(stagedModel));
  }
 catch (  PortletDataException pde) {
    ExportImportLifecycleManager.fireExportImportLifecycleEvent(ExportImportLifecycleConstants.EVENT_STAGED_MODEL_EXPORT_FAILED,PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext),new TransientValue<T>(stagedModel),pde);
    throw pde;
  }
catch (  Throwable t) {
    ExportImportLifecycleManager.fireExportImportLifecycleEvent(ExportImportLifecycleConstants.EVENT_STAGED_MODEL_EXPORT_FAILED,PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext),new TransientValue<T>(stagedModel),t);
    PortletDataException pde=new PortletDataException(t);
    if (t instanceof NoSuchModelException) {
      pde.setStagedModel(stagedModel);
      pde.setType(PortletDataException.MISSING_DEPENDENCY);
    }
    throw pde;
  }
}
