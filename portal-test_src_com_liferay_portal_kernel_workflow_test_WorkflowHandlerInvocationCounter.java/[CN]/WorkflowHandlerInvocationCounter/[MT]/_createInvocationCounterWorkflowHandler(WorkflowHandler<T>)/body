{
  Thread currentThread=Thread.currentThread();
  ClassLoader classLoader=currentThread.getContextClassLoader();
  return (WorkflowHandler<T>)ProxyUtil.newProxyInstance(classLoader,new Class<?>[]{WorkflowHandler.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      AtomicInteger count=_countMap.get(method);
      if (count == null) {
        count=new AtomicInteger();
        _countMap.put(method,count);
      }
      count.incrementAndGet();
      return method.invoke(workflowHandler,args);
    }
  }
);
}
