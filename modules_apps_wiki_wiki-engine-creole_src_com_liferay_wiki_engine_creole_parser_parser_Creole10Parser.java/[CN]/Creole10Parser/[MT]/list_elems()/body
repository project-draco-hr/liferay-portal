{
  CountLevel_stack.push(new CountLevel_scope());
  list_ordelem_markup_return om=null;
  CollectionNode elem=null;
  list_unordelem_markup_return um=null;
  ((CountLevel_scope)CountLevel_stack.peek()).level=0;
  try {
    int alt69=2;
    int LA69_0=input.LA(1);
    if ((LA69_0 == POUND)) {
      alt69=1;
    }
 else     if ((LA69_0 == STAR)) {
      alt69=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("427:1: list_elems : (om= list_ordelem_markup elem= list_elem | um= list_unordelem_markup elem= list_elem );",69,0,input);
      throw nvae;
    }
switch (alt69) {
case 1:
{
        pushFollow(FOLLOW_list_ordelem_markup_in_list_elems1920);
        om=list_ordelem_markup();
        _fsp--;
        if (failed)         return;
        if (backtracking == 0) {
          ++((CountLevel_scope)CountLevel_stack.peek()).level;
          ((CountLevel_scope)CountLevel_stack.peek()).currentMarkup=input.toString(om.start,om.stop);
          ((CountLevel_scope)CountLevel_stack.peek()).groups+=input.toString(om.start,om.stop);
        }
        pushFollow(FOLLOW_list_elem_in_list_elems1932);
        elem=list_elem();
        _fsp--;
        if (failed)         return;
        if (backtracking == 0) {
          Stack<ItemNode> parents=((list_scope)list_stack.peek()).parents;
          ItemNode top=parents.isEmpty() ? null : parents.peek();
          BaseParentableNode baseParentableNode=((list_scope)list_stack.peek()).currentParent;
          if (top == null) {
            OrderedListItemNode node=new OrderedListItemNode(((CountLevel_scope)CountLevel_stack.peek()).level,baseParentableNode,elem);
            baseParentableNode.addChildASTNode(node);
            parents.push(node);
          }
 else           if (((CountLevel_scope)CountLevel_stack.peek()).level > ((list_scope)list_stack.peek()).lastLevel) {
            OrderedListNode orderedListNode=new OrderedListNode(top);
            OrderedListItemNode node=new OrderedListItemNode(((CountLevel_scope)CountLevel_stack.peek()).level,orderedListNode,elem);
            orderedListNode.addChildASTNode(node);
            top.addChildASTNode(orderedListNode);
            parents.push(node);
          }
 else           if (((CountLevel_scope)CountLevel_stack.peek()).level < ((list_scope)list_stack.peek()).lastLevel) {
            ItemNode in=parents.peek();
            while (in.getLevel() > ((CountLevel_scope)CountLevel_stack.peek()).level) {
              in=parents.pop();
              --((list_scope)list_stack.peek()).lastLevel;
            }
            top=in;
            baseParentableNode=top.getBaseParentableNode();
            OrderedListItemNode node=new OrderedListItemNode(((CountLevel_scope)CountLevel_stack.peek()).level,baseParentableNode,elem);
            if (baseParentableNode instanceof UnorderedListItemNode) {
              buildAndComposeListNode(baseParentableNode,node,true);
            }
 else             if (baseParentableNode instanceof UnorderedListNode) {
              baseParentableNode=((UnorderedListNode)baseParentableNode).getBaseParentableNode();
              buildAndComposeListNode(baseParentableNode,node,true);
            }
 else             if (baseParentableNode instanceof OrderedListNode && top instanceof UnorderedListItemNode) {
              baseParentableNode=((OrderedListNode)baseParentableNode).getBaseParentableNode();
              buildAndComposeListNode(baseParentableNode,node,true);
            }
 else {
              baseParentableNode.addChildASTNode(node);
            }
            parents.push(node);
          }
 else {
            baseParentableNode=top.getBaseParentableNode();
            OrderedListItemNode node=new OrderedListItemNode(((CountLevel_scope)CountLevel_stack.peek()).level,baseParentableNode,elem);
            if (baseParentableNode instanceof UnorderedListItemNode) {
              buildAndComposeListNode(baseParentableNode,node,true);
            }
 else             if (baseParentableNode instanceof UnorderedListNode) {
              baseParentableNode=((UnorderedListNode)baseParentableNode).getBaseParentableNode();
              buildAndComposeListNode(baseParentableNode,node,true);
            }
 else             if (baseParentableNode instanceof OrderedListNode && top instanceof UnorderedListItemNode) {
              baseParentableNode=((OrderedListNode)baseParentableNode).getBaseParentableNode();
              buildAndComposeListNode(baseParentableNode,node,true);
            }
 else {
              baseParentableNode.addChildASTNode(node);
            }
            parents.pop();
            parents.push(node);
          }
          ((list_scope)list_stack.peek()).lastLevel=((CountLevel_scope)CountLevel_stack.peek()).level;
        }
      }
    break;
case 2:
{
    pushFollow(FOLLOW_list_unordelem_markup_in_list_elems1943);
    um=list_unordelem_markup();
    _fsp--;
    if (failed)     return;
    if (backtracking == 0) {
      ++((CountLevel_scope)CountLevel_stack.peek()).level;
      ((CountLevel_scope)CountLevel_stack.peek()).currentMarkup=input.toString(um.start,um.stop);
      ((CountLevel_scope)CountLevel_stack.peek()).groups+=input.toString(um.start,um.stop);
    }
    pushFollow(FOLLOW_list_elem_in_list_elems1955);
    elem=list_elem();
    _fsp--;
    if (failed)     return;
    if (backtracking == 0) {
      Stack<ItemNode> parents=((list_scope)list_stack.peek()).parents;
      ItemNode top=parents.isEmpty() ? null : parents.peek();
      BaseParentableNode baseParentableNode=((list_scope)list_stack.peek()).currentParent;
      if (top == null) {
        UnorderedListItemNode node=new UnorderedListItemNode(((CountLevel_scope)CountLevel_stack.peek()).level,baseParentableNode,elem);
        baseParentableNode.addChildASTNode(node);
        parents.push(node);
      }
 else       if (((CountLevel_scope)CountLevel_stack.peek()).level > ((list_scope)list_stack.peek()).lastLevel) {
        UnorderedListNode unorderedListNode=new UnorderedListNode(top);
        UnorderedListItemNode node=new UnorderedListItemNode(((CountLevel_scope)CountLevel_stack.peek()).level,unorderedListNode,elem);
        unorderedListNode.addChildASTNode(node);
        top.addChildASTNode(unorderedListNode);
        parents.push(node);
      }
 else       if (((CountLevel_scope)CountLevel_stack.peek()).level < ((list_scope)list_stack.peek()).lastLevel) {
        ItemNode in=parents.peek();
        while (in.getLevel() > ((CountLevel_scope)CountLevel_stack.peek()).level) {
          in=parents.pop();
          --((list_scope)list_stack.peek()).lastLevel;
        }
        top=in;
        baseParentableNode=top.getBaseParentableNode();
        UnorderedListItemNode node=new UnorderedListItemNode(((CountLevel_scope)CountLevel_stack.peek()).level,baseParentableNode,elem);
        if (baseParentableNode instanceof OrderedListItemNode) {
          buildAndComposeListNode(baseParentableNode,node,false);
        }
 else         if (baseParentableNode instanceof OrderedListNode) {
          baseParentableNode=((OrderedListNode)baseParentableNode).getBaseParentableNode();
          buildAndComposeListNode(baseParentableNode,node,false);
        }
 else         if (baseParentableNode instanceof UnorderedListNode && top instanceof OrderedListItemNode) {
          baseParentableNode=((UnorderedListNode)baseParentableNode).getBaseParentableNode();
          buildAndComposeListNode(baseParentableNode,node,false);
        }
 else {
          baseParentableNode.addChildASTNode(node);
        }
        parents.push(node);
      }
 else {
        baseParentableNode=top.getBaseParentableNode();
        UnorderedListItemNode node=new UnorderedListItemNode(((CountLevel_scope)CountLevel_stack.peek()).level,baseParentableNode,elem);
        if (baseParentableNode instanceof OrderedListItemNode) {
          buildAndComposeListNode(baseParentableNode,node,false);
        }
 else         if (baseParentableNode instanceof OrderedListNode) {
          baseParentableNode=((OrderedListNode)baseParentableNode).getBaseParentableNode();
          buildAndComposeListNode(baseParentableNode,node,false);
        }
 else         if (baseParentableNode instanceof UnorderedListNode && top instanceof OrderedListItemNode) {
          baseParentableNode=((UnorderedListNode)baseParentableNode).getBaseParentableNode();
          buildAndComposeListNode(baseParentableNode,node,false);
        }
 else {
          baseParentableNode.addChildASTNode(node);
        }
        parents.pop();
        parents.push(node);
      }
      ((list_scope)list_stack.peek()).lastLevel=((CountLevel_scope)CountLevel_stack.peek()).level;
    }
  }
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
CountLevel_stack.pop();
}
return;
}
