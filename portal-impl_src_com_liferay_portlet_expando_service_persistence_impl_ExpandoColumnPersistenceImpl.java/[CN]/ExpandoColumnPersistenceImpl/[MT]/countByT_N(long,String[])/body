{
  if (names == null) {
    names=new String[0];
  }
 else {
    names=ArrayUtil.distinct(names,NULL_SAFE_STRING_COMPARATOR);
  }
  Object[] finderArgs=new Object[]{tableId,StringUtil.merge(names)};
  Long count=(Long)FinderCacheUtil.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_T_N,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_COUNT_EXPANDOCOLUMN_WHERE);
    query.append(_FINDER_COLUMN_T_N_TABLEID_2);
    if (names.length > 0) {
      query.append(StringPool.OPEN_PARENTHESIS);
      for (int i=0; i < names.length; i++) {
        String name=names[i];
        if (name == null) {
          query.append(_FINDER_COLUMN_T_N_NAME_1);
        }
 else         if (name.equals(StringPool.BLANK)) {
          query.append(_FINDER_COLUMN_T_N_NAME_3);
        }
 else {
          query.append(_FINDER_COLUMN_T_N_NAME_2);
        }
        if ((i + 1) < names.length) {
          query.append(WHERE_OR);
        }
      }
      query.append(StringPool.CLOSE_PARENTHESIS);
    }
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(tableId);
      for (      String name : names) {
        if ((name != null) && !name.isEmpty()) {
          qPos.add(name);
        }
      }
      count=(Long)q.uniqueResult();
      FinderCacheUtil.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_T_N,finderArgs,count);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_T_N,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return count.intValue();
}
