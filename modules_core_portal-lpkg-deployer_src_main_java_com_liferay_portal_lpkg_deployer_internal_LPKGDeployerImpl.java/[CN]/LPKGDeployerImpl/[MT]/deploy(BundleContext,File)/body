{
  for (  Bundle bundle : _lpkgVerifier.verify(lpkgFile)) {
    try {
      bundle.uninstall();
      if (_log.isInfoEnabled()) {
        _log.info("Uninstalled older LPKG bundle " + bundle + " in order to install "+ lpkgFile);
      }
      String location=bundle.getLocation();
      if (!location.equals(lpkgFile.getCanonicalPath()) && Files.deleteIfExists(Paths.get(bundle.getLocation())) && _log.isInfoEnabled()) {
        _log.info("Removed old LPKG file " + bundle.getLocation());
      }
    }
 catch (    BundleException be) {
      _log.error("Unable to uninstall " + bundle + " for "+ lpkgFile,be);
    }
  }
  try {
    List<Bundle> bundles=new ArrayList<>();
    Bundle lpkgBundle=bundleContext.installBundle(lpkgFile.getCanonicalPath(),_lpkgToOSGiBundle(lpkgFile));
    BundleStartLevel bundleStartLevel=lpkgBundle.adapt(BundleStartLevel.class);
    bundleStartLevel.setStartLevel(PropsValues.MODULE_FRAMEWORK_DYNAMIC_INSTALL_START_LEVEL);
    bundles.add(lpkgBundle);
    List<Bundle> newBundles=_lpkgBundleTracker.getObject(lpkgBundle);
    if (newBundles != null) {
      bundles.addAll(newBundles);
    }
    return bundles;
  }
 catch (  BundleException be) {
    throw new IOException(be);
  }
}
