{
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  try {
    BlogsEntry entry=null;
    List<BlogsEntryAttachmentFileEntryReference> blogsEntryAttachmentFileEntryReferences=null;
    UploadException uploadException=(UploadException)actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION);
    if (uploadException != null) {
      Throwable cause=uploadException.getCause();
      if (uploadException.isExceededFileSizeLimit()) {
        throw new FileSizeException(cause);
      }
      if (uploadException.isExceededLiferayFileItemSizeLimit()) {
        throw new LiferayFileItemException(cause);
      }
      if (uploadException.isExceededUploadRequestSizeLimit()) {
        throw new UploadRequestSizeException(cause);
      }
      throw new PortalException(cause);
    }
 else     if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) {
      Callable<Object[]> updateEntryCallable=new UpdateEntryCallable(actionRequest);
      Object[] returnValue=TransactionInvokerUtil.invoke(_transactionConfig,updateEntryCallable);
      entry=(BlogsEntry)returnValue[0];
      blogsEntryAttachmentFileEntryReferences=(List<BlogsEntryAttachmentFileEntryReference>)returnValue[1];
    }
 else     if (cmd.equals(Constants.DELETE)) {
      deleteEntries(actionRequest,false);
    }
 else     if (cmd.equals(Constants.MOVE_TO_TRASH)) {
      deleteEntries(actionRequest,true);
    }
 else     if (cmd.equals(Constants.RESTORE)) {
      restoreTrashEntries(actionRequest);
    }
 else     if (cmd.equals(Constants.SUBSCRIBE)) {
      subscribe(actionRequest);
    }
 else     if (cmd.equals(Constants.UNSUBSCRIBE)) {
      unsubscribe(actionRequest);
    }
    String redirect=ParamUtil.getString(actionRequest,"redirect");
    String portletId=HttpUtil.getParameter(redirect,"p_p_id",false);
    int workflowAction=ParamUtil.getInteger(actionRequest,"workflowAction",WorkflowConstants.ACTION_SAVE_DRAFT);
    boolean ajax=ParamUtil.getBoolean(actionRequest,"ajax");
    if (ajax) {
      JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
      JSONArray jsonArray=JSONFactoryUtil.createJSONArray();
      for (      BlogsEntryAttachmentFileEntryReference blogsEntryAttachmentFileEntryReference : blogsEntryAttachmentFileEntryReferences) {
        JSONObject blogsEntryFileEntryReferencesJSONObject=JSONFactoryUtil.createJSONObject();
        blogsEntryFileEntryReferencesJSONObject.put("attributeDataImageId",EditorConstants.ATTRIBUTE_DATA_IMAGE_ID);
        blogsEntryFileEntryReferencesJSONObject.put("fileEntryId",String.valueOf(blogsEntryAttachmentFileEntryReference.getTempBlogsEntryAttachmentFileEntryId()));
        blogsEntryFileEntryReferencesJSONObject.put("fileEntryUrl",PortletFileRepositoryUtil.getPortletFileEntryURL(null,blogsEntryAttachmentFileEntryReference.getBlogsEntryAttachmentFileEntry(),StringPool.BLANK));
        jsonArray.put(blogsEntryFileEntryReferencesJSONObject);
      }
      jsonObject.put("blogsEntryAttachmentReferences",jsonArray);
      jsonObject.put("coverImageFileEntryId",entry.getCoverImageFileEntryId());
      jsonObject.put("entryId",entry.getEntryId());
      jsonObject.put("redirect",redirect);
      JSONPortletResponseUtil.writeJSON(actionRequest,actionResponse,jsonObject);
      return;
    }
    if ((entry != null) && (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT)) {
      redirect=getSaveAndContinueRedirect(actionRequest,entry,redirect);
      sendRedirect(actionRequest,actionResponse,redirect);
    }
 else {
      WindowState windowState=actionRequest.getWindowState();
      if (!windowState.equals(LiferayWindowState.POP_UP)) {
        sendRedirect(actionRequest,actionResponse,redirect);
      }
 else {
        redirect=PortalUtil.escapeRedirect(redirect);
        if (Validator.isNotNull(redirect)) {
          if (cmd.equals(Constants.ADD) && (entry != null)) {
            String namespace=PortalUtil.getPortletNamespace(portletId);
            redirect=HttpUtil.addParameter(redirect,namespace + "className",BlogsEntry.class.getName());
            redirect=HttpUtil.addParameter(redirect,namespace + "classPK",entry.getEntryId());
          }
          actionRequest.setAttribute(WebKeys.REDIRECT,redirect);
        }
      }
    }
  }
 catch (  AssetCategoryException|AssetTagException e) {
    SessionErrors.add(actionRequest,e.getClass(),e);
    actionResponse.setRenderParameter("mvcRenderCommandName","/blogs/edit_entry");
  }
catch (  EntryContentException|EntryCoverImageCropException|EntryDescriptionException|EntryDisplayDateException|EntrySmallImageNameException|EntrySmallImageScaleException|EntryTitleException|FileSizeException|LiferayFileItemException|SanitizerException|UploadRequestSizeException e) {
    SessionErrors.add(actionRequest,e.getClass());
    actionResponse.setRenderParameter("mvcRenderCommandName","/blogs/edit_entry");
  }
catch (  NoSuchEntryException|PrincipalException e) {
    SessionErrors.add(actionRequest,e.getClass());
    actionResponse.setRenderParameter("mvcPath","/blogs/error.jsp");
  }
catch (  Throwable t) {
    _log.error(t,t);
    actionResponse.setRenderParameter("mvcPath","/blogs/error.jsp");
  }
}
