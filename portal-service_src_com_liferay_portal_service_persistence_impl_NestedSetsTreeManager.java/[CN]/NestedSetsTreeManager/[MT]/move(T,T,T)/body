{
  if (Validator.equals(oldParent,newParent)) {
    return;
  }
  long nestedSetsTreeNodeLeft=t.getNestedSetsTreeNodeLeft();
  long nestedSetsTreeNodeRight=t.getNestedSetsTreeNodeRight();
  List<T> childrenList=doGetDescendants(t.getNestedSetsTreeNodeScopeId(),nestedSetsTreeNodeLeft,nestedSetsTreeNodeRight);
  long newParentNestedSetsTreeNodeRight=0;
  if (newParent == null) {
    newParentNestedSetsTreeNodeRight=getMaxNestedSetsTreeNodeRight(t.getNestedSetsTreeNodeScopeId());
  }
 else {
    newParentNestedSetsTreeNodeRight=newParent.getNestedSetsTreeNodeRight();
  }
  long delta=0;
  if (nestedSetsTreeNodeRight < newParentNestedSetsTreeNodeRight) {
    doUpdate(t.getNestedSetsTreeNodeScopeId(),-(nestedSetsTreeNodeRight - nestedSetsTreeNodeLeft + 1),nestedSetsTreeNodeRight,false,newParentNestedSetsTreeNodeRight,false,null);
    delta=newParentNestedSetsTreeNodeRight - nestedSetsTreeNodeRight - 1;
    doUpdate(t.getNestedSetsTreeNodeScopeId(),delta,nestedSetsTreeNodeLeft,true,nestedSetsTreeNodeRight,true,childrenList);
  }
 else {
    doUpdate(t.getNestedSetsTreeNodeScopeId(),nestedSetsTreeNodeRight - nestedSetsTreeNodeLeft + 1,newParentNestedSetsTreeNodeRight,true,nestedSetsTreeNodeLeft,false,null);
    delta=newParentNestedSetsTreeNodeRight - nestedSetsTreeNodeLeft;
    doUpdate(t.getNestedSetsTreeNodeScopeId(),delta,nestedSetsTreeNodeLeft,true,nestedSetsTreeNodeRight,true,childrenList);
  }
  t.setNestedSetsTreeNodeLeft(nestedSetsTreeNodeLeft + delta);
  t.setNestedSetsTreeNodeRight(nestedSetsTreeNodeRight + delta);
}
