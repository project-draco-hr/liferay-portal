{
  if (Validator.equals(oldParent,newParent)) {
    return;
  }
  long nestedSetsLeft=t.getNestedSetsLeft();
  long nestedSetsRight=t.getNestedSetsRight();
  List<T> childrenList=doGetDescendants(t.getNestedSetsScopeId(),nestedSetsLeft,nestedSetsRight);
  long newParentNestedSetsRight=0;
  if (newParent == null) {
    newParentNestedSetsRight=getMaxNestedSetsRight(t.getNestedSetsScopeId());
  }
 else {
    newParentNestedSetsRight=newParent.getNestedSetsRight();
  }
  long delta=0;
  if (nestedSetsRight < newParentNestedSetsRight) {
    doUpdate(t.getNestedSetsScopeId(),-(nestedSetsRight - nestedSetsLeft + 1),nestedSetsRight,false,newParentNestedSetsRight,false,null);
    delta=newParentNestedSetsRight - nestedSetsRight - 1;
    doUpdate(t.getNestedSetsScopeId(),delta,nestedSetsLeft,true,nestedSetsRight,true,childrenList);
  }
 else {
    doUpdate(t.getNestedSetsScopeId(),nestedSetsRight - nestedSetsLeft + 1,newParentNestedSetsRight,true,nestedSetsLeft,false,null);
    delta=newParentNestedSetsRight - nestedSetsLeft;
    doUpdate(t.getNestedSetsScopeId(),delta,nestedSetsLeft,true,nestedSetsRight,true,childrenList);
  }
  t.setNestedSetsLeft(nestedSetsLeft + delta);
  t.setNestedSetsRight(nestedSetsRight + delta);
}
