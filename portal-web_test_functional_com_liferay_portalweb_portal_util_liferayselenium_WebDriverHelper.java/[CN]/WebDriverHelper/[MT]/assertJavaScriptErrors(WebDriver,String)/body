{
  if (!TestPropsValues.TEST_ASSERT_JAVASCRIPT_ERRORS) {
    return;
  }
  String location=getLocation(webDriver);
  if (!location.contains("localhost")) {
    return;
  }
  String pageSource=null;
  try {
    pageSource=webDriver.getPageSource();
  }
 catch (  Exception e) {
    WebDriver.TargetLocator targetLocator=webDriver.switchTo();
    targetLocator.window(_defaultWindowHandle);
    pageSource=webDriver.getPageSource();
  }
  if (pageSource.contains("html id=\"feedHandler\" xmlns=" + "\"http://www.w3.org/1999/xhtml\"")) {
    return;
  }
  WebElement webElement=getWebElement(webDriver,"//body");
  WrapsDriver wrapsDriver=(WrapsDriver)webElement;
  WebDriver wrappedWebDriver=wrapsDriver.getWrappedDriver();
  List<JavaScriptError> javaScriptErrors=JavaScriptError.readErrors(wrappedWebDriver);
  if (!javaScriptErrors.isEmpty()) {
    for (    JavaScriptError javaScriptError : javaScriptErrors) {
      String javaScriptErrorValue=javaScriptError.toString();
      System.out.println("JS_ERROR: " + javaScriptErrorValue);
      if (Validator.isNotNull(ignoreJavaScriptError) && javaScriptErrorValue.contains(ignoreJavaScriptError)) {
        continue;
      }
      if (javaScriptErrorValue.contains("TypeError: d.config.doc.defaultView is null")) {
        continue;
      }
      if (javaScriptErrorValue.contains("NS_ERROR_NOT_INITIALIZED:")) {
        continue;
      }
      if (javaScriptErrorValue.contains("Permission denied to access property 'type'")) {
        continue;
      }
      Exception exception=new Exception(javaScriptErrorValue);
      LiferaySeleniumHelper.addToJavascriptExceptions(exception);
      throw exception;
    }
  }
}
