{
  AutoDeployListener autoDeployListener=_serviceTracker.getService();
  if (autoDeployListener != null) {
    if (autoDeployListener.isDeployable(autoDeploymentContext)) {
      autoDeployListener.deploy(autoDeploymentContext);
      File file=autoDeploymentContext.getFile();
      file.delete();
      return;
    }
  }
  File file=autoDeploymentContext.getFile();
  String fileName=file.getName();
  if (StringUtil.endsWith(fileName,".lpkg")) {
    String lpkgDeployerDirName=PropsUtil.get(PropsKeys.MODULE_FRAMEWORK_PROPERTIES.concat("lpkg.deployer.dir"));
    File lpkgDeployerDir=new File(lpkgDeployerDirName);
    FileUtil.move(file,new File(lpkgDeployerDir,file.getName()));
    if (_log.isInfoEnabled()) {
      _log.info("Restart is required to complete the installation of " + fileName);
    }
    try {
      PortalClassInvoker.invoke(_shutdownUtilMethodKey,0);
    }
 catch (    Exception e) {
      _log.error("Unable to automatically shutdown the portal to " + "complete the installation of " + fileName,e);
    }
    return;
  }
  String[] dirNames=PropsUtil.getArray(PropsKeys.MODULE_FRAMEWORK_AUTO_DEPLOY_DIRS);
  if (ArrayUtil.isEmpty(dirNames)) {
    throw new AutoDeployException("The portal property \"" + PropsKeys.MODULE_FRAMEWORK_AUTO_DEPLOY_DIRS + "\" is not set");
  }
  String dirName=dirNames[0];
  if (StringUtil.endsWith(fileName,".cfg")) {
    for (    String curDirName : dirNames) {
      if (curDirName.endsWith("/configs")) {
        dirName=curDirName;
        break;
      }
    }
  }
 else   if (StringUtil.endsWith(fileName,".war")) {
    for (    String curDirName : dirNames) {
      if (curDirName.endsWith("/war")) {
        dirName=curDirName;
        break;
      }
    }
  }
 else {
    for (    String curDirName : dirNames) {
      if (curDirName.endsWith("/modules")) {
        dirName=curDirName;
        break;
      }
    }
  }
  FileUtil.move(file,new File(dirName,fileName));
}
