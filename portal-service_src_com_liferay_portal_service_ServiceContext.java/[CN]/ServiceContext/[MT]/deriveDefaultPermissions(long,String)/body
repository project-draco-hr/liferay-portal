{
  long siteGroupId=PortalUtil.getSiteGroupId(repositoryId);
  Group siteGroup=GroupLocalServiceUtil.getGroup(siteGroupId);
  Role defaultGroupRole=RoleLocalServiceUtil.getDefaultGroupRole(siteGroupId);
  List<String> groupPermissions=new ArrayList<>();
  List<String> guestPermissions=new ArrayList<>();
  String[] roleNames={RoleConstants.GUEST,defaultGroupRole.getName()};
  List<String> supportedActions=ResourceActionsUtil.getModelResourceActions(modelName);
  List<String> groupDefaultActions=ResourceActionsUtil.getModelResourceGroupDefaultActions(modelName);
  List<String> guestDefaultActions=ResourceActionsUtil.getModelResourceGuestDefaultActions(modelName);
  List<String> guestUnsupportedActions=ResourceActionsUtil.getModelResourceGuestUnsupportedActions(modelName);
  for (  String roleName : roleNames) {
    for (    String action : supportedActions) {
      if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action)&& siteGroup.hasPublicLayouts()) {
        guestPermissions.add(action);
      }
 else       if (roleName.equals(defaultGroupRole.getName()) && groupDefaultActions.contains(action)) {
        groupPermissions.add(action);
      }
    }
  }
  String[] groupPermissionsArray=groupPermissions.toArray(new String[groupPermissions.size()]);
  String[] guestPermissionsArray=guestPermissions.toArray(new String[guestPermissions.size()]);
  setGroupPermissions(groupPermissionsArray);
  setGuestPermissions(guestPermissionsArray);
  ModelPermissions modelPermissions=ModelPermissionsFactory.create(siteGroup.getCompanyId(),siteGroupId,groupPermissionsArray,guestPermissionsArray);
  setModelPermissions(modelPermissions);
}
