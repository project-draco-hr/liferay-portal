{
  long siteGroupId=PortalUtil.getSiteGroupId(repositoryId);
  Group siteGroup=GroupLocalServiceUtil.getGroup(siteGroupId);
  Role defaultGroupRole=RoleLocalServiceUtil.getDefaultGroupRole(siteGroupId);
  List<String> groupPermissionsList=new ArrayList<>();
  List<String> guestPermissionsList=new ArrayList<>();
  String[] roleNames={RoleConstants.GUEST,defaultGroupRole.getName()};
  List<String> supportedActions=ResourceActionsUtil.getModelResourceActions(modelName);
  List<String> groupDefaultActions=ResourceActionsUtil.getModelResourceGroupDefaultActions(modelName);
  List<String> guestDefaultActions=ResourceActionsUtil.getModelResourceGuestDefaultActions(modelName);
  List<String> guestUnsupportedActions=ResourceActionsUtil.getModelResourceGuestUnsupportedActions(modelName);
  for (  String roleName : roleNames) {
    for (    String action : supportedActions) {
      if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action)&& siteGroup.hasPublicLayouts()) {
        guestPermissionsList.add(action);
      }
 else       if (roleName.equals(defaultGroupRole.getName()) && groupDefaultActions.contains(action)) {
        groupPermissionsList.add(action);
      }
    }
  }
  String[] groupPermissions=groupPermissionsList.toArray(new String[groupPermissionsList.size()]);
  setGroupPermissions(groupPermissions);
  String[] guestPermissions=guestPermissionsList.toArray(new String[guestPermissionsList.size()]);
  setGuestPermissions(guestPermissions);
  ModelPermissions modelPermissions=ModelPermissionsFactory.create(siteGroup.getCompanyId(),siteGroupId,groupPermissions,guestPermissions);
  setModelPermissions(modelPermissions);
}
