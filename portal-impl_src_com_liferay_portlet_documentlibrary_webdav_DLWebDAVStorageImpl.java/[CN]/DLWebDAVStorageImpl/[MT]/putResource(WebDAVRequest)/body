{
  File file=null;
  try {
    HttpServletRequest request=webDavRequest.getHttpServletRequest();
    String[] pathArray=webDavRequest.getPathArray();
    long companyId=webDavRequest.getCompanyId();
    long groupId=webDavRequest.getGroupId();
    long parentFolderId=getParentFolderId(companyId,pathArray);
    String title=WebDAVUtil.getResourceName(pathArray);
    String description=StringPool.BLANK;
    String changeLog=StringPool.BLANK;
    ServiceContext serviceContext=ServiceContextFactory.getInstance(request);
    serviceContext.setAddGroupPermissions(isAddGroupPermissions(groupId));
    serviceContext.setAddGuestPermissions(true);
    String contentType=GetterUtil.get(request.getHeader(HttpHeaders.CONTENT_TYPE),ContentTypes.APPLICATION_OCTET_STREAM);
    String extension=FileUtil.getExtension(title);
    file=FileUtil.createTempFile(extension);
    FileUtil.write(file,request.getInputStream());
    if (contentType.equals(ContentTypes.APPLICATION_OCTET_STREAM)) {
      contentType=MimeTypesUtil.getContentType(file,title);
    }
    try {
      FileEntry fileEntry=DLAppServiceUtil.getFileEntry(groupId,parentFolderId,title);
      if (!hasLock(fileEntry,webDavRequest.getLockUuid()) && (fileEntry.getLock() != null)) {
        return WebDAVUtil.SC_LOCKED;
      }
      long fileEntryId=fileEntry.getFileEntryId();
      description=fileEntry.getDescription();
      String[] assetTagNames=AssetTagLocalServiceUtil.getTagNames(FileEntry.class.getName(),fileEntry.getFileEntryId());
      serviceContext.setAssetTagNames(assetTagNames);
      DLAppServiceUtil.updateFileEntry(fileEntryId,title,contentType,title,description,changeLog,false,file,serviceContext);
    }
 catch (    NoSuchFileEntryException nsfee) {
      if (file.length() == 0) {
        serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
      }
      DLAppServiceUtil.addFileEntry(groupId,parentFolderId,title,contentType,title,description,changeLog,file,serviceContext);
    }
    if (_log.isInfoEnabled()) {
      _log.info("Added " + StringUtil.merge(pathArray,StringPool.SLASH));
    }
    return HttpServletResponse.SC_CREATED;
  }
 catch (  PrincipalException pe) {
    return HttpServletResponse.SC_FORBIDDEN;
  }
catch (  NoSuchFolderException nsfe) {
    return HttpServletResponse.SC_CONFLICT;
  }
catch (  PortalException pe) {
    if (_log.isWarnEnabled()) {
      _log.warn(pe,pe);
    }
    return HttpServletResponse.SC_CONFLICT;
  }
catch (  Exception e) {
    throw new WebDAVException(e);
  }
 finally {
    FileUtil.delete(file);
  }
}
