{
  File file=null;
  try {
    HttpServletRequest request=webDavRequest.getHttpServletRequest();
    String[] pathArray=webDavRequest.getPathArray();
    long companyId=webDavRequest.getCompanyId();
    long groupId=webDavRequest.getGroupId();
    long parentFolderId=getParentFolderId(companyId,pathArray);
    String title=WebDAVUtil.getResourceName(pathArray);
    String description=StringPool.BLANK;
    String changeLog=StringPool.BLANK;
    String contentType=GetterUtil.get(request.getHeader(HttpHeaders.CONTENT_TYPE),ContentTypes.APPLICATION_OCTET_STREAM);
    String extension=FileUtil.getExtension(title);
    ServiceContext serviceContext=new ServiceContext();
    serviceContext.setAddCommunityPermissions(isAddCommunityPermissions(groupId));
    serviceContext.setAddGuestPermissions(true);
    if (PropsValues.DL_WEBDAV_SAVE_TO_SINGLE_VERSION) {
      serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
    }
    long contentLength=GetterUtil.getLong(request.getHeader(HttpHeaders.CONTENT_LENGTH));
    if (contentLength > 0) {
      contentType=MimeTypesUtil.getContentType(title);
      serviceContext.setAttribute("contentType",contentType);
      serviceContext.setAttribute("extension",extension);
    }
 else {
      file=FileUtil.createTempFile(extension);
      FileUtil.write(file,request.getInputStream());
      if (contentType.equals(ContentTypes.APPLICATION_OCTET_STREAM)) {
        contentType=MimeTypesUtil.getContentType(file);
      }
      serviceContext.setAttribute("contentType",contentType);
      serviceContext.setAttribute("extension",extension);
    }
    try {
      FileEntry fileEntry=DLAppServiceUtil.getFileEntry(groupId,parentFolderId,title);
      if (isLocked(fileEntry,webDavRequest.getLockUuid())) {
        return WebDAVUtil.SC_LOCKED;
      }
      long fileEntryId=fileEntry.getFileEntryId();
      description=fileEntry.getDescription();
      String[] assetTagNames=AssetTagLocalServiceUtil.getTagNames(FileEntry.class.getName(),fileEntry.getFileEntryId());
      serviceContext.setAssetTagNames(assetTagNames);
      if (contentLength > 0) {
        DLAppServiceUtil.updateFileEntry(fileEntryId,title,title,description,changeLog,false,request.getInputStream(),contentLength,serviceContext);
      }
 else {
        DLAppServiceUtil.updateFileEntry(fileEntryId,title,title,description,changeLog,false,file,serviceContext);
      }
    }
 catch (    NoSuchFileEntryException nsfee) {
      if (contentLength > 0) {
        DLAppServiceUtil.addFileEntry(groupId,parentFolderId,title,description,changeLog,request.getInputStream(),contentLength,serviceContext);
      }
 else {
        DLAppServiceUtil.addFileEntry(groupId,parentFolderId,title,description,changeLog,file,serviceContext);
      }
    }
    if (_log.isInfoEnabled()) {
      _log.info("Added " + StringUtil.merge(pathArray,StringPool.SLASH));
    }
    return HttpServletResponse.SC_CREATED;
  }
 catch (  PrincipalException pe) {
    return HttpServletResponse.SC_FORBIDDEN;
  }
catch (  NoSuchFolderException nsfe) {
    return HttpServletResponse.SC_CONFLICT;
  }
catch (  PortalException pe) {
    if (_log.isWarnEnabled()) {
      _log.warn(pe,pe);
    }
    return HttpServletResponse.SC_CONFLICT;
  }
catch (  Exception e) {
    throw new WebDAVException(e);
  }
 finally {
    if (file != null) {
      file.delete();
    }
  }
}
