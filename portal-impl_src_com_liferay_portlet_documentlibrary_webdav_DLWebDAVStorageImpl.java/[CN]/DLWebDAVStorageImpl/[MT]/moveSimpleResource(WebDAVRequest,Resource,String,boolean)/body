{
  try {
    String[] destinationArray=WebDAVUtil.getPathArray(destination,true);
    DLFileEntry fileEntry=(DLFileEntry)resource.getModel();
    if (isLocked(fileEntry,webDavRequest.getLockUuid())) {
      return WebDAVUtil.SC_LOCKED;
    }
    long companyId=webDavRequest.getCompanyId();
    long groupId=WebDAVUtil.getGroupId(companyId,destinationArray);
    long userId=webDavRequest.getUserId();
    long parentFolderId=getParentFolderId(companyId,destinationArray);
    String name=fileEntry.getName();
    String sourceFileName=null;
    String title=WebDAVUtil.getResourceName(destinationArray);
    String description=fileEntry.getDescription();
    String changelog=StringPool.BLANK;
    String extraSettings=fileEntry.getExtraSettings();
    byte[] bytes=null;
    String[] assetTagNames=AssetTagLocalServiceUtil.getTagNames(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
    ServiceContext serviceContext=new ServiceContext();
    serviceContext.setAssetTagNames(assetTagNames);
    int status=HttpServletResponse.SC_CREATED;
    if (overwrite) {
      if (deleteResource(groupId,parentFolderId,title,webDavRequest.getLockUuid())) {
        status=HttpServletResponse.SC_NO_CONTENT;
      }
    }
    if (webDavRequest.isMac()) {
      try {
        DLFileEntry destFileEntry=DLFileEntryServiceUtil.getFileEntryByTitle(groupId,parentFolderId,title);
        InputStream is=DLFileEntryLocalServiceUtil.getFileAsStream(fileEntry.getCompanyId(),userId,fileEntry.getGroupId(),fileEntry.getFolderId(),fileEntry.getName());
        bytes=FileUtil.getBytes(is);
        DLFileEntryServiceUtil.updateFileEntry(groupId,parentFolderId,destFileEntry.getName(),destFileEntry.getTitle(),destFileEntry.getTitle(),destFileEntry.getDescription(),changelog,false,destFileEntry.getExtraSettings(),bytes,serviceContext);
        DLFileEntryServiceUtil.deleteFileEntry(fileEntry.getGroupId(),fileEntry.getFolderId(),fileEntry.getName());
        return status;
      }
 catch (      NoSuchFileEntryException nsfee) {
      }
    }
    DLFileEntryServiceUtil.updateFileEntry(fileEntry.getGroupId(),fileEntry.getFolderId(),name,sourceFileName,title,description,changelog,false,extraSettings,bytes,serviceContext);
    if (fileEntry.getFolderId() != parentFolderId) {
      fileEntry=DLFileEntryServiceUtil.moveFileEntry(groupId,fileEntry.getFolderId(),parentFolderId,name,serviceContext);
    }
    return status;
  }
 catch (  PrincipalException pe) {
    return HttpServletResponse.SC_FORBIDDEN;
  }
catch (  DuplicateFileException dfe) {
    return HttpServletResponse.SC_PRECONDITION_FAILED;
  }
catch (  DuplicateFolderNameException dfne) {
    return HttpServletResponse.SC_PRECONDITION_FAILED;
  }
catch (  LockException le) {
    return WebDAVUtil.SC_LOCKED;
  }
catch (  Exception e) {
    throw new WebDAVException(e);
  }
}
