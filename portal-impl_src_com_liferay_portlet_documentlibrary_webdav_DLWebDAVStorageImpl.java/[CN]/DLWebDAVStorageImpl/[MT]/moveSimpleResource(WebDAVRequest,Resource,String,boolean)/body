{
  File file=null;
  try {
    String[] destinationArray=WebDAVUtil.getPathArray(destination,true);
    FileEntry fileEntry=(FileEntry)resource.getModel();
    if (!hasLock(fileEntry,webDAVRequest.getLockUuid()) && (fileEntry.getLock() != null)) {
      return WebDAVUtil.SC_LOCKED;
    }
    long companyId=webDAVRequest.getCompanyId();
    long groupId=WebDAVUtil.getGroupId(companyId,destinationArray);
    long newParentFolderId=getParentFolderId(companyId,destinationArray);
    String sourceFileName=WebDAVUtil.getResourceName(destinationArray);
    String title=WebDAVUtil.getResourceName(destinationArray);
    String description=fileEntry.getDescription();
    String changeLog=StringPool.BLANK;
    ServiceContext serviceContext=new ServiceContext();
    populateServiceContext(serviceContext,fileEntry);
    int status=HttpServletResponse.SC_CREATED;
    if (overwrite) {
      if (deleteResource(groupId,newParentFolderId,title,webDAVRequest.getLockUuid())) {
        status=HttpServletResponse.SC_NO_CONTENT;
      }
    }
    if (webDAVRequest.isMac()) {
      try {
        FileEntry destFileEntry=DLAppServiceUtil.getFileEntry(groupId,newParentFolderId,title);
        InputStream is=fileEntry.getContentStream();
        file=FileUtil.createTempFile(is);
        DLAppServiceUtil.updateFileEntry(destFileEntry.getFileEntryId(),destFileEntry.getTitle(),destFileEntry.getMimeType(),destFileEntry.getTitle(),destFileEntry.getDescription(),changeLog,false,file,serviceContext);
        DLAppServiceUtil.deleteFileEntry(fileEntry.getFileEntryId());
        return status;
      }
 catch (      NoSuchFileEntryException nsfee) {
      }
    }
    DLAppServiceUtil.updateFileEntry(fileEntry.getFileEntryId(),sourceFileName,fileEntry.getMimeType(),title,description,changeLog,false,file,serviceContext);
    if (fileEntry.getFolderId() != newParentFolderId) {
      fileEntry=DLAppServiceUtil.moveFileEntry(fileEntry.getFileEntryId(),newParentFolderId,serviceContext);
    }
    return status;
  }
 catch (  PrincipalException pe) {
    if (_log.isDebugEnabled()) {
      _log.debug(pe,pe);
    }
    return HttpServletResponse.SC_FORBIDDEN;
  }
catch (  DuplicateFileException dfe) {
    if (_log.isDebugEnabled()) {
      _log.debug(dfe,dfe);
    }
    return HttpServletResponse.SC_PRECONDITION_FAILED;
  }
catch (  DuplicateFolderNameException dfne) {
    if (_log.isDebugEnabled()) {
      _log.debug(dfne,dfne);
    }
    return HttpServletResponse.SC_PRECONDITION_FAILED;
  }
catch (  LockException le) {
    if (_log.isDebugEnabled()) {
      _log.debug(le,le);
    }
    return WebDAVUtil.SC_LOCKED;
  }
catch (  Exception e) {
    throw new WebDAVException(e);
  }
 finally {
    FileUtil.delete(file);
  }
}
