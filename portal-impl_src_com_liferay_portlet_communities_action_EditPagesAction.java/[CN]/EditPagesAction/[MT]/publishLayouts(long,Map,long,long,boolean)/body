{
  Map parameterMap=geStagingParameters();
  parameterMap.put(PortletDataHandlerKeys.DELETE_MISSING_LAYOUTS,Boolean.FALSE.toString());
  List layouts=new ArrayList();
  Iterator itr=layoutIdMap.entrySet().iterator();
  while (itr.hasNext()) {
    Entry entry=(Entry)itr.next();
    long plid=((Long)entry.getKey()).longValue();
    boolean includeChildren=((Boolean)entry.getValue()).booleanValue();
    Layout layout=LayoutLocalServiceUtil.getLayout(plid);
    if (!layouts.contains(layout)) {
      layouts.add(layout);
    }
    Iterator parentsItr=getMissingParents(layout,targetGroupId).iterator();
    while (parentsItr.hasNext()) {
      Layout parent=(Layout)parentsItr.next();
      if (!layouts.contains(parent)) {
        layouts.add(parent);
      }
    }
    if (includeChildren) {
      Iterator childrenItr=layout.getAllChildren().iterator();
      while (childrenItr.hasNext()) {
        Layout child=(Layout)childrenItr.next();
        if (!layouts.contains(child)) {
          layouts.add(child);
        }
      }
    }
  }
  itr=layouts.iterator();
  long[] layoutIds=new long[layouts.size()];
  for (int i=0; itr.hasNext(); i++) {
    Layout curLayout=(Layout)itr.next();
    layoutIds[i]=curLayout.getLayoutId();
  }
  byte[] data=LayoutLocalServiceUtil.exportLayouts(originGroupId,privateLayout,layoutIds,parameterMap);
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  LayoutLocalServiceUtil.importLayouts(creatorUserId,targetGroupId,privateLayout,parameterMap,bais);
}
