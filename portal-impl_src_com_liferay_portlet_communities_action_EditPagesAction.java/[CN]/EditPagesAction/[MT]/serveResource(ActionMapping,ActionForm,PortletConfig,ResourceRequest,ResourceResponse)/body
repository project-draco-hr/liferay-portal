{
  String cmd=ParamUtil.getString(resourceRequest,Constants.CMD);
  if (cmd.equals("render_tree_html")) {
    String portletURL=ParamUtil.getString(resourceRequest,"portletURL",StringPool.BLANK);
    long nodeId=ParamUtil.getLong(resourceRequest,"nodeId");
    long scopeGroupId=PortalUtil.getScopeGroupId(resourceRequest);
    long parentLayoutId=ParamUtil.getLong(resourceRequest,"parentLayoutId");
    boolean selectableTree=ParamUtil.getBoolean(resourceRequest,"selectableTree");
    boolean privateLayout=ParamUtil.getBoolean(resourceRequest,"privateLayout");
    long[] selectedNodes=StringUtil.split(ParamUtil.getString(resourceRequest,"selectedNodes",StringPool.BLANK),0L);
    long[] openNodes=StringUtil.split(ParamUtil.getString(resourceRequest,"openNodes",StringPool.BLANK),0L);
    StringBuilder sb=new StringBuilder();
    ThemeDisplay themeDisplay=(ThemeDisplay)resourceRequest.getAttribute(WebKeys.THEME_DISPLAY);
    CommunitiesTreeUtil.buildLayoutsTreeHTML(scopeGroupId,privateLayout,parentLayoutId,new LongWrapper(nodeId),openNodes,selectableTree,selectedNodes,portletURL,themeDisplay,sb,true);
    resourceResponse.getWriter().write(sb.toString());
  }
 else {
    String path="/html/portlet/communities/scheduled_publishing_events.jsp";
    PortletRequestDispatcher portletRequestDispatcher=portletConfig.getPortletContext().getRequestDispatcher(path);
    portletRequestDispatcher.include(resourceRequest,resourceResponse);
  }
}
