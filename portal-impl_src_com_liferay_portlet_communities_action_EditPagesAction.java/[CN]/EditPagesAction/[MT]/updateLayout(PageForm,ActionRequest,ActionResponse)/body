{
  UploadPortletRequest uploadReq=PortalUtil.getUploadPortletRequest(req);
  String cmd=ParamUtil.getString(uploadReq,Constants.CMD);
  long groupId=ParamUtil.getLong(req,"groupId");
  boolean privateLayout=ParamUtil.getBoolean(req,"privateLayout");
  long layoutId=ParamUtil.getLong(req,"layoutId");
  long parentLayoutId=ParamUtil.getLong(uploadReq,"parentLayoutId");
  String description=ParamUtil.getString(uploadReq,"description");
  String type=ParamUtil.getString(uploadReq,"type");
  boolean hidden=ParamUtil.getBoolean(uploadReq,"hidden");
  String friendlyURL=ParamUtil.getString(uploadReq,"friendlyURL");
  boolean iconImage=ParamUtil.getBoolean(uploadReq,"iconImage");
  byte[] iconBytes=FileUtil.getBytes(uploadReq.getFile("iconFileName"));
  boolean inheritFromParentLayoutId=ParamUtil.getBoolean(uploadReq,"inheritFromParentLayoutId");
  long copyLayoutId=ParamUtil.getLong(uploadReq,"copyLayoutId");
  Locale[] locales=LanguageUtil.getAvailableLocales();
  Map localeNamesMap=new HashMap();
  Map localeTitlesMap=new HashMap();
  for (int i=0; i < locales.length; i++) {
    String languageId=LocaleUtil.toLanguageId(locales[i]);
    localeNamesMap.put(locales[i],ParamUtil.getString(uploadReq,"name_" + languageId));
    localeTitlesMap.put(locales[i],ParamUtil.getString(uploadReq,"title_" + languageId));
  }
  if (cmd.equals(Constants.ADD)) {
    if (inheritFromParentLayoutId && (parentLayoutId > 0)) {
      Layout parentLayout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,parentLayoutId);
      Layout layout=LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,localeNamesMap,localeTitlesMap,description,parentLayout.getType(),parentLayout.isHidden(),friendlyURL);
      LayoutServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),parentLayout.getTypeSettings());
    }
 else {
      Layout layout=LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,localeNamesMap,localeTitlesMap,description,type,hidden,friendlyURL);
      if (type.equals(LayoutImpl.TYPE_PORTLET)) {
        LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
        if (Validator.isNull(layoutTypePortlet.getLayoutTemplateId())) {
          layoutTypePortlet.setLayoutTemplateId(0,PropsValues.LAYOUT_DEFAULT_TEMPLATE_ID,false);
          LayoutServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),layout.getTypeSettings());
        }
      }
    }
  }
 else {
    Layout layout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,layoutId);
    layout=LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getParentLayoutId(),localeNamesMap,localeTitlesMap,description,type,hidden,friendlyURL,Boolean.valueOf(iconImage),iconBytes);
    if (type.equals(LayoutImpl.TYPE_PORTLET)) {
      if ((copyLayoutId > 0) && (copyLayoutId != layout.getLayoutId())) {
        try {
          Layout copyLayout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,copyLayoutId);
          if (copyLayout.getType().equals(LayoutImpl.TYPE_PORTLET)) {
            LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,copyLayout.getTypeSettings());
            copyPreferences(req,layout,copyLayout);
          }
        }
 catch (        NoSuchLayoutException nsle) {
        }
      }
 else {
        Properties formProperties=pageForm.getTypeSettingsProperties();
        Properties layoutProperties=layout.getTypeSettingsProperties();
        layoutProperties.setProperty("meta-robots",formProperties.getProperty("meta-robots"));
        layoutProperties.setProperty("meta-description",formProperties.getProperty("meta-description"));
        layoutProperties.setProperty("meta-keywords",formProperties.getProperty("meta-keywords"));
        layoutProperties.setProperty("javascript-1",formProperties.getProperty("javascript-1"));
        layoutProperties.setProperty("javascript-2",formProperties.getProperty("javascript-2"));
        layoutProperties.setProperty("javascript-3",formProperties.getProperty("javascript-3"));
        layoutProperties.setProperty("sitemap-include",formProperties.getProperty("sitemap-include"));
        layoutProperties.setProperty("sitemap-priority",formProperties.getProperty("sitemap-priority"));
        layoutProperties.setProperty("sitemap-changefreq",formProperties.getProperty("sitemap-changefreq"));
        LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getTypeSettings());
      }
    }
 else {
      layout.setTypeSettingsProperties(pageForm.getTypeSettingsProperties());
      LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getTypeSettings());
    }
    HttpServletResponse httpRes=(HttpServletResponse)((ActionResponseImpl)res).getHttpServletResponse();
    String[] eventClasses=StringUtil.split(PropsUtil.getComponentProperties().getString(PropsUtil.LAYOUT_CONFIGURATION_ACTION_UPDATE,Filter.by(type)));
    EventsProcessor.process(eventClasses,uploadReq,httpRes);
  }
}
