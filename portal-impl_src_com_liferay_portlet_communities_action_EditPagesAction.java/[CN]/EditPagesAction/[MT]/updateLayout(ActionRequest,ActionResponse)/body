{
  UploadPortletRequest uploadRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  String cmd=ParamUtil.getString(uploadRequest,Constants.CMD);
  long groupId=ParamUtil.getLong(actionRequest,"groupId");
  boolean privateLayout=ParamUtil.getBoolean(actionRequest,"privateLayout");
  long layoutId=ParamUtil.getLong(actionRequest,"layoutId");
  long parentLayoutId=ParamUtil.getLong(uploadRequest,"parentLayoutId");
  String type=ParamUtil.getString(uploadRequest,"type");
  boolean hidden=ParamUtil.getBoolean(uploadRequest,"hidden");
  String friendlyURL=ParamUtil.getString(uploadRequest,"friendlyURL");
  boolean iconImage=ParamUtil.getBoolean(uploadRequest,"iconImage");
  byte[] iconBytes=FileUtil.getBytes(uploadRequest.getFile("iconFileName"));
  long layoutPrototypeId=ParamUtil.getLong(uploadRequest,"layoutPrototypeId");
  boolean inheritFromParentLayoutId=ParamUtil.getBoolean(uploadRequest,"inheritFromParentLayoutId");
  long copyLayoutId=ParamUtil.getLong(uploadRequest,"copyLayoutId");
  Map<Locale,String> nameMap=LocalizationUtil.getLocalizationMap(actionRequest,"name");
  Map<Locale,String> titleMap=LocalizationUtil.getLocalizationMap(actionRequest,"title");
  Map<Locale,String> descriptionMap=LocalizationUtil.getLocalizationMap(actionRequest,"description");
  Map<Locale,String> keywordsMap=LocalizationUtil.getLocalizationMap(actionRequest,"keywords");
  Map<Locale,String> robotsMap=LocalizationUtil.getLocalizationMap(actionRequest,"robots");
  ServiceContext serviceContext=ServiceContextFactory.getInstance(Layout.class.getName(),actionRequest);
  Layout layout=null;
  String oldFriendlyURL=StringPool.BLANK;
  if (cmd.equals(Constants.ADD)) {
    if (inheritFromParentLayoutId && (parentLayoutId > 0)) {
      Layout parentLayout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,parentLayoutId);
      layout=LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,nameMap,titleMap,descriptionMap,keywordsMap,robotsMap,parentLayout.getType(),hidden,friendlyURL,serviceContext);
      LayoutServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),parentLayout.getTypeSettings());
      if (parentLayout.isTypePortlet()) {
        ActionUtil.copyPreferences(actionRequest,layout,parentLayout);
        ActionUtil.copyLookAndFeel(layout,parentLayout);
      }
    }
 else     if (layoutPrototypeId > 0) {
      LayoutPrototype layoutPrototype=LayoutPrototypeServiceUtil.getLayoutPrototype(layoutPrototypeId);
      Layout layoutPrototypeLayout=layoutPrototype.getLayout();
      layout=LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,nameMap,titleMap,descriptionMap,keywordsMap,robotsMap,LayoutConstants.TYPE_PORTLET,false,friendlyURL,serviceContext);
      LayoutServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),layoutPrototypeLayout.getTypeSettings());
      ActionUtil.copyPortletPermissions(actionRequest,layout,layoutPrototypeLayout);
      ActionUtil.copyPreferences(actionRequest,layout,layoutPrototypeLayout);
      ActionUtil.copyLookAndFeel(layout,layoutPrototypeLayout);
    }
 else {
      LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,nameMap,titleMap,descriptionMap,keywordsMap,robotsMap,type,hidden,friendlyURL,serviceContext);
    }
  }
 else {
    layout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,layoutId);
    oldFriendlyURL=layout.getFriendlyURL();
    layout=LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getParentLayoutId(),nameMap,titleMap,descriptionMap,keywordsMap,robotsMap,type,hidden,friendlyURL,Boolean.valueOf(iconImage),iconBytes,serviceContext);
    if (oldFriendlyURL.equals(layout.getFriendlyURL())) {
      oldFriendlyURL=StringPool.BLANK;
    }
    UnicodeProperties formTypeSettingsProperties=getTypeSettingsProperties(actionRequest);
    if (type.equals(LayoutConstants.TYPE_PORTLET)) {
      if ((copyLayoutId > 0) && (copyLayoutId != layout.getLayoutId())) {
        try {
          Layout copyLayout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,copyLayoutId);
          if (copyLayout.isTypePortlet()) {
            LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,copyLayout.getTypeSettings());
            ActionUtil.copyPreferences(actionRequest,layout,copyLayout);
            ActionUtil.copyLookAndFeel(layout,copyLayout);
          }
        }
 catch (        NoSuchLayoutException nsle) {
        }
      }
 else {
        UnicodeProperties layoutTypeSettingsProperties=layout.getTypeSettingsProperties();
        layoutTypeSettingsProperties.putAll(formTypeSettingsProperties);
        LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getTypeSettings());
      }
    }
 else {
      layout.setTypeSettingsProperties(formTypeSettingsProperties);
      LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getTypeSettings());
    }
    HttpServletResponse response=PortalUtil.getHttpServletResponse(actionResponse);
    LayoutSettings layoutSettings=LayoutSettings.getInstance(layout);
    EventsProcessorUtil.process(PropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,layoutSettings.getConfigurationActionUpdate(),uploadRequest,response);
  }
  return new Object[]{layout,oldFriendlyURL};
}
