{
  UploadPortletRequest uploadRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  String cmd=ParamUtil.getString(uploadRequest,Constants.CMD);
  long groupId=ParamUtil.getLong(actionRequest,"groupId");
  boolean privateLayout=ParamUtil.getBoolean(actionRequest,"privateLayout");
  long layoutId=ParamUtil.getLong(actionRequest,"layoutId");
  long parentLayoutId=ParamUtil.getLong(uploadRequest,"parentLayoutId");
  String description=ParamUtil.getString(uploadRequest,"description");
  String type=ParamUtil.getString(uploadRequest,"type");
  boolean hidden=ParamUtil.getBoolean(uploadRequest,"hidden");
  String friendlyURL=ParamUtil.getString(uploadRequest,"friendlyURL");
  boolean iconImage=ParamUtil.getBoolean(uploadRequest,"iconImage");
  byte[] iconBytes=FileUtil.getBytes(uploadRequest.getFile("iconFileName"));
  long layoutPrototypeId=ParamUtil.getLong(uploadRequest,"layoutPrototypeId");
  boolean inheritFromParentLayoutId=ParamUtil.getBoolean(uploadRequest,"inheritFromParentLayoutId");
  long copyLayoutId=ParamUtil.getLong(uploadRequest,"copyLayoutId");
  Map<Locale,String> localeNamesMap=LocalizationUtil.getLocalizationMap(actionRequest,"name");
  Map<Locale,String> localeTitlesMap=LocalizationUtil.getLocalizationMap(actionRequest,"title");
  if (cmd.equals(Constants.ADD)) {
    if (inheritFromParentLayoutId && (parentLayoutId > 0)) {
      Layout parentLayout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,parentLayoutId);
      Layout layout=LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,localeNamesMap,localeTitlesMap,description,parentLayout.getType(),parentLayout.isHidden(),friendlyURL);
      LayoutServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),parentLayout.getTypeSettings());
      if (parentLayout.getType().equals(LayoutConstants.TYPE_PORTLET)) {
        copyPreferences(actionRequest,layout,parentLayout);
      }
    }
 else     if (layoutPrototypeId > 0) {
      LayoutPrototype layoutPrototype=LayoutPrototypeServiceUtil.getLayoutPrototype(layoutPrototypeId);
      Layout layoutPrototypeLayout=layoutPrototype.getLayout();
      Layout parentLayout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,parentLayoutId);
      Layout layout=LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,localeNamesMap,localeTitlesMap,description,parentLayout.getType(),parentLayout.isHidden(),friendlyURL);
      LayoutServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),layoutPrototypeLayout.getTypeSettings());
      if (parentLayout.getType().equals(LayoutConstants.TYPE_PORTLET)) {
        copyPreferences(actionRequest,layout,layoutPrototypeLayout);
      }
    }
 else {
      LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,localeNamesMap,localeTitlesMap,description,type,hidden,friendlyURL);
    }
  }
 else {
    Layout layout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,layoutId);
    layout=LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getParentLayoutId(),localeNamesMap,localeTitlesMap,description,type,hidden,friendlyURL,Boolean.valueOf(iconImage),iconBytes);
    UnicodeProperties formTypeSettingsProperties=getTypeSettingsProperties(actionRequest);
    if (type.equals(LayoutConstants.TYPE_PORTLET)) {
      if ((copyLayoutId > 0) && (copyLayoutId != layout.getLayoutId())) {
        try {
          Layout copyLayout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,copyLayoutId);
          if (copyLayout.getType().equals(LayoutConstants.TYPE_PORTLET)) {
            LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,copyLayout.getTypeSettings());
            copyPreferences(actionRequest,layout,copyLayout);
          }
        }
 catch (        NoSuchLayoutException nsle) {
        }
      }
 else {
        UnicodeProperties layoutTypeSettingsProperties=layout.getTypeSettingsProperties();
        for (        String property : formTypeSettingsProperties.keySet()) {
          layoutTypeSettingsProperties.setProperty(property,formTypeSettingsProperties.getProperty(property));
        }
        LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getTypeSettings());
      }
    }
 else {
      layout.setTypeSettingsProperties(formTypeSettingsProperties);
      LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getTypeSettings());
    }
    HttpServletResponse response=PortalUtil.getHttpServletResponse(actionResponse);
    String[] eventClasses=StringUtil.split(PropsUtil.get(PropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,new Filter(type)));
    EventsProcessorUtil.process(PropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,eventClasses,uploadRequest,response);
  }
}
