{
  parameterMap.put(PortletDataHandlerKeys.DELETE_MISSING_LAYOUTS,Boolean.FALSE.toString());
  List layouts=new ArrayList();
  Iterator itr1=layoutIdMap.entrySet().iterator();
  while (itr1.hasNext()) {
    Entry entry=(Entry)itr1.next();
    long plid=((Long)entry.getKey()).longValue();
    boolean includeChildren=((Boolean)entry.getValue()).booleanValue();
    Layout layout=LayoutLocalServiceUtil.getLayout(plid);
    if (!layouts.contains(layout)) {
      layouts.add(layout);
    }
    Iterator itr2=getMissingParents(layout,liveGroupId).iterator();
    while (itr2.hasNext()) {
      Layout parentLayout=(Layout)itr2.next();
      if (!layouts.contains(parentLayout)) {
        layouts.add(parentLayout);
      }
    }
    if (includeChildren) {
      itr2=layout.getAllChildren().iterator();
      while (itr2.hasNext()) {
        Layout childLayout=(Layout)itr2.next();
        if (!layouts.contains(childLayout)) {
          layouts.add(childLayout);
        }
      }
    }
  }
  itr1=layouts.iterator();
  long[] layoutIds=new long[layouts.size()];
  for (int i=0; itr1.hasNext(); i++) {
    Layout curLayout=(Layout)itr1.next();
    layoutIds[i]=curLayout.getLayoutId();
  }
  byte[] data=LayoutServiceUtil.exportLayouts(stagingGroupId,privateLayout,layoutIds,parameterMap);
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  LayoutServiceUtil.importLayouts(liveGroupId,privateLayout,parameterMap,bais);
}
