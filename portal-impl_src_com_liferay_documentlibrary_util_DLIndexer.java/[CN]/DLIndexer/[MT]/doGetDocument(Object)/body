{
  FileModel fileModel=(FileModel)obj;
  long companyId=fileModel.getCompanyId();
  String portletId=fileModel.getPortletId();
  long groupId=getParentGroupId(fileModel.getGroupId());
  long scopeGroupId=fileModel.getGroupId();
  long folderId=DLFolderConstants.DEFAULT_PARENT_FOLDER_ID;
  long repositoryId=fileModel.getRepositoryId();
  String fileName=fileModel.getFileName();
  long fileEntryId=fileModel.getFileEntryId();
  String properties=fileModel.getProperties();
  Date modifiedDate=fileModel.getModifiedDate();
  long[] assetCategoryIds=fileModel.getAssetCategoryIds();
  String[] assetTagNames=fileModel.getAssetTagNames();
  DLFileEntry fileEntry=null;
  try {
    if (fileEntryId > 0) {
      fileEntry=DLFileEntryLocalServiceUtil.getFileEntry(fileEntryId);
    }
 else {
      fileEntry=DLFileEntryLocalServiceUtil.getFileEntry(groupId,folderId,fileName);
    }
  }
 catch (  NoSuchFileEntryException nsfe) {
    if (_log.isDebugEnabled()) {
      _log.debug("Not indexing document " + companyId + " "+ portletId+ " "+ scopeGroupId+ " "+ repositoryId+ " "+ fileName+ " "+ fileEntryId);
    }
    return null;
  }
  folderId=fileEntry.getFolderId();
  if (properties == null) {
    properties=fileEntry.getLuceneProperties();
  }
  if (assetCategoryIds == null) {
    assetCategoryIds=AssetCategoryLocalServiceUtil.getCategoryIds(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  }
  if (assetTagNames == null) {
    assetTagNames=AssetTagLocalServiceUtil.getTagNames(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Indexing document " + companyId + " "+ portletId+ " "+ scopeGroupId+ " "+ repositoryId+ " "+ fileName+ " "+ fileEntryId);
  }
  InputStream is=null;
  try {
    Hook hook=HookFactory.getInstance();
    is=hook.getFileAsStream(companyId,repositoryId,fileName);
  }
 catch (  Exception e) {
  }
  if (is == null) {
    if (_log.isDebugEnabled()) {
      _log.debug("Document " + companyId + " "+ portletId+ " "+ scopeGroupId+ " "+ repositoryId+ " "+ fileName+ " "+ fileEntryId+ " does not have any content");
    }
    return null;
  }
  Document document=new DocumentImpl();
  document.addUID(portletId,repositoryId,fileName);
  document.addModifiedDate(modifiedDate);
  document.addKeyword(Field.COMPANY_ID,companyId);
  document.addKeyword(Field.PORTLET_ID,portletId);
  document.addKeyword(Field.GROUP_ID,groupId);
  document.addKeyword(Field.SCOPE_GROUP_ID,scopeGroupId);
  try {
    document.addFile(Field.CONTENT,is,fileEntry.getTitle());
  }
 catch (  IOException ioe) {
    throw new SearchException("Cannot extract text from file" + companyId + " "+ portletId+ " "+ scopeGroupId+ " "+ repositoryId+ " "+ fileName);
  }
  document.addText(Field.PROPERTIES,properties);
  document.addKeyword(Field.ASSET_CATEGORY_IDS,assetCategoryIds);
  document.addKeyword(Field.ASSET_TAG_NAMES,assetTagNames);
  document.addKeyword(Field.FOLDER_ID,folderId);
  document.addKeyword("repositoryId",repositoryId);
  document.addKeyword("path",fileName);
  document.addKeyword(Field.ENTRY_CLASS_NAME,DLFileEntry.class.getName());
  document.addKeyword(Field.ENTRY_CLASS_PK,fileEntryId);
  ExpandoBridge expandoBridge=ExpandoBridgeFactoryUtil.getExpandoBridge(companyId,DLFileEntry.class.getName(),fileEntryId);
  ExpandoBridgeIndexerUtil.addAttributes(document,expandoBridge);
  if (_log.isDebugEnabled()) {
    _log.debug("Document " + companyId + " "+ portletId+ " "+ scopeGroupId+ " "+ repositoryId+ " "+ fileName+ " "+ fileEntryId+ " indexed successfully");
  }
  return document;
}
