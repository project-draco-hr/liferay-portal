{
  BufferedIncrement bufferedIncrement=findAnnotation(methodInvocation);
  if (bufferedIncrement == _nullBufferedIncrement) {
    return null;
  }
  String configuration=bufferedIncrement.configuration();
  BufferedIncrementConfiguration bufferedIncrementConfiguration=_bufferedIncrementConfigurations.get(configuration);
  if (bufferedIncrementConfiguration == null) {
    bufferedIncrementConfiguration=new BufferedIncrementConfiguration(configuration);
    _bufferedIncrementConfigurations.put(configuration,bufferedIncrementConfiguration);
  }
  if (!bufferedIncrementConfiguration.isEnabled()) {
    return nullResult;
  }
  Method method=methodInvocation.getMethod();
  BufferedIncrementProcessor bufferedIncrementProcessor=_bufferedIncrementProcessors.get(method);
  if (bufferedIncrementProcessor == null) {
    bufferedIncrementProcessor=new BufferedIncrementProcessor(bufferedIncrementConfiguration,method);
    BufferedIncrementProcessor previousBufferedIncrementProcessor=_bufferedIncrementProcessors.putIfAbsent(method,bufferedIncrementProcessor);
    if (previousBufferedIncrementProcessor != null) {
      bufferedIncrementProcessor=previousBufferedIncrementProcessor;
    }
  }
  Object[] arguments=methodInvocation.getArguments();
  Object value=arguments[arguments.length - 1];
  CacheKeyGenerator cacheKeyGenerator=CacheKeyGeneratorUtil.getCacheKeyGenerator(BufferedIncrementAdvice.class.getName());
  for (int i=0; i < arguments.length - 1; i++) {
    cacheKeyGenerator.append(StringUtil.toHexString(arguments[i]));
  }
  Serializable batchKey=cacheKeyGenerator.finish();
  Increment<?> increment=IncrementFactory.createIncrement(bufferedIncrement.incrementClass(),value);
  final BufferedIncrementProcessor callbackBufferedIncrementProcessor=bufferedIncrementProcessor;
  final BufferedIncreasableEntry bufferedIncreasableEntry=new BufferedIncreasableEntry(methodInvocation,batchKey,increment);
  TransactionCommitCallbackUtil.registerCallback(new Callable<Void>(){
    @Override public Void call() throws Exception {
      callbackBufferedIncrementProcessor.process(bufferedIncreasableEntry);
      return null;
    }
  }
);
  return nullResult;
}
