{
  long pk=ServiceTestUtil.nextLong();
  Country newCountry=_persistence.create(pk);
  newCountry.setName(ServiceTestUtil.randomString());
  newCountry.setA2(ServiceTestUtil.randomString());
  newCountry.setA3(ServiceTestUtil.randomString());
  newCountry.setNumber(ServiceTestUtil.randomString());
  newCountry.setIdd(ServiceTestUtil.randomString());
  newCountry.setZipRequired(ServiceTestUtil.randomBoolean());
  newCountry.setActive(ServiceTestUtil.randomBoolean());
  newCountry.setMvccVersion(ServiceTestUtil.nextLong());
  _persistence.update(newCountry);
  Country existingCountry=_persistence.findByPrimaryKey(newCountry.getPrimaryKey());
  Assert.assertEquals(existingCountry.getCountryId(),newCountry.getCountryId());
  Assert.assertEquals(existingCountry.getName(),newCountry.getName());
  Assert.assertEquals(existingCountry.getA2(),newCountry.getA2());
  Assert.assertEquals(existingCountry.getA3(),newCountry.getA3());
  Assert.assertEquals(existingCountry.getNumber(),newCountry.getNumber());
  Assert.assertEquals(existingCountry.getIdd(),newCountry.getIdd());
  Assert.assertEquals(existingCountry.getZipRequired(),newCountry.getZipRequired());
  Assert.assertEquals(existingCountry.getActive(),newCountry.getActive());
  Assert.assertEquals(existingCountry.getMvccVersion(),newCountry.getMvccVersion());
}
