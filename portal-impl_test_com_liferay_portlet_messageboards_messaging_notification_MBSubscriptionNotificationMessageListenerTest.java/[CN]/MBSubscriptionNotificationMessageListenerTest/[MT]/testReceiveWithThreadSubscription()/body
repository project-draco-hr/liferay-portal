{
  MBSubscriptionNotificationMessageListener listener=new MBSubscriptionNotificationMessageListener(new MessageSender(){
    public void send(    String destination,    Message message){
      _toMailService.add(message);
    }
  }
,_subscriptionLocalService,_userLocalService);
  _messageFromMB.put("categoryIds","");
  final List<Subscription> threadSubscriptions=Arrays.asList(new Subscription[]{new MockSubscriptionImpl(1,1,1)});
  final MockUserImpl threadSubscriber=new MockUserImpl(1,"test@liferay.com","Joe","","Bloggs",true);
  _mockery.checking(new Expectations(){
{
      one(_subscriptionLocalService).getSubscriptions(with(any(Long.class)),with(equal(MBThread.class.getName())),with(any(Long.class)));
      will(returnValue(threadSubscriptions));
      exactly(threadSubscriptions.size()).of(_userLocalService).getUserById(with(any(Long.class)));
      will(returnValue(threadSubscriber));
      never(_subscriptionLocalService).deleteSubscription(with(any(Long.class)));
      never(_subscriptionLocalService).getSubscriptions(with(any(Long.class)),with(equal(MBCategory.class.getName())),with(any(Long.class)));
    }
  }
);
  listener.receive(_messageFromMB);
  assertTrue(_toMailService.size() == 1);
  MailMessage sentToMailService=(MailMessage)_toMailService.get(0).getPayload();
  assertNull(sentToMailService.getSMTPAccount());
  _assertToMailServiceMessage(sentToMailService);
  assertEquals(threadSubscriber.getEmailAddress(),sentToMailService.getBulkAddresses()[0].getAddress());
  assertEquals(threadSubscriber.getFullName(),sentToMailService.getBulkAddresses()[0].getPersonal());
}
