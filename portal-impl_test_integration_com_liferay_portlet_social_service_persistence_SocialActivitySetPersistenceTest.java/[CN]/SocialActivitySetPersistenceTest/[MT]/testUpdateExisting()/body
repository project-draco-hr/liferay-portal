{
  long pk=RandomTestUtil.nextLong();
  SocialActivitySet newSocialActivitySet=_persistence.create(pk);
  newSocialActivitySet.setGroupId(RandomTestUtil.nextLong());
  newSocialActivitySet.setCompanyId(RandomTestUtil.nextLong());
  newSocialActivitySet.setUserId(RandomTestUtil.nextLong());
  newSocialActivitySet.setCreateDate(RandomTestUtil.nextLong());
  newSocialActivitySet.setModifiedDate(RandomTestUtil.nextLong());
  newSocialActivitySet.setClassNameId(RandomTestUtil.nextLong());
  newSocialActivitySet.setClassPK(RandomTestUtil.nextLong());
  newSocialActivitySet.setType(RandomTestUtil.nextInt());
  newSocialActivitySet.setExtraData(RandomTestUtil.randomString());
  newSocialActivitySet.setActivityCount(RandomTestUtil.nextInt());
  _models.add(_persistence.update(newSocialActivitySet));
  SocialActivitySet existingSocialActivitySet=_persistence.findByPrimaryKey(newSocialActivitySet.getPrimaryKey());
  Assert.assertEquals(existingSocialActivitySet.getActivitySetId(),newSocialActivitySet.getActivitySetId());
  Assert.assertEquals(existingSocialActivitySet.getGroupId(),newSocialActivitySet.getGroupId());
  Assert.assertEquals(existingSocialActivitySet.getCompanyId(),newSocialActivitySet.getCompanyId());
  Assert.assertEquals(existingSocialActivitySet.getUserId(),newSocialActivitySet.getUserId());
  Assert.assertEquals(existingSocialActivitySet.getCreateDate(),newSocialActivitySet.getCreateDate());
  Assert.assertEquals(existingSocialActivitySet.getModifiedDate(),newSocialActivitySet.getModifiedDate());
  Assert.assertEquals(existingSocialActivitySet.getClassNameId(),newSocialActivitySet.getClassNameId());
  Assert.assertEquals(existingSocialActivitySet.getClassPK(),newSocialActivitySet.getClassPK());
  Assert.assertEquals(existingSocialActivitySet.getType(),newSocialActivitySet.getType());
  Assert.assertEquals(existingSocialActivitySet.getExtraData(),newSocialActivitySet.getExtraData());
  Assert.assertEquals(existingSocialActivitySet.getActivityCount(),newSocialActivitySet.getActivityCount());
}
