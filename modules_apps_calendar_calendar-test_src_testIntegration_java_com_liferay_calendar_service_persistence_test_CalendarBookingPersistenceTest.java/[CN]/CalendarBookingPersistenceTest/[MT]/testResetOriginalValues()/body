{
  CalendarBooking newCalendarBooking=addCalendarBooking();
  _persistence.clearCache();
  CalendarBooking existingCalendarBooking=_persistence.findByPrimaryKey(newCalendarBooking.getPrimaryKey());
  Assert.assertTrue(Validator.equals(existingCalendarBooking.getUuid(),ReflectionTestUtil.invoke(existingCalendarBooking,"getOriginalUuid",new Class<?>[0])));
  Assert.assertEquals(Long.valueOf(existingCalendarBooking.getGroupId()),ReflectionTestUtil.<Long>invoke(existingCalendarBooking,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingCalendarBooking.getCalendarId()),ReflectionTestUtil.<Long>invoke(existingCalendarBooking,"getOriginalCalendarId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingCalendarBooking.getParentCalendarBookingId()),ReflectionTestUtil.<Long>invoke(existingCalendarBooking,"getOriginalParentCalendarBookingId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingCalendarBooking.getCalendarId()),ReflectionTestUtil.<Long>invoke(existingCalendarBooking,"getOriginalCalendarId",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingCalendarBooking.getVEventUid(),ReflectionTestUtil.invoke(existingCalendarBooking,"getOriginalVEventUid",new Class<?>[0])));
}
