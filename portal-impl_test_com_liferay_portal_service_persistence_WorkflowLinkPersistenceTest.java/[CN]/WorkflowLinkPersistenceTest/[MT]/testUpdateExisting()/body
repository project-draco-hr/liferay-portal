{
  long pk=nextLong();
  WorkflowLink newWorkflowLink=_persistence.create(pk);
  newWorkflowLink.setGroupId(nextLong());
  newWorkflowLink.setCompanyId(nextLong());
  newWorkflowLink.setUserId(nextLong());
  newWorkflowLink.setUserName(randomString());
  newWorkflowLink.setModifiedDate(nextDate());
  newWorkflowLink.setClassNameId(nextLong());
  newWorkflowLink.setDefinitionName(randomString());
  newWorkflowLink.setDefinitionVersion(nextInt());
  _persistence.update(newWorkflowLink,false);
  WorkflowLink existingWorkflowLink=_persistence.findByPrimaryKey(newWorkflowLink.getPrimaryKey());
  assertEquals(existingWorkflowLink.getWorkflowLinkId(),newWorkflowLink.getWorkflowLinkId());
  assertEquals(existingWorkflowLink.getGroupId(),newWorkflowLink.getGroupId());
  assertEquals(existingWorkflowLink.getCompanyId(),newWorkflowLink.getCompanyId());
  assertEquals(existingWorkflowLink.getUserId(),newWorkflowLink.getUserId());
  assertEquals(existingWorkflowLink.getUserName(),newWorkflowLink.getUserName());
  assertEquals(Time.getShortTimestamp(existingWorkflowLink.getModifiedDate()),Time.getShortTimestamp(newWorkflowLink.getModifiedDate()));
  assertEquals(existingWorkflowLink.getClassNameId(),newWorkflowLink.getClassNameId());
  assertEquals(existingWorkflowLink.getDefinitionName(),newWorkflowLink.getDefinitionName());
  assertEquals(existingWorkflowLink.getDefinitionVersion(),newWorkflowLink.getDefinitionVersion());
}
