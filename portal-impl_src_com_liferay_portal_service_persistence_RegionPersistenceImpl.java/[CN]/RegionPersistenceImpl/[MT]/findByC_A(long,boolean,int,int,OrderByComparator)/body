{
  int count=countByC_A(countryId,active);
  if (count == 0) {
    return Collections.EMPTY_LIST;
  }
  Object[] finderArgs=new Object[]{new Long(countryId),Boolean.valueOf(active),String.valueOf(start),String.valueOf(end),String.valueOf(obc)};
  List<Region> list=(List<Region>)FinderCacheUtil.getResult(FINDER_PATH_FIND_BY_OBC_C_A,finderArgs,this);
  if (list == null) {
    Session session=null;
    try {
      session=openSession();
      StringBuilder query=new StringBuilder();
      query.append("FROM com.liferay.portal.model.Region WHERE ");
      query.append("countryId = ?");
      query.append(" AND ");
      query.append("active_ = ?");
      query.append(" ");
      if (obc != null) {
        query.append("ORDER BY ");
        query.append(obc.getOrderBy());
      }
 else {
        query.append("ORDER BY ");
        query.append("name ASC");
      }
      Query q=session.createQuery(query.toString());
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(countryId);
      qPos.add(active);
      list=(List<Region>)QueryUtil.list(q,getDialect(),start,end);
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        list=new ArrayList<Region>();
      }
      cacheResult(list);
      FinderCacheUtil.putResult(FINDER_PATH_FIND_BY_OBC_C_A,finderArgs,list);
      closeSession(session);
    }
  }
  return list;
}
