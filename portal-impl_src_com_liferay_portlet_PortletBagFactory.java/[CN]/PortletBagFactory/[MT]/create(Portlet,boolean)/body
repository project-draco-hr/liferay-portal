{
  validate();
  javax.portlet.Portlet portletInstance=getPortletInstance(portlet);
  Registry registry=RegistryUtil.getRegistry();
  Filter filter=registry.getFilter("(|(javax.portlet.name=" + portlet.getPortletId() + ")(javax.portlet.name=ALL))");
  Map<String,Object> properties=Collections.<String,Object>singletonMap("javax.portlet.name",portlet.getPortletId());
  List<ConfigurationAction> configurationActionInstances=newConfigurationActions(portlet,filter,properties);
  List<Indexer<?>> indexerInstances=newIndexers(portlet,filter,properties);
  List<OpenSearch> openSearchInstances=newOpenSearches(portlet,filter,properties);
  List<SchedulerEventMessageListener> schedulerEventMessageListeners=newSchedulerEventMessageListeners(portlet,filter,properties);
  FriendlyURLMapperTracker friendlyURLMapperTracker=newFriendlyURLMappers(portlet);
  List<URLEncoder> urlEncoderInstances=newURLEncoders(portlet,filter,properties);
  List<PortletDataHandler> portletDataHandlerInstances=newPortletDataHandlers(portlet,filter,properties);
  List<StagedModelDataHandler<?>> stagedModelDataHandlerInstances=newStagedModelDataHandler(portlet,filter,properties);
  List<TemplateHandler> templateHandlerInstances=newTemplateHandlers(portlet,filter,properties);
  List<PortletLayoutListener> portletLayoutListenerInstances=newPortletLayoutListeners(portlet,filter,properties);
  List<PollerProcessor> pollerProcessorInstances=newPollerProcessors(portlet,filter,properties);
  List<MessageListener> popMessageListenerInstances=newPOPMessageListeners(portlet,filter,properties);
  List<SocialActivityInterpreter> socialActivityInterpreterInstances=newSocialActivityInterpreterInstances(portlet,filter,properties);
  List<SocialRequestInterpreter> socialRequestInterpreterInstances=newSocialRequestInterpreterInstances(portlet,filter,properties);
  List<UserNotificationDefinition> userNotificationDefinitionInstances=newUserNotificationDefinitionInstances(portlet,filter,properties);
  List<UserNotificationHandler> userNotificationHandlerInstances=newUserNotificationHandlerInstances(portlet,filter,properties);
  List<WebDAVStorage> webDAVStorageInstances=newWebDAVStorageInstances(portlet,filter,properties);
  List<Method> xmlRpcMethodInstances=newXmlRpcMethodInstances(portlet,filter,properties);
  List<ControlPanelEntry> controlPanelEntryInstances=newControlPanelEntryInstances(portlet,filter,properties);
  List<AssetRendererFactory<?>> assetRendererFactoryInstances=newAssetRendererFactoryInstances(portlet,filter,properties);
  List<AtomCollectionAdapter<?>> atomCollectionAdapterInstances=newAtomCollectionAdapterInstances(portlet,filter,properties);
  List<CustomAttributesDisplay> customAttributesDisplayInstances=newCustomAttributesDisplayInstances(portlet,filter,properties);
  List<PermissionPropagator> permissionPropagatorInstances=newPermissionPropagators(portlet,filter,properties);
  List<TrashHandler> trashHandlerInstances=newTrashHandlerInstances(portlet,filter,properties);
  List<WorkflowHandler<?>> workflowHandlerInstances=newWorkflowHandlerInstances(portlet,filter,properties);
  List<PreferencesValidator> preferencesValidatorInstances=newPreferencesValidatorInstances(portlet,filter,properties);
  ResourceBundleTracker resourceBundleTracker=new ResourceBundleTracker(portlet.getPortletId());
  PortletBag portletBag=new PortletBagImpl(portlet.getPortletId(),_servletContext,portletInstance,resourceBundleTracker,configurationActionInstances,indexerInstances,openSearchInstances,schedulerEventMessageListeners,friendlyURLMapperTracker,urlEncoderInstances,portletDataHandlerInstances,stagedModelDataHandlerInstances,templateHandlerInstances,portletLayoutListenerInstances,pollerProcessorInstances,popMessageListenerInstances,socialActivityInterpreterInstances,socialRequestInterpreterInstances,userNotificationDefinitionInstances,userNotificationHandlerInstances,webDAVStorageInstances,xmlRpcMethodInstances,controlPanelEntryInstances,assetRendererFactoryInstances,atomCollectionAdapterInstances,customAttributesDisplayInstances,permissionPropagatorInstances,trashHandlerInstances,workflowHandlerInstances,preferencesValidatorInstances);
  PortletBagPool.put(portlet.getRootPortletId(),portletBag);
  try {
    PortletInstanceFactoryUtil.create(portlet,_servletContext,destroyPrevious);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  return portletBag;
}
