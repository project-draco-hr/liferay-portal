{
  validate();
  javax.portlet.Portlet portletInstance=getPortletInstance(portlet);
  List<ConfigurationAction> configurationActionInstances=newConfigurationActions(portlet);
  List<Indexer> indexerInstances=newIndexers(portlet);
  List<OpenSearch> openSearchInstances=newOpenSearches(portlet);
  List<FriendlyURLMapper> friendlyURLMapperInstances=newFriendlyURLMappers(portlet);
  List<URLEncoder> urlEncoderInstances=newURLEncoders(portlet);
  List<PortletDataHandler> portletDataHandlerInstances=newPortletDataHandlers(portlet);
  List<StagedModelDataHandler<?>> stagedModelDataHandlerInstances=newStagedModelDataHandler(portlet);
  List<TemplateHandler> templateHandlerInstances=newTemplateHandlers(portlet);
  List<PortletLayoutListener> portletLayoutListenerInstances=newPortletLayoutListeners(portlet);
  List<PollerProcessor> pollerProcessorInstances=newPollerProcessors(portlet);
  List<MessageListener> popMessageListenerInstances=newPOPMessageListeners(portlet);
  List<SocialActivityInterpreter> socialActivityInterpreterInstances=newSocialActivityInterpreterInstances(portlet);
  List<SocialRequestInterpreter> socialRequestInterpreterInstances=newSocialRequestInterpreterInstances(portlet);
  List<UserNotificationHandler> userNotificationHandlerInstances=newUserNotificationHandlerInstances(portlet);
  initUserNotificationDefinition(portlet);
  List<WebDAVStorage> webDAVStorageInstances=newWebDAVStorageInstances(portlet);
  List<Method> xmlRpcMethodInstances=newXmlRpcMethodInstances(portlet);
  List<ControlPanelEntry> controlPanelEntryInstances=newControlPanelEntryInstances(portlet);
  List<AssetRendererFactory> assetRendererFactoryInstances=newAssetRendererFactoryInstances(portlet);
  List<AtomCollectionAdapter<?>> atomCollectionAdapterInstances=newAtomCollectionAdapterInstances(portlet);
  List<CustomAttributesDisplay> customAttributesDisplayInstances=newCustomAttributesDisplayInstances(portlet);
  List<DDMDisplay> ddmDisplayInstances=newDDMDisplayInstances(portlet);
  List<PermissionPropagator> permissionPropagatorInstances=newPermissionPropagators(portlet);
  List<TrashHandler> trashHandlerInstances=newTrashHandlerInstances(portlet);
  List<WorkflowHandler> workflowHandlerInstances=newWorkflowHandlerInstances(portlet);
  List<PreferencesValidator> preferencesValidatorInstances=newPreferencesValidatorInstances(portlet);
  Map<String,ResourceBundle> resourceBundles=null;
  String resourceBundle=portlet.getResourceBundle();
  if (Validator.isNotNull(resourceBundle) && !resourceBundle.equals(StrutsResourceBundle.class.getName())) {
    resourceBundles=new HashMap<String,ResourceBundle>();
    initResourceBundle(resourceBundles,portlet,null);
    initResourceBundle(resourceBundles,portlet,LocaleUtil.getDefault());
    Set<String> supportedLanguageIds=portlet.getSupportedLocales();
    if (supportedLanguageIds.isEmpty()) {
      supportedLanguageIds=SetUtil.fromArray(PropsValues.LOCALES);
    }
    for (    String supportedLanguageId : supportedLanguageIds) {
      Locale locale=LocaleUtil.fromLanguageId(supportedLanguageId);
      initResourceBundle(resourceBundles,portlet,locale);
    }
  }
  PortletBag portletBag=new PortletBagImpl(portlet.getPortletId(),_servletContext,portletInstance,configurationActionInstances,indexerInstances,openSearchInstances,friendlyURLMapperInstances,urlEncoderInstances,portletDataHandlerInstances,stagedModelDataHandlerInstances,templateHandlerInstances,portletLayoutListenerInstances,pollerProcessorInstances,popMessageListenerInstances,socialActivityInterpreterInstances,socialRequestInterpreterInstances,userNotificationHandlerInstances,webDAVStorageInstances,xmlRpcMethodInstances,controlPanelEntryInstances,assetRendererFactoryInstances,atomCollectionAdapterInstances,customAttributesDisplayInstances,ddmDisplayInstances,permissionPropagatorInstances,trashHandlerInstances,workflowHandlerInstances,preferencesValidatorInstances,resourceBundles);
  PortletBagPool.put(portlet.getRootPortletId(),portletBag);
  initSchedulers(portlet);
  try {
    PortletInstanceFactoryUtil.create(portlet,_servletContext);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  return portletBag;
}
