{
  PortletApp portletApp=portlet.getPortletApp();
  if (!portletApp.isWARFile() && _warFile) {
    String contextPath=PortalUtil.getPathContext();
    _servletContext=ServletContextPool.get(contextPath);
    _classLoader=ClassLoaderUtil.getPortalClassLoader();
  }
  Class<?> portletClass=null;
  try {
    portletClass=_classLoader.loadClass(portlet.getPortletClass());
  }
 catch (  Throwable t) {
    _log.error(t,t);
    PortletLocalServiceUtil.destroyPortlet(portlet);
    return null;
  }
  javax.portlet.Portlet portletInstance=(javax.portlet.Portlet)portletClass.newInstance();
  ConfigurationAction configurationActionInstance=newConfigurationAction(portlet);
  List<Indexer> indexerInstances=newIndexers(portlet);
  OpenSearch openSearchInstance=newOpenSearch(portlet);
  FriendlyURLMapper friendlyURLMapperInstance=newFriendlyURLMapper(portlet);
  URLEncoder urlEncoderInstance=newURLEncoder(portlet);
  PortletDataHandler portletDataHandlerInstance=newPortletDataHandler(portlet);
  List<StagedModelDataHandler<?>> stagedModelDataHandlerInstances=newStagedModelDataHandler(portlet);
  TemplateHandler templateHandlerInstance=newTemplateHandler(portlet);
  if (templateHandlerInstance != null) {
    TemplateHandlerRegistryUtil.register(templateHandlerInstance);
  }
  PortletLayoutListener portletLayoutListenerInstance=newPortletLayoutListener(portlet);
  PollerProcessor pollerProcessorInstance=newPollerProcessor(portlet);
  MessageListener popMessageListenerInstance=newPOPMessageListener(portlet);
  List<SocialActivityInterpreter> socialActivityInterpreterInstances=newSocialActivityInterpreterInstances(portlet);
  SocialRequestInterpreter socialRequestInterpreterInstance=null;
  if (Validator.isNotNull(portlet.getSocialRequestInterpreterClass())) {
    socialRequestInterpreterInstance=(SocialRequestInterpreter)newInstance(SocialRequestInterpreter.class,portlet.getSocialRequestInterpreterClass());
    socialRequestInterpreterInstance=new SocialRequestInterpreterImpl(portlet.getPortletId(),socialRequestInterpreterInstance);
    SocialRequestInterpreterLocalServiceUtil.addRequestInterpreter(socialRequestInterpreterInstance);
  }
  List<UserNotificationHandler> userNotificationHandlerInstances=newUserNotificationHandlerInstances(portlet);
  initUserNotificationDefinition(portlet);
  WebDAVStorage webDAVStorageInstance=null;
  if (Validator.isNotNull(portlet.getWebDAVStorageClass())) {
    webDAVStorageInstance=(WebDAVStorage)newInstance(WebDAVStorage.class,portlet.getWebDAVStorageClass());
    webDAVStorageInstance.setToken(portlet.getWebDAVStorageToken());
    WebDAVUtil.addStorage(webDAVStorageInstance);
  }
  Method xmlRpcMethodInstance=null;
  if (Validator.isNotNull(portlet.getXmlRpcMethodClass())) {
    xmlRpcMethodInstance=(Method)newInstance(Method.class,portlet.getXmlRpcMethodClass());
    XmlRpcServlet.registerMethod(xmlRpcMethodInstance);
  }
  ControlPanelEntry controlPanelEntryInstance=null;
  if (Validator.isNotNull(portlet.getControlPanelEntryClass())) {
    controlPanelEntryInstance=(ControlPanelEntry)newInstance(ControlPanelEntry.class,portlet.getControlPanelEntryClass());
  }
  List<AssetRendererFactory> assetRendererFactoryInstances=newAssetRendererFactoryInstances(portlet);
  List<AtomCollectionAdapter<?>> atomCollectionAdapterInstances=newAtomCollectionAdapterInstances(portlet);
  List<CustomAttributesDisplay> customAttributesDisplayInstances=new ArrayList<CustomAttributesDisplay>();
  for (  String customAttributesDisplayClass : portlet.getCustomAttributesDisplayClasses()) {
    CustomAttributesDisplay customAttributesDisplayInstance=(CustomAttributesDisplay)newInstance(CustomAttributesDisplay.class,customAttributesDisplayClass);
    customAttributesDisplayInstance.setClassNameId(PortalUtil.getClassNameId(customAttributesDisplayInstance.getClassName()));
    customAttributesDisplayInstance.setPortletId(portlet.getPortletId());
    customAttributesDisplayInstances.add(customAttributesDisplayInstance);
  }
  DDMDisplay ddmDisplayInstance=newDDMDisplay(portlet);
  if (ddmDisplayInstance != null) {
    DDMDisplayRegistryUtil.register(ddmDisplayInstance);
  }
  PermissionPropagator permissionPropagatorInstance=newPermissionPropagator(portlet);
  List<TrashHandler> trashHandlerInstances=new ArrayList<TrashHandler>();
  for (  String trashHandlerClass : portlet.getTrashHandlerClasses()) {
    TrashHandler trashHandlerInstance=(TrashHandler)newInstance(TrashHandler.class,trashHandlerClass);
    trashHandlerInstances.add(trashHandlerInstance);
    TrashHandlerRegistryUtil.register(trashHandlerInstance);
  }
  List<WorkflowHandler> workflowHandlerInstances=new ArrayList<WorkflowHandler>();
  for (  String workflowHandlerClass : portlet.getWorkflowHandlerClasses()) {
    WorkflowHandler workflowHandlerInstance=(WorkflowHandler)newInstance(WorkflowHandler.class,workflowHandlerClass);
    workflowHandlerInstances.add(workflowHandlerInstance);
    WorkflowHandlerRegistryUtil.register(workflowHandlerInstance);
  }
  PreferencesValidator preferencesValidatorInstance=null;
  if (Validator.isNotNull(portlet.getPreferencesValidator())) {
    preferencesValidatorInstance=(PreferencesValidator)newInstance(PreferencesValidator.class,portlet.getPreferencesValidator());
    try {
      if (PropsValues.PREFERENCE_VALIDATE_ON_STARTUP) {
        preferencesValidatorInstance.validate(PortletPreferencesFactoryUtil.fromDefaultXML(portlet.getDefaultPreferences()));
      }
    }
 catch (    Exception e) {
      _log.warn("Portlet with the name " + portlet.getPortletId() + " does not have valid default preferences");
    }
  }
  Map<String,ResourceBundle> resourceBundles=null;
  String resourceBundle=portlet.getResourceBundle();
  if (Validator.isNotNull(resourceBundle) && !resourceBundle.equals(StrutsResourceBundle.class.getName())) {
    resourceBundles=new HashMap<String,ResourceBundle>();
    initResourceBundle(resourceBundles,portlet,null);
    initResourceBundle(resourceBundles,portlet,LocaleUtil.getDefault());
    Set<String> supportedLocales=portlet.getSupportedLocales();
    if (supportedLocales.isEmpty()) {
      supportedLocales=SetUtil.fromArray(PropsValues.LOCALES);
    }
    for (    String supportedLocale : supportedLocales) {
      Locale locale=LocaleUtil.fromLanguageId(supportedLocale);
      initResourceBundle(resourceBundles,portlet,locale);
    }
  }
  PortletBag portletBag=new PortletBagImpl(portlet.getPortletId(),_servletContext,portletInstance,configurationActionInstance,indexerInstances,openSearchInstance,friendlyURLMapperInstance,urlEncoderInstance,portletDataHandlerInstance,stagedModelDataHandlerInstances,templateHandlerInstance,portletLayoutListenerInstance,pollerProcessorInstance,popMessageListenerInstance,socialActivityInterpreterInstances,socialRequestInterpreterInstance,userNotificationHandlerInstances,webDAVStorageInstance,xmlRpcMethodInstance,controlPanelEntryInstance,assetRendererFactoryInstances,atomCollectionAdapterInstances,customAttributesDisplayInstances,permissionPropagatorInstance,trashHandlerInstances,workflowHandlerInstances,preferencesValidatorInstance,resourceBundles);
  PortletBagPool.put(portlet.getRootPortletId(),portletBag);
  initSchedulers(portlet);
  try {
    PortletInstanceFactoryUtil.create(portlet,_servletContext);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  return portletBag;
}
