{
  if (!InlineSQLHelperUtil.isEnabled(groupId)) {
    return findByG_F(groupId,folderId,start,end,orderByComparator);
  }
  Session session=null;
  try {
    session=openSession();
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(4 + (orderByComparator.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(4);
    }
    query.append(_FILTER_SQL_SELECT_IGIMAGE_WHERE);
    query.append(_FINDER_COLUMN_G_F_GROUPID_2);
    query.append(_FINDER_COLUMN_G_F_FOLDERID_2);
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      query.append(IGImageModelImpl.ORDER_BY_JPQL);
    }
    String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),IGImage.class.getName(),_FILTER_COLUMN_IMAGEID,_FILTER_COLUMN_USERID,groupId);
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity(_FILTER_ENTITY_ALIAS,IGImageImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    qPos.add(folderId);
    return (List<IGImage>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
