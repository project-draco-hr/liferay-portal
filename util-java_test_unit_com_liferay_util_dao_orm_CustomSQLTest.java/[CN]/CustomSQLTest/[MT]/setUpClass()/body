{
  Field paclField=ReflectionUtil.getDeclaredField(DataAccess.class,"_pacl");
  _pacl=(DataAccess.PACL)paclField.get(null);
  paclField.set(null,ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class<?>[]{DataAccess.PACL.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      String name=method.getName();
      if (name.equals("getDataSource")) {
        return ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class<?>[]{DataSource.class},new InvocationHandler(){
          @Override public Object invoke(          Object proxy,          Method method,          Object[] args) throws Throwable {
            return null;
          }
        }
);
      }
      return "test";
    }
  }
));
  Field portalField=ReflectionUtil.getDeclaredField(PortalUtil.class,"_portal");
  _portal=(Portal)portalField.get(null);
  portalField.set(null,ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class<?>[]{Portal.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      return "test";
    }
  }
));
  Field propsField=ReflectionUtil.getDeclaredField(PropsUtil.class,"_props");
  _props=(Props)propsField.get(null);
  propsField.set(null,ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class<?>[]{Props.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      return "test";
    }
  }
));
}
