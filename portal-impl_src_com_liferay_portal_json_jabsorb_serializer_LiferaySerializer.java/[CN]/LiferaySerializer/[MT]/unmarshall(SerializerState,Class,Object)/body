{
  JSONObject jsonObject=(JSONObject)object;
  String javaClassName=null;
  try {
    javaClassName=jsonObject.getString("javaClass");
  }
 catch (  Exception e) {
    throw new UnmarshallException("Unable to get javaClass",e);
  }
  if (javaClassName == null) {
    throw new UnmarshallException("javaClass is undefined");
  }
  Class<?> javaClass=null;
  Object javaClassInstance=null;
  try {
    javaClass=Class.forName(javaClassName);
    javaClassInstance=javaClass.newInstance();
  }
 catch (  Exception e) {
    throw new UnmarshallException("Unable to load javaClass " + javaClassName,e);
  }
  JSONObject serializableJSONObject=null;
  try {
    serializableJSONObject=jsonObject.getJSONObject("serializable");
  }
 catch (  Exception e) {
    throw new UnmarshallException("Unable to get serializable",e);
  }
  if (serializableJSONObject == null) {
    throw new UnmarshallException("serializable is undefined");
  }
  serializerState.setSerialized(object,javaClassInstance);
  String fieldName=null;
  try {
    Set<String> processedFieldNames=new HashSet<String>();
    while (javaClass != null) {
      Field[] fields=javaClass.getDeclaredFields();
      for (      Field field : fields) {
        fieldName=field.getName();
        if (processedFieldNames.contains(fieldName)) {
          continue;
        }
        processedFieldNames.add(fieldName);
        int modifiers=field.getModifiers();
        if (((modifiers & Modifier.FINAL) == Modifier.FINAL) || ((modifiers & Modifier.STATIC) == Modifier.STATIC) || ((modifiers & Modifier.TRANSIENT) == Modifier.TRANSIENT)) {
          continue;
        }
        if (!field.isAccessible()) {
          field.setAccessible(true);
        }
        if (fieldName.startsWith("_")) {
          fieldName=fieldName.substring(1);
        }
        Object value=null;
        try {
          value=ser.unmarshall(serializerState,null,serializableJSONObject.get(fieldName));
        }
 catch (        Exception e) {
        }
        if (value != null) {
          Class<?> type=field.getType();
          try {
            if (type.isArray() && type.getComponentType().isPrimitive()) {
              if (type.isAssignableFrom(boolean[].class)) {
                value=ArrayUtil.toArray((Boolean[])value);
              }
 else               if (type.isAssignableFrom(byte[].class)) {
                value=ArrayUtil.toArray((Byte[])value);
              }
 else               if (type.isAssignableFrom(char[].class)) {
                value=ArrayUtil.toArray((Character[])value);
              }
 else               if (type.isAssignableFrom(short[].class)) {
                value=ArrayUtil.toArray((Short[])value);
              }
 else               if (type.isAssignableFrom(int[].class)) {
                value=ArrayUtil.toArray((Integer[])value);
              }
 else               if (type.isAssignableFrom(long[].class)) {
                value=ArrayUtil.toArray((Long[])value);
              }
 else               if (type.isAssignableFrom(float[].class)) {
                value=ArrayUtil.toArray((Float[])value);
              }
 else               if (type.isAssignableFrom(double[].class)) {
                value=ArrayUtil.toArray((Double[])value);
              }
            }
            field.set(javaClassInstance,value);
          }
 catch (          Exception e) {
            _log.error(e,e);
          }
        }
      }
      javaClass=javaClass.getSuperclass();
    }
  }
 catch (  Exception e) {
    throw new UnmarshallException("Unable to match field " + fieldName,e);
  }
  return javaClassInstance;
}
