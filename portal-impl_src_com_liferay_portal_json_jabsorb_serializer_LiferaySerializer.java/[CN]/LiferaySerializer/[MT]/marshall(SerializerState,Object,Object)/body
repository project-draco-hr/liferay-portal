{
  JSONObject jsonObject=new JSONObject();
  Class<?> javaClass=object.getClass();
  if (ser.getMarshallClassHints()) {
    try {
      jsonObject.put("javaClass",javaClass.getName());
    }
 catch (    Exception e) {
      throw new MarshallException("Unable to put javaClass",e);
    }
  }
  JSONObject serializableJSONObject=new JSONObject();
  try {
    jsonObject.put("serializable",serializableJSONObject);
    serializerState.push(object,serializableJSONObject,"serializable");
  }
 catch (  Exception e) {
    throw new MarshallException("Unable to put serializable",e);
  }
  String fieldName=null;
  try {
    Set<String> processedFieldNames=new HashSet<>();
    while (javaClass != null) {
      Field[] declaredFields=javaClass.getDeclaredFields();
      for (      Field field : declaredFields) {
        fieldName=field.getName();
        if (processedFieldNames.contains(fieldName)) {
          continue;
        }
        processedFieldNames.add(fieldName);
        int modifiers=field.getModifiers();
        if (((modifiers & Modifier.STATIC) == Modifier.STATIC) || ((modifiers & Modifier.TRANSIENT) == Modifier.TRANSIENT)) {
          continue;
        }
        if (!field.isAccessible()) {
          field.setAccessible(true);
        }
        if (fieldName.startsWith("_")) {
          fieldName=fieldName.substring(1);
        }
        Object fieldObject=ser.marshall(serializerState,serializableJSONObject,field.get(object),fieldName);
        if (JSONSerializer.CIRC_REF_OR_DUPLICATE != fieldObject) {
          serializableJSONObject.put(fieldName,fieldObject);
        }
 else         if (!serializableJSONObject.has(fieldName)) {
          serializableJSONObject.put(fieldName,field.get(object));
        }
      }
      javaClass=javaClass.getSuperclass();
    }
  }
 catch (  Exception e) {
    throw new MarshallException("Unable to match field " + fieldName,e);
  }
 finally {
    serializerState.pop();
  }
  return jsonObject;
}
