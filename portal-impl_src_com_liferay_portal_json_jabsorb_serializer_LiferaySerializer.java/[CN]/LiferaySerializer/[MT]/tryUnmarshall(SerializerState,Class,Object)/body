{
  JSONObject jsonObject=(JSONObject)object;
  String javaClassName=null;
  try {
    javaClassName=jsonObject.getString("javaClass");
  }
 catch (  Exception e) {
    throw new UnmarshallException("Unable to get javaClass",e);
  }
  if (javaClassName == null) {
    throw new UnmarshallException("javaClass is undefined");
  }
  try {
    Class.forName(javaClassName);
  }
 catch (  Exception e) {
    throw new UnmarshallException("Unable to load javaClass " + javaClassName,e);
  }
  JSONObject serializableJSONObject=null;
  try {
    serializableJSONObject=jsonObject.getJSONObject("serializable");
  }
 catch (  Exception e) {
    throw new UnmarshallException("Unable to get serializable",e);
  }
  if (serializableJSONObject == null) {
    throw new UnmarshallException("serializable is undefined");
  }
  ObjectMatch objectMatch=new ObjectMatch(-1);
  serializerState.setSerialized(object,objectMatch);
  String fieldName=null;
  try {
    Iterator<?> iterator=serializableJSONObject.keys();
    while (iterator.hasNext()) {
      fieldName=(String)iterator.next();
      ObjectMatch fieldObjectMatch=ser.tryUnmarshall(serializerState,null,serializableJSONObject.get(fieldName));
      ObjectMatch maxFieldObjectMatch=fieldObjectMatch.max(objectMatch);
      objectMatch.setMismatch(maxFieldObjectMatch.getMismatch());
    }
  }
 catch (  Exception e) {
    throw new UnmarshallException("Unable to match field " + fieldName,e);
  }
  return objectMatch;
}
