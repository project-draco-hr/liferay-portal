{
  Set<Key> keySet=_concurrentMap.keySet();
  Assert.assertSame(keySet,_concurrentMap.keySet());
  Assert.assertTrue(keySet.isEmpty());
  Assert.assertFalse(keySet.contains(_testKey));
  _assertEventQueue(Event.MAP_KEY_FOR_QUERY);
  Assert.assertFalse(keySet.remove(_testKey));
  _assertEventQueue(Event.MAP_KEY_FOR_QUERY);
  Assert.assertNull(_concurrentMap.put(_testKey,_testValue));
  _assertEventQueue(Event.MAP_KEY,Event.MAP_VALUE);
  Assert.assertEquals(1,keySet.size());
  Assert.assertTrue(keySet.contains(_testKey));
  _assertEventQueue(Event.MAP_KEY_FOR_QUERY);
  Assert.assertTrue(keySet.remove(_testKey));
  _assertEventQueue(Event.MAP_KEY_FOR_QUERY,Event.UNMAP_VALUE);
  Assert.assertNull(_concurrentMap.put(_testKey,_testValue));
  _assertEventQueue(Event.MAP_KEY,Event.MAP_VALUE);
  Assert.assertEquals(1,keySet.size());
  Assert.assertEquals(SetUtil.fromArray(new Key[]{_testKey}),keySet);
  _assertEventQueue(Event.UNMAP_KEY_FOR_QUERY);
  Iterator<Key> iterator=keySet.iterator();
  Assert.assertTrue(iterator.hasNext());
  Key key=iterator.next();
  _assertEventQueue(Event.UNMAP_KEY_FOR_QUERY);
  Assert.assertEquals(_testKey,key);
  Assert.assertFalse(iterator.hasNext());
  Assert.assertTrue(keySet.contains(key));
  _assertEventQueue(Event.MAP_KEY_FOR_QUERY);
  iterator.remove();
  Assert.assertTrue(keySet.isEmpty());
  Assert.assertFalse(keySet.contains(key));
  _assertEventQueue(Event.MAP_KEY_FOR_QUERY);
  Assert.assertNull(_concurrentMap.put(_testKey,_testValue));
  _assertEventQueue(Event.MAP_KEY,Event.MAP_VALUE);
  Assert.assertEquals(1,keySet.size());
  keySet.clear();
  Assert.assertTrue(_concurrentMap.isEmpty());
}
