{
synchronized (IndexWriter.class) {
    shortDescription=Html.stripHtml(shortDescription);
    longDescription=Html.stripHtml(longDescription);
    String content=name + " " + author+ " "+ shortDescription+ " "+ longDescription;
    String pluginId=repositoryURL + StringPool.SLASH + moduleId;
    IndexWriter writer=_getWriter();
    Document doc=new Document();
    doc.add(LuceneFields.getKeyword(LuceneFields.UID,LuceneFields.getUID(PORTLET_ID,pluginId)));
    doc.add(LuceneFields.getKeyword(LuceneFields.PORTLET_ID,PORTLET_ID));
    doc.add(LuceneFields.getText(LuceneFields.TITLE,name));
    doc.add(LuceneFields.getText(LuceneFields.CONTENT,content));
    doc.add(LuceneFields.getDate(LuceneFields.MODIFIED));
    doc.add(LuceneFields.getKeyword("moduleId",moduleId));
    doc.add(LuceneFields.getKeyword("version",version));
    doc.add(LuceneFields.getKeyword("type",type));
    doc.add(LuceneFields.getKeyword("shortDescription",shortDescription));
    doc.add(LuceneFields.getKeyword("repositoryURL",repositoryURL));
    StringBuffer sb=new StringBuffer();
    Iterator itr=tags.iterator();
    while (itr.hasNext()) {
      String tag=(String)itr.next();
      doc.add(LuceneFields.getKeyword("tag",tag));
      sb.append(tag);
      if (itr.hasNext()) {
        sb.append(StringPool.COMMA + StringPool.SPACE);
      }
    }
    doc.add(LuceneFields.getKeyword("tags",sb.toString()));
    boolean osiLicense=false;
    itr=licenses.iterator();
    while (itr.hasNext()) {
      License license=(License)itr.next();
      doc.add(LuceneFields.getKeyword("license",license.getName()));
      if (license.isOsiApproved()) {
        osiLicense=true;
      }
    }
    doc.add(LuceneFields.getKeyword("osi-approved-license",String.valueOf(osiLicense)));
    writer.addDocument(doc);
    LuceneUtil.write(writer);
  }
}
