{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  if ((status == WorkflowConstants.STATUS_APPROVED) && (article.getClassNameId() == JournalArticleConstants.CLASSNAME_ID_DEFAULT) && (article.getDisplayDate() != null)&& now.before(article.getDisplayDate())) {
    status=WorkflowConstants.STATUS_SCHEDULED;
  }
  int oldStatus=article.getStatus();
  if (status == WorkflowConstants.STATUS_APPROVED) {
    Date expirationDate=article.getExpirationDate();
    if ((expirationDate != null) && expirationDate.before(now)) {
      article.setExpirationDate(null);
    }
  }
  if (status == WorkflowConstants.STATUS_EXPIRED) {
    article.setExpirationDate(now);
  }
  article.setStatus(status);
  article.setStatusByUserId(user.getUserId());
  article.setStatusByUserName(user.getFullName());
  article.setStatusDate(serviceContext.getModifiedDate(now));
  journalArticlePersistence.update(article);
  if ((status == WorkflowConstants.STATUS_APPROVED) && (article.getExpirationDate() != null) && (JournalServiceConfigurationValues.JOURNAL_ARTICLE_EXPIRE_ALL_VERSIONS)&& !ExportImportThreadLocal.isImportInProcess()) {
    List<JournalArticle> currentArticles=journalArticlePersistence.findByG_A(article.getGroupId(),article.getArticleId(),QueryUtil.ALL_POS,QueryUtil.ALL_POS,new ArticleVersionComparator(true));
    for (    JournalArticle currentArticle : currentArticles) {
      currentArticle.setExpirationDate(article.getExpirationDate());
      journalArticlePersistence.update(currentArticle);
    }
  }
  if (hasModifiedLatestApprovedVersion(article.getGroupId(),article.getArticleId(),article.getVersion())) {
    if (status == WorkflowConstants.STATUS_APPROVED) {
      updateUrlTitles(article.getGroupId(),article.getArticleId(),article.getUrlTitle());
      if ((oldStatus != WorkflowConstants.STATUS_APPROVED) && (article.getVersion() != JournalArticleConstants.VERSION_DEFAULT)) {
        AssetEntry draftAssetEntry=assetEntryLocalService.fetchEntry(JournalArticle.class.getName(),article.getPrimaryKey());
        if (draftAssetEntry != null) {
          long[] assetCategoryIds=draftAssetEntry.getCategoryIds();
          String[] assetTagNames=draftAssetEntry.getTagNames();
          List<AssetLink> assetLinks=assetLinkLocalService.getDirectLinks(draftAssetEntry.getEntryId(),AssetLinkConstants.TYPE_RELATED);
          long[] assetLinkEntryIds=ListUtil.toLongArray(assetLinks,AssetLink.ENTRY_ID2_ACCESSOR);
          AssetEntry assetEntry=assetEntryLocalService.updateEntry(userId,article.getGroupId(),article.getCreateDate(),article.getModifiedDate(),JournalArticle.class.getName(),article.getResourcePrimKey(),article.getUuid(),getClassTypeId(article),assetCategoryIds,assetTagNames,false,null,null,null,ContentTypes.TEXT_HTML,article.getTitle(),article.getDescription(),article.getDescription(),null,article.getLayoutUuid(),0,0,draftAssetEntry.getPriority());
          assetLinkLocalService.updateLinks(userId,assetEntry.getEntryId(),assetLinkEntryIds,AssetLinkConstants.TYPE_RELATED);
          assetEntryLocalService.deleteEntry(draftAssetEntry);
        }
      }
      if (article.getClassNameId() == JournalArticleConstants.CLASSNAME_ID_DEFAULT) {
        assetEntryLocalService.updateEntry(JournalArticle.class.getName(),article.getResourcePrimKey(),article.getDisplayDate(),article.getExpirationDate(),true);
      }
      JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
      extraDataJSONObject.put("title",article.getTitle());
      if (serviceContext.isCommandUpdate()) {
        SocialActivityManagerUtil.addActivity(user.getUserId(),article,JournalActivityKeys.UPDATE_ARTICLE,extraDataJSONObject.toString(),0);
      }
 else {
        SocialActivityManagerUtil.addUniqueActivity(user.getUserId(),article,JournalActivityKeys.ADD_ARTICLE,extraDataJSONObject.toString(),0);
      }
    }
 else     if (oldStatus == WorkflowConstants.STATUS_APPROVED) {
      updatePreviousApprovedArticle(article);
    }
  }
  if ((article.getClassNameId() == JournalArticleConstants.CLASSNAME_ID_DEFAULT) && (oldStatus != WorkflowConstants.STATUS_IN_TRASH) && (status != WorkflowConstants.STATUS_IN_TRASH)) {
    if ((oldStatus == WorkflowConstants.STATUS_PENDING) && ((status == WorkflowConstants.STATUS_APPROVED) || (status == WorkflowConstants.STATUS_DENIED))) {
      String msg="granted";
      if (status == WorkflowConstants.STATUS_DENIED) {
        msg="denied";
      }
      try {
        PortletPreferences preferences=ServiceContextUtil.getPortletPreferences(serviceContext);
        articleURL=buildArticleURL(articleURL,article.getGroupId(),article.getFolderId(),article.getArticleId());
        sendEmail(article,articleURL,preferences,msg,serviceContext);
      }
 catch (      Exception e) {
        _log.error("Unable to send email to notify the change of status " + " to " + msg + " for article "+ article.getId()+ ": "+ e.getMessage());
      }
    }
    String action="update";
    if (article.getVersion() == 1.0) {
      action="add";
    }
    notifySubscribers(user.getUserId(),article,(String)workflowContext.get(WorkflowConstants.CONTEXT_URL),action,serviceContext);
  }
  return article;
}
