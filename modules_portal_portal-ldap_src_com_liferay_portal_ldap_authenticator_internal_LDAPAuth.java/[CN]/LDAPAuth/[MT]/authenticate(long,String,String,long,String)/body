{
  LDAPAuthConfiguration ldapAuthConfiguration=_ldapAuthConfigurationProvider.getConfiguration(companyId);
  if (ldapAuthConfiguration.enabled()) {
    if (_log.isDebugEnabled()) {
      _log.debug("Authenticator is not enabled");
    }
    return SUCCESS;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Authenticator is enabled");
  }
  int preferredLDAPServerResult=authenticateAgainstPreferredLDAPServer(companyId,emailAddress,screenName,userId,password);
  if (preferredLDAPServerResult == SUCCESS) {
    if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.LDAP_IMPORT_USER_PASSWORD_ENABLED)) {
      return preferredLDAPServerResult;
    }
    return Authenticator.SKIP_LIFERAY_CHECK;
  }
  long[] ldapServerIds=StringUtil.split(PrefsPropsUtil.getString(companyId,"ldap.server.ids"),0L);
  for (  long ldapServerId : ldapServerIds) {
    int result=authenticate(ldapServerId,companyId,emailAddress,screenName,userId,password);
    if (result == SUCCESS) {
      if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.LDAP_IMPORT_USER_PASSWORD_ENABLED)) {
        return result;
      }
      return Authenticator.SKIP_LIFERAY_CHECK;
    }
  }
  for (int ldapServerId=0; ; ldapServerId++) {
    String postfix=LDAPSettingsUtil.getPropertyPostfix(ldapServerId);
    String providerUrl=PrefsPropsUtil.getString(companyId,PropsKeys.LDAP_BASE_PROVIDER_URL + postfix);
    if (Validator.isNull(providerUrl)) {
      break;
    }
    int result=authenticate(ldapServerId,companyId,emailAddress,screenName,userId,password);
    if (result == SUCCESS) {
      if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.LDAP_IMPORT_USER_PASSWORD_ENABLED)) {
        return result;
      }
      return Authenticator.SKIP_LIFERAY_CHECK;
    }
  }
  return authenticateRequired(companyId,userId,emailAddress,screenName,true,FAILURE);
}
