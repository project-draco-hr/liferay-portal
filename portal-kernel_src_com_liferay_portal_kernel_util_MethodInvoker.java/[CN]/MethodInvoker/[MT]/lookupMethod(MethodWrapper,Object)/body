{
  Object[] methodAndArgs=new Object[2];
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  String className=methodWrapper.getClassName();
  String methodName=methodWrapper.getMethodName();
  Object[] args=methodWrapper.getArgs();
  List<Class<?>> parameterTypes=new ArrayList<Class<?>>();
  for (int i=0; i < args.length; i++) {
    if (args[i] == null) {
      _log.error("Cannot invoke " + className + " "+ methodName+ " on position "+ i+ " because it is null");
    }
    Class<?> argClass=args[i].getClass();
    if (ClassUtil.isSubclass(argClass,PrimitiveWrapper.class)) {
      parameterTypes.add((Class<?>)argClass.getField("TYPE").get(args[i]));
      MethodKey methodKey=new MethodKey(argClass.getName(),"getValue",null);
      Method method=MethodCache.get(methodKey);
      args[i]=method.invoke(args[i],(Object[])null);
    }
 else     if (args[i] instanceof NullWrapper) {
      NullWrapper nullWrapper=(NullWrapper)args[i];
      String wrappedClassName=nullWrapper.getClassName();
      if (wrappedClassName.startsWith(StringPool.OPEN_BRACKET) && wrappedClassName.endsWith(StringPool.SEMICOLON)) {
        wrappedClassName=wrappedClassName.substring(2,wrappedClassName.length() - 1);
        Class<?> wrappedClass=contextClassLoader.loadClass(wrappedClassName);
        parameterTypes.add(Array.newInstance(wrappedClass,0).getClass());
      }
 else {
        Class<?> wrappedClass=contextClassLoader.loadClass(wrappedClassName);
        parameterTypes.add(wrappedClass);
      }
      args[i]=null;
    }
 else {
      parameterTypes.add(argClass);
    }
  }
  Method method=null;
  try {
    MethodKey methodKey=new MethodKey(methodWrapper.getClassName(),methodWrapper.getMethodName(),parameterTypes.toArray(new Class[parameterTypes.size()]));
    method=MethodCache.get(methodKey);
  }
 catch (  NoSuchMethodException nsme) {
    Class<?> classObj=null;
    if (targetObject == null) {
      classObj=contextClassLoader.loadClass(className);
    }
 else {
      classObj=targetObject.getClass();
    }
    Method[] methods=classObj.getMethods();
    for (int i=0; i < methods.length; i++) {
      Class<?>[] methodParameterTypes=methods[i].getParameterTypes();
      if (methods[i].getName().equals(methodName) && methodParameterTypes.length == parameterTypes.size()) {
        boolean correctParams=true;
        for (int j=0; j < parameterTypes.size(); j++) {
          Class<?> a=parameterTypes.get(j);
          Class<?> b=methodParameterTypes[j];
          if (!ClassUtil.isSubclass(a,b)) {
            correctParams=false;
            break;
          }
        }
        if (correctParams) {
          method=methods[i];
          break;
        }
      }
    }
    if (method == null) {
      throw nsme;
    }
  }
  methodAndArgs[0]=method;
  methodAndArgs[1]=args;
  return methodAndArgs;
}
