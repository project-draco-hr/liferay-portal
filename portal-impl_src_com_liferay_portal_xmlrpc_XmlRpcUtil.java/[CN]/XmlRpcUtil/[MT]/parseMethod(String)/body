{
  XMLStreamReader xmlStreamReader=null;
  String methodName=null;
  List<Object> args=new ArrayList<Object>();
  try {
    XMLInputFactory xmlInputFactory=XMLInputFactory.newInstance();
    xmlStreamReader=xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml));
    xmlStreamReader.nextTag();
    xmlStreamReader.nextTag();
    xmlStreamReader.next();
    methodName=xmlStreamReader.getText();
    xmlStreamReader.nextTag();
    String name=xmlStreamReader.getLocalName();
    while (name != "methodCall") {
      xmlStreamReader.nextTag();
      name=xmlStreamReader.getLocalName();
      if (name.equals("param")) {
        xmlStreamReader.nextTag();
        name=xmlStreamReader.getLocalName();
        int event=xmlStreamReader.next();
        if (event == XMLStreamConstants.START_ELEMENT) {
          name=xmlStreamReader.getLocalName();
          xmlStreamReader.next();
          String text=xmlStreamReader.getText();
          if (name.equals("string")) {
            args.add(text);
          }
 else           if (name.equals("int") || name.equals("i4")) {
            args.add(Integer.parseInt(text));
          }
 else           if (name.equals("double")) {
            args.add(Double.parseDouble(text));
          }
 else           if (name.equals("boolean")) {
            args.add(Boolean.parseBoolean(text));
          }
 else {
            throw new IOException("XML-RPC not implemented for " + name);
          }
          xmlStreamReader.nextTag();
          xmlStreamReader.nextTag();
          xmlStreamReader.nextTag();
        }
 else {
          String text=xmlStreamReader.getText();
          args.add(text);
          xmlStreamReader.nextTag();
          xmlStreamReader.nextTag();
        }
        name=xmlStreamReader.getLocalName();
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
 finally {
    if (xmlStreamReader != null) {
      try {
        xmlStreamReader.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return new Tuple(methodName,args.toArray());
}
