{
  if (signatures == null) {
    return null;
  }
  int leftBracketIndex=signatures.indexOf(CharPool.LESS_THAN);
  if (leftBracketIndex == -1) {
    return null;
  }
  int rightBracketIndex=signatures.lastIndexOf(CharPool.GREATER_THAN);
  if (rightBracketIndex == -1) {
    return null;
  }
  String generics=signatures.substring(leftBracketIndex + 1,rightBracketIndex);
  List<Class<?>> genericTypeslist=new ArrayList<Class<?>>();
  int level=0;
  int index=0;
  while (index < generics.length()) {
    char c=generics.charAt(index);
    index++;
    if (c == CharPool.LESS_THAN) {
      level++;
    }
 else     if (c == CharPool.GREATER_THAN) {
      level--;
    }
 else     if (level == 0) {
      String extractedTopLevelGenericName=null;
      if (c == 'L') {
        int endIndex=generics.indexOf(StringPool.SEMICOLON,index) + 1;
        int bracketIndex=generics.indexOf(StringPool.LESS_THAN,index);
        if ((bracketIndex != -1) && (bracketIndex < endIndex)) {
          endIndex=bracketIndex;
          extractedTopLevelGenericName=_getGenericName(generics.substring(index - 1,endIndex));
          extractedTopLevelGenericName=extractedTopLevelGenericName.concat(StringPool.SEMICOLON);
        }
 else {
          extractedTopLevelGenericName=_getGenericName(generics.substring(index - 1,endIndex));
        }
        index=endIndex;
      }
 else       if (c == '[') {
        char nextChar=generics.charAt(index);
        if (_isPrimitive(nextChar)) {
          extractedTopLevelGenericName=_getGenericName(generics.substring(index - 1,index + 1));
          index++;
        }
 else         if (nextChar == 'L') {
          int endIndex=generics.indexOf(StringPool.SEMICOLON,index) + 1;
          extractedTopLevelGenericName=_getGenericName(generics.substring(index - 1,endIndex));
          index=endIndex;
        }
      }
      if (Validator.isNotNull(extractedTopLevelGenericName)) {
        genericTypeslist.add(_getGenericType(extractedTopLevelGenericName));
      }
    }
  }
  if (genericTypeslist.isEmpty()) {
    return null;
  }
  return genericTypeslist.toArray(new Class<?>[genericTypeslist.size()]);
}
