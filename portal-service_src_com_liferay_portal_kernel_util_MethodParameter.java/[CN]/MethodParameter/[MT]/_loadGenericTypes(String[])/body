{
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  Class<?>[] types=new Class<?>[signatures.length];
  for (int i=0; i < signatures.length; i++) {
    String className=signatures[i];
    char c=className.charAt(0);
    if (c == 'B') {
      types[i]=byte.class;
    }
 else     if (c == 'C') {
      types[i]=char.class;
    }
 else     if (c == 'D') {
      types[i]=double.class;
    }
 else     if (c == 'F') {
      types[i]=float.class;
    }
 else     if (c == 'I') {
      types[i]=int.class;
    }
 else     if (c == 'J') {
      types[i]=long.class;
    }
 else     if (c == 'L') {
      className=className.substring(1,className.length() - 1);
      className=className.replace(CharPool.SLASH,CharPool.PERIOD);
      types[i]=contextClassLoader.loadClass(className);
    }
 else     if (c == 'S') {
      types[i]=short.class;
    }
 else     if (c == 'Z') {
      types[i]=boolean.class;
    }
 else     if (c == 'V') {
      types[i]=void.class;
    }
 else     if (c == CharPool.OPEN_BRACKET) {
      className=className.replace(CharPool.SLASH,CharPool.PERIOD);
      try {
        types[i]=contextClassLoader.loadClass(className);
      }
 catch (      ClassNotFoundException cnfe) {
        types[i]=Class.forName(className);
      }
    }
 else {
      throw new ClassNotFoundException(className);
    }
  }
  return types;
}
