{
  return new ServiceTrackerCustomizer<S,ServiceWrapper<S>>(){
    @Override public ServiceWrapper<S> addingService(    final ServiceReference<S> reference){
      final S service=bundleContext.getService(reference);
      if (service == null) {
        return null;
      }
      try {
        final Map<String,Object> properties=Collections.unmodifiableMap(createPropertyMap(reference));
        return new ServiceWrapper<S>(){
          @Override public Map<String,Object> getProperties(){
            return properties;
          }
          @Override public S getService(){
            return service;
          }
        }
;
      }
 catch (      Throwable t) {
        bundleContext.ungetService(reference);
        throw t;
      }
    }
    @Override public void modifiedService(    ServiceReference<S> reference,    ServiceWrapper<S> serviceWrapper){
    }
    @Override public void removedService(    ServiceReference<S> reference,    ServiceWrapper<S> serviceWrapper){
      bundleContext.ungetService(reference);
    }
  }
;
}
