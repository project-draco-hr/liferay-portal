{
  if (resourcePrimKeies == null) {
    resourcePrimKeies=new long[0];
  }
 else   if (resourcePrimKeies.length > 1) {
    resourcePrimKeies=ArrayUtil.unique(resourcePrimKeies);
    Arrays.sort(resourcePrimKeies);
  }
  if (resourcePrimKeies.length == 1) {
    return findByR_L(resourcePrimKeies[0],latest,start,end,orderByComparator);
  }
  boolean pagination=true;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    pagination=false;
    finderArgs=new Object[]{StringUtil.merge(resourcePrimKeies),latest};
  }
 else {
    finderArgs=new Object[]{StringUtil.merge(resourcePrimKeies),latest,start,end,orderByComparator};
  }
  List<KBArticle> list=null;
  if (retrieveFromCache) {
    list=(List<KBArticle>)finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_R_L,finderArgs,this);
    if ((list != null) && !list.isEmpty()) {
      for (      KBArticle kbArticle : list) {
        if (!ArrayUtil.contains(resourcePrimKeies,kbArticle.getResourcePrimKey()) || (latest != kbArticle.getLatest())) {
          list=null;
          break;
        }
      }
    }
  }
  if (list == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_SELECT_KBARTICLE_WHERE);
    if (resourcePrimKeies.length > 0) {
      query.append(StringPool.OPEN_PARENTHESIS);
      query.append(_FINDER_COLUMN_R_L_RESOURCEPRIMKEY_7);
      query.append(StringUtil.merge(resourcePrimKeies));
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(WHERE_AND);
    }
    query.append(_FINDER_COLUMN_R_L_LATEST_2);
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else     if (pagination) {
      query.append(KBArticleModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(latest);
      if (!pagination) {
        list=(List<KBArticle>)QueryUtil.list(q,getDialect(),start,end,false);
        Collections.sort(list);
        list=Collections.unmodifiableList(list);
      }
 else {
        list=(List<KBArticle>)QueryUtil.list(q,getDialect(),start,end);
      }
      cacheResult(list);
      finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_R_L,finderArgs,list);
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_R_L,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return list;
}
