{
  if (resourcePrimKeies == null) {
    resourcePrimKeies=new long[0];
  }
 else   if (resourcePrimKeies.length > 1) {
    resourcePrimKeies=ArrayUtil.unique(resourcePrimKeies);
    Arrays.sort(resourcePrimKeies);
  }
  Object[] finderArgs=new Object[]{StringUtil.merge(resourcePrimKeies),groupId,latest};
  Long count=(Long)finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_R_G_L,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_COUNT_KBARTICLE_WHERE);
    if (resourcePrimKeies.length > 0) {
      query.append(StringPool.OPEN_PARENTHESIS);
      query.append(_FINDER_COLUMN_R_G_L_RESOURCEPRIMKEY_7);
      query.append(StringUtil.merge(resourcePrimKeies));
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(WHERE_AND);
    }
    query.append(_FINDER_COLUMN_R_G_L_GROUPID_2);
    query.append(_FINDER_COLUMN_R_G_L_LATEST_2);
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      qPos.add(latest);
      count=(Long)q.uniqueResult();
      finderCache.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_R_G_L,finderArgs,count);
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_R_G_L,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return count.intValue();
}
