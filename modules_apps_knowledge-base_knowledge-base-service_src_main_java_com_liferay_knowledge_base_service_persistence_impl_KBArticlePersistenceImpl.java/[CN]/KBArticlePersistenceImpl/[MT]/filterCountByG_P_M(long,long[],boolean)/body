{
  if (!InlineSQLHelperUtil.isEnabled(groupId)) {
    return countByG_P_M(groupId,parentResourcePrimKeies,main);
  }
  if (parentResourcePrimKeies == null) {
    parentResourcePrimKeies=new long[0];
  }
 else   if (parentResourcePrimKeies.length > 1) {
    parentResourcePrimKeies=ArrayUtil.unique(parentResourcePrimKeies);
    Arrays.sort(parentResourcePrimKeies);
  }
  StringBundler query=new StringBundler();
  query.append(_FILTER_SQL_COUNT_KBARTICLE_WHERE);
  query.append(_FINDER_COLUMN_G_P_M_GROUPID_2);
  if (parentResourcePrimKeies.length > 0) {
    query.append(StringPool.OPEN_PARENTHESIS);
    query.append(_FINDER_COLUMN_G_P_M_PARENTRESOURCEPRIMKEY_7);
    query.append(StringUtil.merge(parentResourcePrimKeies));
    query.append(StringPool.CLOSE_PARENTHESIS);
    query.append(StringPool.CLOSE_PARENTHESIS);
    query.append(WHERE_AND);
  }
  query.append(_FINDER_COLUMN_G_P_M_MAIN_2);
  query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),KBArticle.class.getName(),_FILTER_ENTITY_TABLE_FILTER_PK_COLUMN,groupId);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,com.liferay.portal.kernel.dao.orm.Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    qPos.add(main);
    Long count=(Long)q.uniqueResult();
    return count.intValue();
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
