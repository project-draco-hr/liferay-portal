{
  final String MN="rewriteURLs";
  if (logger.isLogging(Logger.TRACE_HIGH)) {
    logger.entry(Logger.TRACE_HIGH,MN);
  }
  if (this.urlGenerator == null) {
    if (logger.isLogging(Logger.ERROR)) {
      String message="URLGenerator has not been set for class URLRewriterImpl. URL-Rewriting not possible.";
      logger.text(Logger.ERROR,MN,message);
    }
    return markup;
  }
  StringBuffer resultMarkup=new StringBuffer("");
  int markupIndex=0;
  int rewriteStartPos=-1;
  int rewriteEndPos=-1;
  int currentPos=0;
  String exprType=null;
  while (markupIndex < markup.length()) {
    rewriteStartPos=-1;
    rewriteEndPos=-1;
    rewriteStartPos=markup.indexOf(Constants.REWRITE_START,markupIndex);
    if (!(rewriteStartPos == -1 || (rewriteStartPos + Constants.REWRITE_START.length() - 1) > (markup.length() - 2))) {
      exprType=markup.substring(rewriteStartPos + Constants.REWRITE_START.length() - 1 + 1,rewriteStartPos + Constants.REWRITE_START.length() - 1 + 2);
      if (exprType.equals(Constants.NAMESPACE_START)) {
        rewriteEndPos=rewriteStartPos + Constants.REWRITE_START.length() + Constants.NAMESPACE_START.length() - 1;
      }
 else       if (exprType.equals(Constants.PARAMS_START)) {
        rewriteEndPos=markup.indexOf(Constants.REWRITE_END,markupIndex);
        if (rewriteEndPos != -1) {
          currentPos=rewriteStartPos;
          while ((currentPos != -1) && (currentPos < rewriteEndPos)) {
            rewriteStartPos=currentPos;
            currentPos=markup.indexOf(Constants.REWRITE_START + Constants.PARAMS_START,rewriteStartPos + Constants.REWRITE_START.length() + Constants.PARAMS_START.length());
          }
          rewriteEndPos=rewriteEndPos + Constants.REWRITE_END.length() - 1;
        }
      }
    }
    if ((rewriteStartPos != -1) && (rewriteEndPos != -1)) {
      resultMarkup.append(markup.substring(markupIndex,rewriteStartPos));
      rewrite(resultMarkup,markup.substring(rewriteStartPos,rewriteEndPos + 1));
      markupIndex=rewriteEndPos + 1;
    }
 else {
      resultMarkup.append(markup.substring(markupIndex,markup.length()));
      markupIndex=markup.length();
    }
  }
  if (logger.isLogging(Logger.TRACE_HIGH)) {
    logger.exit(Logger.TRACE_HIGH,MN);
  }
  return resultMarkup.toString();
}
