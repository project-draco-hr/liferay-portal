{
  long[] deleteFolderIds=null;
  long folderId=ParamUtil.getLong(actionRequest,"folderId");
  if (folderId > 0) {
    deleteFolderIds=new long[]{folderId};
  }
 else {
    deleteFolderIds=StringUtil.split(ParamUtil.getString(actionRequest,"folderIds"),0L);
  }
  for (  long deleteFolderId : deleteFolderIds) {
    if (moveToTrash) {
      DLAppServiceUtil.moveFolderToTrash(deleteFolderId);
    }
 else {
      DLAppServiceUtil.deleteFolder(deleteFolderId);
    }
    AssetPublisherUtil.removeRecentFolderId(actionRequest,DLFileEntry.class.getName(),deleteFolderId);
  }
  if (moveToTrash && (deleteFolderIds.length > 0)) {
    HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
    String portletId=(String)request.getAttribute(WebKeys.PORTLET_ID);
    Map<String,String> data=new HashMap<String,String>();
    data.put("trashedFolderIds",StringUtil.merge(deleteFolderIds));
    SessionMessages.add(actionRequest,WebKeys.TRASHED_ENTRIES,data);
    SessionMessages.add(actionRequest,WebKeys.UNDO_TYPE,PortletKeys.DOCUMENT_LIBRARY);
    SessionMessages.add(actionRequest,portletId + SessionMessages.KEY_SUFFIX_DELETE_SUCCESS,Boolean.TRUE);
  }
}
