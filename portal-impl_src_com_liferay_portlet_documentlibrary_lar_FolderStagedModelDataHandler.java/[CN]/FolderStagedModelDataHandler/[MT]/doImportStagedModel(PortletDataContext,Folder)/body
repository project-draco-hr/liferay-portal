{
  long userId=portletDataContext.getUserId(folder.getUserUuid());
  String path=ExportImportPathUtil.getModelPath(portletDataContext,Folder.class.getName(),folder.getFolderId());
  Element folderElement=portletDataContext.getImportDataElement(Folder.class.getSimpleName(),"path",path);
  Element referencesElement=folderElement.element("references");
  if (referencesElement != null) {
    List<Element> referenceElements=referencesElement.elements();
    for (    Element referenceElement : referenceElements) {
      String className=referenceElement.attributeValue("class-name");
      if (!className.equals(Repository.class.getSimpleName())) {
        continue;
      }
      String classPK=referenceElement.attributeValue("class-pk");
      String referencePath=ExportImportPathUtil.getModelPath(portletDataContext,className,GetterUtil.getLong(classPK));
      StagedModel referenceStagedModel=(StagedModel)portletDataContext.getZipEntryAsObject(referencePath);
      StagedModelDataHandlerUtil.importStagedModel(portletDataContext,referenceStagedModel);
    }
  }
  if (folder.getParentFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    String parentFolderPath=ExportImportPathUtil.getModelPath(portletDataContext,Folder.class.getName(),folder.getParentFolderId());
    Folder parentFolder=(Folder)portletDataContext.getZipEntryAsObject(parentFolderPath);
    StagedModelDataHandlerUtil.importStagedModel(portletDataContext,parentFolder);
  }
  Map<Long,Long> folderIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(Folder.class);
  long parentFolderId=MapUtil.getLong(folderIds,folder.getParentFolderId(),folder.getParentFolderId());
  ServiceContext serviceContext=portletDataContext.createServiceContext(folder,DLPortletDataHandler.NAMESPACE);
  serviceContext.setUserId(userId);
  Folder importedFolder=null;
  if (portletDataContext.isDataStrategyMirror()) {
    Folder existingFolder=FolderUtil.fetchByUUID_R(folder.getUuid(),portletDataContext.getScopeGroupId());
    if (existingFolder == null) {
      String name=getFolderName(null,portletDataContext.getScopeGroupId(),parentFolderId,folder.getName(),2);
      serviceContext.setUuid(folder.getUuid());
      importedFolder=DLAppLocalServiceUtil.addFolder(userId,portletDataContext.getScopeGroupId(),parentFolderId,name,folder.getDescription(),serviceContext);
    }
 else {
      String name=getFolderName(folder.getUuid(),portletDataContext.getScopeGroupId(),parentFolderId,folder.getName(),2);
      importedFolder=DLAppLocalServiceUtil.updateFolder(existingFolder.getFolderId(),parentFolderId,name,folder.getDescription(),serviceContext);
    }
  }
 else {
    String name=getFolderName(null,portletDataContext.getScopeGroupId(),parentFolderId,folder.getName(),2);
    importedFolder=DLAppLocalServiceUtil.addFolder(userId,portletDataContext.getScopeGroupId(),parentFolderId,name,folder.getDescription(),serviceContext);
  }
  importFolderFileEntryTypes(portletDataContext,folderElement,folder,serviceContext);
  portletDataContext.importClassedModel(folder,importedFolder,DLPortletDataHandler.NAMESPACE);
  folderIds.put(folder.getFolderId(),importedFolder.getFolderId());
}
