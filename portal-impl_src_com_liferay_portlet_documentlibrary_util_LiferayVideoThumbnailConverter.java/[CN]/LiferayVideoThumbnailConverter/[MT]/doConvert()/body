{
  _inputIContainer=IContainer.make();
  openContainer(_inputIContainer,_inputURL,false);
  long seekTimeStamp=-1;
  if ((_percentage > 0) && (_percentage <= 100)) {
    seekTimeStamp=getSeekTimeStamp(_percentage);
  }
  int inputStreamsCount=_inputIContainer.getNumStreams();
  if (inputStreamsCount < 0) {
    throw new RuntimeException("Input URL does not have any streams");
  }
  IVideoPicture[] inputIVideoPictures=new IVideoPicture[inputStreamsCount];
  IStreamCoder[] inputIStreamCoders=new IStreamCoder[inputStreamsCount];
  for (int i=0; i < inputStreamsCount; i++) {
    IStream inputIStream=_inputIContainer.getStream(i);
    IStreamCoder inputIStreamCoder=inputIStream.getStreamCoder();
    inputIStreamCoders[i]=inputIStreamCoder;
    if (inputIStreamCoder.getCodecType() == ICodec.Type.CODEC_TYPE_VIDEO) {
      inputIVideoPictures[i]=IVideoPicture.make(inputIStreamCoder.getPixelType(),inputIStreamCoder.getWidth(),inputIStreamCoder.getHeight());
    }
    if ((inputIStreamCoder != null) && (inputIStreamCoder.open() < 0)) {
      throw new RuntimeException("Unable to open input coder");
    }
  }
  boolean thumbnailGenerated=false;
  try {
    if (seekTimeStamp != -1) {
      rewind();
      seek(seekTimeStamp);
    }
    thumbnailGenerated=generateThumbnail(inputIStreamCoders,inputIVideoPictures);
  }
 catch (  Exception e) {
  }
  if (!thumbnailGenerated) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to create thumbnail from specified frame. Will " + "generate thumbnail from the beginning.");
    }
    rewind();
    generateThumbnail(inputIStreamCoders,inputIVideoPictures);
  }
}
