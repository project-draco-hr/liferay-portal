{
  Class<ExecutionTestListeners> annotationType=ExecutionTestListeners.class;
  Class<?> declaringClass=ReflectionUtil.findDeclaringClassAnnotation(annotationType,clazz);
  List<Class<? extends ExecutionTestListener>> allListenerClasses=new ArrayList<Class<? extends ExecutionTestListener>>();
  while (declaringClass != null) {
    ExecutionTestListeners executionTestListeners=declaringClass.getAnnotation(annotationType);
    Class<? extends ExecutionTestListener>[] listenerClasses=executionTestListeners.listeners();
    if (!ArrayUtil.isEmpty(listenerClasses)) {
      allListenerClasses.addAll(Arrays.asList(listenerClasses));
    }
    declaringClass=ReflectionUtil.findDeclaringClassAnnotation(annotationType,declaringClass.getSuperclass());
  }
  ExecutionTestListener[] executionTestListeners=new ExecutionTestListener[allListenerClasses.size()];
  for (int i=0; i < executionTestListeners.length; i++) {
    Class<? extends ExecutionTestListener> listenerClass=null;
    try {
      listenerClass=allListenerClasses.get(i);
      executionTestListeners[i]=(ExecutionTestListener)ReflectionUtil.instantiateClass(listenerClass);
    }
 catch (    Exception e) {
      _log.error("Class " + listenerClass + " cannot be instancited. No registered listener");
    }
  }
  return executionTestListeners;
}
