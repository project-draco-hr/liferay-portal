{
  if (_initialized) {
    return;
  }
  PortalUtil portalUtil=new PortalUtil();
  portalUtil.setPortal(new PortalImpl());
  PortalUUIDUtil portalUUIDUtil=new PortalUUIDUtil();
  portalUUIDUtil.setPortalUUID(new PortalUUIDImpl());
  PropsUtil.setProps(new PropsImpl());
  PortalExecutorManagerUtil portalExecutorManagerUtil=new PortalExecutorManagerUtil();
  portalExecutorManagerUtil.setPortalExecutorManager(new MockPortalExecutorManager());
  if (loadSpringXML) {
    Class<?> clazz=getClass();
    ClassLoader classLoader=clazz.getClassLoader();
    String servletContextName=StringUtil.randomId();
    ClassLoaderPool.register(servletContextName,classLoader);
    PortletClassLoaderUtil.setServletContextName(servletContextName);
    try {
      ApplicationContext applicationContext=new FileSystemXmlApplicationContext("portal-impl/test/unit/com/liferay/portal/cluster/" + "test-spring.xml");
      BeanLocator beanLocator=new BeanLocatorImpl(classLoader,applicationContext);
      PortalBeanLocatorUtil.setBeanLocator(beanLocator);
      PortletBeanLocatorUtil.setBeanLocator(SERVLET_CONTEXT_NAME,beanLocator);
    }
  finally {
      PortletClassLoaderUtil.setServletContextName(null);
      ClassLoaderPool.unregister(servletContextName);
    }
  }
  JDKLoggerTestUtil.configureJDKLogger(ClusterBase.class.getName(),Level.FINE);
  _initialized=true;
}
