{
  long pk=ServiceTestUtil.nextLong();
  ShoppingItem newShoppingItem=_persistence.create(pk);
  newShoppingItem.setGroupId(ServiceTestUtil.nextLong());
  newShoppingItem.setCompanyId(ServiceTestUtil.nextLong());
  newShoppingItem.setUserId(ServiceTestUtil.nextLong());
  newShoppingItem.setUserName(ServiceTestUtil.randomString());
  newShoppingItem.setCreateDate(ServiceTestUtil.nextDate());
  newShoppingItem.setModifiedDate(ServiceTestUtil.nextDate());
  newShoppingItem.setCategoryId(ServiceTestUtil.nextLong());
  newShoppingItem.setSku(ServiceTestUtil.randomString());
  newShoppingItem.setName(ServiceTestUtil.randomString());
  newShoppingItem.setDescription(ServiceTestUtil.randomString());
  newShoppingItem.setProperties(ServiceTestUtil.randomString());
  newShoppingItem.setFields(ServiceTestUtil.randomBoolean());
  newShoppingItem.setFieldsQuantities(ServiceTestUtil.randomString());
  newShoppingItem.setMinQuantity(ServiceTestUtil.nextInt());
  newShoppingItem.setMaxQuantity(ServiceTestUtil.nextInt());
  newShoppingItem.setPrice(ServiceTestUtil.nextDouble());
  newShoppingItem.setDiscount(ServiceTestUtil.nextDouble());
  newShoppingItem.setTaxable(ServiceTestUtil.randomBoolean());
  newShoppingItem.setShipping(ServiceTestUtil.nextDouble());
  newShoppingItem.setUseShippingFormula(ServiceTestUtil.randomBoolean());
  newShoppingItem.setRequiresShipping(ServiceTestUtil.randomBoolean());
  newShoppingItem.setStockQuantity(ServiceTestUtil.nextInt());
  newShoppingItem.setFeatured(ServiceTestUtil.randomBoolean());
  newShoppingItem.setSale(ServiceTestUtil.randomBoolean());
  newShoppingItem.setSmallImage(ServiceTestUtil.randomBoolean());
  newShoppingItem.setSmallImageId(ServiceTestUtil.nextLong());
  newShoppingItem.setSmallImageURL(ServiceTestUtil.randomString());
  newShoppingItem.setMediumImage(ServiceTestUtil.randomBoolean());
  newShoppingItem.setMediumImageId(ServiceTestUtil.nextLong());
  newShoppingItem.setMediumImageURL(ServiceTestUtil.randomString());
  newShoppingItem.setLargeImage(ServiceTestUtil.randomBoolean());
  newShoppingItem.setLargeImageId(ServiceTestUtil.nextLong());
  newShoppingItem.setLargeImageURL(ServiceTestUtil.randomString());
  _persistence.update(newShoppingItem,false);
  ShoppingItem existingShoppingItem=_persistence.findByPrimaryKey(newShoppingItem.getPrimaryKey());
  Assert.assertEquals(existingShoppingItem.getItemId(),newShoppingItem.getItemId());
  Assert.assertEquals(existingShoppingItem.getGroupId(),newShoppingItem.getGroupId());
  Assert.assertEquals(existingShoppingItem.getCompanyId(),newShoppingItem.getCompanyId());
  Assert.assertEquals(existingShoppingItem.getUserId(),newShoppingItem.getUserId());
  Assert.assertEquals(existingShoppingItem.getUserName(),newShoppingItem.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingShoppingItem.getCreateDate()),Time.getShortTimestamp(newShoppingItem.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingShoppingItem.getModifiedDate()),Time.getShortTimestamp(newShoppingItem.getModifiedDate()));
  Assert.assertEquals(existingShoppingItem.getCategoryId(),newShoppingItem.getCategoryId());
  Assert.assertEquals(existingShoppingItem.getSku(),newShoppingItem.getSku());
  Assert.assertEquals(existingShoppingItem.getName(),newShoppingItem.getName());
  Assert.assertEquals(existingShoppingItem.getDescription(),newShoppingItem.getDescription());
  Assert.assertEquals(existingShoppingItem.getProperties(),newShoppingItem.getProperties());
  Assert.assertEquals(existingShoppingItem.getFields(),newShoppingItem.getFields());
  Assert.assertEquals(existingShoppingItem.getFieldsQuantities(),newShoppingItem.getFieldsQuantities());
  Assert.assertEquals(existingShoppingItem.getMinQuantity(),newShoppingItem.getMinQuantity());
  Assert.assertEquals(existingShoppingItem.getMaxQuantity(),newShoppingItem.getMaxQuantity());
  AssertUtils.assertEquals(existingShoppingItem.getPrice(),newShoppingItem.getPrice());
  AssertUtils.assertEquals(existingShoppingItem.getDiscount(),newShoppingItem.getDiscount());
  Assert.assertEquals(existingShoppingItem.getTaxable(),newShoppingItem.getTaxable());
  AssertUtils.assertEquals(existingShoppingItem.getShipping(),newShoppingItem.getShipping());
  Assert.assertEquals(existingShoppingItem.getUseShippingFormula(),newShoppingItem.getUseShippingFormula());
  Assert.assertEquals(existingShoppingItem.getRequiresShipping(),newShoppingItem.getRequiresShipping());
  Assert.assertEquals(existingShoppingItem.getStockQuantity(),newShoppingItem.getStockQuantity());
  Assert.assertEquals(existingShoppingItem.getFeatured(),newShoppingItem.getFeatured());
  Assert.assertEquals(existingShoppingItem.getSale(),newShoppingItem.getSale());
  Assert.assertEquals(existingShoppingItem.getSmallImage(),newShoppingItem.getSmallImage());
  Assert.assertEquals(existingShoppingItem.getSmallImageId(),newShoppingItem.getSmallImageId());
  Assert.assertEquals(existingShoppingItem.getSmallImageURL(),newShoppingItem.getSmallImageURL());
  Assert.assertEquals(existingShoppingItem.getMediumImage(),newShoppingItem.getMediumImage());
  Assert.assertEquals(existingShoppingItem.getMediumImageId(),newShoppingItem.getMediumImageId());
  Assert.assertEquals(existingShoppingItem.getMediumImageURL(),newShoppingItem.getMediumImageURL());
  Assert.assertEquals(existingShoppingItem.getLargeImage(),newShoppingItem.getLargeImage());
  Assert.assertEquals(existingShoppingItem.getLargeImageId(),newShoppingItem.getLargeImageId());
  Assert.assertEquals(existingShoppingItem.getLargeImageURL(),newShoppingItem.getLargeImageURL());
}
