{
  int imageHeight=renderedImage.getHeight();
  int imageWidth=renderedImage.getWidth();
  if (maxHeight == 0) {
    maxHeight=imageHeight;
  }
  if (maxWidth == 0) {
    maxWidth=imageWidth;
  }
  if ((imageHeight <= maxHeight) && (imageWidth <= maxWidth)) {
    return renderedImage;
  }
  double factor=Math.min((double)maxHeight / imageHeight,(double)maxWidth / imageWidth);
  int scaledHeight=Math.max(1,(int)(factor * imageHeight));
  int scaledWidth=Math.max(1,(int)(factor * imageWidth));
  BufferedImage bufferedImage=getBufferedImage(renderedImage);
  int type=bufferedImage.getType();
  if (type == 0) {
    type=BufferedImage.TYPE_INT_ARGB;
  }
  BufferedImage scaledBufferedImage=null;
  if ((type == BufferedImage.TYPE_BYTE_BINARY) || (type == BufferedImage.TYPE_BYTE_INDEXED)) {
    IndexColorModel indexColorModel=(IndexColorModel)bufferedImage.getColorModel();
    scaledBufferedImage=new BufferedImage(scaledWidth,scaledHeight,type,indexColorModel);
  }
 else {
    scaledBufferedImage=new BufferedImage(scaledWidth,scaledHeight,type);
  }
  Graphics graphics=scaledBufferedImage.getGraphics();
  Image scaledImage=bufferedImage.getScaledInstance(scaledWidth,scaledHeight,Image.SCALE_SMOOTH);
  graphics.drawImage(scaledImage,0,0,null);
  return scaledBufferedImage;
}
