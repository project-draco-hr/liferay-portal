{
  try {
    Map<String,List<String>> suggestions=new LinkedHashMap<String,List<String>>();
    float scoresThreshold=searchContext.getScoresThreshold();
    if (scoresThreshold == 0) {
      scoresThreshold=QueryIndexingHitsProcessor.SCORES_THRESHOLD_DEFAULT;
    }
    IndexSearcher indexSearcher=LuceneHelperUtil.getSearcher(searchContext.getCompanyId(),true);
    List<IndexReader> indexReaders=new ArrayList<IndexReader>();
    if (indexSearcher.maxDoc() > 0) {
      ReaderUtil.gatherSubReaders(indexReaders,indexSearcher.getIndexReader());
    }
    for (    String keyword : keywords) {
      List<String> spellCheckSuggestions=Collections.emptyList();
      if (!SpellCheckerUtil.isValidWord(localizedFieldName,keyword,indexReaders)) {
        int frequency=indexSearcher.docFreq(new Term(localizedFieldName,keyword));
        String[] suggestionsArray=null;
        if (frequency > 0) {
          suggestionsArray=new String[]{keyword};
        }
 else {
          BooleanQuery suggestWordQuery=buildSpellCheckQuery(keyword,languageId);
          RelevancyChecker relevancyChecker=new StringDistanceRelevancyChecker(keyword,scoresThreshold,_stringDistance);
          suggestionsArray=performSearch(indexSearcher,suggestWordQuery,localizedFieldName,relevancyChecker,max);
        }
        spellCheckSuggestions=Arrays.asList(suggestionsArray);
      }
      suggestions.put(keyword,spellCheckSuggestions);
    }
    return suggestions;
  }
 catch (  IOException e) {
    throw new SearchException("Unable to find alternative queries",e);
  }
}
