{
  IndexSearcher indexSearcher=null;
  try {
    Map<String,List<String>> suggestions=new LinkedHashMap<>();
    float scoresThreshold=searchContext.getScoresThreshold();
    if (scoresThreshold == 0) {
      scoresThreshold=_SCORES_THRESHOLD_DEFAULT;
    }
    indexSearcher=LuceneHelperUtil.getIndexSearcher(searchContext.getCompanyId());
    List<IndexReader> indexReaders=new ArrayList<>();
    if (indexSearcher.maxDoc() > 0) {
      ReaderUtil.gatherSubReaders(indexReaders,indexSearcher.getIndexReader());
    }
    for (    String keyword : keywords) {
      List<String> suggestionsList=Collections.emptyList();
      if (!SpellCheckerUtil.isValidWord(localizedFieldName,keyword,indexReaders)) {
        int frequency=indexSearcher.docFreq(new Term(localizedFieldName,keyword));
        String[] suggestionsArray=null;
        if (frequency > 0) {
          suggestionsArray=new String[]{keyword};
        }
 else {
          BooleanQuery suggestWordQuery=buildSpellCheckQuery(searchContext.getGroupIds(),keyword,languageId,SuggestionConstants.TYPE_SPELL_CHECKER,0);
          RelevancyChecker relevancyChecker=new StringDistanceRelevancyChecker(keyword,scoresThreshold,_stringDistance);
          suggestionsArray=search(indexSearcher,suggestWordQuery,localizedFieldName,relevancyChecker,max);
        }
        suggestionsList=Arrays.asList(suggestionsArray);
      }
      suggestions.put(keyword,suggestionsList);
    }
    return suggestions;
  }
 catch (  IOException ioe) {
    throw new SearchException("Unable to find suggestions",ioe);
  }
 finally {
    try {
      LuceneHelperUtil.releaseIndexSearcher(searchContext.getCompanyId(),indexSearcher);
    }
 catch (    IOException ioe) {
      _log.error("Unable to release searcher",ioe);
    }
  }
}
