{
  long pk=RandomTestUtil.nextLong();
  PasswordPolicyRel newPasswordPolicyRel=_persistence.create(pk);
  newPasswordPolicyRel.setMvccVersion(RandomTestUtil.nextLong());
  newPasswordPolicyRel.setCompanyId(RandomTestUtil.nextLong());
  newPasswordPolicyRel.setPasswordPolicyId(RandomTestUtil.nextLong());
  newPasswordPolicyRel.setClassNameId(RandomTestUtil.nextLong());
  newPasswordPolicyRel.setClassPK(RandomTestUtil.nextLong());
  _passwordPolicyRels.add(_persistence.update(newPasswordPolicyRel));
  PasswordPolicyRel existingPasswordPolicyRel=_persistence.findByPrimaryKey(newPasswordPolicyRel.getPrimaryKey());
  Assert.assertEquals(existingPasswordPolicyRel.getMvccVersion(),newPasswordPolicyRel.getMvccVersion());
  Assert.assertEquals(existingPasswordPolicyRel.getPasswordPolicyRelId(),newPasswordPolicyRel.getPasswordPolicyRelId());
  Assert.assertEquals(existingPasswordPolicyRel.getCompanyId(),newPasswordPolicyRel.getCompanyId());
  Assert.assertEquals(existingPasswordPolicyRel.getPasswordPolicyId(),newPasswordPolicyRel.getPasswordPolicyId());
  Assert.assertEquals(existingPasswordPolicyRel.getClassNameId(),newPasswordPolicyRel.getClassNameId());
  Assert.assertEquals(existingPasswordPolicyRel.getClassPK(),newPasswordPolicyRel.getClassPK());
}
