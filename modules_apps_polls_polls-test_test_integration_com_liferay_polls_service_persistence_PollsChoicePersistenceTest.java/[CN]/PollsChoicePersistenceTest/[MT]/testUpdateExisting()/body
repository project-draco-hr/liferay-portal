{
  long pk=RandomTestUtil.nextLong();
  PollsChoice newPollsChoice=_persistence.create(pk);
  newPollsChoice.setUuid(RandomTestUtil.randomString());
  newPollsChoice.setGroupId(RandomTestUtil.nextLong());
  newPollsChoice.setCompanyId(RandomTestUtil.nextLong());
  newPollsChoice.setUserId(RandomTestUtil.nextLong());
  newPollsChoice.setUserName(RandomTestUtil.randomString());
  newPollsChoice.setCreateDate(RandomTestUtil.nextDate());
  newPollsChoice.setModifiedDate(RandomTestUtil.nextDate());
  newPollsChoice.setQuestionId(RandomTestUtil.nextLong());
  newPollsChoice.setName(RandomTestUtil.randomString());
  newPollsChoice.setDescription(RandomTestUtil.randomString());
  _pollsChoices.add(_persistence.update(newPollsChoice));
  PollsChoice existingPollsChoice=_persistence.findByPrimaryKey(newPollsChoice.getPrimaryKey());
  Assert.assertEquals(existingPollsChoice.getUuid(),newPollsChoice.getUuid());
  Assert.assertEquals(existingPollsChoice.getChoiceId(),newPollsChoice.getChoiceId());
  Assert.assertEquals(existingPollsChoice.getGroupId(),newPollsChoice.getGroupId());
  Assert.assertEquals(existingPollsChoice.getCompanyId(),newPollsChoice.getCompanyId());
  Assert.assertEquals(existingPollsChoice.getUserId(),newPollsChoice.getUserId());
  Assert.assertEquals(existingPollsChoice.getUserName(),newPollsChoice.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingPollsChoice.getCreateDate()),Time.getShortTimestamp(newPollsChoice.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingPollsChoice.getModifiedDate()),Time.getShortTimestamp(newPollsChoice.getModifiedDate()));
  Assert.assertEquals(existingPollsChoice.getQuestionId(),newPollsChoice.getQuestionId());
  Assert.assertEquals(existingPollsChoice.getName(),newPollsChoice.getName());
  Assert.assertEquals(existingPollsChoice.getDescription(),newPollsChoice.getDescription());
}
