{
  try {
    System.out.println("Starting " + ReleaseInfo.getReleaseInfo());
    SimpleCachePool.put(StartupAction.class.getName() + ".uptime",new Date());
    BeanLocatorUtil.setBeanLocator(new BeanLocatorImpl());
    try {
      LockServiceUtil.clear();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new ShutdownHook()));
    CacheRegistry.setActive(false);
    int buildNumber=ReleaseLocalServiceUtil.getRelease().getBuildNumber();
    String[] upgradeProcesses=PropsUtil.getArray(PropsUtil.UPGRADE_PROCESSES);
    for (int i=0; i < upgradeProcesses.length; i++) {
      if (_log.isDebugEnabled()) {
        _log.debug("Initializing upgrade " + upgradeProcesses[i]);
      }
      try {
        UpgradeProcess upgradeProcess=(UpgradeProcess)Class.forName(upgradeProcesses[i]).newInstance();
        if ((upgradeProcess.getThreshold() == 0) || (upgradeProcess.getThreshold() >= buildNumber)) {
          if (_log.isInfoEnabled()) {
            _log.info("Running upgrade " + upgradeProcesses[i]);
          }
          upgradeProcess.upgrade();
          if (_log.isInfoEnabled()) {
            _log.info("Finished upgrade " + upgradeProcesses[i]);
          }
        }
 else {
          if (_log.isDebugEnabled()) {
            _log.debug("Upgrade threshold " + upgradeProcess.getThreshold() + " will not trigger upgrade");
            _log.debug("Skipping upgrade " + upgradeProcesses[i]);
          }
        }
      }
 catch (      ClassNotFoundException cnfe) {
        _log.error(upgradeProcesses[i] + " cannot be found");
      }
catch (      InstantiationException ie) {
        _log.error(upgradeProcesses[i] + " cannot be initiated");
      }
    }
    ReleaseLocalServiceUtil.updateRelease();
    CacheRegistry.setActive(true);
    ClusterPool.clear();
    _deleteTempImages();
  }
 catch (  Exception e) {
    throw new ActionException(e);
  }
}
