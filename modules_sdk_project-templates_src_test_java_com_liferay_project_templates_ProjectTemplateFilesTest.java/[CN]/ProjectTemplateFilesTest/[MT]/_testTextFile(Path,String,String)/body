{
  String text=FileUtil.read(path);
  boolean trailingEmptyLine=false;
  if ((text.length() > 0) && text.charAt(text.length() - 1) == '\n') {
    trailingEmptyLine=true;
  }
  Assert.assertFalse("Trailing empty line in " + path,trailingEmptyLine);
  boolean firstEmptyLine=false;
  try (BufferedReader bufferedReader=new BufferedReader(new StringReader(text))){
    String line=null;
    while ((line=bufferedReader.readLine()) != null) {
      if (line.isEmpty()) {
        Assert.assertFalse("Forbidden empty line in " + path,firstEmptyLine && extension.equals("xml") && !fileName.equals("service.xml"));
        firstEmptyLine=true;
        continue;
      }
      Assert.assertFalse("Forbidden whitespace trailing character in " + path,Character.isWhitespace(line.charAt(line.length() - 1)));
    }
  }
   Matcher matcher=_velocityIfPattern.matcher(text);
  while (matcher.find()) {
    String condition=matcher.group(1);
    Assert.assertEquals("Source formatting error in " + path,"#if (" + condition.trim() + ")",matcher.group());
  }
  if (extension.equals("xml")) {
    String xmlDeclaration=_XML_DECLARATION;
    if (fileName.equals("service.xml")) {
      xmlDeclaration=_SERVICE_XML_DECLARATION;
    }
    Assert.assertTrue("Incorrect XML declaration in " + path,text.startsWith(xmlDeclaration));
  }
}
