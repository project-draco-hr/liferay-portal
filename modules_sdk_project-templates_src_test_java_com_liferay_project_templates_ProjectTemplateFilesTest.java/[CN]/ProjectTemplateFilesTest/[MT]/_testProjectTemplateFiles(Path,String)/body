{
  Path archetypeMetadataXmlPath=projectTemplateDirPath.resolve("src/main/resources/META-INF/maven/archetype-metadata.xml");
  Assert.assertTrue("Missing " + archetypeMetadataXmlPath,Files.exists(archetypeMetadataXmlPath));
  Path archetypeResourcesDirPath=projectTemplateDirPath.resolve("src/main/resources/archetype-resources");
  Assert.assertTrue("Missing " + archetypeResourcesDirPath,Files.isDirectory(archetypeResourcesDirPath));
  Path buildGradlePath=archetypeResourcesDirPath.resolve("build.gradle");
  Assert.assertTrue("Missing " + buildGradlePath,Files.exists(buildGradlePath));
  Path dotGitIgnorePath=archetypeResourcesDirPath.resolve(".gitignore");
  Path gitIgnorePath=archetypeResourcesDirPath.resolve("gitignore");
  Assert.assertFalse("Rename " + dotGitIgnorePath + " to "+ gitIgnorePath+ " to bypass GRADLE-1883",Files.exists(dotGitIgnorePath));
  Assert.assertTrue("Missing " + gitIgnorePath,Files.exists(gitIgnorePath));
  Assert.assertEquals("Incorrect " + gitIgnorePath,gitIgnoreTemplate,FileTestUtil.read(gitIgnorePath));
  Assert.assertFalse("Forbidden Gradle wrapper in " + archetypeResourcesDirPath,Files.exists(archetypeResourcesDirPath.resolve("gradlew")));
  Path pomXmlPath=archetypeResourcesDirPath.resolve("pom.xml");
  Assert.assertTrue("Missing " + pomXmlPath,Files.exists(pomXmlPath));
  Files.walkFileTree(archetypeResourcesDirPath,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dirPath,    BasicFileAttributes basicFileAttributes) throws IOException {
      Path languagePropertiesPath=dirPath.resolve("Language.properties");
      if (Files.exists(languagePropertiesPath)) {
        _testLanguageProperties(languagePropertiesPath);
        String glob="Language_*.properties";
        Assert.assertNull("Forbidden " + dirPath + File.separator+ glob,FileUtil.getFile(dirPath,glob));
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path path,    BasicFileAttributes basicFileAttributes) throws IOException {
      Path fileNamePath=path.getFileName();
      String fileName=fileNamePath.toString();
      String extension=FileTestUtil.getExtension(fileName);
      if (!fileName.equals(".gitkeep") && (_isInJavaSrcDir(path) != extension.equals("java"))) {
        Assert.fail("Wrong source directory " + path);
      }
      if (_isTextFile(fileName,extension)) {
        _testTextFile(path,fileName,extension);
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
}
