{
  String tabs=StringPool.BLANK;
  while (true) {
    Pattern pattern1=Pattern.compile("(\n|^)" + tabs + "[^\n\t]*[\\{\\[]\n");
    Matcher matcher1=pattern1.matcher(content);
    if (!matcher1.find()) {
      break;
    }
    Pattern pattern2=Pattern.compile("((\n|^)" + tabs + "[^\n\t]*\\{\n"+ tabs+ "\t[^\n\t][\\s\\S]*?)\n"+ tabs+ "\\}");
    Matcher matcher2=pattern2.matcher(content);
    while (matcher2.find()) {
      Pattern pattern3=Pattern.compile("(" + tabs + "\t[^\n\t]*?([^\\{\\[]|([\\{\\[]\n[\\s\\S]*?"+ "\n"+ tabs+ "\t[\\}\\]]))),?(\n|$)");
      String match=matcher2.group(1);
      Matcher matcher3=pattern3.matcher(match);
      String previousProperty=null;
      while (matcher3.find()) {
        String property=matcher3.group(1);
        if (Validator.isNotNull(previousProperty) && (previousProperty.compareTo(property) > 0)) {
          String replacement=StringUtil.replaceFirst(match,previousProperty,property);
          replacement=StringUtil.replaceLast(replacement,property,previousProperty);
          return StringUtil.replace(content,match,replacement);
        }
        previousProperty=property;
      }
    }
    tabs+="\t";
  }
  return content;
}
