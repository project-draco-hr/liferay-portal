{
  StringBundler sb=new StringBundler();
  try (UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content))){
    String line=null;
    while ((line=unsyncBufferedReader.readLine()) != null) {
      line=trimLine(line,true);
      while (true) {
        Matcher matcher=_leadingSpacesPattern.matcher(line);
        if (!matcher.find()) {
          break;
        }
        line=matcher.replaceAll("$1\t$3");
      }
      line=StringUtil.replace(line,StringPool.DOUBLE_SPACE,StringPool.SPACE);
      sb.append(line);
      sb.append("\n");
    }
  }
   content=sb.toString();
  if (content.endsWith("\n")) {
    content=content.substring(0,content.length() - 1);
  }
  Matcher matcher=_incorrectLineBreakPattern.matcher(content);
  if (matcher.find()) {
    processMessage(fileName,"There should be a line break after '}'",getLineCount(content,matcher.start()));
  }
 else {
    content=sort(content);
  }
  matcher=_missingWhitespacePattern.matcher(content);
  while (matcher.find()) {
    if (!ToolsUtil.isInsideQuotes(content,matcher.start())) {
      return StringUtil.insert(content,StringPool.SPACE,matcher.start() + 1);
    }
  }
  return content;
}
