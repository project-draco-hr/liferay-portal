{
  try {
    if (algorithm.equalsIgnoreCase(TYPE_CRYPT) || algorithm.equalsIgnoreCase(TYPE_CRYPT_REVERSE)) {
      return Crypt.crypt(clearTextPwd.getBytes(Digester.ENCODING),saltBytes);
    }
    if (algorithm.equalsIgnoreCase(TYPE_CRYPT_NORMAL)) {
      return Crypt.crypt(saltBytes,clearTextPwd.getBytes(Digester.ENCODING));
    }
 else     if (algorithm.equalsIgnoreCase(TYPE_SSHA)) {
      byte[] clearTextPwdBytes=clearTextPwd.getBytes(Digester.ENCODING);
      byte[] pwdPlusSalt=new byte[clearTextPwdBytes.length + saltBytes.length];
      System.arraycopy(clearTextPwdBytes,0,pwdPlusSalt,0,clearTextPwdBytes.length);
      System.arraycopy(saltBytes,0,pwdPlusSalt,clearTextPwdBytes.length,saltBytes.length);
      MessageDigest sha1Digest=MessageDigest.getInstance("SHA-1");
      byte[] pwdPlusSaltHash=sha1Digest.digest(pwdPlusSalt);
      byte[] digestPlusSalt=new byte[pwdPlusSaltHash.length + saltBytes.length];
      System.arraycopy(pwdPlusSaltHash,0,digestPlusSalt,0,pwdPlusSaltHash.length);
      System.arraycopy(saltBytes,0,digestPlusSalt,pwdPlusSaltHash.length,saltBytes.length);
      return Base64.encode(digestPlusSalt);
    }
 else {
      return DigesterUtil.digest(algorithm,clearTextPwd);
    }
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new PwdEncryptorException(nsae.getMessage());
  }
catch (  UnsupportedEncodingException uee) {
    throw new PwdEncryptorException(uee.getMessage());
  }
}
