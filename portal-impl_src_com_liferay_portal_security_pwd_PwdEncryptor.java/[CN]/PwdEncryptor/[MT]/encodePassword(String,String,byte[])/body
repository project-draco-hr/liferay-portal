{
  try {
    if (algorithm.equals(TYPE_BCRYPT)) {
      String salt=new String(saltBytes);
      return BCrypt.hashpw(clearTextPassword,salt);
    }
 else     if (algorithm.equals(TYPE_CRYPT) || algorithm.equals(TYPE_UFC_CRYPT)) {
      return Crypt.crypt(saltBytes,clearTextPassword.getBytes(Digester.ENCODING));
    }
 else     if (algorithm.equals(TYPE_SSHA)) {
      byte[] clearTextPasswordBytes=clearTextPassword.getBytes(Digester.ENCODING);
      byte[] pwdPlusSalt=new byte[clearTextPasswordBytes.length + saltBytes.length];
      System.arraycopy(clearTextPasswordBytes,0,pwdPlusSalt,0,clearTextPasswordBytes.length);
      System.arraycopy(saltBytes,0,pwdPlusSalt,clearTextPasswordBytes.length,saltBytes.length);
      MessageDigest sha1Digest=MessageDigest.getInstance("SHA-1");
      byte[] pwdPlusSaltHash=sha1Digest.digest(pwdPlusSalt);
      byte[] digestPlusSalt=new byte[pwdPlusSaltHash.length + saltBytes.length];
      System.arraycopy(pwdPlusSaltHash,0,digestPlusSalt,0,pwdPlusSaltHash.length);
      System.arraycopy(saltBytes,0,digestPlusSalt,pwdPlusSaltHash.length,saltBytes.length);
      return Base64.encode(digestPlusSalt);
    }
 else {
      return DigesterUtil.digest(algorithm,clearTextPassword);
    }
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new PwdEncryptorException(nsae.getMessage());
  }
catch (  UnsupportedEncodingException uee) {
    throw new PwdEncryptorException(uee.getMessage());
  }
}
