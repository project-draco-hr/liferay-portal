{
  final BatchablePipe<String,Integer> batchablePipe=new BatchablePipe<String,Integer>();
  final BlockingQueue<IncreasableEntry<String,Integer>> resultQueue=new LinkedBlockingQueue<IncreasableEntry<String,Integer>>();
  ExecutorService putThreadPool=Executors.newFixedThreadPool(5);
  ExecutorService takeThreadPool=Executors.newFixedThreadPool(5);
  Runnable putJob=new Runnable(){
    public void run(){
      for (int i=0; i < 100; i++) {
        batchablePipe.put(new IntegerIncreasableEntry(String.valueOf(i % 10),1));
      }
    }
  }
;
  Runnable takeJob=new Runnable(){
    public void run(){
      while (true) {
        try {
          IncreasableEntry<String,Integer> entry=batchablePipe.take();
          if (entry != null) {
            if (entry.getKey().equals("exit")) {
              return;
            }
            resultQueue.put(entry);
          }
        }
 catch (        InterruptedException ex) {
        }
      }
    }
  }
;
  for (int i=0; i < 10; i++) {
    putThreadPool.submit(putJob);
    takeThreadPool.submit(takeJob);
  }
  putThreadPool.shutdown();
  putThreadPool.awaitTermination(240,TimeUnit.SECONDS);
  IncreasableEntry<String,Integer> poisonEntry=new IntegerIncreasableEntry("exit",-1);
  for (int i=0; i < 10; i++) {
    batchablePipe.put(poisonEntry);
  }
  takeThreadPool.shutdown();
  takeThreadPool.awaitTermination(240,TimeUnit.SECONDS);
  Map<String,Integer> verifyMap=new HashMap<String,Integer>();
  for (  IncreasableEntry<String,Integer> entry : resultQueue) {
    String key=entry.getKey();
    Integer value=entry.getValue();
    Integer sum=verifyMap.get(key);
    if (sum == null) {
      verifyMap.put(key,value);
    }
 else {
      verifyMap.put(key,sum + value);
    }
  }
  for (int i=0; i < 10; i++) {
    Integer sum=verifyMap.get(String.valueOf(i));
    assertEquals(100,(int)sum);
  }
  assertLessThan(1000,resultQueue.size());
}
