{
  long userId=portletDataContext.getUserId(organization.getUserUuid());
  Map<Long,Long> organizationIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(Organization.class);
  long parentOrganizationId=MapUtil.getLong(organizationIds,organization.getParentOrganizationId(),organization.getParentOrganizationId());
  if ((parentOrganizationId != OrganizationConstants.DEFAULT_PARENT_ORGANIZATION_ID) && (parentOrganizationId == organization.getParentOrganizationId())) {
    String parentOrganizationPath=ExportImportPathUtil.getModelPath(portletDataContext,Organization.class.getName(),parentOrganizationId);
    Organization parentOrganization=(Organization)portletDataContext.getZipEntryAsObject(parentOrganizationPath);
    StagedModelDataHandlerUtil.importStagedModel(portletDataContext,parentOrganization);
    parentOrganizationId=MapUtil.getLong(organizationIds,organization.getParentOrganizationId(),organization.getParentOrganizationId());
  }
  ServiceContext serviceContext=portletDataContext.createServiceContext(organization,UsersAdminPortletDataHandler.NAMESPACE);
  serviceContext.setUserId(userId);
  Organization existingOrganization=OrganizationLocalServiceUtil.fetchOrganizationByUuidAndCompanyId(organization.getUuid(),portletDataContext.getCompanyId());
  if (existingOrganization == null) {
    existingOrganization=OrganizationLocalServiceUtil.fetchOrganization(portletDataContext.getCompanyId(),organization.getName());
  }
  Organization importedOrganization=null;
  if (existingOrganization == null) {
    serviceContext.setUuid(organization.getUuid());
    importedOrganization=OrganizationLocalServiceUtil.addOrganization(userId,parentOrganizationId,organization.getName(),organization.getType(),organization.getRegionId(),organization.getCountryId(),organization.getStatusId(),organization.getComments(),false,serviceContext);
  }
 else {
    importedOrganization=OrganizationLocalServiceUtil.updateOrganization(portletDataContext.getCompanyId(),existingOrganization.getOrganizationId(),parentOrganizationId,organization.getName(),organization.getType(),organization.getRegionId(),organization.getCountryId(),organization.getStatusId(),organization.getComments(),false,serviceContext);
  }
  importAddresses(portletDataContext,organization,importedOrganization);
  importEmailAddresses(portletDataContext,organization,importedOrganization);
  importOrgLabors(portletDataContext,organization,importedOrganization);
  importPasswordPolicyRel(portletDataContext,organization,importedOrganization);
  importPhones(portletDataContext,organization,importedOrganization);
  importWebsites(portletDataContext,organization,importedOrganization);
  portletDataContext.importClassedModel(organization,importedOrganization,UsersAdminPortletDataHandler.NAMESPACE);
}
