{
  String cmd=ParamUtil.getString(req,Constants.CMD);
  try {
    User user=null;
    if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) {
      user=updateUser(req);
    }
 else     if (cmd.equals("comments")) {
      user=updateComments(req);
    }
 else     if (cmd.equals(Constants.DEACTIVATE) || cmd.equals(Constants.DELETE) || cmd.equals(Constants.RESTORE)) {
      deleteUsers(req);
    }
 else     if (cmd.equals("deleteRole")) {
      deleteRole(req);
    }
 else     if (cmd.equals("display")) {
      user=updateDisplay(req);
    }
 else     if (cmd.equals("im")) {
      user=updateIm(req);
    }
 else     if (cmd.equals("password")) {
      user=updatePassword(req);
    }
 else     if (cmd.equals("sms")) {
      user=updateSms(req);
    }
    String redirect=null;
    if (user != null) {
      redirect=ParamUtil.getString(req,"redirect") + user.getEmailAddress();
    }
    sendRedirect(req,res,redirect);
  }
 catch (  Exception e) {
    if (e instanceof NoSuchUserException || e instanceof PrincipalException) {
      SessionErrors.add(req,e.getClass().getName());
      setForward(req,"portlet.enterprise_admin.error");
    }
 else     if (e instanceof ContactFirstNameException || e instanceof ContactLastNameException || e instanceof DuplicateUserEmailAddressException|| e instanceof NoSuchOrganizationException|| e instanceof OrganizationParentException|| e instanceof RequiredUserException|| e instanceof ReservedUserEmailAddressException|| e instanceof UserEmailAddressException|| e instanceof UserPasswordException|| e instanceof UserSmsException) {
      SessionErrors.add(req,e.getClass().getName(),e);
      if (e instanceof RequiredUserException) {
        res.sendRedirect(ParamUtil.getString(req,"redirect"));
      }
    }
 else {
      throw e;
    }
  }
}
