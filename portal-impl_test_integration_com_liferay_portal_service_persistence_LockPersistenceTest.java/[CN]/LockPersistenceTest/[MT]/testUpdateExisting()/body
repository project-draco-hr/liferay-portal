{
  long pk=nextLong();
  Lock newLock=_persistence.create(pk);
  newLock.setUuid(randomString());
  newLock.setCompanyId(nextLong());
  newLock.setUserId(nextLong());
  newLock.setUserName(randomString());
  newLock.setCreateDate(nextDate());
  newLock.setClassName(randomString());
  newLock.setKey(randomString());
  newLock.setOwner(randomString());
  newLock.setInheritable(randomBoolean());
  newLock.setExpirationDate(nextDate());
  _persistence.update(newLock,false);
  Lock existingLock=_persistence.findByPrimaryKey(newLock.getPrimaryKey());
  assertEquals(existingLock.getUuid(),newLock.getUuid());
  assertEquals(existingLock.getLockId(),newLock.getLockId());
  assertEquals(existingLock.getCompanyId(),newLock.getCompanyId());
  assertEquals(existingLock.getUserId(),newLock.getUserId());
  assertEquals(existingLock.getUserName(),newLock.getUserName());
  assertEquals(Time.getShortTimestamp(existingLock.getCreateDate()),Time.getShortTimestamp(newLock.getCreateDate()));
  assertEquals(existingLock.getClassName(),newLock.getClassName());
  assertEquals(existingLock.getKey(),newLock.getKey());
  assertEquals(existingLock.getOwner(),newLock.getOwner());
  assertEquals(existingLock.getInheritable(),newLock.getInheritable());
  assertEquals(Time.getShortTimestamp(existingLock.getExpirationDate()),Time.getShortTimestamp(newLock.getExpirationDate()));
}
