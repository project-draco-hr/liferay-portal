{
  long pk=ServiceTestUtil.nextLong();
  Lock newLock=_persistence.create(pk);
  newLock.setUuid(ServiceTestUtil.randomString());
  newLock.setCompanyId(ServiceTestUtil.nextLong());
  newLock.setUserId(ServiceTestUtil.nextLong());
  newLock.setUserName(ServiceTestUtil.randomString());
  newLock.setCreateDate(ServiceTestUtil.nextDate());
  newLock.setClassName(ServiceTestUtil.randomString());
  newLock.setKey(ServiceTestUtil.randomString());
  newLock.setOwner(ServiceTestUtil.randomString());
  newLock.setInheritable(ServiceTestUtil.randomBoolean());
  newLock.setExpirationDate(ServiceTestUtil.nextDate());
  _persistence.update(newLock);
  Lock existingLock=_persistence.findByPrimaryKey(newLock.getPrimaryKey());
  Assert.assertEquals(existingLock.getUuid(),newLock.getUuid());
  Assert.assertEquals(existingLock.getLockId(),newLock.getLockId());
  Assert.assertEquals(existingLock.getCompanyId(),newLock.getCompanyId());
  Assert.assertEquals(existingLock.getUserId(),newLock.getUserId());
  Assert.assertEquals(existingLock.getUserName(),newLock.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingLock.getCreateDate()),Time.getShortTimestamp(newLock.getCreateDate()));
  Assert.assertEquals(existingLock.getClassName(),newLock.getClassName());
  Assert.assertEquals(existingLock.getKey(),newLock.getKey());
  Assert.assertEquals(existingLock.getOwner(),newLock.getOwner());
  Assert.assertEquals(existingLock.getInheritable(),newLock.getInheritable());
  Assert.assertEquals(Time.getShortTimestamp(existingLock.getExpirationDate()),Time.getShortTimestamp(newLock.getExpirationDate()));
}
