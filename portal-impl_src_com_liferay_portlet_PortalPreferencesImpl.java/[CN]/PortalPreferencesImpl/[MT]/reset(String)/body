{
  if (isReadOnly(key)) {
    throw new ReadOnlyException(key);
  }
  Callable<Void> callable=new Callable<Void>(){
    @Override public Void call(){
      Map<String,Preference> modifiedPreferences=getModifiedPreferences();
      modifiedPreferences.remove(key);
      return null;
    }
  }
;
  try {
    retryableStore(callable,key);
  }
 catch (  Throwable t) {
    if (t instanceof ConcurrentModificationException) {
      throw (ConcurrentModificationException)t;
    }
    _log.error(t,t);
  }
}
