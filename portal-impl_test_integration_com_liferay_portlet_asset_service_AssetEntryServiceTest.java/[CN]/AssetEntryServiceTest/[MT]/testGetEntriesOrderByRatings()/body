{
  AssetEntry assetEntry1=null;
  AssetEntry assetEntry2=null;
  AssetEntry assetEntry3=null;
  RatingsStats ratingsStats1=null;
  RatingsStats ratingsStats2=null;
  RatingsStats ratingsStats3=null;
  try {
    assetEntry1=AssetTestUtil.addAssetEntry(_group.getGroupId());
    ratingsStats1=RatingsTestUtil.addStats(assetEntry1.getClassName(),assetEntry1.getClassPK(),2000);
    assetEntry2=AssetTestUtil.addAssetEntry(_group.getGroupId());
    ratingsStats2=RatingsTestUtil.addStats(assetEntry2.getClassName(),assetEntry2.getClassPK(),1000);
    assetEntry3=AssetTestUtil.addAssetEntry(_group.getGroupId());
    ratingsStats3=RatingsTestUtil.addStats(assetEntry3.getClassName(),assetEntry3.getClassPK(),3000);
    List<AssetEntry> orderedAssetEntries=new ArrayList<AssetEntry>(3);
    orderedAssetEntries.add(assetEntry3);
    orderedAssetEntries.add(assetEntry1);
    orderedAssetEntries.add(assetEntry2);
    AssetEntryQuery assetEntryQuery=new AssetEntryQuery();
    assetEntryQuery.setOrderByCol1("ratings");
    assetEntryQuery.setOrderByType1("DESC");
    List<AssetEntry> assetEntries=AssetEntryLocalServiceUtil.getEntries(assetEntryQuery);
    Assert.assertEquals(assetEntries.size(),3);
    for (int pos=0; pos < 3; pos++) {
      Assert.assertEquals(assetEntries.get(pos),orderedAssetEntries.get(pos));
    }
  }
  finally {
    AssetEntryLocalServiceUtil.deleteAssetEntry(assetEntry1);
    AssetEntryLocalServiceUtil.deleteAssetEntry(assetEntry2);
    AssetEntryLocalServiceUtil.deleteAssetEntry(assetEntry3);
    RatingsStatsLocalServiceUtil.deleteRatingsStats(ratingsStats1);
    RatingsStatsLocalServiceUtil.deleteRatingsStats(ratingsStats2);
    RatingsStatsLocalServiceUtil.deleteRatingsStats(ratingsStats3);
  }
}
