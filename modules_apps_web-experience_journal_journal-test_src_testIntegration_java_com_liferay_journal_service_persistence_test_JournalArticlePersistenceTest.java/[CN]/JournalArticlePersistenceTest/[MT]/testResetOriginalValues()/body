{
  JournalArticle newJournalArticle=addJournalArticle();
  _persistence.clearCache();
  JournalArticle existingJournalArticle=_persistence.findByPrimaryKey(newJournalArticle.getPrimaryKey());
  Assert.assertTrue(Objects.equals(existingJournalArticle.getUuid(),ReflectionTestUtil.invoke(existingJournalArticle,"getOriginalUuid",new Class<?>[0])));
  Assert.assertEquals(Long.valueOf(existingJournalArticle.getGroupId()),ReflectionTestUtil.<Long>invoke(existingJournalArticle,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingJournalArticle.getGroupId()),ReflectionTestUtil.<Long>invoke(existingJournalArticle,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingJournalArticle.getClassNameId()),ReflectionTestUtil.<Long>invoke(existingJournalArticle,"getOriginalClassNameId",new Class<?>[0]));
  Assert.assertTrue(Objects.equals(existingJournalArticle.getDDMStructureKey(),ReflectionTestUtil.invoke(existingJournalArticle,"getOriginalDDMStructureKey",new Class<?>[0])));
  Assert.assertEquals(Long.valueOf(existingJournalArticle.getGroupId()),ReflectionTestUtil.<Long>invoke(existingJournalArticle,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertTrue(Objects.equals(existingJournalArticle.getArticleId(),ReflectionTestUtil.invoke(existingJournalArticle,"getOriginalArticleId",new Class<?>[0])));
  AssertUtils.assertEquals(existingJournalArticle.getVersion(),ReflectionTestUtil.<Double>invoke(existingJournalArticle,"getOriginalVersion",new Class<?>[0]));
}
