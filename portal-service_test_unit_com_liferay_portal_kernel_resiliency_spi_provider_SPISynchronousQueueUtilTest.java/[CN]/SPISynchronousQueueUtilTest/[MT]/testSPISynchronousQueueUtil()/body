{
  final String spiUUID="spiUUID";
  SynchronousQueue<SPI> synchronousQueue=SPISynchronousQueueUtil.createSynchronousQueue(spiUUID);
  Map<String,SynchronousQueue<SPI>> synchronizerRegistry=ReflectionTestUtil.getFieldValue(SPISynchronousQueueUtil.class,"_synchronousQueues");
  Assert.assertSame(synchronousQueue,synchronizerRegistry.get(spiUUID));
  try {
    SPISynchronousQueueUtil.notifySynchronousQueue("nonexistent",null);
    Assert.fail();
  }
 catch (  IllegalStateException ise) {
    Assert.assertEquals("No SPI synchronous queue with uuid nonexistent",ise.getMessage());
  }
  final MockSPI mockSPI=new MockSPI();
  SyncThrowableThread<Void> syncThrowableThread=new SyncThrowableThread<>(new Callable<Void>(){
    @Override public Void call() throws InterruptedException {
      SPISynchronousQueueUtil.notifySynchronousQueue(spiUUID,mockSPI);
      return null;
    }
  }
);
  syncThrowableThread.start();
  Assert.assertSame(mockSPI,synchronousQueue.take());
  syncThrowableThread.sync();
  synchronousQueue=SPISynchronousQueueUtil.createSynchronousQueue(spiUUID);
  Assert.assertSame(synchronousQueue,synchronizerRegistry.get(spiUUID));
  SPISynchronousQueueUtil.destroySynchronousQueue(spiUUID);
  Assert.assertTrue(synchronizerRegistry.isEmpty());
}
