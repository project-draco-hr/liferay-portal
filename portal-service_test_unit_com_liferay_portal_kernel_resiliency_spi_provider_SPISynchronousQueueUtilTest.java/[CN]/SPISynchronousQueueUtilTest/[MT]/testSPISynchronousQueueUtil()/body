{
  final String spiUUID="spiUUID";
  SynchronousQueue<SPI> synchronousQueue=SPISynchronousQueueUtil.createSynchronousQueue(spiUUID);
  Map<String,SynchronousQueue<SPI>> synchronizerRegistry=_getSynchronousQueues();
  Assert.assertSame(synchronousQueue,synchronizerRegistry.get(spiUUID));
  try {
    SPISynchronousQueueUtil.notifySynchronousQueue("nonexistent",null);
    Assert.fail();
  }
 catch (  IllegalStateException ise) {
    Assert.assertEquals("No SPI synchronous queue with uuid nonexistent",ise.getMessage());
  }
  final MockSPI mockSPI=new MockSPI();
  Thread notifyThread=new Thread(){
    @Override public void run(){
      try {
        SPISynchronousQueueUtil.notifySynchronousQueue(spiUUID,mockSPI);
      }
 catch (      InterruptedException ie) {
        Assert.fail(ie.getMessage());
      }
    }
  }
;
  notifyThread.start();
  Assert.assertSame(mockSPI,synchronousQueue.take());
  synchronousQueue=SPISynchronousQueueUtil.createSynchronousQueue(spiUUID);
  Assert.assertSame(synchronousQueue,synchronizerRegistry.get(spiUUID));
  SPISynchronousQueueUtil.destroySynchronousQueue(spiUUID);
  Assert.assertTrue(synchronizerRegistry.isEmpty());
}
