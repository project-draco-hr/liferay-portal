{
  Enumeration<URL> enumeration=bundle.findEntries("/WEB-INF","server-config.wsdd",false);
  if ((enumeration == null) || !enumeration.hasMoreElements()) {
    return null;
  }
  Dictionary<String,Object> properties=new Hashtable<>();
  properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME,"axis." + bundle.getSymbolicName());
  properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_PATH,"/" + bundle.getSymbolicName());
  ServiceRegistration<ServletContextHelper> bundleServletContextHelperServiceRegistration=_bundleContext.registerService(ServletContextHelper.class,new ServletContextHelper(bundle){
    @Override public URL getResource(    String name){
      if (name.startsWith("/")) {
        name=name.substring(1);
      }
      return bundle.getResource(name);
    }
  }
,properties);
  properties=new Hashtable<>();
  properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT,"axis." + bundle.getSymbolicName());
  properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_NAME,"AuthVerifierFilter");
  properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN,"/api/axis/*");
  ServiceRegistration<Filter> authVerifierFilterServiceRegistration=_bundleContext.registerService(Filter.class,new AuthVerifierFilter(),properties);
  properties=new Hashtable<>();
  properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT,"axis." + bundle.getSymbolicName());
  properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_NAME,"AxisServlet");
  properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_PATTERN,"/api/axis/*");
  properties.put("servlet.init.axis.servicesPath","/api/axis/");
  properties.put("servlet.init.httpMethods","GET,POST,HEAD");
  Bundle bundleContextBundle=_bundleContext.getBundle();
  BundleWiring bundleContextBundleBundleWiring=bundleContextBundle.adapt(BundleWiring.class);
  AggregateClassLoader aggregateClassLoader=new AggregateClassLoader(bundleContextBundleBundleWiring.getClassLoader());
  BundleWiring bundleWiring=bundle.adapt(BundleWiring.class);
  aggregateClassLoader.addClassLoader(bundleWiring.getClassLoader());
  Servlet servlet=(Servlet)ProxyUtil.newProxyInstance(aggregateClassLoader,new Class[]{Servlet.class},new ClassLoaderBeanHandler(new AxisServlet(),aggregateClassLoader));
  ServiceRegistration<Servlet> axisServletServiceRegistration=_bundleContext.registerService(Servlet.class,servlet,properties);
  return new BundleRegistrationInfo(authVerifierFilterServiceRegistration,axisServletServiceRegistration,bundleServletContextHelperServiceRegistration);
}
