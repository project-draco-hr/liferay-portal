{
  long pk=nextLong();
  SCFrameworkVersion newSCFrameworkVersion=_persistence.create(pk);
  newSCFrameworkVersion.setGroupId(nextLong());
  newSCFrameworkVersion.setCompanyId(nextLong());
  newSCFrameworkVersion.setUserId(nextLong());
  newSCFrameworkVersion.setUserName(randomString());
  newSCFrameworkVersion.setCreateDate(nextDate());
  newSCFrameworkVersion.setModifiedDate(nextDate());
  newSCFrameworkVersion.setName(randomString());
  newSCFrameworkVersion.setUrl(randomString());
  newSCFrameworkVersion.setActive(randomBoolean());
  newSCFrameworkVersion.setPriority(nextInt());
  _persistence.update(newSCFrameworkVersion,false);
  SCFrameworkVersion existingSCFrameworkVersion=_persistence.findByPrimaryKey(newSCFrameworkVersion.getPrimaryKey());
  assertEquals(existingSCFrameworkVersion.getFrameworkVersionId(),newSCFrameworkVersion.getFrameworkVersionId());
  assertEquals(existingSCFrameworkVersion.getGroupId(),newSCFrameworkVersion.getGroupId());
  assertEquals(existingSCFrameworkVersion.getCompanyId(),newSCFrameworkVersion.getCompanyId());
  assertEquals(existingSCFrameworkVersion.getUserId(),newSCFrameworkVersion.getUserId());
  assertEquals(existingSCFrameworkVersion.getUserName(),newSCFrameworkVersion.getUserName());
  assertEquals(existingSCFrameworkVersion.getCreateDate(),newSCFrameworkVersion.getCreateDate());
  assertEquals(existingSCFrameworkVersion.getModifiedDate(),newSCFrameworkVersion.getModifiedDate());
  assertEquals(existingSCFrameworkVersion.getName(),newSCFrameworkVersion.getName());
  assertEquals(existingSCFrameworkVersion.getUrl(),newSCFrameworkVersion.getUrl());
  assertEquals(existingSCFrameworkVersion.getActive(),newSCFrameworkVersion.getActive());
  assertEquals(existingSCFrameworkVersion.getPriority(),newSCFrameworkVersion.getPriority());
}
