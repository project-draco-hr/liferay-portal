{
  Map<String,FileItem[]> fileParameters=PortletContainerTestUtil.getFileParameters(10,getClass(),_TXT_DEPENDENCY);
  Map<String,List<String>> regularParameters=PortletContainerTestUtil.getRegularParameters(10);
  LiferayServletRequest liferayServletRequest=PortletContainerTestUtil.getMultipartRequest(_fileNameParameter,_bytes);
  String parameter=RandomTestUtil.randomString();
  MockHttpServletRequest mockHttpServletRequest=(MockHttpServletRequest)liferayServletRequest.getRequest();
  mockHttpServletRequest.addParameter(parameter,parameter);
  UploadServletRequestImpl uploadServletRequest=new UploadServletRequestImpl((HttpServletRequest)liferayServletRequest.getRequest(),fileParameters,regularParameters);
  for (  Map.Entry<String,List<String>> entry : regularParameters.entrySet()) {
    String key=entry.getKey();
    String[] parameterValues=uploadServletRequest.getParameterValues(key);
    List<String> parameterValuesList=ListUtil.fromArray(parameterValues);
    Assert.assertTrue(parameterValuesList.containsAll(entry.getValue()));
  }
  String[] requestParameterValues=uploadServletRequest.getParameterValues(parameter);
  ArrayUtil.contains(requestParameterValues,parameter);
  for (  Map.Entry<String,FileItem[]> entry : fileParameters.entrySet()) {
    String key=entry.getKey();
    String[] parameterValues=uploadServletRequest.getParameterValues(key);
    List<String> parameterValuesList=ListUtil.fromArray(parameterValues);
    Assert.assertFalse(parameterValuesList.contains(key));
  }
}
