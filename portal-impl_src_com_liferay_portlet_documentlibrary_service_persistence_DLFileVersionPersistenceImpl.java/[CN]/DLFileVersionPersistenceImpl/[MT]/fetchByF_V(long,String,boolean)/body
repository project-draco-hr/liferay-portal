{
  Object[] finderArgs=new Object[]{fileEntryId,version};
  Object result=null;
  if (retrieveFromCache) {
    result=FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_F_V,finderArgs,this);
  }
  if (result instanceof DLFileVersion) {
    DLFileVersion dlFileVersion=(DLFileVersion)result;
    if ((fileEntryId != dlFileVersion.getFileEntryId()) || !Validator.equals(version,dlFileVersion.getVersion())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_DLFILEVERSION_WHERE);
    query.append(_FINDER_COLUMN_F_V_FILEENTRYID_2);
    boolean bindVersion=false;
    if (version == null) {
      query.append(_FINDER_COLUMN_F_V_VERSION_1);
    }
 else     if (version.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_F_V_VERSION_3);
    }
 else {
      bindVersion=true;
      query.append(_FINDER_COLUMN_F_V_VERSION_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(fileEntryId);
      if (bindVersion) {
        qPos.add(version);
      }
      List<DLFileVersion> list=q.list();
      if (list.isEmpty()) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_F_V,finderArgs,list);
      }
 else {
        DLFileVersion dlFileVersion=list.get(0);
        result=dlFileVersion;
        cacheResult(dlFileVersion);
        if ((dlFileVersion.getFileEntryId() != fileEntryId) || (dlFileVersion.getVersion() == null) || !dlFileVersion.getVersion().equals(version)) {
          FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_F_V,finderArgs,dlFileVersion);
        }
      }
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_F_V,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (DLFileVersion)result;
  }
}
