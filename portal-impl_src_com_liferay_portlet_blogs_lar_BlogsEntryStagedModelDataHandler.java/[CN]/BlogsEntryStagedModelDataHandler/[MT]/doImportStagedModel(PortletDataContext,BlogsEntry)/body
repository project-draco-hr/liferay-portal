{
  long userId=portletDataContext.getUserId(entry.getUserUuid());
  Element entryElement=portletDataContext.getImportDataStagedModelElement(entry);
  String content=ExportImportHelperUtil.replaceImportContentReferences(portletDataContext,entry,entry.getContent());
  entry.setContent(content);
  Calendar displayDateCal=CalendarFactoryUtil.getCalendar();
  displayDateCal.setTime(entry.getDisplayDate());
  int displayDateMonth=displayDateCal.get(Calendar.MONTH);
  int displayDateDay=displayDateCal.get(Calendar.DATE);
  int displayDateYear=displayDateCal.get(Calendar.YEAR);
  int displayDateHour=displayDateCal.get(Calendar.HOUR);
  int displayDateMinute=displayDateCal.get(Calendar.MINUTE);
  if (displayDateCal.get(Calendar.AM_PM) == Calendar.PM) {
    displayDateHour+=12;
  }
  boolean allowPingbacks=entry.isAllowPingbacks();
  boolean allowTrackbacks=entry.isAllowTrackbacks();
  String[] trackbacks=StringUtil.split(entry.getTrackbacks());
  String smallImageFileName=null;
  InputStream smallImageInputStream=null;
  try {
    if (entry.isSmallImage()) {
      String smallImagePath=entryElement.attributeValue("small-image-path");
      if (Validator.isNotNull(entry.getSmallImageURL())) {
        String smallImageURL=ExportImportHelperUtil.replaceImportContentReferences(portletDataContext,entry,entry.getSmallImageURL());
        entry.setSmallImageURL(smallImageURL);
      }
 else       if (Validator.isNotNull(smallImagePath)) {
        smallImageFileName=entry.getSmallImageId() + StringPool.PERIOD + entry.getSmallImageType();
        smallImageInputStream=portletDataContext.getZipEntryAsInputStream(smallImagePath);
      }
    }
    List<Element> attachmentElements=portletDataContext.getReferenceDataElements(entry,DLFileEntry.class,PortletDataContext.REFERENCE_TYPE_WEAK);
    long smallImageFileEntryId=0;
    for (    Element attachmentElement : attachmentElements) {
      String path=attachmentElement.attributeValue("path");
      FileEntry fileEntry=(FileEntry)portletDataContext.getZipEntryAsObject(path);
      if (fileEntry != null) {
        smallImageFileEntryId=fileEntry.getFileEntryId();
      }
    }
    ServiceContext serviceContext=portletDataContext.createServiceContext(entry);
    BlogsEntry importedEntry=null;
    if (portletDataContext.isDataStrategyMirror()) {
      serviceContext.setAttribute("urlTitle",entry.getUrlTitle());
      BlogsEntry existingEntry=fetchStagedModelByUuidAndGroupId(entry.getUuid(),portletDataContext.getScopeGroupId());
      if (existingEntry == null) {
        serviceContext.setUuid(entry.getUuid());
        importedEntry=BlogsEntryLocalServiceUtil.addEntry(userId,entry.getTitle(),entry.getSubtitle(),entry.getDescription(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,entry.isSmallImage(),entry.getSmallImageURL(),smallImageFileName,smallImageInputStream,smallImageFileEntryId,serviceContext);
      }
 else {
        importedEntry=BlogsEntryLocalServiceUtil.updateEntry(userId,existingEntry.getEntryId(),entry.getTitle(),entry.getSubtitle(),entry.getDescription(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,entry.isSmallImage(),entry.getSmallImageURL(),smallImageFileName,smallImageInputStream,smallImageFileEntryId,serviceContext);
      }
    }
 else {
      importedEntry=BlogsEntryLocalServiceUtil.addEntry(userId,entry.getTitle(),entry.getSubtitle(),entry.getDescription(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,entry.isSmallImage(),entry.getSmallImageURL(),smallImageFileName,smallImageInputStream,smallImageFileEntryId,serviceContext);
    }
    portletDataContext.importClassedModel(entry,importedEntry);
  }
  finally {
    StreamUtil.cleanUp(smallImageInputStream);
  }
}
