{
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  long userId=themeDisplay.getUserId();
  Layout layout=themeDisplay.getLayout();
  LayoutTypePortlet layoutTypePortlet=themeDisplay.getLayoutTypePortlet();
  PermissionChecker permissionChecker=themeDisplay.getPermissionChecker();
  String cmd=ParamUtil.getString(request,Constants.CMD);
  String portletId=ParamUtil.getString(request,"p_p_id");
  boolean updateLayout=true;
  boolean deletePortlet=false;
  if (cmd.equals(Constants.ADD)) {
    String columnId=ParamUtil.getString(request,"p_p_col_id",null);
    int columnPos=ParamUtil.getInteger(request,"p_p_col_pos",-1);
    portletId=layoutTypePortlet.addPortletId(userId,portletId,columnId,columnPos);
    if (layoutTypePortlet.isPersonalizable() && layoutTypePortlet.isPersonalizedView() && !layoutTypePortlet.isColumnDisabled(columnId)) {
      updateLayout=false;
    }
  }
 else   if (cmd.equals(Constants.DELETE)) {
    if (layoutTypePortlet.hasPortletId(portletId)) {
      layoutTypePortlet.removePortletId(userId,portletId);
      if (layoutTypePortlet.isPersonalizable() && layoutTypePortlet.isPersonalizedView()) {
        updateLayout=false;
        deletePortlet=false;
      }
 else {
        deletePortlet=true;
      }
    }
  }
 else   if (cmd.equals("drag")) {
    if (LayoutPermissionUtil.contains(permissionChecker,layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),ActionKeys.UPDATE)) {
      String height=ParamUtil.getString(request,"height");
      String width=ParamUtil.getString(request,"width");
      String top=ParamUtil.getString(request,"top");
      String left=ParamUtil.getString(request,"left");
      PortletPreferences preferences=PortletPreferencesFactoryUtil.getLayoutPortletSetup(layout,portletId);
      StringBundler sb=new StringBundler(12);
      sb.append("height=");
      sb.append(height);
      sb.append("\n");
      sb.append("width=");
      sb.append(width);
      sb.append("\n");
      sb.append("top=");
      sb.append(top);
      sb.append("\n");
      sb.append("left=");
      sb.append(left);
      sb.append("\n");
      preferences.setValue("portlet-freeform-styles",sb.toString());
      preferences.store();
    }
  }
 else   if (cmd.equals("minimize")) {
    boolean restore=ParamUtil.getBoolean(request,"p_p_restore");
    if (restore) {
      layoutTypePortlet.removeStateMinPortletId(portletId);
    }
 else {
      layoutTypePortlet.addStateMinPortletId(portletId);
    }
    updateLayout=false;
  }
 else   if (cmd.equals("move")) {
    String columnId=ParamUtil.getString(request,"p_p_col_id");
    int columnPos=ParamUtil.getInteger(request,"p_p_col_pos");
    layoutTypePortlet.movePortletId(userId,portletId,columnId,columnPos);
    if (layoutTypePortlet.isPersonalizable() && layoutTypePortlet.isPersonalizedView() && !layoutTypePortlet.isColumnDisabled(columnId)) {
      updateLayout=false;
    }
  }
 else   if (cmd.equals("select_layout_revision")) {
    long layoutRevisionId=ParamUtil.getLong(request,"layoutRevisionId");
    long layoutSetBranchId=ParamUtil.getLong(request,"layoutSetBranchId");
    StagingUtil.setRecentLayoutRevisionId(request,layoutSetBranchId,layout.getPlid(),layoutRevisionId);
    updateLayout=false;
  }
 else   if (cmd.equals("update_type_settings")) {
    UnicodeProperties layoutTypeSettingsProperties=layout.getTypeSettingsProperties();
    UnicodeProperties formTypeSettingsProperties=PropertiesParamUtil.getProperties(request,"TypeSettingsProperties--");
    layoutTypeSettingsProperties.putAll(formTypeSettingsProperties);
  }
 else   if (cmd.equals("toggle_personalized_view")) {
    updateLayout=false;
  }
  if (updateLayout) {
    layoutTypePortlet.resetModes();
    layoutTypePortlet.resetStates();
    layout=LayoutServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),layout.getTypeSettings());
    if (deletePortlet) {
      String rootPortletId=PortletConstants.getRootPortletId(portletId);
      ResourceLocalServiceUtil.deleteResource(layout.getCompanyId(),rootPortletId,ResourceConstants.SCOPE_INDIVIDUAL,PortletPermissionUtil.getPrimaryKey(layout.getPlid(),portletId));
    }
  }
 else {
    LayoutClone layoutClone=LayoutCloneFactory.getInstance();
    if (layoutClone != null) {
      layoutClone.update(request,layout.getPlid(),layout.getTypeSettings());
    }
  }
  if (cmd.equals(Constants.ADD) && (portletId != null)) {
    addPortlet(mapping,form,request,response,portletId);
  }
  return StringPool.BLANK;
}
