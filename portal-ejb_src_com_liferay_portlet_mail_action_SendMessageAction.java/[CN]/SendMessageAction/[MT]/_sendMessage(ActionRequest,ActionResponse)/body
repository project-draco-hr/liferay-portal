{
  PortletSession ses=req.getPortletSession();
  PortletPreferences prefs=req.getPreferences();
  String to=req.getParameter("msg_to");
  String subject=req.getParameter("msg_sub");
  String cc=req.getParameter("msg_cc");
  String bcc=req.getParameter("msg_bcc");
  String body=req.getParameter("msg_body");
  boolean returnReceipt=false;
  String returnReceiptParam=req.getParameter("msg_return_receipt_1");
  if ((Validator.isNotNull(returnReceiptParam)) && (returnReceiptParam.equals("on"))) {
    returnReceipt=true;
  }
  boolean htmlFormat=false;
  String htmlFormatParam=req.getParameter("html_cb_1");
  if ((Validator.isNotNull(htmlFormatParam)) && (htmlFormatParam.equals("on"))) {
    htmlFormat=true;
  }
  Message msg=(Message)ses.getAttribute(WebKeys.MAIL_MESSAGE,PortletSession.APPLICATION_SCOPE);
  if (msg == null) {
    throw new MailMessageException();
  }
  User user=PortalUtil.getUser(req);
  MailAccount account=MailAccounts.getCurrentAccount(req);
  msg.setFrom(new InternetAddress(account.getEmailAddress(),user.getFullName()));
  String replyToAddress=prefs.getValue("reply-to-address",StringPool.BLANK);
  if (Validator.isNotNull(replyToAddress)) {
    if (!account.getEmailAddress().equals(replyToAddress)) {
      InternetAddress[] replyTo=new InternetAddress[1];
      replyTo[0]=new InternetAddress(replyToAddress,user.getFullName());
      msg.setReplyTo(replyTo);
    }
  }
  msg.setRecipients(Message.RecipientType.TO,MailUtil.parseAddresses(req,to));
  msg.setSubject(subject);
  if (cc != null) {
    msg.setRecipients(Message.RecipientType.CC,MailUtil.parseAddresses(req,cc));
  }
  InternetAddress[] auditTrail=InternetAddress.parse(PropsUtil.get(PropsUtil.MAIL_AUDIT_TRAIL));
  if (bcc != null) {
    InternetAddress[] bccAddresses=MailUtil.parseAddresses(req,bcc);
    InternetAddress[] allBccAddresses=new InternetAddress[bccAddresses.length + auditTrail.length];
    System.arraycopy(bccAddresses,0,allBccAddresses,0,bccAddresses.length);
    System.arraycopy(auditTrail,0,allBccAddresses,bccAddresses.length,auditTrail.length);
    msg.setRecipients(Message.RecipientType.BCC,allBccAddresses);
  }
 else   if (auditTrail.length > 0) {
    msg.setRecipients(Message.RecipientType.BCC,auditTrail);
  }
  msg.setSentDate(new Date());
  BodyPart bodyPart=new MimeBodyPart();
  if (htmlFormat) {
    bodyPart.setContent(body,Constants.TEXT_HTML);
  }
 else {
    bodyPart.setText(body);
  }
  Multipart multipart=(Multipart)msg.getContent();
  multipart.removeBodyPart(0);
  multipart.addBodyPart(bodyPart,0);
  if (returnReceipt && htmlFormat) {
    try {
      Company company=PortalUtil.getCompany(req);
      PortletContext portletCtx=req.getPortletSession().getPortletContext();
      String mainPath=(String)portletCtx.getAttribute(WebKeys.MAIN_PATH);
      _sendReceiptMessage(company,mainPath,msg,body,htmlFormat);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    Transport.send(msg);
  }
  Message[] messages={msg};
  Folder sentMailFolder=MailUtil.getFolder(req,MailUtil.MAIL_BOX_STYLE + MailUtil.MAIL_SENT_NAME);
  sentMailFolder.appendMessages(messages);
  com.liferay.portlet.mail.model.Message msgModel=(com.liferay.portlet.mail.model.Message)ses.getAttribute(WebKeys.MAIL_MESSAGE_MODEL,PortletSession.APPLICATION_SCOPE);
  if (msgModel.isDraft()) {
    Message oldMsg=msgModel.getMessage();
    Message[] oldMessages={oldMsg};
    Folder draftFolder=MailUtil.getFolder(req,MailUtil.MAIL_BOX_STYLE + MailUtil.MAIL_DRAFTS_NAME);
    draftFolder.setFlags(oldMessages,new Flags(Flags.Flag.DELETED),true);
    draftFolder.expunge();
  }
 else   if (Validator.isNumber(msgModel.getParentNumber())) {
    Folder folder=MailUtil.getFolder(req,msgModel.getParentFolder());
    Message parentMessage=null;
    try {
      parentMessage=folder.getMessage(Integer.parseInt(msgModel.getParentNumber()));
    }
 catch (    IndexOutOfBoundsException ioobe) {
    }
    if (parentMessage != null) {
      parentMessage.setFlag(Flags.Flag.ANSWERED,true);
    }
  }
  ses.removeAttribute(WebKeys.MAIL_MESSAGE,PortletSession.APPLICATION_SCOPE);
  ses.removeAttribute(WebKeys.MAIL_MESSAGE_MODEL,PortletSession.APPLICATION_SCOPE);
  String redirect=ParamUtil.getString(req,"redirect");
  if (Validator.isNull(redirect)) {
    PortletURL portletURL=((ActionResponseImpl)res).createRenderURL();
    portletURL.setParameter("struts_action","/mail/view_folder");
    String msgType=msgModel.getMessageType();
    if ((msgType != null) && ((msgType.equals("forward")) || (msgType.equals("reply")) || (msgType.equals("reply_all")))) {
      if ((Validator.isNotNull(msgModel.getParentFolder())) && (Validator.isNotNull(msgModel.getParentFolder()))) {
        portletURL.setParameter("folder_name",msgModel.getParentFolder());
        portletURL.setParameter("msg_num",msgModel.getParentNumber());
      }
    }
    redirect=portletURL.toString();
  }
  res.sendRedirect(redirect);
}
