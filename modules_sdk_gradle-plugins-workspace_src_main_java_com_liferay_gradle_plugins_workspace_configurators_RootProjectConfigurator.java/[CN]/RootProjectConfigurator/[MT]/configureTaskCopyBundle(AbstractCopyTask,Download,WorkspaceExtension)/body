{
  abstractCopyTask.dependsOn(downloadBundleTask);
  abstractCopyTask.from(new Callable<FileCollection>(){
    @Override public FileCollection call() throws Exception {
      Project project=abstractCopyTask.getProject();
      File dir=downloadBundleTask.getDest();
      URL url=(URL)downloadBundleTask.getSrc();
      String fileName=url.toString();
      fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
      File file=new File(dir,fileName);
      if (fileName.endsWith(".tar.gz")) {
        return project.tarTree(file);
      }
 else {
        return project.zipTree(file);
      }
    }
  }
,new Closure<Void>(null){
    @SuppressWarnings("unused") public void doCall(    CopySpec copySpec){
      copySpec.eachFile(new StripPathSegmentsAction(1));
    }
  }
);
  abstractCopyTask.from(new Closure<Void>(null){
    @SuppressWarnings("unused") public FileCollection doCall(){
      Project project=abstractCopyTask.getProject();
      Map<String,Object> args=new HashMap<>();
      args.put("dir",workspaceExtension.getConfigsDir());
      args.put("exclude","**/.touch");
      List<String> includes=Arrays.asList("common/",workspaceExtension.getEnvironment() + "/");
      args.put("includes",includes);
      return project.fileTree(args);
    }
  }
,new Closure<Void>(null){
    @SuppressWarnings("unused") public void doCall(    CopySpec copySpec){
      copySpec.eachFile(new StripPathSegmentsAction(1));
    }
  }
);
}
