{
  if (!InlineSQLHelperUtil.isEnabled(groupId)) {
    return findByG_F_S(groupId,folderIds,status,start,end,orderByComparator);
  }
  if (folderIds == null) {
    folderIds=new long[0];
  }
 else   if (folderIds.length > 1) {
    folderIds=ArrayUtil.unique(folderIds);
    Arrays.sort(folderIds);
  }
  StringBundler query=new StringBundler();
  query.append(_SQL_SELECT_BOOKMARKSENTRY_WHERE);
  query.append(_FINDER_COLUMN_G_F_S_GROUPID_2);
  if (folderIds.length > 0) {
    query.append(StringPool.OPEN_PARENTHESIS);
    query.append(_FINDER_COLUMN_G_F_S_FOLDERID_7);
    query.append(StringUtil.merge(folderIds));
    query.append(StringPool.CLOSE_PARENTHESIS);
    query.append(StringPool.CLOSE_PARENTHESIS);
    query.append(WHERE_AND);
  }
  query.append(_FINDER_COLUMN_G_F_S_STATUS_2);
  query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
  if (orderByComparator != null) {
    appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
  }
 else {
    query.append(BookmarksEntryModelImpl.ORDER_BY_JPQL);
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),BookmarksEntry.class.getName(),_FILTER_ENTITY_TABLE_FILTER_PK_COLUMN,_FILTER_ENTITY_TABLE_FILTER_USERID_COLUMN,groupId);
  Session session=null;
  try {
    session=openSession();
    Query q=session.createQuery(sql);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    qPos.add(status);
    return (List<BookmarksEntry>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
