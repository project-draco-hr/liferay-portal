{
  try {
    User user=UserUtil.findByPrimaryKey(userId);
    IGFolder folder=IGFolderUtil.findByPrimaryKey(folderId);
    BufferedImage bufferedImage=ImageIO.read(file);
    byte[] bytes=FileUtil.getBytes(file);
    Date now=new Date();
    validate(file,bytes);
    long imageId=CounterLocalServiceUtil.increment();
    IGImage image=IGImageUtil.create(imageId);
    image.setCompanyId(user.getCompanyId());
    image.setUserId(user.getUserId());
    image.setCreateDate(now);
    image.setModifiedDate(now);
    image.setFolderId(folderId);
    image.setDescription(description);
    image.setSmallImageId(CounterLocalServiceUtil.increment());
    image.setLargeImageId(CounterLocalServiceUtil.increment());
    IGImageUtil.update(image);
    saveImages(image.getLargeImageId(),bufferedImage,image.getSmallImageId(),file,bytes,contentType);
    if ((addCommunityPermissions != null) && (addGuestPermissions != null)) {
      addImageResources(folder,image,addCommunityPermissions.booleanValue(),addGuestPermissions.booleanValue());
    }
 else {
      addImageResources(folder,image,communityPermissions,guestPermissions);
    }
    TagsAssetLocalServiceUtil.updateAsset(userId,IGImage.class.getName(),image.getImageId(),tagsEntries);
    return image;
  }
 catch (  IOException ioe) {
    throw new ImageSizeException(ioe);
  }
}
