{
  try {
    byte[] bytes=FileUtil.getBytes(file);
    validate(file,bytes);
    User user=userPersistence.findByPrimaryKey(userId);
    IGFolder folder=igFolderPersistence.findByPrimaryKey(folderId);
    RenderedImage renderedImage=ImageUtil.read(file).getRenderedImage();
    Date now=new Date();
    long imageId=counterLocalService.increment();
    IGImage image=igImagePersistence.create(imageId);
    image.setUuid(uuid);
    image.setCompanyId(user.getCompanyId());
    image.setUserId(user.getUserId());
    image.setCreateDate(now);
    image.setModifiedDate(now);
    image.setFolderId(folderId);
    image.setDescription(description);
    image.setSmallImageId(counterLocalService.increment());
    image.setLargeImageId(counterLocalService.increment());
    if ((PropsValues.IG_IMAGE_CUSTOM_1_MAX_HEIGHT > 0) && (PropsValues.IG_IMAGE_CUSTOM_1_MAX_WIDTH > 0)) {
      image.setCustom1ImageId(counterLocalService.increment());
    }
    if ((PropsValues.IG_IMAGE_CUSTOM_2_MAX_HEIGHT > 0) && (PropsValues.IG_IMAGE_CUSTOM_2_MAX_WIDTH > 0)) {
      image.setCustom2ImageId(counterLocalService.increment());
    }
    igImagePersistence.update(image);
    saveImages(image.getLargeImageId(),renderedImage,image.getSmallImageId(),image.getCustom1ImageId(),image.getCustom2ImageId(),file,bytes,contentType);
    if ((addCommunityPermissions != null) && (addGuestPermissions != null)) {
      addImageResources(folder,image,addCommunityPermissions.booleanValue(),addGuestPermissions.booleanValue());
    }
 else {
      addImageResources(folder,image,communityPermissions,guestPermissions);
    }
    updateTagsAsset(userId,image,tagsEntries);
    try {
      Indexer.addImage(image.getCompanyId(),folder.getGroupId(),folderId,imageId,description,tagsEntries);
    }
 catch (    IOException ioe) {
      _log.error("Indexing " + imageId,ioe);
    }
    return image;
  }
 catch (  IOException ioe) {
    throw new ImageSizeException(ioe);
  }
}
