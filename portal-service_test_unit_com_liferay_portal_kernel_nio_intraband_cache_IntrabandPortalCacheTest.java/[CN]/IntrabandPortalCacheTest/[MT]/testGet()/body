{
  final String testKey="testKey";
  final String testValue="testValue";
  final AtomicReference<RuntimeException> runtimeExceptionReference=new AtomicReference<RuntimeException>();
  MockIntraband mockIntraband=new MockIntraband(){
    @Override protected void doSendDatagram(    RegistrationReference registrationReference,    Datagram datagram){
      RuntimeException runtimeException=runtimeExceptionReference.get();
      if (runtimeException != null) {
        throw runtimeException;
      }
      PortalCacheActionType[] portalCacheActionTypes=PortalCacheActionType.values();
      Deserializer deserializer=new Deserializer(datagram.getDataByteBuffer());
      Assert.assertEquals(PortalCacheActionType.GET,portalCacheActionTypes[deserializer.readInt()]);
      Assert.assertEquals(_testName,deserializer.readString());
      try {
        Assert.assertEquals(testKey,deserializer.readObject());
      }
 catch (      ClassNotFoundException cnfe) {
        Assert.fail();
      }
      super.doSendDatagram(registrationReference,datagram);
      Serializer serializer=new Serializer();
      serializer.writeObject(testValue);
      DatagramHelper.getCompletionHandler(datagram).replied(null,Datagram.createResponseDatagram(datagram,serializer.toByteBuffer()));
    }
  }
;
  IntrabandPortalCache<String,String> intrabandPortalCache=new IntrabandPortalCache<String,String>(_testName,new MockRegistrationReference(mockIntraband));
  Assert.assertEquals(testValue,intrabandPortalCache.get(testKey));
  CaptureHandler captureHandler=null;
  try {
    captureHandler=JDKLoggerTestUtil.configureJDKLogger(IntrabandPortalCache.class.getName(),Level.WARNING);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    RuntimeException runtimeException=new RuntimeException();
    runtimeExceptionReference.set(runtimeException);
    Assert.assertNull(intrabandPortalCache.get(testKey));
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Unable to get, coverting to cache miss",logRecord.getMessage());
    Assert.assertSame(runtimeException,logRecord.getThrown());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    Assert.assertNull(intrabandPortalCache.get(testKey));
    Assert.assertTrue(logRecords.isEmpty());
  }
  finally {
    if (captureHandler != null) {
      captureHandler.close();
    }
  }
}
