{
  final List<String> testKeys=Arrays.asList("testKey1","testKey2","testKey3");
  final List<String> testValues=Arrays.asList("testValue1","testValue2","testValue3");
  final AtomicReference<RuntimeException> runtimeExceptionReference=new AtomicReference<RuntimeException>();
  MockIntraband mockIntraBand=new MockIntraband(){
    @Override protected void doSendDatagram(    RegistrationReference registrationReference,    Datagram datagram){
      RuntimeException runtimeException=runtimeExceptionReference.get();
      if (runtimeException != null) {
        throw runtimeException;
      }
      Deserializer deserializer=new Deserializer(datagram.getDataByteBuffer());
      int actionTypeOrdinal=deserializer.readInt();
      PortalCacheActionType[] portalCacheActionTypes=PortalCacheActionType.values();
      Assert.assertEquals(PortalCacheActionType.GET_BULK,portalCacheActionTypes[actionTypeOrdinal]);
      Assert.assertEquals(_testName,deserializer.readString());
      try {
        Assert.assertEquals(testKeys,deserializer.readObject());
      }
 catch (      ClassNotFoundException cnfe) {
        Assert.fail();
      }
      super.doSendDatagram(registrationReference,datagram);
      Serializer serializer=new Serializer();
      serializer.writeObject((Serializable)testValues);
      DatagramHelper.getCompletionHandler(datagram).replied(null,Datagram.createResponseDatagram(datagram,serializer.toByteBuffer()));
    }
  }
;
  IntrabandPortalCache<String,String> intraBandPortalCache=new IntrabandPortalCache<String,String>(_testName,new MockRegistrationReference(mockIntraBand));
  Assert.assertEquals(testValues,intraBandPortalCache.get(testKeys));
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(IntrabandPortalCache.class.getName(),Level.WARNING);
  RuntimeException runtimeException=new RuntimeException();
  runtimeExceptionReference.set(runtimeException);
  Assert.assertEquals(Arrays.asList(null,null,null),intraBandPortalCache.get(testKeys));
  Assert.assertEquals(1,logRecords.size());
  LogRecord logRecord=logRecords.get(0);
  Assert.assertEquals("Unable to bulk get, coverting to cache miss",logRecord.getMessage());
  Assert.assertSame(runtimeException,logRecord.getThrown());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(IntrabandPortalCache.class.getName(),Level.OFF);
  Assert.assertEquals(Arrays.asList(null,null,null),intraBandPortalCache.get(testKeys));
  Assert.assertTrue(logRecords.isEmpty());
}
