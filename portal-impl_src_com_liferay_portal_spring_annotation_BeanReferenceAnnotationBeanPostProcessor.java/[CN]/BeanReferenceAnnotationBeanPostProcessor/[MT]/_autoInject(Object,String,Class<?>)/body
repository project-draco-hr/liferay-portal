{
  if (beanClass == null) {
    return;
  }
  String className=beanClass.getName();
  if (className.equals(Object.class.getName())) {
    return;
  }
  AutoInject autoInject=beanClass.getAnnotation(AutoInject.class);
  if (autoInject == null) {
    _autoInject(targetBean,targetBeanName,beanClass.getSuperclass());
  }
 else   if (autoInject.enable()) {
    Field[] fields=beanClass.getDeclaredFields();
    for (    Field field : fields) {
      BeanReference beanReference=field.getAnnotation(BeanReference.class);
      if (beanReference == null) {
        continue;
      }
      String referencedBeanName=beanReference.name();
      Object referencedBean=_beans.get(referencedBeanName);
      if (referencedBean == null) {
        referencedBean=_beanFactory.getBean(referencedBeanName);
        _beans.put(referencedBeanName,referencedBean);
      }
      ReflectionUtils.makeAccessible(field);
      try {
        field.set(targetBean,referencedBean);
      }
 catch (      Throwable t) {
        throw new BeanCreationException(targetBeanName,"Could not inject BeanReference fields",t);
      }
    }
  }
  return;
}
