{
  long pk=nextLong();
  PollsVote newPollsVote=_persistence.create(pk);
  newPollsVote.setCompanyId(nextLong());
  newPollsVote.setUserId(nextLong());
  newPollsVote.setUserName(randomString());
  newPollsVote.setCreateDate(nextDate());
  newPollsVote.setModifiedDate(nextDate());
  newPollsVote.setQuestionId(nextLong());
  newPollsVote.setChoiceId(nextLong());
  newPollsVote.setVoteDate(nextDate());
  _persistence.update(newPollsVote,false);
  PollsVote existingPollsVote=_persistence.findByPrimaryKey(newPollsVote.getPrimaryKey());
  assertEquals(existingPollsVote.getVoteId(),newPollsVote.getVoteId());
  assertEquals(existingPollsVote.getCompanyId(),newPollsVote.getCompanyId());
  assertEquals(existingPollsVote.getUserId(),newPollsVote.getUserId());
  assertEquals(existingPollsVote.getUserName(),newPollsVote.getUserName());
  assertEquals(Time.getShortTimestamp(existingPollsVote.getCreateDate()),Time.getShortTimestamp(newPollsVote.getCreateDate()));
  assertEquals(Time.getShortTimestamp(existingPollsVote.getModifiedDate()),Time.getShortTimestamp(newPollsVote.getModifiedDate()));
  assertEquals(existingPollsVote.getQuestionId(),newPollsVote.getQuestionId());
  assertEquals(existingPollsVote.getChoiceId(),newPollsVote.getChoiceId());
  assertEquals(Time.getShortTimestamp(existingPollsVote.getVoteDate()),Time.getShortTimestamp(newPollsVote.getVoteDate()));
}
