{
  long pk=ServiceTestUtil.nextLong();
  EmailAddress newEmailAddress=_persistence.create(pk);
  newEmailAddress.setCompanyId(ServiceTestUtil.nextLong());
  newEmailAddress.setUserId(ServiceTestUtil.nextLong());
  newEmailAddress.setUserName(ServiceTestUtil.randomString());
  newEmailAddress.setCreateDate(ServiceTestUtil.nextDate());
  newEmailAddress.setModifiedDate(ServiceTestUtil.nextDate());
  newEmailAddress.setClassNameId(ServiceTestUtil.nextLong());
  newEmailAddress.setClassPK(ServiceTestUtil.nextLong());
  newEmailAddress.setAddress(ServiceTestUtil.randomString());
  newEmailAddress.setTypeId(ServiceTestUtil.nextInt());
  newEmailAddress.setPrimary(ServiceTestUtil.randomBoolean());
  _persistence.update(newEmailAddress,false);
  EmailAddress existingEmailAddress=_persistence.findByPrimaryKey(newEmailAddress.getPrimaryKey());
  Assert.assertEquals(existingEmailAddress.getEmailAddressId(),newEmailAddress.getEmailAddressId());
  Assert.assertEquals(existingEmailAddress.getCompanyId(),newEmailAddress.getCompanyId());
  Assert.assertEquals(existingEmailAddress.getUserId(),newEmailAddress.getUserId());
  Assert.assertEquals(existingEmailAddress.getUserName(),newEmailAddress.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingEmailAddress.getCreateDate()),Time.getShortTimestamp(newEmailAddress.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingEmailAddress.getModifiedDate()),Time.getShortTimestamp(newEmailAddress.getModifiedDate()));
  Assert.assertEquals(existingEmailAddress.getClassNameId(),newEmailAddress.getClassNameId());
  Assert.assertEquals(existingEmailAddress.getClassPK(),newEmailAddress.getClassPK());
  Assert.assertEquals(existingEmailAddress.getAddress(),newEmailAddress.getAddress());
  Assert.assertEquals(existingEmailAddress.getTypeId(),newEmailAddress.getTypeId());
  Assert.assertEquals(existingEmailAddress.getPrimary(),newEmailAddress.getPrimary());
}
