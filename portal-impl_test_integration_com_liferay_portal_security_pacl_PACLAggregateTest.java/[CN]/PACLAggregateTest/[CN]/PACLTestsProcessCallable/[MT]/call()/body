{
  ProxySelector.setDefault(new DummySocksProxySelector());
  URL resource=PACLTestRule.class.getResource("pacl-test.properties");
  if (resource != null) {
    System.setProperty("external-properties",resource.getPath());
  }
  System.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.apache.naming.java.javaURLContextFactory");
  System.setProperty("catalina.base",".");
  List<CaptureAppender> captureAppenders=null;
  Path tempStatePath=null;
  try {
    tempStatePath=Files.createTempDirectory(null);
    System.setProperty("portal:" + PropsKeys.MODULE_FRAMEWORK_STATE_DIR,tempStatePath.toString());
    com.liferay.portal.kernel.util.PropsUtil.setProps(new PropsImpl());
    SystemProperties.set("log4j.configure.on.startup",StringPool.FALSE);
    Log4JUtil.configureLog4J(PACLTestsProcessCallable.class.getClassLoader());
    captureAppenders=LogAssertionTestCallback.startAssert(Collections.<ExpectedLogs>emptyList());
    return BridgeJUnitTestRunner.runBridgeTests(new ProcessBridgeRunListener(PACLAggregateTest.class),_classes.toArray(new Class<?>[_classes.size()]));
  }
 catch (  IOException ioe) {
    throw new ProcessException(ioe);
  }
 finally {
    InitUtil.stopRuntime();
    InitUtil.stopModuleFramework();
    MPIHelperUtil.shutdown();
    if (tempStatePath != null) {
      try {
        Files.walkFileTree(tempStatePath,new SimpleFileVisitor<Path>(){
          @Override public FileVisitResult postVisitDirectory(          Path path,          IOException ioe) throws IOException {
            Files.delete(path);
            return FileVisitResult.CONTINUE;
          }
          @Override public FileVisitResult visitFile(          Path path,          BasicFileAttributes basicFileAttributes) throws IOException {
            Files.delete(path);
            return FileVisitResult.CONTINUE;
          }
        }
);
      }
 catch (      IOException ioe) {
        throw new ProcessException(ioe);
      }
      LogAssertionTestCallback.endAssert(Collections.<ExpectedLogs>emptyList(),captureAppenders);
    }
  }
}
