{
  List listenersList=new ArrayList();
  String[] listeners=PropsUtil.getArray(PropsUtil.JOURNAL_TRANSFORMER_LISTENER);
  for (int i=0; i < listeners.length; i++) {
    TransformerListener listener=null;
    try {
      listener=(TransformerListener)Class.forName(listeners[i]).newInstance();
      listener.setTokens(tokens);
      listener.setLanguageId(languageId);
      listenersList.add(listener);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (_log.isDebugEnabled()) {
      _log.debug("XML before listener\n" + xml);
    }
    if (listener != null) {
      xml=listener.onXml(xml);
      if (_log.isDebugEnabled()) {
        _log.debug("XML after listener\n" + xml);
      }
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Transform script before listener\n" + script);
    }
    if (listener != null) {
      script=listener.onScript(script);
      if (_log.isDebugEnabled()) {
        _log.debug("Transform script after listener\n" + script);
      }
    }
  }
  String output=null;
  if (Validator.isNull(langType)) {
    output=xml;
  }
 else   if (langType.equals(JournalTemplateImpl.LANG_TYPE_VM)) {
    output=JournalVmUtil.transform(tokens,languageId,xml,script);
  }
 else   if (langType.equals(JournalTemplateImpl.LANG_TYPE_XSL)) {
    output=JournalXslUtil.transform(tokens,languageId,xml,script);
  }
  for (int i=0; i < listenersList.size(); i++) {
    TransformerListener listener=(TransformerListener)listenersList.get(i);
    if (_log.isDebugEnabled()) {
      _log.debug("Output before listener\n" + output);
    }
    output=listener.onOutput(output);
    if (_log.isDebugEnabled()) {
      _log.debug("Output after listener\n" + output);
    }
  }
  return output;
}
