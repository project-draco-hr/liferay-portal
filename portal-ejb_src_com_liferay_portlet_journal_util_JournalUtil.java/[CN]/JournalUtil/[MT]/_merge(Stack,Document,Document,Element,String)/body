{
  String elPath="";
  for (int i=0; i < path.size(); i++) {
    elPath+="/" + path.elementAt(i);
  }
  for (int i=0; i < xsdEl.nodeCount(); i++) {
    Node xsdNode=xsdEl.node(i);
    if ((xsdNode instanceof Element) && (xsdNode.getName().equals("dynamic-element"))) {
      Element xsdElement=(Element)xsdNode;
      String localPath="dynamic-element[@name='" + xsdElement.attributeValue("name") + "']";
      String fullPath=elPath + "/" + localPath;
      XPath xPathSelector=DocumentHelper.createXPath(fullPath);
      List curElements=xPathSelector.selectNodes(curDoc);
      Element newEl=(Element)xPathSelector.selectNodes(newDoc).get(0);
      if (curElements.size() > 0) {
        Element curEl=(Element)curElements.get(0);
        List curDynamicContents=curEl.elements("dynamic-content");
        Element newContentEl=newEl.element("dynamic-content");
        String newContentLanguageId=newContentEl.attributeValue("language-id",StringPool.BLANK);
        if (newContentLanguageId.equals(StringPool.BLANK)) {
          for (int k=curDynamicContents.size() - 1; k >= 0; k--) {
            Element curContentEl=(Element)curDynamicContents.get(k);
            String curContentLanguageId=curContentEl.attributeValue("language-id",StringPool.BLANK);
            if ((curEl.attributeValue("type").equals("image")) && (!curContentLanguageId.equals(defaultLocale) && !curContentLanguageId.equals(StringPool.BLANK))) {
              ImageLocalUtil.remove(curContentEl.attributeValue("id"));
            }
            curContentEl.detach();
          }
          curEl.content().add(newContentEl.createCopy());
        }
 else {
          boolean match=false;
          for (int k=curDynamicContents.size() - 1; k >= 0; k--) {
            Element curContentEl=(Element)curDynamicContents.get(k);
            String curContentLanguageId=curContentEl.attributeValue("language-id",StringPool.BLANK);
            if ((newContentLanguageId.equals(curContentLanguageId)) || (newContentLanguageId.equals(defaultLocale) && curContentLanguageId.equals(StringPool.BLANK))) {
              curContentEl.detach();
              curEl.content().add(k,newContentEl.createCopy());
              match=true;
            }
            if (curContentLanguageId.equals(StringPool.BLANK)) {
              curContentEl.addAttribute("language-id",defaultLocale);
            }
          }
          if (!match) {
            curEl.content().add(newContentEl.createCopy());
          }
        }
      }
 else {
        xPathSelector=DocumentHelper.createXPath(elPath);
        Element parentEl=(Element)xPathSelector.selectNodes(curDoc).get(0);
        parentEl.content().add(newEl.createCopy());
      }
      String xsdElementType=xsdElement.attributeValue("type",StringPool.BLANK);
      if (!xsdElementType.equals("list") && !xsdElementType.equals("multi-list")) {
        path.push(localPath);
        _merge(path,curDoc,newDoc,xsdElement,defaultLocale);
        path.pop();
      }
    }
  }
}
