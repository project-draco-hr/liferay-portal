{
  boolean pagination=true;
  FinderPath finderPath=null;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    pagination=false;
    finderPath=FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_N_T;
    finderArgs=new Object[]{groupId,name,taskExecutorClassName};
  }
 else {
    finderPath=FINDER_PATH_WITH_PAGINATION_FIND_BY_G_N_T;
    finderArgs=new Object[]{groupId,name,taskExecutorClassName,start,end,orderByComparator};
  }
  List<BackgroundTask> list=(List<BackgroundTask>)FinderCacheUtil.getResult(finderPath,finderArgs,this);
  if ((list != null) && !list.isEmpty()) {
    for (    BackgroundTask backgroundTask : list) {
      if ((groupId != backgroundTask.getGroupId()) || !Validator.equals(name,backgroundTask.getName()) || !Validator.equals(taskExecutorClassName,backgroundTask.getTaskExecutorClassName())) {
        list=null;
        break;
      }
    }
  }
  if (list == null) {
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(5 + (orderByComparator.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(5);
    }
    query.append(_SQL_SELECT_BACKGROUNDTASK_WHERE);
    query.append(_FINDER_COLUMN_G_N_T_GROUPID_2);
    boolean bindName=false;
    if (name == null) {
      query.append(_FINDER_COLUMN_G_N_T_NAME_1);
    }
 else     if (name.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_N_T_NAME_3);
    }
 else {
      bindName=true;
      query.append(_FINDER_COLUMN_G_N_T_NAME_2);
    }
    boolean bindTaskExecutorClassName=false;
    if (taskExecutorClassName == null) {
      query.append(_FINDER_COLUMN_G_N_T_TASKEXECUTORCLASSNAME_1);
    }
 else     if (taskExecutorClassName.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_N_T_TASKEXECUTORCLASSNAME_3);
    }
 else {
      bindTaskExecutorClassName=true;
      query.append(_FINDER_COLUMN_G_N_T_TASKEXECUTORCLASSNAME_2);
    }
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else     if (pagination) {
      query.append(BackgroundTaskModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      if (bindName) {
        qPos.add(name);
      }
      if (bindTaskExecutorClassName) {
        qPos.add(taskExecutorClassName);
      }
      if (!pagination) {
        list=(List<BackgroundTask>)QueryUtil.list(q,getDialect(),start,end,false);
        Collections.sort(list);
        list=new UnmodifiableList<BackgroundTask>(list);
      }
 else {
        list=(List<BackgroundTask>)QueryUtil.list(q,getDialect(),start,end);
      }
      cacheResult(list);
      FinderCacheUtil.putResult(finderPath,finderArgs,list);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(finderPath,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return list;
}
