{
  ThemeDisplay themeDisplay=(ThemeDisplay)req.getAttribute(WebKeys.THEME_DISPLAY);
  PermissionChecker permissionChecker=themeDisplay.getPermissionChecker();
  String ownerId=Layout.getOwnerId(themeDisplay.getPlid());
  String groupId=Layout.getGroupId(ownerId);
  String portletResource=ParamUtil.getString(req,"portletResource");
  String modelResource=ParamUtil.getString(req,"modelResource");
  String resourcePrimKey=ParamUtil.getString(req,"resourcePrimKey");
  String selResource=portletResource;
  if (Validator.isNotNull(modelResource)) {
    selResource=modelResource;
  }
  if (selResource.equals(User.class.getName())) {
    User user=UserLocalServiceUtil.getUserById(resourcePrimKey);
    if (!UserPermission.contains(permissionChecker,resourcePrimKey,user.getOrganization().getOrganizationId(),user.getLocation().getOrganizationId(),ActionKeys.PERMISSIONS)) {
      SessionErrors.add(req,PrincipalException.class.getName());
      setForward(req,"portlet.portlet_configuration.error");
    }
  }
 else   if (!permissionChecker.hasPermission(groupId,selResource,resourcePrimKey,ActionKeys.PERMISSIONS)) {
    SessionErrors.add(req,PrincipalException.class.getName());
    setForward(req,"portlet.portlet_configuration.error");
  }
  Portlet portlet=PortletServiceUtil.getPortletById(themeDisplay.getCompanyId(),portletResource);
  ServletContext ctx=(ServletContext)req.getAttribute(WebKeys.CTX);
  res.setTitle(PortalUtil.getPortletTitle(portlet,ctx,themeDisplay.getLocale()));
  return mapping.findForward(getForward(req,"portlet.portlet_configuration.edit_permissions"));
}
