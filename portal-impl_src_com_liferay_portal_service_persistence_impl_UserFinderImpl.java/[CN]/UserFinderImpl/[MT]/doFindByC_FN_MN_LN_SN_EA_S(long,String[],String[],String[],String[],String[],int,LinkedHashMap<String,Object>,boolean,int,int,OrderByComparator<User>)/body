{
  firstNames=CustomSQLUtil.keywords(firstNames);
  middleNames=CustomSQLUtil.keywords(middleNames);
  lastNames=CustomSQLUtil.keywords(lastNames);
  screenNames=CustomSQLUtil.keywords(screenNames);
  emailAddresses=CustomSQLUtil.keywords(emailAddresses);
  if (params == null) {
    params=_emptyLinkedHashMap;
  }
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=null;
  LinkedHashMap<String,Object> params3=null;
  LinkedHashMap<String,Object> params4=null;
  LinkedHashMap<String,Object> params5=null;
  LinkedHashMap<String,Object> params6=null;
  Long[] groupIds=null;
  if (params.get("usersGroups") instanceof Long) {
    Long groupId=(Long)params.get("usersGroups");
    if (groupId > 0) {
      groupIds=new Long[]{groupId};
    }
  }
 else {
    groupIds=(Long[])params.get("usersGroups");
  }
  Long[] roleIds=null;
  if (params.get("usersRoles") instanceof Long) {
    Long roleId=(Long)params.get("usersRoles");
    if (roleId > 0) {
      roleIds=new Long[]{roleId};
    }
  }
 else {
    roleIds=(Long[])params.get("usersRoles");
  }
  boolean inherit=GetterUtil.getBoolean(params.get("inherit"));
  boolean socialRelationTypeUnionUserGroups=GetterUtil.getBoolean(params.get("socialRelationTypeUnionUserGroups"));
  if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) {
    List<Long> organizationIds=new ArrayList<Long>();
    List<Long> siteGroupIds=new ArrayList<Long>();
    List<Long> userGroupIds=new ArrayList<Long>();
    for (    long groupId : groupIds) {
      Group group=GroupLocalServiceUtil.fetchGroup(groupId);
      if (group == null) {
        continue;
      }
      if (group.isOrganization()) {
        organizationIds.add(group.getOrganizationId());
      }
 else       if (group.isUserGroup()) {
        userGroupIds.add(group.getClassPK());
      }
 else {
        siteGroupIds.add(groupId);
      }
    }
    if (!organizationIds.isEmpty()) {
      params2=new LinkedHashMap<String,Object>(params1);
      params2.remove("usersGroups");
      if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {
        params2.put("usersOrgs",organizationIds);
      }
 else {
        Map<Serializable,Organization> map=OrganizationUtil.fetchByPrimaryKeys(new HashSet<Serializable>(organizationIds));
        params2.put("usersOrgsTree",new ArrayList<Organization>(map.values()));
      }
    }
    if (!siteGroupIds.isEmpty()) {
      Long[] siteGroupIdsArray=siteGroupIds.toArray(new Long[siteGroupIds.size()]);
      params3=new LinkedHashMap<String,Object>(params1);
      params3.remove("usersGroups");
      params3.put("groupsOrgs",siteGroupIdsArray);
      params4=new LinkedHashMap<String,Object>(params1);
      params4.remove("usersGroups");
      params4.put("groupsUserGroups",siteGroupIdsArray);
    }
    if (!userGroupIds.isEmpty()) {
      params5=new LinkedHashMap<String,Object>(params1);
      params5.remove("usersGroups");
      params5.put("usersUserGroups",userGroupIds.toArray(new Long[userGroupIds.size()]));
    }
  }
  if (ArrayUtil.isNotEmpty(roleIds) && inherit && !socialRelationTypeUnionUserGroups) {
    List<Long> organizationIds=new ArrayList<Long>();
    List<Long> siteGroupIds=new ArrayList<Long>();
    List<Long> userGroupIds=new ArrayList<Long>();
    for (    long roleId : roleIds) {
      List<Group> groups=RoleUtil.getGroups(roleId);
      for (      Group group : groups) {
        if (group.isOrganization()) {
          organizationIds.add(group.getOrganizationId());
        }
 else         if (group.isUserGroup()) {
          userGroupIds.add(group.getClassPK());
        }
 else {
          siteGroupIds.add(group.getGroupId());
        }
      }
    }
    if (!organizationIds.isEmpty()) {
      params2=new LinkedHashMap<String,Object>(params1);
      params2.remove("usersRoles");
      if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {
        params2.put("usersOrgs",organizationIds.toArray(new Long[organizationIds.size()]));
      }
 else {
        Map<Serializable,Organization> map=OrganizationUtil.fetchByPrimaryKeys(new HashSet<Serializable>(organizationIds));
        params2.put("usersOrgsTree",new ArrayList<Organization>(map.values()));
      }
    }
    if (!siteGroupIds.isEmpty()) {
      Long[] siteGroupIdsArray=siteGroupIds.toArray(new Long[siteGroupIds.size()]);
      params3=new LinkedHashMap<String,Object>(params1);
      params3.remove("usersRoles");
      params3.put("usersGroups",siteGroupIdsArray);
      params4=new LinkedHashMap<String,Object>(params1);
      params4.remove("usersRoles");
      params4.put("groupsOrgs",siteGroupIdsArray);
      params5=new LinkedHashMap<String,Object>(params1);
      params5.remove("usersRoles");
      params5.put("groupsUserGroups",siteGroupIdsArray);
    }
    if (!userGroupIds.isEmpty()) {
      params6=new LinkedHashMap<String,Object>(params1);
      params6.remove("usersRoles");
      params6.put("usersUserGroups",userGroupIds.toArray(new Long[userGroupIds.size()]));
    }
  }
  if (socialRelationTypeUnionUserGroups) {
    boolean hasSocialRelationTypes=Validator.isNotNull(params.get("socialRelationType"));
    if (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) {
      params2=new LinkedHashMap<String,Object>(params1);
      params1.remove("socialRelationType");
      params2.remove("usersGroups");
    }
  }
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.firstName)",StringPool.LIKE,false,firstNames);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.middleName)",StringPool.LIKE,false,middleNames);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.lastName)",StringPool.LIKE,false,lastNames);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.screenName)",StringPool.LIKE,false,screenNames);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.emailAddress)",StringPool.LIKE,true,emailAddresses);
    if (status == WorkflowConstants.STATUS_ANY) {
      sql=StringUtil.replace(sql,_STATUS_SQL,StringPool.BLANK);
    }
    StringBundler sb=new StringBundler(14);
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(replaceJoinAndWhere(sql,params1));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    if (params2 != null) {
      sb.append(" UNION (");
      sb.append(replaceJoinAndWhere(sql,params2));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    if (params3 != null) {
      sb.append(" UNION (");
      sb.append(replaceJoinAndWhere(sql,params3));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    if (params4 != null) {
      sb.append(" UNION (");
      sb.append(replaceJoinAndWhere(sql,params4));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    if (params5 != null) {
      sb.append(" UNION (");
      sb.append(replaceJoinAndWhere(sql,params5));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    if (params6 != null) {
      sb.append(" UNION (");
      sb.append(replaceJoinAndWhere(sql,params6));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    if (obc != null) {
      sb.append(" ORDER BY ");
      sb.append(obc.toString());
    }
    sql=sb.toString();
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addScalar("userId",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params1);
    qPos.add(companyId);
    qPos.add(false);
    qPos.add(firstNames,2);
    qPos.add(middleNames,2);
    qPos.add(lastNames,2);
    qPos.add(screenNames,2);
    qPos.add(emailAddresses,2);
    if (status != WorkflowConstants.STATUS_ANY) {
      qPos.add(status);
    }
    if (params2 != null) {
      setJoin(qPos,params2);
      qPos.add(companyId);
      qPos.add(false);
      qPos.add(firstNames,2);
      qPos.add(middleNames,2);
      qPos.add(lastNames,2);
      qPos.add(screenNames,2);
      qPos.add(emailAddresses,2);
      if (status != WorkflowConstants.STATUS_ANY) {
        qPos.add(status);
      }
    }
    if (params3 != null) {
      setJoin(qPos,params3);
      qPos.add(companyId);
      qPos.add(false);
      qPos.add(firstNames,2);
      qPos.add(middleNames,2);
      qPos.add(lastNames,2);
      qPos.add(screenNames,2);
      qPos.add(emailAddresses,2);
      if (status != WorkflowConstants.STATUS_ANY) {
        qPos.add(status);
      }
    }
    if (params4 != null) {
      setJoin(qPos,params4);
      qPos.add(companyId);
      qPos.add(false);
      qPos.add(firstNames,2);
      qPos.add(middleNames,2);
      qPos.add(lastNames,2);
      qPos.add(screenNames,2);
      qPos.add(emailAddresses,2);
      if (status != WorkflowConstants.STATUS_ANY) {
        qPos.add(status);
      }
    }
    if (params5 != null) {
      setJoin(qPos,params5);
      qPos.add(companyId);
      qPos.add(false);
      qPos.add(firstNames,2);
      qPos.add(middleNames,2);
      qPos.add(lastNames,2);
      qPos.add(screenNames,2);
      qPos.add(emailAddresses,2);
      if (status != WorkflowConstants.STATUS_ANY) {
        qPos.add(status);
      }
    }
    if (params6 != null) {
      setJoin(qPos,params6);
      qPos.add(companyId);
      qPos.add(false);
      qPos.add(firstNames,2);
      qPos.add(middleNames,2);
      qPos.add(lastNames,2);
      qPos.add(screenNames,2);
      qPos.add(emailAddresses,2);
      if (status != WorkflowConstants.STATUS_ANY) {
        qPos.add(status);
      }
    }
    return (List<Long>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
