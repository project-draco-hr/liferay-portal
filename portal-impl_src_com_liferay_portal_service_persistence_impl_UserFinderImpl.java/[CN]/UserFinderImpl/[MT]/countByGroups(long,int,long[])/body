{
  if (ArrayUtil.isEmpty(groupIds)) {
    return Collections.emptyMap();
  }
  Arrays.sort(groupIds);
  Session session=null;
  try {
    Map<Long,Integer> counts=new HashMap<>();
    session=openSession();
    StringBundler sb=null;
    DB db=getDB();
    boolean sybase=false;
    if (db.getDBType() == DBType.SYBASE) {
      sybase=true;
    }
    if (sybase) {
      sb=new StringBundler(25);
    }
 else {
      sb=new StringBundler(17);
    }
    sb.append("SELECT groupId, COUNT(DISTINCT userId) FROM (");
    if (sybase) {
      sb.append("SELECT userId, groupId FROM ");
    }
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(CustomSQLUtil.get(FIND_BY_USERS_GROUPS));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    if (sybase) {
      sb.append(" USERS_GROUPS");
    }
    sb.append(" UNION ALL ");
    if (sybase) {
      sb.append("SELECT userId, groupId FROM ");
    }
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(CustomSQLUtil.get(FIND_BY_USERS_ORGS));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    if (sybase) {
      sb.append(" USERS_ORGS");
    }
    sb.append(" UNION ALL ");
    if (sybase) {
      sb.append("SELECT userId, groupId FROM ");
    }
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(CustomSQLUtil.get(FIND_BY_USERS_ORGS_GROUP));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    if (sybase) {
      sb.append(" USERS_ORGS_GROUP");
    }
    sb.append(" UNION ALL ");
    if (sybase) {
      sb.append("SELECT userId, groupId FROM ");
    }
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(CustomSQLUtil.get(FIND_BY_USERS_USER_GROUPS));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    if (sybase) {
      sb.append(" USERS_USER_GROUPS");
    }
    sb.append(") TEMP_TABLE GROUP BY groupId");
    String sql=StringUtil.replace(sb.toString(),"[$GROUP_ID$]",StringPool.OPEN_PARENTHESIS + StringUtil.merge(groupIds) + StringPool.CLOSE_PARENTHESIS);
    if (status == WorkflowConstants.STATUS_ANY) {
      sql=StringUtil.replace(sql,_STATUS_SQL,StringPool.BLANK);
    }
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    QueryPos qPos=QueryPos.getInstance(q);
    for (int i=0; i < 4; i++) {
      qPos.add(companyId);
      qPos.add(false);
      if (status != WorkflowConstants.STATUS_ANY) {
        qPos.add(status);
      }
    }
    List<Object[]> list=(List<Object[]>)QueryUtil.list(q,getDialect(),QueryUtil.ALL_POS,QueryUtil.ALL_POS);
    for (    Object[] objects : list) {
      Number groupId=(Number)objects[0];
      Number count=(Number)objects[1];
      counts.put(groupId.longValue(),count.intValue());
    }
    return counts;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
