{
  String[] keywords=removeLeadingPercent(CustomSQLUtil.keywords(terms,true));
  String[] firstName=keywords;
  String[] middleName=keywords;
  String[] lastName=keywords;
  String[] screenName=keywords;
  String[] emailAddress=keywords;
  String byGroupsSQL=null;
  if ((groupIds != null) && (groupIds.length > 0)) {
    byGroupsSQL=getFindByUsersGroupsSQL(groupIds);
    byGroupsSQL=CustomSQLUtil.replaceKeywords(byGroupsSQL,"lower(User_.firstName)",StringPool.LIKE,false,firstName);
    byGroupsSQL=CustomSQLUtil.replaceKeywords(byGroupsSQL,"lower(User_.middleName)",StringPool.LIKE,false,middleName);
    byGroupsSQL=CustomSQLUtil.replaceKeywords(byGroupsSQL,"lower(User_.lastName)",StringPool.LIKE,false,lastName);
    byGroupsSQL=CustomSQLUtil.replaceKeywords(byGroupsSQL,"lower(User_.screenName)",StringPool.LIKE,false,screenName);
    byGroupsSQL=CustomSQLUtil.replaceKeywords(byGroupsSQL,"lower(User_.emailAddress)",StringPool.LIKE,false,emailAddress);
  }
  String byRelationSQL=null;
  if ((types != null) && (types.length > 0)) {
    byRelationSQL=getFindBySocialRelationTypesSQL(types);
    byRelationSQL=CustomSQLUtil.replaceKeywords(byRelationSQL,"lower(User_.firstName)",StringPool.LIKE,false,firstName);
    byRelationSQL=CustomSQLUtil.replaceKeywords(byRelationSQL,"lower(User_.middleName)",StringPool.LIKE,false,middleName);
    byRelationSQL=CustomSQLUtil.replaceKeywords(byRelationSQL,"lower(User_.lastName)",StringPool.LIKE,false,lastName);
    byRelationSQL=CustomSQLUtil.replaceKeywords(byRelationSQL,"lower(User_.screenName)",StringPool.LIKE,false,screenName);
    byRelationSQL=CustomSQLUtil.replaceKeywords(byRelationSQL,"lower(User_.emailAddress)",StringPool.LIKE,false,emailAddress);
  }
  StringBundler sb=new StringBundler();
  if ((groupIds != null) && (groupIds.length > 0)) {
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(byGroupsSQL);
    sb.append(StringPool.CLOSE_PARENTHESIS);
    if (types.length > 0) {
      sb.append(" UNION ");
    }
  }
  if ((types != null) && (types.length > 0)) {
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(byRelationSQL);
    sb.append(StringPool.CLOSE_PARENTHESIS);
  }
  String sql=sb.toString();
  sql=CustomSQLUtil.replaceAndOperator(sql,false);
  Session session=null;
  try {
    session=openSession();
    SQLQuery query=session.createSynchronizedSQLQuery(sql);
    query.addEntity("User_",UserImpl.class);
    QueryPos qPos=QueryPos.getInstance(query);
    if ((groupIds != null) && (groupIds.length > 0)) {
      qPos.add(userId);
      for (int i=0; i < groupIds.length; i++) {
        qPos.add(groupIds[i]);
      }
      qPos.add(firstName,2);
      qPos.add(middleName,2);
      qPos.add(lastName,2);
      qPos.add(screenName,2);
      qPos.add(emailAddress,2);
    }
    if ((types != null) && (types.length > 0)) {
      qPos.add(userId);
      for (int i=0; i < types.length; i++) {
        qPos.add(types[i]);
      }
      qPos.add(userId);
      qPos.add(firstName,2);
      qPos.add(middleName,2);
      qPos.add(lastName,2);
      qPos.add(screenName,2);
      qPos.add(emailAddress,2);
    }
    return (List<User>)QueryUtil.list(query,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
