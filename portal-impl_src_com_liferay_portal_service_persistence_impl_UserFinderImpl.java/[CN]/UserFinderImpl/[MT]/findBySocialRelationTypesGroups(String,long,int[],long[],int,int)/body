{
  String[] keywords=CustomSQLUtil.keywords(terms,true,WildcardMode.TRAILING);
  String[] firstName=keywords;
  String[] middleName=keywords;
  String[] lastName=keywords;
  String[] screenName=keywords;
  String[] emailAddress=keywords;
  String sql=CustomSQLUtil.get(FIND_BY_SOCIAL_RELATION_TYPES_GROUPS);
  sql=replaceValueSet(sql,"[$USERS_GROUPS_WHERE$]","Users_Groups.groupId",ArrayUtil.toLongArray(groupIds));
  sql=replaceValueSet(sql,"[$SOCIAL_RELATION_TYPES$]","SocialRelation.type_",ArrayUtil.toLongArray(types));
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.firstName)",StringPool.LIKE,false,firstName);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.middleName)",StringPool.LIKE,false,middleName);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.lastName)",StringPool.LIKE,false,lastName);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.screenName)",StringPool.LIKE,false,screenName);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.emailAddress)",StringPool.LIKE,false,emailAddress);
  sql=CustomSQLUtil.replaceAndOperator(sql,false);
  Session session=null;
  try {
    session=openSession();
    SQLQuery query=session.createSynchronizedSQLQuery(sql);
    query.addEntity("User_",UserImpl.class);
    QueryPos qPos=QueryPos.getInstance(query);
    qPos.add(userId);
    for (int i=0; i < types.length; i++) {
      qPos.add(types[i]);
    }
    qPos.add(firstName,2);
    qPos.add(middleName,2);
    qPos.add(lastName,2);
    qPos.add(screenName,2);
    qPos.add(emailAddress,2);
    qPos.add(userId);
    for (int i=0; i < groupIds.length; i++) {
      qPos.add(groupIds[i]);
    }
    qPos.add(userId);
    qPos.add(firstName,2);
    qPos.add(middleName,2);
    qPos.add(lastName,2);
    qPos.add(screenName,2);
    qPos.add(emailAddress,2);
    return (List<User>)QueryUtil.list(query,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
