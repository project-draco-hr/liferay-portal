{
  String sql=null;
  boolean hasAnyKeyword=!isEmpty(firstNames) || !isEmpty(middleNames) || !isEmpty(lastNames)|| !isEmpty(screenNames)|| !isEmpty(emailAddresses);
  if (hasAnyKeyword) {
    sql=CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.firstName)",StringPool.LIKE,false,firstNames);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.middleName)",StringPool.LIKE,false,middleNames);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.lastName)",StringPool.LIKE,false,lastNames);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.screenName)",StringPool.LIKE,false,screenNames);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(User_.emailAddress)",StringPool.LIKE,true,emailAddresses);
  }
 else {
    sql=CustomSQLUtil.get(FIND_BY_C_S);
  }
  if (status == WorkflowConstants.STATUS_ANY) {
    sql=StringUtil.replace(sql,_STATUS_SQL,StringPool.BLANK);
  }
  sql=replaceJoinAndWhere(sql,params);
  sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
  SQLQuery q=session.createSynchronizedSQLQuery(sql);
  q.addScalar("userId",Type.LONG);
  QueryPos qPos=QueryPos.getInstance(q);
  setJoin(qPos,params);
  qPos.add(companyId);
  qPos.add(false);
  if (hasAnyKeyword) {
    qPos.add(firstNames,2);
    qPos.add(middleNames,2);
    qPos.add(lastNames,2);
    qPos.add(screenNames,2);
    qPos.add(emailAddresses,2);
  }
  if (status != WorkflowConstants.STATUS_ANY) {
    qPos.add(status);
  }
  return q.list(true);
}
