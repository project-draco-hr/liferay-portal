{
  String log4jConfigureOnStartup=SystemProperties.get(_LOG4J_CONFIGURE_ON_STARTUP);
  SystemProperties.set(_LOG4J_CONFIGURE_ON_STARTUP,StringPool.FALSE);
  String resourceActionsReadPortletResources=SystemProperties.get(_RESOURCE_ACTIONS_READ_PORTLET_RESOURCES);
  SystemProperties.set(_RESOURCE_ACTIONS_READ_PORTLET_RESOURCES,StringPool.FALSE);
  ReflectionTestUtil.setFieldValue(PropsValues.class,"SPRING_INFRASTRUCTURE_CONFIGS",new String[0]);
  _fileImpl.deltree(PropsValues.MODULE_FRAMEWORK_STATE_DIR);
  _fileImpl.mkdirs(PropsValues.MODULE_FRAMEWORK_BASE_DIR + "/static");
  InitUtil.init();
  ReflectionTestUtil.setFieldValue(InitUtil.class,"_initialized",false);
  try (CaptureAppender captureAppender=Log4JLoggerTestUtil.configureLog4JLogger("com.liferay.portal.bootstrap.ModuleFrameworkImpl",Level.ERROR)){
    InitUtil.initWithSpring(Arrays.asList("META-INF/util-spring.xml"),true,true);
    List<LoggingEvent> loggingEvents=captureAppender.getLoggingEvents();
    Assert.assertEquals(1,loggingEvents.size());
    LoggingEvent loggingEvent=loggingEvents.get(0);
    Assert.assertEquals("Missing " + Paths.get(PropsValues.LIFERAY_LIB_PORTAL_DIR,"util-taglib.jar"),loggingEvent.getRenderedMessage());
  }
  finally {
    if (resourceActionsReadPortletResources == null) {
      SystemProperties.clear(_RESOURCE_ACTIONS_READ_PORTLET_RESOURCES);
    }
 else {
      SystemProperties.set(_RESOURCE_ACTIONS_READ_PORTLET_RESOURCES,resourceActionsReadPortletResources);
    }
    if (log4jConfigureOnStartup == null) {
      SystemProperties.clear(_LOG4J_CONFIGURE_ON_STARTUP);
    }
 else {
      SystemProperties.set(_LOG4J_CONFIGURE_ON_STARTUP,log4jConfigureOnStartup);
    }
    InitUtil.stopRuntime();
    InitUtil.stopModuleFramework();
  }
}
