{
  LDAPAuthResult ldapAuthResult=new LDAPAuthResult();
  String authMethod=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_AUTH_METHOD);
  if (authMethod.equals(AUTH_METHOD_BIND)) {
    try {
      Hashtable<String,String> env=(Hashtable<String,String>)ctx.getEnvironment();
      env.put(Context.SECURITY_PRINCIPAL,userDN);
      env.put(Context.SECURITY_CREDENTIALS,password);
      env.put(Context.REFERRAL,"follow");
      ctx=new InitialLdapContext(env,null);
      Control[] responseControls=ctx.getResponseControls();
      ldapAuthResult.setAuthenticated(true);
      ldapAuthResult.setResponseControl(responseControls);
    }
 catch (    Exception e) {
      _log.error("Failed to bind to the LDAP server with userDN " + userDN + " and password "+ password+ ": "+ e.getMessage());
      ldapAuthResult.setAuthenticated(false);
      ldapAuthResult.setErrorMessage(e.getMessage());
    }
  }
 else   if (authMethod.equals(AUTH_METHOD_PASSWORD_COMPARE)) {
    Attribute userPassword=attrs.get("userPassword");
    if (userPassword != null) {
      String ldapPassword=new String((byte[])userPassword.get());
      String encryptedPassword=password;
      String algorithm=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_AUTH_PASSWORD_ENCRYPTION_ALGORITHM);
      if (Validator.isNotNull(algorithm)) {
        encryptedPassword="{" + algorithm + "}"+ PwdEncryptor.encrypt(algorithm,password,ldapPassword);
      }
      if (ldapPassword.equals(encryptedPassword)) {
        ldapAuthResult.setAuthenticated(true);
      }
 else {
        ldapAuthResult.setAuthenticated(false);
        if (_log.isWarnEnabled()) {
          _log.warn("Passwords do not match for userDN " + userDN);
        }
      }
    }
  }
  return ldapAuthResult;
}
