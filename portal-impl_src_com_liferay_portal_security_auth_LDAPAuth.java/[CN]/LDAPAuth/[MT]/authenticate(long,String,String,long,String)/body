{
  if (!PortalLDAPUtil.isAuthEnabled(companyId)) {
    if (_log.isDebugEnabled()) {
      _log.debug("Authenticator is not enabled");
    }
    return SUCCESS;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Authenticator is enabled");
  }
  if (authenticateOmniadmin(companyId,emailAddress,userId) == SUCCESS) {
    return SUCCESS;
  }
  Properties env=new Properties();
  String baseProviderURL=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_BASE_PROVIDER_URL);
  String baseDN=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_BASE_DN);
  env.put(Context.INITIAL_CONTEXT_FACTORY,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_FACTORY_INITIAL));
  env.put(Context.PROVIDER_URL,LDAPUtil.getFullProviderURL(baseProviderURL,baseDN));
  env.put(Context.SECURITY_PRINCIPAL,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_SECURITY_PRINCIPAL));
  env.put(Context.SECURITY_CREDENTIALS,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_SECURITY_CREDENTIALS));
  LogUtil.debug(_log,env);
  LdapContext ctx=null;
  try {
    ctx=new InitialLdapContext(env,null);
  }
 catch (  Exception e) {
    if (_log.isDebugEnabled()) {
      _log.debug("Failed to bind to the LDAP server");
    }
    return SUCCESS;
  }
  String filter=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_AUTH_SEARCH_FILTER);
  if (_log.isDebugEnabled()) {
    _log.debug("Search filter before transformation " + filter);
  }
  filter=StringUtil.replace(filter,new String[]{"@company_id@","@email_address@","@screen_name@","@user_id@"},new String[]{String.valueOf(companyId),emailAddress,screenName,String.valueOf(userId)});
  if (_log.isDebugEnabled()) {
    _log.debug("Search filter after transformation " + filter);
  }
  try {
    SearchControls cons=new SearchControls(SearchControls.SUBTREE_SCOPE,1,0,null,false,false);
    NamingEnumeration enu=ctx.search(StringPool.BLANK,filter,cons);
    if (enu.hasMore()) {
      if (_log.isDebugEnabled()) {
        _log.debug("Search filter returned at least one result");
      }
      SearchResult result=(SearchResult)enu.next();
      Attributes attrs=ctx.getAttributes(result.getName());
      Properties userMappings=PortalLDAPUtil.getUserMappings(companyId);
      LogUtil.debug(_log,userMappings);
      Attribute userPassword=attrs.get("userPassword");
      LDAPAuthResult ldapAuthResult=authenticate(ctx,env,result,baseDN,userPassword,companyId,emailAddress,screenName,userId,password);
      String errorMessage=ldapAuthResult.getErrorMessage();
      if (errorMessage != null) {
        if (errorMessage.indexOf(PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_ERROR_USER_LOCKOUT)) != -1) {
          throw new UserLockoutException();
        }
 else         if (errorMessage.indexOf(PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_ERROR_PASSWORD_EXPIRED)) != -1) {
          throw new PasswordExpiredException();
        }
      }
      if (!ldapAuthResult.isAuthenticated()) {
        return authenticateRequired(companyId,userId,emailAddress,FAILURE);
      }
      User user=processUser(attrs,userMappings,companyId,emailAddress,screenName,password);
      String resultCode=ldapAuthResult.getResponseControl();
      if (resultCode.equals(LDAPAuth.RESULT_PASSWORD_RESET)) {
        UserLocalServiceUtil.updatePasswordReset(user.getUserId(),true);
      }
 else       if (resultCode.equals(LDAPAuth.RESULT_PASSWORD_EXP_WARNING)) {
        UserLocalServiceUtil.updatePasswordReset(user.getUserId(),true);
      }
    }
 else {
      if (_log.isDebugEnabled()) {
        _log.debug("Search filter did not return any results");
      }
      return authenticateRequired(companyId,userId,emailAddress,DNE);
    }
  }
 catch (  Exception e) {
    _log.error("Problem accessing LDAP server: " + e.getMessage());
    if (authenticateRequired(companyId,userId,emailAddress,FAILURE) == FAILURE) {
      throw e;
    }
  }
  return SUCCESS;
}
