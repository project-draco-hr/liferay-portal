{
  final Test test=GradleUtil.addTask(project,TEST_INTEGRATION_TASK_NAME,Test.class);
  test.mustRunAfter(JavaPlugin.TEST_TASK_NAME);
  test.setDescription("Runs the integration tests.");
  test.setForkEvery(null);
  test.setGroup("verification");
  ConventionMapping conventionMapping=test.getConventionMapping();
  conventionMapping.map("classpath",new Callable<FileCollection>(){
    @Override public FileCollection call() throws Exception {
      return testIntegrationSourceSet.getRuntimeClasspath();
    }
  }
);
  conventionMapping.map("testClassesDir",new Callable<File>(){
    @Override public File call() throws Exception {
      SourceSetOutput sourceSetOutput=testIntegrationSourceSet.getOutput();
      return sourceSetOutput.getClassesDir();
    }
  }
);
  conventionMapping.map("testSrcDirs",new Callable<List<File>>(){
    @Override public List<File> call() throws Exception {
      SourceDirectorySet sourceDirectorySet=testIntegrationSourceSet.getJava();
      return new ArrayList<>(sourceDirectorySet.getSrcDirs());
    }
  }
);
  project.afterEvaluate(new Action<Project>(){
    @Override public void execute(    Project project){
      Set<String> includes=test.getIncludes();
      if (includes.isEmpty()) {
        test.setIncludes(Collections.singleton("**/*Test.class"));
      }
    }
  }
);
  return test;
}
