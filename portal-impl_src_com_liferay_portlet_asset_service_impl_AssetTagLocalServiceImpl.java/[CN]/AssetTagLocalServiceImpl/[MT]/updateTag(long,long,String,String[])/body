{
  AssetTag tag=assetTagPersistence.findByPrimaryKey(tagId);
  tag.setModifiedDate(new Date());
  name=name.trim();
  name=name.toLowerCase();
  if (!tag.getName().equals(name) && hasTag(tag.getGroupId(),name)) {
    throw new DuplicateTagException("A tag with the name " + name + " already exists");
  }
  if (!tag.getName().equals(name)) {
    try {
      AssetTag existingAssetTag=getTag(tag.getGroupId(),name);
      if (existingAssetTag.getTagId() != tagId) {
        throw new DuplicateTagException("A tag tag with the name " + name + " already exists");
      }
    }
 catch (    NoSuchTagException nsee) {
    }
  }
  validate(name);
  tag.setName(name);
  assetTagPersistence.update(tag,false);
  List<AssetTagProperty> oldProperties=assetTagPropertyPersistence.findByTagId(tagId);
  for (  AssetTagProperty property : oldProperties) {
    assetTagPropertyLocalService.deleteTagProperty(property);
  }
  for (int i=0; i < properties.length; i++) {
    String[] property=StringUtil.split(properties[i],StringPool.COLON);
    String key=StringPool.BLANK;
    if (property.length > 0) {
      key=GetterUtil.getString(property[0]);
    }
    String value=StringPool.BLANK;
    if (property.length > 1) {
      value=GetterUtil.getString(property[1]);
    }
    if (Validator.isNotNull(key)) {
      assetTagPropertyLocalService.addTagProperty(userId,tagId,key,value);
    }
  }
  return tag;
}
