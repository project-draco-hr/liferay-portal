{
  UploadPortletRequest uploadReq=PortalUtil.getUploadPortletRequest(req);
  String itemId=ParamUtil.getString(uploadReq,"item_id");
  String categoryId=ParamUtil.getString(uploadReq,"category_id");
  String sku=ParamUtil.getString(uploadReq,"item_sku");
  String name=ParamUtil.getString(uploadReq,"item_name");
  String description=ParamUtil.getString(uploadReq,"item_desc");
  String properties=ParamUtil.getString(uploadReq,"item_props");
  String supplierUserId=ParamUtil.getString(uploadReq,"item_supplier_user_id");
  int numberOfFields=ParamUtil.get(uploadReq,"n_of_fields",1);
  List itemFields=new ArrayList();
  for (int i=0; i < numberOfFields; i++) {
    String fieldName=ParamUtil.getString(uploadReq,"item_" + i + "_field_name");
    String fieldValues=ParamUtil.getString(uploadReq,"item_" + i + "_field_values");
    String fieldDescription=ParamUtil.getString(uploadReq,"item_" + i + "_field_desc");
    ShoppingItemField itemField=new ShoppingItemField(null,null,fieldName,fieldValues,fieldDescription);
    itemFields.add(itemField);
  }
  String fieldsQuantities=ParamUtil.getString(uploadReq,"item_fields_quantities");
  int numberOfPrices=ParamUtil.get(uploadReq,"n_of_prices",1);
  List itemPrices=new ArrayList();
  for (int i=0; i < numberOfPrices; i++) {
    int minQuantity=ParamUtil.get(uploadReq,"item_" + i + "_min_quantity",0);
    int maxQuantity=ParamUtil.get(uploadReq,"item_" + i + "_max_quantity",0);
    double price=ParamUtil.get(uploadReq,"item_" + i + "_price",0.0);
    double discount=ParamUtil.get(uploadReq,"item_" + i + "_discount",0.0) / 100;
    boolean taxable=ParamUtil.get(uploadReq,"item_" + i + "_taxable",false);
    double shipping=ParamUtil.get(uploadReq,"item_" + i + "_shipping",0.0);
    boolean useShippingFormula=ParamUtil.get(uploadReq,"item_" + i + "_u_s_f",false);
    boolean active=ParamUtil.get(uploadReq,"item_" + i + "_active",false);
    int defaultPrice=ParamUtil.get(uploadReq,"item_default_price",0);
    int status=ShoppingItemPrice.STATUS_ACTIVE_DEFAULT;
    if (defaultPrice != i && active) {
      status=ShoppingItemPrice.STATUS_ACTIVE;
    }
 else     if (defaultPrice != i && !active) {
      status=ShoppingItemPrice.STATUS_INACTIVE;
    }
    ShoppingItemPrice itemPrice=new ShoppingItemPrice(null,null,minQuantity,maxQuantity,price,discount,taxable,shipping,useShippingFormula,status);
    itemPrices.add(itemPrice);
  }
  boolean requiresShipping=ParamUtil.get(uploadReq,"item_r_s",true);
  int stockQuantity=ParamUtil.get(uploadReq,"item_stock_quantity",0);
  boolean featured=ParamUtil.get(uploadReq,"item_featured",true);
  Boolean sale=null;
  boolean smallImage=ParamUtil.get(uploadReq,"item_small_image",false);
  String smallImageURL=ParamUtil.getString(uploadReq,"item_small_image_url");
  File smallFile=uploadReq.getFile("item_small_i");
  boolean mediumImage=ParamUtil.get(uploadReq,"item_medium_image",false);
  String mediumImageURL=ParamUtil.getString(uploadReq,"item_medium_image_url");
  File mediumFile=uploadReq.getFile("item_medium_i");
  boolean largeImage=ParamUtil.get(uploadReq,"item_large_image",false);
  String largeImageURL=ParamUtil.getString(uploadReq,"item_large_image_url");
  File largeFile=uploadReq.getFile("item_large_i");
  if (Validator.isNull(itemId)) {
    ShoppingItem item=ShoppingItemServiceUtil.addItem(categoryId,sku,name,description,properties,supplierUserId,fieldsQuantities,requiresShipping,stockQuantity,featured,sale,smallImage,smallImageURL,smallFile,mediumImage,mediumImageURL,mediumFile,largeImage,largeImageURL,largeFile,itemFields,itemPrices);
    PortletURL portletURL=((ActionResponseImpl)res).createRenderURL();
    portletURL.setParameter("struts_action","/shopping/view_item");
    portletURL.setParameter("item_id",item.getItemId());
    res.sendRedirect(portletURL.toString());
  }
 else {
    ShoppingItemServiceUtil.updateItem(itemId,categoryId,sku,name,description,properties,supplierUserId,fieldsQuantities,requiresShipping,stockQuantity,featured,sale,smallImage,smallImageURL,smallFile,mediumImage,mediumImageURL,mediumFile,largeImage,largeImageURL,largeFile,itemFields,itemPrices);
    res.sendRedirect(ParamUtil.getString(req,"redirect"));
  }
}
