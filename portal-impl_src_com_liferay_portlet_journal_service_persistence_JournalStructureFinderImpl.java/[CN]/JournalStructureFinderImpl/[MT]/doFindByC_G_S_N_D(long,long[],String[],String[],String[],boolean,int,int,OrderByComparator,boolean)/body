{
  structureIds=CustomSQLUtil.keywords(structureIds,false);
  names=CustomSQLUtil.keywords(names);
  descriptions=CustomSQLUtil.keywords(descriptions);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_G_S_N_D);
    sql=StringUtil.replace(sql,"[$GROUP_ID$]",getGroupIds(groupIds));
    sql=CustomSQLUtil.replaceKeywords(sql,"structureId",StringPool.LIKE,false,structureIds);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(name)",StringPool.LIKE,false,names);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(description)",StringPool.LIKE,true,descriptions);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    sql=CustomSQLUtil.replaceOrderBy(sql,obc);
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,JournalStructure.class.getName(),"JournalStructure.id_",groupIds);
      sql=StringUtil.replace(sql,"(companyId","(JournalStructure.companyId");
      sql=StringUtil.replace(sql,"(name","(JournalStructure.name");
    }
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("JournalStructure",JournalStructureImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    qPos.add(groupIds);
    qPos.add(structureIds,2);
    qPos.add(names,2);
    qPos.add(descriptions,2);
    return (List<JournalStructure>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
