{
  HttpServletRequest httpReq=PortalUtil.getHttpServletRequest(req);
  String cmd=ParamUtil.getString(req,Constants.CMD);
  PortletPreferences prefs=req.getPreferences();
  String folderId=ParamUtil.getString(req,"folderId");
  long messageId=ParamUtil.getLong(req,"messageId");
  String signature=prefs.getValue("signature",StringPool.BLANK);
  if (Validator.isNotNull(signature)) {
    signature="<br />--<br />" + signature;
  }
  if (cmd.equals("forward") || cmd.startsWith("reply")) {
    MailUtil.setFolder(httpReq,folderId);
    MailMessage mailMessage=MailUtil.getMessage(httpReq,messageId);
    if (cmd.equals("forward")) {
      req.setAttribute(WebKeys.MAIL_MESSAGE_SUBJECT,"Fw: " + getSubject(mailMessage.getSubject(),"fw"));
      req.setAttribute(WebKeys.MAIL_MESSAGE_ATTACHMENTS,mailMessage.getRemoteAttachments());
    }
 else {
      String to=StringPool.BLANK;
      String cc=StringPool.BLANK;
      if (cmd.equals("replyAll")) {
        User user=PortalUtil.getUser(req);
        String emailAddress=user.getEmailAddress();
        to=InternetAddressUtil.toString(InternetAddressUtil.removeEntry(mailMessage.getTo(),emailAddress));
        cc=InternetAddressUtil.toString(InternetAddressUtil.removeEntry(mailMessage.getCc(),emailAddress));
        String replyTo=InternetAddressUtil.toString(mailMessage.getReplyTo());
        if (Validator.isNull(replyTo)) {
          InternetAddress from=(InternetAddress)mailMessage.getFrom();
          replyTo=from.toUnicodeString();
        }
        to=replyTo + StringPool.COMMA + StringPool.SPACE+ to;
      }
 else {
        to=InternetAddressUtil.toString(mailMessage.getReplyTo());
        if (Validator.isNull(to)) {
          InternetAddress from=(InternetAddress)mailMessage.getFrom();
          to=from.toUnicodeString();
        }
      }
      String[] recipients=new String[]{Html.escape(to,false),Html.escape(cc,false),StringPool.BLANK};
      req.setAttribute(WebKeys.MAIL_MESSAGE_ORIGINAL_ID,String.valueOf(mailMessage.getMessageId()));
      req.setAttribute(WebKeys.MAIL_MESSAGE_RECIPIENTS,recipients);
      req.setAttribute(WebKeys.MAIL_MESSAGE_IN_REPLY_TO,String.valueOf(mailMessage.getInReplyTo()));
      req.setAttribute(WebKeys.MAIL_MESSAGE_REFERENCES,String.valueOf(mailMessage.getReferences()));
      req.setAttribute(WebKeys.MAIL_MESSAGE_SUBJECT,"Re: " + getSubject(mailMessage.getSubject(),"re"));
    }
    req.setAttribute(WebKeys.MAIL_MESSAGE_BODY,signature + getBody(req,mailMessage));
  }
 else   if (cmd.equals(Constants.EDIT)) {
    MailUtil.setFolder(httpReq,folderId);
    MailMessage mailMessage=MailUtil.getMessage(httpReq,messageId);
    String to=Html.escape(InternetAddressUtil.toString(mailMessage.getTo()),false);
    String cc=Html.escape(InternetAddressUtil.toString(mailMessage.getCc()),false);
    String bcc=Html.escape(InternetAddressUtil.toString(mailMessage.getBcc()),false);
    String[] recipients=new String[]{to,cc,bcc};
    req.setAttribute(WebKeys.MAIL_MESSAGE_ORIGINAL_ID,new String(_DRAFT_ID_PREFIX + messageId));
    req.setAttribute(WebKeys.MAIL_MESSAGE_RECIPIENTS,recipients);
    req.setAttribute(WebKeys.MAIL_MESSAGE_SUBJECT,mailMessage.getSubject());
    req.setAttribute(WebKeys.MAIL_MESSAGE_BODY,mailMessage.getBody());
    req.setAttribute(WebKeys.MAIL_MESSAGE_ATTACHMENTS,mailMessage.getRemoteAttachments());
  }
 else   if (cmd.equals(Constants.SEND)) {
    String originalId=ParamUtil.getString(req,"originalId");
    String to=ParamUtil.getString(req,"to");
    String cc=ParamUtil.getString(req,"cc");
    String bcc=ParamUtil.getString(req,"bcc");
    String[] recipients=new String[]{to,cc,bcc};
    String subject=ParamUtil.getString(req,"subject");
    String body=ParamUtil.getString(req,"body");
    req.setAttribute(WebKeys.MAIL_MESSAGE_ORIGINAL_ID,originalId);
    req.setAttribute(WebKeys.MAIL_MESSAGE_RECIPIENTS,recipients);
    req.setAttribute(WebKeys.MAIL_MESSAGE_SUBJECT,subject);
    req.setAttribute(WebKeys.MAIL_MESSAGE_BODY,body);
    req.setAttribute(WebKeys.MAIL_MESSAGE_ATTACHMENTS,getRemoteAttachments(req));
  }
 else {
    String to=ParamUtil.getString(req,"to");
    String[] recipients=new String[]{to,StringPool.BLANK,StringPool.BLANK};
    req.setAttribute(WebKeys.MAIL_MESSAGE_RECIPIENTS,recipients);
    req.setAttribute(WebKeys.MAIL_MESSAGE_BODY,signature);
  }
  return mapping.findForward("portlet.mail.edit_message");
}
