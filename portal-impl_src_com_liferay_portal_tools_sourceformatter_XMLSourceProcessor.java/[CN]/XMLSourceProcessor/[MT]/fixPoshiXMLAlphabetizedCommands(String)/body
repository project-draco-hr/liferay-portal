{
  Matcher matcher=_poshiCommandsPattern.matcher(content);
  Map<String,String> commandBlocksMap=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);
  String previousName=StringPool.BLANK;
  boolean outOfOrder=false;
  while (matcher.find()) {
    String commandBlock=matcher.group();
    String commandName=matcher.group(1);
    commandBlocksMap.put(commandName,commandBlock);
    if (commandName.compareToIgnoreCase(previousName) < 0) {
      outOfOrder=true;
    }
    previousName=commandName;
  }
  if (outOfOrder) {
    StringBundler sb=new StringBundler();
    matcher=_poshiSetUpPattern.matcher(content);
    if (matcher.find()) {
      String setUpBlock=matcher.group();
      content=content.replace(setUpBlock,"");
      sb.append(setUpBlock);
    }
    matcher=_poshiTearDownPattern.matcher(content);
    if (matcher.find()) {
      String tearDownBlock=matcher.group();
      content=content.replace(tearDownBlock,"");
      sb.append(tearDownBlock);
    }
    for (    Map.Entry<String,String> entry : commandBlocksMap.entrySet()) {
      sb.append("\n\t");
      sb.append(entry.getValue());
      sb.append("\n");
    }
    int x=content.indexOf("<command");
    int y=content.lastIndexOf("</command>");
    String commandBlock=content.substring(x,y);
    commandBlock="\n\t" + commandBlock + "</command>\n";
    String newCommandBlock=sb.toString();
    content=StringUtil.replaceFirst(content,commandBlock,newCommandBlock);
  }
  return content;
}
