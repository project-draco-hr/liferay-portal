{
  Matcher matcher=_poshiCommandsPattern.matcher(content);
  Map<String,String> commandBlockMap=new HashMap<String,String>();
  List<String> commandNames=new ArrayList<String>();
  String previousName=StringPool.BLANK;
  boolean outOfOrder=false;
  while (matcher.find()) {
    String commandBlock=matcher.group();
    String commandName=matcher.group(1);
    commandBlockMap.put(commandName,commandBlock);
    commandNames.add(commandName);
    if (commandName.compareToIgnoreCase(previousName) < 0) {
      outOfOrder=true;
    }
    previousName=commandName;
  }
  if (outOfOrder) {
    StringBundler sb=new StringBundler();
    matcher=_poshiSetUpPattern.matcher(content);
    if (matcher.find()) {
      String setUpBlock=matcher.group();
      content=content.replace(setUpBlock,"");
      sb.append(setUpBlock);
    }
    matcher=_poshiTearDownPattern.matcher(content);
    if (matcher.find()) {
      String tearDownBlock=matcher.group();
      content=content.replace(tearDownBlock,"");
      sb.append(tearDownBlock);
    }
    Collections.sort(commandNames,String.CASE_INSENSITIVE_ORDER);
    for (int i=0; i < commandNames.size(); i++) {
      String commandName=commandNames.get(i);
      sb.append("\n\t");
      sb.append(commandBlockMap.get(commandName));
      sb.append("\n");
    }
    int x=content.indexOf("<command");
    int y=content.lastIndexOf("</command>");
    String commandBlock=content.substring(x,y);
    commandBlock="\n\t" + commandBlock + "</command>\n";
    String newCommandBlock=sb.toString();
    content=StringUtil.replaceFirst(content,commandBlock,newCommandBlock);
  }
  return content;
}
