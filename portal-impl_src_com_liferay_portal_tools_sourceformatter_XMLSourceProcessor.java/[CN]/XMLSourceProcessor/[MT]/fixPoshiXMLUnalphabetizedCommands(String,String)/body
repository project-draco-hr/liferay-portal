{
  Pattern pattern=Pattern.compile("\\<command name=\\\"([^\\\"]*)\\\".*\\>[\\s\\S]*?" + "\\</command\\>[\\n|\\t]*?(?:[^(?:/\\>)]*?--\\>)*+");
  Matcher matcher=pattern.matcher(content);
  List<String> sortedCommandNames=new ArrayList<String>();
  Map<String,String> commandDefinitions=new HashMap<String,String>();
  String previousName=StringPool.BLANK;
  boolean outOfOrder=false;
  while (matcher.find()) {
    String commandDefinition=matcher.group();
    String commandName=matcher.group(1);
    commandDefinitions.put(commandName,commandDefinition);
    sortedCommandNames.add(commandName);
    if (commandName.compareToIgnoreCase(previousName) < 0) {
      processErrorMessage(fileName,fileName + " has an unordered command " + commandName);
      outOfOrder=true;
    }
    previousName=commandName;
  }
  if (outOfOrder) {
    String setUpPattern="\\n[\\t]++\\<set-up\\>([\\s\\S]*?)\\</set-up\\>" + "[\\n|\\t]*?(?:[^(?:/\\>)]*?--\\>)*+\\n";
    pattern=Pattern.compile(setUpPattern);
    matcher=pattern.matcher(content);
    String setUpDefinition=StringPool.BLANK;
    if (matcher.find()) {
      setUpDefinition=matcher.group();
      content=content.replace(setUpDefinition,"");
    }
    String tearDownPattern="\\n[\\t]++\\<tear-down\\>([\\s\\S]*?)\\</tear-down\\>" + "[\\n|\\t]*?(?:[^(?:/\\>)]*?--\\>)*+\\n";
    pattern=Pattern.compile(tearDownPattern);
    matcher=pattern.matcher(content);
    String tearDownDefinition=StringPool.BLANK;
    if (matcher.find()) {
      tearDownDefinition=matcher.group();
      content=content.replace(tearDownDefinition,"");
    }
    StringBundler sb=new StringBundler();
    sb.append(setUpDefinition);
    sb.append(tearDownDefinition);
    sb.append("\n");
    Collections.sort(sortedCommandNames,String.CASE_INSENSITIVE_ORDER);
    for (int i=0; i < sortedCommandNames.size(); i++) {
      String sortedCommandName=sortedCommandNames.get(i);
      sb.append("\t");
      sb.append(commandDefinitions.get(sortedCommandName));
      sb.append("\n");
      if (i < sortedCommandNames.size() - 1) {
        sb.append("\n");
      }
    }
    int startCommandsIndex=content.indexOf("<command");
    int endCommandsIndex=content.lastIndexOf("</command>");
    String unalphabetizedCommands=content.substring(startCommandsIndex,endCommandsIndex);
    unalphabetizedCommands="\n\t" + unalphabetizedCommands + "</command>\n";
    String alphabetizedCommands=sb.toString();
    content=StringUtil.replace(content,unalphabetizedCommands,alphabetizedCommands);
  }
  return content;
}
