{
  long pk=nextLong();
  BlogsStatsUser newBlogsStatsUser=_persistence.create(pk);
  newBlogsStatsUser.setGroupId(nextLong());
  newBlogsStatsUser.setCompanyId(nextLong());
  newBlogsStatsUser.setUserId(nextLong());
  newBlogsStatsUser.setEntryCount(nextInt());
  newBlogsStatsUser.setLastPostDate(nextDate());
  newBlogsStatsUser.setRatingsTotalEntries(nextInt());
  newBlogsStatsUser.setRatingsTotalScore(nextDouble());
  newBlogsStatsUser.setRatingsAverageScore(nextDouble());
  _persistence.update(newBlogsStatsUser);
  BlogsStatsUser existingBlogsStatsUser=_persistence.findByPrimaryKey(newBlogsStatsUser.getPrimaryKey());
  assertEquals(existingBlogsStatsUser.getStatsUserId(),newBlogsStatsUser.getStatsUserId());
  assertEquals(existingBlogsStatsUser.getGroupId(),newBlogsStatsUser.getGroupId());
  assertEquals(existingBlogsStatsUser.getCompanyId(),newBlogsStatsUser.getCompanyId());
  assertEquals(existingBlogsStatsUser.getUserId(),newBlogsStatsUser.getUserId());
  assertEquals(existingBlogsStatsUser.getEntryCount(),newBlogsStatsUser.getEntryCount());
  assertEquals(existingBlogsStatsUser.getLastPostDate(),newBlogsStatsUser.getLastPostDate());
  assertEquals(existingBlogsStatsUser.getRatingsTotalEntries(),newBlogsStatsUser.getRatingsTotalEntries());
  assertEquals(existingBlogsStatsUser.getRatingsTotalScore(),newBlogsStatsUser.getRatingsTotalScore());
  assertEquals(existingBlogsStatsUser.getRatingsAverageScore(),newBlogsStatsUser.getRatingsAverageScore());
}
