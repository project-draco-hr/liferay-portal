{
  long pk=nextLong();
  ActivityTracker newActivityTracker=_persistence.create(pk);
  newActivityTracker.setGroupId(nextLong());
  newActivityTracker.setCompanyId(nextLong());
  newActivityTracker.setUserId(nextLong());
  newActivityTracker.setUserName(randomString());
  newActivityTracker.setCreateDate(nextDate());
  newActivityTracker.setClassNameId(nextLong());
  newActivityTracker.setClassPK(nextLong());
  newActivityTracker.setActivity(randomString());
  newActivityTracker.setExtraData(randomString());
  newActivityTracker.setReceiverUserId(nextLong());
  newActivityTracker.setReceiverUserName(randomString());
  _persistence.update(newActivityTracker,false);
  ActivityTracker existingActivityTracker=_persistence.findByPrimaryKey(newActivityTracker.getPrimaryKey());
  assertEquals(existingActivityTracker.getActivityTrackerId(),newActivityTracker.getActivityTrackerId());
  assertEquals(existingActivityTracker.getGroupId(),newActivityTracker.getGroupId());
  assertEquals(existingActivityTracker.getCompanyId(),newActivityTracker.getCompanyId());
  assertEquals(existingActivityTracker.getUserId(),newActivityTracker.getUserId());
  assertEquals(existingActivityTracker.getUserName(),newActivityTracker.getUserName());
  assertEquals(existingActivityTracker.getCreateDate(),newActivityTracker.getCreateDate());
  assertEquals(existingActivityTracker.getClassNameId(),newActivityTracker.getClassNameId());
  assertEquals(existingActivityTracker.getClassPK(),newActivityTracker.getClassPK());
  assertEquals(existingActivityTracker.getActivity(),newActivityTracker.getActivity());
  assertEquals(existingActivityTracker.getExtraData(),newActivityTracker.getExtraData());
  assertEquals(existingActivityTracker.getReceiverUserId(),newActivityTracker.getReceiverUserId());
  assertEquals(existingActivityTracker.getReceiverUserName(),newActivityTracker.getReceiverUserName());
}
