{
  try (LoggingTimer loggingTimer=new LoggingTimer()){
    StringBundler sb=new StringBundler(4);
    sb.append("select AssetEntry.classNameId, AssetEntry.classPK, ");
    sb.append("SocialEquityLog.* from SocialEquityLog, AssetEntry ");
    sb.append("where SocialEquityLog.assetEntryId = ");
    sb.append("AssetEntry.entryId order by actionDate");
    try (PreparedStatement ps=connection.prepareStatement(sb.toString());ResultSet rs=ps.executeQuery()){
      while (rs.next()) {
        migrateEquityLog(rs);
      }
    }
     sb=new StringBundler(4);
    sb.append("select groupId, classNameId, classPK, name, ");
    sb.append("max(startPeriod) as startPeriod from ");
    sb.append("SocialActivityCounter group by groupId, classNameId, ");
    sb.append("classPK, name");
    try (PreparedStatement ps=connection.prepareStatement(sb.toString());ResultSet rs=ps.executeQuery()){
      while (rs.next()) {
        long groupId=rs.getLong("groupId");
        long classNameId=rs.getLong("classNameId");
        long classPK=rs.getLong("classPK");
        String name=rs.getString("name");
        int startPeriod=rs.getInt("startPeriod");
        sb=new StringBundler(12);
        sb.append("update SocialActivityCounter set endPeriod = ");
        sb.append(SocialActivityCounterConstants.END_PERIOD_UNDEFINED);
        sb.append(" where groupId = ");
        sb.append(groupId);
        sb.append(" and classNameId = ");
        sb.append(classNameId);
        sb.append(" and classPK = ");
        sb.append(classPK);
        sb.append(" and name = '");
        sb.append(name);
        sb.append("' and startPeriod = ");
        sb.append(startPeriod);
        runSQL(sb.toString());
      }
    }
   }
 }
