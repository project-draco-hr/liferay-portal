{
  Connection con=null;
  Statement st=null;
  ResultSet rs=null;
  try {
    long userClassNameId=PortalUtil.getClassNameId(User.class);
    con=DataAccess.getConnection();
    st=con.createStatement();
    rs=st.executeQuery(_GET_EQUITY_LOGS);
    while (rs.next()) {
      AssetEntry assetEntry=AssetEntryLocalServiceUtil.fetchAssetEntry(rs.getLong("assetEntryId"));
      if (assetEntry == null) {
        continue;
      }
      String actionId=rs.getString("actionId");
      if (actionId.equals("SUBSCRIBE")) {
        String className=assetEntry.getClassName();
        if (className.equals(MBThread.class.getName())) {
          MBThread thread=MBThreadLocalServiceUtil.fetchThread(assetEntry.getClassPK());
          assetEntry=AssetEntryLocalServiceUtil.fetchEntry(MBMessage.class.getName(),thread.getRootMessageId());
        }
      }
      Date actionDate=SocialCounterPeriodUtil.getDate(rs.getInt("actionDate") - 365);
      int startPeriod=SocialCounterPeriodUtil.getStartPeriod(actionDate.getTime());
      int endPeriod=SocialCounterPeriodUtil.getEndPeriod(actionDate.getTime());
      if (endPeriod == SocialCounterPeriodUtil.getEndPeriod()) {
        endPeriod=SocialActivityCounterConstants.END_PERIOD_UNDEFINED;
      }
      String name=SocialActivityCounterConstants.NAME_PARTICIPATION;
      int ownerType=SocialActivityCounterConstants.TYPE_ACTOR;
      long classNameId=userClassNameId;
      long classPK=rs.getLong("userId");
      if (rs.getInt("type_") == 1) {
        name=SocialActivityCounterConstants.NAME_CONTRIBUTION;
        ownerType=SocialActivityCounterConstants.TYPE_CREATOR;
        long activityCounterId=CounterLocalServiceUtil.increment();
        updateActivityCounter(activityCounterId,assetEntry.getGroupId(),assetEntry.getCompanyId(),userClassNameId,assetEntry.getUserId(),name,ownerType,startPeriod,endPeriod,rs.getInt("value"));
        name=SocialActivityCounterConstants.NAME_POPULARITY;
        ownerType=SocialActivityCounterConstants.TYPE_ASSET;
        classNameId=assetEntry.getClassNameId();
        classPK=assetEntry.getClassPK();
      }
      updateActivityCounter(rs.getLong("equityLogId"),assetEntry.getGroupId(),assetEntry.getCompanyId(),classNameId,classPK,name,ownerType,startPeriod,endPeriod,rs.getInt("value"));
    }
    runSQL("update SocialActivityCounter set endPeriod = -1 " + "where name in ('contribution','popularity','participation') " + "and startPeriod = ( "+ " select max(startPeriod) "+ " from SocialActivityCounter sac "+ " where sac.groupId = SocialActivityCounter.groupId "+ " and sac.classNameId = SocialActivityCounter.classNameId"+ " and sac.classPK = SocialActivityCounter.classPK "+ " and sac.name = SocialActivityCounter.name)");
  }
  finally {
    DataAccess.cleanUp(con,st,rs);
  }
}
