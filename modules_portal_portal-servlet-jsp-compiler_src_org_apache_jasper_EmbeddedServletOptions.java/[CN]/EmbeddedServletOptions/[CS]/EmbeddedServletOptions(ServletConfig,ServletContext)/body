{
  try {
    if (Float.parseFloat(System.getProperty("java.specification.version")) > 1.4) {
      compilerSourceVM=compilerTargetVM="1.5";
    }
 else {
      compilerSourceVM=compilerTargetVM="1.4";
    }
  }
 catch (  NumberFormatException e) {
  }
  Enumeration enumeration=config.getInitParameterNames();
  while (enumeration.hasMoreElements()) {
    String k=(String)enumeration.nextElement();
    String v=config.getInitParameter(k);
    setProperty(k,v);
  }
  String validating=config.getInitParameter("validating");
  if ("true".equals(validating)) {
    isValidationEnabled=true;
  }
  validating=config.getInitParameter("enableTldValidation");
  if ("true".equals(validating)) {
    isValidationEnabled=true;
  }
  keepGenerated=getBoolean(config,!isJDK6(),"keepgenerated");
  saveBytecode=getBoolean(config,saveBytecode,"saveBytecode");
  trimSpaces=getBoolean(config,trimSpaces,"trimSpaces");
  isPoolingEnabled=getBoolean(config,isPoolingEnabled,"enablePooling");
  mappedFile=getBoolean(config,mappedFile,"mappedfile");
  sendErrorToClient=getBoolean(config,sendErrorToClient,"sendErrToClient");
  classDebugInfo=getBoolean(config,classDebugInfo,"classdebuginfo");
  development=getBoolean(config,development,"development");
  isSmapSuppressed=getBoolean(config,isSmapSuppressed,"suppressSmap");
  isSmapDumped=getBoolean(config,isSmapDumped,"dumpSmap");
  genStringAsCharArray=getBoolean(config,genStringAsCharArray,"genStrAsCharArray");
  genStringAsByteArray=getBoolean(config,genStringAsByteArray,"genStrAsByteArray");
  defaultBufferNone=getBoolean(config,defaultBufferNone,"defaultBufferNone");
  errorOnUseBeanInvalidClassAttribute=getBoolean(config,errorOnUseBeanInvalidClassAttribute,"errorOnUseBeanInvalidClassAttribute");
  fork=getBoolean(config,fork,"fork");
  xpoweredBy=getBoolean(config,xpoweredBy,"xpoweredBy");
  String checkIntervalStr=config.getInitParameter("checkInterval");
  if (checkIntervalStr != null) {
    parseCheckInterval(checkIntervalStr);
  }
  String modificationTestIntervalStr=config.getInitParameter("modificationTestInterval");
  if (modificationTestIntervalStr != null) {
    parseModificationTestInterval(modificationTestIntervalStr);
  }
  String ieClassId=config.getInitParameter("ieClassId");
  if (ieClassId != null)   this.ieClassId=ieClassId;
  String classpath=config.getInitParameter("classpath");
  if (classpath != null)   this.classpath=classpath;
  String sysClassPath=config.getInitParameter("com.sun.appserv.jsp.classpath");
  if (sysClassPath != null)   this.sysClassPath=sysClassPath;
  String dir=config.getInitParameter("scratchdir");
  if (dir != null) {
    scratchDir=new File(dir);
  }
 else {
    scratchDir=(File)context.getAttribute(Constants.TMP_DIR);
    if (scratchDir == null) {
      dir=System.getProperty("java.io.tmpdir");
      if (dir != null)       scratchDir=new File(dir);
    }
  }
  if (this.scratchDir == null) {
    log.severe(Localizer.getMessage("jsp.error.no.scratch.dir"));
    return;
  }
  if (scratchDir.exists() && !(scratchDir.canRead() && scratchDir.canWrite() && scratchDir.isDirectory()))   log.severe(Localizer.getMessage("jsp.error.bad.scratch.dir",scratchDir.getAbsolutePath()));
  this.compiler=config.getInitParameter("compiler");
  String compilerTargetVM=config.getInitParameter("compilerTargetVM");
  if (compilerTargetVM != null) {
    this.compilerTargetVM=compilerTargetVM;
  }
  String compilerSourceVM=config.getInitParameter("compilerSourceVM");
  if (compilerSourceVM != null) {
    this.compilerSourceVM=compilerSourceVM;
  }
  String javaEncoding=config.getInitParameter("javaEncoding");
  if (javaEncoding != null) {
    this.javaEncoding=javaEncoding;
  }
  String compilerClassName=config.getInitParameter("compilerClassName");
  if (compilerClassName != null) {
    this.compilerClassName=compilerClassName;
  }
  String reloadIntervalString=config.getInitParameter("reload-interval");
  if (reloadIntervalString != null) {
    int reloadInterval=0;
    try {
      reloadInterval=Integer.parseInt(reloadIntervalString);
    }
 catch (    NumberFormatException e) {
      if (log.isLoggable(Level.WARNING)) {
        log.warning(Localizer.getMessage("jsp.warning.reloadInterval"));
      }
    }
    if (reloadInterval == -1) {
      this.development=false;
      this.checkInterval=0;
    }
 else {
      parseCheckInterval(reloadIntervalString);
      parseModificationTestInterval(reloadIntervalString);
    }
  }
  String usePrecompiled=config.getInitParameter("usePrecompiled");
  if (usePrecompiled == null) {
    usePrecompiled=config.getInitParameter("use-precompiled");
  }
  if (usePrecompiled != null) {
    if (usePrecompiled.equalsIgnoreCase("true")) {
      this.usePrecompiled=true;
    }
 else     if (usePrecompiled.equalsIgnoreCase("false")) {
      this.usePrecompiled=false;
    }
 else {
      if (log.isLoggable(Level.WARNING)) {
        log.warning(Localizer.getMessage("jsp.warning.usePrecompiled"));
      }
    }
  }
  String capacity=config.getInitParameter("initialCapacity");
  if (capacity == null) {
    capacity=config.getInitParameter("initial-capacity");
  }
  if (capacity != null) {
    try {
      initialCapacity=Integer.parseInt(capacity);
      int value=Constants.DEFAULT_INITIAL_CAPACITY;
      while (value < initialCapacity) {
        value*=2;
      }
      initialCapacity=value;
    }
 catch (    NumberFormatException nfe) {
      if (log.isLoggable(Level.WARNING)) {
        String msg=Localizer.getMessage("jsp.warning.initialcapacity");
        msg=MessageFormat.format(msg,new Object[]{capacity,Integer.valueOf(Constants.DEFAULT_INITIAL_CAPACITY)});
        log.warning(msg);
      }
    }
  }
  String jspCompilerPlugin=config.getInitParameter("javaCompilerPlugin");
  if (jspCompilerPlugin != null) {
    if ("org.apache.jasper.compiler.JikesJavaCompiler".equals(jspCompilerPlugin)) {
      this.compiler="jikes";
    }
 else     if ("org.apache.jasper.compiler.SunJava14Compiler".equals(jspCompilerPlugin)) {
    }
 else {
      if (log.isLoggable(Level.WARNING)) {
        String msg=Localizer.getMessage("jsp.warning.unsupportedJavaCompiler");
        msg=MessageFormat.format(msg,new Object[]{jspCompilerPlugin});
        log.warning(msg);
      }
    }
  }
  tldLocationsCache=new TldLocationsCache(context,this);
  jspConfig=new JspConfig(context,this);
  tagPluginManager=new TagPluginManager(context);
}
