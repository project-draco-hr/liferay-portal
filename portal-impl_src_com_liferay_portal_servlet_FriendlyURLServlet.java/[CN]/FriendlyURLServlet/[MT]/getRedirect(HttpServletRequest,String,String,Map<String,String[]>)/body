{
  if (Validator.isNull(path) || (path.charAt(0) != CharPool.SLASH)) {
    return new Object[]{mainPath,false};
  }
  String friendlyURL=null;
  int pos=path.indexOf(CharPool.SLASH,1);
  if (pos != -1) {
    friendlyURL=path.substring(0,pos);
  }
 else   if (path.length() > 1) {
    friendlyURL=path;
  }
  if (Validator.isNull(friendlyURL)) {
    return new Object[]{mainPath,Boolean.FALSE};
  }
  long companyId=PortalInstances.getCompanyId(request);
  Group group=GroupLocalServiceUtil.fetchFriendlyURLGroup(companyId,friendlyURL);
  if (group == null) {
    String screenName=friendlyURL.substring(1);
    if (_user || !Validator.isNumber(screenName)) {
      User user=UserLocalServiceUtil.fetchUserByScreenName(companyId,screenName);
      if (user != null) {
        group=user.getGroup();
      }
 else       if (_log.isWarnEnabled()) {
        _log.warn("No user exists with friendly URL " + screenName);
      }
    }
 else {
      long groupId=GetterUtil.getLong(screenName);
      group=GroupLocalServiceUtil.fetchGroup(groupId);
      if (group == null) {
        if (_log.isDebugEnabled()) {
          _log.debug("No group exists with friendly URL " + groupId + ". Try fetching by screen name instead.");
        }
        User user=UserLocalServiceUtil.fetchUserByScreenName(companyId,screenName);
        if (user != null) {
          group=user.getGroup();
        }
 else         if (_log.isWarnEnabled()) {
          _log.warn("No user or group exists with friendly URL " + groupId);
        }
      }
    }
  }
  if (group == null) {
    StringBundler sb=new StringBundler(5);
    sb.append("{companyId=");
    sb.append(companyId);
    sb.append(", friendlyURL=");
    sb.append(friendlyURL);
    sb.append("}");
    throw new NoSuchGroupException(sb.toString());
  }
  friendlyURL=null;
  if ((pos != -1) && ((pos + 1) != path.length())) {
    friendlyURL=path.substring(pos);
  }
  if (Validator.isNull(friendlyURL)) {
    request.setAttribute(WebKeys.REDIRECT_TO_DEFAULT_LAYOUT,Boolean.TRUE);
  }
  Map<String,Object> requestContext=new HashMap<>();
  requestContext.put("request",request);
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  if (serviceContext == null) {
    serviceContext=ServiceContextFactory.getInstance(request);
    ServiceContextThreadLocal.pushServiceContext(serviceContext);
  }
  if (Validator.isNotNull(friendlyURL)) {
    try {
      LayoutFriendlyURLComposite layoutFriendlyURLComposite=PortalUtil.getLayoutFriendlyURLComposite(group.getGroupId(),_private,friendlyURL,params,requestContext);
      Layout layout=layoutFriendlyURLComposite.getLayout();
      request.setAttribute(WebKeys.LAYOUT,layout);
      String layoutFriendlyURLCompositeFriendlyURL=layoutFriendlyURLComposite.getFriendlyURL();
      pos=layoutFriendlyURLCompositeFriendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR);
      if (pos != 0) {
        if (pos != -1) {
          layoutFriendlyURLCompositeFriendlyURL=layoutFriendlyURLCompositeFriendlyURL.substring(0,pos);
        }
        Locale locale=PortalUtil.getLocale(request);
        boolean i18nRedirect=false;
        String i18nLanguageId=(String)request.getAttribute(WebKeys.I18N_LANGUAGE_ID);
        if (Validator.isNotNull(i18nLanguageId)) {
          Locale i18nLocale=LocaleUtil.fromLanguageId(i18nLanguageId);
          if (!LanguageUtil.isAvailableLocale(group.getGroupId(),i18nLocale)) {
            i18nRedirect=true;
          }
        }
        if (i18nRedirect || !StringUtil.equalsIgnoreCase(layoutFriendlyURLCompositeFriendlyURL,layout.getFriendlyURL(locale))) {
          Locale originalLocale=setAlternativeLayoutFriendlyURL(request,layout,layoutFriendlyURLCompositeFriendlyURL);
          String redirect=PortalUtil.getLocalizedFriendlyURL(request,layout,locale,originalLocale);
          return new Object[]{redirect,Boolean.TRUE};
        }
      }
    }
 catch (    NoSuchLayoutException nsle) {
      List<Layout> layouts=LayoutLocalServiceUtil.getLayouts(group.getGroupId(),_private,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
      for (      Layout layout : layouts) {
        if (layout.matches(request,friendlyURL)) {
          String redirect=PortalUtil.getLayoutActualURL(layout,mainPath);
          return new Object[]{redirect,Boolean.FALSE};
        }
      }
      throw nsle;
    }
  }
  String actualURL=PortalUtil.getActualURL(group.getGroupId(),_private,mainPath,friendlyURL,params,requestContext);
  return new Object[]{actualURL,Boolean.FALSE};
}
