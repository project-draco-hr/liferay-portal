{
  StringBundler sb=new StringBundler();
  try (UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content))){
    String line=null;
    String previousLine=StringPool.BLANK;
    int lineCount=0;
    String ifClause=StringPool.BLANK;
    String packageName=StringPool.BLANK;
    String regexPattern=StringPool.BLANK;
    while ((line=unsyncBufferedReader.readLine()) != null) {
      lineCount++;
      if (line.startsWith("package ")) {
        packageName=line.substring(8,line.length() - 1);
      }
      if (line.startsWith("import ")) {
        int pos=line.lastIndexOf(CharPool.PERIOD);
        if (pos != -1) {
          String importPackageName=line.substring(7,pos);
          if (importPackageName.equals(packageName)) {
            continue;
          }
        }
      }
      String trimmedLine=StringUtil.trimLeading(line);
      if (!trimmedLine.startsWith(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
        if (line.contains(StringPool.TAB + StringPool.SPACE) && !previousLine.endsWith("&&") && !previousLine.endsWith("|")&& !previousLine.contains(StringPool.TAB + "((")&& !previousLine.contains(StringPool.TAB + StringPool.LESS_THAN)&& !previousLine.contains(StringPool.TAB + StringPool.SPACE)&& !previousLine.contains(StringPool.TAB + "for (")&& !previousLine.contains(StringPool.TAB + "implements ")&& !previousLine.contains(StringPool.TAB + "throws ")) {
          line=StringUtil.replace(line,StringPool.TAB + StringPool.SPACE,StringPool.TAB);
        }
        line=formatIncorrectSyntax(line,",}","}",false);
        line=formatWhitespace(line,trimmedLine,true);
      }
      if (line.contains("PortalUtil.getClassNameId(") && fileName.endsWith("ServiceImpl.java")) {
        processMessage(fileName,"Use classNameLocalService.getClassNameId",lineCount);
      }
      if (!isExcludedPath(_hibernateSQLQueryExcludes,absolutePath) && line.contains("= session.createSQLQuery(") && content.contains("com.liferay.portal.kernel.dao.orm.Session")) {
        line=StringUtil.replace(line,"createSQLQuery","createSynchronizedSQLQuery");
      }
      line=replacePrimitiveWrapperInstantiation(line);
      if (trimmedLine.startsWith("throw new IOException(") && line.contains("e.getMessage()")) {
        line=StringUtil.replace(line,".getMessage()",StringPool.BLANK);
      }
      if (trimmedLine.contains("StopWatch stopWatch = null;")) {
        processMessage(fileName,"Do not set stopwatch to null",lineCount);
      }
      checkEmptyCollection(trimmedLine,fileName,lineCount);
      line=formatEmptyArray(line);
      checkResourceUtil(line,fileName,lineCount);
      if (trimmedLine.startsWith("* @deprecated") && _addMissingDeprecationReleaseVersion) {
        ComparableVersion mainReleaseComparableVersion=getMainReleaseComparableVersion();
        if (!trimmedLine.startsWith("* @deprecated As of ")) {
          line=StringUtil.replace(line,"* @deprecated","* @deprecated As of " + mainReleaseComparableVersion.toString());
        }
 else {
          String version=trimmedLine.substring(20);
          version=StringUtil.split(version,StringPool.SPACE)[0];
          version=StringUtil.replace(version,StringPool.COMMA,StringPool.BLANK);
          ComparableVersion comparableVersion=new ComparableVersion(version);
          if (comparableVersion.compareTo(mainReleaseComparableVersion) > 0) {
            line=StringUtil.replaceFirst(line,version,mainReleaseComparableVersion.toString());
          }
 else           if (StringUtil.count(version,CharPool.PERIOD) == 1) {
            line=StringUtil.replaceFirst(line,version,version + ".0");
          }
        }
      }
      if (trimmedLine.startsWith("* @see ") && (StringUtil.count(trimmedLine,CharPool.AT) > 1)) {
        processMessage(fileName,"Do not use @see with another annotation",lineCount);
      }
      checkInefficientStringMethods(line,fileName,absolutePath,lineCount,true);
      if (trimmedLine.startsWith(StringPool.EQUAL)) {
        processMessage(fileName,"line break",lineCount);
      }
      if (trimmedLine.startsWith("},") && !trimmedLine.equals("},")) {
        processMessage(fileName,"line break",lineCount);
      }
      if (line.contains("ActionForm form")) {
        processMessage(fileName,"Rename form to actionForm",lineCount);
      }
      if (line.contains("ActionMapping mapping")) {
        processMessage(fileName,"Rename mapping to ActionMapping",lineCount);
      }
      if (!trimmedLine.equals("{") && line.endsWith("{") && !line.endsWith(" {")) {
        line=StringUtil.replaceLast(line,"{"," {");
      }
      line=sortExceptions(line);
      if (trimmedLine.startsWith("Pattern ") || Validator.isNotNull(regexPattern)) {
        regexPattern=regexPattern + trimmedLine;
        if (trimmedLine.endsWith(");")) {
          checkRegexPattern(regexPattern,fileName,lineCount);
          regexPattern=StringPool.BLANK;
        }
      }
      int lineLeadingTabCount=getLeadingTabCount(line);
      int previousLineLeadingTabCount=getLeadingTabCount(previousLine);
      if (!trimmedLine.startsWith(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
        String strippedQuotesLine=stripQuotes(trimmedLine);
        int strippedQuotesLineOpenParenthesisCount=StringUtil.count(strippedQuotesLine,CharPool.OPEN_PARENTHESIS);
        if (!trimmedLine.startsWith(StringPool.OPEN_PARENTHESIS) && trimmedLine.endsWith(") {") && (strippedQuotesLineOpenParenthesisCount > 0)&& (getLevel(trimmedLine) > 0)) {
          processMessage(fileName,"line break",lineCount);
        }
        if (line.endsWith(StringPool.OPEN_PARENTHESIS)) {
          if (line.contains(" && ") || line.contains(" || ")) {
            processMessage(fileName,"line break",lineCount);
          }
          int pos=strippedQuotesLine.indexOf(" + ");
          if (pos != -1) {
            String linePart=strippedQuotesLine.substring(0,pos);
            if ((getLevel(linePart,"(",")") == 0) && (getLevel(linePart,"[","]") == 0)) {
              processMessage(fileName,"line break",lineCount);
            }
          }
        }
        String indent=StringPool.BLANK;
        if (!trimmedLine.startsWith(StringPool.CLOSE_CURLY_BRACE) && strippedQuotesLine.contains(StringPool.CLOSE_CURLY_BRACE)) {
          if ((getLevel(strippedQuotesLine,"{","}") < 0) && (lineLeadingTabCount > 0)) {
            for (int i=0; i < lineLeadingTabCount - 1; i++) {
              indent+=StringPool.TAB;
            }
            int x=line.lastIndexOf(CharPool.CLOSE_CURLY_BRACE);
            return StringUtil.replace(content,"\n" + line + "\n","\n" + line.substring(0,x) + "\n"+ indent+ line.substring(x)+ "\n");
          }
        }
        if (Validator.isNull(ifClause) && !previousLine.contains("\tthrows ") && !previousLine.contains(" throws ")&& (previousLineLeadingTabCount == (lineLeadingTabCount - 1))) {
          int x=-1;
          while (true) {
            x=previousLine.indexOf(", ",x + 1);
            if (x == -1) {
              break;
            }
            if (ToolsUtil.isInsideQuotes(previousLine,x)) {
              continue;
            }
            String linePart=previousLine.substring(0,x);
            linePart=stripQuotes(linePart);
            if ((getLevel(linePart,"(",")") != 0) || (getLevel(linePart,"<",">") != 0)) {
              continue;
            }
            linePart=previousLine.substring(x);
            linePart=stripQuotes(linePart,CharPool.QUOTE);
            if ((getLevel(linePart,"(",")") != 0) || (getLevel(linePart,"<",">") != 0)) {
              continue;
            }
            if (Validator.isNull(indent)) {
              for (int i=0; i < lineLeadingTabCount - 1; i++) {
                indent+=StringPool.TAB;
              }
            }
            return StringUtil.replace(content,"\n" + previousLine + "\n","\n" + previousLine.substring(0,x + 1) + "\n"+ indent+ previousLine.substring(x + 2)+ "\n");
          }
        }
        if (previousLine.endsWith(StringPool.OPEN_PARENTHESIS) || previousLine.endsWith(StringPool.PLUS)) {
          int x=-1;
          while (true) {
            x=strippedQuotesLine.indexOf(StringPool.COMMA_AND_SPACE,x + 1);
            if (x == -1) {
              break;
            }
            int level=getLevel(strippedQuotesLine.substring(0,x));
            if ((previousLine.endsWith(StringPool.OPEN_PARENTHESIS) && (level < 0)) || (previousLine.endsWith(StringPool.PLUS) && (level <= 0))) {
              processMessage(fileName,"line break",lineCount);
            }
          }
        }
        int x=strippedQuotesLine.indexOf(", ");
        if (x != -1) {
          String linePart=strippedQuotesLine.substring(0,x);
          if (getLevel(linePart) < 0) {
            processMessage(fileName,"line break",lineCount);
          }
        }
 else         if (trimmedLine.endsWith(StringPool.COMMA) && !trimmedLine.startsWith("for (")) {
          if (getLevel(trimmedLine) > 0) {
            processMessage(fileName,"line break",lineCount);
          }
        }
        if (line.endsWith(" +") || line.endsWith(" -") || line.endsWith(" *")|| line.endsWith(" /")) {
          x=line.indexOf(" = ");
          if (x != -1) {
            int y=line.indexOf(CharPool.QUOTE);
            if ((y == -1) || (x < y)) {
              processMessage(fileName,"line break",lineCount);
            }
          }
        }
        if (line.endsWith(" throws") || ((previousLine.endsWith(StringPool.COMMA) || previousLine.endsWith(StringPool.OPEN_PARENTHESIS)) && line.contains(" throws ") && (line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON)))) {
          processMessage(fileName,"line break",lineCount);
        }
        if (trimmedLine.startsWith(StringPool.PERIOD) || (line.endsWith(StringPool.PERIOD) && line.contains(StringPool.EQUAL))) {
          processMessage(fileName,"line break",lineCount);
        }
        if (trimmedLine.matches("^\\} (catch|else|finally) .*")) {
          processMessage(fileName,"line break",lineCount);
        }
        if (previousLine.endsWith(StringPool.OPEN_PARENTHESIS) && trimmedLine.startsWith(StringPool.CLOSE_PARENTHESIS)) {
          processMessage(fileName,"line break",lineCount);
        }
      }
      if (line.contains("    ") && !line.matches("\\s*\\*.*")) {
        if (!fileName.endsWith("StringPool.java")) {
          processMessage(fileName,"tab",lineCount);
        }
      }
      if (line.contains("  {") && !line.matches("\\s*\\*.*")) {
        processMessage(fileName,"{",lineCount);
      }
      if (trimmedLine.startsWith("catch (") || trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (")|| trimmedLine.startsWith("while (")|| Validator.isNotNull(ifClause)) {
        ifClause=ifClause + line + StringPool.NEW_LINE;
        if (line.endsWith(") {")) {
          String newIfClause=formatIfClause(ifClause,fileName,lineCount);
          if (!ifClause.equals(newIfClause) && content.contains(ifClause)) {
            return StringUtil.replace(content,ifClause,newIfClause);
          }
          ifClause=StringPool.BLANK;
        }
 else         if (line.endsWith(StringPool.SEMICOLON)) {
          String trimmedIfClause=StringUtil.trim(ifClause);
          if (!trimmedIfClause.startsWith("while ") && !trimmedIfClause.contains("{\t")) {
            processMessage(fileName,"Incorrect if statement",lineCount);
          }
          ifClause=StringPool.BLANK;
        }
      }
      int lineLength=getLineLength(line);
      if (!line.startsWith("import ") && !line.startsWith("package ") && !line.matches("\\s*\\*.*")) {
        if (fileName.endsWith("Table.java") && line.contains("String TABLE_SQL_CREATE = ")) {
        }
 else         if (fileName.endsWith("Table.java") && line.contains("String TABLE_SQL_DROP = ")) {
        }
 else         if (fileName.endsWith("Table.java") && line.contains(" index IX_")) {
        }
 else         if (lineLength > _maxLineLength) {
          if (!isExcludedPath(_lineLengthExcludes,absolutePath,lineCount) && !isAnnotationParameter(content,trimmedLine)) {
            String truncateLongLinesContent=getTruncateLongLinesContent(content,line,trimmedLine,lineCount);
            if ((truncateLongLinesContent != null) && !truncateLongLinesContent.equals(content)) {
              return truncateLongLinesContent;
            }
            processMessage(fileName,"> " + _maxLineLength,lineCount);
          }
        }
 else {
          if (!trimmedLine.startsWith("//")) {
            if (previousLine.endsWith(StringPool.COMMA) && previousLine.contains(StringPool.OPEN_PARENTHESIS) && !previousLine.contains("for (")&& (lineLeadingTabCount > previousLineLeadingTabCount)) {
              processMessage(fileName,"line break",lineCount);
            }
            if ((lineLeadingTabCount == previousLineLeadingTabCount) && (previousLine.endsWith(StringPool.EQUAL) || previousLine.endsWith(StringPool.OPEN_PARENTHESIS))) {
              processMessage(fileName,"tab",lineCount);
            }
            if (Validator.isNotNull(trimmedLine) && previousLine.endsWith(StringPool.OPEN_CURLY_BRACE) && !trimmedLine.startsWith(StringPool.CLOSE_CURLY_BRACE)&& ((previousLineLeadingTabCount + 1) != lineLeadingTabCount)) {
              processMessage(fileName,"tab",lineCount);
            }
            if (previousLine.endsWith(StringPool.PERIOD)) {
              int x=trimmedLine.indexOf(CharPool.OPEN_PARENTHESIS);
              if ((x != -1) && ((getLineLength(previousLine) + x) < _maxLineLength) && (trimmedLine.endsWith(StringPool.OPEN_PARENTHESIS) || (trimmedLine.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS))) {
                processMessage(fileName,"line break",lineCount);
              }
            }
            int diff=lineLeadingTabCount - previousLineLeadingTabCount;
            if (trimmedLine.startsWith("throws ") && ((diff == 0) || (diff > 1))) {
              processMessage(fileName,"tab",lineCount);
            }
            if ((diff == 2) && (previousLineLeadingTabCount > 0) && line.endsWith(StringPool.SEMICOLON)&& !previousLine.contains(StringPool.TAB + "for (")&& !previousLine.contains(StringPool.TAB + "try (")) {
              line=StringUtil.replaceFirst(line,StringPool.TAB,StringPool.BLANK);
            }
          }
          String combinedLinesContent=getCombinedLinesContent(content,fileName,absolutePath,line,trimmedLine,lineLength,lineCount,previousLine,lineLeadingTabCount,previousLineLeadingTabCount);
          if ((combinedLinesContent != null) && !combinedLinesContent.equals(content)) {
            return combinedLinesContent;
          }
        }
      }
      if (lineCount > 1) {
        sb.append(previousLine);
        sb.append("\n");
        if (addExtraEmptyLine(previousLine,line,true)) {
          sb.append("\n");
        }
      }
      previousLine=line;
    }
    sb.append(previousLine);
  }
   String newContent=sb.toString();
  if (newContent.endsWith("\n")) {
    newContent=newContent.substring(0,newContent.length() - 1);
  }
  return newContent;
}
