{
  Matcher matcher=_deprecatedPattern.matcher(line);
  if (!matcher.find()) {
    return line;
  }
  ComparableVersion mainReleaseComparableVersion=getMainReleaseComparableVersion(fileName,absolutePath,true);
  if (mainReleaseComparableVersion == null) {
    return line;
  }
  if (matcher.group(2) == null) {
    return StringUtil.insert(line," As of " + mainReleaseComparableVersion.toString(),matcher.end(1));
  }
  String version=matcher.group(3);
  ComparableVersion comparableVersion=new ComparableVersion(version);
  if (comparableVersion.compareTo(mainReleaseComparableVersion) > 0) {
    return StringUtil.replaceFirst(line,version,mainReleaseComparableVersion.toString());
  }
  if (StringUtil.count(version,CharPool.PERIOD) == 1) {
    return StringUtil.insert(line,".0",matcher.end(3));
  }
  String deprecatedInfo=matcher.group(4);
  if ((deprecatedInfo != null) && !deprecatedInfo.startsWith(StringPool.COMMA)) {
    return StringUtil.insert(line,StringPool.COMMA,matcher.end(3));
  }
  return line;
}
