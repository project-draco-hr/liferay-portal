{
  String strippedQuotesIfClause=stripQuotes(ifClause);
  if (strippedQuotesIfClause.contains("!(") || strippedQuotesIfClause.contains("//")) {
    return ifClause;
  }
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(ifClause));
  String line=null;
  String previousLine=null;
  int previousLineLength=0;
  int previousLineLeadingWhitespace=0;
  int previousLineLevel=0;
  boolean previousLineIsStartCriteria=true;
  int baseLeadingWhitespace=0;
  int insideMethodCallExpectedWhitespace=0;
  int level=-1;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    String originalLine=line;
    String trimmedLine=StringUtil.trimLeading(line);
    int x=getIncorrectLineBreakPos(line,previousLine);
    if (x != -1) {
      String leadingWhitespace=line.substring(0,line.indexOf(trimmedLine));
      return StringUtil.replace(ifClause,line,line.substring(0,x) + "\n" + leadingWhitespace+ line.substring(x + 1));
    }
    if ((previousLineLength > 0) && previousLineIsStartCriteria && (previousLineLevel >= 0)&& previousLine.matches(".*[|&^]")) {
      Matcher matcher=_ifStatementCriteriaPattern.matcher(trimmedLine);
      while (matcher.find()) {
        if (ToolsUtil.isInsideQuotes(trimmedLine,matcher.end())) {
          continue;
        }
        String linePart=trimmedLine.substring(0,matcher.end());
        int linePartLevel=getLevel(linePart);
        if ((linePartLevel <= 0) && ((previousLineLength + linePart.length()) < _maxLineLength)) {
          if (linePart.equals(trimmedLine)) {
            return StringUtil.replace(ifClause,previousLine + "\n" + originalLine,previousLine + StringPool.SPACE + trimmedLine);
          }
 else {
            String newPreviousLine=previousLine + StringPool.SPACE + linePart;
            String newLine=StringUtil.replaceFirst(originalLine,linePart,StringPool.BLANK);
            return StringUtil.replace(ifClause,previousLine + "\n" + originalLine,newPreviousLine + "\n" + newLine);
          }
        }
      }
    }
    line=StringUtil.replace(line,StringPool.TAB,StringPool.FOUR_SPACES);
    int leadingWhitespace=line.length() - trimmedLine.length();
    if (Validator.isNull(previousLine)) {
      baseLeadingWhitespace=line.indexOf(CharPool.OPEN_PARENTHESIS) + 1;
    }
 else     if (previousLine.endsWith("|") || previousLine.endsWith("&") || previousLine.endsWith("^")) {
      int expectedLeadingWhitespace=baseLeadingWhitespace + level;
      if (leadingWhitespace != expectedLeadingWhitespace) {
        return fixIfClause(ifClause,originalLine,leadingWhitespace - expectedLeadingWhitespace);
      }
    }
 else {
      int expectedLeadingWhitespace=0;
      if (previousLine.contains(StringPool.TAB + "else if (")) {
        expectedLeadingWhitespace=baseLeadingWhitespace + 3;
      }
 else       if (previousLine.contains(StringPool.TAB + "if (")) {
        expectedLeadingWhitespace=baseLeadingWhitespace + 4;
      }
 else       if (previousLine.contains(StringPool.TAB + "while (")) {
        expectedLeadingWhitespace=baseLeadingWhitespace + 5;
      }
      if (previousLine.endsWith(StringPool.COMMA) && (insideMethodCallExpectedWhitespace > 0)) {
        if (previousLineLevel < 0) {
          insideMethodCallExpectedWhitespace-=4;
        }
        expectedLeadingWhitespace=insideMethodCallExpectedWhitespace;
      }
 else {
        if (expectedLeadingWhitespace == 0) {
          expectedLeadingWhitespace=previousLineLeadingWhitespace + 4;
        }
        if (previousLine.endsWith(StringPool.OPEN_PARENTHESIS)) {
          insideMethodCallExpectedWhitespace=expectedLeadingWhitespace;
        }
      }
      if (leadingWhitespace != expectedLeadingWhitespace) {
        return fixIfClause(ifClause,originalLine,leadingWhitespace - expectedLeadingWhitespace);
      }
    }
    if (line.endsWith(") {")) {
      return ifClause;
    }
    int lineLevel=getLevel(trimmedLine);
    level+=lineLevel;
    if (Validator.isNotNull(previousLine)) {
      if (!previousLine.endsWith("|") && !previousLine.endsWith("&") && !previousLine.endsWith("^")) {
        previousLineIsStartCriteria=false;
      }
 else {
        previousLineIsStartCriteria=true;
      }
    }
    previousLine=originalLine;
    previousLineLength=line.length();
    previousLineLevel=lineLevel;
    previousLineLeadingWhitespace=leadingWhitespace;
  }
  return ifClause;
}
