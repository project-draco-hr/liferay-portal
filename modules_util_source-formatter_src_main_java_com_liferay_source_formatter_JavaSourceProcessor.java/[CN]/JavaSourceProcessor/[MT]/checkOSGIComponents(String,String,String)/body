{
  String moduleServicePackagePath=null;
  Matcher matcher=_serviceUtilImportPattern.matcher(content);
  while (matcher.find()) {
    String serviceUtilClassName=matcher.group(2);
    if (moduleServicePackagePath == null) {
      moduleServicePackagePath=getModuleServicePackagePath(fileName);
    }
    if (Validator.isNotNull(moduleServicePackagePath)) {
      String serviceUtilClassPackagePath=matcher.group(1);
      if (serviceUtilClassPackagePath.startsWith(moduleServicePackagePath)) {
        processErrorMessage(fileName,"LPS-59076: Convert OSGi Component to Spring bean: " + fileName);
        continue;
      }
    }
    processErrorMessage(fileName,"LPS-59076: Use @Reference instead of calling " + serviceUtilClassName + " directly: "+ fileName);
  }
  matcher=_setReferenceMethodPattern.matcher(content);
  while (matcher.find()) {
    String annotationParameters=matcher.group(2);
    if (!annotationParameters.contains("unbind =")) {
      String setMethodName=matcher.group(4);
      if (!content.contains("un" + setMethodName + "(")) {
        if (Validator.isNull(annotationParameters)) {
          return StringUtil.insert(content,"(unbind = \"-\")",matcher.start(2));
        }
        if (!annotationParameters.contains(StringPool.NEW_LINE)) {
          return StringUtil.insert(content,", unbind = \"-\"",matcher.end(2) - 1);
        }
        if (!annotationParameters.contains("\n\n")) {
          String indent=matcher.group(1) + StringPool.TAB;
          int x=content.lastIndexOf("\n",matcher.end(2) - 1);
          return StringUtil.replaceFirst(content,"\n",",\n" + indent + "unbind = \"-\""+ "\n",x - 1);
        }
      }
    }
    String methodContent=matcher.group(6);
    Matcher referenceMethodContentMatcher=_setReferenceMethodContentPattern.matcher(methodContent);
    if (!referenceMethodContentMatcher.find()) {
      continue;
    }
    if (moduleServicePackagePath == null) {
      moduleServicePackagePath=getModuleServicePackagePath(fileName);
    }
    if (Validator.isNotNull(moduleServicePackagePath)) {
      String typeName=matcher.group(5);
      StringBundler sb=new StringBundler(5);
      sb.append("\nimport ");
      sb.append(moduleServicePackagePath);
      sb.append(".*\\.");
      sb.append(typeName);
      sb.append(StringPool.SEMICOLON);
      Pattern importPattern=Pattern.compile(sb.toString());
      Matcher importMatcher=importPattern.matcher(content);
      if (importMatcher.find()) {
        processErrorMessage(fileName,"LPS-59076: Convert OSGi Component to Spring bean: " + fileName);
        break;
      }
    }
  }
  return content;
}
