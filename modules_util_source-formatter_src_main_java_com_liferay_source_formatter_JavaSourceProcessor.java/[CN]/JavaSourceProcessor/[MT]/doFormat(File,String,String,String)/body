{
  if (hasGeneratedTag(content)) {
    return content;
  }
  _ungeneratedFiles.add(file);
  String className=file.getName();
  int pos=className.lastIndexOf(CharPool.PERIOD);
  className=className.substring(0,pos);
  String packagePath=ToolsUtil.getPackagePath(fileName);
  checkPackagePath(content,fileName,packagePath);
  if (packagePath.endsWith(".model")) {
    if (content.contains("extends " + className + "Model")) {
      return content;
    }
  }
  String newContent=trimContent(content,false);
  if (newContent.contains("$\n */")) {
    processMessage(fileName,"*");
    newContent=StringUtil.replace(newContent,"$\n */","$\n *\n */");
  }
  newContent=fixCopyright(newContent,absolutePath,fileName,className);
  if (newContent.contains(className + ".java.html")) {
    processMessage(fileName,"Java2HTML");
  }
  if (newContent.contains(" * @author Raymond Aug") && !newContent.contains(" * @author Raymond Aug\u00e9")) {
    newContent=newContent.replaceFirst("Raymond Aug.++","Raymond Aug\u00e9");
    processMessage(fileName,"UTF-8");
  }
  checkMissingAuthor(newContent,fileName,className);
  newContent=fixDataAccessConnection(className,newContent);
  newContent=fixSessionKey(fileName,newContent,sessionKeyPattern);
  newContent=StringUtil.replace(newContent,new String[]{"com.liferay.portal.PortalException","com.liferay.portal.SystemException","com.liferay.util.LocalizationUtil"},new String[]{"com.liferay.portal.kernel.exception.PortalException","com.liferay.portal.kernel.exception.SystemException","com.liferay.portal.kernel.util.LocalizationUtil"});
  newContent=StringUtil.replace(newContent," final static "," static final ");
  newContent=fixCompatClassImports(absolutePath,newContent);
  ImportsFormatter importsFormatter=new JavaImportsFormatter();
  newContent=importsFormatter.format(newContent,packagePath,className);
  newContent=StringUtil.replace(newContent,new String[]{";\n/**","\t/*\n\t *",";;\n","\n/**\n *\n *"},new String[]{";\n\n/**","\t/**\n\t *",";\n","\n/**\n *"});
  newContent=fixMissingEmptyLines(newContent);
  newContent=fixRedundantEmptyLines(newContent);
  newContent=fixIncorrectLineBreaks(newContent,fileName);
  newContent=formatAnnotations(fileName,StringPool.BLANK,newContent,StringPool.BLANK,true);
  Matcher matcher=_logPattern.matcher(newContent);
  if (matcher.find()) {
    String logClassName=matcher.group(1);
    if (!logClassName.equals(className)) {
      newContent=StringUtil.replaceLast(newContent,logClassName + ".class)",className + ".class)");
    }
  }
  if (!isExcludedPath(_staticLogVariableExcludes,absolutePath)) {
    newContent=StringUtil.replace(newContent,"private Log _log","private static final Log _log");
  }
  newContent=StringUtil.replace(newContent,new String[]{"!Validator.isNotNull(","!Validator.isNull("},new String[]{"Validator.isNull(","Validator.isNotNull("});
  if (newContent.contains("*/\npackage ")) {
    processMessage(fileName,"package");
  }
  if (portalSource && !_allowUseServiceUtilInServiceImpl && !fileName.contains("/wsrp/bind/")&& !className.equals("BaseServiceImpl")&& className.endsWith("ServiceImpl")&& newContent.contains("ServiceUtil.")) {
    processMessage(fileName,"ServiceUtil");
  }
  boolean isRunOutsidePortalExclusion=isExcludedPath(getRunOutsidePortalExcludes(),absolutePath);
  if (!isRunOutsidePortalExclusion && !isExcludedPath(_proxyExcludes,absolutePath) && newContent.contains("import java.lang.reflect.Proxy;")) {
    processMessage(fileName,"Proxy");
  }
  if (newContent.contains("import edu.emory.mathcs.backport.java")) {
    processMessage(fileName,"edu.emory.mathcs.backport.java");
  }
  if (newContent.contains("import jodd.util.StringPool")) {
    processMessage(fileName,"jodd.util.StringPool");
  }
  if (newContent.contains("com.liferay.portal.kernel.util.UnmodifiableList")) {
    processMessage(fileName,"Use java.util.Collections.unmodifiableList instead of " + "com.liferay.portal.kernel.util.UnmodifiableList");
  }
  for (int pos1=-1; ; ) {
    pos1=newContent.indexOf(StringPool.TAB + "try {",pos1 + 1);
    if (pos1 == -1) {
      break;
    }
    int pos2=newContent.indexOf(StringPool.TAB + "try {",pos1 + 1);
    int pos3=newContent.indexOf("\"select count(",pos1);
    if ((pos2 != -1) && (pos3 != -1) && (pos2 < pos3)) {
      continue;
    }
    int pos4=newContent.indexOf("rs.getLong(1)",pos1);
    int pos5=newContent.indexOf(StringPool.TAB + "finally {",pos1);
    if ((pos3 == -1) || (pos4 == -1) || (pos5 == -1)) {
      break;
    }
    if ((pos3 < pos4) && (pos4 < pos5)) {
      processMessage(fileName,"Use getInt(1) for count");
    }
  }
  matcher=_processCallablePattern.matcher(content);
  if (matcher.find() && !content.contains("private static final long serialVersionUID")) {
    processMessage(fileName,"Assign ProcessCallable implementation a serialVersionUID");
  }
  checkLanguageKeys(fileName,absolutePath,newContent,languageKeyPattern);
  newContent=sortPutOrSetCalls(newContent,jsonObjectPutBlockPattern,jsonObjectPutPattern);
  newContent=sortPutOrSetCalls(newContent,setAttributeBlockPattern,setAttributePattern);
  newContent=formatStringBundler(fileName,newContent,_maxLineLength);
  newContent=StringUtil.replace(newContent,StringPool.TAB + "for (;;) {",StringPool.TAB + "while (true) {");
  newContent=formatExceptions(newContent,file,packagePath,fileName);
  if (!isRunOutsidePortalExclusion && !isExcludedPath(_secureRandomExcludes,absolutePath) && content.contains("java.security.SecureRandom")&& !content.contains("javax.crypto.KeyGenerator")) {
    processMessage(fileName,"Use SecureRandomUtil or com.liferay.portal.kernel.security." + "SecureRandom instead of java.security.SecureRandom");
  }
  checkLogLevel(newContent,fileName);
  checkSystemEventAnnotations(newContent,fileName);
  newContent=StringUtil.replace(newContent," static interface "," interface ");
  newContent=fixSystemExceptions(newContent);
  if (portalSource && (fileName.contains("/test/integration/") || fileName.contains("/testIntegration/java"))) {
    newContent=StringUtil.replace(newContent,"FinderCacheUtil.clearCache();",StringPool.BLANK);
  }
  newContent=fixIncorrectParameterTypeForLanguageUtil(newContent,false,fileName);
  if (portalSource && fileName.contains("/portal-kernel/") && content.contains("import javax.servlet.jsp.")) {
    processMessage(fileName,"Never import javax.servlet.jsp.* from portal-kernel");
  }
  if (!isExcludedPath(_diamondOperatorExcludes,absolutePath)) {
    newContent=applyDiamondOperator(newContent);
  }
  checkFinderCacheInterfaceMethod(fileName,newContent);
  if (!fileName.contains("/test/") && !fileName.contains("/testIntegration/") && !isExcludedPath(_secureXmlExcludes,absolutePath)) {
    checkXMLSecurity(fileName,content,isRunOutsidePortalExclusion);
  }
  if (!fileName.contains("/test/") && !fileName.contains("/testIntegration/") && !isExcludedPath(_secureDeserializationExcludes,absolutePath)) {
    checkDeserializationSecurity(fileName,content,isRunOutsidePortalExclusion);
  }
  if (newContent.contains("org.testng.Assert")) {
    processMessage(fileName,"Use org.junit.Assert instead of org.testng.Assert");
  }
  if (portalSource && isModulesFile(absolutePath) && packagePath.startsWith("com.liferay")) {
    newContent=formatModulesFile(fileName,absolutePath,className,packagePath,newContent);
  }
  newContent=checkPrincipalException(newContent);
  if (newContent.contains(".supportsBatchUpdates()") && !fileName.endsWith("AutoBatchPreparedStatementUtil.java")) {
    processMessage(fileName,"Use AutoBatchPreparedStatementUtil instead of " + "DatabaseMetaData.supportsBatchUpdates");
  }
  if (newContent.contains("Configurable.createConfigurable(") && !fileName.endsWith("ConfigurableUtil.java")) {
    processMessage(fileName,"Use ConfigurableUtil.createConfigurable instead of " + "Configurable.createConfigurable");
  }
  checkPropertyUtils(fileName,newContent);
  if (!absolutePath.contains("poshi") && !fileName.endsWith("StringUtilTest.java")) {
    checkStringUtilReplace(fileName,newContent);
  }
  if (fileName.endsWith("ResourceCommand.java") && newContent.contains("ServletResponseUtil.sendFile(")) {
    processMessage(fileName,"Use PortletResponseUtil.sendFile instead of " + "ServletResponseUtil.sendFile");
  }
  if (!fileName.endsWith("GetterUtilTest.java")) {
    checkGetterUtilGet(fileName,newContent);
  }
  checkVerifyUpgradeConnection(fileName,className,newContent);
  checkUpgradeClass(fileName,absolutePath,className,newContent);
  newContent=formatAssertEquals(fileName,newContent);
  newContent=formatValidatorEquals(newContent);
  newContent=fixMissingEmptyLineAfterSettingVariable(newContent);
  newContent=getCombinedLinesContent(newContent,_combinedLinesPattern1);
  newContent=getCombinedLinesContent(newContent,_combinedLinesPattern2);
  newContent=formatArray(newContent);
  newContent=formatClassLine(newContent);
  newContent=fixIncorrectEmptyLineBeforeCloseCurlyBrace(newContent,fileName);
  newContent=fixLineStartingWithCloseParenthesis(newContent,fileName);
  matcher=_incorrectSynchronizedPattern.matcher(newContent);
  newContent=matcher.replaceAll("$1$3 $2");
  pos=newContent.indexOf("\npublic ");
  if (pos != -1) {
    String javaClassContent=newContent.substring(pos + 1);
    int javaClassLineCount=getLineCount(newContent,pos + 1);
    newContent=formatJavaTerms(className,packagePath,file,fileName,absolutePath,newContent,javaClassContent,javaClassLineCount,StringPool.BLANK,_checkJavaFieldTypesExcludes,_javaTermAccessLevelModifierExcludes,_javaTermSortExcludes,_testAnnotationsExcludes);
  }
  matcher=_anonymousClassPattern.matcher(newContent);
  while (matcher.find()) {
    if (getLevel(matcher.group()) != 0) {
      continue;
    }
    int x=matcher.start() + 1;
    int y=matcher.end();
    while (true) {
      String javaClassContent=newContent.substring(x,y);
      if (getLevel(javaClassContent,"{","}") != 0) {
        y++;
        continue;
      }
      int javaClassLineCount=getLineCount(newContent,matcher.start() + 1);
      newContent=formatJavaTerms(className,packagePath,file,fileName,absolutePath,newContent,javaClassContent,javaClassLineCount,matcher.group(1),_checkJavaFieldTypesExcludes,_javaTermAccessLevelModifierExcludes,_javaTermSortExcludes,_testAnnotationsExcludes);
      break;
    }
  }
  newContent=formatJava(fileName,absolutePath,newContent);
  if (!isExcludedPath(_checkTabsExcludes,absolutePath)) {
    JavaSourceTabCalculator javaSourceTabCalculator=new JavaSourceTabCalculator();
    javaSourceTabCalculator.calculateTabs(fileName,newContent,(JavaSourceProcessor)this);
  }
  return StringUtil.replace(newContent,"\n\n\n","\n\n");
}
