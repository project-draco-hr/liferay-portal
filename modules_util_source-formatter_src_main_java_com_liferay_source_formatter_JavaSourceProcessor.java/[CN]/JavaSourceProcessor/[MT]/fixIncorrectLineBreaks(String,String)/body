{
  while (true) {
    Matcher matcher=_incorrectLineBreakPattern1.matcher(content);
    if (matcher.find()) {
      content=StringUtil.replaceFirst(content,StringPool.NEW_LINE,StringPool.BLANK,matcher.start());
      continue;
    }
    matcher=_incorrectLineBreakPattern2.matcher(content);
    if (matcher.find()) {
      content=StringUtil.replaceFirst(content,StringPool.NEW_LINE,StringPool.BLANK,matcher.start());
      continue;
    }
    matcher=_incorrectLineBreakPattern4.matcher(content);
    while (matcher.find()) {
      String matchingLine=matcher.group(2);
      if (!matchingLine.startsWith(StringPool.DOUBLE_SLASH) && !matchingLine.startsWith(StringPool.STAR)) {
        content=StringUtil.replaceFirst(content,matcher.group(3),"\n" + matcher.group(1) + "}\n",matcher.start(3) - 1);
        break;
      }
    }
    matcher=_incorrectLineBreakPattern5.matcher(content);
    while (matcher.find()) {
      String tabs=matcher.group(2);
      Pattern pattern=Pattern.compile("\n" + tabs + "([^\t]{2})(?!.*\n"+ tabs+ "[^\t])",Pattern.DOTALL);
      Matcher matcher2=pattern.matcher(content.substring(0,matcher.start(2)));
      if (matcher2.find()) {
        String match=matcher2.group(1);
        if (!match.equals(").")) {
          content=StringUtil.replaceFirst(content,"\n" + matcher.group(2),StringPool.BLANK,matcher.end(1));
          break;
        }
      }
    }
    matcher=_incorrectLineBreakPattern6.matcher(content);
    if (matcher.find()) {
      content=StringUtil.replaceFirst(content,"{","{\n" + matcher.group(1) + "\t",matcher.start());
    }
    matcher=_incorrectLineBreakPattern7.matcher(content);
    while (matcher.find()) {
      if (content.charAt(matcher.end()) != CharPool.NEW_LINE) {
        continue;
      }
      String singleLine=matcher.group(1) + StringUtil.trimLeading(matcher.group(2)) + matcher.group(3);
      if (getLineLength(singleLine) <= _maxLineLength) {
        content=StringUtil.replace(content,matcher.group(),"\n" + singleLine);
        break;
      }
    }
    matcher=_redundantCommaPattern.matcher(content);
    if (matcher.find()) {
      content=StringUtil.replaceFirst(content,StringPool.COMMA,StringPool.BLANK,matcher.start());
      continue;
    }
    break;
  }
  Matcher matcher=_incorrectLineBreakPattern3.matcher(content);
  while (matcher.find()) {
    if (getLevel(matcher.group()) == 0) {
      int lineCount=getLineCount(content,matcher.start());
      processMessage(fileName,"There should be a line break before '" + matcher.group(1) + "'",lineCount);
    }
  }
  return content;
}
