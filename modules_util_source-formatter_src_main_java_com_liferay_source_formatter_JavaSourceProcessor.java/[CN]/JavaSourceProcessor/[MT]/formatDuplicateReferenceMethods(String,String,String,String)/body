{
  String moduleSuperClassContent=getModuleSuperClassContent(content,className,packagePath);
  if (Validator.isNull(moduleSuperClassContent) || !moduleSuperClassContent.contains("@Component") || !moduleSuperClassContent.contains("@Reference")) {
    setBNDInheritRequiredValue(fileName,false);
    return content;
  }
  boolean bndInheritRequired=false;
  Matcher matcher=_referenceMethodPattern.matcher(moduleSuperClassContent);
  while (matcher.find()) {
    String referenceMethod=matcher.group();
    int pos=content.indexOf(referenceMethod);
    if (pos != -1) {
      String referenceMethodContent=matcher.group(6);
      Matcher referenceMethodContentMatcher=_referenceMethodContentPattern.matcher(referenceMethodContent);
      if (referenceMethodContentMatcher.find()) {
        String variableName=referenceMethodContentMatcher.group(1);
        if (StringUtil.count(content,variableName) > 1) {
          continue;
        }
      }
      int x=content.lastIndexOf("\n\n",pos);
      int y=pos + referenceMethod.length();
      String entireMethod=content.substring(x + 1,y);
      content=StringUtil.replace(content,entireMethod,StringPool.BLANK);
      bndInheritRequired=true;
    }
 else {
      String referenceMethodModifierAndName=matcher.group(2);
      Pattern duplicateReferenceMethodPattern=Pattern.compile(referenceMethodModifierAndName + "\\(\\s*([ ,<>\\w]+)\\s+\\w+\\) \\{\\s+([\\s\\S]*?)" + "\\s*?\n\t\\}\n");
      Matcher duplicateReferenceMethodMatcher=duplicateReferenceMethodPattern.matcher(content);
      if (!duplicateReferenceMethodMatcher.find()) {
        bndInheritRequired=true;
        continue;
      }
      String methodContent=duplicateReferenceMethodMatcher.group(2);
      String referenceMethodName=matcher.group(4);
      if (methodContent.startsWith("super." + referenceMethodName)) {
        int x=content.lastIndexOf("\n\n",duplicateReferenceMethodMatcher.start());
        int y=duplicateReferenceMethodMatcher.end();
        String entireMethod=content.substring(x + 1,y);
        content=StringUtil.replace(content,entireMethod,StringPool.BLANK);
        bndInheritRequired=true;
      }
    }
  }
  setBNDInheritRequiredValue(fileName,bndInheritRequired);
  return content;
}
