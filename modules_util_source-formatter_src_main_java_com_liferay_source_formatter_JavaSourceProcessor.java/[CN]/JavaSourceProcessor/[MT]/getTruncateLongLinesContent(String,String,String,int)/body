{
  String indent=StringPool.BLANK;
  for (int i=0; i < getLeadingTabCount(line); i++) {
    indent+=StringPool.TAB;
  }
  if (line.endsWith(StringPool.OPEN_PARENTHESIS) || line.endsWith(StringPool.SEMICOLON)) {
    int x=line.indexOf(" = ");
    if (x != -1) {
      String firstLine=line.substring(0,x + 2);
      if (firstLine.contains(StringPool.QUOTE)) {
        return null;
      }
      String secondLine=indent + StringPool.TAB + line.substring(x + 3);
      if (line.endsWith(StringPool.SEMICOLON)) {
        return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n");
      }
 else       if (Validator.isNotNull(getLine(content,lineCount + 1))) {
        return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n"+ StringPool.TAB);
      }
    }
  }
  if (line.endsWith(StringPool.CLOSE_PARENTHESIS) || line.endsWith(StringPool.COMMA) || line.endsWith(StringPool.OPEN_CURLY_BRACE)|| line.endsWith(StringPool.SEMICOLON)) {
    int x=0;
    while (true) {
      x=line.indexOf(", ",x + 1);
      if (x == -1) {
        break;
      }
      if (!ToolsUtil.isInsideQuotes(line,x) && isValidJavaParameter(line.substring(0,x))) {
        String firstLine=line.substring(0,x + 1);
        String secondLine=indent + line.substring(x + 2);
        return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n");
      }
    }
  }
  if ((line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) {
    int x=line.indexOf(" throws ");
    if (x != -1) {
      String firstLine=line.substring(0,x);
      String secondLine=indent + StringPool.TAB + line.substring(x + 1);
      return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n");
    }
  }
  if ((line.endsWith(StringPool.CLOSE_PARENTHESIS) || line.endsWith(StringPool.OPEN_CURLY_BRACE)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) {
    int x=line.indexOf(CharPool.OPEN_PARENTHESIS);
    if ((x != -1) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) {
      String secondLineIndent=indent + StringPool.TAB;
      if (line.endsWith(StringPool.CLOSE_PARENTHESIS)) {
        secondLineIndent+=StringPool.TAB;
      }
      String firstLine=line.substring(0,x + 1);
      String secondLine=secondLineIndent + line.substring(x + 1);
      return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n");
    }
  }
  if (line.endsWith(StringPool.SEMICOLON)) {
    int x=line.indexOf(CharPool.OPEN_PARENTHESIS);
    if (x != -1) {
      char c=line.charAt(x - 1);
      if ((c != CharPool.SPACE) && (c != CharPool.TAB) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) {
        String firstLine=line.substring(0,x + 1);
        if (firstLine.contains(StringPool.QUOTE)) {
          return null;
        }
        String secondLine=indent + StringPool.TAB + line.substring(x + 1);
        return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n");
      }
    }
 else {
      x=line.lastIndexOf(StringPool.SPACE);
      if ((x != -1) && !ToolsUtil.isInsideQuotes(line,x)) {
        String firstLine=line.substring(0,x);
        String secondLine=indent + StringPool.TAB + line.substring(x + 1);
        if (getLineLength(secondLine) <= _maxLineLength) {
          return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n");
        }
      }
    }
  }
  if (line.contains(StringPool.TAB + "for (") && line.endsWith(" {")) {
    int x=line.indexOf(" : ");
    if (x != -1) {
      String firstLine=line.substring(0,x + 2);
      String secondLine=indent + StringPool.TAB + StringPool.TAB+ line.substring(x + 3);
      return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n\n");
    }
  }
  int i=getIfClauseLineBreakPos(line);
  if (i == -1) {
    return null;
  }
  String firstLine=line.substring(0,i);
  String secondLine=indent + line.substring(i);
  if (secondLine.endsWith(") {")) {
    return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n\n");
  }
  return StringUtil.replace(content,"\n" + line + "\n","\n" + firstLine + "\n"+ secondLine+ "\n");
}
