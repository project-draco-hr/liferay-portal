{
  int previousLineStartPos=getLineStartPos(content,lineCount - 1);
  if (linePart == null) {
    String combinedLine=previousLine;
    if (extraSpace) {
      combinedLine+=StringPool.SPACE;
    }
    combinedLine+=trimmedLine;
    String nextLine=getLine(content,lineCount + 1);
    if (nextLine == null) {
      return null;
    }
    if (line.endsWith(StringPool.OPEN_CURLY_BRACE) && (tabDiff != 0) && !previousLine.contains(" class ")&& Validator.isNull(nextLine)) {
      return StringUtil.replaceFirst(content,previousLine + "\n" + line+ "\n",combinedLine,previousLineStartPos);
    }
    if (numNextLinesRemoveLeadingTab > 0) {
      int nextLineStartPos=getLineStartPos(content,lineCount + 1);
      for (int i=0; i < numNextLinesRemoveLeadingTab; i++) {
        content=StringUtil.replaceFirst(content,StringPool.TAB,StringPool.BLANK,nextLineStartPos);
        nextLineStartPos=content.indexOf(CharPool.NEW_LINE,nextLineStartPos) + 1;
      }
    }
    return StringUtil.replaceFirst(content,previousLine + "\n" + line,combinedLine,previousLineStartPos);
  }
  String firstLine=previousLine;
  String secondLine=line;
  if (addToPreviousLine) {
    if (extraSpace) {
      firstLine+=StringPool.SPACE;
    }
    firstLine+=linePart;
    secondLine=StringUtil.replaceFirst(line,linePart,StringPool.BLANK);
  }
 else {
    if (((linePart.length() + lineLength) <= _MAX_LINE_LENGTH) && (line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON))) {
      firstLine=StringUtil.replaceLast(firstLine,StringUtil.trim(linePart),StringPool.BLANK);
      if (extraSpace) {
        secondLine=StringUtil.replaceLast(line,StringPool.TAB,StringPool.TAB + linePart + StringPool.SPACE);
      }
 else {
        secondLine=StringUtil.replaceLast(line,StringPool.TAB,StringPool.TAB + linePart);
      }
    }
 else {
      processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
      return null;
    }
  }
  firstLine=StringUtil.trimTrailing(firstLine);
  return StringUtil.replaceFirst(content,previousLine + "\n" + line,firstLine + "\n" + secondLine,previousLineStartPos);
}
