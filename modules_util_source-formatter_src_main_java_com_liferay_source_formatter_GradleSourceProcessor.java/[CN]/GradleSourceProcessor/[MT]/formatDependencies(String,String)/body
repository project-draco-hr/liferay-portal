{
  Matcher matcher=_dependenciesPattern.matcher(content);
  if (!matcher.find()) {
    return content;
  }
  String dependencies=matcher.group(1);
  Set<String> uniqueDependencies=new TreeSet<>();
  for (  String dependency : StringUtil.splitLines(dependencies)) {
    dependency=dependency.trim();
    if (Validator.isNull(dependency)) {
      continue;
    }
    uniqueDependencies.add(dependency);
  }
  StringBundler sb=new StringBundler();
  String previousConfiguration=null;
  for (  String dependency : uniqueDependencies) {
    int pos=dependency.indexOf(StringPool.SPACE);
    String configuration=dependency.substring(0,pos);
    if (configuration.equals("compile") && (absolutePath.contains("/modules/apps/") || absolutePath.contains("/modules/private/apps/"))) {
      dependency=StringUtil.replaceFirst(dependency,"compile","provided");
    }
    if ((previousConfiguration == null) || !previousConfiguration.equals(configuration)) {
      previousConfiguration=configuration;
      sb.append("\n");
    }
    sb.append("\t");
    sb.append(dependency);
    sb.append("\n");
  }
  return StringUtil.replace(content,dependencies,sb.toString());
}
