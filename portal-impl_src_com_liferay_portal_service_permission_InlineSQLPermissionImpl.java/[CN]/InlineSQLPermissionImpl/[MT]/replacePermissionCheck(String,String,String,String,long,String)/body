{
  if (Validator.isNull(sql)) {
    return sql;
  }
  String inlineViewCheck=StringPool.BLANK;
  if (Validator.isNull(className)) {
    throw new SystemException(new IllegalArgumentException("className cannot be null"));
  }
  if (Validator.isNull(classPKField)) {
    throw new SystemException(new IllegalArgumentException("classPKField cannot be null"));
  }
  if (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6) {
    PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
    if (permissionChecker.isCommunityOwner(groupId) || permissionChecker.isCommunityAdmin(groupId)) {
      return StringUtil.replace(sql,"[$PERMISSION_JOIN$]",inlineViewCheck);
    }
    long[] roleIds=getRoleIds(groupId);
    long userId=getUserId();
    StringBundler ownershipCheck=new StringBundler(5);
    if (Validator.isNotNull(bridgeJoin)) {
      inlineViewCheck=bridgeJoin;
    }
    if (Validator.isNotNull(classUserIdField)) {
      ownershipCheck.append(" OR (");
      ownershipCheck.append(classUserIdField);
      ownershipCheck.append(" = ");
      ownershipCheck.append(String.valueOf(userId));
      ownershipCheck.append(")");
    }
    inlineViewCheck+=CustomSQLUtil.get(_INLINE_CHECK);
    inlineViewCheck=StringUtil.replace(inlineViewCheck,new String[]{"[$CLASS_NAME$]","[$CLASS_PK_FIELD$]","[$OWNERSHIP_CHECK$]","[$ROLE_IDS$]"},new String[]{className,classPKField,ownershipCheck.toString(),StringUtil.merge(roleIds)});
  }
  return StringUtil.replace(sql,"[$PERMISSION_JOIN$]",inlineViewCheck);
}
