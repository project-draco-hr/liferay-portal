{
  long pk=ServiceTestUtil.nextLong();
  MBDiscussion newMBDiscussion=_persistence.create(pk);
  newMBDiscussion.setUuid(ServiceTestUtil.randomString());
  newMBDiscussion.setGroupId(ServiceTestUtil.nextLong());
  newMBDiscussion.setCompanyId(ServiceTestUtil.nextLong());
  newMBDiscussion.setUserId(ServiceTestUtil.nextLong());
  newMBDiscussion.setUserName(ServiceTestUtil.randomString());
  newMBDiscussion.setCreateDate(ServiceTestUtil.nextDate());
  newMBDiscussion.setModifiedDate(ServiceTestUtil.nextDate());
  newMBDiscussion.setClassNameId(ServiceTestUtil.nextLong());
  newMBDiscussion.setClassPK(ServiceTestUtil.nextLong());
  newMBDiscussion.setThreadId(ServiceTestUtil.nextLong());
  _persistence.update(newMBDiscussion);
  MBDiscussion existingMBDiscussion=_persistence.findByPrimaryKey(newMBDiscussion.getPrimaryKey());
  Assert.assertEquals(existingMBDiscussion.getUuid(),newMBDiscussion.getUuid());
  Assert.assertEquals(existingMBDiscussion.getDiscussionId(),newMBDiscussion.getDiscussionId());
  Assert.assertEquals(existingMBDiscussion.getGroupId(),newMBDiscussion.getGroupId());
  Assert.assertEquals(existingMBDiscussion.getCompanyId(),newMBDiscussion.getCompanyId());
  Assert.assertEquals(existingMBDiscussion.getUserId(),newMBDiscussion.getUserId());
  Assert.assertEquals(existingMBDiscussion.getUserName(),newMBDiscussion.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMBDiscussion.getCreateDate()),Time.getShortTimestamp(newMBDiscussion.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingMBDiscussion.getModifiedDate()),Time.getShortTimestamp(newMBDiscussion.getModifiedDate()));
  Assert.assertEquals(existingMBDiscussion.getClassNameId(),newMBDiscussion.getClassNameId());
  Assert.assertEquals(existingMBDiscussion.getClassPK(),newMBDiscussion.getClassPK());
  Assert.assertEquals(existingMBDiscussion.getThreadId(),newMBDiscussion.getThreadId());
}
