{
  _testClass=_loadTestClass(description.getTestClass());
  _instance=_testClass.newInstance();
  ServletContext servletContext=ServletContextPool.get(PortalUtil.getServletContextName());
  if (servletContext == null) {
    servletContext=new AutoDeployMockServletContext(new FileSystemResourceLoader());
    servletContext.setAttribute(InvokerFilterHelper.class.getName(),new InvokerFilterHelper());
    ServletContextPool.put(PortalUtil.getPathContext(),servletContext);
  }
  HotDeployUtil.reset();
  HotDeployUtil.registerListener(new HookHotDeployListener());
  HotDeployUtil.setCapturePrematureEvents(false);
  PortalLifecycleUtil.flushInits();
  final ClassLoader classLoader=_testClass.getClassLoader();
  MockServletContext mockServletContext=new MockServletContext(new PACLResourceLoader(classLoader)){
    @Override public ClassLoader getClassLoader(){
      return classLoader;
    }
  }
;
  mockServletContext.setServletContextName("a-test-hook");
  HotDeployEvent hotDeployEvent=getHotDeployEvent(mockServletContext);
  HotDeployUtil.fireDeployEvent(hotDeployEvent);
  ClassLoaderPool.register(hotDeployEvent.getServletContextName(),classLoader);
  PortletClassLoaderUtil.setServletContextName(hotDeployEvent.getServletContextName());
  try {
    portletContextLoaderListener.contextInitialized(new ServletContextEvent(mockServletContext));
  }
  finally {
    ClassLoaderPool.unregister(hotDeployEvent.getServletContextName());
    PortletClassLoaderUtil.setServletContextName(null);
  }
  return hotDeployEvent;
}
