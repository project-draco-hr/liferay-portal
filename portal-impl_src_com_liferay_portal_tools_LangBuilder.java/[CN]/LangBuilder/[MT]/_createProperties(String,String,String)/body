{
  File propertiesFile=new File(_langDir + "/" + _langFile+ "_"+ languageId+ ".properties");
  Properties properties=new Properties();
  if (propertiesFile.exists()) {
    properties=PropertiesUtil.load(new FileInputStream(propertiesFile),StringPool.UTF8);
  }
  Properties parentProperties=null;
  if (parentLanguageId != null) {
    File parentPropertiesFile=new File(_langDir + "/" + _langFile+ "_"+ parentLanguageId+ ".properties");
    if (parentPropertiesFile.exists()) {
      parentProperties=new Properties();
      parentProperties=PropertiesUtil.load(new FileInputStream(parentPropertiesFile),StringPool.UTF8);
    }
  }
  try (UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content));UnsyncBufferedWriter unsyncBufferedWriter=new UnsyncBufferedWriter(new OutputStreamWriter(new FileOutputStream(propertiesFile),StringPool.UTF8))){
    boolean firstLine=true;
    int state=0;
    String line=null;
    Boolean hasPrefix=true;
    Boolean hasSuffix=true;
    while ((line=unsyncBufferedReader.readLine()) != null) {
      line=line.trim();
      int pos=line.indexOf("=");
      if (pos != -1) {
        String key=line.substring(0,pos);
        String value=line.substring(pos + 1);
        if (((state == 1) && !key.startsWith("lang.")) || ((state == 2) && !key.startsWith("javax.portlet.")) || ((state == 3) && !key.startsWith("category."))|| ((state == 4) && !key.startsWith("model.resource."))|| ((state == 5) && !key.startsWith("action."))|| ((state == 7) && !key.startsWith("country."))|| ((state == 8) && !key.startsWith("currency."))|| ((state == 9) && !key.startsWith("language."))|| ((state != 9) && key.startsWith("language."))) {
          throw new RuntimeException("File " + languageId + " with state "+ state+ " has key "+ key);
        }
        String translatedText=properties.getProperty(key);
        if ((translatedText == null) && (parentProperties != null)) {
          translatedText=parentProperties.getProperty(key);
        }
        if ((translatedText == null) && (_renameKeys != null)) {
          String renameKey=_renameKeys.getProperty(key);
          if (renameKey != null) {
            translatedText=properties.getProperty(key);
            if ((translatedText == null) && (parentProperties != null)) {
              translatedText=parentProperties.getProperty(key);
            }
          }
        }
        if (translatedText != null) {
          if (translatedText.contains("Babel Fish") || translatedText.contains("Yahoo! - 999")) {
            translatedText="";
          }
 else           if (translatedText.endsWith(AUTOMATIC_COPY)) {
            translatedText=value + AUTOMATIC_COPY;
          }
 else           if (key.equals("lang.user.name.fields")) {
            if (!translatedText.contains("prefix")) {
              hasPrefix=false;
            }
            if (!translatedText.contains("suffix")) {
              hasSuffix=false;
            }
          }
        }
        if ((translatedText == null) || translatedText.equals("")) {
          if (line.contains("{") || line.contains("<")) {
            translatedText=value + AUTOMATIC_COPY;
          }
 else           if (line.contains("[")) {
            pos=line.indexOf("[");
            String baseKey=line.substring(0,pos);
            String translatedBaseKey=properties.getProperty(baseKey);
            if (Validator.isNotNull(translatedBaseKey)) {
              translatedText=translatedBaseKey;
            }
 else {
              translatedText=value + AUTOMATIC_COPY;
            }
          }
 else           if (key.equals("lang.dir")) {
            translatedText="ltr";
          }
 else           if (key.equals("lang.line.begin")) {
            translatedText="left";
          }
 else           if (key.equals("lang.line.end")) {
            translatedText="right";
          }
 else           if (key.equals("lang.user.name.fields")) {
            translatedText="prefix,first-name,middle-name,last-name,suffix";
          }
 else           if (key.equals("lang.user.name.prefix.options")) {
            translatedText="dr,mr,ms,mrs";
          }
 else           if (key.equals("lang.user.name.required.fields")) {
            translatedText="last-name";
          }
 else           if (key.equals("lang.user.name.suffix.options")) {
            translatedText="ii,iii,iv,jr,phd,sr";
          }
 else           if (languageId.equals("el") && (key.equals("enabled") || key.equals("on") || key.equals("on-date"))) {
            translatedText="";
          }
 else           if (languageId.equals("es") && key.equals("am")) {
            translatedText="";
          }
 else           if (languageId.equals("fi") && (key.equals("on") || key.equals("the"))) {
            translatedText="";
          }
 else           if (languageId.equals("it") && key.equals("am")) {
            translatedText="";
          }
 else           if (languageId.equals("ja") && (key.equals("any") || key.equals("anytime") || key.equals("down")|| key.equals("on")|| key.equals("on-date")|| key.equals("the"))) {
            translatedText="";
          }
 else           if (languageId.equals("ko") && key.equals("the")) {
            translatedText="";
          }
 else {
            translatedText=_translate("en",languageId,key,value,0);
            if (Validator.isNull(translatedText)) {
              translatedText=value + AUTOMATIC_COPY;
            }
 else             if (!key.startsWith("country.") && !key.startsWith("language.")) {
              translatedText=translatedText + AUTOMATIC_TRANSLATION;
            }
          }
        }
        if (Validator.isNotNull(translatedText)) {
          if (translatedText.contains("Babel Fish") || translatedText.contains("Yahoo! - 999")) {
            throw new IOException("IP was blocked because of over usage. " + "Please use another IP.");
          }
          if (key.equals("lang.user.name.prefix.options") && !hasPrefix) {
            translatedText="";
          }
 else           if (key.equals("lang.user.name.suffix.options") && !hasSuffix) {
            translatedText="";
          }
          translatedText=_fixTranslation(translatedText);
          if (firstLine) {
            firstLine=false;
          }
 else {
            unsyncBufferedWriter.newLine();
          }
          unsyncBufferedWriter.write(key + "=" + translatedText);
          unsyncBufferedWriter.flush();
        }
      }
 else {
        if (line.startsWith("## Language settings")) {
          if (state == 1) {
            throw new RuntimeException(languageId);
          }
          state=1;
        }
 else         if (line.startsWith("## Portlet descriptions and titles")) {
          if (state == 2) {
            throw new RuntimeException(languageId);
          }
          state=2;
        }
 else         if (line.startsWith("## Category titles")) {
          if (state == 3) {
            throw new RuntimeException(languageId);
          }
          state=3;
        }
 else         if (line.startsWith("## Model resources")) {
          if (state == 4) {
            throw new RuntimeException(languageId);
          }
          state=4;
        }
 else         if (line.startsWith("## Action names")) {
          if (state == 5) {
            throw new RuntimeException(languageId);
          }
          state=5;
        }
 else         if (line.startsWith("## Messages")) {
          if (state == 6) {
            throw new RuntimeException(languageId);
          }
          state=6;
        }
 else         if (line.startsWith("## Country")) {
          if (state == 7) {
            throw new RuntimeException(languageId);
          }
          state=7;
        }
 else         if (line.startsWith("## Currency")) {
          if (state == 8) {
            throw new RuntimeException(languageId);
          }
          state=8;
        }
 else         if (line.startsWith("## Language")) {
          if (state == 9) {
            throw new RuntimeException(languageId);
          }
          state=9;
        }
        if (firstLine) {
          firstLine=false;
        }
 else {
          unsyncBufferedWriter.newLine();
        }
        unsyncBufferedWriter.write(line);
        unsyncBufferedWriter.flush();
      }
    }
  }
 }
