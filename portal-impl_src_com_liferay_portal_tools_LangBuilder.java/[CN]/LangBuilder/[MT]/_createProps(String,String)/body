{
  File propsFile=new File(_langDir + "/" + _langFile+ "_"+ languageId+ ".properties");
  Properties props=new Properties();
  if (propsFile.exists()) {
    props.load(new FileInputStream(propsFile));
  }
  File nativePropsFile=new File(_langDir + "/" + _langFile+ "_"+ languageId+ ".properties.native");
  Properties nativeProps=new Properties();
  if (nativePropsFile.exists()) {
    nativeProps.load(new FileInputStream(nativePropsFile));
  }
  String translationId="en_" + languageId;
  if (translationId.equals("en_pt_BR")) {
    translationId="en_pt";
  }
 else   if (translationId.equals("en_pt_PT")) {
    translationId="en_pt";
  }
 else   if (translationId.equals("en_zh_CN")) {
    translationId="en_zh";
  }
 else   if (translationId.equals("en_zh_TW")) {
    translationId="en_zt";
  }
  BufferedReader br=new BufferedReader(new StringReader(content));
  BufferedWriter bw=new BufferedWriter(new FileWriter(nativePropsFile));
  String line=null;
  while ((line=br.readLine()) != null) {
    line=line.trim();
    int pos=line.indexOf("=");
    if (pos != -1) {
      String key=line.substring(0,pos);
      String value=line.substring(pos + 1,line.length());
      String nativeValue=nativeProps.getProperty(key);
      String translatedText=props.getProperty(key);
      if ((nativeValue == null) && (translatedText == null) && (_renameKeys != null)) {
        String renameKey=_renameKeys.getProperty(key);
        if (renameKey != null) {
          nativeValue=nativeProps.getProperty(renameKey);
          translatedText=props.getProperty(renameKey);
        }
      }
      if ((translatedText != null) && ((translatedText.indexOf("Babel Fish") != -1) || (translatedText.indexOf("Yahoo! - 999") != -1))) {
        translatedText="";
      }
 else       if (nativeValue != null) {
        if (nativeValue.endsWith(_AUTOMATIC_COPY)) {
          translatedText+=_AUTOMATIC_COPY;
        }
 else         if (nativeValue.endsWith(_AUTOMATIC_TRANSLATION)) {
          translatedText+=_AUTOMATIC_TRANSLATION;
        }
      }
      if ((translatedText == null) || translatedText.equals("")) {
        if (line.indexOf("{") != -1 || line.indexOf("<") != -1) {
          translatedText=value + _AUTOMATIC_COPY;
        }
 else         if (key.equals("lang.dir")) {
          translatedText="ltr";
        }
 else         if (key.equals("lang.line.begin")) {
          translatedText="left";
        }
 else         if (key.equals("lang.line.end")) {
          translatedText="right";
        }
 else         if (translationId.equals("en_el") && (key.equals("enabled") || key.equals("on") || key.equals("on-date"))) {
          translatedText="";
        }
 else         if (translationId.equals("en_es") && key.equals("am")) {
          translatedText="";
        }
 else         if (translationId.equals("en_it") && key.equals("am")) {
          translatedText="";
        }
 else         if (translationId.equals("en_ja") && (key.equals("any") || key.equals("anytime") || key.equals("down")|| key.equals("on")|| key.equals("the"))) {
          translatedText="";
        }
 else         if (translationId.equals("en_ko") && key.equals("the")) {
          translatedText="";
        }
 else {
          translatedText=_translate(translationId,value,0);
        }
      }
      if (Validator.isNotNull(translatedText)) {
        if ((translatedText.indexOf("Babel Fish") != -1) || (translatedText.indexOf("Yahoo! - 999") != -1)) {
          throw new IOException("IP was blocked because of over usage. Please " + "use another IP.");
        }
        if (translatedText.indexOf("&#39;") != -1) {
          translatedText=StringUtil.replace(translatedText,"&#39;","\'");
        }
        bw.write(key + "=" + translatedText);
        bw.newLine();
        bw.flush();
      }
 else       if (nativeProps.containsKey(key)) {
        bw.write(key + "=");
        bw.newLine();
        bw.flush();
      }
    }
 else {
      bw.write(line);
      bw.newLine();
      bw.flush();
    }
  }
  br.close();
  bw.close();
}
