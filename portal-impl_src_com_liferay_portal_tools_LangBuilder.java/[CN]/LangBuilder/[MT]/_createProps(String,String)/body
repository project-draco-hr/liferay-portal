{
  File propsFile=new File(_langDir + "/" + _langFile+ "_"+ languageId+ ".properties");
  Properties props=new Properties();
  if (propsFile.exists()) {
    props.load(new FileInputStream(propsFile));
  }
  File nativePropsFile=new File(_langDir + "/" + _langFile+ "_"+ languageId+ ".properties.native");
  Properties nativeProps=new Properties();
  if (nativePropsFile.exists()) {
    nativeProps.load(new FileInputStream(nativePropsFile));
  }
  String translationId="en_" + languageId;
  if (translationId.equals("en_pt_BR")) {
    translationId="en_pt";
  }
 else   if (translationId.equals("en_pt_PT")) {
    translationId="en_pt";
  }
 else   if (translationId.equals("en_zh_CN")) {
    translationId="en_zh";
  }
 else   if (translationId.equals("en_zh_TW")) {
    translationId="en_zt";
  }
 else   if (translationId.equals("en_hi_IN")) {
    translationId="en_hi";
  }
  UnsyncBufferedWriter nativePropsUnsyncBufferedWriter=new UnsyncBufferedWriter(new FileWriter(nativePropsFile));
  UnsyncBufferedWriter propsUnsyncBufferedWriter=new UnsyncBufferedWriter(new FileWriter(propsFile));
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content));
  String line=null;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    line=line.trim();
    int pos=line.indexOf("=");
    if (pos != -1) {
      String key=line.substring(0,pos);
      String value=line.substring(pos + 1,line.length());
      String nativeValue=_getProperty(nativeProps,key);
      String translatedText=_getProperty(props,key);
      if ((nativeValue == null) && (translatedText == null) && (_renameKeys != null)) {
        String renameKey=_renameKeys.getProperty(key);
        if (renameKey != null) {
          nativeValue=_getProperty(nativeProps,key);
          translatedText=_getProperty(props,key);
        }
      }
      if ((translatedText != null) && ((translatedText.indexOf("Babel Fish") != -1) || (translatedText.indexOf("Yahoo! - 999") != -1))) {
        translatedText="";
      }
 else       if ((nativeValue != null) && (nativeValue.endsWith(_AUTOMATIC_TRANSLATION))) {
        translatedText+=_AUTOMATIC_TRANSLATION;
      }
      if ((translatedText == null) || translatedText.equals("")) {
        if (line.indexOf("{") != -1 || line.indexOf("<") != -1) {
          translatedText=value + _AUTOMATIC_COPY;
        }
 else         if (line.indexOf("[") != -1) {
          pos=line.indexOf("[");
          String baseKey=line.substring(0,pos);
          translatedText=_getProperty(props,baseKey) + _AUTOMATIC_COPY;
        }
 else         if (key.equals("lang.dir")) {
          translatedText="ltr";
        }
 else         if (key.equals("lang.line.begin")) {
          translatedText="left";
        }
 else         if (key.equals("lang.line.end")) {
          translatedText="right";
        }
 else         if (translationId.equals("en_el") && (key.equals("enabled") || key.equals("on") || key.equals("on-date"))) {
          translatedText="";
        }
 else         if (translationId.equals("en_es") && key.equals("am")) {
          translatedText="";
        }
 else         if (translationId.equals("en_it") && key.equals("am")) {
          translatedText="";
        }
 else         if (translationId.equals("en_ja") && (key.equals("any") || key.equals("anytime") || key.equals("down")|| key.equals("on")|| key.equals("on-date")|| key.equals("the"))) {
          translatedText="";
        }
 else         if (translationId.equals("en_ko") && key.equals("the")) {
          translatedText="";
        }
 else {
          translatedText=_translate(translationId,key,value,0);
          if (Validator.isNull(translatedText)) {
            translatedText=value + _AUTOMATIC_COPY;
          }
        }
      }
      if (Validator.isNotNull(translatedText)) {
        if ((translatedText.indexOf("Babel Fish") != -1) || (translatedText.indexOf("Yahoo! - 999") != -1)) {
          throw new IOException("IP was blocked because of over usage. Please " + "use another IP.");
        }
        if (translatedText.indexOf("&#39;") != -1) {
          translatedText=StringUtil.replace(translatedText,"&#39;","\'");
        }
        translatedText=StringUtil.replace(translatedText.trim(),"  "," ");
        _writeLine(nativePropsUnsyncBufferedWriter,propsUnsyncBufferedWriter,key + "=" + translatedText);
      }
 else       if (nativeProps.containsKey(key)) {
        _writeLine(nativePropsUnsyncBufferedWriter,propsUnsyncBufferedWriter,key + "=");
      }
    }
 else {
      _writeLine(nativePropsUnsyncBufferedWriter,propsUnsyncBufferedWriter,line);
    }
  }
  nativePropsUnsyncBufferedWriter.close();
  propsUnsyncBufferedWriter.close();
  unsyncBufferedReader.close();
}
