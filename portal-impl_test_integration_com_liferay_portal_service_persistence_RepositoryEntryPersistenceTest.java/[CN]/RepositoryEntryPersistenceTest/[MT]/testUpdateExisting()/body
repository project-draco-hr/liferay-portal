{
  long pk=ServiceTestUtil.nextLong();
  RepositoryEntry newRepositoryEntry=_persistence.create(pk);
  newRepositoryEntry.setUuid(ServiceTestUtil.randomString());
  newRepositoryEntry.setGroupId(ServiceTestUtil.nextLong());
  newRepositoryEntry.setRepositoryId(ServiceTestUtil.nextLong());
  newRepositoryEntry.setMappedId(ServiceTestUtil.randomString());
  newRepositoryEntry.setManualCheckInRequired(ServiceTestUtil.randomBoolean());
  _persistence.update(newRepositoryEntry);
  RepositoryEntry existingRepositoryEntry=_persistence.findByPrimaryKey(newRepositoryEntry.getPrimaryKey());
  Assert.assertEquals(existingRepositoryEntry.getUuid(),newRepositoryEntry.getUuid());
  Assert.assertEquals(existingRepositoryEntry.getRepositoryEntryId(),newRepositoryEntry.getRepositoryEntryId());
  Assert.assertEquals(existingRepositoryEntry.getGroupId(),newRepositoryEntry.getGroupId());
  Assert.assertEquals(existingRepositoryEntry.getRepositoryId(),newRepositoryEntry.getRepositoryId());
  Assert.assertEquals(existingRepositoryEntry.getMappedId(),newRepositoryEntry.getMappedId());
  Assert.assertEquals(existingRepositoryEntry.getManualCheckInRequired(),newRepositoryEntry.getManualCheckInRequired());
}
