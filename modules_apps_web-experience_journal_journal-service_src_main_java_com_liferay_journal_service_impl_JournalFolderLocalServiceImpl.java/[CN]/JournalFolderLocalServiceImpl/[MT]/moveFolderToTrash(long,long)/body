{
  JournalFolder folder=journalFolderPersistence.findByPrimaryKey(folderId);
  if (folder.isInTrash()) {
    throw new TrashEntryException();
  }
  String title=folder.getName();
  folder=updateStatus(userId,folder,WorkflowConstants.STATUS_IN_TRASH);
  UnicodeProperties typeSettingsProperties=new UnicodeProperties();
  typeSettingsProperties.put("title",folder.getName());
  TrashEntry trashEntry=trashEntryLocalService.addTrashEntry(userId,folder.getGroupId(),JournalFolder.class.getName(),folder.getFolderId(),folder.getUuid(),null,WorkflowConstants.STATUS_APPROVED,null,typeSettingsProperties);
  folder.setName(TrashUtil.getTrashTitle(trashEntry.getEntryId()));
  journalFolderPersistence.update(folder);
  List<Object> foldersAndArticles=journalFolderLocalService.getFoldersAndArticles(folder.getGroupId(),folder.getFolderId());
  moveDependentsToTrash(foldersAndArticles,trashEntry.getEntryId());
  JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
  extraDataJSONObject.put("title",title);
  SocialActivityManagerUtil.addActivity(userId,folder,SocialActivityConstants.TYPE_MOVE_TO_TRASH,extraDataJSONObject.toString(),0);
  Indexer<JournalFolder> indexer=IndexerRegistryUtil.nullSafeGetIndexer(JournalFolder.class);
  indexer.reindex(folder);
  return folder;
}
