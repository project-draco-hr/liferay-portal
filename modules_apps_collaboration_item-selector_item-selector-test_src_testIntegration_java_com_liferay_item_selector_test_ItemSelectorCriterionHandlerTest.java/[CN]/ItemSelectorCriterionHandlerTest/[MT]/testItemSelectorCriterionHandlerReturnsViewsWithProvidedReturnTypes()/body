{
  TestItemSelectorView testItemSelectorView=new TestItemSelectorView();
  ServiceRegistration<ItemSelectorView> itemSelectorViewServiceRegistration=registerItemSelectorView(testItemSelectorView,"test-view");
  ServiceRegistration<ItemSelectorViewReturnTypeProvider> itemSelectorViewReturnTypeProviderServiceRegistration=registerItemSelectorViewProvider(new TestItemSelectorViewReturnTypeProvider(),"test-view");
  List serviceRegistrations=new ArrayList<>();
  serviceRegistrations.add(itemSelectorViewServiceRegistration);
  serviceRegistrations.add(itemSelectorViewReturnTypeProviderServiceRegistration);
  try {
    ItemSelectorCriterion itemSelectorCriterion=new TestItemSelectorCriterion();
    itemSelectorCriterion.setDesiredItemSelectorReturnTypes(Arrays.asList(new TestItemSelectorReturnType()));
    List<ItemSelectorView<TestItemSelectorCriterion>> itemSelectorViews=_itemSelectorCriterionHandler.getItemSelectorViews(itemSelectorCriterion);
    Assert.assertEquals(1,itemSelectorViews.size());
    ItemSelectorView<TestItemSelectorCriterion> itemSelectorView=itemSelectorViews.get(0);
    List<ItemSelectorReturnType> supportedItemSelectorReturnTypes=itemSelectorView.getSupportedItemSelectorReturnTypes();
    Assert.assertEquals(1,supportedItemSelectorReturnTypes.size());
    ItemSelectorReturnType itemSelectorReturnType=supportedItemSelectorReturnTypes.get(0);
    Assert.assertFalse(itemSelectorReturnType instanceof TestItemSelectorReturnType);
  }
  finally {
    _unregister(serviceRegistrations);
  }
}
