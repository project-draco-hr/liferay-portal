{
  Bundle bundle=serviceReference.getBundle();
  String serviceType=(String)serviceReference.getProperty(OSGiConstants.PORTAL_SERVICE_TYPE);
  Class<?> serviceTypeClass=bundle.loadClass(serviceType);
  Object nextService=_bundleContext.getService(serviceReference);
  Class<?> serviceImplClass=nextService.getClass();
  Method serviceImplWrapperMethod=null;
  try {
    serviceImplWrapperMethod=serviceImplClass.getMethod("setWrapped".concat(serviceTypeClass.getSimpleName()),serviceTypeClass);
  }
 catch (  NoSuchMethodException nsme) {
    throw new IllegalArgumentException("Implementation must extend " + serviceTypeClass.getName() + "Wrapper",nsme);
  }
  Object serviceProxy=PortalBeanLocatorUtil.locate(serviceType);
  if (!(serviceProxy instanceof Advised)) {
    throw new IllegalArgumentException("Service must be an instance of Advised");
  }
  if (!ProxyUtil.isProxyClass(serviceProxy.getClass())) {
    return;
  }
  AdvisedSupport advisedSupport=ServiceWrapperUtil.getAdvisedSupport(serviceProxy);
  Object previousService=ServiceWrapperUtil.getTarget(advisedSupport);
  serviceImplWrapperMethod.invoke(nextService,previousService);
  ClassLoader classLoader=serviceTypeClass.getClassLoader();
  Object nextTarget=ProxyUtil.newProxyInstance(classLoader,new Class<?>[]{serviceTypeClass},new ClassLoaderBeanHandler(nextService,classLoader));
  TargetSource nextTargetSource=new SingletonTargetSource(nextTarget);
  advisedSupport.setTargetSource(nextTargetSource);
  Hashtable<String,Object> properties=new Hashtable<String,Object>();
  properties.put(Constants.SERVICE_RANKING,-1);
  properties.put(OSGiConstants.PORTAL_SERVICE,Boolean.TRUE);
  properties.put(OSGiConstants.PORTAL_SERVICE_PREVIOUS,Boolean.TRUE);
  ServiceRegistration<?> serviceRegistration=_bundleContext.registerService(serviceType,previousService,properties);
  _serviceRegistrations.put(serviceRegistration.getReference(),serviceRegistration);
}
