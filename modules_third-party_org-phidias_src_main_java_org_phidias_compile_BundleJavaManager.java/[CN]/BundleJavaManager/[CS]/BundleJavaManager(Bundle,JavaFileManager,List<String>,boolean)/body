{
  super(javaFileManager);
  _bundle=bundle;
  _javaFileManager=javaFileManager;
  _log=new TPhLog();
  setOptions(options);
  _strict=strict;
  if (_log.isEnabled()) {
    _log.log("Initializing compilation in OSGi for bundle " + _bundle.getSymbolicName() + "-"+ _bundle.getVersion());
  }
  _bundleWiring=_bundle.adapt(BundleWiring.class);
  _classLoader=_bundleWiring.getClassLoader();
  _packageRequirements=_bundleWiring.getRequirements(BundleRevision.PACKAGE_NAMESPACE);
  List<BundleWire> providedWires=_bundleWiring.getRequiredWires(null);
  if (_log.isEnabled()) {
    _log.log("Dependent BundleWirings included in this BundleJavaManager " + "context: ");
  }
  _bundleWirings=new ArrayList<BundleWiring>();
  for (  BundleWire bundleWire : providedWires) {
    BundleWiring providerWiring=bundleWire.getProviderWiring();
    if (_bundleWirings.contains(providerWiring)) {
      continue;
    }
    Bundle curBundle=providerWiring.getBundle();
    if (_strict && (curBundle.getBundleId() == 0)) {
      List<BundleCapability> bundleCapabilities=providerWiring.getCapabilities(BundleRevision.PACKAGE_NAMESPACE);
      for (      BundleCapability bundleCapability : bundleCapabilities) {
        Map<String,Object> attributes=bundleCapability.getAttributes();
        Object packageNamespace=attributes.get(BundleRevision.PACKAGE_NAMESPACE);
        if (packageNamespace != null) {
          _systemCapabilities.add(packageNamespace);
        }
      }
    }
    if (_log.isEnabled()) {
      _log.log("\t" + curBundle.getSymbolicName() + "-"+ curBundle.getVersion());
    }
    _bundleWirings.add(providerWiring);
  }
}
