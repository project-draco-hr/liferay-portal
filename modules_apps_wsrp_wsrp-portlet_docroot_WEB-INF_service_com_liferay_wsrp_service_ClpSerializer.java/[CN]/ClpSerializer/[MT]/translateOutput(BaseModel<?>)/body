{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals("com.liferay.wsrp.model.impl.WSRPConsumerImpl")) {
    return translateOutputWSRPConsumer(oldModel);
  }
 else   if (oldModelClassName.endsWith("Clp")) {
    try {
      ClassLoader classLoader=ClpSerializer.class.getClassLoader();
      Method getClpSerializerClassMethod=oldModelClass.getMethod("getClpSerializerClass");
      Class<?> oldClpSerializerClass=(Class<?>)getClpSerializerClassMethod.invoke(oldModel);
      Class<?> newClpSerializerClass=classLoader.loadClass(oldClpSerializerClass.getName());
      Method translateOutputMethod=newClpSerializerClass.getMethod("translateOutput",BaseModel.class);
      Class<?> oldModelModelClass=oldModel.getModelClass();
      Method getRemoteModelMethod=oldModelClass.getMethod("get" + oldModelModelClass.getSimpleName() + "RemoteModel");
      Object oldRemoteModel=getRemoteModelMethod.invoke(oldModel);
      BaseModel<?> newModel=(BaseModel<?>)translateOutputMethod.invoke(null,oldRemoteModel);
      return newModel;
    }
 catch (    Throwable t) {
      if (_log.isInfoEnabled()) {
        _log.info("Unable to translate " + oldModelClassName,t);
      }
    }
  }
  if (oldModelClassName.equals("com.liferay.wsrp.model.impl.WSRPConsumerPortletImpl")) {
    return translateOutputWSRPConsumerPortlet(oldModel);
  }
 else   if (oldModelClassName.endsWith("Clp")) {
    try {
      ClassLoader classLoader=ClpSerializer.class.getClassLoader();
      Method getClpSerializerClassMethod=oldModelClass.getMethod("getClpSerializerClass");
      Class<?> oldClpSerializerClass=(Class<?>)getClpSerializerClassMethod.invoke(oldModel);
      Class<?> newClpSerializerClass=classLoader.loadClass(oldClpSerializerClass.getName());
      Method translateOutputMethod=newClpSerializerClass.getMethod("translateOutput",BaseModel.class);
      Class<?> oldModelModelClass=oldModel.getModelClass();
      Method getRemoteModelMethod=oldModelClass.getMethod("get" + oldModelModelClass.getSimpleName() + "RemoteModel");
      Object oldRemoteModel=getRemoteModelMethod.invoke(oldModel);
      BaseModel<?> newModel=(BaseModel<?>)translateOutputMethod.invoke(null,oldRemoteModel);
      return newModel;
    }
 catch (    Throwable t) {
      if (_log.isInfoEnabled()) {
        _log.info("Unable to translate " + oldModelClassName,t);
      }
    }
  }
  if (oldModelClassName.equals("com.liferay.wsrp.model.impl.WSRPProducerImpl")) {
    return translateOutputWSRPProducer(oldModel);
  }
 else   if (oldModelClassName.endsWith("Clp")) {
    try {
      ClassLoader classLoader=ClpSerializer.class.getClassLoader();
      Method getClpSerializerClassMethod=oldModelClass.getMethod("getClpSerializerClass");
      Class<?> oldClpSerializerClass=(Class<?>)getClpSerializerClassMethod.invoke(oldModel);
      Class<?> newClpSerializerClass=classLoader.loadClass(oldClpSerializerClass.getName());
      Method translateOutputMethod=newClpSerializerClass.getMethod("translateOutput",BaseModel.class);
      Class<?> oldModelModelClass=oldModel.getModelClass();
      Method getRemoteModelMethod=oldModelClass.getMethod("get" + oldModelModelClass.getSimpleName() + "RemoteModel");
      Object oldRemoteModel=getRemoteModelMethod.invoke(oldModel);
      BaseModel<?> newModel=(BaseModel<?>)translateOutputMethod.invoke(null,oldRemoteModel);
      return newModel;
    }
 catch (    Throwable t) {
      if (_log.isInfoEnabled()) {
        _log.info("Unable to translate " + oldModelClassName,t);
      }
    }
  }
  return oldModel;
}
