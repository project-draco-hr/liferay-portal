{
  el.addElement("name").addText(productEntry.getName());
  String moduleId=ModuleId.toString(productEntry.getRepoGroupId(),productEntry.getRepoArtifactId(),productVersion.getVersion(),"war");
  el.addElement("module-id").addText(moduleId);
  el.addElement("types").addElement("type").addText(productEntry.getType());
  el.addElement("short-description").addText(productEntry.getShortDescription());
  if (Validator.isNotNull(productEntry.getLongDescription())) {
    el.addElement("long-description").addText(productEntry.getLongDescription());
  }
  if (Validator.isNotNull(productVersion.getChangeLog())) {
    el.addElement("change-log").addText(productVersion.getChangeLog());
  }
  if (Validator.isNotNull(productVersion.getDirectDownloadURL())) {
    el.addElement("download-url").addText(productVersion.getDirectDownloadURL());
  }
  String imageId=productEntry.getImageId(SCProductEntryImpl.MAIN_IMAGE_NAME);
  Element screenshotsEl=el.addElement("screenshots");
  Element screenshotEl=screenshotsEl.addElement("screenshot");
  screenshotEl.addElement("thumbnail-url").addText(baseImageURL + "?img_id=" + imageId+ "&small=1");
  screenshotEl.addElement("large-image-url").addText(baseImageURL + "?img_id=" + imageId+ "&large=1");
  el.addElement("author").addText(productEntry.getUserName());
  Element licensesEl=el.addElement("licenses");
  Iterator itr=productEntry.getLicenses().iterator();
  while (itr.hasNext()) {
    SCLicense license=(SCLicense)itr.next();
    Element licenseEl=licensesEl.addElement("license");
    licenseEl.addText(license.getName());
    licenseEl.addAttribute("osi-approved",Boolean.toString(license.isOpenSource()));
  }
  Element liferayVersionsEl=el.addElement("liferay-versions");
  itr=productVersion.getFrameworkVersions().iterator();
  while (itr.hasNext()) {
    SCFrameworkVersion frameworkVersion=(SCFrameworkVersion)itr.next();
    Element frameworkVersionEl=liferayVersionsEl.addElement("liferay-version");
    frameworkVersionEl.addText(frameworkVersion.getName());
  }
}
