{
  long repositoryId=increment();
  long folderId=addDLFolder(increment(),groupId,companyId,userId,userName,createDate,repositoryId,true,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,portletId,true);
  if (folderId < 0) {
    return -1;
  }
  PreparedStatement ps=null;
  try {
    StringBundler sb=new StringBundler(5);
    sb.append("insert into Repository (uuid_, repositoryId, groupId, ");
    sb.append("companyId, userId, userName, createDate, ");
    sb.append("modifiedDate, classNameId, name, description, ");
    sb.append("portletId, typeSettings, dlFolderId) values (?, ?, ?, ");
    sb.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    ps=connection.prepareStatement(sb.toString());
    ps.setString(1,PortalUUIDUtil.generate());
    ps.setLong(2,repositoryId);
    ps.setLong(3,groupId);
    ps.setLong(4,companyId);
    ps.setLong(5,userId);
    ps.setString(6,userName);
    ps.setTimestamp(7,createDate);
    ps.setTimestamp(8,createDate);
    ps.setLong(9,classNameId);
    ps.setString(10,portletId);
    ps.setString(11,StringPool.BLANK);
    ps.setString(12,portletId);
    ps.setString(13,StringPool.BLANK);
    ps.setLong(14,folderId);
    ps.executeUpdate();
    return repositoryId;
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to add repository for portlet " + portletId,e);
    }
    return -1;
  }
 finally {
    DataAccess.cleanUp(ps);
  }
}
