{
  String[] attachments=getAttachments(companyId,containerId,resourcePrimKey);
  if ((attachments == null) || (attachments.length == 0)) {
    return;
  }
  Timestamp createDate=new Timestamp(System.currentTimeMillis());
  long repositoryId=getRepositoryId(groupId,companyId,userId,userName,createDate,getClassNameId(),getPortletId());
  long containerModelFolderId=getContainerModelFolderId(groupId,companyId,resourcePrimKey,containerModelId,userId,userName,createDate);
  for (  String attachment : attachments) {
    String name=String.valueOf(increment(DLFileEntry.class.getName()));
    String title=FileUtil.getShortFileName(attachment);
    String extension=FileUtil.getExtension(title);
    String mimeType=MimeTypesUtil.getContentType(extension);
    long size=DLStoreUtil.getFileSize(companyId,CompanyConstants.SYSTEM,attachment);
    long fileEntryId=addDLFileEntry(groupId,companyId,userId,userName,createDate,repositoryId,containerModelFolderId,name,extension,mimeType,title,size);
    addDLFileVersion(increment(),groupId,companyId,userId,userName,createDate,repositoryId,containerModelFolderId,fileEntryId,extension,mimeType,title,size);
    byte[] bytes=DLStoreUtil.getFileAsBytes(companyId,CompanyConstants.SYSTEM,attachment);
    DLStoreUtil.addFile(companyId,containerModelFolderId,name,false,bytes);
    try {
      DLStoreUtil.deleteFile(companyId,CompanyConstants.SYSTEM,attachment);
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to delete the attachment " + attachment,e);
      }
    }
  }
}
