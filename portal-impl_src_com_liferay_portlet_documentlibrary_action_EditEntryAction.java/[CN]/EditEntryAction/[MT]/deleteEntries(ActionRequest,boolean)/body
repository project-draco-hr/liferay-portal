{
  long[] deleteFolderIds=StringUtil.split(ParamUtil.getString(actionRequest,"folderIds"),0L);
  for (  long deleteFolderId : deleteFolderIds) {
    if (moveToTrash) {
      DLAppServiceUtil.moveFolderToTrash(deleteFolderId);
    }
 else {
      DLAppServiceUtil.deleteFolder(deleteFolderId);
    }
  }
  long[] deleteFileShortcutIds=StringUtil.split(ParamUtil.getString(actionRequest,"fileShortcutIds"),0L);
  for (  long deleteFileShortcutId : deleteFileShortcutIds) {
    if (moveToTrash) {
      DLAppServiceUtil.moveFileShortcutToTrash(deleteFileShortcutId);
    }
 else {
      DLAppServiceUtil.deleteFileShortcut(deleteFileShortcutId);
    }
  }
  long[] deleteFileEntryIds=StringUtil.split(ParamUtil.getString(actionRequest,"fileEntryIds"),0L);
  for (  long deleteFileEntryId : deleteFileEntryIds) {
    if (moveToTrash) {
      DLAppServiceUtil.moveFileEntryToTrash(deleteFileEntryId);
    }
 else {
      DLAppServiceUtil.deleteFileEntry(deleteFileEntryId);
    }
  }
  if (moveToTrash && ((deleteFolderIds.length > 0) || (deleteFileShortcutIds.length > 0) || (deleteFileEntryIds.length > 0))) {
    HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
    String portletId=(String)request.getAttribute(WebKeys.PORTLET_ID);
    Map<String,String> data=new HashMap<String,String>();
    data.put("trashedFileEntryIds",StringUtil.merge(deleteFileEntryIds));
    data.put("trashedFileShortcutIds",StringUtil.merge(deleteFileShortcutIds));
    data.put("trashedFolderIds",StringUtil.merge(deleteFolderIds));
    SessionMessages.add(actionRequest,WebKeys.TRASHED_ENTRIES,data);
    SessionMessages.add(actionRequest,WebKeys.UNDO_TYPE,PortletKeys.DOCUMENT_LIBRARY);
    SessionMessages.add(actionRequest,portletId + SessionMessages.KEY_SUFFIX_DELETE_SUCCESS,Boolean.TRUE);
  }
}
