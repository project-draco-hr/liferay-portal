{
  if (!InlineSQLHelperUtil.isEnabled()) {
    return findByUuid(uuid,start,end,orderByComparator);
  }
  StringBundler query=null;
  if (orderByComparator != null) {
    query=new StringBundler(3 + (orderByComparator.getOrderByFields().length * 3));
  }
 else {
    query=new StringBundler(2);
  }
  if (getDB().isSupportsInlineDistinct()) {
    query.append(_FILTER_SQL_SELECT_LAYOUTSETPROTOTYPE_WHERE);
  }
 else {
    query.append(_FILTER_SQL_SELECT_LAYOUTSETPROTOTYPE_NO_INLINE_DISTINCT_WHERE_1);
  }
  if (uuid == null) {
    query.append(_FINDER_COLUMN_UUID_UUID_1);
  }
 else {
    if (uuid.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_UUID_UUID_3);
    }
 else {
      query.append(_FINDER_COLUMN_UUID_UUID_2);
    }
  }
  if (!getDB().isSupportsInlineDistinct()) {
    query.append(_FILTER_SQL_SELECT_LAYOUTSETPROTOTYPE_NO_INLINE_DISTINCT_WHERE_2);
  }
  if (orderByComparator != null) {
    if (getDB().isSupportsInlineDistinct()) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_TABLE,orderByComparator);
    }
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),LayoutSetPrototype.class.getName(),_FILTER_COLUMN_PK,_FILTER_COLUMN_USERID);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    if (getDB().isSupportsInlineDistinct()) {
      q.addEntity(_FILTER_ENTITY_ALIAS,LayoutSetPrototypeImpl.class);
    }
 else {
      q.addEntity(_FILTER_ENTITY_TABLE,LayoutSetPrototypeImpl.class);
    }
    QueryPos qPos=QueryPos.getInstance(q);
    if (uuid != null) {
      qPos.add(uuid);
    }
    return (List<LayoutSetPrototype>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
