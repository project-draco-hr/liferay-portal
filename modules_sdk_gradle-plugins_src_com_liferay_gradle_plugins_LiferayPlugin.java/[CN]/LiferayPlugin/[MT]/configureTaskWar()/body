{
  War warTask=(War)getTask(WarPlugin.WAR_TASK_NAME);
  CopySpecInternal rootSpec=warTask.getRootSpec();
  warTask.setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE);
  warTask.exclude("WEB-INF/lib");
  final Closure<String> filterLiferayHookXmlClosure=new Closure<String>(null){
    @SuppressWarnings("unused") public String doCall(    String line){
      if (line.contains("content/Language*.properties")) {
        StringBuilder sb=new StringBuilder();
        File contentDir=new File(_liferayExtension.getPluginSrcDir(),"content");
        File[] files=contentDir.listFiles();
        for (int i=0; i < files.length; i++) {
          File file=files[i];
          sb.append("\t<language-properties>content/");
          sb.append(file.getName());
          sb.append("</language-properties>");
          if ((i + 1) < files.length) {
            sb.append("\n");
          }
        }
        return sb.toString();
      }
      return line;
    }
  }
;
  warTask.filesMatching("WEB-INF/liferay-hook.xml",new Action<FileCopyDetails>(){
    @Override public void execute(    FileCopyDetails fileCopyDetails){
      fileCopyDetails.filter(filterLiferayHookXmlClosure);
    }
  }
);
  File manifestFile;
  if (_liferayExtension.isOsgiPlugin()) {
    manifestFile=project.file("src/META-INF/MANIFEST.MF");
  }
 else {
    manifestFile=project.file("docroot/META-INF/MANIFEST.MF");
  }
  Manifest manifest=warTask.getManifest();
  if (manifestFile.exists()) {
    manifest.from(manifestFile);
  }
 else {
    for (    CopySpecInternal childSpec : rootSpec.getChildren()) {
      CopySpecResolver copySpecResolver=childSpec.buildRootResolver();
      RelativePath destPath=copySpecResolver.getDestPath();
      if ("META-INF".equals(destPath.getPathString())) {
        childSpec.exclude("**");
      }
    }
  }
  TaskOutputs taskOutputs=warTask.getOutputs();
  taskOutputs.file(warTask.getArchivePath());
  Closure<String> renameDependencyClosure=new Closure<String>(null){
    @SuppressWarnings("unused") public String doCall(    String name){
      Map<String,String> newDependencyNames=_getNewDependencyNames();
      String newName=newDependencyNames.get(name);
      if (Validator.isNotNull(newName)) {
        return newName;
      }
      return name;
    }
  }
;
  for (  CopySpecInternal childSpec : rootSpec.getChildren()) {
    childSpec.rename(renameDependencyClosure);
  }
}
