{
  Closure<String> renameDependencyClosure=new Closure<String>(null){
    @SuppressWarnings("unused") public String doCall(    String name){
      Map<String,String> newDependencyNames=_getNewDependencyNames();
      String newDependencyName=newDependencyNames.get(name);
      if (Validator.isNotNull(newDependencyName)) {
        return newDependencyName;
      }
      return name;
    }
    private Map<String,String> _getNewDependencyNames(){
      if (_newDependencyNames != null) {
        return _newDependencyNames;
      }
      _newDependencyNames=new HashMap<>();
      Configuration compileConfiguration=getConfiguration(JavaPlugin.COMPILE_CONFIGURATION_NAME);
      ResolvedConfiguration resolvedConfiguration=compileConfiguration.getResolvedConfiguration();
      for (      ResolvedArtifact resolvedArtifact : resolvedConfiguration.getResolvedArtifacts()) {
        ResolvedModuleVersion resolvedModuleVersion=resolvedArtifact.getModuleVersion();
        ModuleVersionIdentifier moduleVersionIdentifier=resolvedModuleVersion.getId();
        String oldDependencyName=moduleVersionIdentifier.getName() + "-" + moduleVersionIdentifier.getVersion()+ ".jar";
        String newDependencyName=moduleVersionIdentifier.getName() + ".jar";
        _newDependencyNames.put(oldDependencyName,newDependencyName);
      }
      return _newDependencyNames;
    }
    private Map<String,String> _newDependencyNames;
  }
;
  CopySpecInternal copySpecInternal=warTask.getRootSpec();
  for (  CopySpecInternal childCopySpecInternal : copySpecInternal.getChildren()) {
    childCopySpecInternal.rename(renameDependencyClosure);
  }
}
