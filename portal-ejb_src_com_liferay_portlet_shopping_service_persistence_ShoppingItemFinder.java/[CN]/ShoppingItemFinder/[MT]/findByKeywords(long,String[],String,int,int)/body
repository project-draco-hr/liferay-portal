{
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    StringBuffer query=new StringBuffer();
    query.append("SELECT {ShoppingItem.*} FROM ShoppingItem ");
    query.append("INNER JOIN ShoppingCategory ON ");
    query.append("ShoppingCategory.categoryId = ");
    query.append("ShoppingItem.categoryId ");
    query.append("WHERE ");
    query.append("ShoppingCategory.groupId = ? AND (");
    if ((categoryIds != null) && (categoryIds.length > 0)) {
      query.append("(");
      for (int i=0; i < categoryIds.length; i++) {
        query.append("ShoppingItem.categoryId = ? ");
        if (i + 1 < categoryIds.length) {
          query.append("OR ");
        }
      }
      query.append(") AND ");
    }
    query.append("ShoppingItem.name LIKE ? OR ");
    query.append("ShoppingItem.description LIKE ? OR ");
    query.append("ShoppingItem.properties LIKE ?)");
    keywords='%' + keywords + '%';
    SQLQuery q=session.createSQLQuery(query.toString());
    q.setCacheable(false);
    q.addEntity("ShoppingItem",ShoppingItemImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    for (int i=0; i < categoryIds.length; i++) {
      qPos.add(categoryIds[i]);
    }
    qPos.add(keywords);
    qPos.add(keywords);
    qPos.add(keywords);
    return QueryUtil.list(q,HibernateUtil.getDialect(),begin,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
}
