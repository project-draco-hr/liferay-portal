{
  String methodName=method.getName();
  try {
    if (methodName.equals("getPrimaryTestSuiteName") || methodName.equals("setPrimaryTestSuiteName")) {
    }
 else     if (methodName.equals("pauseLoggerCheck")) {
      _logger.pauseLoggerCheck();
    }
 else     if (methodName.equals("saveScreenshot")) {
      _logger.logScreenShots();
    }
 else     if (methodName.equals("sendActionDescriptionLogger")) {
      _logger.logActionDescription(arguments);
    }
 else     if (methodName.equals("sendActionLogger")) {
      _logger.logActionCommand(arguments);
    }
 else     if (methodName.equals("sendMacroDescriptionLogger")) {
      _logger.logMacroDescription(arguments);
    }
 else     if (methodName.equals("sendLogger")) {
      _logger.send(arguments);
    }
 else     if (methodName.equals("sendTestCaseCommandLogger")) {
      _logger.logTestCaseCommand(arguments);
    }
 else     if (methodName.equals("sendTestCaseHeaderLogger")) {
      _logger.logTestCaseHeader(arguments);
    }
 else     if (methodName.equals("startLogger")) {
      _logger.start();
    }
 else     if (methodName.equals("stopLogger")) {
      _logger.stop();
    }
 else {
      _logger.logSeleniumCommand(method,arguments);
    }
    return method.invoke(_liferaySelenium,arguments);
  }
 catch (  InvocationTargetException ite) {
    Throwable throwable=ite.getCause();
    if (methodName.equals("assertLiferayErrors")) {
      _logger.logError(method,arguments,throwable,false);
      return null;
    }
    if (methodName.equals("stop") || methodName.equals("stopLogger")) {
      System.out.println("Unable to stop " + throwable.getMessage());
      return null;
    }
    _liferaySelenium.saveScreenshotBeforeAction(true);
    _logger.logError(method,arguments,throwable,true);
    throw throwable;
  }
}
