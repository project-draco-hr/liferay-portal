{
  DummyOutputStream dummyOutputStream=new DummyOutputStream();
  int cacheCapacity=1024;
  FlushPreAction flushPreAction=new FlushPreAction(){
    @Override public void beforeFlush(){
    }
  }
;
  RestrictedByteArrayCacheOutputStream restrictedByteArrayCacheOutputStream=new RestrictedByteArrayCacheOutputStream(dummyOutputStream,cacheCapacity,flushPreAction);
  Assert.assertSame(dummyOutputStream,restrictedByteArrayCacheOutputStream.outputStream);
  Assert.assertEquals(cacheCapacity,restrictedByteArrayCacheOutputStream.cacheCapacity);
  Assert.assertEquals(cacheCapacity,restrictedByteArrayCacheOutputStream.getCacheCapacity());
  Assert.assertSame(flushPreAction,restrictedByteArrayCacheOutputStream.flushPreAction);
  Assert.assertEquals(32,restrictedByteArrayCacheOutputStream.cache.length);
  Assert.assertEquals(0,restrictedByteArrayCacheOutputStream.index);
  Assert.assertEquals(0,restrictedByteArrayCacheOutputStream.size());
  restrictedByteArrayCacheOutputStream=new RestrictedByteArrayCacheOutputStream(dummyOutputStream,cacheCapacity / 2,cacheCapacity,flushPreAction);
  Assert.assertSame(dummyOutputStream,restrictedByteArrayCacheOutputStream.outputStream);
  Assert.assertEquals(cacheCapacity,restrictedByteArrayCacheOutputStream.cacheCapacity);
  Assert.assertEquals(cacheCapacity,restrictedByteArrayCacheOutputStream.getCacheCapacity());
  Assert.assertSame(flushPreAction,restrictedByteArrayCacheOutputStream.flushPreAction);
  Assert.assertEquals(cacheCapacity / 2,restrictedByteArrayCacheOutputStream.cache.length);
  Assert.assertEquals(0,restrictedByteArrayCacheOutputStream.index);
  Assert.assertEquals(0,restrictedByteArrayCacheOutputStream.size());
  try {
    new RestrictedByteArrayCacheOutputStream(dummyOutputStream,cacheCapacity,cacheCapacity / 2,flushPreAction);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Initial cache size " + cacheCapacity + " is larger than cache capacity "+ cacheCapacity / 2,iae.getMessage());
  }
}
