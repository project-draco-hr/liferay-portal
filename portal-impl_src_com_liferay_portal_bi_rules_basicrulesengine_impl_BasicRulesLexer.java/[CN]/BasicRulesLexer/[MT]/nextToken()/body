{
  Token theRetToken=null;
  tryAgain:   for (; ; ) {
    Token _token=null;
    int _ttype=Token.INVALID_TYPE;
    resetText();
    try {
      try {
switch (LA(1)) {
case '*':
case '.':
case '/':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case ':':
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
case 'G':
case 'H':
case 'I':
case 'J':
case 'K':
case 'L':
case 'M':
case 'N':
case 'O':
case 'P':
case 'Q':
case 'R':
case 'S':
case 'T':
case 'U':
case 'V':
case 'W':
case 'X':
case 'Y':
case 'Z':
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'g':
case 'h':
case 'i':
case 'j':
case 'k':
case 'l':
case 'm':
case 'n':
case 'o':
case 'p':
case 'q':
case 'r':
case 's':
case 't':
case 'u':
case 'v':
case 'w':
case 'x':
case 'y':
case 'z':
{
            mPART(true);
            theRetToken=_returnToken;
            break;
          }
case '(':
{
          mLEFT_PAREN(true);
          theRetToken=_returnToken;
          break;
        }
case ')':
{
        mRIGHT_PAREN(true);
        theRetToken=_returnToken;
        break;
      }
case '&':
{
      mAND(true);
      theRetToken=_returnToken;
      break;
    }
case '|':
{
    mOR(true);
    theRetToken=_returnToken;
    break;
  }
case '=':
{
  mEQ(true);
  theRetToken=_returnToken;
  break;
}
case '!':
{
mNOTEQ(true);
theRetToken=_returnToken;
break;
}
case '~':
{
mMATCHES(true);
theRetToken=_returnToken;
break;
}
case '\t':
case '\n':
case '\r':
case ' ':
{
mWS(true);
theRetToken=_returnToken;
break;
}
default :
if ((LA(1) == '>') && (LA(2) == '=')) {
mGTEQ(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '<') && (LA(2) == '=')) {
mLTEQ(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '>') && (true)) {
mGT(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '<') && (true)) {
mLT(true);
theRetToken=_returnToken;
}
 else {
if (LA(1) == EOF_CHAR) {
uponEOF();
_returnToken=makeToken(Token.EOF_TYPE);
}
 else {
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
}
if (_returnToken == null) continue tryAgain;
_ttype=_returnToken.getType();
_ttype=testLiteralsTable(_ttype);
_returnToken.setType(_ttype);
return _returnToken;
}
 catch (RecognitionException e) {
throw new TokenStreamRecognitionException(e);
}
}
 catch (CharStreamException cse) {
if (cse instanceof CharStreamIOException) {
throw new TokenStreamIOException(((CharStreamIOException)cse).io);
}
 else {
throw new TokenStreamException(cse.getMessage());
}
}
}
}
