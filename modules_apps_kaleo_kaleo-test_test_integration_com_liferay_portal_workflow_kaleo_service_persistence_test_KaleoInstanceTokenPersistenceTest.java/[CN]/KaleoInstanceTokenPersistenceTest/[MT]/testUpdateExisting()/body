{
  long pk=RandomTestUtil.nextLong();
  KaleoInstanceToken newKaleoInstanceToken=_persistence.create(pk);
  newKaleoInstanceToken.setGroupId(RandomTestUtil.nextLong());
  newKaleoInstanceToken.setCompanyId(RandomTestUtil.nextLong());
  newKaleoInstanceToken.setUserId(RandomTestUtil.nextLong());
  newKaleoInstanceToken.setUserName(RandomTestUtil.randomString());
  newKaleoInstanceToken.setCreateDate(RandomTestUtil.nextDate());
  newKaleoInstanceToken.setModifiedDate(RandomTestUtil.nextDate());
  newKaleoInstanceToken.setKaleoDefinitionId(RandomTestUtil.nextLong());
  newKaleoInstanceToken.setKaleoInstanceId(RandomTestUtil.nextLong());
  newKaleoInstanceToken.setParentKaleoInstanceTokenId(RandomTestUtil.nextLong());
  newKaleoInstanceToken.setCurrentKaleoNodeId(RandomTestUtil.nextLong());
  newKaleoInstanceToken.setCurrentKaleoNodeName(RandomTestUtil.randomString());
  newKaleoInstanceToken.setClassName(RandomTestUtil.randomString());
  newKaleoInstanceToken.setClassPK(RandomTestUtil.nextLong());
  newKaleoInstanceToken.setCompleted(RandomTestUtil.randomBoolean());
  newKaleoInstanceToken.setCompletionDate(RandomTestUtil.nextDate());
  _kaleoInstanceTokens.add(_persistence.update(newKaleoInstanceToken));
  KaleoInstanceToken existingKaleoInstanceToken=_persistence.findByPrimaryKey(newKaleoInstanceToken.getPrimaryKey());
  Assert.assertEquals(existingKaleoInstanceToken.getKaleoInstanceTokenId(),newKaleoInstanceToken.getKaleoInstanceTokenId());
  Assert.assertEquals(existingKaleoInstanceToken.getGroupId(),newKaleoInstanceToken.getGroupId());
  Assert.assertEquals(existingKaleoInstanceToken.getCompanyId(),newKaleoInstanceToken.getCompanyId());
  Assert.assertEquals(existingKaleoInstanceToken.getUserId(),newKaleoInstanceToken.getUserId());
  Assert.assertEquals(existingKaleoInstanceToken.getUserName(),newKaleoInstanceToken.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoInstanceToken.getCreateDate()),Time.getShortTimestamp(newKaleoInstanceToken.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoInstanceToken.getModifiedDate()),Time.getShortTimestamp(newKaleoInstanceToken.getModifiedDate()));
  Assert.assertEquals(existingKaleoInstanceToken.getKaleoDefinitionId(),newKaleoInstanceToken.getKaleoDefinitionId());
  Assert.assertEquals(existingKaleoInstanceToken.getKaleoInstanceId(),newKaleoInstanceToken.getKaleoInstanceId());
  Assert.assertEquals(existingKaleoInstanceToken.getParentKaleoInstanceTokenId(),newKaleoInstanceToken.getParentKaleoInstanceTokenId());
  Assert.assertEquals(existingKaleoInstanceToken.getCurrentKaleoNodeId(),newKaleoInstanceToken.getCurrentKaleoNodeId());
  Assert.assertEquals(existingKaleoInstanceToken.getCurrentKaleoNodeName(),newKaleoInstanceToken.getCurrentKaleoNodeName());
  Assert.assertEquals(existingKaleoInstanceToken.getClassName(),newKaleoInstanceToken.getClassName());
  Assert.assertEquals(existingKaleoInstanceToken.getClassPK(),newKaleoInstanceToken.getClassPK());
  Assert.assertEquals(existingKaleoInstanceToken.getCompleted(),newKaleoInstanceToken.getCompleted());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoInstanceToken.getCompletionDate()),Time.getShortTimestamp(newKaleoInstanceToken.getCompletionDate()));
}
