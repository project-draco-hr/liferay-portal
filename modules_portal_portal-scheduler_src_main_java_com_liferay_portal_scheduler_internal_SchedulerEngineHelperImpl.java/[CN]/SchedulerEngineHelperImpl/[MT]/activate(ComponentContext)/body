{
  _auditMessageSchedulerJob=GetterUtil.getBoolean(_props.get(PropsKeys.AUDIT_MESSAGE_SCHEDULER_JOB));
  _bundleContext=componentContext.getBundleContext();
  if (_clusterLink.isEnabled() && GetterUtil.getBoolean(_props.get(PropsKeys.SCHEDULER_ENABLED))) {
    ClusterSchedulerEngine clusterSchedulerEngine=new ClusterSchedulerEngine(_schedulerEngine);
    clusterSchedulerEngine.setClusterMasterExecutor(_clusterMasterExecutor);
    clusterSchedulerEngine.setProps(_props);
    clusterSchedulerEngine.setSchedulerEngineHelper(this);
    _serviceRegistration=_bundleContext.registerService(IdentifiableOSGiService.class,clusterSchedulerEngine,new HashMapDictionary<String,Object>());
    _schedulerEngine=ClusterableProxyFactory.createClusterableProxy(clusterSchedulerEngine);
  }
  if (GetterUtil.getBoolean(_props.get(PropsKeys.SCHEDULER_ENABLED))) {
    _serviceTracker=ServiceTrackerFactory.open(_bundleContext,"(objectClass=" + SchedulerEventMessageListener.class.getName() + ")",new SchedulerEventMessageListenerServiceTrackerCustomizer());
  }
}
