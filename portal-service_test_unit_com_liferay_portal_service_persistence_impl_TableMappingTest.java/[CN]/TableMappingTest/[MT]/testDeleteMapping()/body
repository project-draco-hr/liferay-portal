{
  long leftPrimaryKey=1;
  long rightPrimaryKey=2;
  Assert.assertFalse(_tableMappingImpl.deleteTableMapping(leftPrimaryKey,rightPrimaryKey));
  _mappingStore.put(leftPrimaryKey,new long[]{rightPrimaryKey});
  Assert.assertTrue(_tableMappingImpl.deleteTableMapping(leftPrimaryKey,rightPrimaryKey));
  RecorderModelListener<Left> leftModelListener=new RecorderModelListener<Left>();
  _leftPersistence.registerListener(leftModelListener);
  RecorderModelListener<Right> rightModelListener=new RecorderModelListener<Right>();
  _rightPersistence.registerListener(rightModelListener);
  _mappingStore.put(leftPrimaryKey,new long[]{rightPrimaryKey});
  Assert.assertTrue(_tableMappingImpl.deleteTableMapping(leftPrimaryKey,rightPrimaryKey));
  leftModelListener.assertOnBeforeRemoveAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey);
  rightModelListener.assertOnBeforeRemoveAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey);
  leftModelListener.assertOnAfterRemoveAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey);
  rightModelListener.assertOnAfterRemoveAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey);
  _leftPersistence.unregisterListener(leftModelListener);
  _rightPersistence.unregisterListener(rightModelListener);
  leftModelListener=new RecorderModelListener<Left>();
  _leftPersistence.registerListener(leftModelListener);
  rightModelListener=new RecorderModelListener<Right>();
  _rightPersistence.registerListener(rightModelListener);
  _mappingStore.put(leftPrimaryKey,new long[]{rightPrimaryKey});
  MockDeleteMappingSqlUpdate mockDeleteSqlUpdate=(MockDeleteMappingSqlUpdate)_tableMappingImpl.deleteMappingSqlUpdate;
  mockDeleteSqlUpdate.setDatabaseError(true);
  try {
    _tableMappingImpl.deleteTableMapping(leftPrimaryKey,rightPrimaryKey);
    Assert.fail();
  }
 catch (  SystemException se) {
    Throwable cause=se.getCause();
    Assert.assertSame(RuntimeException.class,cause.getClass());
    Assert.assertEquals("Database error",cause.getMessage());
  }
 finally {
    mockDeleteSqlUpdate.setDatabaseError(false);
    _mappingStore.remove(leftPrimaryKey);
  }
  leftModelListener.assertOnBeforeRemoveAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey);
  rightModelListener.assertOnBeforeRemoveAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey);
  leftModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  rightModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  _leftPersistence.unregisterListener(leftModelListener);
  _rightPersistence.unregisterListener(rightModelListener);
  leftModelListener=new RecorderModelListener<Left>();
  _leftPersistence.registerListener(leftModelListener);
  rightModelListener=new RecorderModelListener<Right>();
  _rightPersistence.registerListener(rightModelListener);
  PortalCache<Long,long[]> leftToRightPortalCache=_tableMappingImpl.leftToRightPortalCache;
  leftToRightPortalCache.put(leftPrimaryKey,new long[]{rightPrimaryKey});
  Assert.assertFalse(_tableMappingImpl.deleteTableMapping(leftPrimaryKey,rightPrimaryKey));
  leftModelListener.assertOnBeforeRemoveAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey);
  rightModelListener.assertOnBeforeRemoveAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey);
  leftModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  rightModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  _leftPersistence.unregisterListener(leftModelListener);
  _rightPersistence.unregisterListener(rightModelListener);
}
