{
  Set classes=new HashSet();
  StreamTokenizer st=new StreamTokenizer(new BufferedReader(new FileReader(file)));
  st.resetSyntax();
  st.slashSlashComments(true);
  st.slashStarComments(true);
  st.wordChars('a','z');
  st.wordChars('A','Z');
  st.wordChars('.','.');
  st.wordChars('0','9');
  st.wordChars('_','_');
  st.lowerCaseMode(false);
  st.eolIsSignificant(false);
  st.quoteChar('"');
  st.quoteChar('\'');
  st.parseNumbers();
  while (st.nextToken() != StreamTokenizer.TT_EOF) {
    if (st.ttype == StreamTokenizer.TT_WORD) {
      if (st.sval.equals("class") || st.sval.equals("interface")) {
        break;
      }
    }
  }
  while (st.nextToken() != StreamTokenizer.TT_EOF) {
    if (st.ttype == StreamTokenizer.TT_WORD) {
      if (Character.isUpperCase(st.sval.charAt(0))) {
        if (st.sval.indexOf('.') >= 0) {
          classes.add(st.sval.substring(0,st.sval.indexOf('.')));
        }
 else {
          classes.add(st.sval);
        }
      }
    }
 else     if (st.ttype != StreamTokenizer.TT_NUMBER && st.ttype != StreamTokenizer.TT_EOL) {
      if (Character.isUpperCase((char)st.ttype)) {
        classes.add(String.valueOf((char)st.ttype));
      }
    }
  }
  String fileName=file.getName();
  if (fileName.endsWith(".java")) {
    fileName=fileName.substring(0,fileName.length() - 5);
  }
  classes.remove(fileName);
  return classes;
}
