{
  Set<String> classes=new HashSet<String>();
  StreamTokenizer st=new StreamTokenizer(new BufferedReader(reader));
  _setupParseTable(st);
  st.wordChars('@','@');
  while (st.nextToken() != StreamTokenizer.TT_EOF) {
    if (st.ttype == StreamTokenizer.TT_WORD) {
      if (st.sval.equals("class") || st.sval.equals("interface")) {
        break;
      }
 else       if (st.sval.startsWith("@")) {
        String token=StringUtil.replace(st.sval,'@',"");
        classes.add(token);
      }
    }
  }
  _setupParseTable(st);
  while (st.nextToken() != StreamTokenizer.TT_EOF) {
    if (st.ttype == StreamTokenizer.TT_WORD) {
      if (st.sval.indexOf('.') >= 0) {
        classes.add(st.sval.substring(0,st.sval.indexOf('.')));
      }
 else {
        classes.add(st.sval);
      }
    }
 else     if (st.ttype != StreamTokenizer.TT_NUMBER && st.ttype != StreamTokenizer.TT_EOL) {
      if (Character.isUpperCase((char)st.ttype)) {
        classes.add(String.valueOf((char)st.ttype));
      }
    }
  }
  classes.remove(className);
  return classes;
}
