{
  List<FileVersion> fileVersions=fileEntry.getFileVersions(WorkflowConstants.STATUS_ANY);
  FileVersion latestFileVersion=fileVersions.get(fileVersions.size() - 1);
  String fileName=latestFileVersion.getTitle();
  if (Validator.isNotNull(latestFileVersion.getExtension()) && !fileName.endsWith(StringPool.PERIOD + latestFileVersion.getExtension())) {
    fileName+=StringPool.PERIOD + latestFileVersion.getExtension();
  }
  FileEntry destinationFileEntry=toLocalRepository.addFileEntry(userId,newFolderId,fileName,latestFileVersion.getMimeType(),latestFileVersion.getTitle(),latestFileVersion.getDescription(),StringPool.BLANK,latestFileVersion.getContentStream(false),latestFileVersion.getSize(),serviceContext);
  for (int i=fileVersions.size() - 2; i >= 0; i--) {
    FileVersion fileVersion=fileVersions.get(i);
    FileVersion previousFileVersion=fileVersions.get(i + 1);
    try {
      destinationFileEntry=toLocalRepository.updateFileEntry(userId,destinationFileEntry.getFileEntryId(),fileName,destinationFileEntry.getMimeType(),destinationFileEntry.getTitle(),destinationFileEntry.getDescription(),StringPool.BLANK,DLAppUtil.isMajorVersion(fileVersion,previousFileVersion),fileVersion.getContentStream(false),fileVersion.getSize(),serviceContext);
    }
 catch (    PortalException pe) {
      toLocalRepository.deleteFileEntry(destinationFileEntry.getFileEntryId());
      throw pe;
    }
  }
  return destinationFileEntry;
}
