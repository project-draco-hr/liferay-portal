{
class TestTemplateSkeleton extends TemplateSkeleton {
    TestTemplateSkeleton(    TargetLocator targetLocator){
      super(targetLocator);
    }
    @Override protected void doDispatch(    RegistrationReference registrationReference,    Datagram datagram,    Deserializer deserializer){
      int i=deserializer.readInt();
      if (i == 0) {
        ReflectionTestUtil.invoke(this,"_sendResponse",new Class<?>[]{RegistrationReference.class,Datagram.class,RPCResponse.class},registrationReference,datagram,new RPCResponse("syncCall"));
      }
 else       if (i == 1) {
        ReflectionTestUtil.invoke(this,"_unknownMethodIndex",new Class<?>[]{int.class},1);
      }
    }
  }
  try {
    new TestTemplateSkeleton(null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Target locator is null",npe.getMessage());
  }
  TestGenerateTargetLocator testGenerateTargetLocator=new TestGenerateTargetLocator(TestGenerateInterface1.class);
  TestTemplateSkeleton testTemplateSkeleton=new TestTemplateSkeleton(testGenerateTargetLocator);
  Assert.assertSame(testGenerateTargetLocator,ReflectionTestUtil.getFieldValue(testTemplateSkeleton,"_targetLocator"));
  MockIntraband mockIntraband=new MockIntraband();
  MockRegistrationReference mockRegistrationReference=new MockRegistrationReference(mockIntraband);
  Serializer serializer=new Serializer();
  serializer.writeInt(0);
  testTemplateSkeleton.dispatch(mockRegistrationReference,Datagram.createRequestDatagram(SystemDataType.PROXY.getValue(),new byte[0]),new Deserializer(serializer.toByteBuffer()));
  Datagram datagram=mockIntraband.getDatagram();
  Deserializer deserializer=new Deserializer(datagram.getDataByteBuffer());
  RPCResponse rpcResponse=deserializer.readObject();
  Assert.assertEquals("syncCall",rpcResponse.getResult());
  serializer=new Serializer();
  serializer.writeInt(1);
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(TemplateSkeleton.class.getName(),Level.SEVERE)){
    testTemplateSkeleton.dispatch(mockRegistrationReference,Datagram.createRequestDatagram(SystemDataType.PROXY.getValue(),new byte[0]),new Deserializer(serializer.toByteBuffer()));
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Unable to dispatch",logRecord.getMessage());
    Throwable throwable=logRecord.getThrown();
    Assert.assertSame(IllegalArgumentException.class,throwable.getClass());
    Assert.assertEquals("Unknow method index 1 for proxy methods mappings {}",throwable.getMessage());
  }
   Assert.assertEquals("{0 -> a, 1 -> b, 2 -> c}",ReflectionTestUtil.invoke(testTemplateSkeleton,"_getProxyMethodsMapping",new Class<?>[]{String[].class},new Object[]{new String[]{"a","b","c"}}));
}
