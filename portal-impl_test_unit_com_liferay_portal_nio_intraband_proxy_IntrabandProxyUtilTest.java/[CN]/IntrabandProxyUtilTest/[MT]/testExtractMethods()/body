{
  try {
    IntrabandProxyUtil.extractMethods(TestExtractMethodsClass1.class);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("The @Id annotated method " + TestExtractMethodsClass1.class.getMethod("getId") + " must not be static",iae.getMessage());
  }
  try {
    IntrabandProxyUtil.extractMethods(TestExtractMethodsClass2.class);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Method method=TestExtractMethodsClass2.class.getMethod("getId",Object.class);
    Assert.assertEquals("The @Id annotated method " + method + " must not have parameters",iae.getMessage());
  }
  try {
    IntrabandProxyUtil.extractMethods(TestExtractMethodsClass3.class);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("The @Id annotated method " + TestExtractMethodsClass3.class.getMethod("getId") + " must not return String",iae.getMessage());
  }
  try {
    IntrabandProxyUtil.extractMethods(TestExtractMethodsClass4.class);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Static proxy method violation for " + TestExtractMethodsClass4.class.getMethod("doStuff"),iae.getMessage());
  }
  MethodsBag methodsBag=IntrabandProxyUtil.extractMethods(TestExtractMethodsClass5.class);
  List<Method> idMethods=methodsBag.idMethods;
  Assert.assertEquals(2,idMethods.size());
  Assert.assertTrue(idMethods.contains(TestExtractMethodsClass5.class.getMethod("getId1")));
  Assert.assertTrue(idMethods.contains(TestExtractMethodsClass5.class.getMethod("getId2")));
  List<Method> proxyMethods=methodsBag.proxyMethods;
  Assert.assertEquals(2,proxyMethods.size());
  Assert.assertEquals(TestExtractMethodsClass5.class.getMethod("doStuff1"),proxyMethods.get(0));
  Assert.assertEquals(TestExtractMethodsClass5.class.getMethod("doStuff2"),proxyMethods.get(1));
  List<Method> emptyMethods=methodsBag.emptyMethods;
  Assert.assertEquals(1,emptyMethods.size());
  Assert.assertEquals(TestExtractMethodsClass5.class.getMethod("doStuff4"),emptyMethods.get(0));
  String[] proxyMethodSignatures=methodsBag.proxyMethodSignatures;
  Assert.assertEquals(2,proxyMethodSignatures.length);
  Assert.assertEquals("doStuff1-()V",proxyMethodSignatures[0]);
  Assert.assertEquals("doStuff2-()V",proxyMethodSignatures[1]);
}
