{
  try {
    IntrabandProxyUtil.validate(_classLoader,Id.class,skeletonOrStub);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals(Id.class + " is an annotation",iae.getMessage());
  }
  try {
    IntrabandProxyUtil.validate(_classLoader,int[].class,skeletonOrStub);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals(int[].class + " is an array",iae.getMessage());
  }
  try {
    IntrabandProxyUtil.validate(_classLoader,SystemDataType.class,skeletonOrStub);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals(SystemDataType.class + " is an enum",iae.getMessage());
  }
  try {
    IntrabandProxyUtil.validate(_classLoader,int.class,skeletonOrStub);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals(int.class + " is a primitive",iae.getMessage());
  }
  ClassLoader classLoader=new URLClassLoader(new URL[0],null);
  try {
    IntrabandProxyUtil.validate(classLoader,IntrabandProxyUtilTest.class,skeletonOrStub);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals(IntrabandProxyUtilTest.class + " is not visible from class loader " + classLoader,iae.getMessage());
  }
class TestValidateClass1 {
    @SuppressWarnings("unused") private String[] PROXY_METHOD_SIGNATURES;
  }
  try {
    IntrabandProxyUtil.validate(_classLoader,TestValidateClass1.class,skeletonOrStub);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Field field=TestValidateClass1.class.getDeclaredField("PROXY_METHOD_SIGNATURES");
    Assert.assertEquals("Field " + field + " is expected to be of type "+ String[].class+ " and static",iae.getMessage());
  }
  if (skeletonOrStub) {
class TestValidateClass2 {
      @SuppressWarnings("unused") private String _PROXY_METHODS_MAPPING;
    }
    try {
      IntrabandProxyUtil.validate(_classLoader,TestValidateClass2.class,true);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
      Field field=TestValidateClass2.class.getDeclaredField("_PROXY_METHODS_MAPPING");
      Assert.assertEquals("Field " + field + " is expected to be of type "+ String.class+ " and static",iae.getMessage());
    }
class TestValidateClass3 {
      @SuppressWarnings("unused") private String _log;
    }
    try {
      IntrabandProxyUtil.validate(_classLoader,TestValidateClass3.class,true);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
      Field field=TestValidateClass3.class.getDeclaredField("_log");
      Assert.assertEquals("Field " + field + " is expected to be of type "+ Log.class+ " and static",iae.getMessage());
    }
class TestValidateClass4 {
      @SuppressWarnings("unused") private Object _targetLocator;
    }
    try {
      IntrabandProxyUtil.validate(_classLoader,TestValidateClass4.class,true);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
      Field field=TestValidateClass4.class.getDeclaredField("_targetLocator");
      Assert.assertEquals("Field " + field + " is expected to be of type "+ TargetLocator.class+ " and not static",iae.getMessage());
    }
  }
 else {
class TestValidateClass5 {
      @SuppressWarnings("unused") int _proxyType=0;
    }
    try {
      IntrabandProxyUtil.validate(_classLoader,TestValidateClass5.class,false);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
      Field field=TestValidateClass5.class.getDeclaredField("_proxyType");
      Assert.assertEquals("Field " + field + " is expected to be of type "+ byte.class+ " and static",iae.getMessage());
    }
class TestValidateClass6 {
      @SuppressWarnings("unused") private Object _id;
    }
    try {
      IntrabandProxyUtil.validate(_classLoader,TestValidateClass6.class,false);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
      Field field=TestValidateClass6.class.getDeclaredField("_id");
      Assert.assertEquals("Field " + field + " is expected to be of type "+ String.class+ " and not static",iae.getMessage());
    }
class TestValidateClass7 {
      @SuppressWarnings("unused") private Object _intraband;
    }
    try {
      IntrabandProxyUtil.validate(_classLoader,TestValidateClass7.class,false);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
      Field field=TestValidateClass7.class.getDeclaredField("_intraband");
      Assert.assertEquals("Field " + field + " is expected to be of type "+ Intraband.class+ " and not static",iae.getMessage());
    }
class TestValidateClass8 {
      @SuppressWarnings("unused") private Object _registrationReference;
    }
    try {
      IntrabandProxyUtil.validate(_classLoader,TestValidateClass8.class,false);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
      Field field=TestValidateClass8.class.getDeclaredField("_registrationReference");
      Assert.assertEquals("Field " + field + " is expected to be of type "+ RegistrationReference.class+ " and not static",iae.getMessage());
    }
class TestValidateClass9 {
      @SuppressWarnings("unused") private Object _exceptionHandler;
    }
    try {
      IntrabandProxyUtil.validate(_classLoader,TestValidateClass9.class,false);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
      Field field=TestValidateClass9.class.getDeclaredField("_exceptionHandler");
      Assert.assertEquals("Field " + field + " is expected to be of type "+ ExceptionHandler.class+ " and not static",iae.getMessage());
    }
  }
  IntrabandProxyUtil.validate(_classLoader,TestValidateClass.class,skeletonOrStub);
}
