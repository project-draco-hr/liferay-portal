{
  long pk=nextLong();
  MBMailingList newMBMailingList=_persistence.create(pk);
  newMBMailingList.setUuid(randomString());
  newMBMailingList.setGroupId(nextLong());
  newMBMailingList.setCompanyId(nextLong());
  newMBMailingList.setUserId(nextLong());
  newMBMailingList.setUserName(randomString());
  newMBMailingList.setCreateDate(nextDate());
  newMBMailingList.setModifiedDate(nextDate());
  newMBMailingList.setCategoryId(nextLong());
  newMBMailingList.setEmailAddress(randomString());
  newMBMailingList.setInProtocol(randomString());
  newMBMailingList.setInServerName(randomString());
  newMBMailingList.setInServerPort(nextInt());
  newMBMailingList.setInUseSSL(randomBoolean());
  newMBMailingList.setInUserName(randomString());
  newMBMailingList.setInPassword(randomString());
  newMBMailingList.setInReadInterval(nextInt());
  newMBMailingList.setOutEmailAddress(randomString());
  newMBMailingList.setOutCustom(randomBoolean());
  newMBMailingList.setOutServerName(randomString());
  newMBMailingList.setOutServerPort(nextInt());
  newMBMailingList.setOutUseSSL(randomBoolean());
  newMBMailingList.setOutUserName(randomString());
  newMBMailingList.setOutPassword(randomString());
  newMBMailingList.setActive(randomBoolean());
  _persistence.update(newMBMailingList,false);
  MBMailingList existingMBMailingList=_persistence.findByPrimaryKey(newMBMailingList.getPrimaryKey());
  assertEquals(existingMBMailingList.getUuid(),newMBMailingList.getUuid());
  assertEquals(existingMBMailingList.getMailingListId(),newMBMailingList.getMailingListId());
  assertEquals(existingMBMailingList.getGroupId(),newMBMailingList.getGroupId());
  assertEquals(existingMBMailingList.getCompanyId(),newMBMailingList.getCompanyId());
  assertEquals(existingMBMailingList.getUserId(),newMBMailingList.getUserId());
  assertEquals(existingMBMailingList.getUserName(),newMBMailingList.getUserName());
  assertEquals(existingMBMailingList.getCreateDate(),newMBMailingList.getCreateDate());
  assertEquals(existingMBMailingList.getModifiedDate(),newMBMailingList.getModifiedDate());
  assertEquals(existingMBMailingList.getCategoryId(),newMBMailingList.getCategoryId());
  assertEquals(existingMBMailingList.getEmailAddress(),newMBMailingList.getEmailAddress());
  assertEquals(existingMBMailingList.getInProtocol(),newMBMailingList.getInProtocol());
  assertEquals(existingMBMailingList.getInServerName(),newMBMailingList.getInServerName());
  assertEquals(existingMBMailingList.getInServerPort(),newMBMailingList.getInServerPort());
  assertEquals(existingMBMailingList.getInUseSSL(),newMBMailingList.getInUseSSL());
  assertEquals(existingMBMailingList.getInUserName(),newMBMailingList.getInUserName());
  assertEquals(existingMBMailingList.getInPassword(),newMBMailingList.getInPassword());
  assertEquals(existingMBMailingList.getInReadInterval(),newMBMailingList.getInReadInterval());
  assertEquals(existingMBMailingList.getOutEmailAddress(),newMBMailingList.getOutEmailAddress());
  assertEquals(existingMBMailingList.getOutCustom(),newMBMailingList.getOutCustom());
  assertEquals(existingMBMailingList.getOutServerName(),newMBMailingList.getOutServerName());
  assertEquals(existingMBMailingList.getOutServerPort(),newMBMailingList.getOutServerPort());
  assertEquals(existingMBMailingList.getOutUseSSL(),newMBMailingList.getOutUseSSL());
  assertEquals(existingMBMailingList.getOutUserName(),newMBMailingList.getOutUserName());
  assertEquals(existingMBMailingList.getOutPassword(),newMBMailingList.getOutPassword());
  assertEquals(existingMBMailingList.getActive(),newMBMailingList.getActive());
}
