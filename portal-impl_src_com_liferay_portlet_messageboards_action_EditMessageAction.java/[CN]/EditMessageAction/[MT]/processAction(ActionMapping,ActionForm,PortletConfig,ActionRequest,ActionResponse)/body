{
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  try {
    MBMessage message=null;
    if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) {
      message=updateMessage(actionRequest,actionResponse);
    }
 else     if (cmd.equals(Constants.DELETE)) {
      deleteMessage(actionRequest);
    }
 else     if (cmd.equals(Constants.LOCK)) {
      lockThread(actionRequest);
    }
 else     if (cmd.equals(Constants.SUBSCRIBE)) {
      subscribeMessage(actionRequest);
    }
 else     if (cmd.equals(Constants.UNLOCK)) {
      unlockThread(actionRequest);
    }
 else     if (cmd.equals(Constants.UNSUBSCRIBE)) {
      unsubscribeMessage(actionRequest);
    }
    if (Validator.isNotNull(cmd)) {
      String redirect=ParamUtil.getString(actionRequest,"redirect");
      int workflowAction=ParamUtil.getInteger(actionRequest,"workflowAction",WorkflowConstants.ACTION_PUBLISH);
      if ((message != null) && (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT)) {
        redirect=getSaveAndContinueRedirect(actionResponse,message);
      }
      sendRedirect(actionRequest,actionResponse,redirect);
    }
  }
 catch (  Exception e) {
    if (e instanceof NoSuchMessageException || e instanceof PrincipalException || e instanceof RequiredMessageException) {
      SessionErrors.add(actionRequest,e.getClass().getName());
      setForward(actionRequest,"portlet.message_boards.error");
    }
 else     if (e instanceof CaptchaTextException || e instanceof FileNameException || e instanceof FileSizeException|| e instanceof LockedThreadException|| e instanceof MessageBodyException|| e instanceof MessageSubjectException) {
      SessionErrors.add(actionRequest,e.getClass().getName());
    }
 else     if (e instanceof AssetTagException) {
      SessionErrors.add(actionRequest,e.getClass().getName(),e);
    }
 else {
      throw e;
    }
  }
}
