{
  String pollerRequest=ParamUtil.getString(request,"pollerRequest");
  if (Validator.isNull(pollerRequest)) {
    return null;
  }
  pollerRequest=StringUtil.replace(pollerRequest,new String[]{StringPool.OPEN_CURLY_BRACE,StringPool.CLOSE_CURLY_BRACE},new String[]{_OPEN_HASH_MAP_WRAPPER,StringPool.DOUBLE_CLOSE_CURLY_BRACE});
  JSONArray pollerResponseEntriesJSON=JSONFactoryUtil.createJSONArray();
  Map<String,Object>[] pollerRequestEntries=(Map<String,Object>[])JSONFactoryUtil.deserialize(pollerRequest);
  for (int i=0; i < pollerRequestEntries.length; i++) {
    Map<String,Object> pollerRequestEntry=pollerRequestEntries[i];
    PollerHeader pollerHeader=null;
    if (i == 0) {
      long companyId=GetterUtil.getLong(String.valueOf(pollerRequestEntry.get("companyId")));
      String userIdString=GetterUtil.getString(String.valueOf(pollerRequestEntry.get("userId")));
      long timestamp=GetterUtil.getLong(String.valueOf(pollerRequestEntry.get("timestamp")));
      long browserKey=GetterUtil.getLong(String.valueOf(pollerRequestEntry.get("browserKey")));
      boolean startPolling=GetterUtil.getBoolean(String.valueOf(pollerRequestEntry.get("startPolling")));
      long userId=getUserId(companyId,userIdString);
      if (userId == 0) {
        return null;
      }
      pollerHeader=new PollerHeader(userId,timestamp,browserKey);
      boolean suspendPolling=false;
      if (startPolling) {
        BrowserTrackerLocalServiceUtil.updateBrowserTracker(userId,browserKey);
      }
 else {
        BrowserTracker browserTracker=BrowserTrackerLocalServiceUtil.getBrowserTracker(userId,browserKey);
        if (browserTracker.getBrowserKey() != browserKey) {
          suspendPolling=true;
        }
      }
      JSONObject pollerResponseEntryJSON=JSONFactoryUtil.createJSONObject();
      pollerResponseEntryJSON.put("userId",userId);
      pollerResponseEntryJSON.put("timestamp",timestamp);
      pollerResponseEntryJSON.put("suspendPolling",suspendPolling);
      pollerResponseEntriesJSON.put(pollerResponseEntryJSON);
    }
 else {
      String portletId=(String)pollerRequestEntry.get("portletId");
      Map<String,Object> oldParameterMap=(Map<String,Object>)pollerRequestEntry.get("data");
      Map<String,String> newParameterMap=new HashMap<String,String>();
      for (      Map.Entry<String,Object> entry : oldParameterMap.entrySet()) {
        newParameterMap.put(entry.getKey(),String.valueOf(entry.getValue()));
      }
      JSONObject pollerResponseEntryJSON=null;
      try {
        pollerResponseEntryJSON=process(pollerHeader,portletId,newParameterMap);
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
      if (pollerResponseEntryJSON != null) {
        pollerResponseEntriesJSON.put(pollerResponseEntryJSON);
      }
    }
  }
  return pollerResponseEntriesJSON.toString();
}
