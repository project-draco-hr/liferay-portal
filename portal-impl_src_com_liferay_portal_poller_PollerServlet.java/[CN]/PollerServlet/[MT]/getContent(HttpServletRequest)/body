{
  String pollerRequest=getPollerRequest(request);
  if (Validator.isNull(pollerRequest)) {
    return null;
  }
  Map<String,Object>[] pollerRequestChunks=(Map<String,Object>[])JSONFactoryUtil.deserialize(pollerRequest);
  PollerHeader pollerHeader=getPollerHeader(pollerRequestChunks);
  if (pollerHeader == null) {
    return null;
  }
  boolean doReceive=isDoReceive(request);
  JSONArray pollerResponseChunksJSON=null;
  Set<String> portletIdsWithChunks=null;
  if (doReceive) {
    pollerResponseChunksJSON=JSONFactoryUtil.createJSONArray();
    portletIdsWithChunks=new HashSet<String>();
    boolean suspendPolling=false;
    if (pollerHeader.isStartPolling()) {
      BrowserTrackerLocalServiceUtil.updateBrowserTracker(pollerHeader.getUserId(),pollerHeader.getBrowserKey());
    }
 else {
      BrowserTracker browserTracker=BrowserTrackerLocalServiceUtil.getBrowserTracker(pollerHeader.getUserId(),pollerHeader.getBrowserKey());
      if (browserTracker.getBrowserKey() != pollerHeader.getBrowserKey()) {
        suspendPolling=true;
      }
    }
    JSONObject pollerResponseChunkJSON=JSONFactoryUtil.createJSONObject();
    pollerResponseChunkJSON.put("userId",pollerHeader.getUserId());
    pollerResponseChunkJSON.put("initialRequest",pollerHeader.isInitialRequest());
    pollerResponseChunkJSON.put("suspendPolling",suspendPolling);
    pollerResponseChunksJSON.put(pollerResponseChunkJSON);
  }
  PollerRequestManager pollerRequestManager=new PollerRequestManager(pollerResponseChunksJSON,DestinationNames.POLLER,DestinationNames.POLLER_RESPONSE,_timeout);
  for (int i=1; i < pollerRequestChunks.length; i++) {
    Map<String,Object> pollerRequestChunk=pollerRequestChunks[i];
    String portletId=(String)pollerRequestChunk.get("portletId");
    Map<String,String> parameterMap=getData(pollerRequestChunk);
    String chunkId=(String)pollerRequestChunk.get("chunkId");
    try {
      PollerRequest pollerRequestObj=process(doReceive,portletIdsWithChunks,pollerHeader,portletId,parameterMap,chunkId);
      pollerRequestManager.addPollerRequest(pollerRequestObj);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  pollerRequestManager.processRequests();
  if (!doReceive) {
    return StringPool.BLANK;
  }
  pollerRequestManager.clearRequests();
  for (  String portletId : pollerHeader.getPortletIds()) {
    if (portletIdsWithChunks.contains(portletId)) {
      continue;
    }
    try {
      PollerRequest pollerRequestObj=process(doReceive,portletIdsWithChunks,pollerHeader,portletId,new HashMap<String,String>(),null);
      pollerRequestManager.addPollerRequest(pollerRequestObj);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  pollerRequestManager.processRequests();
  pollerResponseChunksJSON=pollerRequestManager.getPollerResponse();
  return pollerResponseChunksJSON.toString();
}
