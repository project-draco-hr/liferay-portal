{
  long pk=nextLong();
  SocialEquityUser newSocialEquityUser=_persistence.create(pk);
  newSocialEquityUser.setCompanyId(nextLong());
  newSocialEquityUser.setUserId(nextLong());
  newSocialEquityUser.setContributionEquity(nextDouble());
  newSocialEquityUser.setParticipationK(nextDouble());
  newSocialEquityUser.setParticipationB(nextDouble());
  newSocialEquityUser.setParticipationEquity(nextDouble());
  newSocialEquityUser.setPersonalEquity(nextDouble());
  _persistence.update(newSocialEquityUser,false);
  SocialEquityUser existingSocialEquityUser=_persistence.findByPrimaryKey(newSocialEquityUser.getPrimaryKey());
  assertEquals(existingSocialEquityUser.getEquityUserId(),newSocialEquityUser.getEquityUserId());
  assertEquals(existingSocialEquityUser.getCompanyId(),newSocialEquityUser.getCompanyId());
  assertEquals(existingSocialEquityUser.getUserId(),newSocialEquityUser.getUserId());
  assertEquals(existingSocialEquityUser.getContributionEquity(),newSocialEquityUser.getContributionEquity());
  assertEquals(existingSocialEquityUser.getParticipationK(),newSocialEquityUser.getParticipationK());
  assertEquals(existingSocialEquityUser.getParticipationB(),newSocialEquityUser.getParticipationB());
  assertEquals(existingSocialEquityUser.getParticipationEquity(),newSocialEquityUser.getParticipationEquity());
  assertEquals(existingSocialEquityUser.getPersonalEquity(),newSocialEquityUser.getPersonalEquity());
}
