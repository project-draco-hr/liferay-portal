{
  if (_strictImportMode) {
    content=runRegexp(content,"\\{{2}Special:(.*?)\\}{2}",StringPool.BLANK);
    content=runRegexp(content,"\\{{2}(.*?)\\}{2}",StringPool.BLANK);
    content=runRegexp(content,"(?s)\\{{2}(.*?)\\}{2}",StringPool.BLANK);
  }
 else {
    content=runRegexp(content,"\\{{2}Special:(.*?)\\}{2}","{{{$1}}}\n");
    content=runRegexp(content,"\\{{2}(.*?)\\}{2}","{{{$1}}}");
    content=runRegexp(content,"([^\\{])(\\{{2})([^\\{])","$1\n{{{\n$3");
    content=runRegexp(content,"([^\\}])(\\}{2})([^\\}])","$1\n}}}\n$3");
  }
  Pattern pattern=Pattern.compile("^=([^=]+)=",Pattern.MULTILINE);
  Matcher matcher=pattern.matcher(content);
  if (matcher.find()) {
    content=runRegexp(content,"^===([^=]+)===","====$1====");
    content=runRegexp(content,"^==([^=]+)==","===$1===");
    content=runRegexp(content,"^=([^=]+)=","==$1==");
  }
  for (int i=0; i < _HTML_TAGS.length; i++) {
    content=content.replaceAll(_HTML_TAGS[i],StringPool.BLANK);
  }
  pattern=Pattern.compile("(\\[{2})(Image|File)(:)",Pattern.DOTALL);
  matcher=pattern.matcher(content);
  StringBuffer sb=new StringBuffer(content);
  int level=0;
  int offset=0;
  int originalLength=0;
  int prefixLength=0;
  while (matcher.find()) {
    level=0;
    prefixLength=matcher.end(2) - matcher.start(2);
    for (int i=matcher.start(0) + offset; i < sb.length() - 1; i++) {
      if ((sb.charAt(i) == '[') && (sb.charAt(i + 1) == '[')) {
        level++;
      }
 else       if ((sb.charAt(i) == ']') && (sb.charAt(i + 1) == ']')) {
        level--;
        if (level == 0) {
          originalLength=(i + 2) - (matcher.start(0) + offset);
          break;
        }
      }
    }
    int imageStartPos=matcher.end(3) + offset;
    int imageEndPos=matcher.start(2) + offset + originalLength - 4;
    String image="{{" + MediaWikiImporter.SHARED_IMAGES_TITLE + "/"+ StringUtil.toLowerCase(sb.substring(imageStartPos,imageEndPos))+ "}}";
    int imageLength=image.length();
    image=image.replaceAll("\\[{2}",StringPool.BLANK);
    image=image.replaceAll("\\]{2}",StringPool.BLANK);
    sb.replace(matcher.start(0) + offset,matcher.start(0) + originalLength + offset,image);
    offset+=MediaWikiImporter.SHARED_IMAGES_TITLE.length() - prefixLength - (imageLength - image.length());
  }
  content=sb.toString();
  pattern=Pattern.compile("\\{\\|(.*?)\\|\\}",Pattern.DOTALL);
  matcher=pattern.matcher(content);
  sb=new StringBuffer(content);
  String mediaWikiTable=null;
  offset=0;
  originalLength=0;
  while (matcher.find()) {
    mediaWikiTable=sb.substring(matcher.start(1) + offset,matcher.end(1) + offset);
    originalLength=mediaWikiTable.length() + 4;
    mediaWikiTable=mediaWikiTable.replaceAll("class=(.*?)[|\n\r]",StringPool.BLANK);
    mediaWikiTable=mediaWikiTable.replaceAll("(\\|\\-)(.*)","$1");
    mediaWikiTable=mediaWikiTable.replaceAll("\\|\\+(.*)","===$1===");
    mediaWikiTable=mediaWikiTable.replaceAll("(?m)^!(.+)","|=$1|");
    mediaWikiTable=mediaWikiTable.replaceAll("[\n\r]",StringPool.BLANK);
    mediaWikiTable=mediaWikiTable.replaceAll("\\|\\-","\n\r");
    mediaWikiTable=mediaWikiTable.replaceAll("\\|\\|","|");
    mediaWikiTable=mediaWikiTable.replaceAll("/{4}",StringPool.BLANK);
    sb.replace(matcher.start(0) + offset,matcher.start(0) + originalLength + offset,mediaWikiTable);
    offset=mediaWikiTable.length() - originalLength;
  }
  content=sb.toString();
  content=runRegexp(content,"/{2}(\\{{3})","$1");
  content=runRegexp(content,"(\\}{3})/{2}","$1");
  pattern=Pattern.compile("\\[{2}([^\\]]*)\\]{2}",Pattern.DOTALL);
  matcher=pattern.matcher(content);
  sb=new StringBuffer(content);
  while (matcher.find()) {
    String link=matcher.group(1).replace(StringPool.UNDERLINE,StringPool.SPACE);
    sb.replace(matcher.start(1),matcher.end(1),link);
  }
  return TABLE_OF_CONTENTS + super.postProcess(sb.toString());
}
