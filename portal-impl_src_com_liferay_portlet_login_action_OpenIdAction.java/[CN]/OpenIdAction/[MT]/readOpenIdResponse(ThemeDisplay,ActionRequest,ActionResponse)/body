{
  HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
  HttpSession session=request.getSession();
  ConsumerManager manager=OpenIdUtil.getConsumerManager();
  ParameterList params=new ParameterList(actionRequest.getParameterMap());
  DiscoveryInformation discovered=(DiscoveryInformation)session.getAttribute(WebKeys.OPEN_ID_DISCO);
  if (discovered == null) {
    return null;
  }
  String receivingUrl=ParamUtil.getString(actionRequest,"openid.return_to");
  VerificationResult verification=manager.verify(receivingUrl,params,discovered);
  Identifier verified=verification.getVerifiedId();
  if (verified == null) {
    return null;
  }
  AuthSuccess authSuccess=(AuthSuccess)verification.getAuthResponse();
  String firstName=null;
  String lastName=null;
  String emailAddress=null;
  if (authSuccess.hasExtension(SRegMessage.OPENID_NS_SREG)) {
    MessageExtension ext=authSuccess.getExtension(SRegMessage.OPENID_NS_SREG);
    if (ext instanceof SRegResponse) {
      SRegResponse sregResp=(SRegResponse)ext;
      String fullName=GetterUtil.getString(sregResp.getAttributeValue(_OPEN_ID_ATTR_FULLNAME));
      String[] names=splitName(fullName);
      if (names != null) {
        firstName=names[0];
        lastName=names[1];
      }
      emailAddress=sregResp.getAttributeValue(_OPEN_ID_ATTR_EMAIL);
    }
  }
  if (authSuccess.hasExtension(AxMessage.OPENID_NS_AX)) {
    MessageExtension ext=authSuccess.getExtension(AxMessage.OPENID_NS_AX);
    if (ext instanceof FetchResponse) {
      FetchResponse fetchResp=(FetchResponse)ext;
      URL endpoint=discovered.getOPEndpoint();
      String openIdHost=getOpenIdHostType(endpoint);
      String[] openIdAXTypes=PropsUtil.getArray(PropsKeys.OPEN_ID_AX_TYPES,new Filter(openIdHost));
      for (      String openIdAXType : openIdAXTypes) {
        if (openIdAXType.equals(_OPEN_ID_ATTR_EMAIL)) {
          if (Validator.isNull(emailAddress)) {
            emailAddress=getFirstValue(fetchResp.getAttributeValues(_OPEN_ID_ATTR_EMAIL));
          }
        }
 else         if (openIdAXType.equals(_OPEN_ID_ATTR_FIRSTNAME)) {
          if (Validator.isNull(firstName)) {
            firstName=getFirstValue(fetchResp.getAttributeValues(_OPEN_ID_ATTR_FIRSTNAME));
          }
        }
 else         if (openIdAXType.equals(_OPEN_ID_ATTR_FULLNAME)) {
          String fullName=fetchResp.getAttributeValue(_OPEN_ID_ATTR_FULLNAME);
          String[] names=splitName(fullName);
          if (names != null) {
            if (Validator.isNull(firstName)) {
              firstName=names[0];
            }
            if (Validator.isNull(lastName)) {
              lastName=names[1];
            }
          }
        }
 else         if (openIdAXType.equals(_OPEN_ID_ATTR_LASTNAME)) {
          if (Validator.isNull(lastName)) {
            lastName=getFirstValue(fetchResp.getAttributeValues(_OPEN_ID_ATTR_LASTNAME));
          }
        }
      }
    }
  }
  String openId=OpenIdUtil.normalize(authSuccess.getIdentity());
  User user=null;
  try {
    user=UserLocalServiceUtil.getUserByOpenId(themeDisplay.getCompanyId(),openId);
  }
 catch (  NoSuchUserException nsue) {
    if (Validator.isNull(firstName) || Validator.isNull(lastName) || Validator.isNull(emailAddress)) {
      SessionMessages.add(request,"missingOpenIdUserInformation");
      if (_log.isInfoEnabled()) {
        _log.info("The OpenID provider did not send the required " + "attributes to create an account");
      }
      String createAccountURL=PortalUtil.getCreateAccountURL(request,themeDisplay);
      createAccountURL=HttpUtil.setParameter(createAccountURL,"openId",openId);
      session.setAttribute(WebKeys.OPEN_ID_LOGIN_PENDING,Boolean.TRUE);
      return createAccountURL;
    }
    long creatorUserId=0;
    long companyId=themeDisplay.getCompanyId();
    boolean autoPassword=false;
    String password1=PwdGenerator.getPassword();
    String password2=password1;
    boolean autoScreenName=true;
    String screenName=StringPool.BLANK;
    long facebookId=0;
    Locale locale=themeDisplay.getLocale();
    String middleName=StringPool.BLANK;
    int prefixId=0;
    int suffixId=0;
    boolean male=true;
    int birthdayMonth=Calendar.JANUARY;
    int birthdayDay=1;
    int birthdayYear=1970;
    String jobTitle=StringPool.BLANK;
    long[] groupIds=null;
    long[] organizationIds=null;
    long[] roleIds=null;
    long[] userGroupIds=null;
    boolean sendEmail=false;
    ServiceContext serviceContext=new ServiceContext();
    user=UserLocalServiceUtil.addUser(creatorUserId,companyId,autoPassword,password1,password2,autoScreenName,screenName,emailAddress,facebookId,openId,locale,firstName,middleName,lastName,prefixId,suffixId,male,birthdayMonth,birthdayDay,birthdayYear,jobTitle,groupIds,organizationIds,roleIds,userGroupIds,sendEmail,serviceContext);
  }
  session.setAttribute(WebKeys.OPEN_ID_LOGIN,new Long(user.getUserId()));
  return null;
}
