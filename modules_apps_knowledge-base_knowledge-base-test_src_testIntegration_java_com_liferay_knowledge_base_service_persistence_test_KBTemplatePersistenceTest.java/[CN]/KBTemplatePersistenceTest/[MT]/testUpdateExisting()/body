{
  long pk=RandomTestUtil.nextLong();
  KBTemplate newKBTemplate=_persistence.create(pk);
  newKBTemplate.setUuid(RandomTestUtil.randomString());
  newKBTemplate.setGroupId(RandomTestUtil.nextLong());
  newKBTemplate.setCompanyId(RandomTestUtil.nextLong());
  newKBTemplate.setUserId(RandomTestUtil.nextLong());
  newKBTemplate.setUserName(RandomTestUtil.randomString());
  newKBTemplate.setCreateDate(RandomTestUtil.nextDate());
  newKBTemplate.setModifiedDate(RandomTestUtil.nextDate());
  newKBTemplate.setTitle(RandomTestUtil.randomString());
  newKBTemplate.setContent(RandomTestUtil.randomString());
  newKBTemplate.setLastPublishDate(RandomTestUtil.nextDate());
  _kbTemplates.add(_persistence.update(newKBTemplate));
  KBTemplate existingKBTemplate=_persistence.findByPrimaryKey(newKBTemplate.getPrimaryKey());
  Assert.assertEquals(existingKBTemplate.getUuid(),newKBTemplate.getUuid());
  Assert.assertEquals(existingKBTemplate.getKbTemplateId(),newKBTemplate.getKbTemplateId());
  Assert.assertEquals(existingKBTemplate.getGroupId(),newKBTemplate.getGroupId());
  Assert.assertEquals(existingKBTemplate.getCompanyId(),newKBTemplate.getCompanyId());
  Assert.assertEquals(existingKBTemplate.getUserId(),newKBTemplate.getUserId());
  Assert.assertEquals(existingKBTemplate.getUserName(),newKBTemplate.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingKBTemplate.getCreateDate()),Time.getShortTimestamp(newKBTemplate.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKBTemplate.getModifiedDate()),Time.getShortTimestamp(newKBTemplate.getModifiedDate()));
  Assert.assertEquals(existingKBTemplate.getTitle(),newKBTemplate.getTitle());
  Assert.assertEquals(existingKBTemplate.getContent(),newKBTemplate.getContent());
  Assert.assertEquals(Time.getShortTimestamp(existingKBTemplate.getLastPublishDate()),Time.getShortTimestamp(newKBTemplate.getLastPublishDate()));
}
