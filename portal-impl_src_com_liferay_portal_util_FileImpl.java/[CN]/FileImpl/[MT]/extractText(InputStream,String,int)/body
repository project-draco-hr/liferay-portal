{
  if (maxStringLength == 0) {
    return StringPool.BLANK;
  }
  String text=null;
  ClassLoader portalClassLoader=ClassLoaderUtil.getPortalClassLoader();
  ClassLoader contextClassLoader=ClassLoaderUtil.getContextClassLoader();
  try {
    if (contextClassLoader != portalClassLoader) {
      ClassLoaderUtil.setContextClassLoader(portalClassLoader);
    }
    Tika tika=new Tika();
    tika.setMaxStringLength(maxStringLength);
    boolean forkProcess=false;
    if (PropsValues.TEXT_EXTRACTION_FORK_PROCESS_ENABLED) {
      String mimeType=tika.detect(is);
      if (ArrayUtil.contains(PropsValues.TEXT_EXTRACTION_FORK_PROCESS_MIME_TYPES,mimeType)) {
        forkProcess=true;
      }
    }
    if (forkProcess) {
      ProcessChannel<String> processChannel=ProcessExecutorUtil.execute(ClassPathUtil.getPortalProcessConfig(),new ExtractTextProcessCallable(getBytes(is)));
      Future<String> future=processChannel.getProcessNoticeableFuture();
      text=future.get();
    }
 else {
      text=tika.parseToString(is);
    }
  }
 catch (  Throwable t) {
    Throwable throwable=ExceptionUtils.getRootCause(t);
    if ((throwable instanceof CryptographyException) || (throwable instanceof EncryptedDocumentException) || (throwable instanceof UnsupportedZipFeatureException)) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to extract text from an encrypted file " + fileName,t);
      }
    }
 else     if (t instanceof TikaException) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to extract text from " + fileName,t);
      }
    }
 else {
      _log.error(t,t);
    }
  }
 finally {
    if (contextClassLoader != portalClassLoader) {
      ClassLoaderUtil.setContextClassLoader(contextClassLoader);
    }
  }
  if (_log.isInfoEnabled()) {
    if (text == null) {
      _log.info("Text extraction failed for " + fileName);
    }
 else {
      _log.info("Text was extracted for " + fileName);
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Extractor returned text:\n\n" + text);
  }
  if (text == null) {
    text=StringPool.BLANK;
  }
  return text;
}
