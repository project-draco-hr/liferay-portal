{
  long pk=ServiceTestUtil.nextLong();
  Company newCompany=_persistence.create(pk);
  newCompany.setAccountId(ServiceTestUtil.nextLong());
  newCompany.setWebId(ServiceTestUtil.randomString());
  newCompany.setKey(ServiceTestUtil.randomString());
  newCompany.setMx(ServiceTestUtil.randomString());
  newCompany.setHomeURL(ServiceTestUtil.randomString());
  newCompany.setLogoId(ServiceTestUtil.nextLong());
  newCompany.setSystem(ServiceTestUtil.randomBoolean());
  newCompany.setMaxUsers(ServiceTestUtil.nextInt());
  newCompany.setActive(ServiceTestUtil.randomBoolean());
  newCompany.setMvccVersion(ServiceTestUtil.nextLong());
  _persistence.update(newCompany);
  Company existingCompany=_persistence.findByPrimaryKey(newCompany.getPrimaryKey());
  Assert.assertEquals(existingCompany.getCompanyId(),newCompany.getCompanyId());
  Assert.assertEquals(existingCompany.getAccountId(),newCompany.getAccountId());
  Assert.assertEquals(existingCompany.getWebId(),newCompany.getWebId());
  Assert.assertEquals(existingCompany.getKey(),newCompany.getKey());
  Assert.assertEquals(existingCompany.getMx(),newCompany.getMx());
  Assert.assertEquals(existingCompany.getHomeURL(),newCompany.getHomeURL());
  Assert.assertEquals(existingCompany.getLogoId(),newCompany.getLogoId());
  Assert.assertEquals(existingCompany.getSystem(),newCompany.getSystem());
  Assert.assertEquals(existingCompany.getMaxUsers(),newCompany.getMaxUsers());
  Assert.assertEquals(existingCompany.getActive(),newCompany.getActive());
  Assert.assertEquals(existingCompany.getMvccVersion(),newCompany.getMvccVersion());
}
