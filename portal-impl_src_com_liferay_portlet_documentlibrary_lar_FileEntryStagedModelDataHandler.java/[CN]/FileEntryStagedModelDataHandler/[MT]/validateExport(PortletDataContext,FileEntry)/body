{
  if ((fileEntry.getGroupId() != portletDataContext.getGroupId()) && (fileEntry.getGroupId() != portletDataContext.getScopeGroupId())) {
    PortletDataException pde=new PortletDataException(PortletDataException.INVALID_GROUP);
    pde.setStagedModel(fileEntry);
    throw pde;
  }
  try {
    FileVersion fileVersion=fileEntry.getFileVersion();
    if (!ArrayUtil.contains(getExportableStatuses(),fileVersion.getStatus())) {
      throw new PortletDataException(PortletDataException.STATUS_UNAVAILABLE);
    }
  }
 catch (  PortletDataException pde) {
    throw pde;
  }
catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to check workflow status for " + DLFileEntry.class.getName());
    }
  }
  TrashHandler trashHandler=TrashHandlerRegistryUtil.getTrashHandler(DLFileEntry.class.getName());
  if (trashHandler != null) {
    try {
      if (trashHandler.isInTrash(fileEntry.getFileEntryId()) || trashHandler.isInTrashContainer(fileEntry.getFileEntryId())) {
        throw new PortletDataException(PortletDataException.STATUS_IN_TRASH);
      }
    }
 catch (    PortletDataException pde) {
      throw pde;
    }
catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to check trash status for " + DLFileEntry.class.getName());
      }
    }
  }
}
