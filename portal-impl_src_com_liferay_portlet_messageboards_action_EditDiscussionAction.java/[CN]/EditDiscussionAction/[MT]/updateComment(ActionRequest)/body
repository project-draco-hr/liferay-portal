{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String className=ParamUtil.getString(actionRequest,"className");
  long classPK=ParamUtil.getLong(actionRequest,"classPK");
  String permissionClassName=ParamUtil.getString(actionRequest,"permissionClassName");
  long permissionClassPK=ParamUtil.getLong(actionRequest,"permissionClassPK");
  long permissionOwnerId=ParamUtil.getLong(actionRequest,"permissionOwnerId");
  long commentId=ParamUtil.getLong(actionRequest,"commentId");
  long parentCommentId=ParamUtil.getLong(actionRequest,"parentCommentId");
  String subject=ParamUtil.getString(actionRequest,"subject");
  String body=ParamUtil.getString(actionRequest,"body");
  Function<String,ServiceContext> serviceContextFunction=new ServiceContextFunction(actionRequest);
  DiscussionPermission discussionPermission=CommentManagerUtil.getDiscussionPermission(themeDisplay.getPermissionChecker());
  if (commentId <= 0) {
    User user=null;
    if (themeDisplay.isSignedIn()) {
      user=themeDisplay.getUser();
    }
 else {
      String emailAddress=ParamUtil.getString(actionRequest,"emailAddress");
      user=UserLocalServiceUtil.fetchUserByEmailAddress(themeDisplay.getCompanyId(),emailAddress);
      if ((user == null) || (user.getStatus() != WorkflowConstants.STATUS_INCOMPLETE)) {
        return 0;
      }
    }
    String name=PrincipalThreadLocal.getName();
    PrincipalThreadLocal.setName(user.getUserId());
    try {
      discussionPermission.checkAddPermission(themeDisplay.getCompanyId(),themeDisplay.getScopeGroupId(),permissionClassName,permissionClassPK,permissionOwnerId);
      commentId=CommentManagerUtil.addComment(user.getUserId(),themeDisplay.getScopeGroupId(),className,classPK,user.getFullName(),parentCommentId,subject,body,serviceContextFunction);
    }
  finally {
      PrincipalThreadLocal.setName(name);
    }
  }
 else {
    discussionPermission.checkUpdatePermission(themeDisplay.getCompanyId(),themeDisplay.getScopeGroupId(),permissionClassName,permissionClassPK,commentId,permissionOwnerId);
    commentId=CommentManagerUtil.updateComment(className,classPK,permissionClassName,permissionClassPK,permissionOwnerId,commentId,subject,body,serviceContextFunction);
  }
  boolean subscribe=ParamUtil.getBoolean(actionRequest,"subscribe");
  if (subscribe) {
    CommentManagerUtil.subscribeDiscussion(themeDisplay.getUserId(),themeDisplay.getScopeGroupId(),className,classPK);
  }
  return commentId;
}
