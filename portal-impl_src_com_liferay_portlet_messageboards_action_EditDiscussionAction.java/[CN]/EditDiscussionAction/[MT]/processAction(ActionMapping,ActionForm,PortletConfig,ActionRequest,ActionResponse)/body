{
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  try {
    String redirect=PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest,"redirect"));
    if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) {
      long commentId=updateMessage(actionRequest);
      boolean ajax=ParamUtil.getBoolean(actionRequest,"ajax");
      if (ajax) {
        String randomNamespace=ParamUtil.getString(actionRequest,"randomNamespace");
        JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
        jsonObject.put("commentId",commentId);
        jsonObject.put("randomNamespace",randomNamespace);
        writeJSON(actionRequest,actionResponse,jsonObject);
        return;
      }
    }
 else     if (cmd.equals(Constants.DELETE)) {
      deleteMessage(actionRequest);
    }
 else     if (cmd.equals(Constants.SUBSCRIBE_TO_COMMENTS)) {
      subscribeToComments(actionRequest,true);
    }
 else     if (cmd.equals(Constants.UNSUBSCRIBE_FROM_COMMENTS)) {
      subscribeToComments(actionRequest,false);
    }
    sendRedirect(actionRequest,actionResponse,redirect);
  }
 catch (  Exception e) {
    if (e instanceof DiscussionMaxCommentsException || e instanceof MessageBodyException || e instanceof NoSuchMessageException|| e instanceof PrincipalException|| e instanceof RequiredMessageException) {
      JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
      jsonObject.putException(e);
      writeJSON(actionRequest,actionResponse,jsonObject);
    }
 else {
      throw e;
    }
  }
}
