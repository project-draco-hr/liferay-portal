{
  RPCResponse<String> rpcResponse=new RPCResponse<String>(_id,result,processException);
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(RPCResponse.class.getName(),Level.SEVERE);
  try {
    rpcResponse.execute(_embeddedChannel);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    if (processException != null) {
      Assert.assertEquals("Unable to place exception because no future exists with " + "ID " + _id,logRecord.getMessage());
      Assert.assertSame(processException,logRecord.getThrown());
    }
 else {
      Assert.assertEquals("Unable to place result " + result + " because no future exists with ID "+ _id,logRecord.getMessage());
    }
  }
  finally {
    captureHandler.close();
  }
  AsyncBroker<Long,Serializable> asyncBroker=NettyChannelAttributes.getAsyncBroker(_embeddedChannel);
  NoticeableFuture<Serializable> noticeableFuture=asyncBroker.post(_id);
  rpcResponse.execute(_embeddedChannel);
  if (processException != null) {
    try {
      noticeableFuture.get();
    }
 catch (    ExecutionException ee) {
      Assert.assertSame(processException,ee.getCause());
    }
  }
 else {
    Assert.assertSame(result,noticeableFuture.get());
  }
}
