{
  _nodeDir=new Callable<File>(){
    @Override public File call() throws Exception {
      return new File(project.getBuildDir(),"node");
    }
  }
;
  _nodeUrl=new Callable<String>(){
    @Override public String call() throws Exception {
      String nodeVersion=getNodeVersion();
      if (Validator.isNull(nodeVersion)) {
        return null;
      }
      StringBuilder sb=new StringBuilder();
      sb.append("http://nodejs.org/dist/v");
      sb.append(nodeVersion);
      sb.append('/');
      String bitmode=OSDetector.getBitmode();
      if (OSDetector.isWindows()) {
        if (bitmode.equals("64")) {
          sb.append("x64/");
        }
        sb.append("node.exe");
      }
 else {
        sb.append("/node-v");
        sb.append(nodeVersion);
        sb.append('-');
        String os="linux";
        if (OSDetector.isApple()) {
          os="darwin";
        }
        sb.append(os);
        sb.append("-x");
        if (bitmode.equals("32")) {
          bitmode="86";
        }
        sb.append(bitmode);
        sb.append(".tar.gz");
      }
      return sb.toString();
    }
  }
;
  _npmUrl=new Callable<String>(){
    @Override public String call() throws Exception {
      String npmVersion=getNpmVersion();
      if (Validator.isNull(npmVersion)) {
        return null;
      }
      return "http://nodejs.org/dist/npm/npm-" + npmVersion + ".zip";
    }
  }
;
  _project=project;
  setNpmArgs("--cache",new Callable<String>(){
    @Override public String call() throws Exception {
      return FileUtil.getAbsolutePath(getNpmCacheDir());
    }
  }
);
}
