{
  int oldStatus=message.getStatus();
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  int status=WorkflowConstants.STATUS_DRAFT;
  if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_PUBLISH) {
    status=WorkflowConstants.STATUS_APPROVED;
  }
  message.setStatus(status);
  message.setStatusByUserId(userId);
  message.setStatusByUserName(user.getFullName());
  message.setStatusDate(serviceContext.getModifiedDate(now));
  mbMessagePersistence.update(message,false);
  MBThread thread=mbThreadPersistence.findByPrimaryKey(message.getThreadId());
  if ((thread.getRootMessageId() == message.getMessageId()) && (oldStatus != status)) {
    thread.setStatus(status);
    thread.setStatusByUserId(userId);
    thread.setStatusByUserName(user.getFullName());
    thread.setStatusDate(serviceContext.getModifiedDate(now));
  }
  if ((status == WorkflowConstants.STATUS_APPROVED) && (oldStatus != WorkflowConstants.STATUS_APPROVED)) {
    thread.setMessageCount(thread.getMessageCount() + 1);
    if (message.isAnonymous()) {
      thread.setLastPostByUserId(0);
    }
 else {
      thread.setLastPostByUserId(message.getUserId());
    }
    thread.setLastPostDate(serviceContext.getModifiedDate(now));
  }
  if ((status != WorkflowConstants.STATUS_APPROVED) && (oldStatus == WorkflowConstants.STATUS_APPROVED)) {
    thread.setMessageCount(thread.getMessageCount() - 1);
  }
  if (status != oldStatus) {
    mbThreadPersistence.update(thread,false);
  }
  MBCategory category=mbCategoryPersistence.findByPrimaryKey(thread.getCategoryId());
  if ((status == WorkflowConstants.STATUS_APPROVED) && (oldStatus != WorkflowConstants.STATUS_APPROVED)) {
    category.setMessageCount(category.getMessageCount() + 1);
    category.setLastPostDate(serviceContext.getModifiedDate(now));
    mbCategoryPersistence.update(category,false);
  }
  if ((status != WorkflowConstants.STATUS_APPROVED) && (oldStatus == WorkflowConstants.STATUS_APPROVED)) {
    category.setMessageCount(category.getMessageCount() - 1);
    mbCategoryPersistence.update(category,false);
  }
  if ((status == WorkflowConstants.STATUS_APPROVED) && (oldStatus != WorkflowConstants.STATUS_APPROVED)) {
    assetEntryLocalService.updateVisible(MBMessage.class.getName(),message.getMessageId(),true);
    if (reindex) {
      Indexer indexer=IndexerRegistryUtil.getIndexer(MBMessage.class);
      indexer.reindex(message);
    }
  }
  if ((status != WorkflowConstants.STATUS_APPROVED) && (oldStatus == WorkflowConstants.STATUS_APPROVED)) {
    assetEntryLocalService.updateVisible(MBMessage.class.getName(),message.getMessageId(),false);
  }
  if (!message.isDiscussion() && (status == WorkflowConstants.STATUS_APPROVED) && (oldStatus != WorkflowConstants.STATUS_APPROVED)) {
    mbStatsUserLocalService.updateStatsUser(message.getGroupId(),userId,serviceContext.getModifiedDate(now));
  }
  if (!message.isDiscussion() && !message.isAnonymous() && !user.isDefaultUser()&& (status == WorkflowConstants.STATUS_APPROVED)&& (oldStatus != WorkflowConstants.STATUS_APPROVED)) {
    int activityType=MBActivityKeys.ADD_MESSAGE;
    long receiverUserId=0;
    MBMessage parentMessage=mbMessagePersistence.findByPrimaryKey(message.getParentMessageId());
    if (parentMessage != null) {
      activityType=MBActivityKeys.REPLY_MESSAGE;
      receiverUserId=parentMessage.getUserId();
    }
    socialActivityLocalService.addActivity(userId,message.getGroupId(),MBMessage.class.getName(),message.getMessageId(),activityType,StringPool.BLANK,receiverUserId);
  }
  return message;
}
