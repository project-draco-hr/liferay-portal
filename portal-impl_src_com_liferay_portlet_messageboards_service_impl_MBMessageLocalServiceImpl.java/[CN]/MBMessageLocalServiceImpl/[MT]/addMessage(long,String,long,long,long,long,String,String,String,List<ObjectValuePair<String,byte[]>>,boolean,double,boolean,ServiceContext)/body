{
  User user=userPersistence.findByPrimaryKey(userId);
  userName=user.isDefaultUser() ? userName : user.getFullName();
  subject=ModelHintsUtil.trimString(MBMessage.class.getName(),"subject",subject);
  PortletPreferences preferences=ServiceContextUtil.getPortletPreferences(serviceContext);
  if (preferences != null) {
    if (!MBUtil.isAllowAnonymousPosting(preferences)) {
      if (anonymous || user.isDefaultUser()) {
        throw new PrincipalException();
      }
    }
  }
  if (user.isDefaultUser()) {
    anonymous=true;
  }
  Date now=new Date();
  long messageId=counterLocalService.increment();
  body=SanitizerUtil.sanitize(user.getCompanyId(),groupId,userId,MBMessage.class.getName(),messageId,"text/" + format,body);
  validate(subject,body);
  MBMessage message=mbMessagePersistence.create(messageId);
  message.setUuid(serviceContext.getUuid());
  message.setGroupId(groupId);
  message.setCompanyId(user.getCompanyId());
  message.setUserId(user.getUserId());
  message.setUserName(userName);
  message.setCreateDate(serviceContext.getCreateDate(now));
  message.setModifiedDate(serviceContext.getModifiedDate(now));
  message.setAllowPingbacks(allowPingbacks);
  message.setStatus(WorkflowConstants.STATUS_DRAFT);
  message.setStatusByUserId(user.getUserId());
  message.setStatusByUserName(userName);
  message.setStatusDate(serviceContext.getModifiedDate(now));
  if (parentMessageId != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) {
    MBMessage parentMessage=mbMessagePersistence.fetchByPrimaryKey(parentMessageId);
    if (parentMessage == null) {
      parentMessageId=MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID;
    }
  }
  MBThread thread=null;
  if (threadId > 0) {
    thread=mbThreadPersistence.fetchByPrimaryKey(threadId);
  }
  if ((thread == null) || (parentMessageId == MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID)) {
    threadId=counterLocalService.increment();
    thread=mbThreadPersistence.create(threadId);
    thread.setGroupId(groupId);
    thread.setCompanyId(user.getCompanyId());
    thread.setCategoryId(categoryId);
    thread.setRootMessageId(messageId);
    thread.setRootMessageUserId(user.getUserId());
    thread.setStatus(WorkflowConstants.STATUS_DRAFT);
    thread.setStatusByUserId(user.getUserId());
    thread.setStatusByUserName(userName);
    thread.setStatusDate(serviceContext.getModifiedDate(now));
  }
  if ((priority != MBThreadConstants.PRIORITY_NOT_GIVEN) && (thread.getPriority() != priority)) {
    thread.setPriority(priority);
    updatePriorities(thread.getThreadId(),priority);
  }
  message.setCategoryId(categoryId);
  message.setThreadId(threadId);
  message.setRootMessageId(thread.getRootMessageId());
  message.setParentMessageId(parentMessageId);
  message.setSubject(subject);
  message.setBody(body);
  message.setFormat(format);
  message.setAttachments(!files.isEmpty());
  message.setAnonymous(anonymous);
  if (priority != MBThreadConstants.PRIORITY_NOT_GIVEN) {
    message.setPriority(priority);
  }
  if (message.isDiscussion()) {
    long classNameId=PortalUtil.getClassNameId((String)serviceContext.getAttribute("className"));
    long classPK=GetterUtil.getLong((String)serviceContext.getAttribute("classPK"));
    message.setClassNameId(classNameId);
    message.setClassPK(classPK);
  }
  if (files.size() > 0) {
    long companyId=message.getCompanyId();
    long repositoryId=CompanyConstants.SYSTEM;
    String dirName=message.getAttachmentsDir();
    try {
      DLStoreUtil.deleteDirectory(companyId,repositoryId,dirName);
    }
 catch (    NoSuchDirectoryException nsde) {
      if (_log.isDebugEnabled()) {
        _log.debug(nsde.getMessage());
      }
    }
    DLStoreUtil.addDirectory(companyId,repositoryId,dirName);
    for (int i=0; i < files.size(); i++) {
      ObjectValuePair<String,byte[]> ovp=files.get(i);
      String fileName=ovp.getKey();
      byte[] bytes=ovp.getValue();
      try {
        DLStoreUtil.addFile(companyId,repositoryId,dirName + "/" + fileName,new ServiceContext(),bytes);
      }
 catch (      DuplicateFileException dfe) {
        if (_log.isDebugEnabled()) {
          _log.debug(dfe.getMessage());
        }
      }
    }
  }
  mbThreadPersistence.update(thread,false);
  mbMessagePersistence.update(message,false);
  if (!message.isDiscussion()) {
    if (user.isDefaultUser()) {
      addMessageResources(message,true,true);
    }
 else     if (serviceContext.getAddGroupPermissions() || serviceContext.getAddGuestPermissions()) {
      addMessageResources(message,serviceContext.getAddGroupPermissions(),serviceContext.getAddGuestPermissions());
    }
 else {
      addMessageResources(message,serviceContext.getGroupPermissions(),serviceContext.getGuestPermissions());
    }
  }
  updateAsset(userId,message,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  ExpandoBridge expandoBridge=message.getExpandoBridge();
  expandoBridge.setAttributes(serviceContext);
  WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),groupId,userId,message.getWorkflowClassName(),message.getMessageId(),message,serviceContext);
  return message;
}
