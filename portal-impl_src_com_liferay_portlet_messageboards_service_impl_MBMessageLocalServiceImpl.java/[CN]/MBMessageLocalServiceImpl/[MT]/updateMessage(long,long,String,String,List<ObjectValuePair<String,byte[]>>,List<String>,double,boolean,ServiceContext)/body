{
  MBMessage message=mbMessagePersistence.findByPrimaryKey(messageId);
  subject=ModelHintsUtil.trimString(MBMessage.class.getName(),"subject",subject);
  body=SanitizerUtil.sanitize(message.getCompanyId(),message.getGroupId(),userId,MBMessage.class.getName(),messageId,"text/" + message.getFormat(),body);
  Date now=new Date();
  validate(subject,body);
  message.setModifiedDate(serviceContext.getModifiedDate(now));
  message.setSubject(subject);
  message.setBody(body);
  message.setAttachments(!files.isEmpty() || !existingFiles.isEmpty());
  message.setAllowPingbacks(allowPingbacks);
  if (priority != MBThreadConstants.PRIORITY_NOT_GIVEN) {
    message.setPriority(priority);
  }
  if (!message.isPending() && (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_SAVE_DRAFT)) {
    message.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  long companyId=message.getCompanyId();
  long repositoryId=CompanyConstants.SYSTEM;
  String dirName=message.getAttachmentsDir();
  if (!files.isEmpty() || !existingFiles.isEmpty()) {
    try {
      DLStoreUtil.addDirectory(companyId,repositoryId,dirName);
    }
 catch (    DuplicateDirectoryException dde) {
    }
    String[] fileNames=DLStoreUtil.getFileNames(companyId,repositoryId,dirName);
    for (    String fileName : fileNames) {
      if (!existingFiles.contains(fileName)) {
        DLStoreUtil.deleteFile(companyId,repositoryId,fileName);
      }
    }
    for (int i=0; i < files.size(); i++) {
      ObjectValuePair<String,byte[]> ovp=files.get(i);
      String fileName=ovp.getKey();
      byte[] bytes=ovp.getValue();
      try {
        DLStoreUtil.addFile(companyId,repositoryId,dirName + "/" + fileName,bytes);
      }
 catch (      DuplicateFileException dfe) {
      }
    }
  }
 else {
    try {
      DLStoreUtil.deleteDirectory(companyId,repositoryId,dirName);
    }
 catch (    NoSuchDirectoryException nsde) {
    }
  }
  mbMessagePersistence.update(message,false);
  MBThread thread=mbThreadPersistence.findByPrimaryKey(message.getThreadId());
  if ((priority != MBThreadConstants.PRIORITY_NOT_GIVEN) && (thread.getPriority() != priority)) {
    thread.setPriority(priority);
    mbThreadPersistence.update(thread,false);
    updatePriorities(thread.getThreadId(),priority);
  }
  updateAsset(userId,message,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  ExpandoBridge expandoBridge=message.getExpandoBridge();
  expandoBridge.setAttributes(serviceContext);
  serviceContext.setAttribute("update",Boolean.TRUE.toString());
  WorkflowHandlerRegistryUtil.startWorkflowInstance(companyId,message.getGroupId(),userId,message.getWorkflowClassName(),message.getMessageId(),message,serviceContext);
  return message;
}
