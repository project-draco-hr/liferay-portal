{
  MBMessage message=mbMessagePersistence.findByPrimaryKey(messageId);
  int oldStatus=message.getStatus();
  Date modifiedDate=serviceContext.getModifiedDate(new Date());
  subject=ModelHintsUtil.trimString(MBMessage.class.getName(),"subject",subject);
  body=SanitizerUtil.sanitize(message.getCompanyId(),message.getGroupId(),userId,MBMessage.class.getName(),messageId,"text/" + message.getFormat(),body);
  validate(subject,body);
  subject=getSubject(subject,body);
  body=getBody(subject,body);
  message.setModifiedDate(modifiedDate);
  message.setSubject(subject);
  message.setBody(body);
  message.setAllowPingbacks(allowPingbacks);
  if (priority != MBThreadConstants.PRIORITY_NOT_GIVEN) {
    message.setPriority(priority);
  }
  MBThread thread=mbThreadPersistence.findByPrimaryKey(message.getThreadId());
  if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_SAVE_DRAFT) {
    if (!message.isDraft() && !message.isPending()) {
      message.setStatus(WorkflowConstants.STATUS_DRAFT);
      User user=userPersistence.findByPrimaryKey(userId);
      updateThreadStatus(thread,message,user,oldStatus,modifiedDate);
      assetEntryLocalService.updateVisible(message.getWorkflowClassName(),message.getMessageId(),false);
      if (!message.isDiscussion()) {
        Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(MBMessage.class);
        indexer.delete(message);
      }
    }
  }
  if (!inputStreamOVPs.isEmpty() || !existingFiles.isEmpty()) {
    List<FileEntry> fileEntries=message.getAttachmentsFileEntries();
    for (    FileEntry fileEntry : fileEntries) {
      String fileEntryId=String.valueOf(fileEntry.getFileEntryId());
      if (!existingFiles.contains(fileEntryId)) {
        if (!TrashUtil.isTrashEnabled(message.getGroupId())) {
          deleteMessageAttachment(messageId,fileEntry.getTitle());
        }
 else {
          moveMessageAttachmentToTrash(userId,messageId,fileEntry.getTitle());
        }
      }
    }
    Folder folder=message.addAttachmentsFolder();
    PortletFileRepositoryUtil.addPortletFileEntries(message.getGroupId(),userId,MBMessage.class.getName(),message.getMessageId(),PortletKeys.MESSAGE_BOARDS,folder.getFolderId(),inputStreamOVPs);
  }
 else {
    if (TrashUtil.isTrashEnabled(message.getGroupId())) {
      List<FileEntry> fileEntries=message.getAttachmentsFileEntries();
      for (      FileEntry fileEntry : fileEntries) {
        moveMessageAttachmentToTrash(userId,messageId,fileEntry.getTitle());
      }
    }
 else {
      deleteMessageAttachments(message.getMessageId());
    }
  }
  message.setExpandoBridgeAttributes(serviceContext);
  mbMessagePersistence.update(message);
  if ((serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_SAVE_DRAFT) && !message.isDiscussion()) {
    mbStatsUserLocalService.updateStatsUser(message.getGroupId(),userId,message.getModifiedDate());
  }
  if ((priority != MBThreadConstants.PRIORITY_NOT_GIVEN) && (thread.getPriority() != priority)) {
    thread.setPriority(priority);
    mbThreadPersistence.update(thread);
    updatePriorities(thread.getThreadId(),priority);
  }
  updateAsset(userId,message,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  startWorkflowInstance(userId,message,serviceContext);
  return message;
}
