{
  MBMessage message=getMessage(messageId);
  int oldStatus=message.getStatus();
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  Date modifiedDate=serviceContext.getModifiedDate(now);
  message.setStatus(status);
  message.setStatusByUserId(userId);
  message.setStatusByUserName(user.getFullName());
  message.setStatusDate(modifiedDate);
  mbMessagePersistence.update(message);
  MBThread thread=mbThreadPersistence.findByPrimaryKey(message.getThreadId());
  updateThreadStatus(thread,message,user,oldStatus,modifiedDate);
  Indexer<MBMessage> indexer=IndexerRegistryUtil.nullSafeGetIndexer(MBMessage.class);
  if (status == WorkflowConstants.STATUS_APPROVED) {
    if (oldStatus != WorkflowConstants.STATUS_APPROVED) {
      if (serviceContext.isAssetEntryVisible() && ((message.getClassNameId() == 0) || (message.getParentMessageId() != 0))) {
        Date publishDate=null;
        AssetEntry assetEntry=assetEntryLocalService.fetchEntry(message.getWorkflowClassName(),message.getMessageId());
        if ((assetEntry != null) && (assetEntry.getPublishDate() != null)) {
          publishDate=assetEntry.getPublishDate();
        }
 else {
          publishDate=now;
          serviceContext.setCommand(Constants.ADD);
        }
        assetEntryLocalService.updateEntry(message.getWorkflowClassName(),message.getMessageId(),publishDate,null,true,true);
      }
      if (serviceContext.isCommandAdd()) {
        JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
        String title=message.getSubject();
        if (!message.isDiscussion()) {
          extraDataJSONObject.put("title",title);
          if (!message.isAnonymous() && !user.isDefaultUser()) {
            long receiverUserId=0;
            MBMessage parentMessage=mbMessagePersistence.fetchByPrimaryKey(message.getParentMessageId());
            if (parentMessage != null) {
              receiverUserId=parentMessage.getUserId();
            }
            SocialActivityManagerUtil.addActivity(message.getUserId(),message,MBActivityKeys.ADD_MESSAGE,extraDataJSONObject.toString(),receiverUserId);
            if ((parentMessage != null) && (receiverUserId != message.getUserId())) {
              SocialActivityManagerUtil.addActivity(message.getUserId(),parentMessage,MBActivityKeys.REPLY_MESSAGE,extraDataJSONObject.toString(),0);
            }
          }
        }
 else {
          title=HtmlUtil.stripHtml(title);
          extraDataJSONObject.put("title",title);
          String className=(String)serviceContext.getAttribute("className");
          long classPK=ParamUtil.getLong(serviceContext,"classPK");
          long parentMessageId=message.getParentMessageId();
          if (parentMessageId != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) {
            AssetEntry assetEntry=assetEntryLocalService.fetchEntry(className,classPK);
            if (assetEntry != null) {
              extraDataJSONObject.put("messageId",message.getMessageId());
              SocialActivityManagerUtil.addActivity(message.getUserId(),assetEntry,SocialActivityConstants.TYPE_ADD_COMMENT,extraDataJSONObject.toString(),assetEntry.getUserId());
            }
          }
        }
      }
    }
    notifySubscribers(userId,(MBMessage)message.clone(),(String)workflowContext.get(WorkflowConstants.CONTEXT_URL),serviceContext);
    indexer.reindex(message);
    pingPingback(message,serviceContext);
  }
 else   if (oldStatus == WorkflowConstants.STATUS_APPROVED) {
    assetEntryLocalService.updateVisible(message.getWorkflowClassName(),message.getMessageId(),false);
    indexer.delete(message);
  }
  if (!message.isDiscussion()) {
    mbStatsUserLocalService.updateStatsUser(message.getGroupId(),userId,serviceContext.getModifiedDate(now));
  }
  return message;
}
