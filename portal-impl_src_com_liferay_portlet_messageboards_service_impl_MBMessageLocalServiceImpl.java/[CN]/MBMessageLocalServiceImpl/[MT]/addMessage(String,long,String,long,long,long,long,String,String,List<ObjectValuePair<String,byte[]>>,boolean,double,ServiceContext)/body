{
  StopWatch stopWatch=null;
  if (_log.isDebugEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  User user=userPersistence.findByPrimaryKey(userId);
  userName=user.isDefaultUser() ? userName : user.getFullName();
  subject=ModelHintsUtil.trimString(MBMessage.class.getName(),"subject",subject);
  PortletPreferences preferences=ServiceContextUtil.getPortletPreferences(serviceContext);
  if (preferences != null) {
    if (!MBUtil.isAllowAnonymousPosting(preferences)) {
      if (anonymous || user.isDefaultUser()) {
        throw new PrincipalException();
      }
    }
  }
  if (user.isDefaultUser()) {
    anonymous=true;
  }
  Date now=new Date();
  validate(subject,body);
  long messageId=counterLocalService.increment();
  logAddMessage(messageId,stopWatch,1);
  MBMessage message=mbMessagePersistence.create(messageId);
  message.setUuid(uuid);
  message.setGroupId(groupId);
  message.setCompanyId(user.getCompanyId());
  message.setUserId(user.getUserId());
  message.setUserName(userName);
  message.setCreateDate(now);
  message.setModifiedDate(now);
  message.setStatus(serviceContext.getStatus());
  message.setStatusByUserId(user.getUserId());
  message.setStatusByUserName(userName);
  message.setStatusDate(now);
  MBMessage parentMessage=mbMessagePersistence.fetchByPrimaryKey(parentMessageId);
  if (parentMessage == null) {
    parentMessageId=MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID;
  }
  MBThread thread=null;
  if (threadId > 0) {
    thread=mbThreadPersistence.fetchByPrimaryKey(threadId);
  }
  if ((thread == null) || (parentMessageId == MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID)) {
    threadId=counterLocalService.increment();
    thread=mbThreadPersistence.create(threadId);
    thread.setGroupId(groupId);
    thread.setCategoryId(categoryId);
    thread.setRootMessageId(messageId);
    thread.setStatus(serviceContext.getStatus());
    thread.setStatusByUserId(user.getUserId());
    thread.setStatusByUserName(userName);
    thread.setStatusDate(now);
    if ((serviceContext.getStatus() == StatusConstants.APPROVED) && (categoryId != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)) {
      MBCategory category=mbCategoryPersistence.findByPrimaryKey(categoryId);
      category.setThreadCount(category.getThreadCount() + 1);
      mbCategoryPersistence.update(category,false);
    }
  }
  if (serviceContext.getStatus() == StatusConstants.APPROVED) {
    thread.setMessageCount(thread.getMessageCount() + 1);
    if (anonymous) {
      thread.setLastPostByUserId(0);
    }
 else {
      thread.setLastPostByUserId(userId);
    }
    thread.setLastPostDate(now);
  }
  if ((priority != MBThreadConstants.PRIORITY_NOT_GIVEN) && (thread.getPriority() != priority)) {
    thread.setPriority(priority);
    updatePriorities(thread.getThreadId(),priority);
  }
  logAddMessage(messageId,stopWatch,2);
  message.setCategoryId(categoryId);
  message.setThreadId(threadId);
  message.setParentMessageId(parentMessageId);
  message.setSubject(subject);
  message.setBody(body);
  message.setAttachments(!files.isEmpty());
  message.setAnonymous(anonymous);
  if (priority != MBThreadConstants.PRIORITY_NOT_GIVEN) {
    message.setPriority(priority);
  }
  if (files.size() > 0) {
    long companyId=message.getCompanyId();
    String portletId=CompanyConstants.SYSTEM_STRING;
    long dlGroupId=GroupConstants.DEFAULT_PARENT_GROUP_ID;
    long repositoryId=CompanyConstants.SYSTEM;
    String dirName=message.getAttachmentsDir();
    try {
      dlService.deleteDirectory(companyId,portletId,repositoryId,dirName);
    }
 catch (    NoSuchDirectoryException nsde) {
      if (_log.isDebugEnabled()) {
        _log.debug(nsde.getMessage());
      }
    }
    dlService.addDirectory(companyId,repositoryId,dirName);
    for (int i=0; i < files.size(); i++) {
      ObjectValuePair<String,byte[]> ovp=files.get(i);
      String fileName=ovp.getKey();
      byte[] bytes=ovp.getValue();
      try {
        dlService.addFile(companyId,portletId,dlGroupId,repositoryId,dirName + "/" + fileName,0,StringPool.BLANK,message.getModifiedDate(),new ServiceContext(),bytes);
      }
 catch (      DuplicateFileException dfe) {
        if (_log.isDebugEnabled()) {
          _log.debug(dfe.getMessage());
        }
      }
    }
  }
  logAddMessage(messageId,stopWatch,3);
  mbThreadPersistence.update(thread,false);
  mbMessagePersistence.update(message,false);
  logAddMessage(messageId,stopWatch,4);
  if (!message.isDiscussion()) {
    if (user.isDefaultUser()) {
      addMessageResources(message,true,true);
    }
    if (serviceContext.getAddCommunityPermissions() || serviceContext.getAddGuestPermissions()) {
      addMessageResources(message,serviceContext.getAddCommunityPermissions(),serviceContext.getAddGuestPermissions());
    }
 else {
      addMessageResources(message,serviceContext.getCommunityPermissions(),serviceContext.getGuestPermissions());
    }
  }
  logAddMessage(messageId,stopWatch,5);
  if (!message.isDiscussion() && (serviceContext.getStatus() == StatusConstants.APPROVED)) {
    mbStatsUserLocalService.updateStatsUser(message.getGroupId(),userId,now);
    logAddMessage(messageId,stopWatch,6);
    if (categoryId != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) {
      MBCategory category=mbCategoryPersistence.findByPrimaryKey(categoryId);
      category.setMessageCount(category.getMessageCount() + 1);
      category.setLastPostDate(now);
      mbCategoryPersistence.update(category,false);
    }
  }
  logAddMessage(messageId,stopWatch,7);
  updateAsset(userId,message,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  logAddMessage(messageId,stopWatch,8);
  ExpandoBridge expandoBridge=message.getExpandoBridge();
  expandoBridge.setAttributes(serviceContext);
  logAddMessage(messageId,stopWatch,9);
  if (!message.isDiscussion() && !message.isAnonymous() && !user.isDefaultUser()&& (serviceContext.getStatus() == StatusConstants.APPROVED)) {
    int activityType=MBActivityKeys.ADD_MESSAGE;
    long receiverUserId=0;
    if (parentMessage != null) {
      activityType=MBActivityKeys.REPLY_MESSAGE;
      receiverUserId=parentMessage.getUserId();
    }
    socialActivityLocalService.addActivity(userId,message.getGroupId(),MBMessage.class.getName(),messageId,activityType,StringPool.BLANK,receiverUserId);
  }
  logAddMessage(messageId,stopWatch,10);
  notifySubscribers(message,serviceContext,false);
  logAddMessage(messageId,stopWatch,11);
  reIndex(message);
  logAddMessage(messageId,stopWatch,12);
  return message;
}
