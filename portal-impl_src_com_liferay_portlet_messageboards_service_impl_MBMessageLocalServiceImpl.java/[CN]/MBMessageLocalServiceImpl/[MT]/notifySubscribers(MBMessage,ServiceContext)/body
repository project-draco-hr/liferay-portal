{
  String layoutFullURL=serviceContext.getLayoutFullURL();
  if (message.getStatus() != WorkflowConstants.STATUS_APPROVED || Validator.isNull(layoutFullURL)) {
    return;
  }
  if (message.isDiscussion()) {
    try {
      notifyDiscussionSubscribers(message,serviceContext);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
    return;
  }
  PortletPreferences preferences=ServiceContextUtil.getPortletPreferences(serviceContext);
  if (preferences == null) {
    long ownerId=message.getGroupId();
    int ownerType=PortletKeys.PREFS_OWNER_TYPE_GROUP;
    long plid=PortletKeys.PREFS_PLID_SHARED;
    String portletId=PortletKeys.MESSAGE_BOARDS;
    String defaultPreferences=null;
    preferences=portletPreferencesLocalService.getPreferences(message.getCompanyId(),ownerId,ownerType,plid,portletId,defaultPreferences);
  }
  boolean update=GetterUtil.getBoolean((String)serviceContext.getAttribute("update"));
  if (!update && MBUtil.getEmailMessageAddedEnabled(preferences)) {
  }
 else   if (update && MBUtil.getEmailMessageUpdatedEnabled(preferences)) {
  }
 else {
    return;
  }
  Company company=companyPersistence.findByPrimaryKey(message.getCompanyId());
  Group group=groupPersistence.findByPrimaryKey(message.getGroupId());
  String emailAddress=StringPool.BLANK;
  String fullName=message.getUserName();
  try {
    User user=userPersistence.findByPrimaryKey(message.getUserId());
    emailAddress=user.getEmailAddress();
    fullName=user.getFullName();
  }
 catch (  NoSuchUserException nsue) {
  }
  MBCategory category=message.getCategory();
  if (message.isAnonymous()) {
    emailAddress=StringPool.BLANK;
    fullName=LanguageUtil.get(ServiceContextUtil.getLocale(serviceContext),"anonymous");
  }
  String categoryName=category.getName();
  if (category.getCategoryId() == MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) {
    categoryName=LanguageUtil.get(ServiceContextUtil.getLocale(serviceContext),"message-boards-home") + StringPool.SPACE + StringPool.DASH+ StringPool.SPACE+ group.getName();
  }
  List<Long> categoryIds=new ArrayList<Long>();
  categoryIds.add(message.getCategoryId());
  if ((message.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (message.getCategoryId() != MBCategoryConstants.DISCUSSION_CATEGORY_ID)) {
    categoryIds.addAll(category.getAncestorCategoryIds());
  }
  String messageURL=layoutFullURL + Portal.FRIENDLY_URL_SEPARATOR + "message_boards/view_message/"+ message.getMessageId();
  String portletName=PortalUtil.getPortletTitle(PortletKeys.MESSAGE_BOARDS,LocaleUtil.getDefault());
  String fromName=MBUtil.getEmailFromName(preferences);
  String fromAddress=MBUtil.getEmailFromAddress(preferences);
  String mailingListAddress=StringPool.BLANK;
  if (PropsValues.POP_SERVER_NOTIFICATIONS_ENABLED) {
    mailingListAddress=MBUtil.getMailingListAddress(message.getGroupId(),message.getCategoryId(),message.getMessageId(),company.getMx(),fromAddress);
  }
  fromName=StringUtil.replace(fromName,new String[]{"[$COMPANY_ID$]","[$COMPANY_MX$]","[$COMPANY_NAME$]","[$COMMUNITY_NAME$]","[$MAILING_LIST_ADDRESS$]","[$MESSAGE_USER_ADDRESS$]","[$MESSAGE_USER_NAME$]","[$PORTLET_NAME$]"},new String[]{String.valueOf(company.getCompanyId()),company.getMx(),company.getName(),group.getName(),mailingListAddress,emailAddress,fullName,portletName});
  fromAddress=StringUtil.replace(fromAddress,new String[]{"[$COMPANY_ID$]","[$COMPANY_MX$]","[$COMPANY_NAME$]","[$COMMUNITY_NAME$]","[$MAILING_LIST_ADDRESS$]","[$MESSAGE_USER_ADDRESS$]","[$MESSAGE_USER_NAME$]","[$PORTLET_NAME$]"},new String[]{String.valueOf(company.getCompanyId()),company.getMx(),company.getName(),group.getName(),mailingListAddress,emailAddress,fullName,portletName});
  String subjectPrefix=null;
  String body=null;
  String signature=null;
  if (update) {
    subjectPrefix=MBUtil.getEmailMessageUpdatedSubjectPrefix(preferences);
    body=MBUtil.getEmailMessageUpdatedBody(preferences);
    signature=MBUtil.getEmailMessageUpdatedSignature(preferences);
  }
 else {
    subjectPrefix=MBUtil.getEmailMessageAddedSubjectPrefix(preferences);
    body=MBUtil.getEmailMessageAddedBody(preferences);
    signature=MBUtil.getEmailMessageAddedSignature(preferences);
  }
  if (Validator.isNotNull(signature)) {
    body+="\n--\n" + signature;
  }
  subjectPrefix=StringUtil.replace(subjectPrefix,new String[]{"[$CATEGORY_NAME$]","[$COMPANY_ID$]","[$COMPANY_MX$]","[$COMPANY_NAME$]","[$COMMUNITY_NAME$]","[$FROM_ADDRESS$]","[$FROM_NAME$]","[$MAILING_LIST_ADDRESS$]","[$MESSAGE_BODY$]","[$MESSAGE_ID$]","[$MESSAGE_SUBJECT$]","[$MESSAGE_USER_ADDRESS$]","[$MESSAGE_USER_NAME$]","[$PORTAL_URL$]","[$PORTLET_NAME$]"},new String[]{categoryName,String.valueOf(company.getCompanyId()),company.getMx(),company.getName(),group.getName(),fromAddress,fromName,mailingListAddress,message.getBody(),String.valueOf(message.getMessageId()),message.getSubject(),emailAddress,fullName,company.getVirtualHostname(),portletName});
  body=StringUtil.replace(body,new String[]{"[$CATEGORY_NAME$]","[$COMPANY_ID$]","[$COMPANY_MX$]","[$COMPANY_NAME$]","[$COMMUNITY_NAME$]","[$FROM_ADDRESS$]","[$FROM_NAME$]","[$MAILING_LIST_ADDRESS$]","[$MESSAGE_BODY$]","[$MESSAGE_ID$]","[$MESSAGE_SUBJECT$]","[$MESSAGE_URL$]","[$MESSAGE_USER_ADDRESS$]","[$MESSAGE_USER_NAME$]","[$PORTAL_URL$]","[$PORTLET_NAME$]"},new String[]{categoryName,String.valueOf(company.getCompanyId()),company.getMx(),company.getName(),group.getName(),fromAddress,fromName,mailingListAddress,message.getBody(),String.valueOf(message.getMessageId()),message.getSubject(),messageURL,emailAddress,fullName,company.getVirtualHostname(),portletName});
  String subject=message.getSubject();
  if (subject.indexOf(subjectPrefix) == -1) {
    subject=subjectPrefix.trim() + " " + subject.trim();
  }
  String inReplyTo=null;
  if (message.getParentMessageId() != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) {
    inReplyTo=PortalUtil.getMailId(company.getMx(),MBUtil.MESSAGE_POP_PORTLET_PREFIX,message.getCategoryId(),message.getParentMessageId());
  }
  SubscriptionSender subscriptionSenderPrototype=new MBSubscriptionSender();
  subscriptionSenderPrototype.setBody(body);
  subscriptionSenderPrototype.setBulk(true);
  subscriptionSenderPrototype.setCompanyId(message.getCompanyId());
  subscriptionSenderPrototype.setFrom(fromAddress,fromName);
  subscriptionSenderPrototype.setGroupId(message.getGroupId());
  subscriptionSenderPrototype.setHtmlFormat(MBUtil.getEmailHtmlFormat(preferences));
  subscriptionSenderPrototype.setInReplyTo(inReplyTo);
  subscriptionSenderPrototype.setMailId(company,MBUtil.MESSAGE_POP_PORTLET_PREFIX,message.getCategoryId(),message.getMessageId());
  subscriptionSenderPrototype.setReplyToAddress(mailingListAddress);
  subscriptionSenderPrototype.setSubject(subject);
  subscriptionSenderPrototype.setUserId(message.getUserId());
  SubscriptionSender subscriptionSender=(SubscriptionSender)SerializationUtils.clone(subscriptionSenderPrototype);
  for (  long categoryId : categoryIds) {
    if (categoryId == MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) {
      categoryId=message.getGroupId();
    }
    subscriptionSender.addPersistedSubscribers(MBCategory.class.getName(),categoryId);
  }
  subscriptionSender.addPersistedSubscribers(MBThread.class.getName(),message.getThreadId());
  subscriptionSender.flushNotificationsAsync();
  if (!MailingListThreadLocal.isSourceMailingList()) {
    for (    long categoryId : categoryIds) {
      MBSubscriptionSender sourceMailingListSubscriptionSender=(MBSubscriptionSender)SerializationUtils.clone(subscriptionSenderPrototype);
      sourceMailingListSubscriptionSender.setBulk(false);
      sourceMailingListSubscriptionSender.addMailingListSubscriber(message.getGroupId(),categoryId);
      sourceMailingListSubscriptionSender.flushNotificationsAsync();
    }
  }
}
