{
  MBMessage message=getMessage(messageId);
  int oldStatus=message.getStatus();
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  message.setStatus(status);
  message.setStatusByUserId(userId);
  message.setStatusByUserName(user.getFullName());
  message.setStatusDate(serviceContext.getModifiedDate(now));
  mbMessagePersistence.update(message,false);
  MBThread thread=mbThreadPersistence.findByPrimaryKey(message.getThreadId());
  MBCategory category=null;
  if (thread.getCategoryId() > 0) {
    category=mbCategoryPersistence.findByPrimaryKey(thread.getCategoryId());
  }
  if ((thread.getRootMessageId() == message.getMessageId()) && (oldStatus != status)) {
    thread.setStatus(status);
    thread.setStatusByUserId(userId);
    thread.setStatusByUserName(user.getFullName());
    thread.setStatusDate(serviceContext.getModifiedDate(now));
  }
  Indexer indexer=IndexerRegistryUtil.getIndexer(MBMessage.class);
  if ((oldStatus != WorkflowConstants.STATUS_APPROVED) && (status == WorkflowConstants.STATUS_APPROVED)) {
    if ((category != null) && (thread.getRootMessageId() == message.getMessageId())) {
      category.setThreadCount(category.getThreadCount() + 1);
      mbCategoryPersistence.update(category,false);
    }
    thread.setMessageCount(thread.getMessageCount() + 1);
    if (message.isAnonymous()) {
      thread.setLastPostByUserId(0);
    }
 else {
      thread.setLastPostByUserId(message.getUserId());
    }
    thread.setLastPostDate(serviceContext.getModifiedDate(now));
    if (category != null) {
      category.setMessageCount(category.getMessageCount() + 1);
      category.setLastPostDate(serviceContext.getModifiedDate(now));
      mbCategoryPersistence.update(category,false);
    }
    if (!message.isDiscussion()) {
      assetEntryLocalService.updateVisible(MBMessage.class.getName(),message.getMessageId(),true);
      indexer.reindex(message);
      if (!message.isAnonymous() && !user.isDefaultUser()) {
        int activityType=MBActivityKeys.ADD_MESSAGE;
        long receiverUserId=0;
        MBMessage parentMessage=mbMessagePersistence.fetchByPrimaryKey(message.getParentMessageId());
        if (parentMessage != null) {
          activityType=MBActivityKeys.REPLY_MESSAGE;
          receiverUserId=parentMessage.getUserId();
        }
        socialActivityLocalService.addActivity(userId,message.getGroupId(),MBMessage.class.getName(),message.getMessageId(),activityType,StringPool.BLANK,receiverUserId);
      }
    }
    notifySubscribers(message,serviceContext);
    pingPingback(message,serviceContext);
  }
 else   if ((oldStatus == WorkflowConstants.STATUS_APPROVED) && (status != WorkflowConstants.STATUS_APPROVED)) {
    if ((category != null) && (thread.getRootMessageId() == message.getMessageId())) {
      category.setThreadCount(category.getThreadCount() - 1);
      mbCategoryPersistence.update(category,false);
    }
    thread.setMessageCount(thread.getMessageCount() - 1);
    if (category != null) {
      category.setMessageCount(category.getMessageCount() - 1);
      mbCategoryPersistence.update(category,false);
    }
    if (!message.isDiscussion()) {
      assetEntryLocalService.updateVisible(MBMessage.class.getName(),message.getMessageId(),false);
      indexer.delete(message);
    }
  }
  if (status != oldStatus) {
    mbThreadPersistence.update(thread,false);
  }
  if (!message.isDiscussion()) {
    mbStatsUserLocalService.updateStatsUser(message.getGroupId(),userId,serviceContext.getModifiedDate(now));
  }
  return message;
}
