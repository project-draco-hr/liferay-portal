{
  User user=userPersistence.findByPrimaryKey(userId);
  userName=user.isDefaultUser() ? userName : user.getFullName();
  subject=ModelHintsUtil.trimString(MBMessage.class.getName(),"subject",subject);
  MBGroupServiceSettings mbGroupServiceSettings=MBGroupServiceSettings.getInstance(groupId);
  if (mbGroupServiceSettings != null) {
    if (!mbGroupServiceSettings.isAllowAnonymousPosting()) {
      if (anonymous || user.isDefaultUser()) {
        throw new PrincipalException();
      }
    }
  }
  if (user.isDefaultUser()) {
    anonymous=true;
  }
  Date now=new Date();
  long messageId=counterLocalService.increment();
  Map<String,Object> options=new HashMap<>();
  boolean discussion=false;
  if (categoryId == MBCategoryConstants.DISCUSSION_CATEGORY_ID) {
    discussion=true;
  }
  options.put("discussion",discussion);
  body=SanitizerUtil.sanitize(user.getCompanyId(),groupId,userId,MBMessage.class.getName(),messageId,"text/" + format,Sanitizer.MODE_ALL,body,options);
  validate(subject,body);
  subject=getSubject(subject,body);
  body=getBody(subject,body);
  MBMessage message=mbMessagePersistence.create(messageId);
  message.setUuid(serviceContext.getUuid());
  message.setGroupId(groupId);
  message.setCompanyId(user.getCompanyId());
  message.setUserId(user.getUserId());
  message.setUserName(userName);
  message.setCreateDate(serviceContext.getCreateDate(now));
  message.setModifiedDate(serviceContext.getModifiedDate(now));
  if (threadId > 0) {
    message.setThreadId(threadId);
  }
  if (priority != MBThreadConstants.PRIORITY_NOT_GIVEN) {
    message.setPriority(priority);
  }
  message.setAllowPingbacks(allowPingbacks);
  message.setStatus(WorkflowConstants.STATUS_DRAFT);
  message.setStatusByUserId(user.getUserId());
  message.setStatusByUserName(userName);
  message.setStatusDate(serviceContext.getModifiedDate(now));
  if (parentMessageId != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) {
    MBMessage parentMessage=mbMessagePersistence.fetchByPrimaryKey(parentMessageId);
    if (parentMessage == null) {
      parentMessageId=MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID;
    }
  }
  MBThread thread=null;
  if (threadId > 0) {
    thread=mbThreadPersistence.fetchByPrimaryKey(threadId);
  }
  if (thread == null) {
    if (parentMessageId == MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) {
      thread=mbThreadLocalService.addThread(categoryId,message,serviceContext);
    }
 else {
      throw new NoSuchThreadException("{threadId=" + threadId + "}");
    }
  }
  if ((priority != MBThreadConstants.PRIORITY_NOT_GIVEN) && (thread.getPriority() != priority)) {
    thread.setPriority(priority);
    mbThreadPersistence.update(thread);
    updatePriorities(thread.getThreadId(),priority);
  }
  message.setCategoryId(categoryId);
  message.setThreadId(thread.getThreadId());
  message.setRootMessageId(thread.getRootMessageId());
  message.setParentMessageId(parentMessageId);
  message.setSubject(subject);
  message.setBody(body);
  message.setFormat(format);
  message.setAnonymous(anonymous);
  if (message.isDiscussion()) {
    long classNameId=classNameLocalService.getClassNameId((String)serviceContext.getAttribute("className"));
    long classPK=ParamUtil.getLong(serviceContext,"classPK");
    message.setClassNameId(classNameId);
    message.setClassPK(classPK);
  }
  message.setExpandoBridgeAttributes(serviceContext);
  mbMessagePersistence.update(message);
  if (ListUtil.isNotEmpty(inputStreamOVPs)) {
    Folder folder=message.addAttachmentsFolder();
    PortletFileRepositoryUtil.addPortletFileEntries(message.getGroupId(),userId,MBMessage.class.getName(),message.getMessageId(),PortletKeys.MESSAGE_BOARDS,folder.getFolderId(),inputStreamOVPs);
  }
  if ((parentMessageId != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) && GetterUtil.getBoolean(serviceContext.getAttribute("propagatePermissions"))) {
    MBUtil.propagatePermissions(message.getCompanyId(),groupId,parentMessageId,serviceContext);
  }
  if (!message.isDiscussion()) {
    if (user.isDefaultUser()) {
      addMessageResources(message,true,true);
    }
 else     if (serviceContext.isAddGroupPermissions() || serviceContext.isAddGuestPermissions()) {
      addMessageResources(message,serviceContext.isAddGroupPermissions(),serviceContext.isAddGuestPermissions());
    }
 else {
      addMessageResources(message,serviceContext.getGroupPermissions(),serviceContext.getGuestPermissions());
    }
  }
  updateAsset(userId,message,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds(),serviceContext.isAssetEntryVisible());
  startWorkflowInstance(userId,message,serviceContext);
  return message;
}
