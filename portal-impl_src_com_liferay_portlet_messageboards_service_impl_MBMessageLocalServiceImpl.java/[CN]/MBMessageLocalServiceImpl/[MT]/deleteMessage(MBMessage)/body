{
  long folderId=message.getAttachmentsFolderId();
  if (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    PortletFileRepositoryUtil.deletePortletFolder(folderId);
  }
  int count=mbMessagePersistence.countByThreadId(message.getThreadId());
  if (count == 1) {
    long threadAttachmentsFolderId=message.getThreadAttachmentsFolderId();
    if (threadAttachmentsFolderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
      PortletFileRepositoryUtil.deletePortletFolder(threadAttachmentsFolderId);
    }
    subscriptionLocalService.deleteSubscriptions(message.getCompanyId(),MBThread.class.getName(),message.getThreadId());
    MBThread thread=mbThreadPersistence.findByPrimaryKey(message.getThreadId());
    mbThreadPersistence.remove(thread);
    if ((message.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (message.getCategoryId() != MBCategoryConstants.DISCUSSION_CATEGORY_ID)) {
      MBUtil.updateCategoryStatistics(message.getCompanyId(),message.getCategoryId());
    }
    Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(MBThread.class);
    indexer.delete(thread);
  }
 else {
    MBThread thread=mbThreadPersistence.findByPrimaryKey(message.getThreadId());
    if (thread.getRootMessageId() == message.getMessageId()) {
      List<MBMessage> childrenMessages=mbMessagePersistence.findByT_P(message.getThreadId(),message.getMessageId());
      if (childrenMessages.size() > 1) {
        throw new RequiredMessageException(String.valueOf(message.getMessageId()));
      }
 else       if (childrenMessages.size() == 1) {
        MBMessage childMessage=childrenMessages.get(0);
        childMessage.setRootMessageId(childMessage.getMessageId());
        childMessage.setParentMessageId(MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID);
        mbMessagePersistence.update(childMessage);
        List<MBMessage> repliesMessages=mbMessagePersistence.findByThreadReplies(message.getThreadId());
        for (        MBMessage repliesMessage : repliesMessages) {
          repliesMessage.setRootMessageId(childMessage.getMessageId());
          mbMessagePersistence.update(repliesMessage);
        }
        thread.setRootMessageId(childMessage.getMessageId());
        thread.setRootMessageUserId(childMessage.getUserId());
        mbThreadPersistence.update(thread);
      }
    }
 else {
      List<MBMessage> childrenMessages=mbMessagePersistence.findByT_P(message.getThreadId(),message.getMessageId());
      if (!childrenMessages.isEmpty()) {
        for (        MBMessage childMessage : childrenMessages) {
          childMessage.setParentMessageId(message.getParentMessageId());
          mbMessagePersistence.update(childMessage);
        }
      }
 else       if (message.getStatus() == WorkflowConstants.STATUS_APPROVED) {
        MessageCreateDateComparator comparator=new MessageCreateDateComparator(true);
        MBMessage[] prevAndNextMessages=mbMessagePersistence.findByT_S_PrevAndNext(message.getMessageId(),thread.getThreadId(),WorkflowConstants.STATUS_APPROVED,comparator);
        if (prevAndNextMessages[2] == null) {
          thread.setLastPostByUserId(prevAndNextMessages[0].getUserId());
          thread.setLastPostDate(prevAndNextMessages[0].getModifiedDate());
          mbThreadPersistence.update(thread);
        }
      }
    }
    if (message.isApproved()) {
      MBUtil.updateThreadMessageCount(thread.getCompanyId(),thread.getThreadId());
    }
    if ((message.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (message.getCategoryId() != MBCategoryConstants.DISCUSSION_CATEGORY_ID) && !message.isDraft()) {
      MBUtil.updateCategoryMessageCount(message.getCompanyId(),message.getCategoryId());
    }
    Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(MBThread.class);
    indexer.reindex(thread);
  }
  assetEntryLocalService.deleteEntry(message.getWorkflowClassName(),message.getMessageId());
  expandoRowLocalService.deleteRows(message.getMessageId());
  ratingsStatsLocalService.deleteStats(message.getWorkflowClassName(),message.getMessageId());
  if (!message.isDiscussion()) {
    resourceLocalService.deleteResource(message.getCompanyId(),message.getWorkflowClassName(),ResourceConstants.SCOPE_INDIVIDUAL,message.getMessageId());
  }
  mbMessagePersistence.remove(message);
  if (!message.isDiscussion()) {
    mbStatsUserLocalService.updateStatsUser(message.getGroupId(),message.getUserId());
  }
  workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(message.getCompanyId(),message.getGroupId(),message.getWorkflowClassName(),message.getMessageId());
  return message;
}
