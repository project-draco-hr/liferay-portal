{
  Indexer indexer=IndexerRegistryUtil.getIndexer(MBMessage.class);
  indexer.delete(message);
  if (message.isAttachments()) {
    long companyId=message.getCompanyId();
    String portletId=CompanyConstants.SYSTEM_STRING;
    long repositoryId=CompanyConstants.SYSTEM;
    String dirName=message.getAttachmentsDir();
    try {
      dlLocalService.deleteDirectory(companyId,portletId,repositoryId,dirName);
    }
 catch (    NoSuchDirectoryException nsde) {
      if (_log.isDebugEnabled()) {
        _log.debug(nsde.getMessage());
      }
    }
  }
  int count=mbMessagePersistence.countByThreadId(message.getThreadId());
  if (message.isRoot()) {
    mbMessageFlagLocalService.deleteQuestionAndAnswerFlags(message.getThreadId());
  }
 else   if (mbMessageFlagLocalService.hasAnswerFlag(message.getMessageId())) {
    mbMessageFlagService.deleteAnswerFlag(message.getMessageId());
  }
  if (count == 1) {
    long companyId=message.getCompanyId();
    String portletId=CompanyConstants.SYSTEM_STRING;
    long repositoryId=CompanyConstants.SYSTEM;
    String dirName=message.getThreadAttachmentsDir();
    try {
      dlLocalService.deleteDirectory(companyId,portletId,repositoryId,dirName);
    }
 catch (    NoSuchDirectoryException nsde) {
      if (_log.isDebugEnabled()) {
        _log.debug(nsde.getMessage());
      }
    }
    subscriptionLocalService.deleteSubscriptions(message.getCompanyId(),MBThread.class.getName(),message.getThreadId());
    mbThreadPersistence.remove(message.getThreadId());
    if ((message.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (message.getCategoryId() != MBCategoryConstants.DISCUSSION_CATEGORY_ID)) {
      MBCategory category=mbCategoryPersistence.findByPrimaryKey(message.getCategoryId());
      category.setThreadCount(category.getThreadCount() - 1);
      category.setMessageCount(category.getMessageCount() - 1);
      mbCategoryPersistence.update(category,false);
    }
  }
 else   if (count > 1) {
    MBThread thread=mbThreadPersistence.findByPrimaryKey(message.getThreadId());
    if (thread.getRootMessageId() == message.getMessageId()) {
      List<MBMessage> childrenMessages=mbMessagePersistence.findByT_P(message.getThreadId(),message.getMessageId());
      if (childrenMessages.size() > 1) {
        throw new RequiredMessageException(String.valueOf(message.getMessageId()));
      }
 else       if (childrenMessages.size() == 1) {
        MBMessage childMessage=childrenMessages.get(0);
        childMessage.setRootMessageId(childMessage.getMessageId());
        childMessage.setParentMessageId(MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID);
        mbMessagePersistence.update(childMessage,false);
        thread.setRootMessageId(childMessage.getMessageId());
        mbThreadPersistence.update(thread,false);
      }
    }
 else {
      List<MBMessage> childrenMessages=mbMessagePersistence.findByT_P(message.getThreadId(),message.getMessageId());
      if (childrenMessages.size() > 0) {
        Iterator<MBMessage> itr=childrenMessages.iterator();
        while (itr.hasNext()) {
          MBMessage childMessage=itr.next();
          childMessage.setParentMessageId(message.getParentMessageId());
          mbMessagePersistence.update(childMessage,false);
        }
      }
 else {
        MessageCreateDateComparator comparator=new MessageCreateDateComparator(true);
        MBMessage lastMessage=mbMessagePersistence.findByT_S_Last(thread.getThreadId(),WorkflowConstants.STATUS_APPROVED,comparator);
        if (message.getMessageId() == lastMessage.getMessageId()) {
          MBMessage parentMessage=mbMessagePersistence.findByPrimaryKey(message.getParentMessageId());
          thread.setLastPostByUserId(parentMessage.getUserId());
          thread.setLastPostDate(parentMessage.getModifiedDate());
        }
      }
    }
    thread.setMessageCount(count - 1);
    mbThreadPersistence.update(thread,false);
    if ((message.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) && (message.getCategoryId() != MBCategoryConstants.DISCUSSION_CATEGORY_ID)) {
      MBCategory category=mbCategoryPersistence.findByPrimaryKey(message.getCategoryId());
      category.setMessageCount(category.getMessageCount() - 1);
      mbCategoryPersistence.update(category,false);
    }
  }
  assetEntryLocalService.deleteEntry(MBMessage.class.getName(),message.getMessageId());
  expandoValueLocalService.deleteValues(MBMessage.class.getName(),message.getMessageId());
  socialActivityLocalService.deleteActivities(MBMessage.class.getName(),message.getMessageId());
  ratingsStatsLocalService.deleteStats(MBMessage.class.getName(),message.getMessageId());
  mbMessageFlagPersistence.removeByMessageId(message.getMessageId());
  if (!message.isDiscussion()) {
    resourceLocalService.deleteResource(message.getCompanyId(),MBMessage.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,message.getMessageId());
  }
  mbMessagePersistence.remove(message);
  if (!message.isDiscussion()) {
    mbStatsUserLocalService.updateStatsUser(message.getGroupId(),message.getUserId());
  }
  workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(message.getCompanyId(),message.getGroupId(),message.getWorkflowClassName(),message.getMessageId());
}
