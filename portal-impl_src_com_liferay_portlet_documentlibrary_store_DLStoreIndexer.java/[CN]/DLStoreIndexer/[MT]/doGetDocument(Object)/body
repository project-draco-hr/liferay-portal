{
  FileModel fileModel=(FileModel)obj;
  long folderId=DLFolderConstants.getFolderId(fileModel.getGroupId(),fileModel.getRepositoryId());
  DLFileEntry dlFileEntry=null;
  try {
    if (fileModel.getFileEntryId() > 0) {
      dlFileEntry=DLFileEntryLocalServiceUtil.getFileEntry(fileModel.getFileEntryId());
    }
 else {
      dlFileEntry=DLFileEntryLocalServiceUtil.getFileEntryByName(fileModel.getGroupId(),folderId,fileModel.getFileName());
      fileModel.setFileEntryId(dlFileEntry.getFileEntryId());
    }
  }
 catch (  NoSuchFileEntryException nsfe) {
    if (_log.isDebugEnabled()) {
      _log.debug("Not indexing document " + fileModel);
    }
    return null;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Indexing document " + fileModel);
  }
  boolean indexContent=true;
  InputStream is=null;
  try {
    try {
      Store hook=StoreFactory.getInstance();
      if (PropsValues.DL_FILE_INDEXING_MAX_SIZE == 0) {
        indexContent=false;
      }
 else       if (PropsValues.DL_FILE_INDEXING_MAX_SIZE != -1) {
        long size=hook.getFileSize(fileModel.getCompanyId(),fileModel.getRepositoryId(),fileModel.getFileName());
        if (size > PropsValues.DL_FILE_INDEXING_MAX_SIZE) {
          indexContent=false;
        }
      }
      if (indexContent) {
        String[] ignoreExtensions=PrefsPropsUtil.getStringArray(PropsKeys.DL_FILE_INDEXING_IGNORE_EXTENSIONS,StringPool.COMMA);
        if (ArrayUtil.contains(ignoreExtensions,StringPool.PERIOD + dlFileEntry.getExtension())) {
          indexContent=false;
        }
      }
      if (indexContent) {
        is=hook.getFileAsStream(fileModel.getCompanyId(),fileModel.getRepositoryId(),fileModel.getFileName());
      }
    }
 catch (    Exception e) {
    }
    if (indexContent && (is == null)) {
      if (_log.isDebugEnabled()) {
        _log.debug("Document " + fileModel + " does not have any content");
      }
      return null;
    }
    Document document=new DocumentImpl();
    document.addUID(fileModel.getPortletId(),fileModel.getRepositoryId(),fileModel.getFileName());
    long[] assetCategoryIds=fileModel.getAssetCategoryIds();
    if (assetCategoryIds == null) {
      assetCategoryIds=AssetCategoryLocalServiceUtil.getCategoryIds(DLFileEntry.class.getName(),dlFileEntry.getFileEntryId());
    }
    document.addKeyword(Field.ASSET_CATEGORY_IDS,assetCategoryIds);
    String[] assetCategoryNames=fileModel.getAssetCategoryNames();
    if (assetCategoryNames == null) {
      assetCategoryNames=AssetCategoryLocalServiceUtil.getCategoryNames(DLFileEntry.class.getName(),dlFileEntry.getFileEntryId());
    }
    document.addKeyword(Field.ASSET_CATEGORY_NAMES,assetCategoryNames);
    String[] assetTagNames=fileModel.getAssetTagNames();
    if (assetTagNames == null) {
      assetTagNames=AssetTagLocalServiceUtil.getTagNames(DLFileEntry.class.getName(),dlFileEntry.getFileEntryId());
    }
    document.addKeyword(Field.ASSET_TAG_NAMES,assetTagNames);
    document.addKeyword(Field.COMPANY_ID,fileModel.getCompanyId());
    if (indexContent) {
      try {
        document.addFile(Field.CONTENT,is,dlFileEntry.getTitle());
      }
 catch (      IOException ioe) {
        throw new SearchException("Cannot extract text from file" + fileModel);
      }
    }
    document.addText(Field.DESCRIPTION,dlFileEntry.getDescription());
    document.addKeyword(Field.ENTRY_CLASS_NAME,DLFileEntry.class.getName());
    document.addKeyword(Field.ENTRY_CLASS_PK,dlFileEntry.getFileEntryId());
    document.addKeyword(Field.FOLDER_ID,folderId);
    document.addKeyword(Field.GROUP_ID,getParentGroupId(fileModel.getGroupId()));
    Date modifiedDate=fileModel.getModifiedDate();
    if (modifiedDate == null) {
      modifiedDate=dlFileEntry.getModifiedDate();
    }
    document.addDate(Field.MODIFIED_DATE,modifiedDate);
    document.addKeyword(Field.PORTLET_ID,fileModel.getPortletId());
    String properties=fileModel.getProperties();
    if (properties == null) {
      properties=dlFileEntry.getLuceneProperties();
    }
    document.addText(Field.PROPERTIES,properties);
    document.addKeyword(Field.SCOPE_GROUP_ID,fileModel.getGroupId());
    DLFileVersion dlFileVersion=dlFileEntry.getFileVersion();
    document.addKeyword(Field.STATUS,dlFileVersion.getStatus());
    document.addText(Field.TITLE,dlFileEntry.getTitle());
    long userId=fileModel.getUserId();
    if (userId == 0) {
      userId=dlFileEntry.getUserId();
    }
    document.addKeyword(Field.USER_ID,userId);
    String userName=PortalUtil.getUserName(userId,dlFileEntry.getUserName());
    document.addKeyword(Field.USER_NAME,userName,true);
    document.addKeyword("extension",dlFileEntry.getExtension());
    document.addKeyword("fileEntryTypeId",dlFileEntry.getFileEntryTypeId());
    document.addKeyword("path",fileModel.getFileName());
    document.addKeyword("repositoryId",fileModel.getRepositoryId());
    ExpandoBridge expandoBridge=ExpandoBridgeFactoryUtil.getExpandoBridge(fileModel.getCompanyId(),DLFileEntry.class.getName(),dlFileVersion.getFileVersionId());
    ExpandoBridgeIndexerUtil.addAttributes(document,expandoBridge);
    if (dlFileEntry.getFileEntryTypeId() > 0) {
      addFileEntryTypeAttributes(document,dlFileVersion);
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Document " + fileModel + " indexed successfully");
    }
    return document;
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}
