{
  titles=CustomSQLUtil.keywords(titles);
  descriptions=CustomSQLUtil.keywords(descriptions,false);
  locations=CustomSQLUtil.keywords(locations);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_G_C_C_P_T_D_L_S_E_S);
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,CalendarBooking.class.getName(),"CalendarBooking.calendarBookingId",groupIds);
    }
    sql=StringUtil.replace(sql,"[$GROUP_ID$]",getGroupIds(groupIds));
    sql=StringUtil.replace(sql,"[$CALENDAR_ID$]",getCalendarIds(calendarIds));
    sql=StringUtil.replace(sql,"[$CALENDAR_RESOURCE_ID$]",getCalendarResourceIds(calendarResourceIds));
    sql=StringUtil.replace(sql,"[$RECURRENCE$]",getRecurrence(recurring));
    sql=StringUtil.replace(sql,"[$STATUS$]",getStatuses(statuses));
    if (parentCalendarBookingId < 0) {
      sql=StringUtil.replace(sql,"(parentCalendarBookingId = ?) AND",StringPool.BLANK);
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(title)",StringPool.LIKE,false,titles);
    sql=CustomSQLUtil.replaceKeywords(sql,"description",StringPool.LIKE,false,descriptions);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(location)",StringPool.LIKE,true,locations);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    StringBundler sb=new StringBundler();
    if (orderByComparator != null) {
      appendOrderByComparator(sb,"CalendarBooking.",orderByComparator);
    }
    sql=StringUtil.replace(sql,"[$ORDER_BY$]",sb.toString());
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addEntity("CalendarBooking",CalendarBookingImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    if (ArrayUtil.isNotEmpty(groupIds)) {
      qPos.add(groupIds);
    }
    if (ArrayUtil.isNotEmpty(calendarIds)) {
      qPos.add(calendarIds);
    }
    if (ArrayUtil.isNotEmpty(calendarResourceIds)) {
      qPos.add(calendarResourceIds);
    }
    if (parentCalendarBookingId >= 0) {
      qPos.add(parentCalendarBookingId);
    }
    qPos.add(titles,2);
    qPos.add(descriptions,2);
    qPos.add(locations,2);
    qPos.add(startTime);
    qPos.add(endTime);
    qPos.add(startTime);
    qPos.add(endTime);
    qPos.add(startTime);
    qPos.add(endTime);
    qPos.add(endTime);
    qPos.add(startTime);
    qPos.add(startTime);
    qPos.add(endTime);
    if (ArrayUtil.isNotEmpty(statuses)) {
      qPos.add(statuses);
    }
    return (List<CalendarBooking>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
