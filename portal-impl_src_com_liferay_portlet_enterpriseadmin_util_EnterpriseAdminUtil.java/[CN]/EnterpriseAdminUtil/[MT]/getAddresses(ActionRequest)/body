{
  List<Address> addresses=new ArrayList<Address>();
  int[] addressesIndexes=StringUtil.split(ParamUtil.getString(actionRequest,"addressesIndexes"),0);
  int addressPrimary=ParamUtil.getInteger(actionRequest,"addressPrimary");
  for (  int addressesIndex : addressesIndexes) {
    long addressId=ParamUtil.getLong(actionRequest,"addressId" + addressesIndex);
    String street1=ParamUtil.getString(actionRequest,"addressStreet1_" + addressesIndex);
    String street2=ParamUtil.getString(actionRequest,"addressStreet2_" + addressesIndex);
    String street3=ParamUtil.getString(actionRequest,"addressStreet3_" + addressesIndex);
    String city=ParamUtil.getString(actionRequest,"addressCity" + addressesIndex);
    String zip=ParamUtil.getString(actionRequest,"addressZip" + addressesIndex);
    if (Validator.isNull(street1) && Validator.isNull(street2) && Validator.isNull(street3)&& Validator.isNull(city)&& Validator.isNull(zip)) {
      continue;
    }
    long regionId=ParamUtil.getLong(actionRequest,"addressRegionId" + addressesIndex);
    long countryId=ParamUtil.getLong(actionRequest,"addressCountryId" + addressesIndex);
    int typeId=ParamUtil.getInteger(actionRequest,"addressTypeId" + addressesIndex);
    boolean mailing=ParamUtil.getBoolean(actionRequest,"addressMailing" + addressesIndex);
    boolean primary=false;
    if (addressesIndex == addressPrimary) {
      primary=true;
    }
    Address address=new AddressImpl();
    address.setAddressId(addressId);
    address.setStreet1(street1);
    address.setStreet2(street2);
    address.setStreet3(street3);
    address.setCity(city);
    address.setZip(zip);
    address.setRegionId(regionId);
    address.setCountryId(countryId);
    address.setTypeId(typeId);
    address.setMailing(mailing);
    address.setPrimary(primary);
    addresses.add(address);
  }
  return addresses;
}
