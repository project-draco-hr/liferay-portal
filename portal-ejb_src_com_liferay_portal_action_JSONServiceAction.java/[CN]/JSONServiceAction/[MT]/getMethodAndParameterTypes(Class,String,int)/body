{
  String key=classObj.getName() + "_METHOD_NAME_" + methodName+ "_PARAMETERS_COUNT_"+ paramtersCount;
  Object[] methodAndParameterTypes=(Object[])_methodCache.get(key);
  if (methodAndParameterTypes != null) {
    return methodAndParameterTypes;
  }
  Method method=null;
  Class[] parameterTypes=null;
  Method[] methods=classObj.getMethods();
  for (int i=0; i < methods.length; i++) {
    Method curMethod=methods[i];
    if (curMethod.getName().equals(methodName)) {
      Class[] curParameterTypes=curMethod.getParameterTypes();
      if (curParameterTypes.length == paramtersCount) {
        if (method != null) {
          _log.error("Obscure method name for class " + classObj + ", method "+ methodName+ ", and parameter count "+ paramtersCount);
          return null;
        }
 else {
          method=curMethod;
          parameterTypes=curParameterTypes;
        }
      }
    }
  }
  if (method != null) {
    methodAndParameterTypes=new Object[]{method,parameterTypes};
    _methodCache.put(key,methodAndParameterTypes);
    return methodAndParameterTypes;
  }
 else {
    _log.error("No method found for class " + classObj + ", method "+ methodName+ ", and parameter count "+ paramtersCount);
    return null;
  }
}
