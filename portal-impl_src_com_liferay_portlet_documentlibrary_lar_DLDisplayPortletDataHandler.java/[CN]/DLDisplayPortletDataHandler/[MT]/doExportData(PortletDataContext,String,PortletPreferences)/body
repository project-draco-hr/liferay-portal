{
  portletDataContext.addPermissions("com.liferay.portlet.documentlibrary",portletDataContext.getScopeGroupId());
  Element rootElement=addExportDataRootElement(portletDataContext);
  rootElement.addAttribute("group-id",String.valueOf(portletDataContext.getScopeGroupId()));
  long rootFolderId=GetterUtil.getLong(portletPreferences.getValue("rootFolderId",null));
  if (rootFolderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    ActionableDynamicQuery folderActionableDynamicQuery=new DLFolderActionableDynamicQuery(){
      @Override protected void addCriteria(      DynamicQuery dynamicQuery){
        portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
      }
      @Override protected void performAction(      Object object) throws PortalException, SystemException {
        DLFolder dlFolder=(DLFolder)object;
        Folder folder=DLAppLocalServiceUtil.getFolder(dlFolder.getFolderId());
        StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,folder);
      }
    }
;
    folderActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
    folderActionableDynamicQuery.performActions();
    ActionableDynamicQuery fileEntryActionableDynamicQuery=new DLFileEntryActionableDynamicQuery(){
      @Override protected void addCriteria(      DynamicQuery dynamicQuery){
        portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
      }
      @Override protected void performAction(      Object object) throws PortalException, SystemException {
        DLFileEntry dlFileEntry=(DLFileEntry)object;
        FileEntry fileEntry=DLAppLocalServiceUtil.getFileEntry(dlFileEntry.getFileEntryId());
        StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,fileEntry);
      }
    }
;
    fileEntryActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
    fileEntryActionableDynamicQuery.performActions();
    return getExportDataRootElementString(rootElement);
  }
  List<Long> folderIds=getDescendantFolderIds(portletDataContext.getScopeGroupId(),rootFolderId);
  folderIds.add(rootFolderId);
  for (  Long folderId : folderIds) {
    Folder folder=DLAppLocalServiceUtil.getFolder(folderId);
    StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,folder);
  }
  final List<Long> fileEntryParentFolderIds=new ArrayList<Long>(folderIds);
  ActionableDynamicQuery fileEntryActionableDynamicQuery=new DLFileEntryActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
      Property property=PropertyFactoryUtil.forName("folderId");
      Long[] folderIds=ArrayUtil.toArray(ArrayUtil.toLongArray(fileEntryParentFolderIds));
      dynamicQuery.add(property.in(folderIds));
    }
    @Override protected void performAction(    Object object) throws PortalException, SystemException {
      DLFileEntry dlFileEntry=(DLFileEntry)object;
      FileEntry fileEntry=DLAppLocalServiceUtil.getFileEntry(dlFileEntry.getFileEntryId());
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,fileEntry);
    }
  }
;
  fileEntryActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  fileEntryActionableDynamicQuery.performActions();
  Folder rootFolder=DLAppLocalServiceUtil.getFolder(rootFolderId);
  rootElement.addAttribute("root-folder-id",String.valueOf(rootFolder.getFolderId()));
  rootElement.addAttribute("default-repository",String.valueOf(rootFolder.isDefaultRepository()));
  return getExportDataRootElementString(rootElement);
}
