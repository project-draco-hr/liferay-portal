{
  int x=annotation.indexOf(StringPool.OPEN_PARENTHESIS);
  String annotationParameters=stripQuotes(annotation.substring(x + 1),CharPool.QUOTE);
  x=-1;
  int y=-1;
  String previousParameterName=StringPool.BLANK;
  while (true) {
    x=annotationParameters.indexOf(StringPool.EQUAL,x + 1);
    if (x == -1) {
      return;
    }
    if (Validator.isNotNull(previousParameterName)) {
      y=annotationParameters.lastIndexOf(StringPool.COMMA,x);
      if (y == -1) {
        return;
      }
    }
    String parameterName=StringUtil.trim(annotationParameters.substring(y + 1,x));
    if (Validator.isNull(previousParameterName) || (previousParameterName.compareTo(parameterName) <= 0)) {
      previousParameterName=parameterName;
      continue;
    }
    x=annotation.indexOf(StringPool.AT);
    y=annotation.indexOf(StringPool.OPEN_PARENTHESIS);
    if ((x == -1) || (x > y)) {
      return;
    }
    StringBundler sb=new StringBundler(8);
    sb.append("sort: ");
    if (Validator.isNotNull(javaTermName)) {
      sb.append(javaTermName);
      sb.append(StringPool.POUND);
    }
    String annotationName=annotation.substring(x,y);
    sb.append(annotationName);
    sb.append(StringPool.POUND);
    sb.append(parameterName);
    sb.append(StringPool.SPACE);
    sb.append(fileName);
    processErrorMessage(fileName,sb.toString());
    return;
  }
}
