{
  JavaTerm previousJavaTerm=null;
  Iterator<JavaTerm> itr=javaTerms.iterator();
  while (itr.hasNext()) {
    JavaTerm javaTerm=itr.next();
    if (previousJavaTerm == null) {
      previousJavaTerm=javaTerm;
      continue;
    }
    int javaTermLineCount=javaTerm.getLineCount();
    String javaTermName=javaTerm.getName();
    if (isExcluded(_javaTermSortExclusions,fileName,javaTermLineCount,javaTermName)) {
      previousJavaTerm=javaTerm;
      continue;
    }
    String javaTermContent=javaTerm.getContent();
    String previousJavaTermContent=previousJavaTerm.getContent();
    if (previousJavaTerm.getLineCount() > javaTermLineCount) {
      String previousJavaTermName=previousJavaTerm.getName();
      String javaTermNameLowerCase=javaTermName.toLowerCase();
      String previousJavaTermNameLowerCase=previousJavaTermName.toLowerCase();
      if (fileName.contains("persistence") && ((previousJavaTermName.startsWith("doCount") && javaTermName.startsWith("doCount")) || (previousJavaTermName.startsWith("doFind") && javaTermName.startsWith("doFind")) || (previousJavaTermNameLowerCase.startsWith("count") && javaTermNameLowerCase.startsWith("count"))|| (previousJavaTermNameLowerCase.startsWith("filter") && javaTermNameLowerCase.startsWith("filter"))|| (previousJavaTermNameLowerCase.startsWith("find") && javaTermNameLowerCase.startsWith("find"))|| (previousJavaTermNameLowerCase.startsWith("join") && javaTermNameLowerCase.startsWith("join")))) {
      }
 else {
        content=StringUtil.replaceFirst(content,"\n" + javaTermContent,"\n" + previousJavaTermContent);
        content=StringUtil.replaceLast(content,"\n" + previousJavaTermContent,"\n" + javaTermContent);
        return content;
      }
    }
    previousJavaTerm=javaTerm;
  }
  return content;
}
