{
  if (linePart == null) {
    String combinedLine=previousLine;
    if (extraSpace) {
      combinedLine+=StringPool.SPACE;
    }
    combinedLine+=trimmedLine;
    String nextLine=getNextLine(content,lineCount);
    if (removeTabOnNextLine) {
      return StringUtil.replace(content,"\n" + previousLine + "\n"+ line+ "\n"+ nextLine+ "\n","\n" + combinedLine + "\n"+ nextLine.substring(1)+ "\n");
    }
    if (line.endsWith(StringPool.OPEN_CURLY_BRACE) && !previousLine.contains(" class ") && Validator.isNull(nextLine)) {
      return StringUtil.replace(content,"\n" + previousLine + "\n"+ line+ "\n","\n" + combinedLine);
    }
    return StringUtil.replace(content,"\n" + previousLine + "\n"+ line+ "\n","\n" + combinedLine + "\n");
  }
  String firstLine=previousLine;
  String secondLine=line;
  if (addToPreviousLine) {
    firstLine+=linePart;
    secondLine=StringUtil.replaceFirst(line,linePart,StringPool.BLANK);
  }
 else {
    if (((linePart.length() + lineLength) <= _MAX_LINE_LENGTH) && (line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON))) {
      firstLine=StringUtil.replaceLast(firstLine,StringUtil.trim(linePart),StringPool.BLANK);
      secondLine=StringUtil.replaceLast(line,StringPool.TAB,StringPool.TAB + linePart);
    }
 else {
      processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
      return null;
    }
  }
  return StringUtil.replace(content,"\n" + previousLine + "\n"+ line+ "\n","\n" + firstLine + "\n"+ secondLine+ "\n");
}
