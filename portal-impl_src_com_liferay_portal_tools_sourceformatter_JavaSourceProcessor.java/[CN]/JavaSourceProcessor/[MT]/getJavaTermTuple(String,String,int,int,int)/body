{
  line=StringUtil.replace(line," synchronized ",StringPool.SPACE);
  int pos=line.indexOf(StringPool.OPEN_PARENTHESIS);
  if (line.startsWith(StringPool.TAB + "public static final ") && (line.contains(StringPool.EQUAL) || (line.endsWith(StringPool.SEMICOLON) && (pos == -1)))) {
    return new Tuple(getVariableName(line),TYPE_VARIABLE_PUBLIC_STATIC_FINAL);
  }
 else   if (line.startsWith(StringPool.TAB + "public static ")) {
    if (line.startsWith(StringPool.TAB + "public static class ") || line.startsWith(StringPool.TAB + "public static enum") || line.startsWith(StringPool.TAB + "public static interface")) {
      return new Tuple(getClassName(line),TYPE_CLASS_PUBLIC_STATIC);
    }
    if (line.contains(StringPool.EQUAL) || (line.endsWith(StringPool.SEMICOLON) && (pos == -1))) {
      return new Tuple(getVariableName(line),TYPE_VARIABLE_PUBLIC_STATIC);
    }
    if (pos != -1) {
      return new Tuple(getConstructorOrMethodName(line,pos),TYPE_METHOD_PUBLIC_STATIC);
    }
  }
 else   if (line.startsWith(StringPool.TAB + "public ")) {
    if (line.startsWith(StringPool.TAB + "public abstract class ") || line.startsWith(StringPool.TAB + "public class ") || line.startsWith(StringPool.TAB + "public enum ")|| line.startsWith(StringPool.TAB + "public interface ")) {
      return new Tuple(getClassName(line),TYPE_CLASS_PUBLIC);
    }
    if (line.contains(StringPool.EQUAL) || (line.endsWith(StringPool.SEMICOLON) && (pos == -1))) {
      return new Tuple(getVariableName(line),TYPE_VARIABLE_PUBLIC);
    }
    if (pos != -1) {
      int spaceCount=StringUtil.count(line.substring(0,pos),StringPool.SPACE);
      if (spaceCount == 1) {
        return new Tuple(getConstructorOrMethodName(line,pos),TYPE_CONSTRUCTOR_PUBLIC);
      }
      if (spaceCount > 1) {
        return new Tuple(getConstructorOrMethodName(line,pos),TYPE_METHOD_PUBLIC);
      }
    }
  }
 else   if (line.startsWith(StringPool.TAB + "protected static final ")) {
    if (line.contains(StringPool.EQUAL) || (line.endsWith(StringPool.SEMICOLON) && (pos == -1))) {
      return new Tuple(getVariableName(line),TYPE_VARIABLE_PROTECTED_STATIC_FINAL);
    }
  }
 else   if (line.startsWith(StringPool.TAB + "protected static ")) {
    if (line.startsWith(StringPool.TAB + "protected static class ") || line.startsWith(StringPool.TAB + "protected static enum ") || line.startsWith(StringPool.TAB + "protected static interface ")) {
      return new Tuple(getClassName(line),TYPE_CLASS_PROTECTED_STATIC);
    }
    if (line.contains(StringPool.EQUAL) || (line.endsWith(StringPool.SEMICOLON) && (pos == -1))) {
      return new Tuple(getVariableName(line),TYPE_VARIABLE_PROTECTED_STATIC);
    }
    if (pos != -1) {
      return new Tuple(getConstructorOrMethodName(line,pos),TYPE_METHOD_PROTECTED_STATIC);
    }
  }
 else   if (line.startsWith(StringPool.TAB + "protected ")) {
    if (line.startsWith(StringPool.TAB + "protected abstract class ") || line.startsWith(StringPool.TAB + "protected class ") || line.startsWith(StringPool.TAB + "protected enum ")|| line.startsWith(StringPool.TAB + "protected interface ")) {
      return new Tuple(getClassName(line),TYPE_CLASS_PROTECTED);
    }
    if (pos != -1) {
      if (!line.contains(StringPool.EQUAL)) {
        int spaceCount=StringUtil.count(line.substring(0,pos),StringPool.SPACE);
        if (spaceCount == 1) {
          return new Tuple(getConstructorOrMethodName(line,pos),TYPE_CONSTRUCTOR_PROTECTED);
        }
        if (spaceCount > 1) {
          return new Tuple(getConstructorOrMethodName(line,pos),TYPE_METHOD_PROTECTED);
        }
      }
    }
    return new Tuple(getVariableName(line),TYPE_VARIABLE_PROTECTED);
  }
 else   if (line.startsWith(StringPool.TAB + "private static final ")) {
    if (line.contains(StringPool.EQUAL) || (line.endsWith(StringPool.SEMICOLON) && (pos == -1))) {
      return new Tuple(getVariableName(line),TYPE_VARIABLE_PRIVATE_STATIC_FINAL);
    }
  }
 else   if (line.startsWith(StringPool.TAB + "private static ")) {
    if (line.startsWith(StringPool.TAB + "private static class ") || line.startsWith(StringPool.TAB + "private static enum ") || line.startsWith(StringPool.TAB + "private static interface ")) {
      return new Tuple(getClassName(line),TYPE_CLASS_PRIVATE_STATIC);
    }
    if (line.contains(StringPool.EQUAL) || (line.endsWith(StringPool.SEMICOLON) && (pos == -1))) {
      return new Tuple(getVariableName(line),TYPE_VARIABLE_PRIVATE_STATIC);
    }
    if (pos != -1) {
      return new Tuple(getConstructorOrMethodName(line,pos),TYPE_METHOD_PRIVATE_STATIC);
    }
  }
 else   if (line.startsWith(StringPool.TAB + "private ")) {
    if (line.startsWith(StringPool.TAB + "private abstract class ") || line.startsWith(StringPool.TAB + "private class ") || line.startsWith(StringPool.TAB + "private enum ")|| line.startsWith(StringPool.TAB + "private interface ")) {
      return new Tuple(getClassName(line),TYPE_CLASS_PRIVATE);
    }
    if (line.contains(StringPool.EQUAL) || (line.endsWith(StringPool.SEMICOLON) && (pos == -1))) {
      return new Tuple(getVariableName(line),TYPE_VARIABLE_PRIVATE);
    }
    if (pos != -1) {
      int spaceCount=StringUtil.count(line.substring(0,pos),StringPool.SPACE);
      if (spaceCount == 1) {
        return new Tuple(getConstructorOrMethodName(line,pos),TYPE_CONSTRUCTOR_PRIVATE);
      }
      if (spaceCount > 1) {
        return new Tuple(getConstructorOrMethodName(line,pos),TYPE_METHOD_PRIVATE);
      }
    }
  }
  if (numLines < maxLines) {
    int posStartNextLine=content.indexOf(StringPool.NEW_LINE,index) + 1;
    int posEndNextline=content.indexOf(StringPool.NEW_LINE,posStartNextLine);
    String nextLine=content.substring(posStartNextLine,posEndNextline);
    if (Validator.isNull(nextLine)) {
      return null;
    }
    nextLine=StringUtil.trimLeading(nextLine);
    return getJavaTermTuple(line + StringPool.SPACE + nextLine,content,posStartNextLine,numLines + 1,maxLines);
  }
 else {
    return null;
  }
}
