{
  Set<String> annotationsExclusions=getAnnotationsExclusions();
  for (  Annotation annotation : javaField.getAnnotations()) {
    Type annotationType=annotation.getType();
    String annotationTypeString=annotationType.toString();
    if (annotationsExclusions.contains(annotationTypeString)) {
      return content;
    }
  }
  Type javaClassType=javaClass.asType();
  if ((javaClass.isEnum() && javaClassType.equals(javaField.getType())) || javaField.isFinal()) {
    return content;
  }
  StringBundler sb=new StringBundler(4);
  sb.append("(\\b|\\.)");
  sb.append(javaField.getName());
  sb.append(" (=)|(\\+\\+)|(--)|(\\+=)|(-=)|(\\*=)|(/=)|(%=)");
  sb.append("|(\\|=)|(&=)|(^=) ");
  Pattern pattern=Pattern.compile(sb.toString());
  for (  com.thoughtworks.qdox.model.JavaClass javaSubClass : javaClasses) {
    for (    JavaMethod javaMethod : javaSubClass.getMethods()) {
      if (javaMethod.isConstructor() && (javaSubClass == javaClass)) {
        continue;
      }
      Matcher matcher=pattern.matcher(javaMethod.getCodeBlock());
      if (matcher.find()) {
        return content;
      }
    }
  }
  if (javaField.isStatic()) {
    return getChangedFieldTypeContent(content,javaField,"private static","private static final");
  }
  return getChangedFieldTypeContent(content,javaField,"private","private final");
}
