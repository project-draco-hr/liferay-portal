{
  if (isGenerated(content)) {
    return content;
  }
  String className=file.getName();
  int pos=className.lastIndexOf(StringPool.PERIOD);
  className=className.substring(0,pos);
  String packagePath=fileName;
  int packagePathX=packagePath.indexOf("/src/");
  if (packagePathX == -1) {
    packagePathX=packagePath.indexOf("/integration/") + 8;
  }
  int packagePathY=packagePath.lastIndexOf(StringPool.SLASH);
  if ((packagePathX + 5) >= packagePathY) {
    packagePath=StringPool.BLANK;
  }
 else {
    packagePath=packagePath.substring(packagePathX + 5,packagePathY);
  }
  packagePath=StringUtil.replace(packagePath,StringPool.SLASH,StringPool.PERIOD);
  if (packagePath.endsWith(".model")) {
    if (content.contains("extends " + className + "Model")) {
      return content;
    }
  }
  String newContent=content;
  if (newContent.contains("$\n */")) {
    processErrorMessage(fileName,"*: " + fileName);
    newContent=StringUtil.replace(newContent,"$\n */","$\n *\n */");
  }
  newContent=fixCopyright(newContent,absolutePath,fileName);
  if (newContent.contains(className + ".java.html")) {
    processErrorMessage(fileName,"Java2HTML: " + fileName);
  }
  if (newContent.contains(" * @author Raymond Aug") && !newContent.contains(" * @author Raymond Aug\u00e9")) {
    newContent=newContent.replaceFirst("Raymond Aug.++","Raymond Aug\u00e9");
    processErrorMessage(fileName,"UTF-8: " + fileName);
  }
  newContent=fixDataAccessConnection(className,newContent);
  newContent=fixSessionKey(fileName,newContent,sessionKeyPattern);
  newContent=StringUtil.replace(newContent,new String[]{"com.liferay.portal.PortalException","com.liferay.portal.SystemException","com.liferay.util.LocalizationUtil","private static final Log _log"},new String[]{"com.liferay.portal.kernel.exception.PortalException","com.liferay.portal.kernel.exception.SystemException","com.liferay.portal.kernel.util.LocalizationUtil","private static Log _log"});
  newContent=StringUtil.replace(newContent," final static "," static final ");
  newContent=fixCompatClassImports(absolutePath,newContent);
  newContent=stripJavaImports(newContent,packagePath,className);
  newContent=StringUtil.replace(newContent,new String[]{";\n/**","\t/*\n\t *","catch(","else{","if(","for(","while(","List <","){\n","]{\n",";;\n"},new String[]{";\n\n/**","\t/**\n\t *","catch (","else {","if (","for (","while (","List<",") {\n","] {\n",";\n"});
  while (true) {
    Matcher matcher=_incorrectLineBreakPattern.matcher(newContent);
    if (!matcher.find()) {
      break;
    }
    newContent=StringUtil.replaceFirst(newContent,StringPool.NEW_LINE,StringPool.BLANK,matcher.start());
  }
  newContent=sortAnnotations(newContent,StringPool.BLANK);
  Matcher matcher=_logPattern.matcher(newContent);
  if (matcher.find()) {
    String logClassName=matcher.group(1);
    if (!logClassName.equals(className)) {
      newContent=StringUtil.replaceLast(newContent,logClassName + ".class)",className + ".class)");
    }
  }
  if (!isExcluded(_staticLogVariableExclusions,absolutePath)) {
    newContent=StringUtil.replace(newContent,"private Log _log","private static Log _log");
  }
  if (newContent.contains("*/\npackage ")) {
    processErrorMessage(fileName,"package: " + fileName);
  }
  if (!newContent.endsWith("\n\n}") && !newContent.endsWith("{\n}")) {
    processErrorMessage(fileName,"}: " + fileName);
  }
  if (portalSource && !_allowUseServiceUtilInServiceImpl && !className.equals("BaseServiceImpl")&& className.endsWith("ServiceImpl")&& newContent.contains("ServiceUtil.")) {
    processErrorMessage(fileName,"ServiceUtil: " + fileName);
  }
  if (portalSource && !isExcluded(_upgradeServiceUtilExclusions,absolutePath) && fileName.contains("/portal/upgrade/")&& !fileName.contains("/test/")&& newContent.contains("ServiceUtil.")) {
    processErrorMessage(fileName,"ServiceUtil: " + fileName);
  }
  if (!isRunsOutsidePortal(absolutePath) && !isExcluded(_proxyExclusions,absolutePath) && newContent.contains("import java.lang.reflect.Proxy;")) {
    processErrorMessage(fileName,"Proxy: " + fileName);
  }
  if (newContent.contains("import edu.emory.mathcs.backport.java")) {
    processErrorMessage(fileName,"edu.emory.mathcs.backport.java: " + fileName);
  }
  if (newContent.contains("import jodd.util.StringPool")) {
    processErrorMessage(fileName,"jodd.util.StringPool: " + fileName);
  }
  if (newContent.contains("com.liferay.portal.kernel.util.UnmodifiableList")) {
    processErrorMessage(fileName,"Use java.util.Collections.unmodifiableList instead of " + "com.liferay.portal.kernel.util.UnmodifiableList: " + fileName);
  }
  for (int pos1=-1; ; ) {
    pos1=newContent.indexOf(StringPool.TAB + "try {",pos1 + 1);
    if (pos1 == -1) {
      break;
    }
    int pos2=newContent.indexOf(StringPool.TAB + "try {",pos1 + 1);
    int pos3=newContent.indexOf("\"select count(",pos1);
    if ((pos2 != -1) && (pos3 != -1) && (pos2 < pos3)) {
      continue;
    }
    int pos4=newContent.indexOf("rs.getLong(1)",pos1);
    int pos5=newContent.indexOf(StringPool.TAB + "finally {",pos1);
    if ((pos3 == -1) || (pos4 == -1) || (pos5 == -1)) {
      break;
    }
    if ((pos3 < pos4) && (pos4 < pos5)) {
      processErrorMessage(fileName,"Use getInt(1) for count: " + fileName);
    }
  }
  if (content.contains("implements ProcessCallable") && !content.contains("private static final long serialVersionUID")) {
    processErrorMessage(fileName,"Assign ProcessCallable implementation a serialVersionUID: " + fileName);
  }
  checkLanguageKeys(fileName,newContent,languageKeyPattern);
  newContent=StringUtil.replace(newContent,StringPool.TAB + "for (;;) {",StringPool.TAB + "while (true) {");
  if (_checkUnprocessedExceptions && !fileName.contains("/test/")) {
    checkUnprocessedExceptions(newContent,file,packagePath,fileName);
  }
  if (!isExcluded(_secureRandomExclusions,absolutePath) && !isRunsOutsidePortal(absolutePath) && content.contains("java.security.SecureRandom")&& !content.contains("javax.crypto.KeyGenerator")) {
    processErrorMessage(fileName,"Use SecureRandomUtil or com.liferay.portal.kernel.security." + "SecureRandom instead of java.security.SecureRandom: " + fileName);
  }
  checkLogLevel(newContent,fileName,"debug");
  checkLogLevel(newContent,fileName,"info");
  checkLogLevel(newContent,fileName,"trace");
  checkLogLevel(newContent,fileName,"warn");
  checkSystemEventAnnotations(newContent,fileName);
  if (fileName.contains("/upgrade/") && newContent.contains("LocaleUtil.getDefault()")) {
    processErrorMessage(fileName,"Use UpgradeProcessUtil.getDefaultLanguageId(companyId) " + "instead of LocaleUtil.getDefault(): " + fileName);
  }
  newContent=StringUtil.replace(newContent," static interface "," interface ");
  newContent=fixSystemExceptions(newContent);
  if (portalSource && fileName.contains("/test/integration/")) {
    newContent=StringUtil.replace(newContent,"FinderCacheUtil.clearCache();",StringPool.BLANK);
  }
  newContent=fixIncorrectParameterTypeForLanguageUtil(newContent,false,fileName);
  if (portalSource && fileName.contains("/portal-service/") && content.contains("import javax.servlet.jsp.")) {
    processErrorMessage(fileName,"Never import javax.servlet.jsp.* from portal-service " + fileName);
  }
  newContent=checkImmutableAndStaticableFieldTypes(fileName,packagePath,className,newContent);
  checkFinderCacheInterfaceMethod(fileName,newContent);
  newContent=fixIncorrectEmptyLineBeforeCloseCurlyBrace(newContent,fileName);
  pos=newContent.indexOf("\npublic ");
  if (pos != -1) {
    String javaClassContent=newContent.substring(pos + 1);
    String beforeJavaClass=newContent.substring(0,pos + 1);
    int javaClassLineCount=StringUtil.count(beforeJavaClass,"\n") + 1;
    newContent=formatJavaTerms(fileName,absolutePath,newContent,javaClassContent,javaClassLineCount,_javaTermAccessLevelModifierExclusions,_javaTermSortExclusions,_testAnnotationsExclusions);
  }
  newContent=formatJava(fileName,absolutePath,newContent);
  return StringUtil.replace(newContent,"\n\n\n","\n\n");
}
