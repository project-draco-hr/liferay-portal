{
  Iterator<JavaTerm> itr=javaTerms.iterator();
  while (itr.hasNext()) {
    JavaTerm javaTerm=itr.next();
    if (!isInJavaTermTypeGroup(javaTerm.getType(),TYPE_METHOD)) {
      continue;
    }
    String javaTermContent="\n" + javaTerm.getContent();
    Matcher matcher=_methodNameAndParametersPattern.matcher(javaTermContent);
    if (!matcher.find()) {
      continue;
    }
    String methodNameAndParameters=matcher.group();
    String[] lines=StringUtil.splitLines(methodNameAndParameters);
    if (lines.length == 1) {
      if (methodNameAndParameters.endsWith("{\n") && javaTermContent.contains(methodNameAndParameters + "\n") && !javaTermContent.contains(methodNameAndParameters + "\n" + StringPool.TAB+ StringPool.TAB+ "/*")&& !javaTermContent.contains(methodNameAndParameters + "\n" + StringPool.TAB+ StringPool.TAB+ "// ")) {
        String trimmedJavaTermContent=StringUtil.trimTrailing(javaTermContent);
        if (!trimmedJavaTermContent.endsWith("\n\n" + StringPool.TAB + StringPool.CLOSE_CURLY_BRACE)) {
          content=StringUtil.replace(content,methodNameAndParameters + "\n",methodNameAndParameters);
        }
      }
      continue;
    }
    if (methodNameAndParameters.endsWith("{\n") && !javaTermContent.contains(methodNameAndParameters + "\n") && !javaTermContent.contains(methodNameAndParameters + StringPool.TAB + StringPool.CLOSE_CURLY_BRACE)) {
      content=StringUtil.replace(content,methodNameAndParameters,methodNameAndParameters + "\n");
    }
    boolean throwsException=methodNameAndParameters.contains(StringPool.TAB + "throws ");
    String newMethodNameAndParameters=methodNameAndParameters;
    int expectedTabCount=-1;
    for (int i=0; i < lines.length; i++) {
      String line=lines[i];
      if (line.contains(StringPool.TAB + "throws ")) {
        newMethodNameAndParameters=fixLeadingTabs(newMethodNameAndParameters,line,2);
        break;
      }
      if (expectedTabCount == -1) {
        if (line.endsWith(StringPool.OPEN_PARENTHESIS)) {
          expectedTabCount=Math.max(getLeadingTabCount(line),1) + 1;
          if (throwsException && (expectedTabCount == 2)) {
            expectedTabCount+=1;
          }
        }
      }
 else {
        String previousLine=lines[i - 1];
        if (previousLine.endsWith(StringPool.COMMA) || previousLine.endsWith(StringPool.OPEN_PARENTHESIS)) {
          newMethodNameAndParameters=fixLeadingTabs(newMethodNameAndParameters,line,expectedTabCount);
        }
 else {
          newMethodNameAndParameters=fixLeadingTabs(newMethodNameAndParameters,line,getLeadingTabCount(previousLine) + 1);
        }
      }
    }
    content=StringUtil.replace(content,methodNameAndParameters,newMethodNameAndParameters);
  }
  return content;
}
