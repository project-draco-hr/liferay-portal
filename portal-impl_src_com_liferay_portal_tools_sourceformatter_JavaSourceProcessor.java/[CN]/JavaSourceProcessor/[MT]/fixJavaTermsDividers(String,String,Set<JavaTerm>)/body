{
  JavaTerm previousJavaTerm=null;
  Iterator<JavaTerm> itr=javaTerms.iterator();
  while (itr.hasNext()) {
    JavaTerm javaTerm=itr.next();
    if (previousJavaTerm == null) {
      previousJavaTerm=javaTerm;
      continue;
    }
    String javaTermContent=javaTerm.getContent();
    if (javaTermContent.startsWith(StringPool.TAB + "//") || javaTermContent.contains(StringPool.TAB + "static {")) {
      previousJavaTerm=javaTerm;
      continue;
    }
    String previousJavaTermContent=previousJavaTerm.getContent();
    if (previousJavaTermContent.startsWith(StringPool.TAB + "//") || previousJavaTermContent.contains(StringPool.TAB + "static {")) {
      previousJavaTerm=javaTerm;
      continue;
    }
    String javaTermName=javaTerm.getName();
    String excluded=null;
    if (_javaTermSortExclusions != null) {
      excluded=_javaTermSortExclusions.getProperty(fileName + StringPool.AT + javaTerm.getLineCount());
      if (excluded == null) {
        excluded=_javaTermSortExclusions.getProperty(fileName + StringPool.AT + javaTermName);
      }
      if (excluded == null) {
        excluded=_javaTermSortExclusions.getProperty(fileName);
      }
    }
    if (excluded != null) {
      previousJavaTerm=javaTerm;
      continue;
    }
    String previousJavaTermName=previousJavaTerm.getName();
    boolean requiresEmptyLine=false;
    if (previousJavaTerm.getType() != javaTerm.getType()) {
      requiresEmptyLine=true;
    }
 else     if (!isInJavaTermTypeGroup(javaTerm.getType(),TYPE_VARIABLE)) {
      requiresEmptyLine=true;
    }
 else     if (previousJavaTermName.equals(previousJavaTermName.toUpperCase()) || javaTermName.equals(javaTermName.toUpperCase())) {
      requiresEmptyLine=true;
    }
 else     if (hasAnnotationCommentOrJavadoc(javaTermContent) || hasAnnotationCommentOrJavadoc(previousJavaTermContent)) {
      requiresEmptyLine=true;
    }
 else     if ((previousJavaTerm.getType() == TYPE_VARIABLE_PRIVATE_STATIC) && (previousJavaTermName.equals("_log") || previousJavaTermName.equals("_instance"))) {
      requiresEmptyLine=true;
    }
 else     if (previousJavaTermContent.contains("\n\n\t") || javaTermContent.contains("\n\n\t")) {
      requiresEmptyLine=true;
    }
    if (requiresEmptyLine) {
      if (!content.contains("\n\n" + javaTermContent)) {
        return StringUtil.replace(content,"\n" + javaTermContent,"\n\n" + javaTermContent);
      }
    }
 else     if (content.contains("\n\n" + javaTermContent)) {
      return StringUtil.replace(content,"\n\n" + javaTermContent,"\n" + javaTermContent);
    }
    previousJavaTerm=javaTerm;
  }
  return content;
}
