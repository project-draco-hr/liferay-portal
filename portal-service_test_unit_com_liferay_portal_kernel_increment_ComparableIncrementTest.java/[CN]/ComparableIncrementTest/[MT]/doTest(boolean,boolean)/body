{
  ComparableIncrement<Integer> comparableIncrement1=new IntegerIncrement(withIncreasing);
  ComparableIncrement<Integer> comparableIncrement2=null;
  int actual=0;
  int expected=0;
  if (testIncrease) {
    actual=_START + 1;
    expected=_START + 1;
    if (!withIncreasing) {
      expected=_START;
    }
    comparableIncrement2=comparableIncrement1.increaseForNew(actual);
  }
 else {
    actual=_START - 1;
    expected=_START - 1;
    if (withIncreasing) {
      expected=_START;
    }
    comparableIncrement2=comparableIncrement1.decreaseForNew(actual);
  }
  Assert.assertNotSame(comparableIncrement1,comparableIncrement2);
  Assert.assertEquals(_START,comparableIncrement1.getValue());
  Assert.assertEquals(expected,comparableIncrement2.getValue());
  if (testIncrease) {
    actual=_START + 1;
    expected=_START + 1;
    if (!withIncreasing) {
      expected=_START;
    }
    comparableIncrement1.increase(actual);
  }
 else {
    actual=_START - 1;
    expected=_START - 1;
    if (withIncreasing) {
      expected=_START;
    }
    comparableIncrement1.decrease(actual);
  }
  Assert.assertEquals(expected,comparableIncrement1.getValue());
  comparableIncrement1=new IntegerIncrement(withIncreasing);
  if (testIncrease) {
    actual=_START - 1;
    expected=_START;
    comparableIncrement1.increase(actual);
  }
 else {
    actual=_START + 1;
    expected=_START;
    comparableIncrement1.decrease(actual);
  }
  Assert.assertEquals(expected,comparableIncrement1.getValue());
}
