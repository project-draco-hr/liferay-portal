{
  String ruleGroupPath=ExportImportPathUtil.getModelPath(portletDataContext,MDRRuleGroup.class.getName(),rule.getRuleGroupId());
  MDRRuleGroup ruleGroup=(MDRRuleGroup)portletDataContext.getZipEntryAsObject(ruleGroupPath);
  StagedModelDataHandlerUtil.importReferenceStagedModel(portletDataContext,ruleGroup);
  Map<Long,Long> ruleGroupIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(MDRRuleGroup.class);
  long ruleGroupId=MapUtil.getLong(ruleGroupIds,rule.getRuleGroupId(),rule.getRuleGroupId());
  ServiceContext serviceContext=portletDataContext.createServiceContext(rule);
  serviceContext.setUserId(portletDataContext.getUserId(rule.getUserUuid()));
  MDRRule importedRule=null;
  if (portletDataContext.isDataStrategyMirror()) {
    MDRRule existingRule=MDRRuleLocalServiceUtil.fetchMDRRuleByUuidAndGroupId(rule.getUuid(),portletDataContext.getScopeGroupId());
    if (existingRule == null) {
      serviceContext.setUuid(rule.getUuid());
      importedRule=MDRRuleLocalServiceUtil.addRule(ruleGroupId,rule.getNameMap(),rule.getDescriptionMap(),rule.getType(),rule.getTypeSettingsProperties(),serviceContext);
    }
 else {
      importedRule=MDRRuleLocalServiceUtil.updateRule(existingRule.getRuleId(),rule.getNameMap(),rule.getDescriptionMap(),rule.getType(),rule.getTypeSettingsProperties(),serviceContext);
    }
  }
 else {
    importedRule=MDRRuleLocalServiceUtil.addRule(ruleGroupId,rule.getNameMap(),rule.getDescriptionMap(),rule.getType(),rule.getTypeSettingsProperties(),serviceContext);
  }
  portletDataContext.importClassedModel(rule,importedRule);
}
