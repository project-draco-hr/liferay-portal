{
  ReturnWithoutExitProcessCallable returnWithoutExitProcessCallable=new ReturnWithoutExitProcessCallable("Premature return value");
  Future<String> future=ProcessExecutor.execute(_classPath,returnWithoutExitProcessCallable);
  for (int i=0; i < 10; i++) {
    try {
      future.get(1,TimeUnit.SECONDS);
      fail();
    }
 catch (    TimeoutException te) {
    }
  }
  JDKLoggerTestUtil.configureJDKLogger(ProcessExecutor.class.getName(),Level.OFF);
  ProcessExecutor processExecutor=new ProcessExecutor();
  processExecutor.destroy();
  try {
    future.get();
    fail();
  }
 catch (  ExecutionException ee) {
    assertFalse(future.isCancelled());
    assertTrue(future.isDone());
    Throwable throwable=ee.getCause();
    assertTrue(throwable instanceof ProcessException);
  }
}
