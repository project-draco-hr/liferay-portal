{
  boolean junitCodeCoverage=Boolean.getBoolean("junit.code.coverage");
  String leadingLog="Test leading log.\n";
  String bodyLog="Test body log.\n";
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(ProcessExecutor.class.getName(),Level.WARNING);
  LeadingLogProcessCallable leadingLogProcessCallable=new LeadingLogProcessCallable(leadingLog,bodyLog);
  List<String> arguments=_createArguments();
  Future<String> future=ProcessExecutor.execute(_classPath,arguments,leadingLogProcessCallable);
  future.get();
  assertFalse(future.isCancelled());
  assertTrue(future.isDone());
  if (junitCodeCoverage) {
    assertEquals(2,logRecords.size());
  }
 else {
    assertEquals(1,logRecords.size());
  }
  LogRecord logRecord=logRecords.get(0);
  assertEquals("Found corrupt leading log " + leadingLog,logRecord.getMessage());
  if (junitCodeCoverage) {
    logRecord=logRecords.get(1);
    String message=logRecord.getMessage();
    _assertBrokenPiping(message);
  }
  logRecords=JDKLoggerTestUtil.configureJDKLogger(ProcessExecutor.class.getName(),Level.FINE);
  leadingLogProcessCallable=new LeadingLogProcessCallable(leadingLog,bodyLog);
  arguments=_createArguments();
  future=ProcessExecutor.execute(_classPath,arguments,leadingLogProcessCallable);
  future.get();
  assertFalse(future.isCancelled());
  assertTrue(future.isDone());
  if (junitCodeCoverage) {
    assertEquals(3,logRecords.size());
  }
 else {
    assertEquals(2,logRecords.size());
  }
  LogRecord logRecord1=logRecords.get(0);
  assertEquals("Found corrupt leading log " + leadingLog,logRecord1.getMessage());
  LogRecord logRecord2=logRecords.get(1);
  String message=logRecord2.getMessage();
  assertTrue(message.contains("Invoked generic process callable "));
  if (junitCodeCoverage) {
    LogRecord logRecord3=logRecords.get(2);
    message=logRecord3.getMessage();
    _assertBrokenPiping(message);
  }
  logRecords=JDKLoggerTestUtil.configureJDKLogger(ProcessExecutor.class.getName(),Level.SEVERE);
  leadingLogProcessCallable=new LeadingLogProcessCallable(leadingLog,bodyLog);
  arguments=_createArguments();
  future=ProcessExecutor.execute(_classPath,arguments,leadingLogProcessCallable);
  future.get();
  assertFalse(future.isCancelled());
  assertTrue(future.isDone());
  if (junitCodeCoverage) {
    assertEquals(1,logRecords.size());
    logRecord=logRecords.get(0);
    _assertBrokenPiping(logRecord.getMessage());
  }
 else {
    assertEquals(0,logRecords.size());
  }
}
