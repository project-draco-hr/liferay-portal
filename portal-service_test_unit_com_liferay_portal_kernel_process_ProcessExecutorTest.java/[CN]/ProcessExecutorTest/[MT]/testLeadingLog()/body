{
  String leadingLog="Test leading log.\n";
  String bodyLog="Test body log.\n";
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(ProcessExecutor.class.getName(),Level.WARNING);
  LeadingLogProcessCallable leadingLogProcessCallable=new LeadingLogProcessCallable(leadingLog,bodyLog);
  List<String> arguments=_createArguments(_JPDA_OPTIONS1);
  Future<String> future=ProcessExecutor.execute(_classPath,arguments,leadingLogProcessCallable);
  future.get();
  Assert.assertFalse(future.isCancelled());
  Assert.assertTrue(future.isDone());
  Assert.assertEquals(1,logRecords.size());
  LogRecord logRecord=logRecords.get(0);
  Assert.assertEquals("Found corrupt leading log " + leadingLog,logRecord.getMessage());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(ProcessExecutor.class.getName(),Level.FINE);
  leadingLogProcessCallable=new LeadingLogProcessCallable(leadingLog,bodyLog);
  arguments=_createArguments(_JPDA_OPTIONS1);
  future=ProcessExecutor.execute(_classPath,arguments,leadingLogProcessCallable);
  future.get();
  Assert.assertFalse(future.isCancelled());
  Assert.assertTrue(future.isDone());
  Assert.assertEquals(2,logRecords.size());
  LogRecord logRecord1=logRecords.get(0);
  Assert.assertEquals("Found corrupt leading log " + leadingLog,logRecord1.getMessage());
  LogRecord logRecord2=logRecords.get(1);
  String message=logRecord2.getMessage();
  Assert.assertTrue(message.contains("Invoked generic process callable"));
  logRecords=JDKLoggerTestUtil.configureJDKLogger(ProcessExecutor.class.getName(),Level.SEVERE);
  leadingLogProcessCallable=new LeadingLogProcessCallable(leadingLog,bodyLog);
  arguments=_createArguments(_JPDA_OPTIONS1);
  future=ProcessExecutor.execute(_classPath,arguments,leadingLogProcessCallable);
  future.get();
  Assert.assertFalse(future.isCancelled());
  Assert.assertTrue(future.isDone());
  Assert.assertEquals(0,logRecords.size());
}
