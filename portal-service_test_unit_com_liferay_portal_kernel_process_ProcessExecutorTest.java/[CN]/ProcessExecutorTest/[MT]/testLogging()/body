{
  PrintStream oldOutPrintStream=System.out;
  ByteArrayOutputStream outByteArrayOutputStream=new ByteArrayOutputStream();
  PrintStream newOutPrintStream=new PrintStream(outByteArrayOutputStream,true);
  System.setOut(newOutPrintStream);
  PrintStream oldErrPrintStream=System.err;
  ByteArrayOutputStream errByteArrayOutputStream=new ByteArrayOutputStream();
  PrintStream newErrPrintStream=new PrintStream(errByteArrayOutputStream,true);
  System.setErr(newErrPrintStream);
  File signalFile=new File("signal");
  signalFile.delete();
  try {
    String logMessage="Log Message";
    final LoggingProcessCallable loggingProcessCallable=new LoggingProcessCallable(logMessage,signalFile);
    final AtomicReference<Exception> exceptionAtomicReference=new AtomicReference<Exception>();
    Thread thread=new Thread(){
      @Override public void run(){
        try {
          Future<Serializable> future=ProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1),loggingProcessCallable);
          future.get();
          Assert.assertFalse(future.isCancelled());
          Assert.assertTrue(future.isDone());
        }
 catch (        Exception e) {
          exceptionAtomicReference.set(e);
        }
      }
    }
;
    thread.start();
    Assert.assertTrue(signalFile.createNewFile());
    _waitForSignalFile(signalFile,false);
    Assert.assertTrue(signalFile.createNewFile());
    thread.join();
    Exception e=exceptionAtomicReference.get();
    if (e != null) {
      throw e;
    }
    String outByteArrayOutputStreamString=outByteArrayOutputStream.toString();
    Assert.assertTrue(outByteArrayOutputStreamString.contains(logMessage));
    String errByteArrayOutputStreamString=errByteArrayOutputStream.toString();
    Assert.assertTrue(errByteArrayOutputStreamString.contains(logMessage));
  }
  finally {
    System.setOut(oldOutPrintStream);
    System.setErr(oldErrPrintStream);
    signalFile.delete();
  }
}
