{
  if (!OSDetector.isLinux() && filePath.startsWith(_baseFilePath.resolve(".data"))) {
    return;
  }
  _watcherEventsLogger.trace("{}: {}",eventType,filePath);
  if (eventType.equals(SyncWatchEvent.EVENT_TYPE_CREATE)) {
    if (isIgnoredFilePath(filePath)) {
      return;
    }
    if (!Files.isDirectory(filePath)) {
      FileUtil.checkFilePath(filePath);
    }
    addCreatedFilePathName(filePath.toString());
    if (_downloadedFilePathNames.remove(filePath.toString())) {
      return;
    }
    fireWatchEventListener(eventType,filePath);
    if (!OSDetector.isApple() && Files.isDirectory(filePath)) {
      walkFileTree(filePath);
    }
  }
 else   if (eventType.equals(SyncWatchEvent.EVENT_TYPE_DELETE)) {
    if (Files.exists(filePath)) {
      return;
    }
    removeCreatedFilePathName(filePath.toString());
    if (_deletedFilePathNames.remove(filePath.toString())) {
      return;
    }
    processMissingFilePath(filePath);
    if (Files.notExists(filePath.getParent())) {
      return;
    }
    fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_DELETE,filePath);
  }
 else   if (eventType.equals(SyncWatchEvent.EVENT_TYPE_MODIFY)) {
    if (_downloadedFilePathNames.remove(filePath.toString()) || (removeCreatedFilePathName(filePath.toString()) && !FileUtil.isValidChecksum(filePath)) || FileUtil.isIgnoredFileName(String.valueOf(filePath.getFileName()))|| Files.notExists(filePath)|| Files.isDirectory(filePath)) {
      return;
    }
    fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_MODIFY,filePath);
  }
 else   if (eventType.equals(SyncWatchEvent.EVENT_TYPE_RENAME_FROM)) {
    removeCreatedFilePathName(filePath.toString());
    processMissingFilePath(filePath);
    fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_RENAME_FROM,filePath);
  }
 else   if (eventType.equals(SyncWatchEvent.EVENT_TYPE_RENAME_TO)) {
    if (_downloadedFilePathNames.remove(filePath.toString()) || isIgnoredFilePath(filePath)) {
      return;
    }
    fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_RENAME_TO,filePath);
  }
}
