{
  try {
    _executorIntraBand.registerChannel(null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Channel is null",npe.getMessage());
  }
  try {
    _executorIntraBand.registerChannel(IntraBandTestUtil.<Channel>createProxy(Channel.class));
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Channel is not of type GatheringByteChannel",iae.getMessage());
  }
  try {
    _executorIntraBand.registerChannel(IntraBandTestUtil.<Channel>createProxy(GatheringByteChannel.class));
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Channel is not of type ScatteringByteChannel",iae.getMessage());
  }
  SocketChannel[] peerSocketChannels=IntraBandTestUtil.createSocketChannelPeers();
  SocketChannel socketChannel=peerSocketChannels[0];
  socketChannel.configureBlocking(false);
  try {
    _executorIntraBand.registerChannel(socketChannel);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Channel is of type SelectableChannel and configured in " + "nonblocking mode",iae.getMessage());
  }
  socketChannel.configureBlocking(true);
  try {
    FutureRegistrationReference futureRegistrationReference=(FutureRegistrationReference)_executorIntraBand.registerChannel(socketChannel);
    Assert.assertSame(_executorIntraBand,futureRegistrationReference.getIntraBand());
    Assert.assertTrue(futureRegistrationReference.isValid());
    futureRegistrationReference.cancelRegistration();
    Assert.assertFalse(futureRegistrationReference.isValid());
    ThreadPoolExecutor threadPoolExecutor=(ThreadPoolExecutor)_executorIntraBand.executorService;
    while (threadPoolExecutor.getActiveCount() != 0)     ;
  }
  finally {
    peerSocketChannels[0].close();
    peerSocketChannels[1].close();
  }
  File tempFile=new File("tempFile");
  tempFile.deleteOnExit();
  RandomAccessFile randomAccessFile=new RandomAccessFile(tempFile,"rw");
  FileChannel fileChannel=randomAccessFile.getChannel();
  try {
    FutureRegistrationReference futureRegistrationReference=(FutureRegistrationReference)_executorIntraBand.registerChannel(fileChannel);
    Assert.assertSame(_executorIntraBand,futureRegistrationReference.getIntraBand());
    Assert.assertTrue(futureRegistrationReference.isValid());
    futureRegistrationReference.cancelRegistration();
    Assert.assertFalse(futureRegistrationReference.isValid());
    ThreadPoolExecutor threadPoolExecutor=(ThreadPoolExecutor)_executorIntraBand.executorService;
    while (threadPoolExecutor.getActiveCount() != 0)     ;
  }
  finally {
    fileChannel.close();
    tempFile.delete();
  }
}
