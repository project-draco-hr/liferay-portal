{
  long exportImportConfigurationId=GetterUtil.getLong(message.getPayload());
  ExportImportConfiguration exportImportConfiguration=ExportImportConfigurationLocalServiceUtil.getExportImportConfiguration(exportImportConfigurationId);
  messageStatus.setPayload(exportImportConfiguration);
  Map<String,Serializable> configurationSettingsMap=exportImportConfiguration.getSettingsMap();
  long userId=MapUtil.getLong(configurationSettingsMap,"userId");
  long sourceGroupId=MapUtil.getLong(configurationSettingsMap,"sourceGroupId");
  boolean privateLayout=MapUtil.getBoolean(configurationSettingsMap,"privateLayout");
  Map<Long,Boolean> layoutIdMap=(Map<Long,Boolean>)configurationSettingsMap.get("layoutIdMap");
  Map<String,String[]> parameterMap=(Map<String,String[]>)configurationSettingsMap.get("parameterMap");
  String remoteAddress=MapUtil.getString(configurationSettingsMap,"remoteAddress");
  int remotePort=MapUtil.getInteger(configurationSettingsMap,"remotePort");
  String remotePathContext=MapUtil.getString(configurationSettingsMap,"remotePathContext");
  boolean secureConnection=MapUtil.getBoolean(configurationSettingsMap,"secureConnection");
  long remoteGroupId=MapUtil.getLong(configurationSettingsMap,"remoteGroupId");
  boolean remotePrivateLayout=MapUtil.getBoolean(configurationSettingsMap,"remotePrivateLayout");
  Date startDate=(Date)configurationSettingsMap.get("startDate");
  Date endDate=(Date)configurationSettingsMap.get("endDate");
  String range=MapUtil.getString(parameterMap,"range");
  if (range.equals(ExportImportDateUtil.RANGE_FROM_LAST_PUBLISH_DATE)) {
    LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(sourceGroupId,privateLayout);
    long lastPublishDate=GetterUtil.getLong(layoutSet.getSettingsProperty("last-publish-date"));
    if (lastPublishDate > 0) {
      endDate=new Date();
      startDate=new Date(lastPublishDate);
    }
  }
 else   if (range.equals(ExportImportDateUtil.RANGE_LAST)) {
    int last=MapUtil.getInteger(parameterMap,"last");
    if (last > 0) {
      Date scheduledFireTime=new Date();
      startDate=new Date(scheduledFireTime.getTime() - (last * Time.HOUR));
      endDate=scheduledFireTime;
    }
  }
  initThreadLocals(userId,parameterMap);
  try {
    StagingUtil.copyRemoteLayouts(sourceGroupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,remotePathContext,secureConnection,remoteGroupId,remotePrivateLayout,startDate,endDate);
  }
  finally {
    resetThreadLocals();
  }
}
