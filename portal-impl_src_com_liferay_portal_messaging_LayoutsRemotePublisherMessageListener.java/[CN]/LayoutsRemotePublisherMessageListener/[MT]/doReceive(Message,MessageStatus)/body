{
  long exportImportConfigurationId=GetterUtil.getLong(message.getPayload());
  ExportImportConfiguration exportImportConfiguration=ExportImportConfigurationLocalServiceUtil.getExportImportConfiguration(exportImportConfigurationId);
  messageStatus.setPayload(exportImportConfiguration);
  Map<String,Serializable> settingsMap=exportImportConfiguration.getSettingsMap();
  long userId=MapUtil.getLong(settingsMap,"userId");
  long sourceGroupId=MapUtil.getLong(settingsMap,"sourceGroupId");
  boolean privateLayout=MapUtil.getBoolean(settingsMap,"privateLayout");
  Map<Long,Boolean> layoutIdMap=(Map<Long,Boolean>)settingsMap.get("layoutIdMap");
  Map<String,String[]> parameterMap=(Map<String,String[]>)settingsMap.get("parameterMap");
  String remoteAddress=MapUtil.getString(settingsMap,"remoteAddress");
  int remotePort=MapUtil.getInteger(settingsMap,"remotePort");
  String remotePathContext=MapUtil.getString(settingsMap,"remotePathContext");
  boolean secureConnection=MapUtil.getBoolean(settingsMap,"secureConnection");
  long remoteGroupId=MapUtil.getLong(settingsMap,"remoteGroupId");
  boolean remotePrivateLayout=MapUtil.getBoolean(settingsMap,"remotePrivateLayout");
  DateRange dateRange=ExportImportDateUtil.getDateRange(exportImportConfiguration);
  initThreadLocals(userId,parameterMap);
  try {
    StagingUtil.copyRemoteLayouts(sourceGroupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,remotePathContext,secureConnection,remoteGroupId,remotePrivateLayout,dateRange.getStartDate(),dateRange.getEndDate());
  }
  finally {
    resetThreadLocals();
  }
}
