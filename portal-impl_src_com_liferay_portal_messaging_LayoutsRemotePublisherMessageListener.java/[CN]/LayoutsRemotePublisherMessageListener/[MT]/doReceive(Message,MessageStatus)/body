{
  LayoutsRemotePublisherRequest publisherRequest=(LayoutsRemotePublisherRequest)message.getPayload();
  messageStatus.setPayload(publisherRequest);
  long userId=publisherRequest.getUserId();
  long sourceGroupId=publisherRequest.getSourceGroupId();
  boolean privateLayout=publisherRequest.isPrivateLayout();
  Map<Long,Boolean> layoutIdMap=publisherRequest.getLayoutIdMap();
  Map<String,String[]> parameterMap=publisherRequest.getParameterMap();
  String remoteAddress=publisherRequest.getRemoteAddress();
  int remotePort=publisherRequest.getRemotePort();
  boolean secureConnection=publisherRequest.isSecureConnection();
  long remoteGroupId=publisherRequest.getRemoteGroupId();
  boolean remotePrivateLayout=publisherRequest.isRemotePrivateLayout();
  Date startDate=publisherRequest.getStartDate();
  Date endDate=publisherRequest.getEndDate();
  String range=MapUtil.getString(parameterMap,"range");
  if (range.equals("last")) {
    int last=MapUtil.getInteger(parameterMap,"last");
    if (last > 0) {
      Date scheduledFireTime=publisherRequest.getScheduledFireTime();
      startDate=new Date(scheduledFireTime.getTime() - (last * Time.HOUR));
      endDate=scheduledFireTime;
    }
  }
  PrincipalThreadLocal.setName(userId);
  User user=UserLocalServiceUtil.getUserById(userId);
  PermissionChecker permissionChecker=PermissionCheckerFactoryUtil.create(user,false);
  PermissionThreadLocal.setPermissionChecker(permissionChecker);
  try {
    StagingUtil.copyRemoteLayouts(sourceGroupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,secureConnection,remoteGroupId,remotePrivateLayout,parameterMap,startDate,endDate);
  }
  finally {
    PrincipalThreadLocal.setName(null);
    PermissionThreadLocal.setPermissionChecker(null);
  }
}
