{
  return new ForwardingJavaFileManager<JavaFileManager>(fm){
    @Override public JavaFileObject getJavaFileForOutput(    Location location,    String className,    Kind kind,    FileObject sibling){
      return getOutputFile(className,URI.create("file:///" + className.replace('.','/') + kind));
    }
    @Override public String inferBinaryName(    Location location,    JavaFileObject file){
      if (file instanceof BytecodeFile) {
        return ((BytecodeFile)file).getClassName();
      }
      return super.inferBinaryName(location,file);
    }
    @Override public Iterable<JavaFileObject> list(    Location location,    String packageName,    Set<Kind> kinds,    boolean recurse) throws IOException {
      if (location == StandardLocation.CLASS_PATH && packageName.startsWith(Constants.JSP_PACKAGE_NAME)) {
        Map<String,JavaFileObject> packageFiles=rtctxt.getPackageMap().get(packageName);
        if (packageFiles != null) {
          return packageFiles.values();
        }
      }
      Iterable<JavaFileObject> lst=super.list(location,packageName,kinds,recurse);
      return lst;
    }
  }
;
}
