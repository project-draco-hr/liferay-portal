{
  final String source=charArrayWriter.toString();
  classFiles=new ArrayList<BytecodeFile>();
  javax.tools.JavaCompiler javac=ToolProvider.getSystemJavaCompiler();
  if (javac == null) {
    errDispatcher.jspError("jsp.error.nojdk");
  }
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  StandardJavaFileManager stdFileManager=javac.getStandardFileManager(diagnostics,null,null);
  String name=className.substring(className.lastIndexOf('.') + 1);
  JavaFileObject[] sourceFiles={new SimpleJavaFileObject(URI.create("string:///" + name.replace('.','/') + Kind.SOURCE.extension),Kind.SOURCE){
    public CharSequence getCharContent(    boolean ignore){
      return source;
    }
  }
};
  try {
    stdFileManager.setLocation(StandardLocation.CLASS_PATH,this.cpath);
  }
 catch (  IOException e) {
  }
  JavaFileManager javaFileManager=getJavaFileManager(stdFileManager);
  javax.tools.JavaCompiler.CompilationTask ct=javac.getTask(null,javaFileManager,diagnostics,options,null,Arrays.asList(sourceFiles));
  try {
    javaFileManager.close();
  }
 catch (  IOException ex) {
  }
  if (ct.call()) {
    for (    BytecodeFile bytecodeFile : classFiles) {
      rtctxt.setBytecode(bytecodeFile.getClassName(),bytecodeFile.getBytecode());
    }
    return null;
  }
  ArrayList<JavacErrorDetail> problems=new ArrayList<JavacErrorDetail>();
  for (  Diagnostic dm : diagnostics.getDiagnostics()) {
    problems.add(ErrorDispatcher.createJavacError(javaFileName,pageNodes,new StringBuilder(dm.getMessage(null)),(int)dm.getLineNumber()));
  }
  return problems.toArray(new JavacErrorDetail[0]);
}
