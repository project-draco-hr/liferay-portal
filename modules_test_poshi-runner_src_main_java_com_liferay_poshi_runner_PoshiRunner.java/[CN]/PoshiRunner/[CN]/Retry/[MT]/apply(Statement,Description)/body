{
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      for (int i=0; i < _retryCount; i++) {
        try {
          statement.evaluate();
          return;
        }
 catch (        Throwable t) {
          if (i == (_retryCount - 1)) {
            throw t;
          }
          boolean retry=false;
          List<Throwable> throwables=null;
          if (t instanceof MultipleFailureException) {
            MultipleFailureException mfe=(MultipleFailureException)t;
            throwables=mfe.getFailures();
          }
 else {
            throwables=new ArrayList<>(1);
            throwables.add(t);
          }
          for (          Class retryClass : _retryClasses) {
            for (            Throwable throwable : throwables) {
              if (retryClass.isInstance(throwable)) {
                retry=true;
              }
            }
          }
          if (retry == false) {
            throw t;
          }
        }
      }
    }
  }
;
}
