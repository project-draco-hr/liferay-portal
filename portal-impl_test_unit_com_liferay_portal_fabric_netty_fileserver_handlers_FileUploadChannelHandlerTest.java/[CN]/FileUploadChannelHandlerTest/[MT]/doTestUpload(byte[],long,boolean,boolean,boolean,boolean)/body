{
  FileResponse fileResponse=new FileResponse(Paths.get("testFile"),data.length,lastModified,folder);
  NoticeableFuture<FileResponse> noticeableFuture=null;
  if (postAsyncBroker) {
    noticeableFuture=_asyncBroker.post(fileResponse.getPath());
  }
  final FileUploadChannelHandler fileUploadChannelHandler=new FileUploadChannelHandler(_asyncBroker,fileResponse,getEventLoop(inEventloop));
  if (folder) {
    FileServerTestUtil.registerForCleanUp(fileResponse.getLocalFile());
  }
  final ChannelPipeline channelPipeline=_embeddedChannel.pipeline();
  channelPipeline.addFirst(FileUploadChannelHandler.class.getName(),fileUploadChannelHandler);
  if (fail) {
    if (folder) {
      FileHelperUtilAdvice._throwException=true;
    }
 else {
      try (FileChannel fileChannel=fileUploadChannelHandler.fileChannel){
        Assert.assertTrue(fileChannel.isOpen());
      }
     }
  }
 else   if (inEventloop) {
    channelPipeline.addAfter(FileUploadChannelHandler.class.getName(),"Assert Auto Removal Channel Handler",new ChannelInboundHandlerAdapter(){
      @Override public void channelRead(      ChannelHandlerContext channelHandlerContext,      Object object){
        Assert.assertSame(this,channelPipeline.first());
        channelHandlerContext.fireChannelRead(object);
        channelPipeline.removeFirst();
      }
    }
);
  }
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(FileUploadChannelHandler.class.getName(),Level.SEVERE);
  try {
    if (inEventloop) {
      _embeddedChannel.writeInbound(FileServerTestUtil.wrapFirstHalf(data),Unpooled.copiedBuffer(FileServerTestUtil.wrapSecondHalf(data),Unpooled.wrappedBuffer(data)));
      if (!fail) {
        Queue<Object> queue=_embeddedChannel.inboundMessages();
        Assert.assertEquals(1,queue.size());
        Assert.assertEquals(Unpooled.wrappedBuffer(data),queue.poll());
      }
    }
 else {
      fileUploadChannelHandler.channelRead(channelPipeline.firstContext(),FileServerTestUtil.wrapFirstHalf(data));
      fileUploadChannelHandler.channelRead(channelPipeline.firstContext(),FileServerTestUtil.wrapSecondHalf(data));
    }
  }
 catch (  Exception e) {
    fileUploadChannelHandler.exceptionCaught(channelPipeline.firstContext(),e);
  }
  if (postAsyncBroker) {
    if (fail) {
      try {
        noticeableFuture.get();
        Assert.fail();
      }
 catch (      ExecutionException ee) {
        Throwable throwable=ee.getCause();
        if (folder) {
          Assert.assertEquals("Forced Exception",throwable.getMessage());
        }
 else {
          Assert.assertTrue(throwable instanceof ClosedChannelException);
        }
      }
    }
 else {
      Assert.assertSame(fileResponse,noticeableFuture.get());
    }
  }
  shutdown(inEventloop,fileUploadChannelHandler.eventExecutor);
  List<LogRecord> logRecords=captureHandler.getLogRecords();
  if (fail) {
    LogRecord logRecord=logRecords.remove(0);
    Assert.assertEquals("File upload failure",logRecord.getMessage());
    Throwable throwable=logRecord.getThrown();
    if (folder) {
      Assert.assertEquals("Forced Exception",throwable.getMessage());
    }
 else {
      Assert.assertTrue(throwable instanceof ClosedChannelException);
    }
  }
  if (!postAsyncBroker) {
    LogRecord logRecord=logRecords.remove(0);
    if (fail) {
      Assert.assertEquals("Unable to place exception because no future exists with " + "ID " + fileResponse.getPath(),logRecord.getMessage());
      Throwable throwable=logRecord.getThrown();
      if (folder) {
        Assert.assertEquals("Forced Exception",throwable.getMessage());
      }
 else {
        Assert.assertTrue(throwable instanceof ClosedChannelException);
      }
    }
 else {
      Assert.assertEquals("Unable to place result " + fileResponse + " because no future exists with ID "+ fileResponse.getPath(),logRecord.getMessage());
    }
  }
  Assert.assertTrue(logRecords.isEmpty());
  Assert.assertSame(channelPipeline.first(),channelPipeline.last());
  Path file=FileServerTestUtil.registerForCleanUp(fileResponse.getLocalFile());
  if (!fail) {
    FileTime fileTime=Files.getLastModifiedTime(file);
    Assert.assertEquals(lastModified,fileTime.toMillis());
  }
  return file;
}
