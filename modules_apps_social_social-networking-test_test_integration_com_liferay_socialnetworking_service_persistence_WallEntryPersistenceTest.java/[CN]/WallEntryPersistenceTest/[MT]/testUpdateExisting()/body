{
  long pk=RandomTestUtil.nextLong();
  WallEntry newWallEntry=_persistence.create(pk);
  newWallEntry.setGroupId(RandomTestUtil.nextLong());
  newWallEntry.setCompanyId(RandomTestUtil.nextLong());
  newWallEntry.setUserId(RandomTestUtil.nextLong());
  newWallEntry.setUserName(RandomTestUtil.randomString());
  newWallEntry.setCreateDate(RandomTestUtil.nextDate());
  newWallEntry.setModifiedDate(RandomTestUtil.nextDate());
  newWallEntry.setComments(RandomTestUtil.randomString());
  _wallEntries.add(_persistence.update(newWallEntry));
  WallEntry existingWallEntry=_persistence.findByPrimaryKey(newWallEntry.getPrimaryKey());
  Assert.assertEquals(existingWallEntry.getWallEntryId(),newWallEntry.getWallEntryId());
  Assert.assertEquals(existingWallEntry.getGroupId(),newWallEntry.getGroupId());
  Assert.assertEquals(existingWallEntry.getCompanyId(),newWallEntry.getCompanyId());
  Assert.assertEquals(existingWallEntry.getUserId(),newWallEntry.getUserId());
  Assert.assertEquals(existingWallEntry.getUserName(),newWallEntry.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingWallEntry.getCreateDate()),Time.getShortTimestamp(newWallEntry.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingWallEntry.getModifiedDate()),Time.getShortTimestamp(newWallEntry.getModifiedDate()));
  Assert.assertEquals(existingWallEntry.getComments(),newWallEntry.getComments());
}
