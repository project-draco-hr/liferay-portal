{
  if (entryIds.length == 0) {
    return 0;
  }
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    String sql=CustomSQLUtil.get(COUNT_BY_OR_ENTRY_IDS);
    sql=StringUtil.replace(sql,"[$ENTRY_ID$]",getEntryIds(entryIds,StringPool.EQUAL));
    if (notEntryIds.length > 0) {
      StringMaker sm=new StringMaker();
      sm.append(" AND (");
      for (int i=0; i < notEntryIds.length; i++) {
        sm.append("TagsAsset.assetId NOT IN (");
        sm.append(CustomSQLUtil.get(FIND_BY_AND_ENTRY_IDS));
        sm.append(StringPool.CLOSE_PARENTHESIS);
        if ((i + 1) < notEntryIds.length) {
          sm.append(" AND ");
        }
      }
      sm.append(StringPool.CLOSE_PARENTHESIS);
      sql=StringUtil.replace(sql,"[$NOT_ENTRY_ID$]",sm.toString());
    }
 else {
      sql=StringUtil.replace(sql,"[$NOT_ENTRY_ID$]",StringPool.BLANK);
    }
    sql=getDates(sql,publishDate,expirationDate);
    if (groupId > 0) {
      sql+=" AND (TagsAsset.groupId = ?)";
    }
    sql+=getClassNameIds(classNameIds);
    if (excludeZeroViewCount) {
      sql+=" AND (TagsAsset.viewCount > 0)";
    }
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(HibernateUtil.getCountColumnName(),Hibernate.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setEntryIds(qPos,entryIds);
    setEntryIds(qPos,notEntryIds);
    setDates(qPos,publishDate,expirationDate);
    setGroupId(qPos,groupId);
    setClassNamedIds(qPos,classNameIds);
    Iterator itr=q.list().iterator();
    if (itr.hasNext()) {
      Long count=(Long)itr.next();
      if (count != null) {
        return count.intValue();
      }
    }
    return 0;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
}
