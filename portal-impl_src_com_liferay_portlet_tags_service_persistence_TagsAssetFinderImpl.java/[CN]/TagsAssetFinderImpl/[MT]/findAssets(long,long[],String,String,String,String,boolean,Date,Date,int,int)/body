{
  orderByCol1=checkOrderByCol(orderByCol1);
  orderByCol2=checkOrderByCol(orderByCol2);
  orderByType1=checkOrderByType(orderByType1);
  orderByType2=checkOrderByType(orderByType2);
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    StringBuilder sb=new StringBuilder();
    sb.append("SELECT {TagsAsset.*} ");
    sb.append("FROM TagsAsset WHERE");
    sb.append(" (1 = 1)");
    if (excludeZeroViewCount) {
      sb.append(" AND (TagsAsset.viewCount > 0)");
    }
    sb.append("[$DATES$]");
    if (groupId > 0) {
      sb.append(" AND (TagsAsset.groupId = ?)");
    }
    sb.append(getClassNameIds(classNameIds));
    sb.append(" ORDER BY TagsAsset.");
    sb.append(orderByCol1);
    sb.append(StringPool.SPACE);
    sb.append(orderByType1);
    if (Validator.isNotNull(orderByCol2) && !orderByCol1.equals(orderByCol2)) {
      sb.append(", TagsAsset.");
      sb.append(orderByCol2);
      sb.append(StringPool.SPACE);
      sb.append(orderByType2);
    }
    String sql=sb.toString();
    sql=getDates(sql,publishDate,expirationDate);
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("TagsAsset",TagsAssetImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    setDates(qPos,publishDate,expirationDate);
    if (groupId > 0) {
      setGroupId(qPos,groupId);
    }
    setClassNamedIds(qPos,classNameIds);
    return (List<TagsAsset>)QueryUtil.list(q,HibernateUtil.getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
}
