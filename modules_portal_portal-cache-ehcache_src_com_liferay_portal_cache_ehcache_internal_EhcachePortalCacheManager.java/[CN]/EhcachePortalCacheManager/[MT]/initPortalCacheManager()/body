{
  setBlockingCacheAllowed(GetterUtil.getBoolean(props.get(PropsKeys.EHCACHE_BLOCKING_CACHE_ALLOWED)));
  setBootstrapCacheLoaderEnabled(GetterUtil.getBoolean(props.get(PropsKeys.EHCACHE_BOOTSTRAP_CACHE_LOADER_ENABLED)));
  setTransactionalCacheEnabled(GetterUtil.getBoolean(props.get(PropsKeys.TRANSACTIONAL_CACHE_ENABLED)));
  setTransactionalCacheNames(GetterUtil.getStringValues(props.getArray(PropsKeys.TRANSACTIONAL_CACHE_NAMES)));
  if (Validator.isNull(_configFile)) {
    _configFile=_defaultConfigFile;
  }
  _usingDefault=_configFile.equals(_defaultConfigFile);
  _configurationPair=EhcacheConfigurationHelperUtil.getConfiguration(EhcacheConfigurationHelperUtil.class.getResource(_configFile),isClusterAware(),_usingDefault,props);
  _cacheManager=new CacheManager(_configurationPair.getKey());
  _cacheManager.setName(getName());
  if (_stopCacheManagerTimer) {
    FailSafeTimer failSafeTimer=_cacheManager.getTimer();
    failSafeTimer.cancel();
    try {
      Field cacheManagerTimerField=ReflectionUtil.getDeclaredField(CacheManager.class,"cacheManagerTimer");
      cacheManagerTimerField.set(_cacheManager,null);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  CacheManagerEventListenerRegistry cacheManagerEventListenerRegistry=_cacheManager.getCacheManagerEventListenerRegistry();
  cacheManagerEventListenerRegistry.registerListener(new PortalCacheManagerEventListener(aggregatedCacheManagerListener));
  if (GetterUtil.getBoolean(props.get(PropsKeys.EHCACHE_PORTAL_CACHE_MANAGER_JMX_ENABLED))) {
    _managementService=new ManagementService(_cacheManager,mBeanServer,_registerCacheManager,_registerCaches,_registerCacheConfigurations,_registerCacheStatistics);
    _managementService.init();
  }
}
