{
  long pk=nextLong();
  SocialEquityLog newSocialEquityLog=_persistence.create(pk);
  newSocialEquityLog.setGroupId(nextLong());
  newSocialEquityLog.setCompanyId(nextLong());
  newSocialEquityLog.setUserId(nextLong());
  newSocialEquityLog.setAssetEntryId(nextLong());
  newSocialEquityLog.setActionId(randomString());
  newSocialEquityLog.setActionDate(nextInt());
  newSocialEquityLog.setType(nextInt());
  newSocialEquityLog.setValue(nextInt());
  newSocialEquityLog.setValidity(nextInt());
  _persistence.update(newSocialEquityLog,false);
  SocialEquityLog existingSocialEquityLog=_persistence.findByPrimaryKey(newSocialEquityLog.getPrimaryKey());
  assertEquals(existingSocialEquityLog.getEquityLogId(),newSocialEquityLog.getEquityLogId());
  assertEquals(existingSocialEquityLog.getGroupId(),newSocialEquityLog.getGroupId());
  assertEquals(existingSocialEquityLog.getCompanyId(),newSocialEquityLog.getCompanyId());
  assertEquals(existingSocialEquityLog.getUserId(),newSocialEquityLog.getUserId());
  assertEquals(existingSocialEquityLog.getAssetEntryId(),newSocialEquityLog.getAssetEntryId());
  assertEquals(existingSocialEquityLog.getActionId(),newSocialEquityLog.getActionId());
  assertEquals(existingSocialEquityLog.getActionDate(),newSocialEquityLog.getActionDate());
  assertEquals(existingSocialEquityLog.getType(),newSocialEquityLog.getType());
  assertEquals(existingSocialEquityLog.getValue(),newSocialEquityLog.getValue());
  assertEquals(existingSocialEquityLog.getValidity(),newSocialEquityLog.getValidity());
}
