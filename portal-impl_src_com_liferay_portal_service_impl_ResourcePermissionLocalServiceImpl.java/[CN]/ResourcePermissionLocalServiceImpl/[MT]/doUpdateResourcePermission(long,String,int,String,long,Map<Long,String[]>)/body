{
  boolean flushResourcePermissionEnabled=PermissionThreadLocal.isFlushResourcePermissionEnabled(name,primKey);
  PermissionThreadLocal.setFlushResourcePermissionEnabled(name,primKey,false);
  try {
    long[] roleIds=ArrayUtil.toLongArray(roleIdsToActionIds.keySet());
    List<ResourcePermission> resourcePermissions=resourcePermissionPersistence.findByC_N_S_P_R(companyId,name,scope,primKey,roleIds);
    for (    ResourcePermission resourcePermission : resourcePermissions) {
      long roleId=resourcePermission.getRoleId();
      String[] actionIds=roleIdsToActionIds.remove(roleId);
      doUpdateResourcePermission(companyId,name,scope,primKey,ownerId,roleId,actionIds,ResourcePermissionConstants.OPERATOR_SET,true);
    }
    if (roleIdsToActionIds.isEmpty()) {
      return;
    }
    for (    Map.Entry<Long,String[]> entry : roleIdsToActionIds.entrySet()) {
      long roleId=entry.getKey();
      String[] actionIds=entry.getValue();
      doUpdateResourcePermission(companyId,name,scope,primKey,ownerId,roleId,actionIds,ResourcePermissionConstants.OPERATOR_SET,false);
    }
    TransactionCommitCallbackUtil.registerCallback(new UpdateResourcePermissionCallable(primKey,name));
  }
  finally {
    PermissionThreadLocal.setFlushResourcePermissionEnabled(name,primKey,flushResourcePermissionEnabled);
    PermissionCacheUtil.clearResourcePermissionCache(scope,name,primKey);
    SearchEngineUtil.updatePermissionFields(name,primKey);
  }
}
