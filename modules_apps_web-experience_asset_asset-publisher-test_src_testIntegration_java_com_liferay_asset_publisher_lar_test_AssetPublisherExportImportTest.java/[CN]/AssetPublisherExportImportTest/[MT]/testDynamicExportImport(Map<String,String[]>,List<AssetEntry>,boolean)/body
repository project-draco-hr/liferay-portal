{
  if (filtering) {
    addAssetEntries(group,2,new ArrayList<AssetEntry>(),ServiceContextTestUtil.getServiceContext());
  }
  String scopeId=AssetPublisherUtil.getScopeId(group,group.getGroupId());
  preferenceMap.put("scopeIds",new String[]{scopeId});
  preferenceMap.put("selectionStyle",new String[]{"dynamic"});
  PortletPreferences portletPreferences=getImportedPortletPreferences(preferenceMap);
  MockHttpServletRequest mockHttpServletRequest=new MockHttpServletRequest();
  ThemeDisplay themeDisplay=new ThemeDisplay();
  Company company=CompanyLocalServiceUtil.getCompany(TestPropsValues.getCompanyId());
  themeDisplay.setCompany(company);
  themeDisplay.setLayout(importedLayout);
  themeDisplay.setScopeGroupId(importedGroup.getGroupId());
  themeDisplay.setUser(TestPropsValues.getUser());
  mockHttpServletRequest.setAttribute(WebKeys.THEME_DISPLAY,themeDisplay);
  PortletRequest portletRequest=new MockPortletRequest();
  portletRequest.setAttribute(PortletServlet.PORTLET_SERVLET_REQUEST,mockHttpServletRequest);
  AssetPublisherDisplayContext assetPublisherDisplayContext=new AssetPublisherDisplayContext(portletRequest,new MockPortletResponse(),portletPreferences);
  SearchContainer<AssetEntry> searchContainer=new SearchContainer<>();
  searchContainer.setTotal(10);
  List<AssetEntryResult> actualAssetEntryResults=AssetPublisherUtil.getAssetEntryResults(assetPublisherDisplayContext,searchContainer,portletPreferences);
  List<AssetEntry> actualAssetEntries=new ArrayList<>();
  for (  AssetEntryResult assetEntryResult : actualAssetEntryResults) {
    actualAssetEntries.addAll(assetEntryResult.getAssetEntries());
  }
  assertAssetEntries(expectedAssetEntries,actualAssetEntries);
}
