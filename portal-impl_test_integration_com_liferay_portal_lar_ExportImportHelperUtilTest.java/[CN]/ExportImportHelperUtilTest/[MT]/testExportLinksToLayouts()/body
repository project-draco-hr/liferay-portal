{
  Element rootElement=_portletDataContextExport.getExportDataRootElement();
  String content=getContent("layout_links.txt");
  Layout publicLayout=LayoutTestUtil.addLayout(_portletDataContextExport.getGroupId(),"publicTestLayout",false);
  Layout privateLayout=LayoutTestUtil.addLayout(_portletDataContextExport.getGroupId(),"privateTestLayout",true);
  content=StringUtil.replace(content,new String[]{"[$FIRST_LAYOUT_ID$]","[$SECOND_LAYOUT_ID$]"},new String[]{String.valueOf(publicLayout.getLayoutId()),String.valueOf(privateLayout.getLayoutId())});
  content=ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport,_referrerStagedModel,rootElement.element("entry"),content,true);
  StringBundler sb=new StringBundler(5);
  sb.append(StringPool.OPEN_BRACKET);
  sb.append(publicLayout.getLayoutId());
  sb.append("@public@");
  sb.append(publicLayout.getUuid());
  sb.append(StringPool.AT);
  sb.append(publicLayout.getFriendlyURL());
  sb.append(StringPool.CLOSE_BRACKET);
  Assert.assertTrue(content.contains(sb.toString()));
  sb.setIndex(0);
  sb.append(StringPool.OPEN_BRACKET);
  sb.append(privateLayout.getLayoutId());
  sb.append("@private@");
  sb.append(privateLayout.getUuid());
  sb.append(StringPool.AT);
  sb.append(privateLayout.getFriendlyURL());
  sb.append(StringPool.CLOSE_BRACKET);
  Assert.assertTrue(content.contains(sb.toString()));
}
