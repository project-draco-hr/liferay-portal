{
  if (!InlineSQLHelperUtil.isEnabled(groupId)) {
    return findByG_C(groupId,calendarResourceId,start,end,orderByComparator);
  }
  StringBundler query=null;
  if (orderByComparator != null) {
    query=new StringBundler(4 + (orderByComparator.getOrderByFields().length * 3));
  }
 else {
    query=new StringBundler(4);
  }
  query.append(_SQL_SELECT_CALENDAR_WHERE);
  query.append(_FINDER_COLUMN_G_C_GROUPID_2);
  query.append(_FINDER_COLUMN_G_C_CALENDARRESOURCEID_2);
  if (orderByComparator != null) {
    appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
  }
 else {
    query.append(CalendarModelImpl.ORDER_BY_JPQL);
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),Calendar.class.getName(),_FILTER_ENTITY_TABLE_FILTER_PK_COLUMN,_FILTER_ENTITY_TABLE_FILTER_USERID_COLUMN,groupId);
  Session session=null;
  try {
    session=openSession();
    Query q=session.createQuery(sql);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    qPos.add(calendarResourceId);
    return (List<Calendar>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
