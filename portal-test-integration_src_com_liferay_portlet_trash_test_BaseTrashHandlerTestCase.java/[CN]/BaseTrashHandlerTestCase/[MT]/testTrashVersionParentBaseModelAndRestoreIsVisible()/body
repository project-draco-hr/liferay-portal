{
  Assume.assumeTrue(this instanceof WhenHasParent);
  Assume.assumeTrue(this instanceof WhenIsAssetableBaseModel);
  Assume.assumeTrue(this instanceof WhenIsMoveableFromTrashBaseModel);
  Assume.assumeTrue(this instanceof WhenIsUpdatableBaseModel);
  Assume.assumeTrue(this instanceof WhenIsVersionableBaseModel);
  WhenIsVersionableBaseModel whenIsVersionableBaseModel=(WhenIsVersionableBaseModel)this;
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  baseModel=addBaseModel(parentBaseModel,serviceContext);
  baseModel=whenIsVersionableBaseModel.expireBaseModel(baseModel,serviceContext);
  WhenIsUpdatableBaseModel whenIsUpdatableBaseModel=(WhenIsUpdatableBaseModel)this;
  WorkflowedModel workflowedModel=getWorkflowedModel(baseModel);
  List<Integer> originalStatuses=new ArrayList<>();
  originalStatuses.add(workflowedModel.getStatus());
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_PUBLISH);
  baseModel=whenIsUpdatableBaseModel.updateBaseModel((Long)baseModel.getPrimaryKeyObj(),serviceContext);
  workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
  baseModel=whenIsUpdatableBaseModel.updateBaseModel((Long)baseModel.getPrimaryKeyObj(),serviceContext);
  WhenHasParent whenHasParent=(WhenHasParent)this;
  workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  whenHasParent.moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  WhenIsMoveableFromTrashBaseModel whenIsMoveableFromTrashBaseModel=(WhenIsMoveableFromTrashBaseModel)this;
  whenIsMoveableFromTrashBaseModel.moveBaseModelFromTrash(baseModel,group,serviceContext);
  WhenIsAssetableBaseModel whenIsAssetableModel=(WhenIsAssetableBaseModel)this;
  baseModel=getBaseModel((Long)baseModel.getPrimaryKeyObj());
  Assert.assertTrue(whenIsAssetableModel.isAssetEntryVisible(baseModel,getAssetClassPK(baseModel)));
}
