{
  Assume.assumeTrue(this instanceof WhenHasParent);
  WhenHasParent whenHasParent=(WhenHasParent)this;
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  baseModel=addBaseModel(parentBaseModel,serviceContext);
  moveBaseModelToTrash((Long)baseModel.getPrimaryKeyObj());
  whenHasParent.moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialTrashEntriesCount + 2,getTrashEntriesCount(group.getGroupId()));
  TrashHandler parentTrashHandler=TrashHandlerRegistryUtil.getTrashHandler(whenHasParent.getParentBaseModelClassName());
  if (Objects.equals(getBaseModelClassName(),whenHasParent.getParentBaseModelClassName())) {
    Assert.assertEquals(0,parentTrashHandler.getTrashContainedModelsCount((Long)parentBaseModel.getPrimaryKeyObj()));
    Assert.assertEquals(1,parentTrashHandler.getTrashContainerModelsCount((Long)parentBaseModel.getPrimaryKeyObj()));
  }
 else {
    Assert.assertEquals(1,parentTrashHandler.getTrashContainedModelsCount((Long)parentBaseModel.getPrimaryKeyObj()));
    Assert.assertEquals(0,parentTrashHandler.getTrashContainerModelsCount((Long)parentBaseModel.getPrimaryKeyObj()));
  }
}
