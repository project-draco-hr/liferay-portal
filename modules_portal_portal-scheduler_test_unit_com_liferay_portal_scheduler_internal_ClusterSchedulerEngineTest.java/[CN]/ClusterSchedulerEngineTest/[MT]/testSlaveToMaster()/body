{
  _mockClusterMasterExecutor.reset(false,4,0);
  _mockSchedulerEngine.resetJobs(0,0);
  _clusterSchedulerEngine.start();
  Assert.assertFalse(ClusterMasterExecutorUtil.isMaster());
  List<SchedulerResponse> schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  Assert.assertEquals(4,_memoryClusteredJobs.size());
  _clusterSchedulerEngine.pause(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterSchedulerEngine.class.getName(),Level.OFF)){
    _mockClusterMasterExecutor.reset(true,0,0);
    ClusterMasterTokenTransitionListener clusterMasterTokenTransitionListener=_mockClusterMasterExecutor.getClusterMasterTokenTransitionListener();
    clusterMasterTokenTransitionListener.masterTokenAcquired();
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
    Assert.assertTrue(ClusterMasterExecutorUtil.isMaster());
    schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(StorageType.MEMORY_CLUSTERED);
    Assert.assertEquals(4,schedulerResponses.size());
    SchedulerResponse schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
    _assertTriggerState(schedulerResponse,TriggerState.PAUSED);
    Assert.assertTrue(_memoryClusteredJobs.isEmpty());
    _mockClusterMasterExecutor.reset(false,4,0);
    _mockSchedulerEngine.resetJobs(0,0);
    _clusterSchedulerEngine.start();
    Assert.assertFalse(ClusterMasterExecutorUtil.isMaster());
    schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(StorageType.MEMORY_CLUSTERED);
    Assert.assertTrue(schedulerResponses.isEmpty());
    Assert.assertEquals(4,_memoryClusteredJobs.size());
    logRecords=captureHandler.resetLogLevel(Level.ALL);
    _mockClusterMasterExecutor.reset(true,0,0);
    clusterMasterTokenTransitionListener=_mockClusterMasterExecutor.getClusterMasterTokenTransitionListener();
    clusterMasterTokenTransitionListener.masterTokenAcquired();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("MEMORY_CLUSTERED jobs are running on this node",logRecord.getMessage());
    Assert.assertTrue(ClusterMasterExecutorUtil.isMaster());
    schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(StorageType.MEMORY_CLUSTERED);
    Assert.assertEquals(4,schedulerResponses.size());
    Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  }
 }
