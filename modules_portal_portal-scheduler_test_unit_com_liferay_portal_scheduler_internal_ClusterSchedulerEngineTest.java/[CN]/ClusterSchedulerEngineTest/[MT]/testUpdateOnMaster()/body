{
  _mockClusterMasterExecutor.reset(true,0,0);
  _mockSchedulerEngine.resetJobs(1,1);
  _clusterSchedulerEngine.start();
  SchedulerResponse schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  assertTriggerContent(schedulerResponse,_DEFAULT_INTERVAL);
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  Trigger trigger=TriggerFactoryUtil.buildTrigger(TriggerType.SIMPLE,_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,null,null,_DEFAULT_INTERVAL * 2);
  _clusterSchedulerEngine.update(trigger,StorageType.MEMORY_CLUSTERED);
  schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  assertTriggerContent(schedulerResponse,_DEFAULT_INTERVAL * 2);
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_PERSISTENT_TEST_GROUP_NAME,StorageType.PERSISTED);
  assertTriggerContent(schedulerResponse,_DEFAULT_INTERVAL);
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  trigger=TriggerFactoryUtil.buildTrigger(TriggerType.SIMPLE,_TEST_JOB_NAME_0,_PERSISTENT_TEST_GROUP_NAME,null,null,_DEFAULT_INTERVAL * 2);
  _clusterSchedulerEngine.update(trigger,StorageType.PERSISTED);
  schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_PERSISTENT_TEST_GROUP_NAME,StorageType.PERSISTED);
  assertTriggerContent(schedulerResponse,_DEFAULT_INTERVAL * 2);
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
}
