{
  long userId=RandomTestUtil.randomLong();
  long groupId=RandomTestUtil.randomLong();
  String className=RandomTestUtil.randomString();
  long classPK=RandomTestUtil.randomLong();
  String userName=RandomTestUtil.randomString();
  String subject=RandomTestUtil.randomString();
  String body=RandomTestUtil.randomString();
  long commentId=RandomTestUtil.randomLong();
  when(commentManager.addComment(userId,groupId,className,classPK,userName,subject,body,_serviceContextFunction)).thenReturn(commentId);
  Assert.assertEquals(commentId,_commentManagerImpl.addComment(userId,groupId,className,classPK,userName,subject,body,_serviceContextFunction));
  _commentManagerImpl.addDiscussion(userId,groupId,className,classPK,userName);
  Mockito.verify(commentManager).addDiscussion(userId,groupId,className,classPK,userName);
  _commentManagerImpl.deleteComment(commentId);
  Mockito.verify(commentManager).deleteComment(commentId);
  _commentManagerImpl.deleteDiscussion(className,classPK);
  Mockito.verify(commentManager).deleteDiscussion(className,classPK);
  int commentCount=RandomTestUtil.randomInt();
  when(commentManager.getCommentCount(className,classPK)).thenReturn(commentCount);
  Assert.assertEquals(commentCount,_commentManagerImpl.getCommentCount(className,classPK));
}
