{
  File propsFile=new File(_LANG_DIR + "Language_" + languageId+ ".properties");
  Properties props=new Properties();
  if (propsFile.exists()) {
    props.load(new FileInputStream(propsFile));
  }
  String translationId="en_" + languageId;
  if (translationId.equals("en_zh_CN")) {
    translationId="en_zh";
  }
 else   if (translationId.equals("en_zh_TW")) {
    translationId="en_zt";
  }
  BufferedReader br=new BufferedReader(new StringReader(content));
  BufferedWriter bw=new BufferedWriter(new FileWriter(_LANG_DIR + "Language_" + languageId+ ".properties.native"));
  String line=null;
  while ((line=br.readLine()) != null) {
    int pos=line.indexOf("=");
    if (pos != -1) {
      String key=line.substring(0,pos);
      String value=line.substring(pos + 1,line.length());
      String translatedText=props.getProperty(key);
      if ((translatedText != null) && (translatedText.indexOf("Babel Fish") != -1)) {
        translatedText="";
      }
      if (translatedText == null || translatedText.equals("")) {
        System.out.println(languageId + " " + key);
        if (line.indexOf("{") != -1 || line.indexOf("<") != -1) {
          translatedText=value;
        }
 else {
          translatedText=_translate(translationId,value);
        }
      }
      if (Validator.isNotNull(translatedText)) {
        if (translatedText.indexOf("&#39;") != -1) {
          translatedText=StringUtil.replace(translatedText,"&#39;","\'");
        }
        bw.write(key + "=" + translatedText);
        bw.newLine();
        bw.flush();
      }
    }
 else {
      bw.write(line);
      bw.newLine();
      bw.flush();
    }
  }
  br.close();
  bw.close();
}
