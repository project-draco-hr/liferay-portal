{
  DB db=DBFactoryUtil.getDB(_dbType);
  if (db instanceof MySQLDB) {
    db=new SampleMySQLDB();
  }
  Map<String,Writer> insertSQLWriters=new HashMap<>();
  Map<String,StringBundler> insertSQLs=new HashMap<>();
  List<String> miscSQLs=new ArrayList<>();
  try (UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(reader)){
    String s=null;
    while ((_freemarkerThrowable == null) && ((s=unsyncBufferedReader.readLine()) != null)) {
      s=s.trim();
      if (s.length() > 0) {
        if (s.startsWith("insert into ")) {
          compressSQL(db,dir,insertSQLWriters,insertSQLs,s.substring(12));
        }
 else {
          miscSQLs.add(s);
        }
      }
    }
  }
   if (_freemarkerThrowable != null) {
    throw new Exception("Unable to process freemarker template ",_freemarkerThrowable);
  }
  for (  Map.Entry<String,StringBundler> entry : insertSQLs.entrySet()) {
    String tableName=entry.getKey();
    StringBundler sb=entry.getValue();
    if (sb.index() > 0) {
      String insertSQL=db.buildSQL(sb.toString());
      writeToInsertSQLFile(dir,tableName,insertSQLWriters,insertSQL);
    }
    try (Writer insertSQLWriter=insertSQLWriters.remove(tableName)){
      insertSQLWriter.write(";\n");
    }
   }
  try (Writer miscSQLWriter=new FileWriter(new File(dir,"misc.sql"))){
    for (    String miscSQL : miscSQLs) {
      miscSQL=db.buildSQL(miscSQL);
      miscSQLWriter.write(miscSQL);
      miscSQLWriter.write(StringPool.NEW_LINE);
    }
  }
 }
