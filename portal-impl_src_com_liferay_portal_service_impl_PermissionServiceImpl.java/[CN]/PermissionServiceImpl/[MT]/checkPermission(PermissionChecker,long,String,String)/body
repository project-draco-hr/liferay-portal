{
  if (checkBaseModelPermission(permissionChecker,groupId,name,GetterUtil.getLong(primKey))) {
    return;
  }
  if ((primKey != null) && primKey.contains(PortletConstants.LAYOUT_SEPARATOR)) {
    int pos=primKey.indexOf(PortletConstants.LAYOUT_SEPARATOR);
    long plid=GetterUtil.getLong(primKey.substring(0,pos));
    String portletId=primKey.substring(pos + PortletConstants.LAYOUT_SEPARATOR.length());
    PortletPermissionUtil.check(permissionChecker,plid,portletId,ActionKeys.CONFIGURATION);
  }
 else   if (!permissionChecker.hasPermission(groupId,name,primKey,ActionKeys.PERMISSIONS)) {
    AssetRendererFactory assetRendererFactory=AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(name);
    if (assetRendererFactory != null) {
      try {
        if (assetRendererFactory.hasPermission(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS)) {
          return;
        }
      }
 catch (      Exception e) {
      }
    }
    long ownerId=0;
    if (resourceBlockLocalService.isSupported(name)) {
      PermissionedModel permissionedModel=resourceBlockLocalService.getPermissionedModel(name,GetterUtil.getLong(primKey));
      if (permissionedModel instanceof GroupedModel) {
        GroupedModel groupedModel=(GroupedModel)permissionedModel;
        ownerId=groupedModel.getUserId();
      }
 else       if (permissionedModel instanceof AuditedModel) {
        AuditedModel auditedModel=(AuditedModel)permissionedModel;
        ownerId=auditedModel.getUserId();
      }
    }
 else {
      ResourcePermission resourcePermission=resourcePermissionLocalService.getResourcePermission(permissionChecker.getCompanyId(),name,ResourceConstants.SCOPE_INDIVIDUAL,primKey,permissionChecker.getOwnerRoleId());
      ownerId=resourcePermission.getOwnerId();
    }
    if (permissionChecker.hasOwnerPermission(permissionChecker.getCompanyId(),name,primKey,ownerId,ActionKeys.PERMISSIONS)) {
      return;
    }
    Role role=null;
    if (name.equals(Role.class.getName())) {
      long roleId=GetterUtil.getLong(primKey);
      role=rolePersistence.findByPrimaryKey(roleId);
    }
    if ((role != null) && role.isTeam()) {
      Team team=teamPersistence.findByPrimaryKey(role.getClassPK());
      TeamPermissionUtil.check(permissionChecker,team,ActionKeys.PERMISSIONS);
    }
 else {
      List<String> resourceActions=ResourceActionsUtil.getResourceActions(name);
      if (!resourceActions.contains(ActionKeys.DEFINE_PERMISSIONS) || !permissionChecker.hasPermission(groupId,name,primKey,ActionKeys.DEFINE_PERMISSIONS)) {
        throw new PrincipalException();
      }
    }
  }
}
