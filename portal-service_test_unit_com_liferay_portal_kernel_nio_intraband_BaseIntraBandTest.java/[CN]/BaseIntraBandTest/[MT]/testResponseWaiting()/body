{
  long sequenceId=100;
  long timeout=10000;
  Datagram requestDatagram=Datagram.createRequestDatagram(_type,_dataContent);
  requestDatagram.setSequenceId(sequenceId);
  requestDatagram.timeout=timeout;
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram);
  Assert.assertEquals(1,_mockIntraBand.responseWaitingMap.size());
  Assert.assertSame(requestDatagram,_mockIntraBand.responseWaitingMap.get(sequenceId));
  Assert.assertEquals(1,_mockIntraBand.timeoutMap.size());
  Assert.assertTrue(_mockIntraBand.timeoutMap.values().contains(sequenceId));
  Datagram responseDatagram=Datagram.createResponseDatagram(requestDatagram,_dataContent);
  Assert.assertFalse(responseDatagram.isRequest());
  _mockIntraBand.removeResponseWaitingDatagram(responseDatagram);
  Assert.assertTrue(_mockIntraBand.responseWaitingMap.isEmpty());
  Assert.assertTrue(_mockIntraBand.timeoutMap.isEmpty());
  _mockIntraBand.removeResponseWaitingDatagram(responseDatagram);
  Assert.assertTrue(_mockIntraBand.responseWaitingMap.isEmpty());
  Assert.assertTrue(_mockIntraBand.timeoutMap.isEmpty());
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.WARNING);
  Datagram requestDatagram1=Datagram.createRequestDatagram(_type,_dataContent);
  RecordCompletionHandler<Object> recordCompletionHandler1=new RecordCompletionHandler<Object>();
  requestDatagram1.setSequenceId(sequenceId);
  requestDatagram1.completionHandler=recordCompletionHandler1;
  requestDatagram1.timeout=1;
  Datagram requestDatagram2=Datagram.createRequestDatagram(_type,_dataContent);
  RecordCompletionHandler<Object> recordCompletionHandler2=new RecordCompletionHandler<Object>();
  requestDatagram2.setSequenceId(sequenceId + 1);
  requestDatagram2.completionHandler=recordCompletionHandler2;
  requestDatagram2.timeout=1;
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram1);
  Thread.sleep(10);
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram2);
  Assert.assertEquals(2,_mockIntraBand.responseWaitingMap.size());
  Assert.assertSame(requestDatagram1,_mockIntraBand.responseWaitingMap.get(sequenceId));
  Assert.assertSame(requestDatagram2,_mockIntraBand.responseWaitingMap.get(sequenceId + 1));
  Assert.assertEquals(2,_mockIntraBand.timeoutMap.size());
  Assert.assertTrue(_mockIntraBand.timeoutMap.values().contains(sequenceId));
  Assert.assertTrue(_mockIntraBand.timeoutMap.values().contains(sequenceId + 1));
  Thread.sleep(10);
  _mockIntraBand.cleanUpTimeoutResponseWaitingDatagrams();
  Assert.assertEquals(2,logRecords.size());
  Assert.assertTrue(logRecords.get(0).getMessage().startsWith("Removed timeout response waiting Datagram "));
  Assert.assertTrue(logRecords.get(1).getMessage().startsWith("Removed timeout response waiting Datagram "));
  recordCompletionHandler1.waitUntilTimeouted();
  recordCompletionHandler2.waitUntilTimeouted();
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.OFF);
  requestDatagram1=Datagram.createRequestDatagram(_type,_dataContent);
  recordCompletionHandler1=new RecordCompletionHandler<Object>();
  requestDatagram1.setSequenceId(sequenceId);
  requestDatagram1.completionHandler=recordCompletionHandler1;
  requestDatagram1.timeout=1;
  requestDatagram2=Datagram.createRequestDatagram(_type,_dataContent);
  recordCompletionHandler2=new RecordCompletionHandler<Object>();
  requestDatagram2.setSequenceId(sequenceId + 1);
  requestDatagram2.completionHandler=recordCompletionHandler2;
  requestDatagram2.timeout=1;
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram1);
  Thread.sleep(10);
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram2);
  Assert.assertEquals(2,_mockIntraBand.responseWaitingMap.size());
  Assert.assertSame(requestDatagram1,_mockIntraBand.responseWaitingMap.get(sequenceId));
  Assert.assertSame(requestDatagram2,_mockIntraBand.responseWaitingMap.get(sequenceId + 1));
  Assert.assertEquals(2,_mockIntraBand.timeoutMap.size());
  Assert.assertTrue(_mockIntraBand.timeoutMap.values().contains(sequenceId));
  Assert.assertTrue(_mockIntraBand.timeoutMap.values().contains(sequenceId + 1));
  Thread.sleep(10);
  _mockIntraBand.cleanUpTimeoutResponseWaitingDatagrams();
  Assert.assertTrue(logRecords.isEmpty());
  recordCompletionHandler1.waitUntilTimeouted();
  recordCompletionHandler2.waitUntilTimeouted();
  _mockIntraBand.cleanUpTimeoutResponseWaitingDatagrams();
}
