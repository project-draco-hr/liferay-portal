{
  try {
    _mockIntraBand.sendDatagram(null,null,null,null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Registration reference is null",npe.getMessage());
  }
  RegistrationReference registrationReference=new MockRegistrationReference(_mockIntraBand);
  registrationReference.cancelRegistration();
  try {
    _mockIntraBand.sendDatagram(registrationReference,null,null,null,null);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Registration reference is invalid",iae.getMessage());
  }
  registrationReference=new MockRegistrationReference(_mockIntraBand);
  try {
    _mockIntraBand.sendDatagram(registrationReference,null,null,null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Datagram is null",npe.getMessage());
  }
  try {
    _mockIntraBand.sendDatagram(registrationReference,Datagram.createRequestDatagram(_type,_data),null,null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Completion type set is null",npe.getMessage());
  }
  try {
    _mockIntraBand.sendDatagram(registrationReference,Datagram.createRequestDatagram(_type,_data),null,EnumSet.noneOf(CompletionHandler.CompletionType.class),null);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Completion type set is empty",iae.getMessage());
  }
  try {
    _mockIntraBand.sendDatagram(registrationReference,Datagram.createRequestDatagram(_type,_data),null,EnumSet.of(CompletionHandler.CompletionType.SUBMITTED),null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Complete handler is null",npe.getMessage());
  }
  try {
    _mockIntraBand.sendDatagram(registrationReference,Datagram.createRequestDatagram(_type,_data),null,EnumSet.of(CompletionHandler.CompletionType.SUBMITTED),new RecordCompletionHandler<Object>(),1000,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Time unit is null",npe.getMessage());
  }
  Datagram requestDatagram=Datagram.createRequestDatagram(_type,_data);
  _mockIntraBand.sendDatagram(registrationReference,requestDatagram,null,EnumSet.of(CompletionHandler.CompletionType.DELIVERED),new RecordCompletionHandler<Object>(),0,TimeUnit.MILLISECONDS);
  long sequenceId=requestDatagram.getSequenceId();
  Assert.assertEquals(_TIMEOUT_DEFAULT,_mockIntraBand.getDatagram().timeout);
  Assert.assertEquals(1,_mockIntraBand.responseWaitingMap.size());
  Assert.assertSame(requestDatagram,_mockIntraBand.responseWaitingMap.remove(sequenceId));
  Assert.assertEquals(1,_mockIntraBand.timeoutMap.size());
  Assert.assertTrue(_mockIntraBand.timeoutMap.values().remove(sequenceId));
  _mockIntraBand.sendDatagram(registrationReference,requestDatagram,null,EnumSet.of(CompletionHandler.CompletionType.REPLIED),new RecordCompletionHandler<Object>(),2,TimeUnit.SECONDS);
  sequenceId=requestDatagram.getSequenceId();
  Assert.assertEquals(2000,_mockIntraBand.getDatagram().timeout);
  Assert.assertEquals(1,_mockIntraBand.responseWaitingMap.size());
  Assert.assertSame(requestDatagram,_mockIntraBand.responseWaitingMap.remove(sequenceId));
  Assert.assertEquals(1,_mockIntraBand.timeoutMap.size());
  Assert.assertTrue(_mockIntraBand.timeoutMap.values().remove(sequenceId));
  _mockIntraBand.sendDatagram(registrationReference,requestDatagram,null,EnumSet.of(CompletionHandler.CompletionType.SUBMITTED),new RecordCompletionHandler<Object>());
  Assert.assertEquals(_TIMEOUT_DEFAULT,_mockIntraBand.getDatagram().timeout);
}
