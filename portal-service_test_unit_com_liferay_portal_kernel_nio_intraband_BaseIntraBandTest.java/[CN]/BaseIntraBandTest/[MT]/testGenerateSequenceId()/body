{
  _mockIntraBand.sequenceIdGenerator.set(Long.MAX_VALUE);
  Assert.assertEquals(1,_mockIntraBand.generateSequenceId());
  Assert.assertEquals(2,_mockIntraBand.generateSequenceId());
  int testCount=10240;
  Callable<Long> getSequenceIdCallable=new Callable<Long>(){
    public Long call() throws Exception {
      return _mockIntraBand.generateSequenceId();
    }
  }
;
  List<Callable<Long>> getSequenceIdCallables=new ArrayList<Callable<Long>>(2);
  getSequenceIdCallables.add(getSequenceIdCallable);
  getSequenceIdCallables.add(getSequenceIdCallable);
  ExecutorService executorService=Executors.newFixedThreadPool(2);
  for (int i=0; i < testCount; i++) {
    _mockIntraBand.sequenceIdGenerator.set(Long.MAX_VALUE);
    List<Future<Long>> getSequenceIdFutures=executorService.invokeAll(getSequenceIdCallables);
    long sequenceId1=getSequenceIdFutures.get(0).get();
    long sequenceId2=getSequenceIdFutures.get(1).get();
    Assert.assertTrue(((sequenceId1 == 1) && (sequenceId2 == 2)) || ((sequenceId1 == 2) && (sequenceId2 == 1)));
  }
  executorService.shutdownNow();
}
