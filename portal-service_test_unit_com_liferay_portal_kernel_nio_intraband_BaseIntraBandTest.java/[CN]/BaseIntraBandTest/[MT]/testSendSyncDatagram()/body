{
  try {
    _mockIntraBand.sendSyncDatagram(null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Registration reference is null",npe.getMessage());
  }
  try {
    RegistrationReference registrationReference=new MockRegistrationReference(_mockIntraBand);
    registrationReference.cancelRegistration();
    _mockIntraBand.sendSyncDatagram(registrationReference,null);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Registration reference is invalid",iae.getMessage());
  }
  try {
    _mockIntraBand.sendSyncDatagram(new MockRegistrationReference(_mockIntraBand),null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Datagram is null",npe.getMessage());
  }
  try {
    _mockIntraBand.sendSyncDatagram(new MockRegistrationReference(_mockIntraBand),Datagram.createRequestDatagram(_type,_data),1000,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Time unit is null",npe.getMessage());
  }
  try {
    _mockIntraBand.sendSyncDatagram(new MockRegistrationReference(_mockIntraBand),Datagram.createRequestDatagram(_type,_data),0,TimeUnit.MILLISECONDS);
    Assert.fail();
  }
 catch (  TimeoutException te) {
    Assert.assertEquals("Result waiting timeout",te.getMessage());
  }
  Assert.assertEquals(_DEFAULT_TIMEOUT,_mockIntraBand.getDatagram().timeout);
  Datagram requestDatagram=Datagram.createRequestDatagram(_type,_data);
  try {
    _mockIntraBand.sendSyncDatagram(new MockRegistrationReference(_mockIntraBand),requestDatagram,2,TimeUnit.SECONDS);
    Assert.fail();
  }
 catch (  TimeoutException te) {
    Assert.assertEquals("Result waiting timeout",te.getMessage());
  }
  Assert.assertEquals(2000,requestDatagram.timeout);
  final IOException expectedIOException=new IOException("Force to fail");
  IntraBand intraBand=new MockIntraBand(_DEFAULT_TIMEOUT){
    @Override protected void doSendDatagram(    RegistrationReference registrationReference,    Datagram datagram){
      CompletionHandler<Object> completionHandler=datagram.completionHandler;
      completionHandler.failed(null,expectedIOException);
    }
  }
;
  try {
    intraBand.sendSyncDatagram(new MockRegistrationReference(_mockIntraBand),Datagram.createRequestDatagram(_type,_data));
    Assert.fail();
  }
 catch (  IOException ioe) {
    Assert.assertSame(expectedIOException,ioe);
  }
  final Datagram expectedDatagram=Datagram.createResponseDatagram(requestDatagram,_data);
  intraBand=new MockIntraBand(_DEFAULT_TIMEOUT){
    @Override protected void doSendDatagram(    RegistrationReference registrationReference,    Datagram datagram){
      CompletionHandler<Object> completionHandler=datagram.completionHandler;
      completionHandler.replied(null,expectedDatagram);
    }
  }
;
  Datagram responseDatagram=intraBand.sendSyncDatagram(new MockRegistrationReference(_mockIntraBand),requestDatagram);
  Assert.assertSame(expectedDatagram,responseDatagram);
  SendSyncDatagramCompletionHandler sendSyncDatagramCompletionHandler=new SendSyncDatagramCompletionHandler();
  sendSyncDatagramCompletionHandler.delivered(null);
  sendSyncDatagramCompletionHandler.submitted(null);
  sendSyncDatagramCompletionHandler.timeouted(null);
}
