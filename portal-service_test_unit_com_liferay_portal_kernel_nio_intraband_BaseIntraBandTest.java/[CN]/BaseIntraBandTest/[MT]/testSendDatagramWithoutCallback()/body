{
  try {
    _mockIntraBand.sendDatagram(null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Registration reference is null",npe.getMessage());
  }
  RegistrationReference registrationReference=new MockRegistrationReference(_mockIntraBand);
  registrationReference.cancelRegistration();
  try {
    _mockIntraBand.sendDatagram(registrationReference,null);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Registration reference is invalid",iae.getMessage());
  }
  registrationReference=new MockRegistrationReference(_mockIntraBand);
  try {
    _mockIntraBand.sendDatagram(registrationReference,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Datagram is null",npe.getMessage());
  }
  Datagram datagram=Datagram.createRequestDatagram(_type,_data);
  _mockIntraBand.sendDatagram(registrationReference,datagram);
  Assert.assertSame(registrationReference,_mockIntraBand.getRegistrationReference());
  Assert.assertSame(datagram,_mockIntraBand.getDatagram());
}
