{
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.FINE);
  MockRegistrationReference mockRegistrationReference=new MockRegistrationReference(_mockIntraBand);
  ChannelContext channelContext=new ChannelContext(null);
  channelContext.setRegistrationReference(mockRegistrationReference);
  _mockIntraBand.handleReading(new MockScatteringByteChannel(false),channelContext);
  Assert.assertFalse(mockRegistrationReference.isValid());
  Assert.assertEquals(1,logRecords.size());
  LogRecord logRecord=logRecords.get(0);
  Assert.assertTrue(logRecord.getMessage().startsWith("Broken read channel, unregister "));
  Assert.assertTrue(logRecord.getThrown() instanceof IOException);
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.INFO);
  mockRegistrationReference=new MockRegistrationReference(_mockIntraBand);
  channelContext=new ChannelContext(null);
  channelContext.setRegistrationReference(mockRegistrationReference);
  _mockIntraBand.handleReading(new MockScatteringByteChannel(true),channelContext);
  Assert.assertFalse(mockRegistrationReference.isValid());
  Assert.assertEquals(1,logRecords.size());
  logRecord=logRecords.get(0);
  Assert.assertTrue(logRecord.getMessage().startsWith("Broken read channel, unregister "));
  Assert.assertNull(logRecord.getThrown());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.OFF);
  mockRegistrationReference=new MockRegistrationReference(_mockIntraBand);
  channelContext=new ChannelContext(null);
  channelContext.setRegistrationReference(mockRegistrationReference);
  channelContext.setReadingDatagram(Datagram.createReceiveDatagram());
  _mockIntraBand.handleReading(new MockScatteringByteChannel(false),channelContext);
  Assert.assertFalse(mockRegistrationReference.isValid());
  Assert.assertTrue(logRecords.isEmpty());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.WARNING);
  Pipe pipe=Pipe.open();
  SourceChannel sourceChannel=pipe.source();
  final SinkChannel sinkChannel=pipe.sink();
  Datagram requestDatagram=Datagram.createRequestDatagram(_type,_dataContent);
  requestDatagram.writeTo(sinkChannel);
  final ByteBuffer byteBuffer=ByteBuffer.allocate(_dataContent.length + 14);
  while (byteBuffer.hasRemaining()) {
    sourceChannel.read(byteBuffer);
  }
  sourceChannel.configureBlocking(false);
  sinkChannel.configureBlocking(false);
  Thread slowWritingThread=new Thread(){
    @Override public void run(){
      try {
        for (        byte b : byteBuffer.array()) {
          sinkChannel.write(ByteBuffer.wrap(new byte[]{b}));
          Thread.sleep(1);
        }
      }
 catch (      Exception e) {
        Assert.fail(e.getMessage());
      }
    }
  }
;
  slowWritingThread.start();
  channelContext=new ChannelContext(null);
  Datagram receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  while (receiveDatagram == channelContext.getReadingDatagram()) {
    _mockIntraBand.handleReading(sourceChannel,channelContext);
  }
  slowWritingThread.join();
  Assert.assertEquals(_type,receiveDatagram.getType());
  Assert.assertArrayEquals(_dataContent,receiveDatagram.getData().array());
  Assert.assertEquals(1,logRecords.size());
  Assert.assertTrue(logRecords.get(0).getMessage().startsWith("Dropped ownerless request "));
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.OFF);
  requestDatagram=Datagram.createRequestDatagram(_type,_dataContent);
  requestDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  Assert.assertTrue(receiveDatagram.isRequest());
  Assert.assertEquals(_type,receiveDatagram.getType());
  Assert.assertArrayEquals(_dataContent,receiveDatagram.getData().array());
  Assert.assertTrue(logRecords.isEmpty());
  long sequenceId=100;
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.WARNING);
  Datagram ackResponseDatagram=Datagram.createACKResponseDatagram(sequenceId);
  ackResponseDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  Assert.assertTrue(receiveDatagram.isAckResponse());
  Assert.assertEquals(1,logRecords.size());
  Assert.assertTrue(logRecords.get(0).getMessage().startsWith("Dropped ownerless ACK response "));
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.OFF);
  ackResponseDatagram=Datagram.createACKResponseDatagram(sequenceId);
  ackResponseDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  Assert.assertTrue(receiveDatagram.isAckResponse());
  Assert.assertTrue(logRecords.isEmpty());
  RecordCompletionHandler<Object> recordCompletionHandler=new RecordCompletionHandler<Object>();
  requestDatagram=Datagram.createRequestDatagram(_type,_dataContent);
  requestDatagram.setSequenceId(sequenceId);
  requestDatagram.completionHandler=recordCompletionHandler;
  requestDatagram.timeout=10000;
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram);
  ackResponseDatagram=Datagram.createACKResponseDatagram(sequenceId);
  ackResponseDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  recordCompletionHandler.waitUntilDelivered();
  Assert.assertTrue(receiveDatagram.isAckResponse());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.WARNING);
  Datagram responseDatagram=Datagram.createResponseDatagram(requestDatagram,_dataContent);
  responseDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  Assert.assertTrue(receiveDatagram.isResponse());
  Assert.assertEquals(0,receiveDatagram.getType());
  Assert.assertArrayEquals(_dataContent,receiveDatagram.getData().array());
  Assert.assertEquals(1,logRecords.size());
  Assert.assertTrue(logRecords.get(0).getMessage().startsWith("Dropped ownerless response "));
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.OFF);
  responseDatagram=Datagram.createResponseDatagram(requestDatagram,_dataContent);
  responseDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  Assert.assertTrue(receiveDatagram.isResponse());
  Assert.assertEquals(0,receiveDatagram.getType());
  Assert.assertArrayEquals(_dataContent,receiveDatagram.getData().array());
  Assert.assertTrue(logRecords.isEmpty());
  recordCompletionHandler=new RecordCompletionHandler<Object>();
  requestDatagram=Datagram.createRequestDatagram(_type,_dataContent);
  requestDatagram.setSequenceId(sequenceId);
  requestDatagram.completionTypes=BaseIntraBand.REPLIED_ENUM_SET;
  requestDatagram.completionHandler=recordCompletionHandler;
  requestDatagram.timeout=10000;
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram);
  responseDatagram=Datagram.createResponseDatagram(requestDatagram,_dataContent);
  responseDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  recordCompletionHandler.waitUntilReplied();
  Assert.assertTrue(receiveDatagram.isResponse());
  Assert.assertEquals(0,receiveDatagram.getType());
  Assert.assertArrayEquals(_dataContent,receiveDatagram.getData().array());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.WARNING);
  recordCompletionHandler=new RecordCompletionHandler<Object>();
  requestDatagram=Datagram.createRequestDatagram(_type,_dataContent);
  requestDatagram.setSequenceId(sequenceId);
  requestDatagram.completionTypes=EnumSet.noneOf(CompletionType.class);
  requestDatagram.completionHandler=recordCompletionHandler;
  requestDatagram.timeout=10000;
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram);
  responseDatagram=Datagram.createResponseDatagram(requestDatagram,_dataContent);
  responseDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  Assert.assertTrue(receiveDatagram.isResponse());
  Assert.assertEquals(0,receiveDatagram.getType());
  Assert.assertArrayEquals(_dataContent,receiveDatagram.getData().array());
  Assert.assertEquals(1,logRecords.size());
  Assert.assertTrue(logRecords.get(0).getMessage().startsWith("Dropped unconcerned response "));
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.OFF);
  recordCompletionHandler=new RecordCompletionHandler<Object>();
  requestDatagram=Datagram.createRequestDatagram(_type,_dataContent);
  requestDatagram.setSequenceId(sequenceId);
  requestDatagram.completionTypes=EnumSet.noneOf(CompletionType.class);
  requestDatagram.completionHandler=recordCompletionHandler;
  requestDatagram.timeout=10000;
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram);
  responseDatagram=Datagram.createResponseDatagram(requestDatagram,_dataContent);
  responseDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  Assert.assertTrue(receiveDatagram.isResponse());
  Assert.assertEquals(0,receiveDatagram.getType());
  Assert.assertArrayEquals(_dataContent,receiveDatagram.getData().array());
  Assert.assertTrue(logRecords.isEmpty());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.WARNING);
  requestDatagram=Datagram.createRequestDatagram(_type,_dataContent);
  requestDatagram.setSequenceId(sequenceId);
  requestDatagram.setAckRequest(true);
  requestDatagram.writeTo(sinkChannel);
  mockRegistrationReference=new MockRegistrationReference(_mockIntraBand);
  channelContext=new ChannelContext(null);
  channelContext.setRegistrationReference(mockRegistrationReference);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  Assert.assertTrue(receiveDatagram.isAckRequest());
  Assert.assertTrue(receiveDatagram.isRequest());
  Assert.assertEquals(_type,receiveDatagram.getType());
  Assert.assertArrayEquals(_dataContent,receiveDatagram.getData().array());
  Assert.assertEquals(1,logRecords.size());
  Assert.assertTrue(logRecords.get(0).getMessage().startsWith("Dropped ownerless request "));
  Assert.assertSame(mockRegistrationReference,_mockIntraBand.getRegistrationReference());
  Assert.assertEquals(sequenceId,_mockIntraBand.getDatagram().getSequenceId());
  Assert.assertTrue(_mockIntraBand.getDatagram().isAckResponse());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraBand.class.getName(),Level.SEVERE);
  recordCompletionHandler=new RecordCompletionHandler<Object>();
  RecordDatagramReceiveHandler recordDatagramReceiveHandler=new RecordDatagramReceiveHandler();
  _mockIntraBand.registerDatagramReceiveHandler(_type,recordDatagramReceiveHandler);
  requestDatagram=Datagram.createRequestDatagram(_type,_dataContent);
  requestDatagram.setSequenceId(sequenceId);
  requestDatagram.setAckRequest(true);
  requestDatagram.completionHandler=recordCompletionHandler;
  requestDatagram.timeout=10000;
  _mockIntraBand.addResponseWaitingDatagram(requestDatagram);
  requestDatagram.writeTo(sinkChannel);
  receiveDatagram=Datagram.createReceiveDatagram();
  channelContext.setReadingDatagram(receiveDatagram);
  _mockIntraBand.handleReading(sourceChannel,channelContext);
  Assert.assertTrue(receiveDatagram.isRequest());
  Assert.assertEquals(_type,receiveDatagram.getType());
  Assert.assertArrayEquals(_dataContent,receiveDatagram.getData().array());
  Datagram recordDatagram=recordDatagramReceiveHandler.getReceiveDatagram();
  Assert.assertSame(receiveDatagram,recordDatagram);
  Assert.assertEquals(_type,recordDatagram.getType());
  Assert.assertArrayEquals(_dataContent,recordDatagram.getData().array());
  Assert.assertEquals(1,logRecords.size());
  logRecord=logRecords.get(0);
  Assert.assertTrue(logRecord.getMessage().startsWith("Dispatching failure."));
  Assert.assertTrue(logRecord.getThrown() instanceof RuntimeException);
  sourceChannel.close();
  sinkChannel.close();
}
