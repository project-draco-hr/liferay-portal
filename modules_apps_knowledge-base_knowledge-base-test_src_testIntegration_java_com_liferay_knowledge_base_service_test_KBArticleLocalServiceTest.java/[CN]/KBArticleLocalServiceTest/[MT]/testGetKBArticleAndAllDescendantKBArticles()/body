{
  KBArticle parentKBArticle=KBArticleLocalServiceUtil.addKBArticle(_user.getUserId(),_kbFolderClassNameId,KBFolderConstants.DEFAULT_PARENT_FOLDER_ID,"Parent Article",StringUtil.randomString(),StringUtil.randomString(),StringUtil.randomString(),null,null,null,_serviceContext);
  KBArticle childKBArticle=KBArticleLocalServiceUtil.addKBArticle(_user.getUserId(),_kbArticleClassNameId,parentKBArticle.getResourcePrimKey(),"Child Article",StringUtil.randomString(),StringUtil.randomString(),StringUtil.randomString(),null,null,null,_serviceContext);
  KBArticle grandchildKBArticleA=KBArticleLocalServiceUtil.addKBArticle(_user.getUserId(),_kbArticleClassNameId,childKBArticle.getResourcePrimKey(),"Grandchild Article A",StringUtil.randomString(),StringUtil.randomString(),StringUtil.randomString(),null,null,null,_serviceContext);
  KBArticle greatGrandchildKBArticleA=KBArticleLocalServiceUtil.addKBArticle(_user.getUserId(),_kbArticleClassNameId,grandchildKBArticleA.getResourcePrimKey(),"GreatGrandchild Article A",StringUtil.randomString(),StringUtil.randomString(),StringUtil.randomString(),null,null,null,_serviceContext);
  KBArticle grandchildKBArticleB=KBArticleLocalServiceUtil.addKBArticle(_user.getUserId(),_kbArticleClassNameId,childKBArticle.getResourcePrimKey(),"Grandchild Article B",StringUtil.randomString(),StringUtil.randomString(),StringUtil.randomString(),null,null,null,_serviceContext);
  KBArticle greatGrandchildKBArticleB=KBArticleLocalServiceUtil.addKBArticle(_user.getUserId(),_kbArticleClassNameId,grandchildKBArticleB.getResourcePrimKey(),"GreatGrandchild Article B",StringUtil.randomString(),StringUtil.randomString(),StringUtil.randomString(),null,null,null,_serviceContext);
  List<KBArticle> kbArticleAndAllDescendantKBArticles=KBArticleLocalServiceUtil.getKBArticleAndAllDescendantKBArticles(parentKBArticle.getResourcePrimKey(),WorkflowConstants.STATUS_APPROVED,new KBArticlePriorityComparator(true));
  Assert.assertEquals(6,kbArticleAndAllDescendantKBArticles.size());
  KBArticle currentParentKBArticle=kbArticleAndAllDescendantKBArticles.get(0);
  KBArticle currentChildKBArticle=kbArticleAndAllDescendantKBArticles.get(1);
  KBArticle currentGrandchildKBArticleA=kbArticleAndAllDescendantKBArticles.get(2);
  KBArticle currentGreatGrandchildKBArticleA=kbArticleAndAllDescendantKBArticles.get(3);
  KBArticle currentGrandchildKBArticleB=kbArticleAndAllDescendantKBArticles.get(4);
  KBArticle currentGreatGrandchildKBArticleB=kbArticleAndAllDescendantKBArticles.get(5);
  Assert.assertEquals(parentKBArticle.getResourcePrimKey(),currentParentKBArticle.getResourcePrimKey());
  Assert.assertEquals(childKBArticle.getResourcePrimKey(),currentChildKBArticle.getResourcePrimKey());
  Assert.assertEquals(grandchildKBArticleA.getResourcePrimKey(),currentGrandchildKBArticleA.getResourcePrimKey());
  Assert.assertEquals(greatGrandchildKBArticleA.getResourcePrimKey(),currentGreatGrandchildKBArticleA.getResourcePrimKey());
  Assert.assertEquals(grandchildKBArticleB.getResourcePrimKey(),currentGrandchildKBArticleB.getResourcePrimKey());
  Assert.assertEquals(greatGrandchildKBArticleB.getResourcePrimKey(),currentGreatGrandchildKBArticleB.getResourcePrimKey());
}
