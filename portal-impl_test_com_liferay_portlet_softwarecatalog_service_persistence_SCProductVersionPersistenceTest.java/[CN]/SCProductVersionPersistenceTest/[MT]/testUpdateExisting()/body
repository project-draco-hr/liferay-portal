{
  long pk=nextLong();
  SCProductVersion newSCProductVersion=_persistence.create(pk);
  newSCProductVersion.setCompanyId(nextLong());
  newSCProductVersion.setUserId(nextLong());
  newSCProductVersion.setUserName(randomString());
  newSCProductVersion.setCreateDate(nextDate());
  newSCProductVersion.setModifiedDate(nextDate());
  newSCProductVersion.setProductEntryId(nextLong());
  newSCProductVersion.setVersion(randomString());
  newSCProductVersion.setChangeLog(randomString());
  newSCProductVersion.setDownloadPageURL(randomString());
  newSCProductVersion.setDirectDownloadURL(randomString());
  newSCProductVersion.setRepoStoreArtifact(randomBoolean());
  _persistence.update(newSCProductVersion,false);
  SCProductVersion existingSCProductVersion=_persistence.findByPrimaryKey(newSCProductVersion.getPrimaryKey());
  assertEquals(existingSCProductVersion.getProductVersionId(),newSCProductVersion.getProductVersionId());
  assertEquals(existingSCProductVersion.getCompanyId(),newSCProductVersion.getCompanyId());
  assertEquals(existingSCProductVersion.getUserId(),newSCProductVersion.getUserId());
  assertEquals(existingSCProductVersion.getUserName(),newSCProductVersion.getUserName());
  assertEquals(existingSCProductVersion.getCreateDate(),newSCProductVersion.getCreateDate());
  assertEquals(existingSCProductVersion.getModifiedDate(),newSCProductVersion.getModifiedDate());
  assertEquals(existingSCProductVersion.getProductEntryId(),newSCProductVersion.getProductEntryId());
  assertEquals(existingSCProductVersion.getVersion(),newSCProductVersion.getVersion());
  assertEquals(existingSCProductVersion.getChangeLog(),newSCProductVersion.getChangeLog());
  assertEquals(existingSCProductVersion.getDownloadPageURL(),newSCProductVersion.getDownloadPageURL());
  assertEquals(existingSCProductVersion.getDirectDownloadURL(),newSCProductVersion.getDirectDownloadURL());
  assertEquals(existingSCProductVersion.getRepoStoreArtifact(),newSCProductVersion.getRepoStoreArtifact());
}
