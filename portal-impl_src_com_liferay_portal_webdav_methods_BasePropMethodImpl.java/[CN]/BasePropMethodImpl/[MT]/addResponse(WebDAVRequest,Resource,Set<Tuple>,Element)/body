{
  props=new HashSet<Tuple>(props);
  Element response=DocUtil.add(multistatus,"response",WebDAVUtil.DAV_URI);
  DocUtil.add(response,"href",WebDAVUtil.DAV_URI,resource.getHREF());
  Element successStat=DocUtil.add(response,"propstat",WebDAVUtil.DAV_URI);
  Element successProp=DocUtil.add(successStat,"prop",WebDAVUtil.DAV_URI);
  Element failureStat=DocUtil.add(response,"propstat",WebDAVUtil.DAV_URI);
  Element failureProp=DocUtil.add(failureStat,"prop",WebDAVUtil.DAV_URI);
  boolean hasSuccess=false;
  boolean hasFailure=false;
  if (props.contains(ALL_PROPS_PAIR)) {
    props.remove(ALL_PROPS_PAIR);
    if (resource.isCollection()) {
      props.addAll(_ALL_COLLECTION_PROPS);
    }
 else {
      props.addAll(_ALL_SIMPLE_PROPS);
    }
  }
  if (props.contains(CREATIONDATE_PAIR)) {
    props.remove(CREATIONDATE_PAIR);
    DocUtil.add(successProp,CREATIONDATE,WebDAVUtil.DAV_URI,resource.getCreateDate());
    hasSuccess=true;
  }
  if (props.contains(DISPLAYNAME_PAIR)) {
    props.remove(DISPLAYNAME_PAIR);
    DocUtil.add(successProp,DISPLAYNAME,WebDAVUtil.DAV_URI,resource.getDisplayName());
    hasSuccess=true;
  }
  if (props.contains(GETLASTMODIFIED_PAIR)) {
    props.remove(GETLASTMODIFIED_PAIR);
    DocUtil.add(successProp,GETLASTMODIFIED,WebDAVUtil.DAV_URI,resource.getModifiedDate());
    hasSuccess=true;
  }
  if (props.contains(GETCONTENTTYPE_PAIR)) {
    props.remove(GETCONTENTTYPE_PAIR);
    DocUtil.add(successProp,GETCONTENTTYPE,WebDAVUtil.DAV_URI,resource.getContentType());
    hasSuccess=true;
  }
  if (props.contains(GETCONTENTLENGTH_PAIR)) {
    props.remove(GETCONTENTLENGTH_PAIR);
    if (!resource.isCollection()) {
      DocUtil.add(successProp,GETCONTENTLENGTH,WebDAVUtil.DAV_URI,resource.getSize());
      hasSuccess=true;
    }
 else {
      DocUtil.add(failureProp,GETCONTENTLENGTH,WebDAVUtil.DAV_URI);
      hasFailure=true;
    }
  }
  if (props.contains(LOCKDISCOVERY_PAIR)) {
    props.remove(LOCKDISCOVERY_PAIR);
    Lock lock=resource.getLock();
    if (lock != null) {
      long now=System.currentTimeMillis();
      long timeRemaining=(lock.getExpirationDate().getTime() - now) / Time.SECOND;
      if (timeRemaining <= 0) {
        timeRemaining=1;
      }
      Element lockDiscovery=addElement(successProp,LOCKDISCOVERY);
      Element activeLock=addElement(lockDiscovery,"activelock");
      addElement(activeLock,"locktype","write");
      addElement(activeLock,"lockscope","exclusive");
      if (resource.isCollection()) {
        DocUtil.add(activeLock,"depth",WebDAVUtil.DAV_URI,"Infinity");
      }
      DocUtil.add(activeLock,"owner",WebDAVUtil.DAV_URI,lock.getOwner());
      DocUtil.add(activeLock,"timeout",WebDAVUtil.DAV_URI,"Second-" + timeRemaining);
      if (webDavRequest.getUserId() == lock.getUserId()) {
        Element lockToken=addElement(activeLock,"locktoken","href");
        lockToken.addText("opaquelocktoken:" + lock.getUuid());
      }
      hasSuccess=true;
    }
 else {
      DocUtil.add(failureProp,LOCKDISCOVERY,WebDAVUtil.DAV_URI);
      hasFailure=true;
    }
  }
  if (props.contains(RESOURCETYPE_PAIR)) {
    props.remove(RESOURCETYPE_PAIR);
    Element resourceType=DocUtil.add(successProp,RESOURCETYPE,WebDAVUtil.DAV_URI);
    if (resource.isCollection()) {
      DocUtil.add(resourceType,"collection",WebDAVUtil.DAV_URI);
    }
    hasSuccess=true;
  }
  WebDAVProps webDavProps=WebDAVPropsLocalServiceUtil.getWebDAVProps(webDavRequest.getCompanyId(),resource.getClassName(),resource.getPrimaryKey());
  Set<Tuple> customProps=webDavProps.getPropsSet();
  for (  Tuple tuple : props) {
    String name=(String)tuple.getObject(0);
    Namespace namespace=(Namespace)tuple.getObject(1);
    String prefix=namespace.getPrefix();
    String uri=namespace.getURI();
    if (customProps.contains(tuple)) {
      String text=webDavProps.getText(name,prefix,uri);
      DocUtil.add(successProp,name,namespace,text);
      hasSuccess=true;
    }
 else {
      DocUtil.add(failureProp,name,namespace);
      hasFailure=true;
    }
  }
  if (hasSuccess) {
    DocUtil.add(successStat,"status",WebDAVUtil.DAV_URI,"HTTP/1.1 200 OK");
  }
 else {
    response.remove(successStat);
  }
  if (!hasSuccess && hasFailure) {
    DocUtil.add(failureStat,"status",WebDAVUtil.DAV_URI,"HTTP/1.1 404 Not Found");
  }
 else {
    response.remove(failureStat);
  }
}
