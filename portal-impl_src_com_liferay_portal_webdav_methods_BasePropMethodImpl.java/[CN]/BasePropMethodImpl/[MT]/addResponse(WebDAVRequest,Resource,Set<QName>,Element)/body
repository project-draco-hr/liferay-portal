{
  props=new HashSet<QName>(props);
  Element responseElement=DocUtil.add(multistatus,createQName("response"));
  DocUtil.add(responseElement,createQName("href"),resource.getHREF());
  Element successStatElement=DocUtil.add(responseElement,createQName("propstat"));
  Element successPropElement=DocUtil.add(successStatElement,createQName("prop"));
  Element failureStatElement=DocUtil.add(responseElement,createQName("propstat"));
  Element failurePropElement=DocUtil.add(failureStatElement,createQName("prop"));
  boolean hasSuccess=false;
  boolean hasFailure=false;
  if (props.contains(ALLPROP)) {
    props.remove(ALLPROP);
    if (resource.isCollection()) {
      props.addAll(_ALL_COLLECTION_PROPS);
    }
 else {
      props.addAll(_ALL_SIMPLE_PROPS);
    }
  }
  if (props.contains(CREATIONDATE)) {
    props.remove(CREATIONDATE);
    DocUtil.add(successPropElement,CREATIONDATE,resource.getCreateDate());
    hasSuccess=true;
  }
  if (props.contains(DISPLAYNAME)) {
    props.remove(DISPLAYNAME);
    DocUtil.add(successPropElement,DISPLAYNAME,resource.getDisplayName());
    hasSuccess=true;
  }
  if (props.contains(GETLASTMODIFIED)) {
    props.remove(GETLASTMODIFIED);
    DocUtil.add(successPropElement,GETLASTMODIFIED,resource.getModifiedDate());
    hasSuccess=true;
  }
  if (props.contains(GETCONTENTTYPE)) {
    props.remove(GETCONTENTTYPE);
    DocUtil.add(successPropElement,GETCONTENTTYPE,resource.getContentType());
    hasSuccess=true;
  }
  if (props.contains(GETCONTENTLENGTH)) {
    props.remove(GETCONTENTLENGTH);
    if (!resource.isCollection()) {
      DocUtil.add(successPropElement,GETCONTENTLENGTH,resource.getSize());
      hasSuccess=true;
    }
 else {
      DocUtil.add(failurePropElement,GETCONTENTLENGTH);
      hasFailure=true;
    }
  }
  if (props.contains(ISREADONLY)) {
    props.remove(ISREADONLY);
    Lock lock=resource.getLock();
    if ((lock == null) || resource.isLocked()) {
      DocUtil.add(successPropElement,ISREADONLY,Boolean.FALSE.toString());
    }
 else {
      DocUtil.add(successPropElement,ISREADONLY,Boolean.TRUE.toString());
    }
    hasSuccess=true;
  }
  if (props.contains(LOCKDISCOVERY)) {
    props.remove(LOCKDISCOVERY);
    Lock lock=resource.getLock();
    if (lock != null) {
      Element lockDiscoveryElement=DocUtil.add(successPropElement,LOCKDISCOVERY);
      Element activeLockElement=DocUtil.add(lockDiscoveryElement,createQName("activelock"));
      Element lockTypeElement=DocUtil.add(activeLockElement,createQName("locktype"));
      DocUtil.add(lockTypeElement,createQName("write"));
      Element lockScopeElement=DocUtil.add(activeLockElement,createQName("lockscope"));
      DocUtil.add(lockScopeElement,createQName("exclusive"));
      if (resource.isCollection()) {
        DocUtil.add(activeLockElement,createQName("depth"),"Infinity");
      }
      DocUtil.add(activeLockElement,createQName("owner"),lock.getOwner());
      long timeRemaining=0;
      Date expirationDate=lock.getExpirationDate();
      if (expirationDate != null) {
        long now=System.currentTimeMillis();
        timeRemaining=(expirationDate.getTime() - now) / Time.SECOND;
        if (timeRemaining <= 0) {
          timeRemaining=1;
        }
      }
      if (timeRemaining > 0) {
        DocUtil.add(activeLockElement,createQName("timeout"),"Second-" + timeRemaining);
      }
 else {
        DocUtil.add(activeLockElement,createQName("timeout"),"Infinite");
      }
      if (webDavRequest.getUserId() == lock.getUserId()) {
        Element lockTokenElement=DocUtil.add(activeLockElement,createQName("locktoken"));
        DocUtil.add(lockTokenElement,createQName("href"),"opaquelocktoken:" + lock.getUuid());
      }
      hasSuccess=true;
    }
 else {
      DocUtil.add(failurePropElement,LOCKDISCOVERY);
      hasFailure=true;
    }
  }
  if (props.contains(RESOURCETYPE)) {
    props.remove(RESOURCETYPE);
    Element resourceTypeElement=DocUtil.add(successPropElement,RESOURCETYPE);
    if (resource.isCollection()) {
      DocUtil.add(resourceTypeElement,createQName("collection"));
    }
    hasSuccess=true;
  }
  WebDAVProps webDavProps=WebDAVPropsLocalServiceUtil.getWebDAVProps(webDavRequest.getCompanyId(),resource.getClassName(),resource.getPrimaryKey());
  Set<QName> customProps=webDavProps.getPropsSet();
  for (  QName qname : props) {
    String name=qname.getName();
    Namespace namespace=qname.getNamespace();
    String prefix=namespace.getPrefix();
    String uri=namespace.getURI();
    if (customProps.contains(qname)) {
      String text=webDavProps.getText(name,prefix,uri);
      DocUtil.add(successPropElement,qname,text);
      hasSuccess=true;
    }
 else {
      DocUtil.add(failurePropElement,qname);
      hasFailure=true;
    }
  }
  if (hasSuccess) {
    DocUtil.add(successStatElement,createQName("status"),"HTTP/1.1 200 OK");
  }
 else {
    responseElement.remove(successStatElement);
  }
  if (!hasSuccess && hasFailure) {
    DocUtil.add(failureStatElement,createQName("status"),"HTTP/1.1 404 Not Found");
  }
 else {
    responseElement.remove(failureStatElement);
  }
}
