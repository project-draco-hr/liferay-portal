{
  final long id=_idGenerator.getAndIncrement();
  FabricPathMappingVisitor fabricPathMappingVisitor=new FabricPathMappingVisitor(OutputResource.class,_remoteRepositoryPath,true);
  ObjectGraphUtil.walkObjectGraph(processCallable,fabricPathMappingVisitor);
  NettyFabricWorkerStub<T> nettyFabricWorkerStub=new NettyFabricWorkerStub<T>(id,_channel,_repository,fabricPathMappingVisitor.getPathMap(),_rpcRelayTimeout);
  final DefaultNoticeableFuture<Object> startupNoticeableFuture=new DefaultNoticeableFuture<Object>();
  _startupNoticeableFutures.put(id,startupNoticeableFuture);
  startupNoticeableFuture.addFutureListener(new FutureListener<Object>(){
    @Override public void complete(    Future<Object> future){
      _startupNoticeableFutures.remove(id);
    }
  }
);
  fabricPathMappingVisitor=new FabricPathMappingVisitor(InputResource.class,_remoteRepositoryPath);
  ObjectGraphUtil.walkObjectGraph(processCallable,fabricPathMappingVisitor);
  ChannelFuture channelFuture=_channel.writeAndFlush(new NettyFabricWorkerConfig<T>(id,processConfig,processCallable,fabricPathMappingVisitor.getPathMap()));
  channelFuture.addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture channelFuture){
      if (channelFuture.isSuccess()) {
        return;
      }
      if (channelFuture.isCancelled()) {
        startupNoticeableFuture.cancel(true);
        return;
      }
      startupNoticeableFuture.setException(channelFuture.cause());
    }
  }
);
  final ChannelFutureListener channelFutureListener=new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture channelFuture){
      startupNoticeableFuture.cancel(true);
    }
  }
;
  final ChannelFuture closeChannelFuture=_channel.closeFuture();
  closeChannelFuture.addListener(channelFutureListener);
  startupNoticeableFuture.addFutureListener(new FutureListener<Object>(){
    @Override public void complete(    Future<Object> future){
      closeChannelFuture.removeListener(channelFutureListener);
    }
  }
);
  try {
    startupNoticeableFuture.get(_startupTimeout,TimeUnit.MILLISECONDS);
    _nettyFabricWorkerStubs.put(id,nettyFabricWorkerStub);
  }
 catch (  CancellationException ce) {
    nettyFabricWorkerStub.setCancel();
  }
catch (  Throwable t) {
    if (t instanceof ExecutionException) {
      t=t.getCause();
    }
    nettyFabricWorkerStub.setException(t);
  }
  return nettyFabricWorkerStub;
}
