{
  ClassLoader oldCCL=null;
  if (crossContext) {
    oldCCL=Thread.currentThread().getContextClassLoader();
    ClassLoader contextClassLoader=context.getLoader().getClassLoader();
    Thread.currentThread().setContextClassLoader(contextClassLoader);
  }
  HttpServletResponse hresponse=null;
  if (response instanceof HttpServletResponse) {
    hresponse=(HttpServletResponse)response;
  }
  Servlet servlet=null;
  IOException ioException=null;
  ServletException servletException=null;
  RuntimeException runtimeException=null;
  boolean unavailable=false;
  if (wrapper.isUnavailable()) {
    log(sm.getString("applicationDispatcher.isUnavailable",wrapper.getName()));
    if (hresponse == null) {
      ;
    }
 else {
      long available=wrapper.getAvailable();
      if ((available > 0L) && (available < Long.MAX_VALUE))       hresponse.setDateHeader("Retry-After",available);
      hresponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,sm.getString("applicationDispatcher.isUnavailable",wrapper.getName()));
    }
    unavailable=true;
  }
  try {
    if (!unavailable) {
      servlet=wrapper.allocate();
    }
  }
 catch (  ServletException e) {
    log(sm.getString("applicationDispatcher.allocateException",wrapper.getName()),StandardWrapper.getRootCause(e));
    servletException=e;
    servlet=null;
  }
catch (  Throwable e) {
    log(sm.getString("applicationDispatcher.allocateException",wrapper.getName()),e);
    servletException=new ServletException(sm.getString("applicationDispatcher.allocateException",wrapper.getName()),e);
    servlet=null;
  }
  ApplicationFilterFactory factory=ApplicationFilterFactory.getInstance();
  ApplicationFilterChain filterChain=factory.createFilterChain(request,wrapper,servlet);
  InstanceSupport support=((StandardWrapper)wrapper).getInstanceSupport();
  try {
    String jspFile=wrapper.getJspFile();
    if (jspFile != null) {
      request.setAttribute(Globals.JSP_FILE_ATTR,jspFile);
    }
    support.fireInstanceEvent(InstanceEvent.EventType.BEFORE_DISPATCH_EVENT,servlet,request,response);
    if (servlet != null) {
      requestFacade.incrementDispatchDepth();
      if (requestFacade.isMaxDispatchDepthReached()) {
        throw new ServletException(sm.getString("applicationDispatcher.maxDispatchDepthReached",new Object[]{Integer.valueOf(Request.getMaxDispatchDepth())}));
      }
      if (filterChain != null) {
        filterChain.setRequestFacade(requestFacade);
        filterChain.setWrapper((StandardWrapper)wrapper);
        filterChain.doFilter(request,response);
      }
 else {
        ((StandardWrapper)wrapper).service(request,response,servlet,requestFacade);
      }
    }
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
  }
 catch (  ClientAbortException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    ioException=e;
  }
catch (  IOException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    log(sm.getString("applicationDispatcher.serviceException",wrapper.getName()),e);
    ioException=e;
  }
catch (  UnavailableException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    log(sm.getString("applicationDispatcher.serviceException",wrapper.getName()),e);
    servletException=e;
    wrapper.unavailable(e);
  }
catch (  ServletException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    Throwable rootCause=StandardWrapper.getRootCause(e);
    if (!(rootCause instanceof ClientAbortException)) {
      log(sm.getString("applicationDispatcher.serviceException",wrapper.getName()),rootCause);
    }
    servletException=e;
  }
catch (  RuntimeException e) {
    support.fireInstanceEvent(AFTER_DISPATCH_EVENT,servlet,request,response);
    log(sm.getString("applicationDispatcher.serviceException",wrapper.getName()),e);
    runtimeException=e;
  }
 finally {
    requestFacade.decrementDispatchDepth();
  }
  try {
    if (filterChain != null)     filterChain.release();
  }
 catch (  Throwable e) {
    log.log(Level.SEVERE,sm.getString("standardWrapper.releaseFilters",wrapper.getName()),e);
  }
  try {
    if (servlet != null) {
      wrapper.deallocate(servlet);
    }
  }
 catch (  ServletException e) {
    log(sm.getString("applicationDispatcher.deallocateException",wrapper.getName()),e);
    servletException=e;
  }
catch (  Throwable e) {
    log(sm.getString("applicationDispatcher.deallocateException",wrapper.getName()),e);
    servletException=new ServletException(sm.getString("applicationDispatcher.deallocateException",wrapper.getName()),e);
  }
  if (oldCCL != null)   Thread.currentThread().setContextClassLoader(oldCCL);
  if (ioException != null)   throw ioException;
  if (servletException != null)   throw servletException;
  if (runtimeException != null)   throw runtimeException;
}
