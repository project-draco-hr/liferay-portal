{
  String layoutFullURL=serviceContext.getLayoutFullURL();
  if (!entry.isApproved() || Validator.isNull(layoutFullURL)) {
    return;
  }
  BookmarksSettings bookmarksSettings=BookmarksUtil.getBookmarksSettings(entry.getGroupId());
  if ((serviceContext.isCommandAdd() && !bookmarksSettings.getEmailEntryAddedEnabled()) || (serviceContext.isCommandUpdate() && !bookmarksSettings.getEmailEntryUpdatedEnabled())) {
    return;
  }
  String statusByUserName=StringPool.BLANK;
  try {
    User user=userLocalService.getUserById(serviceContext.getGuestOrUserId());
    statusByUserName=user.getFullName();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  String entryTitle=entry.getName();
  String entryURL=layoutFullURL + Portal.FRIENDLY_URL_SEPARATOR + "bookmarks"+ StringPool.SLASH+ entry.getEntryId();
  String fromAddress=bookmarksSettings.getEmailFromAddress();
  String fromName=bookmarksSettings.getEmailFromName();
  LocalizedValuesMap localizedSubjectMap=null;
  LocalizedValuesMap localizedBodyMap=null;
  if (serviceContext.isCommandUpdate()) {
    localizedSubjectMap=bookmarksSettings.getEmailEntryUpdatedSubject();
    localizedBodyMap=bookmarksSettings.getEmailEntryUpdatedBody();
  }
 else {
    localizedSubjectMap=bookmarksSettings.getEmailEntryAddedSubject();
    localizedBodyMap=bookmarksSettings.getEmailEntryAddedBody();
  }
  SubscriptionSender subscriptionSender=new SubscriptionSender();
  subscriptionSender.setClassName(entry.getModelClassName());
  subscriptionSender.setClassPK(entry.getEntryId());
  subscriptionSender.setCompanyId(entry.getCompanyId());
  subscriptionSender.setContextAttributes("[$BOOKMARKS_ENTRY_STATUS_BY_USER_NAME$]",statusByUserName,"[$BOOKMARKS_ENTRY_URL$]",entryURL);
  subscriptionSender.setContextUserPrefix("BOOKMARKS_ENTRY");
  subscriptionSender.setEntryTitle(entryTitle);
  subscriptionSender.setEntryURL(entryURL);
  subscriptionSender.setFrom(fromAddress,fromName);
  subscriptionSender.setHtmlFormat(true);
  subscriptionSender.setLocalizedBodyMap(localizedBodyMap);
  subscriptionSender.setLocalizedSubjectMap(localizedSubjectMap);
  subscriptionSender.setMailId("bookmarks_entry",entry.getEntryId());
  int notificationType=UserNotificationDefinition.NOTIFICATION_TYPE_ADD_ENTRY;
  if (serviceContext.isCommandUpdate()) {
    notificationType=UserNotificationDefinition.NOTIFICATION_TYPE_UPDATE_ENTRY;
  }
  subscriptionSender.setNotificationType(notificationType);
  subscriptionSender.setPortletId(PortletKeys.BOOKMARKS);
  subscriptionSender.setReplyToAddress(fromAddress);
  subscriptionSender.setScopeGroupId(entry.getGroupId());
  subscriptionSender.setServiceContext(serviceContext);
  subscriptionSender.setUserId(entry.getUserId());
  BookmarksFolder folder=entry.getFolder();
  if (folder != null) {
    subscriptionSender.addPersistedSubscribers(BookmarksFolder.class.getName(),folder.getFolderId());
    for (    Long ancestorFolderId : folder.getAncestorFolderIds()) {
      subscriptionSender.addPersistedSubscribers(BookmarksFolder.class.getName(),ancestorFolderId);
    }
  }
  subscriptionSender.addPersistedSubscribers(BookmarksFolder.class.getName(),entry.getGroupId());
  subscriptionSender.addPersistedSubscribers(BookmarksEntry.class.getName(),entry.getEntryId());
  subscriptionSender.flushNotificationsAsync();
}
