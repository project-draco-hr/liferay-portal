{
  long pk=RandomTestUtil.nextLong();
  SocialActivitySetting newSocialActivitySetting=_persistence.create(pk);
  newSocialActivitySetting.setGroupId(RandomTestUtil.nextLong());
  newSocialActivitySetting.setCompanyId(RandomTestUtil.nextLong());
  newSocialActivitySetting.setClassNameId(RandomTestUtil.nextLong());
  newSocialActivitySetting.setActivityType(RandomTestUtil.nextInt());
  newSocialActivitySetting.setName(RandomTestUtil.randomString());
  newSocialActivitySetting.setValue(RandomTestUtil.randomString());
  _socialActivitySettings.add(_persistence.update(newSocialActivitySetting));
  SocialActivitySetting existingSocialActivitySetting=_persistence.findByPrimaryKey(newSocialActivitySetting.getPrimaryKey());
  Assert.assertEquals(existingSocialActivitySetting.getActivitySettingId(),newSocialActivitySetting.getActivitySettingId());
  Assert.assertEquals(existingSocialActivitySetting.getGroupId(),newSocialActivitySetting.getGroupId());
  Assert.assertEquals(existingSocialActivitySetting.getCompanyId(),newSocialActivitySetting.getCompanyId());
  Assert.assertEquals(existingSocialActivitySetting.getClassNameId(),newSocialActivitySetting.getClassNameId());
  Assert.assertEquals(existingSocialActivitySetting.getActivityType(),newSocialActivitySetting.getActivityType());
  Assert.assertEquals(existingSocialActivitySetting.getName(),newSocialActivitySetting.getName());
  Assert.assertEquals(existingSocialActivitySetting.getValue(),newSocialActivitySetting.getValue());
}
