{
  SimpleCommandLineParser parser=new SimpleCommandLineParser(arg);
  String username=parser.getValue("username");
  String password=parser.getValue("password");
  String domain=parser.getValue("domain");
  String destinationUser=parser.getValue("destination_user");
  String delegationEmailId=parser.getValue("delegationEmailId");
  String setting=parser.getValue("setting");
  boolean doGet=parser.containsKey("get");
  boolean doDelete=parser.containsKey("delete");
  boolean doAddOrUpdate=false;
  boolean help=parser.containsKey("help");
  boolean enable=!parser.containsKey("disable");
  if (doGet && doDelete) {
    System.out.println("Choose method as one of --get or --delete, or leave blank for create/update.\n");
    printUsageAndExit();
  }
 else   if (!doGet && !doDelete) {
    doAddOrUpdate=true;
  }
  if (help || (username == null) || (password == null)|| (domain == null)|| (setting == null)|| (doGet && destinationUser == null)|| (setting.startsWith("delegation") && (doAddOrUpdate || doDelete) && (destinationUser == null || delegationEmailId == null))) {
    printUsageAndExit();
  }
  setting=setting.trim().toLowerCase();
  try {
    GmailSettingsService settings=new GmailSettingsService("exampleCo-exampleApp-1",domain,username,password);
    List<String> users=new ArrayList<String>();
    users.add(destinationUser);
    if (setting.startsWith("filter")) {
      if (doGet) {
        System.out.println("Retrieving filter settings is not supported.\n");
        printUsageAndExit();
      }
 else       if (doDelete) {
        System.out.println("Deleting a filter is not supported.\n");
      }
 else {
        settings.createFilter(users,Defaults.FILTER_FROM,Defaults.FILTER_TO,Defaults.FILTER_SUBJECT,Defaults.FILTER_HAS_THE_WORD,Defaults.FILTER_DOES_NOT_HAVE_THE_WORD,Defaults.FILTER_HAS_ATTACHMENT,Defaults.FILTER_SHOULD_MARK_AS_READ,Defaults.FILTER_SHOULD_ARCHIVE,Defaults.FILTER_LABEL,Defaults.FILTER_FORWARD_TO,Defaults.FILTER_NEVER_SPAM,Defaults.FILTER_SHOULD_STAR,Defaults.FILTER_SHOULD_TRASH);
      }
    }
 else     if (setting.startsWith("sendas")) {
      if (doGet) {
        List<Map<String,String>> sendAsSettings=settings.retrieveSendAs(destinationUser);
        if (sendAsSettings == null || sendAsSettings.size() == 0) {
          System.out.println("No send-as alias found.");
          return;
        }
        int count=0;
        for (        Map<String,String> sendAsSetting : sendAsSettings) {
          System.out.println("sendAs setting " + ++count + ":");
          Set<Entry<String,String>> entries=sendAsSetting.entrySet();
          for (          Entry<String,String> entry : entries)           System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());
        }
      }
 else       if (doDelete) {
        System.out.println("Removing a send-as alias is not supported.\n");
      }
 else {
        settings.createSendAs(users,Defaults.SEND_AS_NAME,Defaults.SEND_AS_ADDRESS,Defaults.SEND_AS_REPLY_TO,Defaults.SEND_AS_MAKE_DEFAULT);
      }
    }
 else     if (setting.startsWith("label")) {
      if (doGet) {
        List<Map<String,String>> labels=settings.retrieveLabels(destinationUser);
        if (labels == null || labels.size() == 0) {
          System.out.println("No email labels found.");
          return;
        }
        int count=0;
        for (        Map<String,String> label : labels) {
          System.out.println("label " + ++count + ":");
          Set<Entry<String,String>> entries=label.entrySet();
          for (          Entry<String,String> entry : entries)           System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());
        }
      }
 else       if (doDelete) {
        System.out.println("Removing labels is not supported.\n");
      }
 else {
        settings.createLabel(users,Defaults.LABEL);
      }
    }
 else     if (setting.startsWith("forwarding")) {
      if (doGet) {
        Map<String,String> forwarding=settings.retrieveForwarding(destinationUser);
        System.out.println("forwarding settings:");
        for (        Entry<String,String> entry : forwarding.entrySet())         System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());
      }
 else       if (doDelete) {
        System.out.println("Deleting forwarding settings is not possible. Consider " + "disabling forwarding by updating it.\n");
      }
 else {
        settings.changeForwarding(users,Defaults.FORWARDING_ENABLE,Defaults.FORWARDING_FORWARD_TO,Defaults.FORWARDING_ACTION);
      }
    }
 else     if (setting.startsWith("pop")) {
      if (doGet) {
        Map<String,String> pop=settings.retrievePop(destinationUser);
        System.out.println("pop settings:");
        for (        Entry<String,String> entry : pop.entrySet())         System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());
      }
 else       if (doDelete) {
        System.out.println("Deleting POP settings is not possible. Consider " + "disabling POP by updating it.\n");
      }
 else {
        settings.changePop(users,Defaults.POP_ENABLE,Defaults.POP_ENABLE_FOR,Defaults.POP_ACTION);
      }
    }
 else     if (setting.startsWith("imap")) {
      if (doGet) {
        boolean imap=settings.retrieveImap(destinationUser);
        System.out.println("imap settings:");
        System.out.println("\tenabled: " + imap);
      }
 else       if (doDelete) {
        System.out.println("Deleting IMAP settings is not possible. Consider " + "disabling IMAP by updating it.\n");
      }
 else {
        settings.changeImap(users,Defaults.IMAP_ENABLE);
      }
    }
 else     if (setting.startsWith("vacation")) {
      if (doGet) {
        Map<String,String> vacation=settings.retrieveVacation(destinationUser);
        System.out.println("vacation settings:");
        for (        Entry<String,String> entry : vacation.entrySet())         System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());
      }
 else       if (doDelete) {
        System.out.println("Deleting vacation settings is not possible. Consider " + "disabling the vacation auto-responder by updating it.\n");
      }
 else {
        settings.changeVacation(users,Defaults.VACATION_ENABLE,Defaults.VACATION_SUBJECT,Defaults.VACATION_MESSAGE,Defaults.VACATION_CONTACTS_ONLY);
      }
    }
 else     if (setting.startsWith("signature")) {
      if (doGet) {
        String signature=settings.retrieveSignature(destinationUser);
        if (signature == null || signature.length() == 0) {
          System.out.println("No signature has been set.");
          return;
        }
        System.out.println("signature:");
        System.out.println("\tvalue: " + signature);
      }
 else       if (doDelete) {
        System.out.println("Removing signature settings is not possible. " + "Consider changing the signature by updating it.\n");
      }
 else {
        settings.changeSignature(users,Defaults.SIGNATURE);
      }
    }
 else     if (setting.startsWith("general")) {
      if (doGet) {
        System.out.println("Retrieving general settings is not supported.\n");
        printUsageAndExit();
      }
 else       if (doDelete) {
        System.out.println("Deleting general settings is not possible.\n");
      }
 else {
        settings.changeGeneral(users,Defaults.GENERAL_PAGE_SIZE,Defaults.GENERAL_ENABLE_SHORTCUTS,Defaults.GENERAL_ENABLE_ARROWS,Defaults.GENERAL_ENABLE_SNIPPETS,Defaults.GENERAL_ENABLE_UNICODE);
      }
    }
 else     if (setting.startsWith("language")) {
      if (doGet) {
        System.out.println("Retrieving language settings is not supported.\n");
        printUsageAndExit();
      }
 else       if (doDelete) {
        System.out.println("Deleting language settings is not possible. Consider " + "changing the language by updating it.\n");
      }
 else {
        settings.changeLanguage(users,Defaults.LANGUAGE);
      }
    }
 else     if (setting.startsWith("webclip")) {
      if (doGet) {
        System.out.println("Retrieving webclip settings is not supported.\n");
        printUsageAndExit();
      }
 else       if (doDelete) {
        System.out.println("Deleting webclip settings is not possible. " + "Consider disabling webclip by updating it.\n");
      }
 else {
        settings.changeWebClip(users,Defaults.WEBCLIP_ENABLE);
      }
    }
 else     if (setting.startsWith("delegation")) {
      if (doGet) {
        List<Map<String,String>> delegates=settings.retrieveEmailDelegates(destinationUser);
        if (delegates == null || delegates.size() == 0) {
          System.out.println("No email delegates found.");
          return;
        }
        int count=0;
        for (        Map<String,String> delegate : delegates) {
          System.out.println("delegate " + ++count + ":");
          Set<Entry<String,String>> entries=delegate.entrySet();
          for (          Entry<String,String> entry : entries) {
            System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());
          }
        }
      }
 else       if (doDelete) {
        settings.deleteEmailDelegate(destinationUser,delegationEmailId);
      }
 else {
        settings.addEmailDelegate(destinationUser,delegationEmailId);
      }
    }
 else {
      printUsageAndExit();
    }
  }
 catch (  AuthenticationException e) {
    System.err.println(e);
  }
catch (  IllegalArgumentException e) {
    System.err.println(e);
  }
catch (  ServiceException e) {
    System.err.println(e);
  }
catch (  MalformedURLException e) {
    System.err.println(e);
  }
catch (  IOException e) {
    System.err.println(e);
  }
}
