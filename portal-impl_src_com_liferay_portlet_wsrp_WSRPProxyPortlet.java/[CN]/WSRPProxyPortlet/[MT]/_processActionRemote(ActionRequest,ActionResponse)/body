{
  String MN="processAction";
  if (_logger.isLogging(Logger.TRACE_HIGH)) {
    _logger.entry(Logger.TRACE_HIGH,MN);
  }
  try {
    User user=_getUser(request);
    String userID=null;
    if (user != null) {
      userID=user.getUserID();
    }
    _registerProducer(request.getPreferences(),request.getPortletSession());
    Map preferences=_getPreferences(request);
    PortletKey portletKey=_getPortletKey(preferences);
    WSRPPortlet portlet=_getPortlet(portletKey,preferences);
    PortletWindowSession windowSession=_getWindowSession(userID,portlet,request);
    PortletDriver portletDriver=_consumerEnv.getPortletDriverRegistry().getPortletDriver(portlet);
    InteractionRequest actionRequest=new WSRPRequestImpl(windowSession,request);
    BlockingInteractionResponse response=null;
    try {
      response=portletDriver.performBlockingInteraction(actionRequest,userID);
      _checker.check(response);
    }
 catch (    java.rmi.RemoteException wsrpFault) {
      WSRPXHelper.handleWSRPFault(_logger,wsrpFault);
    }
    if (response != null) {
      UpdateResponse updateResponse=response.getUpdateResponse();
      String redirectURL=response.getRedirectURL();
      if (updateResponse != null) {
        if (windowSession != null) {
          _updateSessionContext(updateResponse.getSessionContext(),windowSession.getPortletSession());
          windowSession.updateMarkupCache(updateResponse.getMarkupContext());
        }
        _updatePortletContext(request,updateResponse.getPortletContext(),portlet);
        String navState=updateResponse.getNavigationalState();
        if (navState != null) {
          actionResponse.setRenderParameter(NAVIGATIONAL_STATE,navState);
        }
        String newMode=updateResponse.getNewMode();
        if (newMode != null) {
          try {
            actionResponse.setPortletMode(WSRPUtil.fromWsrpMode(newMode));
          }
 catch (          PortletModeException e) {
            if (_logger.isLogging(Logger.INFO)) {
              _logger.text(Logger.INFO,MN,"The portlet='" + portlet.getPortletKey().getPortletHandle() + "' does not support the mode="+ e.getMode());
            }
          }
        }
        String newWindowState=updateResponse.getNewWindowState();
        if (newWindowState != null) {
          try {
            actionResponse.setWindowState(WSRPUtil.fromWsrpWindowState(newWindowState));
          }
 catch (          WindowStateException e) {
            if (_logger.isLogging(Logger.INFO)) {
              _logger.text(Logger.INFO,MN,"The portlet='" + portlet.getPortletKey().getPortletHandle() + "' does not support the window state="+ e.getState());
            }
          }
        }
      }
 else       if (redirectURL != null) {
        try {
          actionResponse.sendRedirect(redirectURL);
        }
 catch (        IOException ioEx) {
          WSRPXHelper.throwX(_logger,Logger.ERROR,"processAction",ErrorCodes.COULD_NOT_FOLLOW_REDIRECT);
        }
      }
    }
  }
 catch (  WSRPException e) {
    throw new PortletException(e);
  }
 finally {
    if (_logger.isLogging(Logger.TRACE_HIGH)) {
      _logger.exit(Logger.TRACE_HIGH,MN);
    }
  }
}
