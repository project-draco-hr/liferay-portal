{
  long pk=nextLong();
  TagsEntry newTagsEntry=_persistence.create(pk);
  newTagsEntry.setGroupId(nextLong());
  newTagsEntry.setCompanyId(nextLong());
  newTagsEntry.setUserId(nextLong());
  newTagsEntry.setUserName(randomString());
  newTagsEntry.setCreateDate(nextDate());
  newTagsEntry.setModifiedDate(nextDate());
  newTagsEntry.setParentEntryId(nextLong());
  newTagsEntry.setName(randomString());
  newTagsEntry.setVocabularyId(nextLong());
  _persistence.update(newTagsEntry,false);
  TagsEntry existingTagsEntry=_persistence.findByPrimaryKey(newTagsEntry.getPrimaryKey());
  assertEquals(existingTagsEntry.getEntryId(),newTagsEntry.getEntryId());
  assertEquals(existingTagsEntry.getGroupId(),newTagsEntry.getGroupId());
  assertEquals(existingTagsEntry.getCompanyId(),newTagsEntry.getCompanyId());
  assertEquals(existingTagsEntry.getUserId(),newTagsEntry.getUserId());
  assertEquals(existingTagsEntry.getUserName(),newTagsEntry.getUserName());
  assertEquals(existingTagsEntry.getCreateDate(),newTagsEntry.getCreateDate());
  assertEquals(existingTagsEntry.getModifiedDate(),newTagsEntry.getModifiedDate());
  assertEquals(existingTagsEntry.getParentEntryId(),newTagsEntry.getParentEntryId());
  assertEquals(existingTagsEntry.getName(),newTagsEntry.getName());
  assertEquals(existingTagsEntry.getVocabularyId(),newTagsEntry.getVocabularyId());
}
