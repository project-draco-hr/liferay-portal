{
  JSONObject additionalInfo=new JSONObject();
  long companyId=CompanyThreadLocal.getCompanyId();
  long realUserId=AuditThreadLocal.getRealUserId();
  long userId=0;
  long modifierId=0;
  String modifierUserName=StringPool.BLANK;
  if (PrincipalThreadLocal.getName() != null) {
    userId=Long.parseLong(PrincipalThreadLocal.getName());
  }
  if (realUserId > 0 && userId != realUserId) {
    modifierId=realUserId;
    additionalInfo.put("doAsUserId",String.valueOf(userId));
    additionalInfo.put("doAsUserName",PortalUtil.getUserName(userId,StringPool.BLANK));
  }
  modifierUserName=PortalUtil.getUserName(modifierId,StringPool.BLANK);
  additionalInfo.put("roleId",role.getRoleId());
  additionalInfo.put("roleName",role.getName());
  additionalInfo.put("roleType",role.getType());
  additionalInfo.put("roleSubType",role.getSubtype());
  String type=create ? "role-create" : "role-remove";
  String clientIP=AuditThreadLocal.getClientIP();
  String serverIP=AuditThreadLocal.getServerIP();
  String sessionID=AuditThreadLocal.getSessionID();
  return new AuditMessage(companyId,modifierId,modifierUserName,String.valueOf(role.getRoleId()),Role.class.getName(),type,sessionID,clientIP,serverIP,additionalInfo);
}
