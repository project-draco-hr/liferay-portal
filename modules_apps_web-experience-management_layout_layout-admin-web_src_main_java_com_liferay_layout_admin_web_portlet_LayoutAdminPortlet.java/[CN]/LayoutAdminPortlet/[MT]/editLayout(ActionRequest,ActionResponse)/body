{
  UploadPortletRequest uploadPortletRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long groupId=ParamUtil.getLong(actionRequest,"groupId");
  long liveGroupId=ParamUtil.getLong(actionRequest,"liveGroupId");
  long stagingGroupId=ParamUtil.getLong(actionRequest,"stagingGroupId");
  boolean privateLayout=ParamUtil.getBoolean(actionRequest,"privateLayout");
  long layoutId=ParamUtil.getLong(actionRequest,"layoutId");
  Map<Locale,String> nameMap=LocalizationUtil.getLocalizationMap(actionRequest,"name");
  Map<Locale,String> titleMap=LocalizationUtil.getLocalizationMap(actionRequest,"title");
  Map<Locale,String> descriptionMap=LocalizationUtil.getLocalizationMap(actionRequest,"description");
  Map<Locale,String> keywordsMap=LocalizationUtil.getLocalizationMap(actionRequest,"keywords");
  Map<Locale,String> robotsMap=LocalizationUtil.getLocalizationMap(actionRequest,"robots");
  String type=ParamUtil.getString(uploadPortletRequest,"type");
  boolean hidden=ParamUtil.getBoolean(uploadPortletRequest,"hidden");
  Map<Locale,String> friendlyURLMap=LocalizationUtil.getLocalizationMap(actionRequest,"friendlyURL");
  boolean deleteLogo=ParamUtil.getBoolean(actionRequest,"deleteLogo");
  byte[] iconBytes=null;
  long fileEntryId=ParamUtil.getLong(uploadPortletRequest,"fileEntryId");
  if (fileEntryId > 0) {
    FileEntry fileEntry=dlAppLocalService.getFileEntry(fileEntryId);
    iconBytes=FileUtil.getBytes(fileEntry.getContentStream());
  }
  ServiceContext serviceContext=ServiceContextFactory.getInstance(Layout.class.getName(),actionRequest);
  Layout layout=layoutLocalService.getLayout(groupId,privateLayout,layoutId);
  layout=layoutService.updateLayout(groupId,privateLayout,layoutId,layout.getParentLayoutId(),nameMap,titleMap,descriptionMap,keywordsMap,robotsMap,type,hidden,friendlyURLMap,!deleteLogo,iconBytes,serviceContext);
  UnicodeProperties layoutTypeSettingsProperties=layout.getTypeSettingsProperties();
  UnicodeProperties formTypeSettingsProperties=PropertiesParamUtil.getProperties(actionRequest,"TypeSettingsProperties--");
  LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
  if (type.equals(LayoutConstants.TYPE_PORTLET)) {
    String layoutTemplateId=ParamUtil.getString(uploadPortletRequest,"layoutTemplateId",PropsValues.DEFAULT_LAYOUT_TEMPLATE_ID);
    layoutTypePortlet.setLayoutTemplateId(themeDisplay.getUserId(),layoutTemplateId);
    layoutTypeSettingsProperties.putAll(formTypeSettingsProperties);
    layoutService.updateLayout(groupId,privateLayout,layoutId,layoutTypeSettingsProperties.toString());
  }
 else {
    layout.setTypeSettingsProperties(formTypeSettingsProperties);
    layoutTypeSettingsProperties.putAll(layout.getTypeSettingsProperties());
    layoutService.updateLayout(groupId,privateLayout,layoutId,layout.getTypeSettings());
  }
  HttpServletResponse response=PortalUtil.getHttpServletResponse(actionResponse);
  EventsProcessorUtil.process(PropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,layoutTypePortlet.getConfigurationActionUpdate(),uploadPortletRequest,response);
  updateLookAndFeel(actionRequest,themeDisplay.getCompanyId(),liveGroupId,stagingGroupId,privateLayout,layout.getLayoutId(),layoutTypeSettingsProperties);
}
