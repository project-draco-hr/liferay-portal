{
  final Logger logger=getLogger();
  Baseline baseline=new Baseline(){
    @Override protected void log(    Reporter reporter){
      if (logger.isErrorEnabled()) {
        for (        String message : reporter.getErrors()) {
          logger.error(message);
        }
      }
      if (logger.isWarnEnabled()) {
        for (        String message : reporter.getWarnings()) {
          logger.warn(message);
        }
      }
    }
    @Override protected void log(    String output){
      if (logger.isLifecycleEnabled()) {
        logger.lifecycle(output);
      }
    }
  }
;
  baseline.setBndFile(getBndFile());
  baseline.setForcePackageInfo(true);
  baseline.setLogFile(getLogFile());
  baseline.setNewJarFile(getNewJarFile());
  baseline.setOldJarFile(getOldJarFile());
  baseline.setReportDiff(isReportDiff());
  baseline.setReportOnlyDirtyPackages(isReportOnlyDirtyPackages());
  baseline.setSourceDir(getSourceDir());
  boolean match=baseline.execute();
  if (!match) {
    String message="Semantic versioning is incorrect";
    if (getIgnoreFailures()) {
      if (logger.isWarnEnabled()) {
        logger.warn(message);
      }
    }
 else {
      throw new GradleException(message);
    }
  }
}
