{
  JavaClass javaClass=_getJavaClass(_outputPath + "/service/impl/" + entity.getName()+ "ServiceImpl.java");
  JavaMethod[] methods=javaClass.getMethods();
  StringMaker sm=new StringMaker();
  sm.append("package " + _packagePath + ".service.http;");
  if (_hasSoapMethods(javaClass)) {
    sm.append("import " + _packagePath + ".service."+ entity.getName()+ "ServiceUtil;");
  }
  sm.append("import org.json.JSONArray;");
  sm.append("import org.json.JSONObject;");
  sm.append("public class " + entity.getName() + "ServiceJSON {");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isConstructor() && javaMethod.isPublic() && _isCustomMethod(javaMethod)&& _isSoapMethod(javaMethod)) {
      String returnValueName=javaMethod.getReturns().getValue();
      String returnValueDimension=_getDimensions(javaMethod.getReturns());
      String extendedModelName=_packagePath + ".model." + entity.getName();
      String soapModelName="JSONObject";
      sm.append("public static ");
      if (returnValueName.equals(extendedModelName)) {
        sm.append(soapModelName + returnValueDimension);
      }
 else       if (returnValueName.equals("java.util.List")) {
        if (entity.hasColumns()) {
          sm.append("JSONArray");
        }
 else {
          sm.append("java.util.List");
        }
      }
 else       if (returnValueName.equals("com.liferay.portal.kernel.json.JSONArrayWrapper")) {
        sm.append("JSONArray");
      }
 else       if (returnValueName.equals("com.liferay.portal.kernel.json.JSONObjectWrapper")) {
        sm.append("JSONObject");
      }
 else {
        sm.append(returnValueName + returnValueDimension);
      }
      sm.append(" " + methodName + "(");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        String parameterTypeName=javaParameter.getType().getValue() + _getDimensions(javaParameter.getType());
        if (parameterTypeName.equals("java.util.Locale")) {
          parameterTypeName="String";
        }
        sm.append(parameterTypeName + " " + javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      Set newExceptions=new LinkedHashSet();
      for (int j=0; j < thrownExceptions.length; j++) {
        Type thrownException=thrownExceptions[j];
        newExceptions.add(thrownException.getValue());
      }
      newExceptions.add("java.rmi.RemoteException");
      if (newExceptions.size() > 0) {
        sm.append(" throws ");
        Iterator itr=newExceptions.iterator();
        while (itr.hasNext()) {
          sm.append(itr.next());
          if (itr.hasNext()) {
            sm.append(", ");
          }
        }
      }
      sm.append("{");
      if (!returnValueName.equals("void")) {
        sm.append(returnValueName + returnValueDimension + " returnValue = ");
      }
      sm.append(entity.getName() + "ServiceUtil." + methodName+ "(");
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        String parameterTypeName=javaParameter.getType().getValue() + _getDimensions(javaParameter.getType());
        if (parameterTypeName.equals("java.util.Locale")) {
          sm.append("new java.util.Locale(");
        }
        sm.append(javaParameter.getName());
        if (parameterTypeName.equals("java.util.Locale")) {
          sm.append(")");
        }
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(");");
      if (!returnValueName.equals("void")) {
        if (returnValueName.equals(extendedModelName)) {
          sm.append("return " + entity.getName() + "JSONSerializer.toJSONObject(returnValue);");
        }
 else         if (entity.hasColumns() && returnValueName.equals("java.util.List")) {
          sm.append("return " + entity.getName() + "JSONSerializer.toJSONArray(returnValue);");
        }
 else         if (returnValueName.equals("com.liferay.portal.kernel.json.JSONArrayWrapper")) {
          sm.append("return (JSONArray)returnValue.getValue();");
        }
 else         if (returnValueName.equals("com.liferay.portal.kernel.json.JSONObjectWrapper")) {
          sm.append("return (JSONObject)returnValue.getValue();");
        }
 else {
          sm.append("return returnValue;");
        }
      }
      sm.append("}");
    }
  }
  if (sm.indexOf("_log.") != -1) {
    sm.append("private static Log _log = LogFactoryUtil.getLog(" + entity.getName() + "ServiceJSON.class);");
  }
  sm.append("}");
  File ejbFile=new File(_outputPath + "/service/http/" + entity.getName()+ "ServiceJSON.java");
  Map jalopySettings=new HashMap();
  String[] classComments={_DEFAULT_CLASS_COMMENTS,"This class provides a JSON utility for the <code>" + _packagePath + ".service."+ entity.getName()+ "ServiceUtil</code> service utility. The static methods of this class calls the same methods of the service utility. However, the signatures are different because it is difficult for JSON to support certain types.","ServiceBuilder follows certain rules in translating the methods. For example, if the method in the service utility returns a <code>java.util.List</code>, that is translated to a <code>org.json.JSONArray</code>. If the method in the service utility returns a <code>" + _packagePath + ".model."+ entity.getName()+ "</code>, that is translated to a <code>org.json.JSONObject</code>. Methods that JSON cannot safely use are skipped. The logic for the translation is encapsulated in <code>"+ _packagePath+ ".service.http."+ entity.getName()+ "JSONSerializer</code>.","This allows you to call the the backend services directly from JavaScript. See <code>portal-web/docroot/html/portlet/tags_admin/unpacked.js</code> for a reference of how that portlet uses the generated JavaScript in <code>portal-web/docroot/html/js/service.js</code> to call the backend services directly from JavaScript.","The JSON utility is only generated for remote services."};
  String[] see={_packagePath + ".service." + entity.getName()+ "ServiceUtil",_packagePath + ".service.http." + entity.getName()+ "JSONSerializer"};
  jalopySettings.put("classComments",classComments);
  jalopySettings.put("see",see);
  writeFile(ejbFile,sm.toString(),jalopySettings);
}
