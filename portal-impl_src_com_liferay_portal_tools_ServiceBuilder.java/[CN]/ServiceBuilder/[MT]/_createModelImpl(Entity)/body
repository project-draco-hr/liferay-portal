{
  List pkList=entity.getPKList();
  List regularColList=entity.getRegularColList();
  StringMaker sm=new StringMaker();
  sm.append("package " + _packagePath + ".model.impl;");
  if (entity.hasCompoundPK()) {
    sm.append("import " + _packagePath + ".service.persistence."+ entity.getName()+ "PK;");
  }
  sm.append("import " + _packagePath + ".model."+ entity.getName()+ ";");
  sm.append("import " + _baseModelImplPackage + ".BaseModelImpl;");
  sm.append("import " + _propsUtilPackage + ".PropsUtil;");
  sm.append("import com.liferay.portal.kernel.bean.ReadOnlyBeanHandler;");
  sm.append("import com.liferay.portal.kernel.util.DateUtil;");
  sm.append("import com.liferay.portal.kernel.util.GetterUtil;");
  sm.append("import com.liferay.util.Html;");
  sm.append("import java.io.Serializable;");
  sm.append("import java.lang.reflect.Proxy;");
  sm.append("import java.sql.Types;");
  sm.append("import java.util.Date;");
  sm.append("public class " + entity.getName() + "ModelImpl extends BaseModelImpl {");
  sm.append("public static String TABLE_NAME = \"" + entity.getTable() + "\";");
  sm.append("public static Object[][] TABLE_COLUMNS = {");
  for (int i=0; i < regularColList.size(); i++) {
    EntityColumn col=(EntityColumn)regularColList.get(i);
    String sqlType=_getSqlType(_packagePath + ".model." + entity.getName(),col.getName(),col.getType());
    sm.append("{\"" + col.getDBName() + "\", new Integer(Types."+ sqlType+ ")}");
    if ((i + 1) < regularColList.size()) {
      sm.append(",");
    }
  }
  sm.append("};");
  String createTableSQL=_getCreateTableSQL(entity);
  createTableSQL=StringUtil.replace(createTableSQL,"\n","");
  createTableSQL=StringUtil.replace(createTableSQL,"\t","");
  createTableSQL=createTableSQL.substring(0,createTableSQL.length() - 1);
  sm.append("public static String TABLE_SQL_CREATE = \"" + createTableSQL + "\";");
  sm.append("public static String TABLE_SQL_DROP = \"drop table " + entity.getTable() + "\";");
  sm.append("public static long LOCK_EXPIRATION_TIME = GetterUtil.getLong(PropsUtil.get(\"lock.expiration.time." + _packagePath + ".model."+ entity.getName()+ "Model\"));");
  sm.append("public " + entity.getName() + "ModelImpl() {");
  sm.append("}");
  sm.append("public " + entity.getPKClassName() + " getPrimaryKey() {");
  if (entity.hasCompoundPK()) {
    sm.append("return new " + entity.getPKClassName() + "(");
    for (int i=0; i < pkList.size(); i++) {
      EntityColumn col=(EntityColumn)pkList.get(i);
      sm.append("_" + col.getName());
      if ((i + 1) != (pkList.size())) {
        sm.append(", ");
      }
    }
    sm.append(");");
  }
 else {
    EntityColumn col=(EntityColumn)pkList.get(0);
    sm.append("return _" + col.getName() + ";");
  }
  sm.append("}");
  sm.append("public void setPrimaryKey(" + entity.getPKClassName() + " pk) {");
  if (entity.hasCompoundPK()) {
    for (int i=0; i < pkList.size(); i++) {
      EntityColumn col=(EntityColumn)pkList.get(i);
      sm.append("set" + col.getMethodName() + "(pk."+ col.getName()+ ");");
    }
  }
 else {
    EntityColumn col=(EntityColumn)pkList.get(0);
    sm.append("set" + col.getMethodName() + "(pk);");
  }
  sm.append("}");
  sm.append("public Serializable getPrimaryKeyObj() {");
  if (entity.hasCompoundPK()) {
    sm.append("return new " + entity.getPKClassName() + "(");
    for (int i=0; i < pkList.size(); i++) {
      EntityColumn col=(EntityColumn)pkList.get(i);
      sm.append("_" + col.getName());
      if ((i + 1) != (pkList.size())) {
        sm.append(", ");
      }
    }
    sm.append(");");
  }
 else {
    EntityColumn col=(EntityColumn)pkList.get(0);
    sm.append("return ");
    if (entity.hasPrimitivePK()) {
      sm.append("new ");
      sm.append(_getPrimitiveObj(entity.getPKClassName()));
      sm.append("(");
    }
    sm.append("_" + col.getName());
    if (entity.hasPrimitivePK()) {
      sm.append(")");
    }
    sm.append(";");
  }
  sm.append("}");
  for (int i=0; i < regularColList.size(); i++) {
    EntityColumn col=(EntityColumn)regularColList.get(i);
    String colType=col.getType();
    sm.append("public " + colType + " get"+ col.getMethodName()+ "() {");
    if (colType.equals("String") && col.isConvertNull()) {
      sm.append("return GetterUtil.getString(_" + col.getName() + ");");
    }
 else {
      sm.append("return _" + col.getName() + ";");
    }
    sm.append("}");
    if (colType.equals("boolean")) {
      sm.append("public " + colType + " is"+ col.getMethodName()+ "() {");
      sm.append("return _" + col.getName() + ";");
      sm.append("}");
    }
    sm.append("public void set" + col.getMethodName() + "("+ colType+ " "+ col.getName()+ ") {");
    if (col.getName().equals("uuid")) {
      sm.append("if ((uuid != null) && (uuid != _uuid)) {");
      sm.append("_uuid = uuid;");
      sm.append("}");
    }
 else {
      sm.append("if (");
      if (!col.isPrimitiveType()) {
        sm.append("(" + col.getName() + " == null && _"+ col.getName()+ " != null) ||");
        sm.append("(" + col.getName() + " != null && _"+ col.getName()+ " == null) ||");
        sm.append("(" + col.getName() + " != null && _"+ col.getName()+ " != null && !"+ col.getName()+ ".equals(_"+ col.getName()+ "))");
      }
 else {
        sm.append(col.getName() + " != _" + col.getName());
      }
      sm.append(") {");
      sm.append("_" + col.getName() + " = "+ col.getName()+ ";");
      sm.append("}");
    }
    sm.append("}");
  }
  sm.append("public " + entity.getName() + " toEscapedModel() {");
  sm.append(entity.getName() + " model = new " + entity.getName()+ "Impl();");
  for (int i=0; i < regularColList.size(); i++) {
    EntityColumn col=(EntityColumn)regularColList.get(i);
    String colType=col.getType();
    sm.append("model.set" + col.getMethodName() + "(");
    if (col.getEJBName() == null) {
      if (colType.equals("String")) {
        sm.append("Html.escape(");
      }
      sm.append("get" + col.getMethodName() + "()");
      if (colType.equals("String")) {
        sm.append(")");
      }
    }
 else {
      sm.append("(" + col.getEJBName() + ")get"+ col.getMethodName()+ "().clone()");
    }
    sm.append(");");
  }
  sm.append("if (true) {");
  sm.append("model = (" + entity.getName() + ")Proxy.newProxyInstance("+ entity.getName()+ ".class.getClassLoader(), new Class[] {"+ entity.getName()+ ".class}, new ReadOnlyBeanHandler(model));");
  sm.append("}");
  sm.append("return model;");
  sm.append("}");
  sm.append("public Object clone() {");
  sm.append(entity.getName() + "Impl clone = new " + entity.getName()+ "Impl();");
  for (int i=0; i < regularColList.size(); i++) {
    EntityColumn col=(EntityColumn)regularColList.get(i);
    sm.append("clone.set" + col.getMethodName() + "(");
    if (col.getEJBName() == null) {
      sm.append("get" + col.getMethodName() + "()");
    }
 else {
      sm.append("(" + col.getEJBName() + ")get"+ col.getMethodName()+ "().clone()");
    }
    sm.append(");");
  }
  sm.append("return clone;");
  sm.append("}");
  sm.append("public int compareTo(Object obj) {");
  sm.append("if (obj == null) {");
  sm.append("return -1;");
  sm.append("}");
  sm.append(entity.getName() + "Impl " + entity.getVarName()+ " = ("+ entity.getName()+ "Impl)obj;");
  if (entity.isOrdered()) {
    EntityOrder order=entity.getOrder();
    List orderList=order.getColumns();
    sm.append("int value = 0;");
    for (int i=0; i < orderList.size(); i++) {
      EntityColumn col=(EntityColumn)orderList.get(i);
      String colType=col.getType();
      if (!col.isPrimitiveType()) {
        if (colType.equals("Date")) {
          sm.append("value = DateUtil.compareTo(get" + col.getMethodName() + "(), "+ entity.getVarName()+ ".get"+ col.getMethodName()+ "());");
        }
 else {
          if (col.isCaseSensitive()) {
            sm.append("value = get" + col.getMethodName() + "().compareTo("+ entity.getVarName()+ ".get"+ col.getMethodName()+ "());");
          }
 else {
            sm.append("value = get" + col.getMethodName() + "().toLowerCase().compareTo("+ entity.getVarName()+ ".get"+ col.getMethodName()+ "().toLowerCase());");
          }
        }
      }
 else {
        String ltComparator="<";
        String gtComparator=">";
        if (colType.equals("boolean")) {
          ltComparator="==";
          gtComparator="!=";
        }
        sm.append("if (get" + col.getMethodName() + "() "+ ltComparator+ " "+ entity.getVarName()+ ".get"+ col.getMethodName()+ "()) {");
        sm.append("value = -1;");
        sm.append("}");
        sm.append("else if (get" + col.getMethodName() + "() "+ gtComparator+ " "+ entity.getVarName()+ ".get"+ col.getMethodName()+ "()) {");
        sm.append("value = 1;");
        sm.append("}");
        sm.append("else {");
        sm.append("value = 0;");
        sm.append("}");
      }
      if (!col.isOrderByAscending()) {
        sm.append("value = value * -1;");
      }
      sm.append("if (value != 0) {");
      sm.append("return value;");
      sm.append("}");
    }
    sm.append("return 0;");
  }
 else {
    sm.append(entity.getPKClassName() + " pk = " + entity.getVarName()+ ".getPrimaryKey();");
    if (entity.hasPrimitivePK()) {
      sm.append("if (getPrimaryKey() < pk) {");
      sm.append("return -1;");
      sm.append("}");
      sm.append("else if (getPrimaryKey() > pk) {");
      sm.append("return 1;");
      sm.append("}");
      sm.append("else {");
      sm.append("return 0;");
      sm.append("}");
    }
 else {
      sm.append("return getPrimaryKey().compareTo(pk);");
    }
  }
  sm.append("}");
  sm.append("public boolean equals(Object obj) {");
  sm.append("if (obj == null) {");
  sm.append("return false;");
  sm.append("}");
  sm.append(entity.getName() + "Impl " + entity.getVarName()+ " = null;");
  sm.append("try {");
  sm.append(entity.getVarName() + " = (" + entity.getName()+ "Impl)obj;");
  sm.append("}");
  sm.append("catch (ClassCastException cce) {");
  sm.append("return false;");
  sm.append("}");
  sm.append(entity.getPKClassName() + " pk = " + entity.getVarName()+ ".getPrimaryKey();");
  if (entity.hasPrimitivePK()) {
    sm.append("if (getPrimaryKey() == pk) {");
  }
 else {
    sm.append("if (getPrimaryKey().equals(pk)) {");
  }
  sm.append("return true;");
  sm.append("}");
  sm.append("else {");
  sm.append("return false;");
  sm.append("}");
  sm.append("}");
  sm.append("public int hashCode() {");
  if (entity.hasPrimitivePK()) {
    sm.append("return (int)getPrimaryKey();");
  }
 else {
    sm.append("return getPrimaryKey().hashCode();");
  }
  sm.append("}");
  for (int i=0; i < regularColList.size(); i++) {
    EntityColumn col=(EntityColumn)regularColList.get(i);
    sm.append("private " + col.getType() + " _"+ col.getName()+ ";");
  }
  sm.append("}");
  File modelFile=new File(_outputPath + "/model/impl/" + entity.getName()+ "ModelImpl.java");
  Map jalopySettings=new HashMap();
  String[] classComments={_DEFAULT_CLASS_COMMENTS,"This class is a model that represents the <code>" + entity.getTable() + "</code> table in the database."};
  String[] see={_packagePath + ".service.model." + entity.getName(),_packagePath + ".service.model." + entity.getName()+ "Model",_packagePath + ".service.model.impl." + entity.getName()+ "Impl"};
  jalopySettings.put("classComments",classComments);
  jalopySettings.put("see",see);
  writeFile(modelFile,sm.toString(),jalopySettings);
}
