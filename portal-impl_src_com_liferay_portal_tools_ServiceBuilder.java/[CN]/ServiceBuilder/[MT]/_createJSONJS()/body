{
  StringMaker content=new StringMaker();
  if (_ejbList.size() > 0) {
    content.append(_processTemplate("json_js.ftl"));
  }
  for (int i=0; i < _ejbList.size(); i++) {
    Entity entity=(Entity)_ejbList.get(i);
    if (entity.hasRemoteService()) {
      JavaClass javaClass=_getJavaClass(_outputPath + "/service/http/" + entity.getName()+ "ServiceJSON.java");
      JavaMethod[] methods=javaClass.getMethods();
      Set jsonMethods=new LinkedHashSet();
      for (int j=0; j < methods.length; j++) {
        JavaMethod javaMethod=methods[j];
        String methodName=javaMethod.getName();
        if (javaMethod.isPublic()) {
          jsonMethods.add(methodName);
        }
      }
      if (jsonMethods.size() > 0) {
        Map context=_getContext();
        context.put("entity",entity);
        context.put("methods",jsonMethods);
        content.append("\n\n");
        content.append(_processTemplate("json_js_method.ftl",context));
      }
    }
  }
  File jsonFile=new File(_jsonFileName);
  if (!jsonFile.exists()) {
    FileUtil.write(jsonFile,"");
  }
  String oldContent=FileUtil.read(jsonFile);
  String newContent=new String(oldContent);
  int oldBegin=oldContent.indexOf("Liferay.Service." + _portletShortName);
  int oldEnd=oldContent.lastIndexOf("Liferay.Service." + _portletShortName);
  oldEnd=oldContent.indexOf("};",oldEnd);
  int newBegin=newContent.indexOf("Liferay.Service." + _portletShortName);
  int newEnd=newContent.lastIndexOf("Liferay.Service." + _portletShortName);
  newEnd=newContent.indexOf("};",newEnd);
  if (newBegin == -1) {
    newContent=oldContent + "\n\n" + content.toString().trim();
  }
 else {
    newContent=newContent.substring(0,oldBegin) + content.toString().trim() + newContent.substring(oldEnd + 2,newContent.length());
  }
  if (!oldContent.equals(newContent)) {
    FileUtil.write(jsonFile,newContent);
  }
}
