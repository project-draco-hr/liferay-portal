{
  JavaClass javaClass=_getJavaClass(_outputPath + "/service/impl/" + entity.getName()+ "ServiceImpl.java");
  JavaMethod[] methods=javaClass.getMethods();
  StringMaker sm=new StringMaker();
  sm.append("package " + _packagePath + ".service.http;");
  if (_hasSoapMethods(javaClass)) {
    sm.append("import " + _packagePath + ".service."+ entity.getName()+ "ServiceUtil;");
  }
  sm.append("import com.liferay.portal.kernel.log.Log;");
  sm.append("import com.liferay.portal.kernel.log.LogFactoryUtil;");
  sm.append("import java.rmi.RemoteException;");
  sm.append("public class " + entity.getName() + "ServiceSoap {");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isConstructor() && javaMethod.isPublic() && _isCustomMethod(javaMethod)&& _isSoapMethod(javaMethod)) {
      String returnValueName=javaMethod.getReturns().getValue();
      String returnValueDimension=_getDimensions(javaMethod.getReturns());
      String extendedModelName=_packagePath + ".model." + entity.getName();
      String soapModelName=_packagePath + ".model." + entity.getName()+ "Soap";
      sm.append("public static ");
      if (returnValueName.equals(extendedModelName)) {
        sm.append(soapModelName + returnValueDimension);
      }
 else       if (returnValueName.equals("java.util.List")) {
        if (entity.hasColumns()) {
          sm.append(soapModelName + "[]");
        }
 else {
          sm.append("java.util.List");
        }
      }
 else {
        sm.append(returnValueName + returnValueDimension);
      }
      sm.append(" " + methodName + "(");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        String parameterTypeName=javaParameter.getType().getValue() + _getDimensions(javaParameter.getType());
        if (parameterTypeName.equals("java.util.Locale")) {
          parameterTypeName="String";
        }
        sm.append(parameterTypeName + " " + javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(") throws RemoteException {");
      sm.append("try {");
      if (!returnValueName.equals("void")) {
        sm.append(returnValueName + returnValueDimension + " returnValue = ");
      }
      sm.append(entity.getName() + "ServiceUtil." + methodName+ "(");
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        String parameterTypeName=javaParameter.getType().getValue() + _getDimensions(javaParameter.getType());
        if (parameterTypeName.equals("java.util.Locale")) {
          sm.append("new java.util.Locale(");
        }
        sm.append(javaParameter.getName());
        if (parameterTypeName.equals("java.util.Locale")) {
          sm.append(")");
        }
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(");");
      if (!returnValueName.equals("void")) {
        if (returnValueName.equals(extendedModelName)) {
          sm.append("return " + soapModelName + ".toSoapModel(returnValue);");
        }
 else         if (entity.hasColumns() && returnValueName.equals("java.util.List")) {
          sm.append("return " + soapModelName + ".toSoapModels(returnValue);");
        }
 else {
          sm.append("return returnValue;");
        }
      }
      sm.append("}");
      sm.append("catch (Exception e) {");
      sm.append("_log.error(e, e);");
      sm.append("throw new RemoteException(e.getMessage());");
      sm.append("}");
      sm.append("}");
    }
  }
  if (sm.indexOf("_log.") != -1) {
    sm.append("private static Log _log = LogFactoryUtil.getLog(" + entity.getName() + "ServiceSoap.class);");
  }
  sm.append("}");
  File ejbFile=new File(_outputPath + "/service/http/" + entity.getName()+ "ServiceSoap.java");
  Map jalopySettings=new HashMap();
  String[] classComments={_DEFAULT_CLASS_COMMENTS,"This class provides a SOAP utility for the <code>" + _packagePath + ".service."+ entity.getName()+ "ServiceUtil</code> service utility. The static methods of this class calls the same methods of the service utility. However, the signatures are different because it is difficult for SOAP to support certain types.","ServiceBuilder follows certain rules in translating the methods. For example, if the method in the service utility returns a <code>java.util.List</code>, that is translated to an array of <code>" + _packagePath + ".model."+ entity.getName()+ "Soap</code>. If the method in the service utility returns a <code>"+ _packagePath+ ".model."+ entity.getName()+ "</code>, that is translated to a <code>"+ _packagePath+ ".model."+ entity.getName()+ "Soap</code>. Methods that SOAP cannot safely wire are skipped.","The benefits of using the SOAP utility is that it is cross platform compatible. SOAP allows different languages like Java, .NET, C++, PHP, and even Perl, to call the generated services. One drawback of SOAP is that it is slow because it needs to serialize all calls into a text format (XML).","You can see a list of services at http://localhost:8080/tunnel-web/secure/axis. Set the property <code>tunnel.servlet.hosts.allowed</code> in portal.properties to configure security.","The SOAP utility is only generated for remote services."};
  String[] see={_packagePath + ".service." + entity.getName()+ "ServiceUtil",_packagePath + ".service.http." + entity.getName()+ "ServiceHttp",_packagePath + ".service.model." + entity.getName()+ "Soap"};
  jalopySettings.put("classComments",classComments);
  jalopySettings.put("see",see);
  writeFile(ejbFile,sm.toString(),jalopySettings);
}
