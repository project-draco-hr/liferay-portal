{
  JavaClass javaClass=_getJavaClass(_outputPath + "/service/impl/" + entity.getName()+ "ServiceImpl.java");
  JavaMethod[] methods=javaClass.getMethods();
  StringMaker sm=new StringMaker();
  sm.append("package " + _packagePath + ".service.http;");
  if (_hasHttpMethods(javaClass)) {
    sm.append("import " + _packagePath + ".service."+ entity.getName()+ "ServiceUtil;");
  }
  sm.append("import com.liferay.portal.kernel.log.Log;");
  sm.append("import com.liferay.portal.kernel.log.LogFactoryUtil;");
  sm.append("import com.liferay.portal.kernel.util.BooleanWrapper;");
  sm.append("import com.liferay.portal.kernel.util.DoubleWrapper;");
  sm.append("import com.liferay.portal.kernel.util.FloatWrapper;");
  sm.append("import com.liferay.portal.kernel.util.IntegerWrapper;");
  sm.append("import com.liferay.portal.kernel.util.LongWrapper;");
  sm.append("import com.liferay.portal.kernel.util.MethodWrapper;");
  sm.append("import com.liferay.portal.kernel.util.NullWrapper;");
  sm.append("import com.liferay.portal.kernel.util.ShortWrapper;");
  sm.append("import com.liferay.portal.security.auth.HttpPrincipal;");
  sm.append("import com.liferay.portal.service.http.TunnelUtil;");
  sm.append("public class " + entity.getName() + "ServiceHttp {");
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (!javaMethod.isConstructor() && javaMethod.isPublic() && _isCustomMethod(javaMethod)) {
      Type returnType=javaMethod.getReturns();
      String returnTypeName=returnType.getValue() + _getDimensions(returnType);
      sm.append("public static " + returnTypeName + " "+ methodName+ "(HttpPrincipal httpPrincipal");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        if (j == 0) {
          sm.append(", ");
        }
        sm.append(javaParameter.getType().getValue() + _getDimensions(javaParameter.getType()) + " "+ javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      Set newExceptions=new LinkedHashSet();
      for (int j=0; j < thrownExceptions.length; j++) {
        Type thrownException=thrownExceptions[j];
        newExceptions.add(thrownException.getValue());
      }
      newExceptions.add("com.liferay.portal.SystemException");
      if (newExceptions.size() > 0) {
        sm.append(" throws ");
        Iterator itr=newExceptions.iterator();
        while (itr.hasNext()) {
          sm.append(itr.next());
          if (itr.hasNext()) {
            sm.append(", ");
          }
        }
      }
      sm.append("{");
      sm.append("try {");
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        String parameterTypeName=javaParameter.getType().getValue() + _getDimensions(javaParameter.getType());
        sm.append("Object paramObj" + j + " = ");
        if (parameterTypeName.equals("boolean")) {
          sm.append("new BooleanWrapper(" + javaParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("double")) {
          sm.append("new DoubleWrapper(" + javaParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("float")) {
          sm.append("new FloatWrapper(" + javaParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("int")) {
          sm.append("new IntegerWrapper(" + javaParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("long")) {
          sm.append("new LongWrapper(" + javaParameter.getName() + ");");
        }
 else         if (parameterTypeName.equals("short")) {
          sm.append("new ShortWrapper(" + javaParameter.getName() + ");");
        }
 else {
          sm.append(javaParameter.getName() + ";");
          sm.append("if (" + javaParameter.getName() + " == null) {");
          sm.append("paramObj" + j + " = new NullWrapper(\""+ _getClassName(javaParameter.getType())+ "\");");
          sm.append("}");
        }
      }
      sm.append("MethodWrapper methodWrapper = new MethodWrapper(");
      sm.append(entity.getName() + "ServiceUtil.class.getName(),");
      sm.append("\"" + methodName + "\",");
      if (parameters.length == 0) {
        sm.append("new Object[0]);");
      }
 else {
        sm.append("new Object[] {");
        for (int j=0; j < parameters.length; j++) {
          sm.append("paramObj" + j);
          if ((j + 1) != parameters.length) {
            sm.append(", ");
          }
        }
        sm.append("});");
      }
      if (!returnTypeName.equals("void")) {
        sm.append("Object returnObj = null;");
      }
      sm.append("try {");
      if (!returnTypeName.equals("void")) {
        sm.append("returnObj =");
      }
      sm.append("TunnelUtil.invoke(httpPrincipal, methodWrapper);");
      sm.append("}");
      sm.append("catch (Exception e) {");
      Iterator itr=newExceptions.iterator();
      while (itr.hasNext()) {
        String exceptionType=(String)itr.next();
        sm.append("if (e instanceof " + exceptionType + ") {");
        sm.append("throw (" + exceptionType + ")e;");
        sm.append("}");
      }
      sm.append("throw new com.liferay.portal.SystemException(e);");
      sm.append("}");
      if (!returnTypeName.equals("void")) {
        if (returnTypeName.equals("boolean")) {
          sm.append("return ((Boolean)returnObj).booleanValue();");
        }
 else         if (returnTypeName.equals("double")) {
          sm.append("return ((Double)returnObj).doubleValue();");
        }
 else         if (returnTypeName.equals("float")) {
          sm.append("return ((Float)returnObj).floatValue();");
        }
 else         if (returnTypeName.equals("int")) {
          sm.append("return ((Integer)returnObj).intValue();");
        }
 else         if (returnTypeName.equals("long")) {
          sm.append("return ((Long)returnObj).longValue();");
        }
 else         if (returnTypeName.equals("short")) {
          sm.append("return ((Short)returnObj).shortValue();");
        }
 else {
          sm.append("return (" + returnTypeName + ")returnObj;");
        }
      }
      sm.append("}");
      sm.append("catch (com.liferay.portal.SystemException se) {");
      sm.append("_log.error(se, se);");
      sm.append("throw se;");
      sm.append("}");
      sm.append("}");
    }
  }
  if (sm.indexOf("_log.") != -1) {
    sm.append("private static Log _log = LogFactoryUtil.getLog(" + entity.getName() + "ServiceHttp.class);");
  }
  sm.append("}");
  File ejbFile=new File(_outputPath + "/service/http/" + entity.getName()+ "ServiceHttp.java");
  Map jalopySettings=new HashMap();
  String[] classComments={_DEFAULT_CLASS_COMMENTS,"This class provides a HTTP utility for the <code>" + _packagePath + ".service."+ entity.getName()+ "ServiceUtil</code> service utility. The static methods of this class calls the same methods of the service utility. However, the signatures are different because it requires an additional <code>com.liferay.portal.security.auth.HttpPrincipal</code> parameter.","The benefits of using the HTTP utility is that it is fast and allows for tunneling without the cost of serializing to text. The drawback is that it only works with Java.","Set the property <code>tunnel.servlet.hosts.allowed</code> in portal.properties to configure security.","The HTTP utility is only generated for remote services."};
  String[] see={"com.liferay.portal.security.auth.HttpPrincipal",_packagePath + ".service." + entity.getName()+ "ServiceUtil",_packagePath + ".service.http." + entity.getName()+ "ServiceSoap"};
  jalopySettings.put("classComments",classComments);
  jalopySettings.put("see",see);
  writeFile(ejbFile,sm.toString(),jalopySettings);
}
