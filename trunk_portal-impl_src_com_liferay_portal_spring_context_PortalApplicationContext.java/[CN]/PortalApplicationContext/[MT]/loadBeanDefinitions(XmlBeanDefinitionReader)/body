{
  try {
    super.loadBeanDefinitions(reader);
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e,e);
    }
  }
  reader.setResourceLoader(new DefaultResourceLoader());
  if (PropsValues.SPRING_CONFIGS == null) {
    return;
  }
  List<String> configLocations=ListUtil.fromArray(PropsValues.SPRING_CONFIGS);
  if (PropsValues.PERSISTENCE_PROVIDER.equalsIgnoreCase("jpa")) {
    configLocations.remove("META-INF/hibernate-spring.xml");
  }
 else {
    configLocations.remove("META-INF/jpa-spring.xml");
  }
  for (  String configLocation : configLocations) {
    try {
      reader.loadBeanDefinitions(configLocation);
    }
 catch (    Exception e) {
      Throwable cause=e.getCause();
      if (cause instanceof FileNotFoundException) {
        if (_log.isWarnEnabled()) {
          _log.warn(cause.getMessage());
        }
      }
 else {
        _log.error(e,e);
      }
    }
  }
}
