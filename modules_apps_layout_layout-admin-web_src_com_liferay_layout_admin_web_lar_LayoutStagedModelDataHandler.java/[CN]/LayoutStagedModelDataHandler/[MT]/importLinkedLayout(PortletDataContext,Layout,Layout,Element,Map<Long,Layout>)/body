{
  UnicodeProperties typeSettingsProperties=layout.getTypeSettingsProperties();
  long linkToLayoutId=GetterUtil.getLong(typeSettingsProperties.getProperty("linkToLayoutId",StringPool.BLANK));
  String linkedToLayoutUuid=layoutElement.attributeValue("linked-to-layout-uuid");
  if (Validator.isNull(linkedToLayoutUuid)) {
    return;
  }
  if (linkToLayoutId <= 0) {
    updateTypeSettings(importedLayout,layout);
    return;
  }
  Element linkedToLayoutElement=portletDataContext.getReferenceDataElement(layout,Layout.class,layout.getGroupId(),linkedToLayoutUuid);
  if (linkedToLayoutElement != null) {
    String linkedToLayoutPath=linkedToLayoutElement.attributeValue("path");
    Layout linkedToLayout=(Layout)portletDataContext.getZipEntryAsObject(linkedToLayoutPath);
    StagedModelDataHandlerUtil.importStagedModel(portletDataContext,linkedToLayout);
    Layout importedLinkedLayout=layouts.get(linkToLayoutId);
    if (importedLinkedLayout == null) {
      throw new NoSuchLayoutException("Layout with id " + linkToLayoutId + " that is linked from "+ layout.getLayoutId()+ " does not exists.");
    }
    typeSettingsProperties.setProperty("privateLayout",String.valueOf(importedLinkedLayout.isPrivateLayout()));
    typeSettingsProperties.setProperty("linkToLayoutId",String.valueOf(importedLinkedLayout.getLayoutId()));
  }
 else {
    if (_log.isWarnEnabled()) {
      StringBundler sb=new StringBundler(6);
      sb.append("Unable to link layout with friendly URL ");
      sb.append(layout.getFriendlyURL());
      sb.append(" and layout id ");
      sb.append(layout.getLayoutId());
      sb.append(" to layout with layout id ");
      sb.append(linkToLayoutId);
      _log.warn(sb.toString());
    }
  }
  updateTypeSettings(importedLayout,layout);
}
