{
  if (outputProcessor == null) {
    throw new NullPointerException("Output processor is null");
  }
  if (arguments == null) {
    throw new NullPointerException("Arguments is null");
  }
  ProcessBuilder processBuilder=new ProcessBuilder(arguments);
  try {
    Process process=processBuilder.start();
    ThreadPoolExecutor threadPoolExecutor=_getThreadPoolExecutor();
    try {
      NoticeableFuture<O> stdOutNoticeableFuture=threadPoolExecutor.submit(new ProcessStdOutCallable<O>(outputProcessor,process));
      NoticeableFuture<E> stdErrNoticeableFuture=threadPoolExecutor.submit(new ProcessStdErrCallable<E>(outputProcessor,process));
      return _wrapNoticeableFuture(stdOutNoticeableFuture,stdErrNoticeableFuture,process);
    }
 catch (    RejectedExecutionException ree) {
      process.destroy();
      throw new ProcessException("Cancelled execution because of a concurrent destroy",ree);
    }
  }
 catch (  IOException ioe) {
    throw new ProcessException(ioe);
  }
}
