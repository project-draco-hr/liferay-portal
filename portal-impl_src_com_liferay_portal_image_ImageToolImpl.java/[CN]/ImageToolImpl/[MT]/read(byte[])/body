{
  String formatName=null;
  ImageInputStream imageInputStream=null;
  Queue<ImageReader> imageReaders=new LinkedList<ImageReader>();
  RenderedImage renderedImage=null;
  try {
    imageInputStream=ImageIO.createImageInputStream(new ByteArrayInputStream(bytes));
    Iterator<ImageReader> iterator=ImageIO.getImageReaders(imageInputStream);
    while ((renderedImage == null) && iterator.hasNext()) {
      ImageReader imageReader=iterator.next();
      imageReaders.offer(imageReader);
      try {
        imageReader.setInput(imageInputStream);
        renderedImage=imageReader.read(0);
      }
 catch (      IOException ioe) {
        continue;
      }
      formatName=StringUtil.toLowerCase(imageReader.getFormatName());
    }
    if (renderedImage == null) {
      throw new IOException("Unsupported Image Type");
    }
  }
  finally {
    while (!imageReaders.isEmpty()) {
      ImageReader imageReader=imageReaders.poll();
      imageReader.dispose();
    }
    if (imageInputStream != null) {
      imageInputStream.close();
    }
  }
  String type=TYPE_JPEG;
  if (formatName.contains(TYPE_BMP)) {
    type=TYPE_BMP;
  }
 else   if (formatName.contains(TYPE_GIF)) {
    type=TYPE_GIF;
  }
 else   if (formatName.contains("jpeg") || type.equals("jpeg")) {
    type=TYPE_JPEG;
  }
 else   if (formatName.contains(TYPE_PNG)) {
    type=TYPE_PNG;
  }
 else   if (formatName.contains(TYPE_TIFF)) {
    type=TYPE_TIFF;
  }
 else {
    throw new IllegalArgumentException(type + " is not supported");
  }
  return new ImageBag(renderedImage,type);
}
