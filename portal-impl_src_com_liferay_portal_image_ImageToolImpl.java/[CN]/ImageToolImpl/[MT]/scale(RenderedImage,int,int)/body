{
  int imageHeight=renderedImage.getHeight();
  int imageWidth=renderedImage.getWidth();
  if (maxHeight == 0) {
    maxHeight=imageHeight;
  }
  if (maxWidth == 0) {
    maxWidth=imageWidth;
  }
  if ((imageHeight <= maxHeight) && (imageWidth <= maxWidth)) {
    return renderedImage;
  }
  double factor=Math.min((double)maxHeight / imageHeight,(double)maxWidth / imageWidth);
  int scaledHeight=Math.max(1,(int)(factor * imageHeight));
  int scaledWidth=Math.max(1,(int)(factor * imageWidth));
  BufferedImage originalBufferedImage=getBufferedImage(renderedImage);
  ColorModel originalColorModel=originalBufferedImage.getColorModel();
  Graphics2D originalGraphics=originalBufferedImage.createGraphics();
  if (originalColorModel.hasAlpha()) {
    originalGraphics.setComposite(AlphaComposite.Src);
  }
  GraphicsConfiguration originalGraphicsConfiguration=originalGraphics.getDeviceConfiguration();
  BufferedImage scaledBufferedImage=originalGraphicsConfiguration.createCompatibleImage(scaledWidth,scaledHeight,originalBufferedImage.getTransparency());
  Graphics scaledGraphics=scaledBufferedImage.getGraphics();
  java.awt.Image scaledImage=originalBufferedImage.getScaledInstance(scaledWidth,scaledHeight,java.awt.Image.SCALE_SMOOTH);
  scaledGraphics.drawImage(scaledImage,0,0,null);
  originalGraphics.dispose();
  return scaledBufferedImage;
}
