{
  String templateId="testId";
  Class<?> clazz=getClass();
  ClassLoader classLoader=clazz.getClassLoader();
  String resourcePath=clazz.getName();
  resourcePath=resourcePath.replace('.','/') + ".class";
  URL url=classLoader.getResource(resourcePath);
  URLTemplateResource urlTemplateResource=new URLTemplateResource(templateId,url);
  UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
  try (ObjectOutput objectOutput=new MockObjectOutput(unsyncByteArrayOutputStream)){
    urlTemplateResource.writeExternal(objectOutput);
  }
   byte[] externalizedData=unsyncByteArrayOutputStream.toByteArray();
  DataInputStream dataInputStream=new DataInputStream(new UnsyncByteArrayInputStream(externalizedData));
  Assert.assertEquals(templateId,dataInputStream.readUTF());
  Assert.assertEquals(url.toExternalForm(),dataInputStream.readUTF());
  URLTemplateResource newURLTemplateResource=new URLTemplateResource();
  MockObjectInput mockObjectInput=new MockObjectInput(new DataInputStream(new UnsyncByteArrayInputStream(externalizedData)));
  newURLTemplateResource.readExternal(mockObjectInput);
  Assert.assertEquals(templateId,newURLTemplateResource.getTemplateId());
  Assert.assertEquals(url,ReflectionTestUtil.getFieldValue(newURLTemplateResource,"_templateURL"));
}
