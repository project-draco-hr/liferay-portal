{
  String ddmTemplateKey="testKey";
  final long templateId=100;
  DDMTemplate ddmTemplate=(DDMTemplate)ProxyUtil.newProxyInstance(getClass().getClassLoader(),new Class<?>[]{DDMTemplate.class},new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] arguments) throws Throwable {
      String methodName=method.getName();
      if (methodName.equals("getTemplateId")) {
        return templateId;
      }
      throw new UnsupportedOperationException();
    }
  }
);
  DDMTemplateResource ddmTemplateResource=new DDMTemplateResource(ddmTemplateKey,ddmTemplate);
  UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
  ObjectOutput objectOutput=new MockObjectOutput(unsyncByteArrayOutputStream);
  ddmTemplateResource.writeExternal(objectOutput);
  objectOutput.close();
  byte[] externalizedData=unsyncByteArrayOutputStream.toByteArray();
  DataInputStream dataInputStream=new DataInputStream(new UnsyncByteArrayInputStream(externalizedData));
  Assert.assertEquals(templateId,dataInputStream.readLong());
  Assert.assertEquals(ddmTemplateKey,dataInputStream.readUTF());
  DDMTemplateResource newDDMTemplateResource=new DDMTemplateResource();
  MockObjectInput mockObjectInput=new MockObjectInput(new DataInputStream(new UnsyncByteArrayInputStream(externalizedData)));
  UnsyncByteArrayOutputStream hijackedUnsyncByteArrayOutputStream=ConsoleTestUtil.hijackStdErr();
  try {
    newDDMTemplateResource.readExternal(mockObjectInput);
    Assert.fail();
  }
 catch (  IOException ioe) {
    Assert.assertEquals("Unable to retrieve ddm template with ID " + templateId,ioe.getMessage());
  }
 finally {
    ConsoleTestUtil.restoreStdErr(hijackedUnsyncByteArrayOutputStream);
  }
  Assert.assertEquals(null,newDDMTemplateResource.getTemplateId());
}
