{
  File javadocFile=new File(_BASEDIR + fileName + "doc");
  if (!javadocFile.exists()) {
    return;
  }
  File file=new File(_BASEDIR + fileName);
  if (oldContent == null) {
    oldContent=_fileUtil.read(file);
  }
  String[] lines=StringUtil.splitLines(oldContent);
  JavaClass javaClass=_getJavaClass(fileName,new UnsyncStringReader(oldContent));
  Document document=_saxReader.read(javadocFile);
  Element rootElement=document.getRootElement();
  Map<Integer,String> commentsMap=new TreeMap<>();
  commentsMap.put(javaClass.getLineNumber(),_getJavaClassComment(rootElement));
  Map<String,Element> methodElementsMap=new HashMap<>();
  List<Element> methodElements=rootElement.elements("method");
  for (  Element methodElement : methodElements) {
    String methodKey=_getMethodKey(methodElement);
    methodElementsMap.put(methodKey,methodElement);
  }
  JavaMethod[] javaMethods=javaClass.getMethods();
  for (  JavaMethod javaMethod : javaMethods) {
    if (commentsMap.containsKey(javaMethod.getLineNumber())) {
      continue;
    }
    commentsMap.put(javaMethod.getLineNumber(),_getJavaMethodComment(lines,methodElementsMap,javaMethod));
  }
  Map<String,Element> fieldElementsMap=new HashMap<>();
  List<Element> fieldElements=rootElement.elements("field");
  for (  Element fieldElement : fieldElements) {
    String fieldKey=_getFieldKey(fieldElement);
    fieldElementsMap.put(fieldKey,fieldElement);
  }
  JavaField[] javaFields=javaClass.getFields();
  for (  JavaField javaField : javaFields) {
    if (commentsMap.containsKey(javaField.getLineNumber())) {
      continue;
    }
    commentsMap.put(javaField.getLineNumber(),_getJavaFieldComment(lines,fieldElementsMap,javaField));
  }
  StringBuilder sb=new StringBuilder(oldContent.length());
  for (int lineNumber=1; lineNumber <= lines.length; lineNumber++) {
    String line=lines[lineNumber - 1];
    String comments=commentsMap.get(lineNumber);
    if (comments != null) {
      sb.append(comments);
    }
    sb.append(line);
    sb.append("\n");
  }
  String newContent=sb.toString().trim();
  if ((oldContent == null) || !oldContent.equals(newContent)) {
    _fileUtil.write(file,newContent);
    System.out.println("Writing " + file);
  }
}
