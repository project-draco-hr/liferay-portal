{
  Set<String> portletIds=new HashSet<String>();
  if (xml == null) {
    return portletIds;
  }
  Document document=SAXReaderUtil.read(xml,PropsValues.PORTLET_XML_VALIDATE);
  Element rootElement=document.getRootElement();
  PortletApp portletApp=_getPortletApp(servletContextName);
  portletApp.getServletURLPatterns().addAll(servletURLPatterns);
  Set<String> userAttributes=portletApp.getUserAttributes();
  for (  Element userAttributeElement : rootElement.elements("user-attribute")) {
    String name=userAttributeElement.elementText("name");
    userAttributes.add(name);
  }
  String defaultNamespace=rootElement.elementText("default-namespace");
  if (Validator.isNotNull(defaultNamespace)) {
    portletApp.setDefaultNamespace(defaultNamespace);
  }
  for (  Element eventDefinitionElement : rootElement.elements("event-definition")) {
    Element qNameElement=eventDefinitionElement.element("qname");
    Element nameElement=eventDefinitionElement.element("name");
    String valueType=eventDefinitionElement.elementText("value-type");
    QName qName=PortletQNameUtil.getQName(qNameElement,nameElement,portletApp.getDefaultNamespace());
    EventDefinition eventDefinition=new EventDefinitionImpl(qName,valueType,portletApp);
    portletApp.addEventDefinition(eventDefinition);
  }
  for (  Element publicRenderParameterElement : rootElement.elements("public-render-parameter")) {
    String identifier=publicRenderParameterElement.elementText("identifier");
    Element qNameElement=publicRenderParameterElement.element("qname");
    Element nameElement=publicRenderParameterElement.element("name");
    QName qName=PortletQNameUtil.getQName(qNameElement,nameElement,portletApp.getDefaultNamespace());
    PublicRenderParameter publicRenderParameter=new PublicRenderParameterImpl(identifier,qName,portletApp);
    portletApp.addPublicRenderParameter(publicRenderParameter);
  }
  for (  Element containerRuntimeOptionElement : rootElement.elements("container-runtime-option")) {
    String name=GetterUtil.getString(containerRuntimeOptionElement.elementText("name"));
    List<String> values=new ArrayList<String>();
    for (    Element valueElement : containerRuntimeOptionElement.elements("value")) {
      values.add(valueElement.getTextTrim());
    }
    Map<String,String[]> containerRuntimeOptions=portletApp.getContainerRuntimeOptions();
    containerRuntimeOptions.put(name,values.toArray(new String[values.size()]));
    if (name.equals(LiferayPortletConfig.RUNTIME_OPTION_PORTAL_CONTEXT) && !values.isEmpty() && GetterUtil.getBoolean(values.get(0))) {
      portletApp.setWARFile(false);
    }
  }
  long timestamp=ServletContextUtil.getLastModified(servletContext);
  for (  Element portletElement : rootElement.elements("portlet")) {
    String portletName=portletElement.elementText("portlet-name");
    String portletId=portletName;
    if (Validator.isNotNull(servletContextName)) {
      portletId=portletId + PortletConstants.WAR_SEPARATOR + servletContextName;
    }
    portletId=PortalUtil.getJsSafePortletId(portletId);
    if (_log.isDebugEnabled()) {
      _log.debug("Reading portlet " + portletId);
    }
    portletIds.add(portletId);
    Portlet portletModel=portletsPool.get(portletId);
    if (portletModel == null) {
      portletModel=new PortletImpl(CompanyConstants.SYSTEM,portletId);
      portletsPool.put(portletId,portletModel);
    }
    portletModel.setTimestamp(timestamp);
    portletModel.setPluginPackage(pluginPackage);
    portletModel.setPortletApp(portletApp);
    portletModel.setPortletName(portletName);
    portletModel.setDisplayName(GetterUtil.getString(portletElement.elementText("display-name"),portletModel.getDisplayName()));
    portletModel.setPortletClass(GetterUtil.getString(portletElement.elementText("portlet-class")));
    Map<String,String> initParams=portletModel.getInitParams();
    for (    Element initParamElement : portletElement.elements("init-param")) {
      initParams.put(initParamElement.elementText("name"),initParamElement.elementText("value"));
    }
    Element expirationCacheElement=portletElement.element("expiration-cache");
    if (expirationCacheElement != null) {
      portletModel.setExpCache(GetterUtil.getInteger(expirationCacheElement.getText()));
    }
    for (    Element supportsElement : portletElement.elements("supports")) {
      Map<String,Set<String>> portletModes=portletModel.getPortletModes();
      String mimeType=supportsElement.elementText("mime-type");
      Set<String> mimeTypePortletModes=portletModes.get(mimeType);
      if (mimeTypePortletModes == null) {
        mimeTypePortletModes=new HashSet<String>();
        portletModes.put(mimeType,mimeTypePortletModes);
      }
      mimeTypePortletModes.add(PortletMode.VIEW.toString().toLowerCase());
      for (      Element portletModeElement : supportsElement.elements("portlet-mode")) {
        mimeTypePortletModes.add(portletModeElement.getTextTrim().toLowerCase());
      }
      Map<String,Set<String>> windowStates=portletModel.getWindowStates();
      Set<String> mimeTypeWindowStates=windowStates.get(mimeType);
      if (mimeTypeWindowStates == null) {
        mimeTypeWindowStates=new HashSet<String>();
        windowStates.put(mimeType,mimeTypeWindowStates);
      }
      mimeTypeWindowStates.add(WindowState.NORMAL.toString().toLowerCase());
      List<Element> windowStateElements=supportsElement.elements("window-state");
      if (windowStateElements.isEmpty()) {
        mimeTypeWindowStates.add(WindowState.MAXIMIZED.toString().toLowerCase());
        mimeTypeWindowStates.add(WindowState.MINIMIZED.toString().toLowerCase());
        mimeTypeWindowStates.add(LiferayWindowState.EXCLUSIVE.toString().toLowerCase());
        mimeTypeWindowStates.add(LiferayWindowState.POP_UP.toString().toLowerCase());
      }
      for (      Element windowStateElement : windowStateElements) {
        mimeTypeWindowStates.add(windowStateElement.getTextTrim().toLowerCase());
      }
    }
    Set<String> supportedLocales=portletModel.getSupportedLocales();
    for (    Element supportedLocaleElement : portletElement.elements("supported-locale")) {
      String supportedLocale=supportedLocaleElement.getText();
      supportedLocales.add(supportedLocale);
    }
    portletModel.setResourceBundle(portletElement.elementText("resource-bundle"));
    Element portletInfo=portletElement.element("portlet-info");
    String portletInfoTitle=null;
    String portletInfoShortTitle=null;
    String portletInfoKeyWords=null;
    String portletInfoDescription=null;
    if (portletInfo != null) {
      portletInfoTitle=portletInfo.elementText("title");
      portletInfoShortTitle=portletInfo.elementText("short-title");
      portletInfoKeyWords=portletInfo.elementText("keywords");
    }
    portletModel.setPortletInfo(new PortletInfo(portletInfoTitle,portletInfoShortTitle,portletInfoKeyWords,portletInfoDescription));
    Element portletPreferences=portletElement.element("portlet-preferences");
    String defaultPreferences=null;
    String preferencesValidator=null;
    if (portletPreferences != null) {
      Element preferencesValidatorEl=portletPreferences.element("preferences-validator");
      if (preferencesValidatorEl != null) {
        preferencesValidator=preferencesValidatorEl.getText();
        portletPreferences.remove(preferencesValidatorEl);
      }
      defaultPreferences=portletPreferences.asXML();
    }
    portletModel.setDefaultPreferences(defaultPreferences);
    portletModel.setPreferencesValidator(preferencesValidator);
    if (!portletApp.isWARFile() && Validator.isNotNull(preferencesValidator) && PropsValues.PREFERENCE_VALIDATE_ON_STARTUP) {
      try {
        PreferencesValidator preferencesValidatorObj=PortalUtil.getPreferencesValidator(portletModel);
        preferencesValidatorObj.validate(PortletPreferencesSerializer.fromDefaultXML(defaultPreferences));
      }
 catch (      Exception e) {
        if (_log.isWarnEnabled()) {
          _log.warn("Portlet with the name " + portletId + " does not have valid default preferences");
        }
      }
    }
    Set<String> unlikedRoles=portletModel.getUnlinkedRoles();
    for (    Element roleElement : portletElement.elements("security-role-ref")) {
      unlikedRoles.add(roleElement.elementText("role-name"));
    }
    for (    Element supportedProcessingEventElement : portletElement.elements("supported-processing-event")) {
      Element qNameElement=supportedProcessingEventElement.element("qname");
      Element nameElement=supportedProcessingEventElement.element("name");
      QName qName=PortletQNameUtil.getQName(qNameElement,nameElement,portletApp.getDefaultNamespace());
      portletModel.addProcessingEvent(qName);
    }
    for (    Element supportedPublishingEventElement : portletElement.elements("supported-publishing-event")) {
      Element qNameElement=supportedPublishingEventElement.element("qname");
      Element nameElement=supportedPublishingEventElement.element("name");
      QName qName=PortletQNameUtil.getQName(qNameElement,nameElement,portletApp.getDefaultNamespace());
      portletModel.addPublishingEvent(qName);
    }
    for (    Element supportedPublicRenderParameter : portletElement.elements("supported-public-render-parameter")) {
      String identifier=supportedPublicRenderParameter.getTextTrim();
      PublicRenderParameter publicRenderParameter=portletApp.getPublicRenderParameter(identifier);
      if (publicRenderParameter == null) {
        _log.error("Supported public render parameter references " + "unnknown identifier " + identifier);
        continue;
      }
      portletModel.addPublicRenderParameter(publicRenderParameter);
    }
  }
  for (  Element filterElement : rootElement.elements("filter")) {
    String filterName=filterElement.elementText("filter-name");
    String filterClass=filterElement.elementText("filter-class");
    Set<String> lifecycles=new LinkedHashSet<String>();
    for (    Element lifecycleElement : filterElement.elements("lifecycle")) {
      lifecycles.add(lifecycleElement.getText());
    }
    Map<String,String> initParams=new HashMap<String,String>();
    for (    Element initParamElement : filterElement.elements("init-param")) {
      initParams.put(initParamElement.elementText("name"),initParamElement.elementText("value"));
    }
    PortletFilter portletFilter=new PortletFilterImpl(filterName,filterClass,lifecycles,initParams,portletApp);
    portletApp.addPortletFilter(portletFilter);
  }
  for (  Element filterMappingElement : rootElement.elements("filter-mapping")) {
    String filterName=filterMappingElement.elementText("filter-name");
    for (    Element portletNameElement : filterMappingElement.elements("portlet-name")) {
      String portletName=portletNameElement.getTextTrim();
      PortletFilter portletFilter=portletApp.getPortletFilter(filterName);
      if (portletFilter == null) {
        _log.error("Filter mapping references unnknown filter name " + filterName);
        continue;
      }
      List<Portlet> portletModels=_getPortletsByPortletName(portletName,servletContextName,portletsPool);
      if (portletModels.size() == 0) {
        _log.error("Filter mapping with filter name " + filterName + " references unnknown portlet name "+ portletName);
      }
      for (      Portlet portletModel : portletModels) {
        portletModel.getPortletFilters().put(filterName,portletFilter);
      }
    }
  }
  for (  Element listenerElement : rootElement.elements("listener")) {
    String listenerClass=listenerElement.elementText("listener-class");
    PortletURLListener portletURLListener=new PortletURLListenerImpl(listenerClass,portletApp);
    portletApp.addPortletURLListener(portletURLListener);
  }
  return portletIds;
}
