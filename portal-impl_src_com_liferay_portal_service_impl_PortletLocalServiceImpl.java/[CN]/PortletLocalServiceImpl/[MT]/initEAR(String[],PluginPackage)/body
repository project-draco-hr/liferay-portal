{
  Map portletsPool=_getPortletsPool();
  try {
    List servletURLPatterns=_readWebXML(xmls[4]);
    Set portletIds=_readPortletXML(xmls[0],portletsPool,servletURLPatterns,pluginPackage);
    portletIds.addAll(_readPortletXML(xmls[1],portletsPool,servletURLPatterns,pluginPackage));
    Set liferayPortletIds=_readLiferayPortletXML(xmls[2],portletsPool);
    liferayPortletIds.addAll(_readLiferayPortletXML(xmls[3],portletsPool));
    Iterator itr=portletIds.iterator();
    while (itr.hasNext()) {
      String portletId=(String)itr.next();
      if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in portlet.xml but does not "+ "have a matching entry in liferay-portlet.xml");
      }
    }
    itr=liferayPortletIds.iterator();
    while (itr.hasNext()) {
      String portletId=(String)itr.next();
      if (_log.isWarnEnabled() && !portletIds.contains(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in liferay-portlet.xml but does "+ "not have a matching entry in portlet.xml");
      }
    }
    itr=portletsPool.entrySet().iterator();
    while (itr.hasNext()) {
      Map.Entry entry=(Map.Entry)itr.next();
      Portlet portletModel=(Portlet)entry.getValue();
      if (!portletModel.getPortletId().equals(PortletKeys.ADMIN) && !portletModel.getPortletId().equals(PortletKeys.MY_ACCOUNT) && !portletModel.isInclude()) {
        itr.remove();
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
}
