{
  Set<String> portletIds=new HashSet<String>();
  if (xml == null) {
    return portletIds;
  }
  Document doc=PortalUtil.readDocumentFromXML(xml);
  Element root=doc.getRootElement();
  Set<String> userAttributes=new HashSet<String>();
  Iterator<Element> itr1=root.elements("user-attribute").iterator();
  while (itr1.hasNext()) {
    Element userAttribute=itr1.next();
    String name=userAttribute.elementText("name");
    userAttributes.add(name);
  }
  itr1=root.elements("portlet").iterator();
  while (itr1.hasNext()) {
    Element portlet=itr1.next();
    String portletId=portlet.elementText("portlet-name");
    if (servletContextName != null) {
      portletId=portletId + PortletImpl.WAR_SEPARATOR + servletContextName;
    }
    portletId=PortalUtil.getJsSafePortletId(portletId);
    if (_log.isDebugEnabled()) {
      _log.debug("Reading portlet " + portletId);
    }
    portletIds.add(portletId);
    Portlet portletModel=portletsPool.get(portletId);
    if (portletModel == null) {
      portletModel=new PortletImpl(CompanyImpl.SYSTEM,portletId);
      portletsPool.put(portletId,portletModel);
    }
    portletModel.setPluginPackage(pluginPackage);
    if (servletContextName != null) {
      portletModel.setServletContextName(servletContextName);
    }
    if (servletURLPatterns != null) {
      portletModel.setServletURLPatterns(servletURLPatterns);
    }
    portletModel.setDisplayName(GetterUtil.getString(portlet.elementText("display-name"),portletModel.getDisplayName()));
    portletModel.setPortletClass(GetterUtil.getString(portlet.elementText("portlet-class")));
    Iterator<Element> itr2=portlet.elements("init-param").iterator();
    while (itr2.hasNext()) {
      Element initParam=itr2.next();
      portletModel.getInitParams().put(initParam.elementText("name"),initParam.elementText("value"));
    }
    Element expirationCache=portlet.element("expiration-cache");
    if (expirationCache != null) {
      portletModel.setExpCache(new Integer(GetterUtil.getInteger(expirationCache.getText())));
    }
    itr2=portlet.elements("supports").iterator();
    while (itr2.hasNext()) {
      Element supports=itr2.next();
      String mimeType=supports.elementText("mime-type");
      Set<String> mimeTypeModes=portletModel.getPortletModes().get(mimeType);
      if (mimeTypeModes == null) {
        mimeTypeModes=new HashSet<String>();
        portletModel.getPortletModes().put(mimeType,mimeTypeModes);
      }
      mimeTypeModes.add(PortletMode.VIEW.toString().toLowerCase());
      Iterator<Element> itr3=supports.elements("portlet-mode").iterator();
      while (itr3.hasNext()) {
        Element portletMode=itr3.next();
        mimeTypeModes.add(portletMode.getTextTrim().toLowerCase());
      }
    }
    Set<String> supportedLocales=portletModel.getSupportedLocales();
    supportedLocales.add(LocaleUtil.toLanguageId(LocaleUtil.getDefault()));
    itr2=portlet.elements("supported-locale").iterator();
    while (itr2.hasNext()) {
      Element supportedLocaleEl=itr2.next();
      String supportedLocale=supportedLocaleEl.getText();
      supportedLocales.add(supportedLocale);
    }
    portletModel.setResourceBundle(portlet.elementText("resource-bundle"));
    Element portletInfo=portlet.element("portlet-info");
    String portletInfoTitle=null;
    String portletInfoShortTitle=null;
    String portletInfoKeyWords=null;
    if (portletInfo != null) {
      portletInfoTitle=portletInfo.elementText("title");
      portletInfoShortTitle=portletInfo.elementText("short-title");
      portletInfoKeyWords=portletInfo.elementText("keywords");
    }
    portletModel.setPortletInfo(new PortletInfo(portletInfoTitle,portletInfoShortTitle,portletInfoKeyWords));
    Element portletPreferences=portlet.element("portlet-preferences");
    String defaultPreferences=null;
    String prefsValidator=null;
    if (portletPreferences != null) {
      Element prefsValidatorEl=portletPreferences.element("preferences-validator");
      if (prefsValidatorEl != null) {
        prefsValidator=prefsValidatorEl.getText();
        portletPreferences.remove(prefsValidatorEl);
      }
      StringWriter sw=new StringWriter();
      XMLWriter writer=new XMLWriter(sw,OutputFormat.createCompactFormat());
      writer.write(portletPreferences);
      defaultPreferences=sw.toString();
    }
    portletModel.setDefaultPreferences(defaultPreferences);
    portletModel.setPreferencesValidator(prefsValidator);
    if (!portletModel.isWARFile() && Validator.isNotNull(prefsValidator) && PropsValues.PREFERENCE_VALIDATE_ON_STARTUP) {
      try {
        PreferencesValidator prefsValidatorObj=PortalUtil.getPreferencesValidator(portletModel);
        prefsValidatorObj.validate(PortletPreferencesSerializer.fromDefaultXML(defaultPreferences));
      }
 catch (      Exception e) {
        if (_log.isWarnEnabled()) {
          _log.warn("Portlet with the name " + portletId + " does not have valid default preferences");
        }
      }
    }
    Set<String> unlikedRoles=portletModel.getUnlinkedRoles();
    itr2=portlet.elements("security-role-ref").iterator();
    while (itr2.hasNext()) {
      Element role=itr2.next();
      unlikedRoles.add(role.elementText("role-name"));
    }
    portletModel.getUserAttributes().addAll(userAttributes);
  }
  return portletIds;
}
