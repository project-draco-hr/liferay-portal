{
  List portlets=new ArrayList();
  Map portletsPool=_getPortletsPool();
  try {
    List servletURLPatterns=_readWebXML(xmls[3]);
    Set portletIds=_readPortletXML(servletContextName,xmls[0],portletsPool,servletURLPatterns,pluginPackage);
    portletIds.addAll(_readPortletXML(servletContextName,xmls[1],portletsPool,servletURLPatterns,pluginPackage));
    Set liferayPortletIds=_readLiferayPortletXML(servletContextName,xmls[2],portletsPool);
    Iterator itr=portletIds.iterator();
    while (itr.hasNext()) {
      String portletId=(String)itr.next();
      if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in portlet.xml but does not "+ "have a matching entry in liferay-portlet.xml");
      }
    }
    itr=liferayPortletIds.iterator();
    while (itr.hasNext()) {
      String portletId=(String)itr.next();
      if (_log.isWarnEnabled() && !portletIds.contains(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in liferay-portlet.xml but does "+ "not have a matching entry in portlet.xml");
      }
    }
    itr=portletIds.iterator();
    while (itr.hasNext()) {
      String portletId=(String)itr.next();
      Portlet portlet=(Portlet)_getPortletsPool().get(portletId);
      portlets.add(portlet);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  _clearCaches();
  return portlets;
}
