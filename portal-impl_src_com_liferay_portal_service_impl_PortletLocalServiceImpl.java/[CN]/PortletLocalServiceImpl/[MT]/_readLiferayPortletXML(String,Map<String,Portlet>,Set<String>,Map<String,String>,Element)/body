{
  String portletId=portletElement.elementText("portlet-name");
  if (Validator.isNotNull(servletContextName)) {
    portletId=portletId.concat(PortletConstants.WAR_SEPARATOR).concat(servletContextName);
  }
  portletId=PortalUtil.getJsSafePortletId(portletId);
  if (_log.isDebugEnabled()) {
    _log.debug("Reading portlet extension " + portletId);
  }
  liferayPortletIds.add(portletId);
  Portlet portletModel=portletsPool.get(portletId);
  if (portletModel == null) {
    return;
  }
  portletModel.setIcon(GetterUtil.getString(portletElement.elementText("icon"),portletModel.getIcon()));
  portletModel.setVirtualPath(GetterUtil.getString(portletElement.elementText("virtual-path"),portletModel.getVirtualPath()));
  portletModel.setStrutsPath(GetterUtil.getString(portletElement.elementText("struts-path"),portletModel.getStrutsPath()));
  portletModel.setParentStrutsPath(GetterUtil.getString(portletElement.elementText("parent-struts-path"),portletModel.getParentStrutsPath()));
  if (Validator.isNotNull(portletElement.elementText("configuration-path"))) {
    _log.error("The configuration-path element is no longer supported. Use " + "configuration-action-class instead.");
  }
  portletModel.setConfigurationActionClass(GetterUtil.getString(portletElement.elementText("configuration-action-class"),portletModel.getConfigurationActionClass()));
  portletModel.setIndexerClass(GetterUtil.getString(portletElement.elementText("indexer-class"),portletModel.getIndexerClass()));
  portletModel.setOpenSearchClass(GetterUtil.getString(portletElement.elementText("open-search-class"),portletModel.getOpenSearchClass()));
  for (  Element schedulerEntryElement : portletElement.elements("scheduler-entry")) {
    SchedulerEntry schedulerEntry=new SchedulerEntryImpl();
    schedulerEntry.setContextPath(portletModel.getContextPath());
    schedulerEntry.setDescription(GetterUtil.getString(schedulerEntryElement.elementText("scheduler-description")));
    schedulerEntry.setEventListenerClass(GetterUtil.getString(schedulerEntryElement.elementText("scheduler-event-listener-class"),schedulerEntry.getEventListenerClass()));
    Element triggerElement=schedulerEntryElement.element("trigger");
    Element cronElement=triggerElement.element("cron");
    Element simpleElement=triggerElement.element("simple");
    if (cronElement != null) {
      schedulerEntry.setTriggerType(TriggerType.CRON);
      Element propertyKeyElement=cronElement.element("property-key");
      if (propertyKeyElement != null) {
        schedulerEntry.setPropertyKey(propertyKeyElement.getTextTrim());
      }
 else {
        schedulerEntry.setTriggerValue(cronElement.elementText("cron-trigger-value"));
      }
    }
 else     if (simpleElement != null) {
      schedulerEntry.setTriggerType(TriggerType.SIMPLE);
      Element propertyKeyElement=simpleElement.element("property-key");
      if (propertyKeyElement != null) {
        schedulerEntry.setPropertyKey(propertyKeyElement.getTextTrim());
      }
 else {
        Element simpleTriggerValueElement=simpleElement.element("simple-trigger-value");
        schedulerEntry.setTriggerValue(simpleTriggerValueElement.getTextTrim());
      }
      String timeUnit=GetterUtil.getString(simpleElement.elementText("time-unit"),TimeUnit.SECOND.getValue());
      schedulerEntry.setTimeUnit(TimeUnit.parse(timeUnit.toLowerCase()));
    }
    portletModel.addSchedulerEntry(schedulerEntry);
  }
  portletModel.setPortletURLClass(GetterUtil.getString(portletElement.elementText("portlet-url-class"),portletModel.getPortletURLClass()));
  portletModel.setFriendlyURLMapperClass(GetterUtil.getString(portletElement.elementText("friendly-url-mapper-class"),portletModel.getFriendlyURLMapperClass()));
  if (Validator.isNull(portletModel.getFriendlyURLMapperClass())) {
    _friendlyURLMapperPortlets.remove(portletId);
  }
 else {
    _friendlyURLMapperPortlets.put(portletId,portletModel);
  }
  portletModel.setFriendlyURLMapping(GetterUtil.getString(portletElement.elementText("friendly-url-mapping"),portletModel.getFriendlyURLMapping()));
  portletModel.setFriendlyURLRoutes(GetterUtil.getString(portletElement.elementText("friendly-url-routes"),portletModel.getFriendlyURLRoutes()));
  portletModel.setURLEncoderClass(GetterUtil.getString(portletElement.elementText("url-encoder-class"),portletModel.getURLEncoderClass()));
  portletModel.setPortletDataHandlerClass(GetterUtil.getString(portletElement.elementText("portlet-data-handler-class"),portletModel.getPortletDataHandlerClass()));
  portletModel.setPortletLayoutListenerClass(GetterUtil.getString(portletElement.elementText("portlet-layout-listener-class"),portletModel.getPortletLayoutListenerClass()));
  portletModel.setPollerProcessorClass(GetterUtil.getString(portletElement.elementText("poller-processor-class"),portletModel.getPollerProcessorClass()));
  portletModel.setPopMessageListenerClass(GetterUtil.getString(portletElement.elementText("pop-message-listener-class"),portletModel.getPopMessageListenerClass()));
  portletModel.setSocialActivityInterpreterClass(GetterUtil.getString(portletElement.elementText("social-activity-interpreter-class"),portletModel.getSocialActivityInterpreterClass()));
  portletModel.setSocialRequestInterpreterClass(GetterUtil.getString(portletElement.elementText("social-request-interpreter-class"),portletModel.getSocialRequestInterpreterClass()));
  portletModel.setWebDAVStorageToken(GetterUtil.getString(portletElement.elementText("webdav-storage-token"),portletModel.getWebDAVStorageToken()));
  portletModel.setWebDAVStorageClass(GetterUtil.getString(portletElement.elementText("webdav-storage-class"),portletModel.getWebDAVStorageClass()));
  portletModel.setXmlRpcMethodClass(GetterUtil.getString(portletElement.elementText("xml-rpc-method-class"),portletModel.getXmlRpcMethodClass()));
  portletModel.setControlPanelEntryCategory(GetterUtil.getString(portletElement.elementText("control-panel-entry-category"),portletModel.getControlPanelEntryCategory()));
  portletModel.setControlPanelEntryWeight(GetterUtil.getDouble(portletElement.elementText("control-panel-entry-weight"),portletModel.getControlPanelEntryWeight()));
  portletModel.setControlPanelEntryClass(GetterUtil.getString(portletElement.elementText("control-panel-entry-class"),portletModel.getControlPanelEntryClass()));
  List<String> assetRendererFactoryClasses=portletModel.getAssetRendererFactoryClasses();
  for (  Element assetRendererFactoryClassElement : portletElement.elements("asset-renderer-factory")) {
    assetRendererFactoryClasses.add(assetRendererFactoryClassElement.getText());
  }
  List<String> customAttributesDisplayClasses=portletModel.getCustomAttributesDisplayClasses();
  for (  Element customAttributesDisplayClassElement : portletElement.elements("custom-attributes-display")) {
    customAttributesDisplayClasses.add(customAttributesDisplayClassElement.getText());
  }
  if (customAttributesDisplayClasses.isEmpty()) {
    _customAttributesDisplayPortlets.remove(portletId);
  }
 else {
    _customAttributesDisplayPortlets.put(portletId,portletModel);
  }
  List<String> workflowHandlerClasses=portletModel.getWorkflowHandlerClasses();
  for (  Element workflowHandlerClassElement : portletElement.elements("workflow-handler")) {
    workflowHandlerClasses.add(workflowHandlerClassElement.getText());
  }
  portletModel.setPreferencesCompanyWide(GetterUtil.getBoolean(portletElement.elementText("preferences-company-wide"),portletModel.isPreferencesCompanyWide()));
  portletModel.setPreferencesUniquePerLayout(GetterUtil.getBoolean(portletElement.elementText("preferences-unique-per-layout"),portletModel.isPreferencesUniquePerLayout()));
  portletModel.setPreferencesOwnedByGroup(GetterUtil.getBoolean(portletElement.elementText("preferences-owned-by-group"),portletModel.isPreferencesOwnedByGroup()));
  portletModel.setUseDefaultTemplate(GetterUtil.getBoolean(portletElement.elementText("use-default-template"),portletModel.isUseDefaultTemplate()));
  portletModel.setShowPortletAccessDenied(GetterUtil.getBoolean(portletElement.elementText("show-portlet-access-denied"),portletModel.isShowPortletAccessDenied()));
  portletModel.setShowPortletInactive(GetterUtil.getBoolean(portletElement.elementText("show-portlet-inactive"),portletModel.isShowPortletInactive()));
  portletModel.setActionURLRedirect(GetterUtil.getBoolean(portletElement.elementText("action-url-redirect"),portletModel.isActionURLRedirect()));
  portletModel.setRestoreCurrentView(GetterUtil.getBoolean(portletElement.elementText("restore-current-view"),portletModel.isRestoreCurrentView()));
  portletModel.setMaximizeEdit(GetterUtil.getBoolean(portletElement.elementText("maximize-edit"),portletModel.isMaximizeEdit()));
  portletModel.setMaximizeHelp(GetterUtil.getBoolean(portletElement.elementText("maximize-help"),portletModel.isMaximizeHelp()));
  portletModel.setPopUpPrint(GetterUtil.getBoolean(portletElement.elementText("pop-up-print"),portletModel.isPopUpPrint()));
  portletModel.setLayoutCacheable(GetterUtil.getBoolean(portletElement.elementText("layout-cacheable"),portletModel.isLayoutCacheable()));
  portletModel.setInstanceable(GetterUtil.getBoolean(portletElement.elementText("instanceable"),portletModel.isInstanceable()));
  portletModel.setRemoteable(GetterUtil.getBoolean(portletElement.elementText("remoteable"),portletModel.isRemoteable()));
  portletModel.setScopeable(GetterUtil.getBoolean(portletElement.elementText("scopeable"),portletModel.isScopeable()));
  portletModel.setUserPrincipalStrategy(GetterUtil.getString(portletElement.elementText("user-principal-strategy"),portletModel.getUserPrincipalStrategy()));
  portletModel.setPrivateRequestAttributes(GetterUtil.getBoolean(portletElement.elementText("private-request-attributes"),portletModel.isPrivateRequestAttributes()));
  portletModel.setPrivateSessionAttributes(GetterUtil.getBoolean(portletElement.elementText("private-session-attributes"),portletModel.isPrivateSessionAttributes()));
  portletModel.setActionTimeout(GetterUtil.getInteger(portletElement.elementText("action-timeout"),portletModel.getActionTimeout()));
  portletModel.setRenderTimeout(GetterUtil.getInteger(portletElement.elementText("render-timeout"),portletModel.getRenderTimeout()));
  portletModel.setRenderWeight(GetterUtil.getInteger(portletElement.elementText("render-weight"),portletModel.getRenderWeight()));
  portletModel.setAjaxable(GetterUtil.getBoolean(portletElement.elementText("ajaxable"),portletModel.isAjaxable()));
  List<String> headerPortalCssList=portletModel.getHeaderPortalCss();
  for (  Element headerPortalCssElement : portletElement.elements("header-portal-css")) {
    headerPortalCssList.add(headerPortalCssElement.getText());
  }
  List<String> headerPortletCssList=portletModel.getHeaderPortletCss();
  for (  Element headerPortletCssElement : portletElement.elements("header-portlet-css")) {
    headerPortletCssList.add(headerPortletCssElement.getText());
  }
  List<String> headerPortalJavaScriptList=portletModel.getHeaderPortalJavaScript();
  for (  Element headerPortalJavaScriptElement : portletElement.elements("header-portal-javascript")) {
    headerPortalJavaScriptList.add(headerPortalJavaScriptElement.getText());
  }
  List<String> headerPortletJavaScriptList=portletModel.getHeaderPortletJavaScript();
  for (  Element headerPortletJavaScriptElement : portletElement.elements("header-portlet-javascript")) {
    headerPortletJavaScriptList.add(headerPortletJavaScriptElement.getText());
  }
  List<String> footerPortalCssList=portletModel.getFooterPortalCss();
  for (  Element footerPortalCssElement : portletElement.elements("footer-portal-css")) {
    footerPortalCssList.add(footerPortalCssElement.getText());
  }
  List<String> footerPortletCssList=portletModel.getFooterPortletCss();
  for (  Element footerPortletCssElement : portletElement.elements("footer-portlet-css")) {
    footerPortletCssList.add(footerPortletCssElement.getText());
  }
  List<String> footerPortalJavaScriptList=portletModel.getFooterPortalJavaScript();
  for (  Element footerPortalJavaScriptElement : portletElement.elements("footer-portal-javascript")) {
    footerPortalJavaScriptList.add(footerPortalJavaScriptElement.getText());
  }
  List<String> footerPortletJavaScriptList=portletModel.getFooterPortletJavaScript();
  for (  Element footerPortletJavaScriptElement : portletElement.elements("footer-portlet-javascript")) {
    footerPortletJavaScriptList.add(footerPortletJavaScriptElement.getText());
  }
  portletModel.setCssClassWrapper(GetterUtil.getString(portletElement.elementText("css-class-wrapper"),portletModel.getCssClassWrapper()));
  portletModel.setFacebookIntegration(GetterUtil.getString(portletElement.elementText("facebook-integration"),portletModel.getFacebookIntegration()));
  portletModel.setAddDefaultResource(GetterUtil.getBoolean(portletElement.elementText("add-default-resource"),portletModel.isAddDefaultResource()));
  portletModel.setSystem(GetterUtil.getBoolean(portletElement.elementText("system"),portletModel.isSystem()));
  portletModel.setActive(GetterUtil.getBoolean(portletElement.elementText("active"),portletModel.isActive()));
  portletModel.setInclude(GetterUtil.getBoolean(portletElement.elementText("include"),portletModel.isInclude()));
  if (Validator.isNull(servletContextName)) {
    portletModel.setReady(true);
  }
  if (!portletModel.isAjaxable() && (portletModel.getRenderWeight() < 1)) {
    portletModel.setRenderWeight(1);
  }
  portletModel.getRoleMappers().putAll(roleMappers);
  portletModel.linkRoles();
}
