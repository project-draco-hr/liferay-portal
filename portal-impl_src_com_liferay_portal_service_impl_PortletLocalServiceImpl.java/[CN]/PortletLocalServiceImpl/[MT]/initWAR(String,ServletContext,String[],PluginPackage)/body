{
  List<Portlet> portlets=new ArrayList<>();
  try {
    Set<String> servletURLPatterns=_readWebXML(xmls[3]);
    Set<String> portletIds=_readPortletXML(servletContextName,servletContext,xmls[0],servletURLPatterns,pluginPackage);
    portletIds.addAll(_readPortletXML(servletContextName,servletContext,xmls[1],servletURLPatterns,pluginPackage));
    Set<String> liferayPortletIds=_readLiferayPortletXML(servletContextName,xmls[2]);
    for (    String portletId : portletIds) {
      if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in portlet.xml but does not "+ "have a matching entry in liferay-portlet.xml");
      }
    }
    for (    String portletId : liferayPortletIds) {
      if (_log.isWarnEnabled() && !portletIds.contains(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in liferay-portlet.xml but does "+ "not have a matching entry in portlet.xml");
      }
    }
    for (    String portletId : portletIds) {
      Portlet portlet=_portletsPool.get(portletId);
      portlets.add(portlet);
      PortletInstanceFactoryUtil.clear(portlet);
      PortletConfigFactoryUtil.destroy(portlet);
      PortletContextFactory.destroy(portlet);
    }
    PortletApp portletApp=_getPortletApp(servletContextName);
    _setSpriteImages(servletContext,portletApp,"/icons/");
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  clearCache();
  return portlets;
}
