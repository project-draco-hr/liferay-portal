{
  try {
    Set<String> servletURLPatterns=_readWebXML(xmls[3]);
    Map<String,Portlet> portlets=_readPortletXML(servletContextName,servletContext,xmls[0],servletURLPatterns,pluginPackage);
    portlets.putAll(_readPortletXML(servletContextName,servletContext,xmls[1],servletURLPatterns,pluginPackage));
    Set<String> liferayPortletIds=_readLiferayPortletXML(servletContextName,xmls[2],portlets);
    for (    String portletId : portlets.keySet()) {
      if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in portlet.xml but does not "+ "have a matching entry in liferay-portlet.xml");
      }
    }
    for (    String portletId : liferayPortletIds) {
      if (_log.isWarnEnabled() && !portlets.containsKey(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in liferay-portlet.xml but does "+ "not have a matching entry in portlet.xml");
      }
    }
    PortletBagFactory portletBagFactory=new PortletBagFactory();
    portletBagFactory.setClassLoader(ClassLoaderPool.getClassLoader(servletContextName));
    portletBagFactory.setServletContext(servletContext);
    portletBagFactory.setWARFile(true);
    for (    Map.Entry<String,Portlet> entry : portlets.entrySet()) {
      Portlet portlet=_portletsPool.remove(entry.getKey());
      if (portlet != null) {
        PortletInstanceFactoryUtil.clear(portlet);
        PortletConfigFactoryUtil.destroy(portlet);
        PortletContextFactory.destroy(portlet);
      }
      portlet=entry.getValue();
      portletBagFactory.create(portlet);
      _portletsPool.put(entry.getKey(),portlet);
    }
    PortletApp portletApp=_getPortletApp(servletContextName);
    _setSpriteImages(servletContext,portletApp,"/icons/");
    return ListUtil.fromMapValues(portlets);
  }
 catch (  Exception e) {
    _log.error(e,e);
    return Collections.emptyList();
  }
 finally {
    clearCache();
  }
}
