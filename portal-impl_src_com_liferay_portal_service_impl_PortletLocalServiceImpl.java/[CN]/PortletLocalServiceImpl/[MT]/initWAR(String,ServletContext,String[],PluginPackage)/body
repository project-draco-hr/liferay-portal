{
  Map<String,Portlet> portletsMap=null;
  Set<String> liferayPortletIds=null;
  try {
    Set<String> servletURLPatterns=readWebXML(xmls[3]);
    portletsMap=readPortletXML(servletContextName,servletContext,xmls[0],servletURLPatterns,pluginPackage);
    portletsMap.putAll(readPortletXML(servletContextName,servletContext,xmls[1],servletURLPatterns,pluginPackage));
    liferayPortletIds=readLiferayPortletXML(servletContextName,servletContext,xmls[2],portletsMap);
  }
 catch (  Exception e) {
    _log.error(e,e);
    return Collections.emptyList();
  }
  for (  String portletId : portletsMap.keySet()) {
    if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) {
      _log.warn("Portlet with the name " + portletId + " is described in portlet.xml but does not "+ "have a matching entry in liferay-portlet.xml");
    }
  }
  for (  String portletId : liferayPortletIds) {
    if (_log.isWarnEnabled() && !portletsMap.containsKey(portletId)) {
      _log.warn("Portlet with the name " + portletId + " is described in liferay-portlet.xml but does "+ "not have a matching entry in portlet.xml");
    }
  }
  PortletBagFactory portletBagFactory=new PortletBagFactory();
  portletBagFactory.setClassLoader(ClassLoaderPool.getClassLoader(servletContextName));
  portletBagFactory.setServletContext(servletContext);
  portletBagFactory.setWARFile(true);
  try {
    for (    Map.Entry<String,Portlet> entry : portletsMap.entrySet()) {
      Portlet portlet=_portletsMap.remove(entry.getKey());
      if (portlet != null) {
        PortletInstanceFactoryUtil.clear(portlet);
        PortletConfigFactoryUtil.destroy(portlet);
        PortletContextFactoryUtil.destroy(portlet);
      }
      portlet=entry.getValue();
      portletBagFactory.create(portlet,true);
      _portletsMap.put(entry.getKey(),portlet);
    }
    PortletApp portletApp=getPortletApp(servletContextName);
    setSpriteImages(servletContext,portletApp,"/icons/");
    return ListUtil.fromMapValues(portletsMap);
  }
 catch (  Exception e) {
    _log.error(e,e);
    for (    Map.Entry<String,Portlet> entry : portletsMap.entrySet()) {
      Portlet portlet=_portletsMap.remove(entry.getKey());
      if (portlet != null) {
        PortletInstanceFactoryUtil.clear(portlet);
        PortletConfigFactoryUtil.destroy(portlet);
        PortletContextFactoryUtil.destroy(portlet);
      }
    }
    return Collections.emptyList();
  }
 finally {
    clearCache();
  }
}
