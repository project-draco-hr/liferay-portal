{
  super.afterPropertiesSet();
  Registry registry=RegistryUtil.getRegistry();
  Filter filter=registry.getFilter("(objectClass=" + FriendlyURLMapper.class.getName() + ")");
  _serviceTracker=registry.trackServices(filter,new ServiceTrackerCustomizer<FriendlyURLMapper,List<String>>(){
    @Override public List<String> addingService(    ServiceReference<FriendlyURLMapper> serviceReference){
      Object value=serviceReference.getProperty("javax.portlet.name");
      List<String> portletNames=new ArrayList<>();
      if (value instanceof String) {
        String portletName=(String)value;
        String rootPortletId=PortletConstants.getRootPortletId(portletName);
        _friendlyUrlMapperPortletNames.add(rootPortletId);
        portletNames.add(rootPortletId);
      }
 else       if (value instanceof String[]) {
        for (        String portletName : (String[])value) {
          String rootPortletId=PortletConstants.getRootPortletId(portletName);
          _friendlyUrlMapperPortletNames.add(rootPortletId);
          portletNames.add(rootPortletId);
        }
      }
      return portletNames;
    }
    @Override public void modifiedService(    ServiceReference<FriendlyURLMapper> serviceReference,    List<String> portletNames){
      removedService(serviceReference,portletNames);
      addingService(serviceReference);
    }
    @Override public void removedService(    ServiceReference<FriendlyURLMapper> serviceReference,    List<String> portletNames){
      for (      String portletId : portletNames) {
        _friendlyUrlMapperPortletNames.remove(portletId);
      }
    }
  }
);
  _serviceTracker.open();
}
