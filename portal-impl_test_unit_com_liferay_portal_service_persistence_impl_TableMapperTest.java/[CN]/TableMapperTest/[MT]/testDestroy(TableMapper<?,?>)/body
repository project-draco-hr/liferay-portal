{
  long companyId=0;
  _tableMapperImpl.getLeftToRightPortalCache(companyId);
  _tableMapperImpl.getRightToLeftPortalCache(companyId);
  Registry registry=RegistryUtil.getRegistry();
  MockMultiVMPool mockMultiVMPool=(MockMultiVMPool)registry.getService(_serviceRegistration.getServiceReference());
  Map<String,PortalCache<?,?>> portalCaches=mockMultiVMPool.getPortalCaches();
  Assert.assertEquals(2,portalCaches.size());
  TableMapper<?,?> originalMapper=tableMapper;
  if (tableMapper instanceof ReverseTableMapper) {
    originalMapper=tableMapper.getReverseTableMapper();
  }
  Map<Long,String> leftToRightPortalCacheNames=ReflectionTestUtil.getFieldValue(originalMapper,"_leftToRightPortalCacheNames");
  Assert.assertEquals(1,leftToRightPortalCacheNames.size());
  Assert.assertEquals(TableMapper.class.getName() + "-" + _TABLE_NAME+ "-LeftToRight-"+ companyId,leftToRightPortalCacheNames.get(companyId));
  Map<Long,String> rightToLeftPortalCacheNames=ReflectionTestUtil.getFieldValue(originalMapper,"_rightToLeftPortalCacheNames");
  Assert.assertEquals(1,rightToLeftPortalCacheNames.size());
  Assert.assertEquals(TableMapper.class.getName() + "-" + _TABLE_NAME+ "-RightToLeft-"+ companyId,rightToLeftPortalCacheNames.get(companyId));
  tableMapper.destroy();
  Assert.assertTrue(leftToRightPortalCacheNames.isEmpty());
  Assert.assertTrue(rightToLeftPortalCacheNames.isEmpty());
  Assert.assertTrue(portalCaches.isEmpty());
}
