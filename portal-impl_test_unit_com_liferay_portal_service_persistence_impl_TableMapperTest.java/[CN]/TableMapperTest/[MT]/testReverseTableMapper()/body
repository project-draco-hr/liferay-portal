{
  Class<?> clazz=TableMapper.class;
  ClassLoader classLoader=clazz.getClassLoader();
  RecordInvocationHandler recordInvocationHandler=new RecordInvocationHandler();
  TableMapper<Left,Right> tableMapper=(TableMapper<Left,Right>)ProxyUtil.newProxyInstance(classLoader,new Class<?>[]{TableMapper.class},recordInvocationHandler);
  ReverseTableMapper<Right,Left> reverseTableMapper=new ReverseTableMapper<>(tableMapper);
  recordInvocationHandler.setTableMapper(reverseTableMapper);
  reverseTableMapper.addTableMapping(0,1,2);
  recordInvocationHandler.assertCall("addTableMapping",0L,2L,1L);
  reverseTableMapper.containsTableMapping(0,1,2);
  recordInvocationHandler.assertCall("containsTableMapping",0L,2L,1L);
  reverseTableMapper.deleteRightPrimaryKeyTableMappings(0,2);
  recordInvocationHandler.assertCall("deleteLeftPrimaryKeyTableMappings",0L,2L);
  reverseTableMapper.deleteLeftPrimaryKeyTableMappings(0,1);
  recordInvocationHandler.assertCall("deleteRightPrimaryKeyTableMappings",0L,1L);
  reverseTableMapper.deleteTableMapping(0,1,2);
  recordInvocationHandler.assertCall("deleteTableMapping",0L,2L,1L);
  reverseTableMapper.getRightBaseModels(0,1,2,3,null);
  recordInvocationHandler.assertCall("getLeftBaseModels",0L,1L,2,3,null);
  reverseTableMapper.getRightPrimaryKeys(0,1);
  recordInvocationHandler.assertCall("getLeftPrimaryKeys",0L,1L);
  reverseTableMapper.getLeftBaseModels(0,2,2,3,null);
  recordInvocationHandler.assertCall("getRightBaseModels",0L,2L,2,3,null);
  reverseTableMapper.getLeftPrimaryKeys(0,2);
  recordInvocationHandler.assertCall("getRightPrimaryKeys",0L,2L);
  Assert.assertSame(tableMapper,reverseTableMapper.getReverseTableMapper());
  reverseTableMapper.matches("left","right");
  recordInvocationHandler.assertCall("matches","right","left");
}
