{
  long companyId=0;
  long leftPrimaryKey=1;
  Assert.assertEquals(0,_tableMapperImpl.deleteLeftPrimaryKeyTableMappings(companyId,leftPrimaryKey));
  long rightPrimaryKey1=2;
  Map<Long,long[]> mappingStore=getMappingStore(companyId);
  mappingStore.put(leftPrimaryKey,new long[]{rightPrimaryKey1});
  Assert.assertEquals(1,_tableMapperImpl.deleteLeftPrimaryKeyTableMappings(companyId,leftPrimaryKey));
  long rightPrimaryKey2=3;
  mappingStore.put(leftPrimaryKey,new long[]{rightPrimaryKey1,rightPrimaryKey2});
  Assert.assertEquals(2,_tableMapperImpl.deleteLeftPrimaryKeyTableMappings(companyId,leftPrimaryKey));
  RecorderModelListener<Left> leftModelListener=new RecorderModelListener<>();
  _leftBasePersistence.registerListener(leftModelListener);
  Assert.assertEquals(0,_tableMapperImpl.deleteLeftPrimaryKeyTableMappings(companyId,leftPrimaryKey));
  leftModelListener.assertOnBeforeRemoveAssociation(false,null,null,null);
  leftModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  _leftBasePersistence.unregisterListener(leftModelListener);
  RecorderModelListener<Right> rightModelListener=new RecorderModelListener<>();
  _rightBasePersistence.registerListener(rightModelListener);
  Assert.assertEquals(0,_tableMapperImpl.deleteLeftPrimaryKeyTableMappings(companyId,leftPrimaryKey));
  rightModelListener.assertOnBeforeRemoveAssociation(false,null,null,null);
  rightModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  _rightBasePersistence.unregisterListener(rightModelListener);
  leftModelListener=new RecorderModelListener<>();
  _leftBasePersistence.registerListener(leftModelListener);
  mappingStore.put(leftPrimaryKey,new long[]{rightPrimaryKey1});
  Assert.assertEquals(1,_tableMapperImpl.deleteLeftPrimaryKeyTableMappings(companyId,leftPrimaryKey));
  leftModelListener.assertOnBeforeRemoveAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey1);
  leftModelListener.assertOnAfterRemoveAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey1);
  _leftBasePersistence.unregisterListener(leftModelListener);
  rightModelListener=new RecorderModelListener<>();
  _rightBasePersistence.registerListener(rightModelListener);
  mappingStore.put(leftPrimaryKey,new long[]{rightPrimaryKey1});
  Assert.assertEquals(1,_tableMapperImpl.deleteLeftPrimaryKeyTableMappings(companyId,leftPrimaryKey));
  rightModelListener.assertOnBeforeRemoveAssociation(true,rightPrimaryKey1,Left.class.getName(),leftPrimaryKey);
  rightModelListener.assertOnAfterRemoveAssociation(true,rightPrimaryKey1,Left.class.getName(),leftPrimaryKey);
  _rightBasePersistence.unregisterListener(rightModelListener);
  leftModelListener=new RecorderModelListener<>();
  _leftBasePersistence.registerListener(leftModelListener);
  rightModelListener=new RecorderModelListener<>();
  _rightBasePersistence.registerListener(rightModelListener);
  mappingStore.put(leftPrimaryKey,new long[]{rightPrimaryKey1});
  MockDeleteLeftPrimaryKeyTableMappingsSqlUpdate mockDeleteLeftPrimaryKeyTableMappingsSqlUpdate=(MockDeleteLeftPrimaryKeyTableMappingsSqlUpdate)_tableMapperImpl.deleteLeftPrimaryKeyTableMappingsSqlUpdate;
  mockDeleteLeftPrimaryKeyTableMappingsSqlUpdate.setDatabaseError(true);
  try {
    _tableMapperImpl.deleteLeftPrimaryKeyTableMappings(companyId,leftPrimaryKey);
    Assert.fail();
  }
 catch (  SystemException se) {
    Throwable cause=se.getCause();
    Assert.assertSame(RuntimeException.class,cause.getClass());
    Assert.assertEquals("Database error",cause.getMessage());
  }
 finally {
    mockDeleteLeftPrimaryKeyTableMappingsSqlUpdate.setDatabaseError(false);
    mappingStore.remove(leftPrimaryKey);
  }
  leftModelListener.assertOnBeforeRemoveAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey1);
  rightModelListener.assertOnBeforeRemoveAssociation(true,rightPrimaryKey1,Left.class.getName(),leftPrimaryKey);
  leftModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
  rightModelListener.assertOnAfterRemoveAssociation(false,null,null,null);
}
