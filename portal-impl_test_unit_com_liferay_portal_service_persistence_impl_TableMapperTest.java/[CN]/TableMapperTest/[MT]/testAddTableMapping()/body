{
  long leftPrimaryKey=1;
  long rightPrimaryKey=2;
  Assert.assertTrue(_tableMapperImpl.addTableMapping(leftPrimaryKey,rightPrimaryKey));
  Assert.assertFalse(_tableMapperImpl.addTableMapping(leftPrimaryKey,rightPrimaryKey));
  PortalCache<Long,long[]> leftToRightPortalCache=_tableMapperImpl.leftToRightPortalCache;
  leftToRightPortalCache.put(leftPrimaryKey,new long[0]);
  try {
    _tableMapperImpl.addTableMapping(leftPrimaryKey,rightPrimaryKey);
    Assert.fail();
  }
 catch (  SystemException se) {
    Throwable cause=se.getCause();
    Assert.assertSame(RuntimeException.class,cause.getClass());
    Assert.assertEquals("Unique key violation for left primary key " + leftPrimaryKey + " and right primary key "+ rightPrimaryKey,cause.getMessage());
  }
  Assert.assertFalse(_tableMapperImpl.addTableMapping(leftPrimaryKey,rightPrimaryKey));
  leftToRightPortalCache.remove(leftPrimaryKey);
  _mappingStore.remove(leftPrimaryKey);
  RecorderModelListener<Left> leftModelListener=new RecorderModelListener<>();
  _leftBasePersistence.registerListener(leftModelListener);
  RecorderModelListener<Right> rightModelListener=new RecorderModelListener<>();
  _rightBasePersistence.registerListener(rightModelListener);
  Assert.assertTrue(_tableMapperImpl.addTableMapping(leftPrimaryKey,rightPrimaryKey));
  leftModelListener.assertOnBeforeAddAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey);
  rightModelListener.assertOnBeforeAddAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey);
  leftModelListener.assertOnAfterAddAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey);
  rightModelListener.assertOnAfterAddAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey);
  _leftBasePersistence.unregisterListener(leftModelListener);
  _rightBasePersistence.unregisterListener(rightModelListener);
  leftToRightPortalCache.put(leftPrimaryKey,new long[0]);
  leftModelListener=new RecorderModelListener<>();
  _leftBasePersistence.registerListener(leftModelListener);
  rightModelListener=new RecorderModelListener<>();
  _rightBasePersistence.registerListener(rightModelListener);
  try {
    _tableMapperImpl.addTableMapping(leftPrimaryKey,rightPrimaryKey);
    Assert.fail();
  }
 catch (  SystemException se) {
    Throwable cause=se.getCause();
    Assert.assertSame(RuntimeException.class,cause.getClass());
    Assert.assertEquals("Unique key violation for left primary key " + leftPrimaryKey + " and right primary key "+ rightPrimaryKey,cause.getMessage());
  }
  leftModelListener.assertOnBeforeAddAssociation(true,leftPrimaryKey,Right.class.getName(),rightPrimaryKey);
  rightModelListener.assertOnBeforeAddAssociation(true,rightPrimaryKey,Left.class.getName(),leftPrimaryKey);
  leftModelListener.assertOnAfterAddAssociation(false,null,null,null);
  rightModelListener.assertOnAfterAddAssociation(false,null,null,null);
}
