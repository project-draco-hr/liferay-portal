{
  long companyId=0;
  long rightPrimaryKey=1;
  List<Left> lefts=_tableMapperImpl.getLeftBaseModels(companyId,rightPrimaryKey,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  Assert.assertSame(Collections.emptyList(),lefts);
  PortalCache<Long,long[]> rightToLeftPortalCache=_tableMapperImpl.getRightToLeftPortalCache(companyId);
  rightToLeftPortalCache.remove(rightPrimaryKey);
  long leftPrimaryKey1=2;
  Map<Long,long[]> mappingStore=getMappingStore(companyId);
  mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  lefts=_tableMapperImpl.getLeftBaseModels(companyId,rightPrimaryKey,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  Assert.assertEquals(1,lefts.size());
  Left left1=lefts.get(0);
  Assert.assertEquals(leftPrimaryKey1,left1.getPrimaryKeyObj());
  rightToLeftPortalCache.remove(rightPrimaryKey);
  long leftPrimaryKey2=3;
  mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  mappingStore.put(leftPrimaryKey2,new long[]{rightPrimaryKey});
  lefts=_tableMapperImpl.getLeftBaseModels(companyId,rightPrimaryKey,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  Assert.assertEquals(2,lefts.size());
  left1=lefts.get(0);
  Left left2=lefts.get(1);
  Assert.assertEquals(leftPrimaryKey1,left1.getPrimaryKeyObj());
  Assert.assertEquals(leftPrimaryKey2,left2.getPrimaryKeyObj());
  rightToLeftPortalCache.remove(rightPrimaryKey);
  mappingStore=getMappingStore(companyId);
  mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  mappingStore.put(leftPrimaryKey2,new long[]{rightPrimaryKey});
  lefts=_tableMapperImpl.getLeftBaseModels(companyId,rightPrimaryKey,QueryUtil.ALL_POS,QueryUtil.ALL_POS,new OrderByComparator<Left>(){
    @Override public int compare(    Left left1,    Left left2){
      Long leftPrimaryKey1=(Long)left1.getPrimaryKeyObj();
      Long leftPrimaryKey2=(Long)left2.getPrimaryKeyObj();
      return leftPrimaryKey2.compareTo(leftPrimaryKey1);
    }
  }
);
  Assert.assertEquals(2,lefts.size());
  left1=lefts.get(0);
  left2=lefts.get(1);
  Assert.assertEquals(leftPrimaryKey2,left1.getPrimaryKeyObj());
  Assert.assertEquals(leftPrimaryKey1,left2.getPrimaryKeyObj());
  rightToLeftPortalCache.remove(rightPrimaryKey);
  long leftPrimaryKey3=4;
  mappingStore.put(leftPrimaryKey1,new long[]{rightPrimaryKey});
  mappingStore.put(leftPrimaryKey2,new long[]{rightPrimaryKey});
  mappingStore.put(leftPrimaryKey3,new long[]{rightPrimaryKey});
  lefts=_tableMapperImpl.getLeftBaseModels(companyId,rightPrimaryKey,1,2,null);
  Assert.assertEquals(1,lefts.size());
  Left left=lefts.get(0);
  Assert.assertEquals(leftPrimaryKey2,left.getPrimaryKeyObj());
  rightToLeftPortalCache.remove(rightPrimaryKey);
  _leftBasePersistence.setNoSuchModelException(true);
  try {
    _tableMapperImpl.getLeftBaseModels(companyId,rightPrimaryKey,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  }
 catch (  SystemException se) {
    Throwable cause=se.getCause();
    Assert.assertSame(NoSuchModelException.class,cause.getClass());
    Assert.assertEquals(String.valueOf(leftPrimaryKey1),cause.getMessage());
  }
 finally {
    _leftBasePersistence.setNoSuchModelException(false);
  }
}
