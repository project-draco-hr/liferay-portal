{
  ScriptBundleProvider scriptBundleProvider=_bundleContext.getService(serviceReference);
  Bundle bundle=scriptBundleProvider.getBundle();
  Dictionary<String,String> headers=bundle.getHeaders();
  if (GetterUtil.getBoolean(headers.get(ScriptingExecutorConstants.LIFERAY_SCRIPTING_EXECUTOR_CLUSTER_MASTER_ONLY)) && !_clusterMasterExecutor.isMaster()) {
    return null;
  }
  String scriptingLanguage=headers.get(ScriptingExecutorConstants.LIFERAY_SCRIPTING_EXECUTOR_SCRIPTING_LANGUAGE);
  if (scriptingLanguage == null) {
    scriptingLanguage=ScriptingExecutorMessagingConstants.SCRIPTING_LANGUAGE_DEFAULT;
  }
  if (!_scriptingLanguages.contains(scriptingLanguage)) {
    if (_log.isWarnEnabled()) {
      _log.warn("No " + scriptingLanguage + " executors available to "+ "process scripts from "+ bundle.getSymbolicName());
    }
    return null;
  }
  Enumeration<URL> enumeration=bundle.findEntries(_SCRIPTS_DIR,"*",true);
  if ((enumeration == null) || !enumeration.hasMoreElements()) {
    if (_log.isDebugEnabled()) {
      _log.debug("No scripts in bundle " + bundle.getSymbolicName());
    }
    return null;
  }
  Message message=new Message();
  BundleWiring bundleWiring=bundle.adapt(BundleWiring.class);
  ClassLoader bundleClassLoader=bundleWiring.getClassLoader();
  message.put(ScriptingExecutorMessagingConstants.MESSAGE_KEY_BUNDLE_CLASS_LOADER,bundleClassLoader);
  message.put(ScriptingExecutorMessagingConstants.MESSAGE_KEY_SCRIPTING_LANGUAGE,scriptingLanguage);
  List<URL> scriptURLs=new ArrayList<>();
  while (enumeration.hasMoreElements()) {
    scriptURLs.add(enumeration.nextElement());
  }
  message.put(ScriptingExecutorMessagingConstants.MESSAGE_KEY_URLS,scriptURLs);
  _singleDestinationMessageSender.send(message);
  return null;
}
