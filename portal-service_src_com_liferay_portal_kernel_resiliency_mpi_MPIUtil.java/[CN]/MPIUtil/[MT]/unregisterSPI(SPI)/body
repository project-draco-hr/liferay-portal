{
  _registerLock.lock();
  try {
    MPI mpi=spi.getMPI();
    if (mpi != _mpiStub) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to unregister SPI instance " + spi + ". It was created by a foreign MPI "+ mpi+ ", not by "+ _mpiStub);
      }
      return false;
    }
    String spiProviderName=spi.getSPIProviderName();
    SPIProvider registeredSPIProvider=_spiProviderMap.get(spiProviderName);
    if (registeredSPIProvider == null) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to unregister SPI instance " + spi + ". No such SPIProvider registered with name "+ spiProviderName);
      }
      return false;
    }
    SPIConfiguration spiConfiguration=spi.getSPIConfiguration();
    String spiId=spiConfiguration.getId();
    SPIKey spiKey=new SPIKey(spiProviderName,spiId);
    boolean result=_spiMap.remove(spiKey,spi);
    if (result) {
      if (_log.isInfoEnabled()) {
        _log.info("Unregistered SPI " + spi + " with key "+ spiKey);
      }
    }
 else     if (_log.isWarnEnabled()) {
      _log.warn("Unable to unregister SPI " + spi + " with key "+ spiKey+ ". It is not registered");
    }
    SPIRuntimeMappingUtil.unregister(spi);
    return result;
  }
 catch (  RemoteException re) {
    throw new RuntimeException(re);
  }
 finally {
    _registerLock.unlock();
  }
}
