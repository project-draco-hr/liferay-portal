{
  if (_log.isDebugEnabled()) {
    _log.debug("Sending file of type " + contentType);
  }
  if (Validator.isNotNull(contentType)) {
    mimeResponse.setContentType(contentType);
  }
  mimeResponse.setProperty(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_PRIVATE_VALUE);
  if (Validator.isNull(fileName)) {
    return;
  }
  String contentDispositionFileName="filename=\"" + fileName + "\"";
  boolean ascii=true;
  for (int i=0; i < fileName.length(); i++) {
    if (!Validator.isAscii(fileName.charAt(i))) {
      ascii=false;
      break;
    }
  }
  try {
    if (!ascii) {
      String encodedFileName=HttpUtil.encodeURL(fileName,true);
      HttpServletRequest request=PortalUtil.getHttpServletRequest(portletRequest);
      if (BrowserSnifferUtil.isIe(request)) {
        contentDispositionFileName="filename=\"" + encodedFileName + "\"";
      }
 else {
        contentDispositionFileName="filename*=UTF-8''" + encodedFileName;
      }
    }
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e);
    }
  }
  if (Validator.isNull(contentDispositionType)) {
    String extension=GetterUtil.getString(FileUtil.getExtension(fileName));
    extension=StringUtil.toLowerCase(extension);
    String[] mimeTypesContentDispositionInline=null;
    try {
      mimeTypesContentDispositionInline=PropsUtil.getArray("mime.types.content.disposition.inline");
    }
 catch (    Exception e) {
      mimeTypesContentDispositionInline=new String[0];
    }
    if (ArrayUtil.contains(mimeTypesContentDispositionInline,extension)) {
      contentDispositionType=HttpHeaders.CONTENT_DISPOSITION_INLINE;
    }
 else {
      contentDispositionType=HttpHeaders.CONTENT_DISPOSITION_ATTACHMENT;
    }
  }
  StringBundler sb=new StringBundler(4);
  sb.append(contentDispositionType);
  sb.append(StringPool.SEMICOLON);
  sb.append(StringPool.SPACE);
  sb.append(contentDispositionFileName);
  mimeResponse.setProperty(HttpHeaders.CONTENT_DISPOSITION,sb.toString());
}
