{
  String basedir="./";
  String copyright=_getCopyright();
  String oldCopyright=_getOldCopyright();
  boolean portalJavaFiles=true;
  Collection<String> fileNames=null;
  if (_fileUtil.exists(basedir + "portal-impl")) {
    fileNames=_getPortalJavaFiles();
  }
 else {
    portalJavaFiles=false;
    fileNames=_getPluginJavaFiles();
  }
  for (  String fileName : fileNames) {
    File file=new File(fileName);
    String content=_fileUtil.read(file);
    if (_isGenerated(content)) {
      continue;
    }
    String className=file.getName();
    className=className.substring(0,className.length() - 5);
    String packagePath=fileName;
    int packagePathX=packagePath.indexOf(File.separator + "src" + File.separator);
    int packagePathY=packagePath.lastIndexOf(File.separator);
    if ((packagePathX + 5) >= packagePathY) {
      packagePath=StringPool.BLANK;
    }
 else {
      packagePath=packagePath.substring(packagePathX + 5,packagePathY);
    }
    packagePath=StringUtil.replace(packagePath,File.separator,StringPool.PERIOD);
    if (packagePath.endsWith(".model")) {
      if (content.contains("extends " + className + "Model")) {
        continue;
      }
    }
    String oldContent=content;
    String newContent=StringPool.BLANK;
    for (; ; ) {
      newContent=_formatJavaContent(fileName,oldContent);
      if (oldContent.equals(newContent)) {
        break;
      }
      oldContent=newContent;
    }
    if (newContent.contains("$\n */")) {
      _sourceFormatterHelper.printError(fileName,"*: " + fileName);
      newContent=StringUtil.replace(newContent,"$\n */","$\n *\n */");
    }
    if ((oldCopyright != null) && newContent.contains(oldCopyright)) {
      newContent=StringUtil.replace(newContent,oldCopyright,copyright);
      _sourceFormatterHelper.printError(fileName,"old (c): " + fileName);
    }
    if (!newContent.contains(copyright)) {
      String customCopyright=_getCustomCopyright(file);
      if (Validator.isNull(customCopyright) || !newContent.contains(customCopyright)) {
        _sourceFormatterHelper.printError(fileName,"(c): " + fileName);
      }
    }
    if (newContent.contains(className + ".java.html")) {
      _sourceFormatterHelper.printError(fileName,"Java2HTML: " + fileName);
    }
    if (newContent.contains(" * @author Raymond Aug") && !newContent.contains(" * @author Raymond Aug\u00e9")) {
      newContent=newContent.replaceFirst("Raymond Aug.++","Raymond Aug\u00e9");
      _sourceFormatterHelper.printError(fileName,"UTF-8: " + fileName);
    }
    newContent=StringUtil.replace(newContent,new String[]{"com.liferay.portal.PortalException","com.liferay.portal.SystemException","com.liferay.util.LocalizationUtil"},new String[]{"com.liferay.portal.kernel.exception.PortalException","com.liferay.portal.kernel.exception.SystemException","com.liferay.portal.kernel.util.LocalizationUtil"});
    newContent=stripJavaImports(newContent,packagePath,className);
    newContent=StringUtil.replace(newContent,new String[]{";\n/**","\t/*\n\t *","else{","if(","for(","while(","List <","){\n","]{\n","\n\n\n"},new String[]{";\n\n/**","\t/**\n\t *","else {","if (","for (","while (","List<",") {\n","] {\n","\n\n"});
    if (newContent.contains("*/\npackage ")) {
      _sourceFormatterHelper.printError(fileName,"package: " + fileName);
    }
    if (!newContent.endsWith("\n\n}") && !newContent.endsWith("{\n}")) {
      _sourceFormatterHelper.printError(fileName,"}: " + fileName);
    }
    if (portalJavaFiles && className.endsWith("ServiceImpl") && newContent.contains("ServiceUtil.")) {
      _sourceFormatterHelper.printError(fileName,"ServiceUtil: " + fileName);
    }
    if ((newContent != null) && !content.equals(newContent)) {
      _fileUtil.write(file,newContent);
      _sourceFormatterHelper.printError(fileName,file);
    }
  }
}
