{
  StringBundler sb=new StringBundler();
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content));
  int index=0;
  int lineCount=0;
  String line=null;
  String previousLine=StringPool.BLANK;
  int lineToSkipIfEmpty=0;
  Set<JavaTerm> javaTerms=new TreeSet<JavaTerm>(new JavaTermComparator());
  JavaTerm javaTerm=null;
  String javaTermName=null;
  int javaTermLineCount=-1;
  int javaTermStartPosition=-1;
  int javaTermType=-1;
  boolean readParameterTypes=false;
  List<String> parameterTypes=new ArrayList<String>();
  int lastCommentOrAnnotationPos=-1;
  String ifClause=StringPool.BLANK;
  String packageName=StringPool.BLANK;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    lineCount++;
    line=_trimLine(line,false);
    if (line.startsWith("package ")) {
      packageName=line.substring(8,line.length() - 1);
    }
    if (line.startsWith("import ")) {
      if (line.endsWith(".*;")) {
        _processErrorMessage(fileName,"import: " + fileName + " "+ lineCount);
      }
      int pos=line.lastIndexOf(StringPool.PERIOD);
      if (pos != -1) {
        String importPackageName=line.substring(7,pos);
        if (importPackageName.equals(packageName)) {
          continue;
        }
      }
    }
    if (line.contains(StringPool.TAB + "for (") && line.contains(":") && !line.contains(" :")) {
      line=StringUtil.replace(line,":"," :");
    }
    line=_replacePrimitiveWrapperInstantiation(fileName,line,lineCount);
    String trimmedLine=StringUtil.trimLeading(line);
    if (trimmedLine.startsWith("* @deprecated") && !trimmedLine.startsWith("* @deprecated As of")) {
      line=StringUtil.replace(line,"* @deprecated","* @deprecated As of 6.2.0");
    }
    if (trimmedLine.startsWith(StringPool.EQUAL)) {
      _processErrorMessage(fileName,"equal: " + fileName + " "+ lineCount);
    }
    if (!trimmedLine.equals("{") && line.endsWith("{") && !line.endsWith(" {")) {
      line=StringUtil.replaceLast(line,"{"," {");
    }
    line=_sortExceptions(line);
    if (trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")|| Validator.isNotNull(ifClause)) {
      ifClause=ifClause + line + StringPool.NEW_LINE;
      if (line.endsWith(") {")) {
        String newIfClause=_checkIfClause(ifClause,fileName,lineCount);
        if (!ifClause.equals(newIfClause)) {
          return StringUtil.replace(content,ifClause,newIfClause);
        }
        ifClause=StringPool.BLANK;
      }
 else       if (line.endsWith(StringPool.SEMICOLON)) {
        ifClause=StringPool.BLANK;
      }
    }
    String excluded=null;
    if (line.startsWith(StringPool.TAB + "private ") || line.startsWith(StringPool.TAB + "protected ") || line.startsWith(StringPool.TAB + "public ")) {
      Tuple tuple=_getJavaTermTuple(line);
      if (tuple != null) {
        int javaTermEndPosition=0;
        if (lastCommentOrAnnotationPos == -1) {
          javaTermEndPosition=index;
        }
 else {
          javaTermEndPosition=lastCommentOrAnnotationPos;
        }
        if ((javaTermStartPosition != -1) && (javaTermEndPosition < content.length())) {
          String javaTermContent=content.substring(javaTermStartPosition,javaTermEndPosition);
          if (Validator.isNotNull(javaTermName)) {
            javaTerm=new JavaTerm(javaTermName,javaTermType,parameterTypes,javaTermContent,javaTermLineCount);
            javaTerms.add(javaTerm);
          }
        }
        javaTermLineCount=lineCount;
        javaTermName=(String)tuple.getObject(0);
        javaTermStartPosition=javaTermEndPosition;
        javaTermType=(Integer)tuple.getObject(1);
        if (Validator.isNotNull(javaTermName)) {
          if (_isInJavaTermTypeGroup(javaTermType,_TYPE_CONSTRUCTOR) || _isInJavaTermTypeGroup(javaTermType,_TYPE_METHOD)) {
            readParameterTypes=true;
            parameterTypes=new ArrayList<String>();
          }
        }
      }
      lastCommentOrAnnotationPos=-1;
    }
 else     if (_hasAnnotationOrJavadoc(line)) {
      if (lastCommentOrAnnotationPos == -1) {
        lastCommentOrAnnotationPos=index;
      }
    }
    if (readParameterTypes) {
      parameterTypes=_addParameterTypes(trimmedLine,parameterTypes);
      if (trimmedLine.contains(StringPool.CLOSE_PARENTHESIS)) {
        readParameterTypes=false;
      }
    }
    if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
      while (trimmedLine.contains(StringPool.TAB)) {
        line=StringUtil.replaceLast(line,StringPool.TAB,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.TAB,StringPool.SPACE);
      }
      if (line.contains(StringPool.TAB + StringPool.SPACE) && !previousLine.endsWith("&&") && !previousLine.endsWith("||")&& !previousLine.contains(StringPool.TAB + "((")&& !previousLine.contains(StringPool.TAB + StringPool.SPACE)&& !previousLine.contains(StringPool.TAB + "implements ")&& !previousLine.contains(StringPool.TAB + "throws ")) {
        line=StringUtil.replace(line,StringPool.TAB + StringPool.SPACE,StringPool.TAB);
      }
      while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.contains("Test")) {
        line=StringUtil.replaceLast(line,StringPool.DOUBLE_SPACE,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.DOUBLE_SPACE,StringPool.SPACE);
      }
      if (!line.contains(StringPool.QUOTE)) {
        int pos=line.indexOf(") ");
        if (pos != -1) {
          String linePart=line.substring(pos + 2);
          if (Character.isLetter(linePart.charAt(0)) && !linePart.startsWith("default") && !linePart.startsWith("instanceof")&& !linePart.startsWith("throws")) {
            line=StringUtil.replaceLast(line,StringPool.SPACE + linePart,linePart);
          }
        }
        if ((trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public ")) && line.contains(" (")) {
          line=StringUtil.replace(line," (","(");
        }
        if (line.contains(" [")) {
          line=StringUtil.replace(line," [","[");
        }
        for (int x=-1; ; ) {
          int posComma=line.indexOf(StringPool.COMMA,x + 1);
          int posSemicolon=line.indexOf(StringPool.SEMICOLON,x + 1);
          if ((posComma == -1) && (posSemicolon == -1)) {
            break;
          }
          x=Math.min(posComma,posSemicolon);
          if (x == -1) {
            x=Math.max(posComma,posSemicolon);
          }
          if (line.length() > (x + 1)) {
            char nextChar=line.charAt(x + 1);
            if ((nextChar != CharPool.APOSTROPHE) && (nextChar != CharPool.CLOSE_PARENTHESIS) && (nextChar != CharPool.SPACE)&& (nextChar != CharPool.STAR)) {
              line=StringUtil.insert(line,StringPool.SPACE,x + 1);
            }
          }
          if (x > 0) {
            char previousChar=line.charAt(x - 1);
            if (previousChar == CharPool.SPACE) {
              line=line.substring(0,x - 1).concat(line.substring(x));
            }
          }
        }
      }
    }
    if ((line.contains(" && ") || line.contains(" || ")) && line.endsWith(StringPool.OPEN_PARENTHESIS)) {
      _processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
    }
    if (trimmedLine.endsWith(StringPool.PLUS) && !trimmedLine.startsWith(StringPool.OPEN_PARENTHESIS)) {
      String strippedQuotesLine=_stripQuotes(trimmedLine,StringPool.QUOTE);
      int closeParenthesisCount=StringUtil.count(strippedQuotesLine,StringPool.CLOSE_PARENTHESIS);
      int openParenthesisCount=StringUtil.count(strippedQuotesLine,StringPool.OPEN_PARENTHESIS);
      if (openParenthesisCount > closeParenthesisCount) {
        _processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
      }
    }
    if (line.contains(StringPool.COMMA) && !line.contains(StringPool.CLOSE_PARENTHESIS) && !line.contains(StringPool.GREATER_THAN)&& !line.contains(StringPool.QUOTE)&& line.endsWith(StringPool.OPEN_PARENTHESIS)) {
      _processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
    }
    if (line.endsWith(" +") || line.endsWith(" -") || line.endsWith(" *")|| line.endsWith(" /")) {
      int x=line.indexOf(" = ");
      if (x != -1) {
        int y=line.indexOf(StringPool.QUOTE);
        if ((y == -1) || (x < y)) {
          _processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
        }
      }
    }
    if (line.endsWith(" throws") || (previousLine.endsWith(StringPool.OPEN_PARENTHESIS) && line.contains(" throws ") && line.endsWith(StringPool.OPEN_CURLY_BRACE))) {
      _processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
    }
    if (line.contains("    ") && !line.matches("\\s*\\*.*")) {
      if (!fileName.endsWith("StringPool.java")) {
        _processErrorMessage(fileName,"tab: " + fileName + " "+ lineCount);
      }
    }
    if (line.contains("  {") && !line.matches("\\s*\\*.*")) {
      _processErrorMessage(fileName,"{:" + fileName + " "+ lineCount);
    }
    excluded=null;
    if (_lineLengthExclusions != null) {
      excluded=_lineLengthExclusions.getProperty(fileName + StringPool.AT + lineCount);
      if (excluded == null) {
        excluded=_lineLengthExclusions.getProperty(fileName);
      }
    }
    Tuple combinedLines=null;
    int lineLength=_getLineLength(line);
    if ((excluded == null) && !line.startsWith("import ") && !line.startsWith("package ")&& !line.matches("\\s*\\*.*")) {
      if (fileName.endsWith("Table.java") && line.contains("String TABLE_SQL_CREATE = ")) {
      }
 else       if (fileName.endsWith("Table.java") && line.contains("String TABLE_SQL_DROP = ")) {
      }
 else       if (fileName.endsWith("Table.java") && line.contains(" index IX_")) {
      }
 else       if (lineLength > 80) {
        _processErrorMessage(fileName,"> 80: " + fileName + " "+ lineCount);
      }
 else {
        int lineLeadingTabCount=_getLeadingTabCount(line);
        int previousLineLeadingTabCount=_getLeadingTabCount(previousLine);
        if (!trimmedLine.startsWith("//")) {
          if (previousLine.endsWith(StringPool.COMMA) && previousLine.contains(StringPool.OPEN_PARENTHESIS) && !previousLine.contains("for (")&& (lineLeadingTabCount > previousLineLeadingTabCount)) {
            _processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
          }
          if (Validator.isNotNull(trimmedLine)) {
            if (((previousLine.endsWith(StringPool.COLON) && previousLine.contains(StringPool.TAB + "for ")) || (previousLine.endsWith(StringPool.OPEN_PARENTHESIS) && previousLine.contains(StringPool.TAB + "if "))) && ((previousLineLeadingTabCount + 2) != lineLeadingTabCount)) {
              _processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
            }
            if (previousLine.endsWith(StringPool.OPEN_CURLY_BRACE) && !trimmedLine.startsWith(StringPool.CLOSE_CURLY_BRACE) && ((previousLineLeadingTabCount + 1) != lineLeadingTabCount)) {
              _processErrorMessage(fileName,"tab: " + fileName + " "+ lineCount);
            }
          }
          if (previousLine.endsWith(StringPool.PERIOD)) {
            int x=trimmedLine.indexOf(StringPool.OPEN_PARENTHESIS);
            if ((x != -1) && ((_getLineLength(previousLine) + x) < 80) && (trimmedLine.endsWith(StringPool.OPEN_PARENTHESIS) || (trimmedLine.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS))) {
              _processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
            }
          }
          if (trimmedLine.startsWith("throws ") && (lineLeadingTabCount == previousLineLeadingTabCount)) {
            _processErrorMessage(fileName,"tab: " + fileName + " "+ lineCount);
          }
          if ((previousLine.contains(" class ") || previousLine.contains(" enum ")) && previousLine.endsWith(StringPool.OPEN_CURLY_BRACE) && Validator.isNotNull(line)&& !trimmedLine.startsWith(StringPool.CLOSE_CURLY_BRACE)) {
            _processErrorMessage(fileName,"new line: " + fileName + " "+ lineCount);
          }
        }
        combinedLines=_getCombinedLines(trimmedLine,previousLine,lineLeadingTabCount,previousLineLeadingTabCount);
      }
    }
    if (combinedLines != null) {
      previousLine=(String)combinedLines.getObject(0);
      if (combinedLines.getSize() > 1) {
        String linePart=(String)combinedLines.getObject(1);
        boolean addToPreviousLine=(Boolean)combinedLines.getObject(2);
        if (addToPreviousLine) {
          previousLine=previousLine + linePart;
          line=StringUtil.replaceFirst(line,linePart,StringPool.BLANK);
        }
 else {
          if (((linePart.length() + lineLength) <= 80) && (line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON))) {
            previousLine=StringUtil.replaceLast(previousLine,StringUtil.trim(linePart),StringPool.BLANK);
            line=StringUtil.replaceLast(line,StringPool.TAB,StringPool.TAB + linePart);
          }
 else {
            _processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
          }
        }
        sb.append(previousLine);
        sb.append("\n");
        previousLine=line;
      }
 else       if (line.endsWith(StringPool.OPEN_CURLY_BRACE) && !previousLine.contains(" class ")) {
        lineToSkipIfEmpty=lineCount + 1;
      }
    }
 else {
      if ((lineCount > 1) && (Validator.isNotNull(previousLine) || (lineToSkipIfEmpty != (lineCount - 1)))) {
        sb.append(previousLine);
        if (Validator.isNotNull(previousLine) && Validator.isNotNull(trimmedLine) && !previousLine.contains("/*")&& !previousLine.endsWith("*/")) {
          String trimmedPreviousLine=StringUtil.trimLeading(previousLine);
          if ((trimmedPreviousLine.startsWith("// ") && !trimmedLine.startsWith("// ")) || (!trimmedPreviousLine.startsWith("// ") && trimmedLine.startsWith("// "))) {
            sb.append("\n");
          }
 else           if (!trimmedPreviousLine.endsWith(StringPool.OPEN_CURLY_BRACE) && !trimmedPreviousLine.endsWith(StringPool.COLON) && (trimmedLine.startsWith("for (") || trimmedLine.startsWith("if ("))) {
            sb.append("\n");
          }
 else           if (previousLine.endsWith(StringPool.TAB + StringPool.CLOSE_CURLY_BRACE) && !trimmedLine.startsWith(StringPool.CLOSE_CURLY_BRACE) && !trimmedLine.startsWith(StringPool.CLOSE_PARENTHESIS)&& !trimmedLine.startsWith(StringPool.DOUBLE_SLASH)&& !trimmedLine.startsWith("catch ")&& !trimmedLine.startsWith("else ")&& !trimmedLine.startsWith("finally ")&& !trimmedLine.startsWith("while ")) {
            sb.append("\n");
          }
        }
        sb.append("\n");
      }
      previousLine=line;
    }
    index=index + line.length() + 1;
  }
  sb.append(previousLine);
  unsyncBufferedReader.close();
  String newContent=sb.toString();
  if (newContent.endsWith("\n")) {
    newContent=newContent.substring(0,newContent.length() - 1);
  }
  if (content.equals(newContent)) {
    if (javaTermStartPosition != -1) {
      int javaTermEndPosition=content.length() - 2;
      String javaTermContent=content.substring(javaTermStartPosition,javaTermEndPosition);
      javaTerm=new JavaTerm(javaTermName,javaTermType,parameterTypes,javaTermContent,javaTermLineCount);
      javaTerms.add(javaTerm);
    }
    newContent=_sortJavaTerms(fileName,content,javaTerms);
  }
  return newContent;
}
