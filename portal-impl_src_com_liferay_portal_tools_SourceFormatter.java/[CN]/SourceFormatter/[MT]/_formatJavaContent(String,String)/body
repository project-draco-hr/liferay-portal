{
  boolean longLogFactoryUtil=false;
  StringBundler sb=new StringBundler();
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content));
  int lineCount=0;
  String line=null;
  String previousLine=StringPool.BLANK;
  int lineToSkipIfEmpty=0;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    lineCount++;
    if (line.trim().length() == 0) {
      line=StringPool.BLANK;
    }
    line=StringUtil.trimTrailing(line);
    line=StringUtil.replace(line,new String[]{"* Copyright (c) 2000-2010 Liferay, Inc."},new String[]{"* Copyright (c) 2000-2011 Liferay, Inc."});
    line=_replacePrimitiveWrapperInstantiation(fileName,line,lineCount);
    String trimmedLine=StringUtil.trimLeading(line);
    if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
      while (trimmedLine.contains(StringPool.TAB)) {
        line=StringUtil.replaceLast(line,StringPool.TAB,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.TAB,StringPool.SPACE);
      }
      while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.contains("Test")) {
        line=StringUtil.replaceLast(line,StringPool.DOUBLE_SPACE,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.DOUBLE_SPACE,StringPool.SPACE);
      }
      if (!line.contains(StringPool.QUOTE)) {
        if ((trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public ")) && line.contains(" (")) {
          line=StringUtil.replace(line," (","(");
        }
        if (line.contains(" [")) {
          line=StringUtil.replace(line," [","[");
        }
        for (int x=-1; ; ) {
          x=line.indexOf(StringPool.COMMA,x + 1);
          if (x == -1) {
            break;
          }
          if (line.length() > (x + 1)) {
            char nextChar=line.charAt(x + 1);
            if ((nextChar != CharPool.SPACE) && (nextChar != CharPool.APOSTROPHE)) {
              line=StringUtil.insert(line,StringPool.SPACE,x + 1);
            }
          }
          if (x > 0) {
            char previousChar=line.charAt(x - 1);
            if (previousChar == CharPool.SPACE) {
              line=line.substring(0,x - 1).concat(line.substring(x));
            }
          }
        }
      }
    }
    if (line.contains("    ") && !line.matches("\\s*\\*.*")) {
      if (!fileName.endsWith("StringPool.java")) {
        _sourceFormatterHelper.printError(fileName,"tab: " + fileName + " "+ lineCount);
      }
    }
    if (line.contains("  {") && !line.matches("\\s*\\*.*")) {
      _sourceFormatterHelper.printError(fileName,"{:" + fileName + " "+ lineCount);
    }
    if (line.endsWith("private static Log _log =")) {
      longLogFactoryUtil=true;
    }
    String excluded=_exclusionsProperties.getProperty(StringUtil.replace(fileName,"\\","/") + StringPool.AT + lineCount);
    if (excluded == null) {
      excluded=_exclusionsProperties.getProperty(StringUtil.replace(fileName,"\\","/"));
    }
    String combinedLines=null;
    if ((excluded == null) && !line.startsWith("import ") && !line.startsWith("package ")&& !line.matches("\\s*\\*.*")) {
      if (fileName.endsWith("Table.java") && line.contains("String TABLE_SQL_CREATE = ")) {
      }
 else       if (fileName.endsWith("Table.java") && line.contains("String TABLE_SQL_DROP = ")) {
      }
 else       if (fileName.endsWith("Table.java") && line.contains(" index IX_")) {
      }
 else {
        if (_getLineLength(line) > 80) {
          _sourceFormatterHelper.printError(fileName,"> 80: " + fileName + " "+ lineCount);
        }
 else {
          combinedLines=_getCombinedLines(trimmedLine,previousLine);
        }
      }
    }
    if (Validator.isNotNull(combinedLines)) {
      previousLine=combinedLines;
      if (line.endsWith(StringPool.OPEN_CURLY_BRACE)) {
        lineToSkipIfEmpty=lineCount + 1;
      }
    }
 else {
      if ((lineCount > 1) && (Validator.isNotNull(previousLine) || (lineToSkipIfEmpty != lineCount - 1))) {
        sb.append(previousLine);
        sb.append("\n");
      }
      previousLine=line;
    }
  }
  sb.append(previousLine);
  unsyncBufferedReader.close();
  String newContent=sb.toString();
  if (newContent.endsWith("\n")) {
    newContent=newContent.substring(0,newContent.length() - 1);
  }
  if (longLogFactoryUtil) {
    newContent=StringUtil.replace(newContent,"private static Log _log =\n\t\tLogFactoryUtil.getLog(","private static Log _log = LogFactoryUtil.getLog(\n\t\t");
  }
  return newContent;
}
