{
  StringBundler sb=new StringBundler();
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content));
  int lineCount=0;
  String line=null;
  String previousLine=StringPool.BLANK;
  int lineToSkipIfEmpty=0;
  String javaTermName=null;
  int javaTermType=0;
  String previousJavaTermName=null;
  int previousJavaTermType=0;
  List<String> methodParameterTypes=new ArrayList<String>();
  List<String> previousMethodParameterTypes=null;
  boolean readMethodParameterTypes=false;
  boolean hasSameMethodName=false;
  String ifClause=StringPool.BLANK;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    lineCount++;
    if (line.trim().length() == 0) {
      line=StringPool.BLANK;
    }
    line=StringUtil.trimTrailing(line);
    line=StringUtil.replace(line,new String[]{"* Copyright (c) 2000-2011 Liferay, Inc."},new String[]{"* Copyright (c) 2000-2012 Liferay, Inc."});
    if (line.startsWith(StringPool.SPACE) && !line.startsWith(" *")) {
      if (!line.startsWith(StringPool.FOUR_SPACES)) {
        while (line.startsWith(StringPool.SPACE)) {
          line=StringUtil.replaceFirst(line,StringPool.SPACE,StringPool.BLANK);
        }
      }
 else {
        int pos=0;
        String temp=line;
        while (temp.startsWith(StringPool.FOUR_SPACES)) {
          line=StringUtil.replaceFirst(line,StringPool.FOUR_SPACES,StringPool.TAB);
          pos++;
          temp=line.substring(pos);
        }
      }
    }
    if (line.contains(StringPool.TAB + "for (") && line.contains(":") && !line.contains(" :")) {
      line=StringUtil.replace(line,":"," :");
    }
    line=_replacePrimitiveWrapperInstantiation(fileName,line,lineCount);
    String trimmedLine=StringUtil.trimLeading(line);
    if (trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")|| Validator.isNotNull(ifClause)) {
      if (Validator.isNull(ifClause) || ifClause.endsWith(StringPool.OPEN_PARENTHESIS)) {
        ifClause=ifClause + trimmedLine;
      }
 else {
        ifClause=ifClause + StringPool.SPACE + trimmedLine;
      }
      if (ifClause.endsWith(") {")) {
        _checkIfClause(ifClause,fileName,lineCount);
        ifClause=StringPool.BLANK;
      }
    }
    String excluded=_javaTermAlphabetizeExclusionsProperties.getProperty(StringUtil.replace(fileName,"\\","/") + StringPool.AT + lineCount);
    if (excluded == null) {
      excluded=_javaTermAlphabetizeExclusionsProperties.getProperty(StringUtil.replace(fileName,"\\","/"));
    }
    if (line.startsWith(StringPool.TAB + "private ") || line.startsWith(StringPool.TAB + "protected ") || line.startsWith(StringPool.TAB + "public ")) {
      hasSameMethodName=false;
      Tuple tuple=_getJavaTermTuple(line);
      if (tuple != null) {
        javaTermName=(String)tuple.getObject(0);
        if (Validator.isNotNull(javaTermName)) {
          javaTermType=(Integer)tuple.getObject(1);
          boolean isMethod=_isInJavaTermTypeGroup(javaTermType,_TYPE_METHOD);
          if (isMethod) {
            readMethodParameterTypes=true;
          }
          if (_isInJavaTermTypeGroup(javaTermType,_TYPE_VARIABLE_NOT_STATIC)) {
            char firstChar=javaTermName.charAt(0);
            if (firstChar == CharPool.UNDERLINE) {
              firstChar=javaTermName.charAt(1);
            }
            if (Character.isUpperCase(firstChar)) {
              _sourceFormatterHelper.printError(fileName,"final: " + fileName + " "+ lineCount);
            }
          }
          if (Validator.isNotNull(previousJavaTermName) && (excluded == null)) {
            if (previousJavaTermType > javaTermType) {
              _sourceFormatterHelper.printError(fileName,"order: " + fileName + " "+ lineCount);
            }
 else             if (previousJavaTermType == javaTermType) {
              if (isMethod && previousJavaTermName.equals(javaTermName)) {
                hasSameMethodName=true;
              }
 else {
                _compareJavaTermNames(fileName,previousJavaTermName,javaTermName,lineCount);
              }
            }
          }
          previousJavaTermName=javaTermName;
          previousJavaTermType=javaTermType;
        }
      }
    }
    if (readMethodParameterTypes) {
      methodParameterTypes=_addMethodParameterTypes(trimmedLine,methodParameterTypes);
      if (trimmedLine.contains(StringPool.CLOSE_PARENTHESIS)) {
        if (hasSameMethodName) {
          _compareMethodParameterTypes(fileName,previousMethodParameterTypes,methodParameterTypes,lineCount);
        }
        readMethodParameterTypes=false;
        previousMethodParameterTypes=ListUtil.copy(methodParameterTypes);
        methodParameterTypes.clear();
      }
    }
    if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
      while (trimmedLine.contains(StringPool.TAB)) {
        line=StringUtil.replaceLast(line,StringPool.TAB,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.TAB,StringPool.SPACE);
      }
      while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.contains("Test")) {
        line=StringUtil.replaceLast(line,StringPool.DOUBLE_SPACE,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.DOUBLE_SPACE,StringPool.SPACE);
      }
      if (!line.contains(StringPool.QUOTE)) {
        if ((trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public ")) && line.contains(" (")) {
          line=StringUtil.replace(line," (","(");
        }
        if (line.contains(" [")) {
          line=StringUtil.replace(line," [","[");
        }
        for (int x=-1; ; ) {
          x=line.indexOf(StringPool.COMMA,x + 1);
          if (x == -1) {
            break;
          }
          if (line.length() > (x + 1)) {
            char nextChar=line.charAt(x + 1);
            if ((nextChar != CharPool.SPACE) && (nextChar != CharPool.APOSTROPHE)) {
              line=StringUtil.insert(line,StringPool.SPACE,x + 1);
            }
          }
          if (x > 0) {
            char previousChar=line.charAt(x - 1);
            if (previousChar == CharPool.SPACE) {
              line=line.substring(0,x - 1).concat(line.substring(x));
            }
          }
        }
      }
    }
    if (line.contains("    ") && !line.matches("\\s*\\*.*")) {
      if (!fileName.endsWith("StringPool.java")) {
        _sourceFormatterHelper.printError(fileName,"tab: " + fileName + " "+ lineCount);
      }
    }
    if (line.contains("  {") && !line.matches("\\s*\\*.*")) {
      _sourceFormatterHelper.printError(fileName,"{:" + fileName + " "+ lineCount);
    }
    excluded=_lineLengthExclusionsProperties.getProperty(StringUtil.replace(fileName,"\\","/") + StringPool.AT + lineCount);
    if (excluded == null) {
      excluded=_lineLengthExclusionsProperties.getProperty(StringUtil.replace(fileName,"\\","/"));
    }
    String[] combinedLines=null;
    if ((excluded == null) && !line.startsWith("import ") && !line.startsWith("package ")&& !line.matches("\\s*\\*.*")) {
      if (fileName.endsWith("Table.java") && line.contains("String TABLE_SQL_CREATE = ")) {
      }
 else       if (fileName.endsWith("Table.java") && line.contains("String TABLE_SQL_DROP = ")) {
      }
 else       if (fileName.endsWith("Table.java") && line.contains(" index IX_")) {
      }
 else {
        if (_getLineLength(line) > 80) {
          _sourceFormatterHelper.printError(fileName,"> 80: " + fileName + " "+ lineCount);
        }
 else {
          int lineTabCount=StringUtil.count(line,StringPool.TAB);
          int previousLineTabCount=StringUtil.count(previousLine,StringPool.TAB);
          if (previousLine.endsWith(StringPool.COMMA) && previousLine.contains(StringPool.OPEN_PARENTHESIS) && !previousLine.contains("for (")&& (lineTabCount > previousLineTabCount)) {
            _sourceFormatterHelper.printError(fileName,"line break: " + fileName + " "+ lineCount);
          }
          combinedLines=_getCombinedLines(trimmedLine,previousLine,lineTabCount,previousLineTabCount);
        }
      }
    }
    if (Validator.isNotNull(combinedLines)) {
      previousLine=combinedLines[0];
      if (combinedLines.length > 1) {
        String addedToPreviousLine=combinedLines[1];
        if (Validator.isNotNull(addedToPreviousLine)) {
          sb.append(previousLine);
          sb.append("\n");
          previousLine=StringUtil.replaceFirst(line,addedToPreviousLine,StringPool.BLANK);
        }
      }
 else       if (line.endsWith(StringPool.OPEN_CURLY_BRACE)) {
        lineToSkipIfEmpty=lineCount + 1;
      }
    }
 else {
      if ((lineCount > 1) && (Validator.isNotNull(previousLine) || (lineToSkipIfEmpty != (lineCount - 1)))) {
        sb.append(previousLine);
        sb.append("\n");
      }
      previousLine=line;
    }
  }
  sb.append(previousLine);
  unsyncBufferedReader.close();
  String newContent=sb.toString();
  if (newContent.endsWith("\n")) {
    newContent=newContent.substring(0,newContent.length() - 1);
  }
  return newContent;
}
