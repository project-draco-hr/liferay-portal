{
  if (ifClause.contains("!(") || ifClause.contains(StringPool.TAB + "//")) {
    return;
  }
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(ifClause));
  String line=null;
  boolean previousLineEndsCriterium=false;
  int previousLineLeadingWhiteSpace=0;
  int closeParenthesesCount=0;
  int openParenthesesCount=0;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    line=StringUtil.replace(line,StringPool.TAB,StringPool.FOUR_SPACES);
    line=_stripQuotes(line,StringPool.QUOTE);
    line=_stripQuotes(line,StringPool.APOSTROPHE);
    if (previousLineLeadingWhiteSpace == 0) {
      previousLineLeadingWhiteSpace=line.indexOf(StringPool.OPEN_PARENTHESIS);
    }
 else     if (previousLineEndsCriterium) {
      int expectedLeadingWhiteSpace=previousLineLeadingWhiteSpace + openParenthesesCount - closeParenthesesCount;
      int leadingWhiteSpace=line.length() - StringUtil.trimLeading(line).length();
      if (leadingWhiteSpace > expectedLeadingWhiteSpace) {
        _processErrorMessage(fileName,"redundant whitespace: " + fileName + " "+ lineCount);
      }
 else       if (leadingWhiteSpace < expectedLeadingWhiteSpace) {
        _processErrorMessage(fileName,"missing whitespace: " + fileName + " "+ lineCount);
      }
      previousLineLeadingWhiteSpace=leadingWhiteSpace;
    }
    if (line.endsWith(") {")) {
      return;
    }
    if (previousLineEndsCriterium) {
      closeParenthesesCount=0;
      openParenthesesCount=0;
    }
    closeParenthesesCount+=StringUtil.count(line,StringPool.CLOSE_PARENTHESIS);
    openParenthesesCount+=StringUtil.count(line,StringPool.OPEN_PARENTHESIS);
    previousLineEndsCriterium=line.endsWith("||") || line.endsWith("&&");
  }
}
