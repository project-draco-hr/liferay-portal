{
  StringBundler sb=new StringBundler();
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content));
  int lineCount=0;
  String line=null;
  String previousArgument=null;
  boolean readArguments=false;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    lineCount++;
    if (line.trim().length() == 0) {
      line=StringPool.BLANK;
    }
    line=StringUtil.trimTrailing(line);
    if (line.contains("<aui:button ") && line.contains("type=\"button\"")) {
      _sourceFormatterHelper.printError(fileName,"aui:button " + fileName + " "+ lineCount);
    }
    String trimmedLine=StringUtil.trimLeading(line);
    if (readArguments) {
      if (!trimmedLine.startsWith(StringPool.FORWARD_SLASH) && !trimmedLine.startsWith(StringPool.GREATER_THAN)) {
        int pos=trimmedLine.indexOf(StringPool.EQUAL);
        if (pos != -1) {
          String argument=trimmedLine.substring(0,pos);
          if (Validator.isNotNull(previousArgument) && (previousArgument.compareTo(argument) > 0)) {
          }
          previousArgument=argument;
        }
      }
 else {
        previousArgument=null;
        readArguments=false;
      }
    }
    if (trimmedLine.startsWith("<liferay-ui:") || trimmedLine.startsWith("<aui:")) {
      if (!trimmedLine.contains(StringPool.SPACE) && !trimmedLine.endsWith(StringPool.GREATER_THAN)) {
        readArguments=true;
      }
 else {
        _checkArguments(fileName,trimmedLine,lineCount);
      }
    }
    if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
      while (trimmedLine.contains(StringPool.TAB)) {
        line=StringUtil.replaceLast(line,StringPool.TAB,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.TAB,StringPool.SPACE);
      }
      while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) {
        line=StringUtil.replaceLast(line,StringPool.DOUBLE_SPACE,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.DOUBLE_SPACE,StringPool.SPACE);
      }
    }
    int x=line.indexOf("<%@ include file");
    if (x != -1) {
      x=line.indexOf(StringPool.QUOTE,x);
      int y=line.indexOf(StringPool.QUOTE,x + 1);
      if (y != -1) {
        String includeFileName=line.substring(x + 1,y);
        Matcher matcher=_jspIncludeFilePattern.matcher(includeFileName);
        if (!matcher.find()) {
          _sourceFormatterHelper.printError(fileName,"include: " + fileName + " "+ lineCount);
        }
      }
    }
    line=_replacePrimitiveWrapperInstantiation(fileName,line,lineCount);
    sb.append(line);
    sb.append("\n");
  }
  unsyncBufferedReader.close();
  content=sb.toString();
  if (content.endsWith("\n")) {
    content=content.substring(0,content.length() - 1);
  }
  content=_formatTaglibQuotes(fileName,content,StringPool.QUOTE);
  content=_formatTaglibQuotes(fileName,content,StringPool.APOSTROPHE);
  return content;
}
