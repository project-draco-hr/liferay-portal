{
  int pos=line.indexOf(StringPool.OPEN_PARENTHESIS);
  if (line.startsWith(StringPool.TAB + "public static ")) {
    if (line.endsWith(StringPool.SEMICOLON) || line.contains(StringPool.EQUAL)) {
      String variableName=_getVariableName(line);
      if (Character.isLowerCase(variableName.charAt(0))) {
        return null;
      }
      return new Tuple(variableName,_TYPE_VARIABLE_PUBLIC_STATIC);
    }
    if (pos != -1) {
      return new Tuple(_getConstructorOrMethodName(line,pos),_TYPE_METHOD_PUBLIC_STATIC);
    }
    if (line.startsWith(StringPool.TAB + "public static class ")) {
      return new Tuple(_getClassName(line),_TYPE_CLASS_PUBLIC_STATIC);
    }
  }
 else   if (line.startsWith(StringPool.TAB + "public ")) {
    if (pos != -1) {
      int spaceCount=StringUtil.count(line.substring(0,pos),StringPool.SPACE);
      if (spaceCount == 1) {
        return new Tuple(_getConstructorOrMethodName(line,pos),_TYPE_CONSTRUCTOR_PUBLIC);
      }
      if (spaceCount > 1) {
        return new Tuple(_getConstructorOrMethodName(line,pos),_TYPE_METHOD_PUBLIC);
      }
    }
 else     if (line.startsWith(StringPool.TAB + "public class ")) {
      return new Tuple(_getClassName(line),_TYPE_CLASS_PUBLIC);
    }
  }
 else   if (line.startsWith(StringPool.TAB + "protected static ")) {
    if (line.endsWith(StringPool.SEMICOLON) || line.contains(StringPool.EQUAL)) {
      String variableName=_getVariableName(line);
      if (Character.isLowerCase(variableName.charAt(0))) {
        return null;
      }
      return new Tuple(variableName,_TYPE_VARIABLE_PROTECTED_STATIC);
    }
    if (pos != -1) {
      return new Tuple(_getConstructorOrMethodName(line,pos),_TYPE_METHOD_PROTECTED_STATIC);
    }
  }
 else   if (line.startsWith(StringPool.TAB + "protected ")) {
    if ((pos != -1) && !line.contains(StringPool.EQUAL)) {
      int spaceCount=StringUtil.count(line.substring(0,pos),StringPool.SPACE);
      if (spaceCount == 1) {
        return new Tuple(_getConstructorOrMethodName(line,pos),_TYPE_CONSTRUCTOR_PROTECTED);
      }
      if (spaceCount > 1) {
        return new Tuple(_getConstructorOrMethodName(line,pos),_TYPE_METHOD_PROTECTED);
      }
    }
    return new Tuple(_getVariableName(line),_TYPE_VARIABLE_PROTECTED);
  }
 else   if (line.startsWith(StringPool.TAB + "private static ")) {
    if (line.endsWith(StringPool.SEMICOLON) || line.contains(StringPool.EQUAL)) {
      String variableName=_getVariableName(line);
      char firstChar=variableName.charAt(1);
      if (Character.isUpperCase(firstChar)) {
        return new Tuple(variableName,_TYPE_VARIABLE_PRIVATE_STATIC_CONSTANT);
      }
      return new Tuple(variableName,_TYPE_VARIABLE_PRIVATE_STATIC);
    }
    if (pos != -1) {
      return new Tuple(_getConstructorOrMethodName(line,pos),_TYPE_METHOD_PRIVATE_STATIC);
    }
    if (line.startsWith(StringPool.TAB + "private static class ")) {
      return new Tuple(_getClassName(line),_TYPE_CLASS_PRIVATE_STATIC);
    }
  }
 else   if (line.startsWith(StringPool.TAB + "private ")) {
    if (line.endsWith(StringPool.SEMICOLON) || line.contains(StringPool.EQUAL)) {
      return new Tuple(_getVariableName(line),_TYPE_VARIABLE_PRIVATE);
    }
    if (pos != -1) {
      int spaceCount=StringUtil.count(line.substring(0,pos),StringPool.SPACE);
      if (spaceCount == 1) {
        return new Tuple(_getConstructorOrMethodName(line,pos),_TYPE_CONSTRUCTOR_PRIVATE);
      }
      if (spaceCount > 1) {
        return new Tuple(_getConstructorOrMethodName(line,pos),_TYPE_METHOD_PRIVATE);
      }
    }
 else     if (line.startsWith(StringPool.TAB + "private class ")) {
      return new Tuple(_getClassName(line),_TYPE_CLASS_PRIVATE);
    }
  }
  return null;
}
