{
  String basedir="./";
  String copyright=_getCopyright();
  String oldCopyright=_getOldCopyright();
  List<String> list=new ArrayList<String>();
  DirectoryScanner ds=new DirectoryScanner();
  ds.setBasedir(basedir);
  ds.setExcludes(new String[]{"**\\portal\\aui\\**","**\\bin\\**","**\\null.jsp","**\\tmp\\**","**\\tools\\tck\\**"});
  ds.setIncludes(new String[]{"**\\*.jsp","**\\*.jspf","**\\*.vm"});
  ds.scan();
  list.addAll(ListUtil.fromArray(ds.getIncludedFiles()));
  String[] files=list.toArray(new String[list.size()]);
  Properties properties=new Properties();
  File propertiesFile=_getPropertiesFile(basedir,".jsp.temp");
  String propertiesContent=StringPool.BLANK;
  if (propertiesFile.exists()) {
    propertiesContent=_fileUtil.read(propertiesFile);
    PropertiesUtil.load(properties,propertiesContent);
  }
  for (int i=0; i < files.length; i++) {
    File file=new File(basedir + files[i]);
    String key=StringUtil.replace(file.getPath(),StringPool.BACK_SLASH,StringPool.SLASH);
    long lastModified=GetterUtil.getLong(properties.getProperty(key));
    if (file.lastModified() == lastModified) {
      continue;
    }
 else {
      properties.setProperty(key,String.valueOf(file.lastModified()));
    }
    String content=_fileUtil.read(file);
    String newContent=_formatJSPContent(files[i],content);
    newContent=StringUtil.replace(newContent,new String[]{"<br/>","\"/>","\" >","@page import","\"%>",")%>","javascript: "},new String[]{"<br />","\" />","\">","@ page import","\" %>",") %>","javascript:"});
    newContent=StringUtil.replace(newContent,new String[]{"* Copyright (c) 2000-2009 Liferay, Inc."},new String[]{"* Copyright (c) 2000-2010 Liferay, Inc."});
    if (files[i].endsWith(".jsp") || files[i].endsWith(".jspf")) {
      if ((oldCopyright != null) && newContent.contains(oldCopyright)) {
        newContent=StringUtil.replace(newContent,oldCopyright,copyright);
        System.out.println("old (c): " + files[i]);
      }
      if (newContent.indexOf(copyright) == -1) {
        System.out.println("(c): " + files[i]);
      }
    }
    if (newContent.indexOf("alert('<%= LanguageUtil.") != -1) {
      newContent=StringUtil.replace(newContent,"alert('<%= LanguageUtil.","alert('<%= UnicodeLanguageUtil.");
    }
    if (newContent.indexOf("alert(\"<%= LanguageUtil.") != -1) {
      newContent=StringUtil.replace(newContent,"alert(\"<%= LanguageUtil.","alert(\"<%= UnicodeLanguageUtil.");
    }
    if (newContent.indexOf("confirm('<%= LanguageUtil.") != -1) {
      newContent=StringUtil.replace(newContent,"confirm('<%= LanguageUtil.","confirm('<%= UnicodeLanguageUtil.");
    }
    if (newContent.indexOf("confirm(\"<%= LanguageUtil.") != -1) {
      newContent=StringUtil.replace(newContent,"confirm(\"<%= LanguageUtil.","confirm(\"<%= UnicodeLanguageUtil.");
    }
    if (newContent.indexOf("    ") != -1) {
      if (!files[i].endsWith("template.vm")) {
        System.out.println("tab: " + files[i]);
      }
    }
    _checkXSS(files[i],content);
    if ((newContent != null) && !content.equals(newContent)) {
      _fileUtil.write(file,newContent);
      System.out.println(file);
    }
  }
  String newPropertiesContent=PropertiesUtil.toString(properties);
  if (!propertiesContent.equals(newPropertiesContent)) {
    _fileUtil.write(propertiesFile,newPropertiesContent);
  }
}
