{
  long pk=nextLong();
  DDMTemplate newDDMTemplate=_persistence.create(pk);
  newDDMTemplate.setUuid(randomString());
  newDDMTemplate.setGroupId(nextLong());
  newDDMTemplate.setCompanyId(nextLong());
  newDDMTemplate.setUserId(nextLong());
  newDDMTemplate.setUserName(randomString());
  newDDMTemplate.setCreateDate(nextDate());
  newDDMTemplate.setModifiedDate(nextDate());
  newDDMTemplate.setStructureId(nextLong());
  newDDMTemplate.setName(randomString());
  newDDMTemplate.setDescription(randomString());
  newDDMTemplate.setType(randomString());
  newDDMTemplate.setLanguage(randomString());
  newDDMTemplate.setScript(randomString());
  _persistence.update(newDDMTemplate,false);
  DDMTemplate existingDDMTemplate=_persistence.findByPrimaryKey(newDDMTemplate.getPrimaryKey());
  assertEquals(existingDDMTemplate.getUuid(),newDDMTemplate.getUuid());
  assertEquals(existingDDMTemplate.getTemplateId(),newDDMTemplate.getTemplateId());
  assertEquals(existingDDMTemplate.getGroupId(),newDDMTemplate.getGroupId());
  assertEquals(existingDDMTemplate.getCompanyId(),newDDMTemplate.getCompanyId());
  assertEquals(existingDDMTemplate.getUserId(),newDDMTemplate.getUserId());
  assertEquals(existingDDMTemplate.getUserName(),newDDMTemplate.getUserName());
  assertEquals(Time.getShortTimestamp(existingDDMTemplate.getCreateDate()),Time.getShortTimestamp(newDDMTemplate.getCreateDate()));
  assertEquals(Time.getShortTimestamp(existingDDMTemplate.getModifiedDate()),Time.getShortTimestamp(newDDMTemplate.getModifiedDate()));
  assertEquals(existingDDMTemplate.getStructureId(),newDDMTemplate.getStructureId());
  assertEquals(existingDDMTemplate.getName(),newDDMTemplate.getName());
  assertEquals(existingDDMTemplate.getDescription(),newDDMTemplate.getDescription());
  assertEquals(existingDDMTemplate.getType(),newDDMTemplate.getType());
  assertEquals(existingDDMTemplate.getLanguage(),newDDMTemplate.getLanguage());
  assertEquals(existingDDMTemplate.getScript(),newDDMTemplate.getScript());
}
