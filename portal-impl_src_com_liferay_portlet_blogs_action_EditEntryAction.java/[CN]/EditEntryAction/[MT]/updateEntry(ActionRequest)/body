{
  long entryId=ParamUtil.getLong(actionRequest,"entryId");
  String title=ParamUtil.getString(actionRequest,"title");
  String subtitle=ParamUtil.getString(actionRequest,"subtitle");
  String description=StringPool.BLANK;
  boolean customAbstract=ParamUtil.getBoolean(actionRequest,"customAbstract");
  if (customAbstract) {
    description=ParamUtil.getString(actionRequest,"description");
    if (Validator.isNull(description)) {
      throw new EntryDescriptionException();
    }
  }
  String content=ParamUtil.getString(actionRequest,"content");
  int displayDateMonth=ParamUtil.getInteger(actionRequest,"displayDateMonth");
  int displayDateDay=ParamUtil.getInteger(actionRequest,"displayDateDay");
  int displayDateYear=ParamUtil.getInteger(actionRequest,"displayDateYear");
  int displayDateHour=ParamUtil.getInteger(actionRequest,"displayDateHour");
  int displayDateMinute=ParamUtil.getInteger(actionRequest,"displayDateMinute");
  int displayDateAmPm=ParamUtil.getInteger(actionRequest,"displayDateAmPm");
  if (displayDateAmPm == Calendar.PM) {
    displayDateHour+=12;
  }
  boolean allowPingbacks=ParamUtil.getBoolean(actionRequest,"allowPingbacks");
  boolean allowTrackbacks=ParamUtil.getBoolean(actionRequest,"allowTrackbacks");
  String[] trackbacks=StringUtil.split(ParamUtil.getString(actionRequest,"trackbacks"));
  long coverImageFileEntryId=ParamUtil.getLong(actionRequest,"coverImageFileEntryId");
  String coverImageURL=ParamUtil.getString(actionRequest,"coverImageURL");
  String coverImageFileEntryCropRegion=ParamUtil.getString(actionRequest,"coverImageFileEntryCropRegion");
  ImageSelector coverImageImageSelector=new ImageSelector(coverImageFileEntryId,coverImageURL,coverImageFileEntryCropRegion);
  long smallImageFileEntryId=ParamUtil.getLong(actionRequest,"smallImageFileEntryId");
  String smallImageURL=ParamUtil.getString(actionRequest,"smallImageURL");
  ImageSelector smallImageImageSelector=new ImageSelector(smallImageFileEntryId,smallImageURL,null);
  BlogsEntry entry=null;
  String oldUrlTitle=StringPool.BLANK;
  ServiceContext serviceContext=ServiceContextFactory.getInstance(BlogsEntry.class.getName(),actionRequest);
  List<FileEntry> tempAttachments=getTempAttachments(content);
  if (entryId <= 0) {
    entry=BlogsEntryServiceUtil.addEntry(title,subtitle,description,content,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,coverImageImageSelector,smallImageImageSelector,serviceContext);
    AssetPublisherUtil.addAndStoreSelection(actionRequest,BlogsEntry.class.getName(),entry.getEntryId(),-1);
    if (entry != null && !tempAttachments.isEmpty()) {
      content=updateContentAttachmentLinks(entry.getGroupId(),entry,tempAttachments,actionRequest);
      entry=BlogsEntryServiceUtil.updateEntry(entry.getEntryId(),title,subtitle,description,content,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,coverImageImageSelector,smallImageImageSelector,serviceContext);
    }
  }
 else {
    entry=BlogsEntryLocalServiceUtil.getEntry(entryId);
    if (!tempAttachments.isEmpty()) {
      content=updateContentAttachmentLinks(entry.getGroupId(),entry,tempAttachments,actionRequest);
    }
    boolean sendEmailEntryUpdated=ParamUtil.getBoolean(actionRequest,"sendEmailEntryUpdated");
    serviceContext.setAttribute("sendEmailEntryUpdated",sendEmailEntryUpdated);
    String emailEntryUpdatedComment=ParamUtil.getString(actionRequest,"emailEntryUpdatedComment");
    serviceContext.setAttribute("emailEntryUpdatedComment",emailEntryUpdatedComment);
    String tempOldUrlTitle=entry.getUrlTitle();
    entry=BlogsEntryServiceUtil.updateEntry(entryId,title,subtitle,description,content,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,coverImageImageSelector,smallImageImageSelector,serviceContext);
    if (!tempOldUrlTitle.equals(entry.getUrlTitle())) {
      oldUrlTitle=tempOldUrlTitle;
    }
    AssetPublisherUtil.addAndStoreSelection(actionRequest,BlogsEntry.class.getName(),entry.getEntryId(),-1);
  }
  return new Object[]{entry,oldUrlTitle};
}
