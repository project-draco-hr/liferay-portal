{
  UploadPortletRequest uploadRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long entryId=ParamUtil.getLong(uploadRequest,"entryId");
  String title=ParamUtil.getString(uploadRequest,"title");
  String description=ParamUtil.getString(uploadRequest,"description");
  String content=ParamUtil.getString(uploadRequest,"content");
  int displayDateMonth=ParamUtil.getInteger(uploadRequest,"displayDateMonth");
  int displayDateDay=ParamUtil.getInteger(uploadRequest,"displayDateDay");
  int displayDateYear=ParamUtil.getInteger(uploadRequest,"displayDateYear");
  int displayDateHour=ParamUtil.getInteger(uploadRequest,"displayDateHour");
  int displayDateMinute=ParamUtil.getInteger(uploadRequest,"displayDateMinute");
  int displayDateAmPm=ParamUtil.getInteger(uploadRequest,"displayDateAmPm");
  if (displayDateAmPm == Calendar.PM) {
    displayDateHour+=12;
  }
  boolean allowPingbacks=ParamUtil.getBoolean(uploadRequest,"allowPingbacks");
  boolean allowTrackbacks=ParamUtil.getBoolean(uploadRequest,"allowTrackbacks");
  String[] trackbacks=StringUtil.split(ParamUtil.getString(uploadRequest,"trackbacks"));
  boolean smallImage=false;
  String smallImageURL=null;
  File smallFile=null;
  if (!themeDisplay.isStateExclusive()) {
    smallImage=ParamUtil.getBoolean(uploadRequest,"smallImage");
    smallImageURL=ParamUtil.getString(uploadRequest,"smallImageURL");
    smallFile=uploadRequest.getFile("smallFile");
  }
  ServiceContext serviceContext=ServiceContextFactory.getInstance(BlogsEntry.class.getName(),actionRequest);
  BlogsEntry entry=null;
  String oldUrlTitle=StringPool.BLANK;
  if (entryId <= 0) {
    entry=BlogsEntryServiceUtil.addEntry(title,description,content,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,smallImage,smallImageURL,smallFile,serviceContext);
    AssetPublisherUtil.addAndStoreSelection(actionRequest,BlogsEntry.class.getName(),entry.getEntryId(),-1);
  }
 else {
    entry=BlogsEntryLocalServiceUtil.getEntry(entryId);
    String tempOldUrlTitle=entry.getUrlTitle();
    entry=BlogsEntryServiceUtil.updateEntry(entryId,title,description,content,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,smallImage,smallImageURL,smallFile,serviceContext);
    if (!tempOldUrlTitle.equals(entry.getUrlTitle())) {
      oldUrlTitle=tempOldUrlTitle;
    }
    AssetPublisherUtil.addAndStoreSelection(actionRequest,BlogsEntry.class.getName(),entry.getEntryId(),-1);
  }
  return new Object[]{entry,oldUrlTitle};
}
