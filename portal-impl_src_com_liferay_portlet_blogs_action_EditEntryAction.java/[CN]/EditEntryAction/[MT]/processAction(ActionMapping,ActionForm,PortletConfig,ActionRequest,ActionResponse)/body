{
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  try {
    BlogsEntry entry=null;
    String oldUrlTitle=StringPool.BLANK;
    UploadException uploadException=(UploadException)actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION);
    if (uploadException != null) {
      if (uploadException.isExceededLiferayFileItemSizeLimit()) {
        throw new LiferayFileItemException();
      }
 else       if (uploadException.isExceededSizeLimit()) {
        throw new FileSizeException(uploadException.getCause());
      }
      throw new PortalException(uploadException.getCause());
    }
 else     if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) {
      Object[] returnValue=updateEntry(actionRequest);
      entry=(BlogsEntry)returnValue[0];
      oldUrlTitle=((String)returnValue[1]);
    }
 else     if (cmd.equals(Constants.DELETE)) {
      deleteEntries(actionRequest,false);
    }
 else     if (cmd.equals(Constants.MOVE_TO_TRASH)) {
      deleteEntries(actionRequest,true);
    }
 else     if (cmd.equals(Constants.SUBSCRIBE)) {
      subscribe(actionRequest);
    }
 else     if (cmd.equals(Constants.UNSUBSCRIBE)) {
      unsubscribe(actionRequest);
    }
 else     if (cmd.equals(Constants.UPDATE_CONTENT)) {
      updateContent(actionRequest,actionResponse);
      return;
    }
    String redirect=ParamUtil.getString(actionRequest,"redirect");
    boolean updateRedirect=false;
    String portletId=HttpUtil.getParameter(redirect,"p_p_id",false);
    if (Validator.isNotNull(oldUrlTitle)) {
      String oldRedirectParam=PortalUtil.getPortletNamespace(portletId) + "redirect";
      String oldRedirect=HttpUtil.getParameter(redirect,oldRedirectParam,false);
      if (Validator.isNotNull(oldRedirect)) {
        String newRedirect=HttpUtil.decodeURL(oldRedirect);
        newRedirect=StringUtil.replace(newRedirect,oldUrlTitle,entry.getUrlTitle());
        newRedirect=StringUtil.replace(newRedirect,oldRedirectParam,"redirect");
        redirect=StringUtil.replace(redirect,oldRedirect,newRedirect);
      }
 else       if (redirect.endsWith("/blogs/" + oldUrlTitle) || redirect.contains("/blogs/" + oldUrlTitle + "?") || redirect.contains("/blog/" + oldUrlTitle + "?")) {
        redirect=StringUtil.replace(redirect,oldUrlTitle,entry.getUrlTitle());
      }
      updateRedirect=true;
    }
    int workflowAction=ParamUtil.getInteger(actionRequest,"workflowAction",WorkflowConstants.ACTION_SAVE_DRAFT);
    boolean ajax=ParamUtil.getBoolean(actionRequest,"ajax");
    if (ajax) {
      JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
      jsonObject.put("entryId",entry.getEntryId());
      jsonObject.put("redirect",redirect);
      jsonObject.put("updateRedirect",updateRedirect);
      writeJSON(actionRequest,actionResponse,jsonObject);
      return;
    }
    if ((entry != null) && (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT)) {
      redirect=getSaveAndContinueRedirect(portletConfig,actionRequest,entry,redirect);
      sendRedirect(actionRequest,actionResponse,redirect);
    }
 else {
      WindowState windowState=actionRequest.getWindowState();
      if (!windowState.equals(LiferayWindowState.POP_UP)) {
        sendRedirect(actionRequest,actionResponse,redirect);
      }
 else {
        redirect=PortalUtil.escapeRedirect(redirect);
        if (Validator.isNotNull(redirect)) {
          if (cmd.equals(Constants.ADD) && (entry != null)) {
            String namespace=PortalUtil.getPortletNamespace(portletId);
            redirect=HttpUtil.addParameter(redirect,namespace + "className",BlogsEntry.class.getName());
            redirect=HttpUtil.addParameter(redirect,namespace + "classPK",entry.getEntryId());
          }
          actionResponse.sendRedirect(redirect);
        }
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof NoSuchEntryException || e instanceof PrincipalException) {
      SessionErrors.add(actionRequest,e.getClass());
      setForward(actionRequest,"portlet.blogs.error");
    }
 else     if (e instanceof EntryContentException || e instanceof EntryDescriptionException || e instanceof EntryDisplayDateException|| e instanceof EntrySmallImageNameException|| e instanceof EntrySmallImageSizeException|| e instanceof EntryTitleException|| e instanceof FileSizeException|| e instanceof LiferayFileItemException|| e instanceof SanitizerException) {
      SessionErrors.add(actionRequest,e.getClass());
    }
 else     if (e instanceof AssetCategoryException || e instanceof AssetTagException) {
      SessionErrors.add(actionRequest,e.getClass(),e);
    }
 else {
      Throwable cause=e.getCause();
      if (cause instanceof SanitizerException) {
        SessionErrors.add(actionRequest,SanitizerException.class);
      }
 else {
        throw e;
      }
    }
  }
}
