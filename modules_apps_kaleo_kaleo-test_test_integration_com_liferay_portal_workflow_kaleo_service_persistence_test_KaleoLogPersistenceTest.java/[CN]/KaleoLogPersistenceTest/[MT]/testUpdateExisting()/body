{
  long pk=RandomTestUtil.nextLong();
  KaleoLog newKaleoLog=_persistence.create(pk);
  newKaleoLog.setGroupId(RandomTestUtil.nextLong());
  newKaleoLog.setCompanyId(RandomTestUtil.nextLong());
  newKaleoLog.setUserId(RandomTestUtil.nextLong());
  newKaleoLog.setUserName(RandomTestUtil.randomString());
  newKaleoLog.setCreateDate(RandomTestUtil.nextDate());
  newKaleoLog.setModifiedDate(RandomTestUtil.nextDate());
  newKaleoLog.setKaleoClassName(RandomTestUtil.randomString());
  newKaleoLog.setKaleoClassPK(RandomTestUtil.nextLong());
  newKaleoLog.setKaleoDefinitionId(RandomTestUtil.nextLong());
  newKaleoLog.setKaleoInstanceId(RandomTestUtil.nextLong());
  newKaleoLog.setKaleoInstanceTokenId(RandomTestUtil.nextLong());
  newKaleoLog.setKaleoTaskInstanceTokenId(RandomTestUtil.nextLong());
  newKaleoLog.setKaleoNodeName(RandomTestUtil.randomString());
  newKaleoLog.setTerminalKaleoNode(RandomTestUtil.randomBoolean());
  newKaleoLog.setKaleoActionId(RandomTestUtil.nextLong());
  newKaleoLog.setKaleoActionName(RandomTestUtil.randomString());
  newKaleoLog.setKaleoActionDescription(RandomTestUtil.randomString());
  newKaleoLog.setPreviousKaleoNodeId(RandomTestUtil.nextLong());
  newKaleoLog.setPreviousKaleoNodeName(RandomTestUtil.randomString());
  newKaleoLog.setPreviousAssigneeClassName(RandomTestUtil.randomString());
  newKaleoLog.setPreviousAssigneeClassPK(RandomTestUtil.nextLong());
  newKaleoLog.setCurrentAssigneeClassName(RandomTestUtil.randomString());
  newKaleoLog.setCurrentAssigneeClassPK(RandomTestUtil.nextLong());
  newKaleoLog.setType(RandomTestUtil.randomString());
  newKaleoLog.setComment(RandomTestUtil.randomString());
  newKaleoLog.setStartDate(RandomTestUtil.nextDate());
  newKaleoLog.setEndDate(RandomTestUtil.nextDate());
  newKaleoLog.setDuration(RandomTestUtil.nextLong());
  newKaleoLog.setWorkflowContext(RandomTestUtil.randomString());
  _kaleoLogs.add(_persistence.update(newKaleoLog));
  KaleoLog existingKaleoLog=_persistence.findByPrimaryKey(newKaleoLog.getPrimaryKey());
  Assert.assertEquals(existingKaleoLog.getKaleoLogId(),newKaleoLog.getKaleoLogId());
  Assert.assertEquals(existingKaleoLog.getGroupId(),newKaleoLog.getGroupId());
  Assert.assertEquals(existingKaleoLog.getCompanyId(),newKaleoLog.getCompanyId());
  Assert.assertEquals(existingKaleoLog.getUserId(),newKaleoLog.getUserId());
  Assert.assertEquals(existingKaleoLog.getUserName(),newKaleoLog.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoLog.getCreateDate()),Time.getShortTimestamp(newKaleoLog.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoLog.getModifiedDate()),Time.getShortTimestamp(newKaleoLog.getModifiedDate()));
  Assert.assertEquals(existingKaleoLog.getKaleoClassName(),newKaleoLog.getKaleoClassName());
  Assert.assertEquals(existingKaleoLog.getKaleoClassPK(),newKaleoLog.getKaleoClassPK());
  Assert.assertEquals(existingKaleoLog.getKaleoDefinitionId(),newKaleoLog.getKaleoDefinitionId());
  Assert.assertEquals(existingKaleoLog.getKaleoInstanceId(),newKaleoLog.getKaleoInstanceId());
  Assert.assertEquals(existingKaleoLog.getKaleoInstanceTokenId(),newKaleoLog.getKaleoInstanceTokenId());
  Assert.assertEquals(existingKaleoLog.getKaleoTaskInstanceTokenId(),newKaleoLog.getKaleoTaskInstanceTokenId());
  Assert.assertEquals(existingKaleoLog.getKaleoNodeName(),newKaleoLog.getKaleoNodeName());
  Assert.assertEquals(existingKaleoLog.getTerminalKaleoNode(),newKaleoLog.getTerminalKaleoNode());
  Assert.assertEquals(existingKaleoLog.getKaleoActionId(),newKaleoLog.getKaleoActionId());
  Assert.assertEquals(existingKaleoLog.getKaleoActionName(),newKaleoLog.getKaleoActionName());
  Assert.assertEquals(existingKaleoLog.getKaleoActionDescription(),newKaleoLog.getKaleoActionDescription());
  Assert.assertEquals(existingKaleoLog.getPreviousKaleoNodeId(),newKaleoLog.getPreviousKaleoNodeId());
  Assert.assertEquals(existingKaleoLog.getPreviousKaleoNodeName(),newKaleoLog.getPreviousKaleoNodeName());
  Assert.assertEquals(existingKaleoLog.getPreviousAssigneeClassName(),newKaleoLog.getPreviousAssigneeClassName());
  Assert.assertEquals(existingKaleoLog.getPreviousAssigneeClassPK(),newKaleoLog.getPreviousAssigneeClassPK());
  Assert.assertEquals(existingKaleoLog.getCurrentAssigneeClassName(),newKaleoLog.getCurrentAssigneeClassName());
  Assert.assertEquals(existingKaleoLog.getCurrentAssigneeClassPK(),newKaleoLog.getCurrentAssigneeClassPK());
  Assert.assertEquals(existingKaleoLog.getType(),newKaleoLog.getType());
  Assert.assertEquals(existingKaleoLog.getComment(),newKaleoLog.getComment());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoLog.getStartDate()),Time.getShortTimestamp(newKaleoLog.getStartDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoLog.getEndDate()),Time.getShortTimestamp(newKaleoLog.getEndDate()));
  Assert.assertEquals(existingKaleoLog.getDuration(),newKaleoLog.getDuration());
  Assert.assertEquals(existingKaleoLog.getWorkflowContext(),newKaleoLog.getWorkflowContext());
}
