{
  InputStream is=classLoader.getResourceAsStream(source);
  if (is == null) {
    if (_log.isWarnEnabled()) {
      _log.warn("Cannot load " + source);
    }
    return;
  }
 else {
    if (_log.isDebugEnabled()) {
      _log.debug("Loading " + source);
    }
  }
  Document doc=_saxReader.read(is);
  Element root=doc.getRootElement();
  Iterator<Element> itr1=root.elements("hint-collection").iterator();
  while (itr1.hasNext()) {
    Element hintCollection=itr1.next();
    String name=hintCollection.attributeValue("name");
    Map<String,String> hints=_hintCollections.get(name);
    if (hints == null) {
      hints=new HashMap<String,String>();
      _hintCollections.put(name,hints);
    }
    Iterator<Element> itr2=hintCollection.elements("hint").iterator();
    while (itr2.hasNext()) {
      Element hint=itr2.next();
      String hintName=hint.attributeValue("name");
      String hintValue=hint.getText();
      hints.put(hintName,hintValue);
    }
  }
  itr1=root.elements("model").iterator();
  while (itr1.hasNext()) {
    Element model=itr1.next();
    String name=model.attributeValue("name");
    if (classLoader != ModelHintsImpl.class.getClassLoader()) {
      ClassNameLocalServiceUtil.getClassName(name);
    }
    Map<String,String> defaultHints=new HashMap<String,String>();
    _defaultHints.put(name,defaultHints);
    Element defaultHintsEl=model.element("default-hints");
    if (defaultHintsEl != null) {
      Iterator<Element> itr2=defaultHintsEl.elements("hint").iterator();
      while (itr2.hasNext()) {
        Element hint=itr2.next();
        String hintName=hint.attributeValue("name");
        String hintValue=hint.getText();
        defaultHints.put(hintName,hintValue);
      }
    }
    Map<String,Object> fields=(Map<String,Object>)_modelFields.get(name);
    if (fields == null) {
      fields=new LinkedHashMap<String,Object>();
      _modelFields.put(name,fields);
    }
    _models.add(name);
    Iterator<Element> itr2=model.elements("field").iterator();
    while (itr2.hasNext()) {
      Element field=itr2.next();
      String fieldName=field.attributeValue("name");
      String fieldType=field.attributeValue("type");
      String fieldValidation=field.attributeValue("validation");
      boolean fieldLocalized=GetterUtil.getBoolean(field.attributeValue("localized"));
      Map<String,String> fieldHints=new HashMap<String,String>();
      fieldHints.putAll(defaultHints);
      Iterator<Element> itr3=field.elements("hint-collection").iterator();
      while (itr3.hasNext()) {
        Element hintCollection=itr3.next();
        Map<String,String> hints=_hintCollections.get(hintCollection.attributeValue("name"));
        fieldHints.putAll(hints);
      }
      itr3=field.elements("hint").iterator();
      while (itr3.hasNext()) {
        Element hint=itr3.next();
        String hintName=hint.attributeValue("name");
        String hintValue=hint.getText();
        fieldHints.put(hintName,hintValue);
      }
      Tuple fieldSanitize=null;
      Element sanitize=field.element("sanitize");
      if (sanitize != null) {
        String contentType=sanitize.attributeValue("content-type");
        String modes=sanitize.attributeValue("modes");
        fieldSanitize=new Tuple(fieldName,contentType,modes);
      }
      fields.put(fieldName + _ELEMENTS_SUFFIX,field);
      fields.put(fieldName + _TYPE_SUFFIX,fieldType);
      fields.put(fieldName + _VALIDATION_SUFFIX,fieldValidation);
      fields.put(fieldName + _LOCALIZATION_SUFFIX,fieldLocalized);
      fields.put(fieldName + _HINTS_SUFFIX,fieldHints);
      if (fieldSanitize != null) {
        fields.put(fieldName + _SANITIZE_SUFFIX,fieldSanitize);
      }
    }
  }
}
