{
  InputStream is=classLoader.getResourceAsStream(source);
  if (is == null) {
    if (_log.isWarnEnabled()) {
      _log.warn("Cannot load " + source);
    }
    return;
  }
 else {
    if (_log.isDebugEnabled()) {
      _log.debug("Loading " + source);
    }
  }
  Document doc=_saxReader.read(is);
  Element root=doc.getRootElement();
  List<Element> rootElements=root.elements("hint-collection");
  for (  Element hintCollection : rootElements) {
    String name=hintCollection.attributeValue("name");
    Map<String,String> hints=_hintCollections.get(name);
    if (hints == null) {
      hints=new HashMap<String,String>();
      _hintCollections.put(name,hints);
    }
    List<Element> hintElements=hintCollection.elements("hint");
    for (    Element hint : hintElements) {
      String hintName=hint.attributeValue("name");
      String hintValue=hint.getText();
      hints.put(hintName,hintValue);
    }
  }
  rootElements=root.elements("model");
  for (  Element model : rootElements) {
    String name=model.attributeValue("name");
    if (classLoader != ModelHintsImpl.class.getClassLoader()) {
      ClassNameLocalServiceUtil.getClassName(name);
    }
    Map<String,String> defaultHints=new HashMap<String,String>();
    _defaultHints.put(name,defaultHints);
    Element defaultHintsEl=model.element("default-hints");
    if (defaultHintsEl != null) {
      List<Element> hintElements=defaultHintsEl.elements("hint");
      for (      Element hint : hintElements) {
        String hintName=hint.attributeValue("name");
        String hintValue=hint.getText();
        defaultHints.put(hintName,hintValue);
      }
    }
    Map<String,Object> fields=(Map<String,Object>)_modelFields.get(name);
    if (fields == null) {
      fields=new LinkedHashMap<String,Object>();
      _modelFields.put(name,fields);
    }
    _models.add(name);
    List<Element> modelElements=model.elements("field");
    for (    Element field : modelElements) {
      String fieldName=field.attributeValue("name");
      String fieldType=field.attributeValue("type");
      boolean fieldLocalized=GetterUtil.getBoolean(field.attributeValue("localized"));
      Map<String,String> fieldHints=new HashMap<String,String>();
      fieldHints.putAll(defaultHints);
      List<Element> fieldElements=field.elements("hint-collection");
      for (      Element hintCollection : fieldElements) {
        Map<String,String> hints=_hintCollections.get(hintCollection.attributeValue("name"));
        fieldHints.putAll(hints);
      }
      fieldElements=field.elements("hint");
      for (      Element hint : fieldElements) {
        String hintName=hint.attributeValue("name");
        String hintValue=hint.getText();
        fieldHints.put(hintName,hintValue);
      }
      Tuple fieldSanitize=null;
      Element sanitize=field.element("sanitize");
      if (sanitize != null) {
        String contentType=sanitize.attributeValue("content-type");
        String modes=sanitize.attributeValue("modes");
        fieldSanitize=new Tuple(fieldName,contentType,modes);
      }
      Map<String,Tuple> fieldValidators=new TreeMap<String,Tuple>();
      fieldElements=field.elements("validator");
      for (      Element validator : fieldElements) {
        String validatorName=validator.attributeValue("name");
        if (Validator.isNull(validatorName)) {
          continue;
        }
        String validatorErrorMessage=GetterUtil.getString(validator.attributeValue("error-message"));
        String validatorValue=GetterUtil.getString(validator.getText());
        boolean customValidator=isCustomValidator(validatorName);
        if (customValidator) {
          validatorName=buildCustomValidatorName(validatorName);
        }
        Tuple fieldValidator=new Tuple(fieldName,validatorName,validatorErrorMessage,validatorValue,customValidator);
        fieldValidators.put(validatorName,fieldValidator);
      }
      fields.put(fieldName + _ELEMENTS_SUFFIX,field);
      fields.put(fieldName + _TYPE_SUFFIX,fieldType);
      fields.put(fieldName + _LOCALIZATION_SUFFIX,fieldLocalized);
      fields.put(fieldName + _HINTS_SUFFIX,fieldHints);
      if (fieldSanitize != null) {
        fields.put(fieldName + _SANITIZE_SUFFIX,fieldSanitize);
      }
      if (!fieldValidators.isEmpty()) {
        fields.put(fieldName + _VALIDATORS_SUFFIX,ListUtil.fromMapValues(fieldValidators));
      }
    }
  }
}
