{
  int total=browseResult.getNumHits();
  BrowseHit[] browseHits=browseResult.getHits();
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) {
    start=0;
    end=total;
  }
  int[] startAndEnd=SearchPaginationUtil.calculateStartAndEnd(start,end,total);
  start=startAndEnd[0];
  end=startAndEnd[1];
  Set<String> queryTerms=new HashSet<String>();
  IndexReader indexReader=indexSearcher.getIndexReader();
  List<String> indexedFieldNames=new ArrayList<String>(indexReader.getFieldNames(IndexReader.FieldOption.INDEXED));
  org.apache.lucene.search.Query luceneQuery=(org.apache.lucene.search.Query)QueryTranslatorUtil.translate(query);
  int scoredFieldNamesCount=LuceneHelperUtil.countScoredFieldNames(luceneQuery,ArrayUtil.toStringArray(indexedFieldNames.toArray()));
  Hits hits=new HitsImpl();
  if ((start < 0) || (start > end)) {
    return hits;
  }
  int subsetTotal=end - start;
  if (subsetTotal > PropsValues.INDEX_SEARCH_LIMIT) {
    subsetTotal=PropsValues.INDEX_SEARCH_LIMIT;
  }
  List<Document> subsetDocs=new ArrayList<Document>(subsetTotal);
  List<Float> subsetScores=new ArrayList<Float>(subsetTotal);
  FieldSelector fieldSelector=null;
  QueryConfig queryConfig=query.getQueryConfig();
  String[] selectedFieldNames=queryConfig.getSelectedFieldNames();
  if (ArrayUtil.isNotEmpty(selectedFieldNames) && !selectedFieldNames[0].equals(Field.ANY)) {
    fieldSelector=new SetBasedFieldSelector(SetUtil.fromArray(selectedFieldNames),Collections.<String>emptySet());
  }
  for (int i=start; i < start + subsetTotal; i++) {
    int docId=browseHits[i].getDocid();
    org.apache.lucene.document.Document document=indexSearcher.doc(docId,fieldSelector);
    Document subsetDocument=getDocument(document);
    if (queryConfig.isHighlightEnabled()) {
      Locale locale=queryConfig.getLocale();
      getSnippet(document,query,Field.ASSET_CATEGORY_TITLES,locale,subsetDocument,queryTerms);
      getSnippet(document,query,Field.CONTENT,locale,subsetDocument,queryTerms);
      getSnippet(document,query,Field.DESCRIPTION,locale,subsetDocument,queryTerms);
      getSnippet(document,query,Field.TITLE,locale,subsetDocument,queryTerms);
    }
    subsetDocs.add(subsetDocument);
    Float subsetScore=browseHits[i].getScore();
    if (scoredFieldNamesCount > 0) {
      subsetScore=subsetScore / scoredFieldNamesCount;
    }
    subsetScores.add(subsetScore);
    if (_log.isDebugEnabled()) {
      try {
        Explanation explanation=indexSearcher.explain(luceneQuery,docId);
        _log.debug(explanation.toString());
      }
 catch (      Exception e) {
      }
    }
  }
  if (!queryConfig.isHighlightEnabled()) {
    queryTerms=getQueryTerms(query);
  }
  hits.setDocs(subsetDocs.toArray(new Document[subsetDocs.size()]));
  hits.setLength(total);
  hits.setQuery(query);
  hits.setQueryTerms(queryTerms.toArray(new String[queryTerms.size()]));
  hits.setScores(subsetScores.toArray(new Float[subsetScores.size()]));
  hits.setSearchTime(searchTime);
  hits.setStart(startTime);
  return hits;
}
