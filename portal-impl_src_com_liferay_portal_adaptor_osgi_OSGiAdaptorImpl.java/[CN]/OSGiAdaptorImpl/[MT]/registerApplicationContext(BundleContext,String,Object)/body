{
  Class<?> beanClazz=bean.getClass();
  List<Class<?>> interfaces=new ArrayList<Class<?>>();
  interfaces.addAll(getInterfaces(beanClazz));
  while (beanClazz.getSuperclass() != null) {
    beanClazz=beanClazz.getSuperclass();
    interfaces.addAll(getInterfaces(beanClazz));
  }
  List<String> names=new ArrayList<String>();
  for (  Class<?> interfaceClass : interfaces) {
    String name=interfaceClass.getName();
    if (name.equals(Advised.class.getName()) || name.equals(MethodInterceptor.class.getName()) || name.equals(Serializable.class.getName())|| name.equals(SpringProxy.class.getName())) {
      continue;
    }
    names.add(name);
  }
  if (names.isEmpty()) {
    return;
  }
  Hashtable<String,Object> properties=new Hashtable<String,Object>();
  properties.put(Constants.SERVICE_RANKING,1000);
  properties.put(Constants.SERVICE_VENDOR,ReleaseInfo.getVendor());
  properties.put(OSGiConstants.PORTAL_SERVICE,Boolean.TRUE);
  properties.put(OSGiConstants.PORTAL_SERVICE_BEAN_NAME,beanName);
  properties.put(OSGiConstants.PORTAL_SERVICE_CORE,Boolean.TRUE);
  bundleContext.registerService(names.toArray(new String[names.size()]),bean,properties);
}
