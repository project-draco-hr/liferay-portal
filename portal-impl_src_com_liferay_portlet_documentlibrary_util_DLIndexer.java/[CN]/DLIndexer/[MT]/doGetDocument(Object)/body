{
  DLFileEntry dlFileEntry=(DLFileEntry)obj;
  if (_log.isDebugEnabled()) {
    _log.debug("Indexing document " + dlFileEntry);
  }
  boolean indexContent=true;
  InputStream is=null;
  try {
    if (PropsValues.DL_FILE_INDEXING_MAX_SIZE == 0) {
      indexContent=false;
    }
 else     if (PropsValues.DL_FILE_INDEXING_MAX_SIZE != -1) {
      if (dlFileEntry.getSize() > PropsValues.DL_FILE_INDEXING_MAX_SIZE) {
        indexContent=false;
      }
    }
    if (indexContent) {
      String[] ignoreExtensions=PrefsPropsUtil.getStringArray(PropsKeys.DL_FILE_INDEXING_IGNORE_EXTENSIONS,StringPool.COMMA);
      if (ArrayUtil.contains(ignoreExtensions,StringPool.PERIOD + dlFileEntry.getExtension())) {
        indexContent=false;
      }
    }
    if (indexContent) {
      is=dlFileEntry.getFileVersion().getContentStream(false);
    }
  }
 catch (  Exception e) {
  }
  if (indexContent && (is == null)) {
    if (_log.isDebugEnabled()) {
      _log.debug("Document " + dlFileEntry + " does not have any content");
    }
    return null;
  }
  try {
    Document document=new DocumentImpl();
    long fileEntryId=dlFileEntry.getFileEntryId();
    document.addUID(PORTLET_ID,fileEntryId);
    List<AssetCategory> assetCategories=AssetCategoryLocalServiceUtil.getCategories(DLFileEntry.class.getName(),fileEntryId);
    long[] assetCategoryIds=StringUtil.split(ListUtil.toString(assetCategories,AssetCategory.CATEGORY_ID_ACCESSOR),0L);
    document.addKeyword(Field.ASSET_CATEGORY_IDS,assetCategoryIds);
    addLocalizedAssetCategoryTitles(document,Field.ASSET_CATEGORY_TITLES,assetCategories);
    String[] assetTagNames=AssetTagLocalServiceUtil.getTagNames(DLFileEntry.class.getName(),fileEntryId);
    document.addKeyword(Field.ASSET_TAG_NAMES,assetTagNames);
    document.addKeyword(Field.COMPANY_ID,dlFileEntry.getCompanyId());
    if (indexContent) {
      try {
        document.addFile(Field.CONTENT,is,dlFileEntry.getTitle());
      }
 catch (      IOException ioe) {
        throw new SearchException("Cannot extract text from file" + dlFileEntry);
      }
    }
    document.addText(Field.DESCRIPTION,dlFileEntry.getDescription());
    document.addKeyword(Field.ENTRY_CLASS_NAME,DLFileEntry.class.getName());
    document.addKeyword(Field.ENTRY_CLASS_PK,fileEntryId);
    document.addKeyword(Field.FOLDER_ID,dlFileEntry.getFolderId());
    document.addKeyword(Field.GROUP_ID,getParentGroupId(dlFileEntry.getGroupId()));
    document.addDate(Field.MODIFIED_DATE,dlFileEntry.getModifiedDate());
    document.addKeyword(Field.PORTLET_ID,PORTLET_ID);
    document.addText(Field.PROPERTIES,dlFileEntry.getLuceneProperties());
    document.addKeyword(Field.SCOPE_GROUP_ID,dlFileEntry.getGroupId());
    DLFileVersion dlFileVersion=dlFileEntry.getFileVersion();
    document.addKeyword(Field.STATUS,dlFileVersion.getStatus());
    document.addText(Field.TITLE,dlFileEntry.getTitle());
    long userId=dlFileEntry.getUserId();
    document.addKeyword(Field.USER_ID,userId);
    document.addKeyword(Field.USER_NAME,PortalUtil.getUserName(userId,dlFileEntry.getUserName()),true);
    document.addKeyword("dataRepositoryId",dlFileEntry.getDataRepositoryId());
    document.addKeyword("extension",dlFileEntry.getExtension());
    document.addKeyword("fileEntryTypeId",dlFileEntry.getFileEntryTypeId());
    document.addKeyword("path",dlFileEntry.getTitle());
    ExpandoBridge expandoBridge=ExpandoBridgeFactoryUtil.getExpandoBridge(dlFileEntry.getCompanyId(),DLFileEntry.class.getName(),dlFileVersion.getFileVersionId());
    ExpandoBridgeIndexerUtil.addAttributes(document,expandoBridge);
    addFileEntryTypeAttributes(document,dlFileVersion);
    if (_log.isDebugEnabled()) {
      _log.debug("Document " + dlFileEntry + " indexed successfully");
    }
    return document;
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}
