{
  Properties env=new Properties();
  env.put(Context.INITIAL_CONTEXT_FACTORY,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_IMPORT_FACTORY_INITIAL));
  env.put(Context.PROVIDER_URL,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_IMPORT_BASE_PROVIDER_URL));
  env.put(Context.SECURITY_PRINCIPAL,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_IMPORT_SECURITY_PRINCIPAL));
  env.put(Context.SECURITY_CREDENTIALS,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_IMPORT_SECURITY_CREDENTIALS));
  if (_log.isDebugEnabled()) {
    LogUtil.log(_log,env);
  }
  LdapContext ctx=null;
  try {
    ctx=new InitialLdapContext(env,null);
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn("Failed to bind to the LDAP server");
    }
    if (_log.isDebugEnabled()) {
      _log.debug(e);
    }
    return;
  }
  Properties userMappings=PropertiesUtil.load(PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_IMPORT_USER_MAPPINGS));
  if (_log.isDebugEnabled()) {
    LogUtil.log(_log,userMappings);
  }
  Properties groupMappings=PropertiesUtil.load(PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_IMPORT_GROUP_MAPPINGS));
  if (_log.isDebugEnabled()) {
    LogUtil.log(_log,groupMappings);
  }
  try {
    String filter=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_IMPORT_SEARCH_FILTER);
    String context=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_IMPORT_BASE_DN);
    SearchControls cons=new SearchControls(SearchControls.SUBTREE_SCOPE,0,0,null,false,false);
    NamingEnumeration enu=ctx.search(context,filter,cons);
    while (enu.hasMore()) {
      SearchResult result=(SearchResult)enu.next();
      _importLDAP(companyId,ctx,userMappings,groupMappings,result);
    }
  }
 catch (  Exception e) {
    _log.error("Error importing LDAP users and groups",e);
  }
 finally {
    if (ctx != null) {
      ctx.close();
    }
  }
}
