{
  Properties env=new Properties();
  env.put(Context.INITIAL_CONTEXT_FACTORY,PrefsPropsUtil.getString(PropsUtil.LDAP_IMPORT_FACTORY_INITIAL));
  env.put(Context.PROVIDER_URL,PrefsPropsUtil.getString(PropsUtil.LDAP_IMPORT_PROVIDER_URL));
  env.put(Context.SECURITY_PRINCIPAL,PrefsPropsUtil.getString(PropsUtil.LDAP_IMPORT_SECURITY_PRINCIPAL));
  env.put(Context.SECURITY_CREDENTIALS,PrefsPropsUtil.getString(PropsUtil.LDAP_IMPORT_SECURITY_CREDENTIALS));
  if (_log.isDebugEnabled()) {
    StringWriter sw=new StringWriter();
    env.list(new PrintWriter(sw));
    _log.debug(sw.getBuffer().toString());
  }
  LdapContext ctx=null;
  try {
    ctx=new InitialLdapContext(env,null);
  }
 catch (  Exception e) {
    if (_log.isDebugEnabled()) {
      _log.debug("Failed to bind to the LDAP server");
    }
    return;
  }
  Properties userMappings=PropertiesUtil.load(PrefsPropsUtil.getString(PropsUtil.LDAP_IMPORT_USER_MAPPINGS));
  if (_log.isDebugEnabled()) {
    StringWriter sw=new StringWriter();
    userMappings.list(new PrintWriter(sw));
    _log.debug(sw.getBuffer().toString());
  }
  Properties groupMappings=PropertiesUtil.load(PrefsPropsUtil.getString(PropsUtil.LDAP_IMPORT_GROUP_MAPPINGS));
  if (_log.isDebugEnabled()) {
    StringWriter sw=new StringWriter();
    groupMappings.list(new PrintWriter(sw));
    _log.debug(sw.getBuffer().toString());
  }
  try {
    String filter=PrefsPropsUtil.getString(PropsUtil.LDAP_IMPORT_SEARCH_FILTER);
    String context=PrefsPropsUtil.getString(PropsUtil.LDAP_IMPORT_CONTEXT);
    NamingEnumeration enu=ctx.search(context,filter,null);
    while (enu.hasMore()) {
      SearchResult result=(SearchResult)enu.next();
      String userCN=result.getName();
      if (_log.isDebugEnabled()) {
        _log.debug("User CN " + userCN);
      }
      Attributes attrs=result.getAttributes();
      String creatorUserId=null;
      boolean autoUserId=false;
      String userId=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("userId"));
      boolean autoPassword=true;
      String password1=StringPool.BLANK;
      String password2=StringPool.BLANK;
      boolean passwordReset=false;
      String emailAddress=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("emailAddress"));
      Locale locale=Locale.US;
      String firstName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("firstName"));
      String middleName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("middleName"));
      String lastName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("lastName"));
      if (Validator.isNull(firstName) || Validator.isNull(lastName)) {
        String fullName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("fullName"));
        String names[]=LDAPUtil.splitFullName(fullName);
        firstName=names[0];
        middleName=names[1];
        lastName=names[2];
      }
      String nickName=null;
      String prefixId=null;
      String suffixId=null;
      boolean male=true;
      int birthdayMonth=Calendar.JANUARY;
      int birthdayDay=1;
      int birthdayYear=1970;
      String jobTitle=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("jobTitle"));
      String organizationId=null;
      String locationId=null;
      boolean sendEmail=false;
      addOrUpdateUser(creatorUserId,companyId,autoUserId,userId,autoPassword,password1,password2,passwordReset,emailAddress,locale,firstName,middleName,lastName,nickName,prefixId,suffixId,male,birthdayMonth,birthdayDay,birthdayYear,jobTitle,organizationId,locationId,sendEmail,true,false);
      Attribute attr=attrs.get(userMappings.getProperty("group"));
      for (int i=0; i < attr.size(); i++) {
        String groupDN=(String)attr.get(i);
        Attributes groupAttrs=ctx.getAttributes(groupDN);
        String groupName=LDAPUtil.getAttributeValue(groupAttrs,groupMappings.getProperty("groupName"));
        String description=LDAPUtil.getAttributeValue(groupAttrs,groupMappings.getProperty("description"));
        Group group=null;
        try {
          group=GroupLocalServiceUtil.getGroup(companyId,groupName);
        }
 catch (        NoSuchGroupException nsge) {
          group=GroupLocalServiceUtil.addGroup(User.getDefaultUserId(companyId),StringPool.BLANK,StringPool.BLANK,groupName,description,StringPool.BLANK,StringPool.BLANK);
        }
        if (_log.isDebugEnabled()) {
          _log.debug("Adding " + userCN + " to group: "+ groupDN);
        }
        String[] userIds={userId};
        UserLocalServiceUtil.addGroupUsers(group.getGroupId(),userIds);
      }
    }
  }
 catch (  Exception e) {
    _log.error("Error importing LDAP users and groups",e);
  }
 finally {
    if (ctx != null) {
      ctx.close();
    }
  }
}
