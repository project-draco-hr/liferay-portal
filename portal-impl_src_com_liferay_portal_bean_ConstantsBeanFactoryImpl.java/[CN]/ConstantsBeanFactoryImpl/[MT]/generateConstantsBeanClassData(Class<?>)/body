{
  String constantsClassBinaryName=getClassBinaryName(constantsClass);
  String constantsBeanClassBinaryName=constantsClassBinaryName + "Bean";
  String objectClassBinaryName=getClassBinaryName(Object.class);
  ClassWriter classWriter=new ClassWriter(0);
  classWriter.visit(Opcodes.V1_6,Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,constantsBeanClassBinaryName,null,objectClassBinaryName,null);
  MethodVisitor methodVisitor=classWriter.visitMethod(Opcodes.ACC_PUBLIC,"<init>","()V",null,null);
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,objectClassBinaryName,"<init>","()V",false);
  methodVisitor.visitInsn(Opcodes.RETURN);
  methodVisitor.visitMaxs(1,1);
  methodVisitor.visitEnd();
  Field[] fields=constantsClass.getFields();
  for (  Field field : fields) {
    if (!Modifier.isStatic(field.getModifiers())) {
      continue;
    }
    Type fieldType=Type.getType(field.getType());
    methodVisitor=classWriter.visitMethod(Opcodes.ACC_PUBLIC,"get" + field.getName(),"()" + fieldType.getDescriptor(),null,null);
    methodVisitor.visitCode();
    methodVisitor.visitFieldInsn(Opcodes.GETSTATIC,constantsClassBinaryName,field.getName(),fieldType.getDescriptor());
    methodVisitor.visitInsn(fieldType.getOpcode(Opcodes.IRETURN));
    methodVisitor.visitMaxs(fieldType.getSize(),1);
    methodVisitor.visitEnd();
  }
  Method[] methods=constantsClass.getMethods();
  for (  Method method : methods) {
    if (!Modifier.isStatic(method.getModifiers())) {
      continue;
    }
    String methodDescriptor=Type.getMethodDescriptor(method);
    methodVisitor=classWriter.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,method.getName(),methodDescriptor,null,null);
    methodVisitor.visitCode();
    int stackIndex=0;
    Type[] parameterTypes=Type.getArgumentTypes(method);
    for (    Type parameterType : parameterTypes) {
      methodVisitor.visitVarInsn(parameterType.getOpcode(Opcodes.ILOAD),stackIndex);
      stackIndex+=parameterType.getSize();
    }
    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,constantsClassBinaryName,method.getName(),methodDescriptor,false);
    Type returnType=Type.getType(method.getReturnType());
    methodVisitor.visitInsn(returnType.getOpcode(Opcodes.IRETURN));
    methodVisitor.visitMaxs(stackIndex + returnType.getSize(),parameterTypes.length + 1);
    methodVisitor.visitEnd();
  }
  classWriter.visitEnd();
  return classWriter.toByteArray();
}
