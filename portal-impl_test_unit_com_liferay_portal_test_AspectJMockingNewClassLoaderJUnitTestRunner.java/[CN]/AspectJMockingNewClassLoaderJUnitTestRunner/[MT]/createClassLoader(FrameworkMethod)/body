{
  AdviseWith adviseWith=frameworkMethod.getAnnotation(AdviseWith.class);
  if (adviseWith == null) {
    return super.createClassLoader(frameworkMethod);
  }
  Class<?>[] adviceClasses=adviseWith.adviceClasses();
  if (ArrayUtil.isEmpty(adviceClasses)) {
    return super.createClassLoader(frameworkMethod);
  }
  for (  Class<?> adviceClass : adviceClasses) {
    Aspect aspect=adviceClass.getAnnotation(Aspect.class);
    if (aspect == null) {
      throw new IllegalArgumentException("Class " + adviceClass.getName() + " is not an aspect");
    }
  }
  String jvmClassPath=ClassPathUtil.getJVMClassPath(true);
  URL[] urls=null;
  try {
    urls=ClassPathUtil.getClassPathURLs(jvmClassPath);
  }
 catch (  MalformedURLException murle) {
    throw new RuntimeException(murle);
  }
  String dumpDirName=System.getProperty("junit.aspectj.dump");
  Method method=frameworkMethod.getMethod();
  Class<?> clazz=method.getDeclaringClass();
  String className=clazz.getName();
  File dumpDir=new File(dumpDirName,className.concat(StringPool.PERIOD).concat(method.getName()));
  return new WeavingClassLoader(urls,adviceClasses,dumpDir);
}
