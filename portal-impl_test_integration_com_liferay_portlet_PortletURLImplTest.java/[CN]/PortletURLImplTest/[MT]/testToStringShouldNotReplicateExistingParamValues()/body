{
  ThemeDisplay themeDisplay=new ThemeDisplay();
  Layout layout=LayoutTestUtil.addLayout(_group);
  themeDisplay.setLayout(layout);
  themeDisplay.setPlid(layout.getPlid());
  themeDisplay.setPortalURL("http://localhost:8080");
  themeDisplay.setScopeGroupId(_group.getGroupId());
  themeDisplay.setSiteGroupId(_group.getGroupId());
  long plid=themeDisplay.getPlid();
  Map<String,String[]> renderParameters=new HashMap<>();
  String[] values=new String[]{"test1","test2"};
  renderParameters.put("test",values);
  MockHttpServletRequest mockServletRequest=new MockHttpServletRequest();
  mockServletRequest.setAttribute(WebKeys.THEME_DISPLAY,themeDisplay);
  RenderParametersPool.put(mockServletRequest,plid,PortletKeys.LOGIN,renderParameters);
  PortletURL portletURL=PortletURLFactoryUtil.create(mockServletRequest,PortletKeys.LOGIN,plid,PortletRequest.RENDER_PHASE);
  PortletURLImpl portletURLImpl=(PortletURLImpl)portletURL;
  portletURLImpl.setCopyCurrentRenderParameters(true);
  StringBuilder sb=new StringBuilder(10);
  sb.append("http://localhost:8080/web");
  sb.append(_group.getFriendlyURL());
  sb.append(layout.getFriendlyURL());
  sb.append("?p_p_id=");
  sb.append(PortletKeys.LOGIN);
  sb.append("&p_p_lifecycle=0&_");
  sb.append(PortletKeys.LOGIN);
  sb.append("_test=test1&_");
  sb.append(PortletKeys.LOGIN);
  sb.append("_test=test2");
  Assert.assertEquals(sb.toString(),portletURL.toString());
  portletURLImpl.clearCache();
  Assert.assertEquals(sb.toString(),portletURL.toString());
  portletURLImpl.clearCache();
  Assert.assertEquals(sb.toString(),portletURL.toString());
}
