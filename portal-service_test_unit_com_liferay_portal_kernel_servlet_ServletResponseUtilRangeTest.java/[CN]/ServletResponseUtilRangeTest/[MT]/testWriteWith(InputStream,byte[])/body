{
  String rangeHeader="bytes=0-9,980-989,980-999,990-999";
  setupRange(request,rangeHeader);
  List<Range> ranges=ServletResponseUtil.getRanges(request,response,content.length);
  MockHttpServletResponse mockHttpServletResponse=new MockHttpServletResponse();
  mockHttpServletResponse.setCharacterEncoding(StringPool.UTF8);
  ServletResponseUtil.write(request,mockHttpServletResponse,"filename.txt",ranges,inputStream,content.length,"text/plain");
  String contentType=mockHttpServletResponse.getContentType();
  Assert.assertTrue(contentType.startsWith(_BOUNDARY_PREFACE));
  String boundary=contentType.substring(_BOUNDARY_PREFACE.length());
  String responseBody=mockHttpServletResponse.getContentAsString();
  Assert.assertTrue(responseBody.startsWith("\r\n--" + boundary + "\r\n"));
  Assert.assertTrue(responseBody.endsWith("--" + boundary + "--\r\n"));
  String[] responseBodies=StringUtil.split(responseBody,boundary);
  Assert.assertEquals(ranges.size() + 2,responseBodies.length);
  Assert.assertEquals(StringPool.DOUBLE_DASH,responseBodies[0]);
  Assert.assertEquals(StringPool.DOUBLE_DASH,responseBodies[ranges.size() + 1]);
  for (int i=0; i < ranges.size(); i++) {
    Range range=ranges.get(i);
    String[] lines=StringUtil.split(responseBodies[i + 1],StringPool.RETURN_NEW_LINE);
    Assert.assertEquals("Content-Type: text/plain",lines[0]);
    Assert.assertEquals("Content-Range: " + range.getContentRange(),lines[1]);
    Assert.assertTrue(Validator.isNull(lines[2]));
    int start=(int)range.getStart();
    int end=(int)range.getEnd();
    byte[] bytes=ArrayUtil.subset(content,start,end + 1);
    Assert.assertArrayEquals(bytes,lines[3].getBytes("UTF-8"));
    Assert.assertEquals(StringPool.DOUBLE_DASH,lines[4]);
  }
}
