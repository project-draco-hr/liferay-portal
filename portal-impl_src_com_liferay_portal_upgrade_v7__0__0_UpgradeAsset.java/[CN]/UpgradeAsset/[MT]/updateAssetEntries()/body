{
  long classNameId=PortalUtil.getClassNameId("com.liferay.journal.model.JournalArticle");
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    connection=DataAccess.getUpgradeOptimizedConnection();
    ps=connection.prepareStatement("select resourcePrimKey, structureId from JournalArticle " + "where structureId != ''");
    rs=ps.executeQuery();
    try (PreparedStatement ps2=AutoBatchPreparedStatementUtil.autoBatch(connection.prepareStatement("update AssetEntry set classTypeId = ? where " + "classNameId = ? and classPK = ?"))){
      while (rs.next()) {
        long resourcePrimKey=rs.getLong("resourcePrimKey");
        String structureId=rs.getString("structureId");
        long ddmStructureId=getDDMStructureId(structureId);
        ps2.setLong(1,ddmStructureId);
        ps2.setLong(2,classNameId);
        ps2.setLong(3,resourcePrimKey);
        ps2.addBatch();
      }
      ps2.executeBatch();
    }
   }
  finally {
    DataAccess.cleanUp(ps,rs);
  }
  try {
    StringBundler sb=new StringBundler(9);
    sb.append("select JournalArticle.resourcePrimKey from (select ");
    sb.append("JournalArticle.resourcePrimkey as primKey, ");
    sb.append("max(JournalArticle.version) as maxVersion from ");
    sb.append("JournalArticle group by ");
    sb.append("JournalArticle.resourcePrimkey) temp_table inner join ");
    sb.append("JournalArticle on (JournalArticle.indexable = ");
    sb.append("?) and (JournalArticle.status = 0) and ");
    sb.append("(JournalArticle.resourcePrimkey = temp_table.primKey) ");
    sb.append("and (JournalArticle.version = temp_table.maxVersion)");
    ps=connection.prepareStatement(sb.toString());
    ps.setBoolean(1,false);
    rs=ps.executeQuery();
    try (PreparedStatement ps2=AutoBatchPreparedStatementUtil.autoBatch(connection.prepareStatement("update AssetEntry set listable = ? where " + "classNameId = ? and classPK = ?"))){
      while (rs.next()) {
        long classPK=rs.getLong("resourcePrimKey");
        ps2.setBoolean(1,false);
        ps2.setLong(2,classNameId);
        ps2.setLong(3,classPK);
        ps2.addBatch();
      }
      ps2.executeBatch();
    }
   }
  finally {
    DataAccess.cleanUp(ps,rs);
  }
}
