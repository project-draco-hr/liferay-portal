{
  long classNameId=PortalUtil.getClassNameId("com.liferay.journal.model.JournalArticle");
  try (PreparedStatement ps1=connection.prepareStatement("select resourcePrimKey, structureId from JournalArticle " + "where structureId != ''");ResultSet rs=ps1.executeQuery()){
    try (PreparedStatement ps2=AutoBatchPreparedStatementUtil.autoBatch(connection.prepareStatement("update AssetEntry set classTypeId = ? where " + "classNameId = ? and classPK = ?"))){
      while (rs.next()) {
        long resourcePrimKey=rs.getLong("resourcePrimKey");
        String structureId=rs.getString("structureId");
        long ddmStructureId=getDDMStructureId(structureId);
        ps2.setLong(1,ddmStructureId);
        ps2.setLong(2,classNameId);
        ps2.setLong(3,resourcePrimKey);
        ps2.addBatch();
      }
      ps2.executeBatch();
    }
   }
   StringBundler sb=new StringBundler(9);
  sb.append("select JournalArticle.resourcePrimKey from (select ");
  sb.append("JournalArticle.resourcePrimkey as primKey, ");
  sb.append("max(JournalArticle.version) as maxVersion from ");
  sb.append("JournalArticle group by ");
  sb.append("JournalArticle.resourcePrimkey) temp_table inner join ");
  sb.append("JournalArticle on (JournalArticle.indexable = ");
  sb.append("?) and (JournalArticle.status = 0) and ");
  sb.append("(JournalArticle.resourcePrimkey = temp_table.primKey) ");
  sb.append("and (JournalArticle.version = temp_table.maxVersion)");
  try (PreparedStatement ps1=connection.prepareStatement(sb.toString())){
    ps1.setBoolean(1,false);
    try (PreparedStatement ps2=AutoBatchPreparedStatementUtil.autoBatch(connection.prepareStatement("update AssetEntry set listable = ? where " + "classNameId = ? and classPK = ?"));ResultSet rs=ps1.executeQuery()){
      while (rs.next()) {
        long classPK=rs.getLong("resourcePrimKey");
        ps2.setBoolean(1,false);
        ps2.setLong(2,classNameId);
        ps2.setLong(3,classPK);
        ps2.addBatch();
      }
      ps2.executeBatch();
    }
   }
 }
