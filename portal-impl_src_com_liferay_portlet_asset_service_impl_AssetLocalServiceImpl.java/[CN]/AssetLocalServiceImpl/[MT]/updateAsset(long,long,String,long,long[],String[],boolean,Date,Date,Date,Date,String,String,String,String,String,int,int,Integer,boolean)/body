{
  User user=userPersistence.findByPrimaryKey(userId);
  long classNameId=PortalUtil.getClassNameId(className);
  title=StringUtil.shorten(title,300,StringPool.BLANK);
  Date now=new Date();
  validate(className,tagNames);
  Asset asset=assetPersistence.fetchByC_C(classNameId,classPK);
  if (asset == null) {
    long assetId=counterLocalService.increment();
    asset=assetPersistence.create(assetId);
    asset.setCompanyId(user.getCompanyId());
    asset.setUserId(user.getUserId());
    asset.setUserName(user.getFullName());
    asset.setCreateDate(now);
    asset.setClassNameId(classNameId);
    asset.setClassPK(classPK);
    asset.setVisible(visible);
    asset.setPublishDate(publishDate);
    asset.setExpirationDate(expirationDate);
    if (priority == null) {
      asset.setPriority(0);
    }
    asset.setViewCount(0);
  }
  asset.setGroupId(groupId);
  asset.setModifiedDate(now);
  asset.setVisible(visible);
  asset.setStartDate(startDate);
  asset.setEndDate(endDate);
  asset.setPublishDate(publishDate);
  asset.setExpirationDate(expirationDate);
  asset.setMimeType(mimeType);
  asset.setTitle(title);
  asset.setDescription(description);
  asset.setSummary(summary);
  asset.setUrl(url);
  asset.setHeight(height);
  asset.setWidth(width);
  if (priority != null) {
    asset.setPriority(priority.intValue());
  }
  if (categoryIds != null) {
    assetPersistence.setAssetCategories(asset.getAssetId(),categoryIds);
  }
  if (tagNames != null) {
    List<AssetTag> tags=new ArrayList<AssetTag>(tagNames.length);
    for (    String tagName : tagNames) {
      AssetTag tag=null;
      try {
        tag=assetTagLocalService.getTag(groupId,tagName);
      }
 catch (      NoSuchTagException nste) {
        ServiceContext serviceContext=new ServiceContext();
        serviceContext.setAddCommunityPermissions(true);
        serviceContext.setAddGuestPermissions(true);
        serviceContext.setScopeGroupId(groupId);
        tag=assetTagLocalService.addTag(user.getUserId(),tagName,PropsValues.ASSET_TAGS_PROPERTIES_DEFAULT,serviceContext);
      }
      if (tag != null) {
        tags.add(tag);
      }
    }
    assetPersistence.setAssetTags(asset.getAssetId(),tags);
  }
  if ((categoryIds != null) || (tagNames != null)) {
    assetPersistence.update(asset,false);
  }
  if (!sync) {
    return asset;
  }
  if (className.equals(BlogsEntry.class.getName())) {
    BlogsEntry entry=blogsEntryPersistence.findByPrimaryKey(classPK);
    entry.setTitle(title);
    blogsEntryPersistence.update(entry,false);
  }
 else   if (className.equals(BookmarksEntry.class.getName())) {
    BookmarksEntry entry=bookmarksEntryPersistence.findByPrimaryKey(classPK);
    entry.setName(title);
    entry.setComments(description);
    entry.setUrl(url);
    bookmarksEntryPersistence.update(entry,false);
  }
 else   if (className.equals(DLFileEntry.class.getName())) {
    DLFileEntry fileEntry=dlFileEntryPersistence.findByPrimaryKey(classPK);
    fileEntry.setTitle(title);
    fileEntry.setDescription(description);
    dlFileEntryPersistence.update(fileEntry,false);
  }
 else   if (className.equals(JournalArticle.class.getName())) {
    JournalArticle article=journalArticlePersistence.findByPrimaryKey(classPK);
    article.setTitle(title);
    article.setDescription(description);
    journalArticlePersistence.update(article,false);
  }
 else   if (className.equals(MBMessage.class.getName())) {
    MBMessage message=mbMessagePersistence.findByPrimaryKey(classPK);
    message.setSubject(title);
    mbMessagePersistence.update(message,false);
  }
 else   if (className.equals(WikiPage.class.getName())) {
    WikiPage page=wikiPagePersistence.findByPrimaryKey(classPK);
    page.setTitle(title);
    wikiPagePersistence.update(page,false);
  }
  return asset;
}
