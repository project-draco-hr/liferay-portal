{
  IntrabandProxyInstallationUtil.checkProxyMethodSignatures(IntrabandProxyInstallationUtil.installSkeleton(TestClass.class,_targetLocator),_stubProxyMethodSignatures);
  IntrabandProxySkeleton intrabandProxySkeleton=IntrabandProxySkeletonRegistryUtil.get(TestClass.class.getName());
  Assert.assertSame(AsyncIntrabandProxySkeleton.class,intrabandProxySkeleton.getClass());
  intrabandProxySkeleton=(IntrabandProxySkeleton)ReflectionTestUtil.getFieldValue(intrabandProxySkeleton,"_intrabandProxySkeleton");
  Assert.assertEquals(_targetLocator,ReflectionTestUtil.getFieldValue(intrabandProxySkeleton,"_targetLocator"));
  try {
    IntrabandProxyInstallationUtil.installSkeleton(_classLoader,TestClass.class,null);
    Assert.fail();
  }
 catch (  RuntimeException re) {
    Throwable throwable=re.getCause();
    throwable=throwable.getCause();
    Assert.assertSame(NullPointerException.class,throwable.getClass());
    Assert.assertEquals("Target locator is null",throwable.getMessage());
  }
  try {
    IntrabandProxyInstallationUtil.checkProxyMethodSignatures(IntrabandProxyInstallationUtil.installSkeleton(_classLoader,TestClass.class,_targetLocator),new String[]{"doStuffX-()Ljava/lang/Object;"});
    Assert.fail();
  }
 catch (  IllegalStateException ise) {
    Assert.assertEquals("Skeleton and stub proxy method signatures do not match. " + "Skeleton is [doStuff-()Ljava/lang/Object;]. Stub is " + "[doStuffX-()Ljava/lang/Object;].",ise.getMessage());
  }
}
