{
  FileUtil fileUtil=new FileUtil();
  fileUtil.setFile(new FileImpl());
  IntrabandProxySkeletonRegistryUtil.unregister(TestClass.class.getName());
  MockIntraband mockIntraband=new MockIntraband(){
    @Override protected Datagram processDatagram(    Datagram datagram){
      Deserializer deserializer=new Deserializer(datagram.getDataByteBuffer());
      Serializer serializer=new Serializer();
      try {
        ProcessCallable<Serializable> processCallable=deserializer.readObject();
        serializer.writeObject(new RPCResponse(processCallable.call()));
      }
 catch (      Exception e) {
        serializer.writeObject(new RPCResponse(e));
      }
      return Datagram.createResponseDatagram(datagram,serializer.toByteBuffer());
    }
  }
;
  _mockRegistrationReference=new MockRegistrationReference(mockIntraband);
  _stubProxyMethodSignatures=IntrabandProxyUtil.getProxyMethodSignatures(IntrabandProxyUtil.getStubClass(TestClass.class,"skeletonId"));
}
