{
  ObjectInputStream ois=null;
  Thread thread=Thread.currentThread();
  try {
    ois=new ProtectedClassLoaderObjectInputStream(request.getInputStream(),thread.getContextClassLoader());
  }
 catch (  IOException ioe) {
    if (_log.isWarnEnabled()) {
      _log.warn(ioe,ioe);
    }
    return;
  }
  Object returnObj=null;
  boolean remoteAccess=AccessControlThreadLocal.isRemoteAccess();
  try {
    AccessControlThreadLocal.setRemoteAccess(true);
    ObjectValuePair<HttpPrincipal,MethodHandler> ovp=(ObjectValuePair<HttpPrincipal,MethodHandler>)ois.readObject();
    MethodHandler methodHandler=ovp.getValue();
    if (methodHandler != null) {
      MethodKey methodKey=methodHandler.getMethodKey();
      if (!isValidRequest(methodKey.getDeclaringClass())) {
        return;
      }
      returnObj=methodHandler.invoke();
    }
  }
 catch (  InvocationTargetException ite) {
    returnObj=ite.getCause();
    if (!(returnObj instanceof PortalException)) {
      _log.error(ite,ite);
      if (returnObj != null) {
        Throwable throwable=(Throwable)returnObj;
        returnObj=new SystemException(throwable.getMessage());
      }
 else {
        returnObj=new SystemException();
      }
    }
  }
catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    AccessControlThreadLocal.setRemoteAccess(remoteAccess);
  }
  if (returnObj != null) {
    try (ObjectOutputStream oos=new ObjectOutputStream(response.getOutputStream())){
      oos.writeObject(returnObj);
    }
 catch (    IOException ioe) {
      _log.error(ioe,ioe);
      throw ioe;
    }
  }
}
