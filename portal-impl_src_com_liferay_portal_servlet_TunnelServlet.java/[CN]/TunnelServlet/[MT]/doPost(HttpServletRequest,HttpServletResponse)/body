{
  ObjectInputStream ois;
  try {
    ois=new ObjectInputStream(request.getInputStream());
  }
 catch (  IOException ioe) {
    if (_log.isWarnEnabled()) {
      _log.warn(ioe,ioe);
    }
    return;
  }
  Object returnObj=null;
  try {
    ObjectValuePair<HttpPrincipal,Object> ovp=(ObjectValuePair<HttpPrincipal,Object>)ois.readObject();
    Object ovpValue=ovp.getValue();
    MethodHandler methodHandler=null;
    MethodWrapper methodWrapper=null;
    if (ovpValue instanceof MethodHandler) {
      methodHandler=(MethodHandler)ovpValue;
    }
 else {
      methodWrapper=(MethodWrapper)ovpValue;
    }
    if (methodHandler != null) {
      if (!isValidRequest(methodHandler.getClassName())) {
        return;
      }
    }
 else {
      if (!isValidRequest(methodWrapper.getClassName())) {
        return;
      }
    }
    if (returnObj == null) {
      if (methodHandler != null) {
        returnObj=methodHandler.invoke(true);
      }
 else {
        returnObj=MethodInvoker.invoke(methodWrapper);
      }
    }
  }
 catch (  InvocationTargetException ite) {
    returnObj=ite.getCause();
    if (!(returnObj instanceof PortalException)) {
      ite.printStackTrace();
      returnObj=new SystemException();
    }
  }
catch (  Exception e) {
    _log.error(e,e);
  }
  if (returnObj != null) {
    try {
      ObjectOutputStream oos=new ObjectOutputStream(response.getOutputStream());
      oos.writeObject(returnObj);
      oos.flush();
      oos.close();
    }
 catch (    IOException ioe) {
      _log.error(ioe,ioe);
      throw ioe;
    }
  }
}
