{
  MockHttpServletRequest mockHttpServletRequest=new MockHttpServletRequest();
  StringBundler sb=new StringBundler(4);
  User user=TestPropsValues.getUser();
  Group groupUser=user.getGroup();
  sb.append(groupUser.getFriendlyURL());
  sb.append(VirtualLayoutConstants.CANONICAL_URL_SEPARATOR);
  Group userGroupGroup=GroupLocalServiceUtil.getGroup(userGroupGroupId);
  sb.append(userGroupGroup.getFriendlyURL());
  sb.append(layoutFriendlyURL);
  mockHttpServletRequest.setPathInfo(sb.toString());
  sb=new StringBundler(5);
  String groupServletMapping=_PUBLIC_GROUP_SERVLET_MAPPING;
  if (layout.isPrivateLayout()) {
    groupServletMapping=_PRIVATE_GROUP_SERVLET_MAPPING;
  }
  sb.append(groupServletMapping);
  sb.append(groupUser.getFriendlyURL());
  sb.append(VirtualLayoutConstants.CANONICAL_URL_SEPARATOR);
  sb.append(userGroupGroup.getFriendlyURL());
  sb.append(layoutFriendlyURL);
  mockHttpServletRequest.setRequestURI(sb.toString());
  sb=new StringBundler(7);
  sb.append(StringPool.SLASH);
  sb.append(PortalUtil.getI18nPathLanguageId(locale,StringPool.BLANK));
  sb.append(groupServletMapping);
  sb.append(groupUser.getFriendlyURL());
  sb.append(VirtualLayoutConstants.CANONICAL_URL_SEPARATOR);
  sb.append(userGroupGroup.getFriendlyURL());
  sb.append(expectedLayoutFriendlyURL);
  String localizedFriendlyURL=PortalUtil.getLocalizedFriendlyURL(mockHttpServletRequest,layout,locale,originalLocale);
  Assert.assertEquals(sb.toString(),localizedFriendlyURL);
}
