{
  String text=n.getText();
  int textSize=text.length();
  if (textSize == 0) {
    return;
  }
  if (textSize < 3) {
    n.setBeginJavaLine(out.getJavaLine());
    int lineInc=0;
    for (int i=0; i < textSize; i++) {
      char ch=text.charAt(i);
      out.printil("out.write(" + quote(ch) + ");");
      if (i > 0) {
        n.addSmap(lineInc);
      }
      if (ch == '\n') {
        lineInc++;
      }
    }
    n.setEndJavaLine(out.getJavaLine());
    return;
  }
  if (genBytes || ctxt.getOptions().genStringAsCharArray()) {
    n.setBeginJavaLine(out.getJavaLine());
    ServletWriter aOut;
    if (arrayBuffer == null) {
      arrayBuffer=new GenBuffer();
      aOut=arrayBuffer.getOut();
      aOut.pushIndent();
      textMap=new HashMap();
    }
 else {
      aOut=arrayBuffer.getOut();
    }
    String arrayName=(String)textMap.get(text);
    if (arrayName == null) {
      arrayName="_jspx_array_" + arrayCount++;
      textMap.put(text,arrayName);
      if (genBytes) {
        aOut.printin("private final static String ");
        aOut.print(arrayName);
        aOut.print("S = ");
        aOut.print(quote(text));
        aOut.println(";");
        aOut.printin("private final static byte[] ");
        aOut.print(arrayName);
        aOut.print(" = _jspx_getBytes(");
        aOut.print(arrayName);
        aOut.println("S);");
      }
 else {
        aOut.printin("private final static char[] ");
        aOut.print(arrayName);
        aOut.print(" = ");
        aOut.print(quote(text));
        aOut.println(".toCharArray();");
      }
    }
    if (genBytes) {
      out.printin("((org.apache.jasper.runtime.JspWriterImpl)out).write(_jspx_same_encoding(response.getCharacterEncoding()), ");
      out.print(arrayName);
      out.print(", ");
      out.print(arrayName);
      out.println("S);");
    }
 else {
      out.printil("out.write(" + arrayName + ");");
    }
    n.setEndJavaLine(out.getJavaLine());
    return;
  }
  n.setBeginJavaLine(out.getJavaLine());
  out.printin();
  StringBuffer sb=new StringBuffer("out.write(\"");
  int initLength=sb.length();
  int count=JspUtil.CHUNKSIZE;
  int srcLine=0;
  for (int i=0; i < text.length(); i++) {
    char ch=text.charAt(i);
    --count;
switch (ch) {
case '"':
      sb.append('\\').append('\"');
    break;
case '\\':
  sb.append('\\').append('\\');
break;
case '\r':
sb.append('\\').append('r');
break;
case '\n':
sb.append('\\').append('n');
srcLine++;
if (breakAtLF || count < 0) {
sb.append("\");");
out.println(sb.toString());
if (i < text.length() - 1) {
out.printin();
}
sb.setLength(initLength);
count=JspUtil.CHUNKSIZE;
}
n.addSmap(srcLine);
break;
case '\t':
sb.append('\\').append('t');
break;
case '$':
if (pageInfo.isELIgnored() && (i + 1 < text.length()) && (text.charAt(i + 1) == '{')) {
sb.append('\\').append('\\');
}
sb.append(ch);
break;
case '#':
boolean unescapePound=false;
if (isTagFile) {
String verS=ctxt.getTagInfo().getTagLibrary().getRequiredVersion();
Double version=Double.valueOf(verS).doubleValue();
if (version < 2.1) {
unescapePound=true;
}
}
unescapePound=unescapePound || pageInfo.isELIgnored() || pageInfo.isDeferredSyntaxAllowedAsLiteral();
if (unescapePound && (i + 1 < text.length()) && (text.charAt(i + 1) == '{')) {
sb.append('\\').append('\\');
}
sb.append(ch);
break;
default :
sb.append(ch);
}
}
if (sb.length() > initLength) {
sb.append("\");");
out.println(sb.toString());
}
n.setEndJavaLine(out.getJavaLine());
}
