{
  String name=n.getTextAttribute("id");
  String scope=n.getTextAttribute("scope");
  String klass=n.getTextAttribute("class");
  String type=n.getTextAttribute("type");
  Node.JspAttribute beanName=n.getBeanName();
  boolean generateNew=false;
  String canonicalName=null;
  if (klass != null) {
    try {
      Class bean=ctxt.getClassLoader().loadClass(klass);
      if (klass.indexOf('$') >= 0) {
        canonicalName=JspUtil.getCanonicalName(bean);
      }
 else {
        canonicalName=klass;
      }
      int modifiers=bean.getModifiers();
      if (!Modifier.isPublic(modifiers) || Modifier.isInterface(modifiers) || Modifier.isAbstract(modifiers)) {
        throw new Exception("Invalid bean class modifier");
      }
      bean.getConstructor(new Class[]{});
      generateNew=true;
    }
 catch (    Exception e) {
      if (ctxt.getOptions().getErrorOnUseBeanInvalidClassAttribute()) {
        err.jspError(n,"jsp.error.invalid.bean",klass);
      }
      if (canonicalName == null) {
        canonicalName=klass.replace('$','.');
      }
    }
    if (type == null) {
      type=canonicalName;
    }
  }
  String scopename="PageContext.PAGE_SCOPE";
  String lock="_jspx_page_context";
  if ("request".equals(scope)) {
    scopename="PageContext.REQUEST_SCOPE";
    lock="request";
  }
 else   if ("session".equals(scope)) {
    scopename="PageContext.SESSION_SCOPE";
    lock="session";
  }
 else   if ("application".equals(scope)) {
    scopename="PageContext.APPLICATION_SCOPE";
    lock="application";
  }
  n.setBeginJavaLine(out.getJavaLine());
  out.printin(type);
  out.print(' ');
  out.print(name);
  out.println(" = null;");
  if (klass != null || beanName != null) {
    out.printin("synchronized (");
    out.print(lock);
    out.println(") {");
    out.pushIndent();
  }
  out.printin(name);
  out.print(" = (");
  out.print(type);
  out.print(") _jspx_page_context.getAttribute(");
  out.print(quote(name));
  out.print(", ");
  out.print(scopename);
  out.println(");");
  out.printin("if (");
  out.print(name);
  out.println(" == null){");
  out.pushIndent();
  if (klass == null && beanName == null) {
    out.printin("throw new java.lang.InstantiationException(\"bean ");
    out.print(name);
    out.println(" not found within scope\");");
  }
 else {
    if (!generateNew) {
      String binaryName;
      if (beanName != null) {
        if (beanName.isNamedAttribute()) {
          binaryName=generateNamedAttributeValue(beanName.getNamedAttributeNode());
        }
 else {
          binaryName=attributeValue(beanName,false,String.class);
        }
      }
 else {
        binaryName=quote(klass);
      }
      out.printil("try {");
      out.pushIndent();
      out.printin(name);
      out.print(" = (");
      out.print(type);
      out.print(") java.beans.Beans.instantiate(");
      out.print("this.getClass().getClassLoader(), ");
      out.print(binaryName);
      out.println(");");
      out.popIndent();
      out.printil("} catch (ClassNotFoundException exc) {");
      out.pushIndent();
      out.printil("throw new InstantiationException(exc.getMessage());");
      out.popIndent();
      out.printil("} catch (Exception exc) {");
      out.pushIndent();
      out.printin("throw new ServletException(");
      out.print("\"Cannot create bean of class \" + ");
      out.print(binaryName);
      out.println(", exc);");
      out.popIndent();
      out.printil("}");
    }
 else {
      out.printin(name);
      out.print(" = new ");
      out.print(canonicalName);
      out.println("();");
    }
    out.printin("_jspx_page_context.setAttribute(");
    out.print(quote(name));
    out.print(", ");
    out.print(name);
    out.print(", ");
    out.print(scopename);
    out.println(");");
    visitBody(n);
  }
  out.popIndent();
  out.printil("}");
  if (klass != null || beanName != null) {
    out.popIndent();
    out.printil("}");
  }
  n.setEndJavaLine(out.getJavaLine());
}
