{
  n.setBeginJavaLine(out.getJavaLine());
  Hashtable map=new Hashtable();
  Node.JspAttribute[] attrs=n.getJspAttributes();
  for (int i=0; attrs != null && i < attrs.length; i++) {
    String attrStr=null;
    StringBuffer genStr=new StringBuffer(" + ");
    boolean genCloseParen=false;
    if (attrs[i].isNamedAttribute()) {
      Node.NamedAttribute attributeNode=attrs[i].getNamedAttributeNode();
      Node.JspAttribute omit=attributeNode.getOmit();
      if ((omit != null) && omit.isLiteral() && JspUtil.booleanValue(omit.getValue())) {
        continue;
      }
      attrStr=generateNamedAttributeValue(attrs[i].getNamedAttributeNode());
      if (omit != null && !omit.isLiteral()) {
        genCloseParen=true;
        genStr.append("(").append(attributeValue(omit,false,Boolean.class)).append("? \"\": ");
      }
    }
 else {
      attrStr=attributeValue(attrs[i],false,Object.class);
    }
    genStr.append("\" ").append(attrs[i].getName()).append("=\\\"\" + ").append(attrStr).append(" + \"\\\"\"");
    if (genCloseParen)     genStr.append(")");
    map.put(attrs[i].getName(),genStr.toString());
  }
  String elemName=attributeValue(n.getNameAttribute(),false,String.class);
  out.printin("out.write(\"<\"");
  out.print(" + " + elemName);
  Enumeration enumn=map.keys();
  while (enumn.hasMoreElements()) {
    String attrName=(String)enumn.nextElement();
    out.print((String)map.get(attrName));
  }
  boolean hasBody=false;
  Node.Nodes subelements=n.getBody();
  if (subelements != null) {
    for (int i=0; i < subelements.size(); i++) {
      Node subelem=subelements.getNode(i);
      if (!(subelem instanceof Node.NamedAttribute)) {
        hasBody=true;
        break;
      }
    }
  }
  if (hasBody) {
    out.println(" + \">\");");
    visitBody(n);
    out.printin("out.write(\"</\"");
    out.print(" + " + elemName);
    out.println(" + \">\");");
  }
 else {
    out.println(" + \"/>\");");
  }
  n.setEndJavaLine(out.getJavaLine());
}
