{
  long pk=ServiceTestUtil.nextLong();
  ServiceComponent newServiceComponent=_persistence.create(pk);
  newServiceComponent.setBuildNamespace(ServiceTestUtil.randomString());
  newServiceComponent.setBuildNumber(ServiceTestUtil.nextLong());
  newServiceComponent.setBuildDate(ServiceTestUtil.nextLong());
  newServiceComponent.setData(ServiceTestUtil.randomString());
  newServiceComponent.setMvccVersion(ServiceTestUtil.nextLong());
  _persistence.update(newServiceComponent);
  ServiceComponent existingServiceComponent=_persistence.findByPrimaryKey(newServiceComponent.getPrimaryKey());
  Assert.assertEquals(existingServiceComponent.getServiceComponentId(),newServiceComponent.getServiceComponentId());
  Assert.assertEquals(existingServiceComponent.getBuildNamespace(),newServiceComponent.getBuildNamespace());
  Assert.assertEquals(existingServiceComponent.getBuildNumber(),newServiceComponent.getBuildNumber());
  Assert.assertEquals(existingServiceComponent.getBuildDate(),newServiceComponent.getBuildDate());
  Assert.assertEquals(existingServiceComponent.getData(),newServiceComponent.getData());
  Assert.assertEquals(existingServiceComponent.getMvccVersion(),newServiceComponent.getMvccVersion());
}
