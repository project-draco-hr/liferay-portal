{
  long pk=nextLong();
  TagsProperty newTagsProperty=_persistence.create(pk);
  newTagsProperty.setCompanyId(nextLong());
  newTagsProperty.setUserId(nextLong());
  newTagsProperty.setUserName(randomString());
  newTagsProperty.setCreateDate(nextDate());
  newTagsProperty.setModifiedDate(nextDate());
  newTagsProperty.setEntryId(nextLong());
  newTagsProperty.setKey(randomString());
  newTagsProperty.setValue(randomString());
  _persistence.update(newTagsProperty,false);
  TagsProperty existingTagsProperty=_persistence.findByPrimaryKey(newTagsProperty.getPrimaryKey());
  assertEquals(existingTagsProperty.getPropertyId(),newTagsProperty.getPropertyId());
  assertEquals(existingTagsProperty.getCompanyId(),newTagsProperty.getCompanyId());
  assertEquals(existingTagsProperty.getUserId(),newTagsProperty.getUserId());
  assertEquals(existingTagsProperty.getUserName(),newTagsProperty.getUserName());
  assertEquals(Time.getShortTimestamp(existingTagsProperty.getCreateDate()),Time.getShortTimestamp(newTagsProperty.getCreateDate()));
  assertEquals(Time.getShortTimestamp(existingTagsProperty.getModifiedDate()),Time.getShortTimestamp(newTagsProperty.getModifiedDate()));
  assertEquals(existingTagsProperty.getEntryId(),newTagsProperty.getEntryId());
  assertEquals(existingTagsProperty.getKey(),newTagsProperty.getKey());
  assertEquals(existingTagsProperty.getValue(),newTagsProperty.getValue());
}
