{
  if (users.size() == 0) {
    throw new IllegalArgumentException();
  }
  GenericEntry entry=new GenericEntry();
  entry.addProperty(Constants.FROM,from);
  entry.addProperty(Constants.TO,to);
  entry.addProperty(Constants.SUBJECT,subject);
  entry.addProperty(Constants.HAS_THE_WORD,hasTheWord);
  entry.addProperty(Constants.DOESNT_HAVE_THE_WORD,doesNotHaveTheWord);
  entry.addProperty(Constants.HAS_ATTACHMENT,String.valueOf(hasAttachment));
  entry.addProperty(Constants.SHOULD_MARK_AS_READ,String.valueOf(shouldMarkAsRead));
  entry.addProperty(Constants.SHOULD_ARCHIVE,String.valueOf(shouldArchive));
  entry.addProperty(Constants.LABEL,label);
  entry.addProperty(Constants.FORWARD_TO,forwardTo);
  entry.addProperty(Constants.NEVER_SPAM,String.valueOf(neverSpam));
  entry.addProperty(Constants.SHOULD_STAR,String.valueOf(shouldStar));
  entry.addProperty(Constants.SHOULD_TRASH,String.valueOf(shouldTrash));
  for (  String user : users) {
    logger.log(Level.INFO,"Creating filter ( " + "from: " + from + ", to: "+ to+ ", subject: "+ subject+ ", hasTheWord: "+ hasTheWord+ ", doesNotHaveTheWord: "+ doesNotHaveTheWord+ ", hasAttachment: "+ hasAttachment+ ", shouldMarkAsRead: "+ shouldMarkAsRead+ ", shouldArchive: "+ shouldArchive+ ", label: "+ label+ ", forwardTo: "+ forwardTo+ ", neverSpam: "+ neverSpam+ ", shouldStar: "+ shouldStar+ ", shouldTrash: "+ shouldTrash+ " ) for user "+ user+ " ...");
    insertSettings(user,entry,"filter");
    logger.log(Level.INFO,"Successfully created filter.");
  }
}
