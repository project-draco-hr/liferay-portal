{
  long pk=nextLong();
  MBMessageFlag newMBMessageFlag=_persistence.create(pk);
  newMBMessageFlag.setUserId(nextLong());
  newMBMessageFlag.setModifiedDate(nextDate());
  newMBMessageFlag.setThreadId(nextLong());
  newMBMessageFlag.setMessageId(nextLong());
  newMBMessageFlag.setFlag(nextInt());
  _persistence.update(newMBMessageFlag,false);
  MBMessageFlag existingMBMessageFlag=_persistence.findByPrimaryKey(newMBMessageFlag.getPrimaryKey());
  assertEquals(existingMBMessageFlag.getMessageFlagId(),newMBMessageFlag.getMessageFlagId());
  assertEquals(existingMBMessageFlag.getUserId(),newMBMessageFlag.getUserId());
  assertEquals(Time.getShortTimestamp(existingMBMessageFlag.getModifiedDate()),Time.getShortTimestamp(newMBMessageFlag.getModifiedDate()));
  assertEquals(existingMBMessageFlag.getThreadId(),newMBMessageFlag.getThreadId());
  assertEquals(existingMBMessageFlag.getMessageId(),newMBMessageFlag.getMessageId());
  assertEquals(existingMBMessageFlag.getFlag(),newMBMessageFlag.getFlag());
}
