{
  String portletId=ParamUtil.getString(actionRequest,"portletId");
  long[] companyIds=PortalInstances.getCompanyIds();
  if (LuceneHelperUtil.isLoadIndexFromClusterEnabled()) {
    MessageValuesThreadLocal.setValue(ClusterLinkUtil.CLUSTER_FORWARD_MESSAGE,true);
  }
  Set<String> usedSearchEngineIds=new HashSet<String>();
  if (Validator.isNull(portletId)) {
    for (    long companyId : companyIds) {
      try {
        LuceneIndexer luceneIndexer=new LuceneIndexer(companyId);
        luceneIndexer.reindex();
        usedSearchEngineIds.addAll(luceneIndexer.getUsedSearchEngineIds());
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  }
 else {
    Portlet portlet=PortletLocalServiceUtil.getPortletById(companyIds[0],portletId);
    if (portlet == null) {
      return;
    }
    List<Indexer> indexers=portlet.getIndexerInstances();
    if (indexers == null) {
      return;
    }
    for (    Indexer indexer : indexers) {
      for (      long companyId : companyIds) {
        ShardUtil.pushCompanyService(companyId);
        try {
          SearchEngineUtil.deletePortletDocuments(indexer.getSearchEngineId(),companyId,portletId);
          indexer.reindex(new String[]{String.valueOf(companyId)});
          usedSearchEngineIds.add(indexer.getSearchEngineId());
        }
 catch (        Exception e) {
          _log.error(e,e);
        }
        ShardUtil.popCompanyService();
      }
    }
  }
  if (LuceneHelperUtil.isLoadIndexFromClusterEnabled()) {
    Set<BaseAsyncDestination> searchWriterDestinations=new HashSet<BaseAsyncDestination>();
    MessageBus messageBus=MessageBusUtil.getMessageBus();
    for (    String usedSearchEngineId : usedSearchEngineIds) {
      String searchWriterDestinationName=SearchEngineUtil.getSearchWriterDestinationName(usedSearchEngineId);
      Destination destination=messageBus.getDestination(searchWriterDestinationName);
      if (destination instanceof BaseAsyncDestination) {
        BaseAsyncDestination baseAsyncDestination=(BaseAsyncDestination)destination;
        searchWriterDestinations.add(baseAsyncDestination);
      }
    }
    submitClusterIndexLoadingSyncJob(searchWriterDestinations,companyIds);
  }
}
