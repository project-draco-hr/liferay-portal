{
  JSONObject jsonObject=(JSONObject)object;
  String className;
  try {
    className=jsonObject.getString("javaClass");
  }
 catch (  JSONException e) {
    throw new UnmarshallException("could not read javaClass",e);
  }
  if (className == null) {
    throw new UnmarshallException("no javaClass hint");
  }
  try {
    Class javaClass=Class.forName(className);
    Locale.class.isAssignableFrom(javaClass);
  }
 catch (  Exception e) {
    throw new UnmarshallException("error handling javaClass hints " + e.getMessage(),e);
  }
  JSONObject jsonLocale;
  try {
    jsonLocale=jsonObject.getJSONObject("locale");
  }
 catch (  JSONException e) {
    throw new UnmarshallException("could not read locale: " + e.getMessage(),e);
  }
  if (jsonLocale == null) {
    throw new UnmarshallException("locale missing");
  }
  String language=null;
  try {
    language=jsonLocale.getString("language");
  }
 catch (  JSONException e) {
    throw new UnmarshallException("language missing");
  }
  String country=null;
  try {
    country=jsonLocale.getString("country");
  }
 catch (  JSONException e) {
  }
  String variant=null;
  try {
    variant=jsonLocale.getString("variant");
  }
 catch (  JSONException e) {
  }
  Locale localeObject=null;
  if (Validator.isNotNull(language) && Validator.isNotNull(country) && Validator.isNotNull(variant)) {
    localeObject=new Locale(language,country,variant);
  }
 else   if (Validator.isNotNull(language) && Validator.isNotNull(country)) {
    localeObject=new Locale(language,country);
  }
 else {
    localeObject=new Locale(language);
  }
  serializerState.setSerialized(object,localeObject);
  return localeObject;
}
