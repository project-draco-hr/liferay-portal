{
  final String MN="getModes()";
  if (_logger.isLogging(Logger.TRACE_HIGH)) {
    _logger.entry(Logger.TRACE_HIGH,MN);
  }
  if (this._modes != null) {
    if (_logger.isLogging(Logger.TRACE_HIGH)) {
      _logger.exit(Logger.TRACE_HIGH,MN);
    }
    return this._modes;
  }
  String companyId=PortalUtil.getCompanyId(_portletRequest);
  try {
    Portlet portlet=PortletServiceUtil.getPortletById(companyId,_windowSession.getWindowID());
    Map portletModesMap=portlet.getPortletModes();
    Collection mimeTypes=portletModesMap.values();
    Iterator it=mimeTypes.iterator();
    Map portletModes=CollectionFactory.getSyncHashMap();
    for (int i=0; it.hasNext(); i++) {
      Set portletModesSet=(Set)it.next();
      Iterator it2=portletModesSet.iterator();
      for (int j=0; it2.hasNext(); j++) {
        String mode=(String)it2.next();
        if (portletModes.get(mode) == null) {
          portletModes.put(mode,mode);
        }
      }
    }
    String[] wsrpModes=new String[portletModes.size()];
    it=portletModes.values().iterator();
    for (int i=0; it.hasNext(); i++) {
      String mode=(String)it.next();
      wsrpModes[i]=WSRPUtil.toWsrpMode(mode);
    }
    this._modes=wsrpModes;
  }
 catch (  Exception e) {
    _logger.entry(Logger.ERROR,"Could not get portlet definition",e);
  }
  if (_logger.isLogging(Logger.TRACE_HIGH)) {
    _logger.exit(Logger.TRACE_HIGH,MN);
  }
  return this._modes;
}
