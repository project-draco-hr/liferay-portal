{
  Transactional annotation=annotatedElement.getAnnotation(Transactional.class);
  if (annotation != null) {
    RuleBasedTransactionAttribute rbta=new RuleBasedTransactionAttribute();
    rbta.setPropagationBehavior(annotation.propagation().value());
    rbta.setIsolationLevel(annotation.isolation().value());
    rbta.setTimeout(annotation.timeout());
    rbta.setReadOnly(annotation.readOnly());
    ArrayList<RollbackRuleAttribute> rollBackRules=new ArrayList<RollbackRuleAttribute>();
    RollbackRuleAttribute rollbackRule=null;
    Class[] rbf=annotation.rollbackFor();
    for (int i=0; i < rbf.length; ++i) {
      rollbackRule=new RollbackRuleAttribute(rbf[i]);
      rollBackRules.add(rollbackRule);
    }
    String[] rbfc=annotation.rollbackForClassName();
    for (int i=0; i < rbfc.length; ++i) {
      rollbackRule=new RollbackRuleAttribute(rbfc[i]);
      rollBackRules.add(rollbackRule);
    }
    NoRollbackRuleAttribute noRollbackRule=null;
    Class[] nrbf=annotation.noRollbackFor();
    for (int i=0; i < nrbf.length; ++i) {
      noRollbackRule=new NoRollbackRuleAttribute(nrbf[i]);
      rollBackRules.add(noRollbackRule);
    }
    String[] nrbfc=annotation.noRollbackForClassName();
    for (int i=0; i < nrbfc.length; ++i) {
      noRollbackRule=new NoRollbackRuleAttribute(nrbfc[i]);
      rollBackRules.add(noRollbackRule);
    }
    rbta.getRollbackRules().addAll(rollBackRules);
    return rbta;
  }
 else {
    return null;
  }
}
