{
  int returnValue=0;
  int offset=0;
  IAudioSamples outputIAudioSample=null;
  while (offset < inputIPacket.getSize()) {
    boolean stopDecoding=false;
    returnValue=inputIStreamCoder.decodeAudio(inputIAudioSample,inputIPacket,offset);
    if (returnValue <= 0) {
      if ((curPacketSize == lastPacketSize) && (lastPacketSize != -1)) {
        throw new RuntimeException("Cannot decode audio stream: " + streamIndex);
      }
 else {
        stopDecoding=true;
      }
    }
    updateAudioTimeStamp(inputIAudioSample,timeStampOffset);
    offset+=returnValue;
    outputIAudioSample=resampleAudio(iAudioResampler,inputIAudioSample,resampledIAudioSample);
    encodeAudio(outputIStreamCoder,outputIPacket,outputIAudioSample,outputIContainer);
    if (stopDecoding) {
      if (_log.isDebugEnabled()) {
        _log.debug("Stop decoding audio stream: " + streamIndex);
      }
      break;
    }
  }
}
