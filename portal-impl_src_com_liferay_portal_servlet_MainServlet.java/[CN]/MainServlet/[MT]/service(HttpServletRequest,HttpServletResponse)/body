{
  if (_log.isDebugEnabled()) {
    _log.debug("Process service request");
  }
  if (ShutdownUtil.isShutdown()) {
    res.setContentType(ContentTypes.TEXT_HTML_UTF8);
    String html=ContentUtil.get("com/liferay/portal/dependencies/shutdown.html");
    res.getOutputStream().print(html);
    return;
  }
  HttpSession ses=req.getSession();
  long companyId=PortalInstances.getCompanyId(req);
  PortalUtil.setPortalPort(req);
  ServletContext ctx=getServletContext();
  req.setAttribute(WebKeys.CTX,ctx);
  ModuleConfig moduleConfig=getModuleConfig(req);
  if (PropsValues.LAST_MODIFIED_CHECK) {
    String path=req.getPathInfo();
    if ((path != null) && _lastModifiedPaths.contains(path)) {
      ActionMapping mapping=(ActionMapping)moduleConfig.findActionConfig(path);
      LastModifiedAction lastModifiedAction=(LastModifiedAction)InstancePool.get(mapping.getType());
      String lmKey=lastModifiedAction.getLastModifiedKey(req);
      if (lmKey != null) {
        long ifModifiedSince=req.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);
        if (ifModifiedSince <= 0) {
          lastModifiedAction.setLastModifiedValue(lmKey,lmKey);
        }
 else {
          String lmValue=lastModifiedAction.getLastModifiedValue(lmKey);
          if (lmValue != null) {
            res.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
            return;
          }
 else {
            lastModifiedAction.setLastModifiedValue(lmKey,lmKey);
          }
        }
      }
    }
  }
  if (ses.getAttribute(WebKeys.PORTLET_SESSION_TRACKER) == null) {
    ses.setAttribute(WebKeys.PORTLET_SESSION_TRACKER,PortletSessionTracker.getInstance());
  }
  PortletRequestProcessor portletReqProcessor=(PortletRequestProcessor)ctx.getAttribute(WebKeys.PORTLET_STRUTS_PROCESSOR);
  if (portletReqProcessor == null) {
    portletReqProcessor=PortletRequestProcessor.getInstance(this,moduleConfig);
    ctx.setAttribute(WebKeys.PORTLET_STRUTS_PROCESSOR,portletReqProcessor);
  }
  if (ctx.getAttribute(TilesUtilImpl.DEFINITIONS_FACTORY) == null) {
    ctx.setAttribute(TilesUtilImpl.DEFINITIONS_FACTORY,ctx.getAttribute(TilesUtilImpl.DEFINITIONS_FACTORY));
  }
  Object applicationAssociate=ctx.getAttribute(WebKeys.ASSOCIATE_KEY);
  if (ctx.getAttribute(WebKeys.ASSOCIATE_KEY) == null) {
    ctx.setAttribute(WebKeys.ASSOCIATE_KEY,applicationAssociate);
  }
  if (ParamUtil.get(req,WebKeys.ENCRYPT,false)) {
    try {
      Company company=CompanyLocalServiceUtil.getCompanyById(companyId);
      req=new EncryptedServletRequest(req,company.getKeyObj());
    }
 catch (    Exception e) {
    }
  }
  PortalUtil.getCurrentURL(req);
  long userId=PortalUtil.getUserId(req);
  String remoteUser=req.getRemoteUser();
  if (!PropsValues.PORTAL_JAAS_ENABLE) {
    String jRemoteUser=(String)ses.getAttribute("j_remoteuser");
    if (jRemoteUser != null) {
      remoteUser=jRemoteUser;
      ses.removeAttribute("j_remoteuser");
    }
  }
  if ((userId > 0) && (remoteUser == null)) {
    remoteUser=String.valueOf(userId);
  }
  req=new ProtectedServletRequest(req,remoteUser);
  if ((userId > 0) || (remoteUser != null)) {
    String name=String.valueOf(userId);
    if (remoteUser != null) {
      name=remoteUser;
    }
    PrincipalThreadLocal.setName(name);
  }
  if ((userId <= 0) && (remoteUser != null)) {
    try {
      userId=GetterUtil.getLong(remoteUser);
      EventsProcessor.process(PropsKeys.LOGIN_EVENTS_PRE,PropsValues.LOGIN_EVENTS_PRE,req,res);
      User user=UserLocalServiceUtil.getUserById(userId);
      UserLocalServiceUtil.updateLastLogin(userId,req.getRemoteAddr());
      ses.setAttribute(WebKeys.USER_ID,new Long(userId));
      ses.setAttribute(Globals.LOCALE_KEY,user.getLocale());
      EventsProcessor.process(PropsKeys.LOGIN_EVENTS_POST,PropsValues.LOGIN_EVENTS_POST,req,res);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  try {
    EventsProcessor.process(PropsKeys.SERVLET_SERVICE_EVENTS_PRE,PropsValues.SERVLET_SERVICE_EVENTS_PRE,req,res);
  }
 catch (  Exception e) {
    Throwable cause=e.getCause();
    if (cause instanceof NoSuchLayoutException) {
      DynamicServletRequest dynamicReq=new DynamicServletRequest(req);
      dynamicReq.setParameter("p_l_id",StringPool.BLANK);
      PortalUtil.sendError(HttpServletResponse.SC_NOT_FOUND,(NoSuchLayoutException)cause,dynamicReq,res);
      return;
    }
    _log.error(e,e);
    req.setAttribute(PageContext.EXCEPTION,e);
    StrutsUtil.forward(PropsValues.SERVLET_SERVICE_EVENTS_PRE_ERROR_PAGE,ctx,req,res);
    return;
  }
  try {
    callParentService(req,res);
  }
  finally {
    try {
      EventsProcessor.process(PropsKeys.SERVLET_SERVICE_EVENTS_POST,PropsValues.SERVLET_SERVICE_EVENTS_POST,req,res);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
    res.addHeader(_LIFERAY_PORTAL_REQUEST_HEADER,ReleaseInfo.getReleaseInfo());
    CompanyThreadLocal.setCompanyId(0);
    PrincipalThreadLocal.setName(null);
  }
}
