{
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize");
  }
  super.init();
  if (_log.isDebugEnabled()) {
    _log.debug("Process startup events");
  }
  try {
    StartupAction startupAction=new StartupAction();
    startupAction.run(null);
  }
 catch (  RuntimeException re) {
    ShutdownUtil.shutdown(0);
    throw new ServletException(re);
  }
catch (  ActionException ae) {
    _log.error(ae,ae);
  }
  String contextPath=PortalUtil.getPathContext();
  ServletContext servletContext=getServletContext();
  VelocityContextPool.put(contextPath,servletContext);
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize plugin package");
  }
  PluginPackage pluginPackage=null;
  try {
    pluginPackage=PluginPackageHotDeployListener.readPluginPackage(servletContext);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize portlets");
  }
  List<Portlet> portlets=null;
  try {
    String[] xmls=new String[]{HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/" + Portal.PORTLET_XML_FILE_NAME_CUSTOM)),HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/portlet-ext.xml")),HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-portlet.xml")),HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-portlet-ext.xml")),HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/web.xml"))};
    PortletLocalServiceUtil.initEAR(servletContext,xmls,pluginPackage);
    portlets=PortletLocalServiceUtil.getPortlets();
    for (int i=0; i < portlets.size(); i++) {
      Portlet portlet=portlets.get(i);
      if (i == 0) {
        initPortletApp(portlet,servletContext);
      }
      PortletInstanceFactory.create(portlet,servletContext);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize layout templates");
  }
  try {
    String[] xmls=new String[]{HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-layout-templates.xml")),HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-layout-templates-ext.xml"))};
    LayoutTemplateLocalServiceUtil.init(servletContext,xmls,pluginPackage);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize look and feel");
  }
  try {
    String[] xmls=new String[]{HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-look-and-feel.xml")),HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-look-and-feel-ext.xml"))};
    ThemeLocalServiceUtil.init(servletContext,null,true,xmls,pluginPackage);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Indexer");
  }
  try {
    Iterator<Portlet> itr=portlets.iterator();
    while (itr.hasNext()) {
      Portlet portlet=itr.next();
      String indexerClass=portlet.getIndexerClass();
      if (!portlet.isActive() || Validator.isNull(indexerClass)) {
        continue;
      }
      Indexer indexer=(Indexer)InstancePool.get(indexerClass);
      for (      String modelClassName : indexer.getClassNames()) {
        IndexerRegistryUtil.register(modelClassName,indexer);
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Scheduler");
  }
  try {
    if (PropsValues.SCHEDULER_ENABLED) {
      for (      String className : PropsValues.SCHEDULER_CLASSES) {
        Scheduler scheduler=(Scheduler)InstancePool.get(className);
        scheduler.schedule();
      }
      Iterator<Portlet> itr=portlets.iterator();
      while (itr.hasNext()) {
        Portlet portlet=itr.next();
        String className=portlet.getSchedulerClass();
        if (!portlet.isActive() || Validator.isNull(className)) {
          continue;
        }
        Scheduler scheduler=(Scheduler)InstancePool.get(className);
        scheduler.schedule();
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("POP message listener");
  }
  try {
    Iterator<Portlet> itr=portlets.iterator();
    while (itr.hasNext()) {
      Portlet portlet=itr.next();
      MessageListener popMessageListener=portlet.getPopMessageListenerInstance();
      if (!portlet.isActive() || (popMessageListener == null)) {
        continue;
      }
      POPServerUtil.addListener(popMessageListener);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Social activity interpreter");
  }
  try {
    Iterator<Portlet> itr=portlets.iterator();
    while (itr.hasNext()) {
      Portlet portlet=itr.next();
      SocialActivityInterpreter socialActivityInterpreter=portlet.getSocialActivityInterpreterInstance();
      if (!portlet.isActive() || (socialActivityInterpreter == null)) {
        continue;
      }
      socialActivityInterpreter=new SocialActivityInterpreterImpl(portlet.getPortletId(),socialActivityInterpreter);
      SocialActivityInterpreterLocalServiceUtil.addActivityInterpreter(socialActivityInterpreter);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Social request interpreter");
  }
  try {
    Iterator<Portlet> itr=portlets.iterator();
    while (itr.hasNext()) {
      Portlet portlet=itr.next();
      SocialRequestInterpreter socialRequestInterpreter=portlet.getSocialRequestInterpreterInstance();
      if (!portlet.isActive() || (socialRequestInterpreter == null)) {
        continue;
      }
      socialRequestInterpreter=new SocialRequestInterpreterImpl(portlet.getPortletId(),socialRequestInterpreter);
      SocialRequestInterpreterLocalServiceUtil.addRequestInterpreter(socialRequestInterpreter);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("WebDAV storage");
  }
  try {
    Iterator<Portlet> itr=portlets.iterator();
    while (itr.hasNext()) {
      Portlet portlet=itr.next();
      WebDAVStorage webDAVStorage=portlet.getWebDAVStorageInstance();
      if (!portlet.isActive() || (webDAVStorage == null)) {
        continue;
      }
      webDAVStorage.setToken(portlet.getWebDAVStorageToken());
      WebDAVUtil.addStorage(webDAVStorage);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Check web settings");
  }
  try {
    String xml=HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/web.xml"));
    checkWebSettings(xml);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Process global startup events");
  }
  try {
    EventsProcessor.process(PropsKeys.GLOBAL_STARTUP_EVENTS,PropsValues.GLOBAL_STARTUP_EVENTS);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  String[] webIds=PortalInstances.getWebIds();
  for (int i=0; i < webIds.length; i++) {
    PortalInstances.initCompany(servletContext,webIds[i]);
  }
  PortalInitableUtil.flushInitables();
  HotDeployUtil.flushEvents();
}
