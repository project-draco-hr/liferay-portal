{
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize");
  }
  ServletContext servletContext=getServletContext();
  servletContext.setAttribute(MainServlet.class.getName(),Boolean.TRUE);
  callParentInit();
  if (_log.isDebugEnabled()) {
    _log.debug("Verify patch levels");
  }
  try {
    PatcherUtil.verifyPatchLevels();
  }
 catch (  PatchInconsistencyException pie) {
    if (!PropsValues.VERIFY_PATCH_LEVELS_DISABLED) {
      _log.error("Stopping the server due to the inconsistent patch levels");
      if (_log.isWarnEnabled()) {
        _log.warn("Set the property \"verify.patch.levels.disabled\" " + "to override stopping the server due to the " + "inconsistent patch levels");
      }
      System.exit(0);
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Verify JVM configuration");
  }
  if (_log.isWarnEnabled()) {
    if (!StringPool.DEFAULT_CHARSET_NAME.startsWith("UTF-")) {
      StringBundler sb=new StringBundler(4);
      sb.append("Default JVM charset \"");
      sb.append(StringPool.DEFAULT_CHARSET_NAME);
      sb.append("\" is not UTF, please review JVM file.encoding ");
      sb.append("property");
      _log.warn(sb.toString());
    }
    String userTimeZone=System.getProperty("user.timezone");
    if (!Objects.equals("UTC",userTimeZone) && !Objects.equals("GMT",userTimeZone)) {
      StringBundler sb=new StringBundler(4);
      sb.append("Default JVM timezone \"");
      sb.append(userTimeZone);
      sb.append("\" is not UTC or GMT, please review JVM ");
      sb.append("user.timezone property");
      _log.warn(sb.toString());
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Process startup events");
  }
  try {
    processStartupEvents();
  }
 catch (  Exception e) {
    _log.error(e,e);
    System.out.println("Stopping the server due to unexpected startup errors");
    System.exit(0);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize server detector");
  }
  try {
    initServerDetector();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize plugin package");
  }
  PluginPackage pluginPackage=null;
  try {
    pluginPackage=initPluginPackage();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize portlets");
  }
  List<Portlet> portlets=new ArrayList<>();
  try {
    portlets.addAll(initPortlets(pluginPackage));
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  try {
    initLayoutTemplates(pluginPackage);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize social");
  }
  try {
    initSocial(pluginPackage);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize themes");
  }
  try {
    initThemes(pluginPackage,portlets);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize web settings");
  }
  try {
    initWebSettings();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize extension environment");
  }
  try {
    initExt();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Process global startup events");
  }
  try {
    processGlobalStartupEvents();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize resource actions");
  }
  try {
    initResourceActions(portlets);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  try {
    initCompanies();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (StartupHelperUtil.isDBNew() && PropsValues.SETUP_WIZARD_ADD_SAMPLE_DATA) {
    try {
      SetupWizardSampleDataUtil.addSampleData(PortalInstances.getDefaultCompanyId());
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize plugins");
  }
  try {
    initPlugins();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  servletContext.setAttribute(WebKeys.STARTUP_FINISHED,true);
  StartupHelperUtil.setStartupFinished(true);
  registerPortalInitialized();
  ThreadLocalCacheManager.clearAll(Lifecycle.REQUEST);
}
