{
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize");
  }
  super.init();
  if (_log.isDebugEnabled()) {
    _log.debug("Process startup events");
  }
  try {
    EventsProcessor.process(new String[]{StartupAction.class.getName()},true);
  }
 catch (  RuntimeException re) {
    ShutdownUtil.shutdown(0);
    throw new ServletException(re);
  }
catch (  ActionException ae) {
    _log.error(ae,ae);
  }
  String contextPath=PortalUtil.getPathContext();
  ServletContext ctx=getServletContext();
  VelocityContextPool.put(contextPath,ctx);
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize plugin package");
  }
  PluginPackage pluginPackage=null;
  try {
    pluginPackage=PluginPackageHotDeployListener.readPluginPackage(ctx);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize portlets");
  }
  List<Portlet> portlets=null;
  try {
    String[] xmls=new String[]{HttpUtil.URLtoString(ctx.getResource("/WEB-INF/" + PortalUtil.PORTLET_XML_FILE_NAME_CUSTOM)),HttpUtil.URLtoString(ctx.getResource("/WEB-INF/portlet-ext.xml")),HttpUtil.URLtoString(ctx.getResource("/WEB-INF/liferay-portlet.xml")),HttpUtil.URLtoString(ctx.getResource("/WEB-INF/liferay-portlet-ext.xml")),HttpUtil.URLtoString(ctx.getResource("/WEB-INF/web.xml"))};
    PortletLocalServiceUtil.initEAR(xmls,pluginPackage);
    portlets=PortletLocalServiceUtil.getPortlets();
    for (int i=0; i < portlets.size(); i++) {
      Portlet portlet=portlets.get(i);
      if (i == 0) {
        initPortletApp(portlet,ctx);
      }
      PortletInstanceFactory.create(portlet,ctx);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize layout templates");
  }
  try {
    String[] xmls=new String[]{HttpUtil.URLtoString(ctx.getResource("/WEB-INF/liferay-layout-templates.xml")),HttpUtil.URLtoString(ctx.getResource("/WEB-INF/liferay-layout-templates-ext.xml"))};
    LayoutTemplateLocalUtil.init(ctx,xmls,pluginPackage);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize look and feel");
  }
  try {
    String[] xmls=new String[]{HttpUtil.URLtoString(ctx.getResource("/WEB-INF/liferay-look-and-feel.xml")),HttpUtil.URLtoString(ctx.getResource("/WEB-INF/liferay-look-and-feel-ext.xml"))};
    ThemeLocalUtil.init(ctx,null,true,xmls,pluginPackage);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Scheduler");
  }
  try {
    if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.SCHEDULER_ENABLED))) {
      Iterator<Portlet> itr=portlets.iterator();
      while (itr.hasNext()) {
        Portlet portlet=itr.next();
        String className=portlet.getSchedulerClass();
        if (portlet.isActive() && Validator.isNotNull(className)) {
          Scheduler scheduler=(Scheduler)InstancePool.get(className);
          scheduler.schedule();
        }
      }
    }
  }
 catch (  ObjectAlreadyExistsException oaee) {
  }
catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("POP message listener");
  }
  try {
    Iterator<Portlet> itr=portlets.iterator();
    while (itr.hasNext()) {
      Portlet portlet=itr.next();
      MessageListener popMessageListener=portlet.getPopMessageListenerInstance();
      if (portlet.isActive() && (popMessageListener != null)) {
        POPServerUtil.addListener(popMessageListener);
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Social activity interpreter");
  }
  try {
    Iterator<Portlet> itr=portlets.iterator();
    while (itr.hasNext()) {
      Portlet portlet=itr.next();
      SocialActivityInterpreter socialActivityInterpreter=portlet.getSocialActivityInterpreterInstance();
      if (portlet.isActive() && (socialActivityInterpreter != null)) {
        socialActivityInterpreter=new SocialActivityInterpreterImpl(socialActivityInterpreter);
        SocialActivityInterpreterLocalServiceUtil.addActivityInterpreter(socialActivityInterpreter);
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Check web settings");
  }
  try {
    String xml=HttpUtil.URLtoString(ctx.getResource("/WEB-INF/web.xml"));
    checkWebSettings(xml);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Last modified paths");
  }
  if (_lastModifiedPaths == null) {
    _lastModifiedPaths=new HashSet<String>();
    String[] pathsArray=PropsUtil.getArray(PropsUtil.LAST_MODIFIED_PATHS);
    for (int i=0; i < pathsArray.length; i++) {
      _lastModifiedPaths.add(pathsArray[i]);
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Process global startup events");
  }
  try {
    EventsProcessor.process(PropsUtil.getArray(PropsUtil.GLOBAL_STARTUP_EVENTS),true);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  String[] webIds=PortalInstances.getWebIds();
  for (int i=0; i < webIds.length; i++) {
    PortalInstances.initCompany(ctx,webIds[i]);
  }
  PortalInitableUtil.flushInitables();
  HotDeployUtil.flushEvents();
}
