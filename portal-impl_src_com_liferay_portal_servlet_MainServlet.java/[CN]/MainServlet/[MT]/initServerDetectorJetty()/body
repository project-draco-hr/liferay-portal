{
  ServletContext servletContext=getServletContext();
  Class<?> servletContextClass=servletContext.getClass();
  Field outerClassField=servletContextClass.getDeclaredField("this$0");
  outerClassField.setAccessible(true);
  Object webAppContext=outerClassField.get(servletContext);
  Class<?> abstractHandlerClass=webAppContext.getClass();
  for (int i=0; i < 6; i++) {
    abstractHandlerClass=abstractHandlerClass.getSuperclass();
  }
  Field serverField=abstractHandlerClass.getDeclaredField("_server");
  serverField.setAccessible(true);
  Object server=serverField.get(webAppContext);
  Class<?> aggregateLifeCycleClass=server.getClass();
  for (int i=0; i < 4; i++) {
    aggregateLifeCycleClass=aggregateLifeCycleClass.getSuperclass();
  }
  Field dependentBeansField=aggregateLifeCycleClass.getDeclaredField("_dependentBeans");
  dependentBeansField.setAccessible(true);
  List<?> dependentBeans=(List<?>)dependentBeansField.get(server);
  Object deploymentManager=null;
  for (  Object dependentBean : dependentBeans) {
    Class<?> dependentBeanClass=dependentBean.getClass();
    String dependentBeanClassName=dependentBeanClass.getName();
    if (dependentBeanClassName.equals("org.eclipse.jetty.deploy.DeploymentManager")) {
      deploymentManager=dependentBean;
      break;
    }
  }
  if (deploymentManager == null) {
    throw new Exception("DeploymentManager not found");
  }
  Class<?> deploymentManagerClass=deploymentManager.getClass();
  Field providersField=deploymentManagerClass.getDeclaredField("_providers");
  providersField.setAccessible(true);
  List<?> providers=(List<?>)providersField.get(deploymentManager);
  boolean hotDeploySupported=false;
  for (  Object provider : providers) {
    Class<?> providerClass=provider.getClass();
    String providerClassName=providerClass.getName();
    if (!providerClassName.equals("org.eclipse.jetty.deploy.providers.ContextProvider")) {
      continue;
    }
    Class<?> scanningAppProviderClass=providerClass.getSuperclass();
    Field scanIntervalField=scanningAppProviderClass.getDeclaredField("_scanInterval");
    scanIntervalField.setAccessible(true);
    Integer scanInterval=(Integer)scanIntervalField.get(provider);
    if ((scanInterval != null) && (scanInterval.intValue() > 0)) {
      hotDeploySupported=true;
      break;
    }
  }
  ServerDetector.setSupportsHotDeploy(hotDeploySupported);
}
