{
  ServletContext servletContext=getServletContext();
  Field field=servletContext.getClass().getDeclaredField("this$0");
  field.setAccessible(true);
  Object webAppContext=field.get(servletContext);
  Class<?> abstractHandlerClass=webAppContext.getClass();
  for (int i=0; i < 6; i++) {
    abstractHandlerClass=abstractHandlerClass.getSuperclass();
  }
  Field serverField=abstractHandlerClass.getDeclaredField("_server");
  serverField.setAccessible(true);
  Object server=serverField.get(webAppContext);
  Class<?> aggregateLifeCycleClass=server.getClass();
  for (int i=0; i < 4; i++) {
    aggregateLifeCycleClass=aggregateLifeCycleClass.getSuperclass();
  }
  Field dependentBeansField=aggregateLifeCycleClass.getDeclaredField("_dependentBeans");
  dependentBeansField.setAccessible(true);
  List dependentBeans=(List)dependentBeansField.get(server);
  Object deploymentManager=null;
  for (  Object bean : dependentBeans) {
    Class<?> beanClass=bean.getClass();
    if (beanClass.getName().equals("org.eclipse.jetty.deploy.DeploymentManager")) {
      deploymentManager=bean;
      break;
    }
  }
  if (deploymentManager == null) {
    throw new Exception("DeploymentManager not found.");
  }
  Field providersField=deploymentManager.getClass().getDeclaredField("_providers");
  providersField.setAccessible(true);
  List providers=(List)providersField.get(deploymentManager);
  for (  Object provider : providers) {
    if (!provider.getClass().getName().equals("org.eclipse.jetty.deploy.providers.ContextProvider")) {
      continue;
    }
    Field scanIntervalField=provider.getClass().getSuperclass().getDeclaredField("_scanInterval");
    scanIntervalField.setAccessible(true);
    Integer scanInterval=(Integer)scanIntervalField.get(provider);
    if ((scanInterval != null) && (scanInterval.intValue() > 0)) {
      ServerDetector.setSupportsHotDeploy(true);
    }
 else {
      ServerDetector.setSupportsHotDeploy(false);
    }
    break;
  }
}
