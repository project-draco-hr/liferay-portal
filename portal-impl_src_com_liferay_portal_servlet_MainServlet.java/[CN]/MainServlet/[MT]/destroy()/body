{
  List<Portlet> portlets=PortletLocalServiceUtil.getPortlets();
  if (_log.isDebugEnabled()) {
    _log.debug("Scheduler");
  }
  try {
    if (PropsValues.SCHEDULER_ENABLED) {
      for (      String className : PropsValues.SCHEDULER_CLASSES) {
        Scheduler scheduler=(Scheduler)InstancePool.get(className,false);
        if (scheduler != null) {
          scheduler.unschedule();
        }
      }
      Iterator<Portlet> itr=portlets.iterator();
      while (itr.hasNext()) {
        Portlet portlet=itr.next();
        String className=portlet.getSchedulerClass();
        if (!portlet.isActive() || Validator.isNull(className)) {
          continue;
        }
        Scheduler scheduler=(Scheduler)InstancePool.get(className,false);
        if (scheduler != null) {
          scheduler.unschedule();
        }
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  try {
    Iterator<Portlet> itr=portlets.iterator();
    while (itr.hasNext()) {
      Portlet portlet=itr.next();
      PortletInstanceFactoryUtil.destroy(portlet);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  long[] companyIds=PortalInstances.getCompanyIds();
  for (int i=0; i < companyIds.length; i++) {
    destroyCompany(companyIds[i]);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Process global shutdown events");
  }
  try {
    EventsProcessor.process(PropsKeys.GLOBAL_SHUTDOWN_EVENTS,PropsValues.GLOBAL_SHUTDOWN_EVENTS);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  super.destroy();
}
