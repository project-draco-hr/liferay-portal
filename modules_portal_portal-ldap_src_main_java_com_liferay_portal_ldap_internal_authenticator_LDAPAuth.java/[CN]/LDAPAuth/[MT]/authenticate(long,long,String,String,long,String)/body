{
  LdapContext ldapContext=_portalLDAP.getContext(ldapServerId,companyId);
  if (ldapContext == null) {
    if (_log.isDebugEnabled()) {
      _log.debug("No such LDAP context for ldapServerId: " + ldapServerId + ", companyId: "+ companyId);
    }
    return FAILURE;
  }
  NamingEnumeration<SearchResult> enu=null;
  try {
    LDAPServerConfiguration ldapServerConfiguration=_ldapServerConfigurationProvider.getConfiguration(companyId,ldapServerId);
    String baseDN=ldapServerConfiguration.baseDN();
    String filter=_ldapSettings.getAuthSearchFilter(ldapServerId,companyId,emailAddress,screenName,String.valueOf(userId));
    Properties userMappings=_ldapSettings.getUserMappings(ldapServerId,companyId);
    String userMappingsScreenName=GetterUtil.getString(userMappings.getProperty("screenName"));
    userMappingsScreenName=StringUtil.toLowerCase(userMappingsScreenName);
    SearchControls searchControls=new SearchControls(SearchControls.SUBTREE_SCOPE,1,0,new String[]{userMappingsScreenName},false,false);
    enu=ldapContext.search(baseDN,filter,searchControls);
    if (enu.hasMoreElements()) {
      if (_log.isDebugEnabled()) {
        _log.debug("Search filter returned at least one result");
      }
      SearchResult result=enu.nextElement();
      String fullUserDN=_portalLDAP.getNameInNamespace(ldapServerId,companyId,result);
      Attributes attributes=_portalLDAP.getUserAttributes(ldapServerId,companyId,ldapContext,fullUserDN);
      User user=_ldapUserImporter.importUser(ldapServerId,companyId,ldapContext,attributes,password);
      LDAPAuthResult ldapAuthResult=authenticate(ldapContext,companyId,attributes,fullUserDN,password);
      String errorMessage=ldapAuthResult.getErrorMessage();
      if (errorMessage != null) {
        SystemLDAPConfiguration systemLDAPConfiguration=_systemLDAPConfigurationProvider.getConfiguration(companyId);
        for (        String errorUserLockout : systemLDAPConfiguration.errorUserLockoutKeywords()) {
          if (errorMessage.contains(errorUserLockout)) {
            throw new UserLockoutException.LDAPLockout(fullUserDN,errorMessage);
          }
        }
        for (        String errorPasswordExpiredKeyword : systemLDAPConfiguration.errorPasswordExpiredKeywords()) {
          if (errorMessage.contains(errorPasswordExpiredKeyword)) {
            throw new PasswordExpiredException();
          }
        }
      }
      if (!ldapAuthResult.isAuthenticated()) {
        if (_log.isDebugEnabled()) {
          _log.debug("Unable to authenticate LDAP server with " + "ldapContext: " + ldapContext + ", companyId: "+ companyId);
        }
        return FAILURE;
      }
      String resultCode=ldapAuthResult.getResponseControl();
      if (resultCode.equals(LDAPAuth.RESULT_PASSWORD_RESET)) {
        _userLocalService.updatePasswordReset(user.getUserId(),true);
      }
    }
 else {
      if (_log.isDebugEnabled()) {
        _log.debug("Search filter did not return any results");
      }
      return DNE;
    }
  }
 catch (  Exception e) {
    if (e instanceof LDAPFilterException || e instanceof PasswordExpiredException || e instanceof UserLockoutException) {
      throw e;
    }
    _log.error("Problem accessing LDAP server",e);
    return FAILURE;
  }
 finally {
    if (enu != null) {
      enu.close();
    }
    if (ldapContext != null) {
      ldapContext.close();
    }
  }
  return SUCCESS;
}
