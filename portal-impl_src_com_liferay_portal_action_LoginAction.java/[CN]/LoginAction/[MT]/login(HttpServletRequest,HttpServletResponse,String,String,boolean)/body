{
  CookieKeys.validateSupportCookie(req);
  HttpSession ses=req.getSession();
  long userId=GetterUtil.getLong(login);
  int authResult=Authenticator.FAILURE;
  Company company=PortalUtil.getCompany(req);
  Map headerMap=new HashMap();
  Enumeration enu1=req.getHeaderNames();
  while (enu1.hasMoreElements()) {
    String name=(String)enu1.nextElement();
    Enumeration enu2=req.getHeaders(name);
    List headers=new ArrayList();
    while (enu2.hasMoreElements()) {
      String value=(String)enu2.nextElement();
      headers.add(value);
    }
    headerMap.put(name,(String[])headers.toArray(new String[0]));
  }
  Map parameterMap=req.getParameterMap();
  if (company.getAuthType().equals(CompanyImpl.AUTH_TYPE_EA)) {
    authResult=UserLocalServiceUtil.authenticateByEmailAddress(company.getCompanyId(),login,password,headerMap,parameterMap);
    userId=UserLocalServiceUtil.getUserIdByEmailAddress(company.getCompanyId(),login);
  }
 else   if (company.getAuthType().equals(CompanyImpl.AUTH_TYPE_SN)) {
    authResult=UserLocalServiceUtil.authenticateByScreenName(company.getCompanyId(),login,password,headerMap,parameterMap);
    userId=UserLocalServiceUtil.getUserIdByScreenName(company.getCompanyId(),login);
  }
 else   if (company.getAuthType().equals(CompanyImpl.AUTH_TYPE_ID)) {
    authResult=UserLocalServiceUtil.authenticateByUserId(company.getCompanyId(),userId,password,headerMap,parameterMap);
  }
  if (authResult == Authenticator.SUCCESS) {
    if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.SESSION_ENABLE_PHISHING_PROTECTION))) {
      Boolean httpsInitial=(Boolean)ses.getAttribute(WebKeys.HTTPS_INITIAL);
      LastPath lastPath=(LastPath)ses.getAttribute(WebKeys.LAST_PATH);
      try {
        ses.invalidate();
      }
 catch (      IllegalStateException ise) {
        if (_log.isWarnEnabled()) {
          _log.warn(ise.getMessage());
        }
      }
      ses=req.getSession(true);
      if (httpsInitial != null) {
        ses.setAttribute(WebKeys.HTTPS_INITIAL,httpsInitial);
      }
      if (lastPath != null) {
        ses.setAttribute(WebKeys.LAST_PATH,lastPath);
      }
    }
    String domain=PropsUtil.get(PropsUtil.SESSION_COOKIE_DOMAIN);
    User user=UserLocalServiceUtil.getUserById(userId);
    String userIdString=String.valueOf(userId);
    ses.setAttribute("j_username",userIdString);
    ses.setAttribute("j_password",user.getPassword());
    ses.setAttribute("j_remoteuser",userIdString);
    ses.setAttribute(WebKeys.USER_PASSWORD,password);
    Cookie idCookie=new Cookie(CookieKeys.ID,UserLocalServiceUtil.encryptUserId(userIdString));
    if (Validator.isNotNull(domain)) {
      idCookie.setDomain(domain);
    }
    idCookie.setPath(StringPool.SLASH);
    Cookie passwordCookie=new Cookie(CookieKeys.PASSWORD,Encryptor.encrypt(company.getKeyObj(),password));
    if (Validator.isNotNull(domain)) {
      passwordCookie.setDomain(domain);
    }
    passwordCookie.setPath(StringPool.SLASH);
    int loginMaxAge=GetterUtil.getInteger(PropsUtil.get(PropsUtil.COMPANY_SECURITY_AUTO_LOGIN_MAX_AGE),CookieKeys.MAX_AGE);
    if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.SESSION_DISABLED))) {
      rememberMe=true;
    }
    if (rememberMe) {
      idCookie.setMaxAge(loginMaxAge);
      passwordCookie.setMaxAge(loginMaxAge);
    }
 else {
      idCookie.setMaxAge(0);
      passwordCookie.setMaxAge(0);
    }
    Cookie loginCookie=new Cookie(CookieKeys.LOGIN,login);
    if (Validator.isNotNull(domain)) {
      loginCookie.setDomain(domain);
    }
    loginCookie.setPath(StringPool.SLASH);
    loginCookie.setMaxAge(loginMaxAge);
    Cookie screenNameCookie=new Cookie(CookieKeys.SCREEN_NAME,Encryptor.encrypt(company.getKeyObj(),user.getScreenName()));
    if (Validator.isNotNull(domain)) {
      screenNameCookie.setDomain(domain);
    }
    screenNameCookie.setPath(StringPool.SLASH);
    screenNameCookie.setMaxAge(loginMaxAge);
    CookieKeys.addCookie(res,idCookie);
    CookieKeys.addCookie(res,passwordCookie);
    CookieKeys.addCookie(res,loginCookie);
    CookieKeys.addCookie(res,screenNameCookie);
  }
 else {
    throw new AuthException();
  }
}
