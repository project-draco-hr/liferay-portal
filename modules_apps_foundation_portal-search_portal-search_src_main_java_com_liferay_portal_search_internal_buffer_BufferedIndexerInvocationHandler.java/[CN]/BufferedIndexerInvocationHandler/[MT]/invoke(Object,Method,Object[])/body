{
  Annotation annotation=method.getAnnotation(Bufferable.class);
  IndexerRequestBuffer indexerRequestBuffer=IndexerRequestBuffer.get();
  if ((annotation == null) || (args.length == 0) || (args.length > 2)|| (indexerRequestBuffer == null)) {
    return method.invoke(_indexer,args);
  }
  if (_indexStatusManager.isIndexReadOnly()) {
    if (_log.isDebugEnabled()) {
      _log.debug("Skipping indexer request buffer because index is read " + "only");
    }
    return null;
  }
  if (CompanyThreadLocal.isDeleteInProcess()) {
    if (_log.isDebugEnabled()) {
      _log.debug("Skipping indexer request buffer because a company " + "delete is in process");
    }
    return null;
  }
  Class<?> args0Class=args[0].getClass();
  if (!(args[0] instanceof BaseModel) && !(args[0] instanceof ClassedModel) && !(args0Class.isArray() || Collection.class.isAssignableFrom(args0Class))&& !((args.length == 2) && (args[0] instanceof String) && Objects.equals(args[1].getClass(),Long.class))) {
    return method.invoke(_indexer,args);
  }
  if (args[0] instanceof ResourcedModel && args[0] instanceof ClassedModel && Objects.equals(method.getName(),"reindex")) {
    MethodKey methodKey=new MethodKey(Indexer.class,method.getName(),String.class,Long.TYPE);
    ClassedModel classedModel=(ClassedModel)args[0];
    ResourcedModel resourcedModel=(ResourcedModel)args[0];
    bufferRequest(methodKey,classedModel.getModelClassName(),resourcedModel.getResourcePrimKey(),indexerRequestBuffer);
  }
 else   if (args[0] instanceof ClassedModel) {
    MethodKey methodKey=new MethodKey(Indexer.class,method.getName(),Object.class);
    bufferRequest(methodKey,args[0],indexerRequestBuffer);
  }
 else   if (args.length == 2) {
    MethodKey methodKey=new MethodKey(Indexer.class,method.getName(),String.class,Long.TYPE);
    String className=(String)args[0];
    Long classPK=(Long)args[1];
    PersistedModelLocalService persistedModelLocalService=_persistedModelLocalServiceRegistry.getPersistedModelLocalService(className);
    try {
      Object obj=persistedModelLocalService.getPersistedModel(classPK);
      if (obj instanceof ResourcedModel) {
        ResourcedModel resourcedModel=(ResourcedModel)obj;
        classPK=resourcedModel.getResourcePrimKey();
      }
    }
 catch (    Exception e) {
      if (_log.isDebugEnabled()) {
        _log.debug("Unable to get resource primary key",e);
      }
    }
    bufferRequest(methodKey,className,classPK,indexerRequestBuffer);
  }
 else {
    MethodKey methodKey=new MethodKey(Indexer.class,method.getName(),Object.class);
    Collection<Object> objects=null;
    if (args0Class.isArray()) {
      objects=Arrays.asList((Object[])args[0]);
    }
 else {
      objects=(Collection<Object>)args[0];
    }
    for (    Object object : objects) {
      if (!(object instanceof ClassedModel)) {
        return method.invoke(_indexer,args);
      }
      bufferRequest(methodKey,object,indexerRequestBuffer);
    }
  }
  return null;
}
