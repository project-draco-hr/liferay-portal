{
  if (_javaTerms == null) {
    if (!BaseSourceProcessor.isExcludedFile(_javaTermAccessLevelModifierExclusionFiles,_absolutePath) && !BaseSourceProcessor.isExcludedFile(javaTermSortExclusionFiles,_absolutePath)) {
      BaseSourceProcessor.processErrorMessage(_fileName,"Parsing error while retrieving java terms " + _fileName);
    }
    return _content;
  }
  if (_javaTerms.isEmpty()) {
    return _content;
  }
  String originalContent=_content;
  JavaTerm previousJavaTerm=null;
  Iterator<JavaTerm> itr=_javaTerms.iterator();
  while (itr.hasNext()) {
    JavaTerm javaTerm=itr.next();
    if (javaTerm.isConstructor()) {
      checkConstructor(javaTerm);
    }
    checkUnusedParameters(javaTerm);
    if (!BaseSourceProcessor.isExcludedFile(checkJavaFieldTypesExclusionFiles,_absolutePath)) {
      checkJavaFieldType(javaTerm,annotationsExclusions,immutableFieldTypes);
    }
    if (!originalContent.equals(_content)) {
      return _content;
    }
    sortJavaTerms(previousJavaTerm,javaTerm,javaTermSortExclusionFiles);
    fixTabsAndIncorrectEmptyLines(javaTerm);
    formatAnnotations(javaTerm,testAnnotationsExclusionFiles);
    if (!originalContent.equals(_content)) {
      return _content;
    }
    previousJavaTerm=javaTerm;
  }
  for (  JavaClass innerClass : _innerClasses) {
    String innerClassContent=innerClass.getContent();
    String newInnerClassContent=innerClass.formatJavaTerms(annotationsExclusions,immutableFieldTypes,checkJavaFieldTypesExclusionFiles,javaTermSortExclusionFiles,testAnnotationsExclusionFiles);
    if (!innerClassContent.equals(newInnerClassContent)) {
      _content=StringUtil.replace(_content,innerClassContent,newInnerClassContent);
      return _content;
    }
  }
  fixJavaTermsDividers(_javaTerms,javaTermSortExclusionFiles);
  return _content;
}
