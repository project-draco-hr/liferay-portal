{
  ActionableDynamicQuery actionableDynamicQuery=DDLRecordLocalServiceUtil.getExportActionableDynamicQuery(portletDataContext);
  final ActionableDynamicQuery.AddCriteriaMethod addCriteriaMethod=actionableDynamicQuery.getAddCriteriaMethod();
  actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      addCriteriaMethod.addCriteria(dynamicQuery);
      Property recordIdProperty=PropertyFactoryUtil.forName("recordId");
      StagedModelDataHandler<?> stagedModelDataHandler=StagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(DDLRecord.class.getName());
      Class<?> clazz=stagedModelDataHandler.getClass();
      DynamicQuery recordVersionDynamicQuery=DynamicQueryFactoryUtil.forClass(DDLRecordVersion.class,"recordVersion",clazz.getClassLoader());
      recordVersionDynamicQuery.setProjection(ProjectionFactoryUtil.property("recordId"));
      Property statusProperty=PropertyFactoryUtil.forName("status");
      recordVersionDynamicQuery.add(statusProperty.in(stagedModelDataHandler.getExportableStatuses()));
      recordVersionDynamicQuery.add(RestrictionsFactoryUtil.eqProperty("recordVersion.version","version"));
      recordVersionDynamicQuery.add(RestrictionsFactoryUtil.eqProperty("recordVersion.recordId","recordId"));
      dynamicQuery.add(recordIdProperty.in(recordVersionDynamicQuery));
    }
  }
);
  return actionableDynamicQuery;
}
