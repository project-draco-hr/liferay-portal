{
  long pk=RandomTestUtil.nextLong();
  SocialRelation newSocialRelation=_persistence.create(pk);
  newSocialRelation.setUuid(RandomTestUtil.randomString());
  newSocialRelation.setCompanyId(RandomTestUtil.nextLong());
  newSocialRelation.setCreateDate(RandomTestUtil.nextLong());
  newSocialRelation.setUserId1(RandomTestUtil.nextLong());
  newSocialRelation.setUserId2(RandomTestUtil.nextLong());
  newSocialRelation.setType(RandomTestUtil.nextInt());
  _models.add(_persistence.update(newSocialRelation));
  SocialRelation existingSocialRelation=_persistence.findByPrimaryKey(newSocialRelation.getPrimaryKey());
  Assert.assertEquals(existingSocialRelation.getUuid(),newSocialRelation.getUuid());
  Assert.assertEquals(existingSocialRelation.getRelationId(),newSocialRelation.getRelationId());
  Assert.assertEquals(existingSocialRelation.getCompanyId(),newSocialRelation.getCompanyId());
  Assert.assertEquals(existingSocialRelation.getCreateDate(),newSocialRelation.getCreateDate());
  Assert.assertEquals(existingSocialRelation.getUserId1(),newSocialRelation.getUserId1());
  Assert.assertEquals(existingSocialRelation.getUserId2(),newSocialRelation.getUserId2());
  Assert.assertEquals(existingSocialRelation.getType(),newSocialRelation.getType());
}
