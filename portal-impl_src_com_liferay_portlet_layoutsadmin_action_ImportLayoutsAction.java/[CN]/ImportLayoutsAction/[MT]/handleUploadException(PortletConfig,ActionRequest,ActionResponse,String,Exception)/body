{
  HttpServletResponse response=PortalUtil.getHttpServletResponse(actionResponse);
  response.setContentType(ContentTypes.TEXT_HTML);
  response.setStatus(HttpServletResponse.SC_OK);
  int errorType=0;
  String errorMessage=StringPool.BLANK;
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  if (e instanceof DuplicateFileException || e instanceof FileExtensionException || e instanceof FileNameException|| e instanceof FileSizeException|| e instanceof LARFileException|| e instanceof LARFileSizeException|| e instanceof LARTypeException|| e instanceof LayoutPrototypeException|| e instanceof LocaleException) {
    if (e instanceof DuplicateFileException) {
      errorMessage=themeDisplay.translate("please-enter-a-unique-document-name");
      errorType=ServletResponseConstants.SC_DUPLICATE_FILE_EXCEPTION;
    }
 else     if (e instanceof FileExtensionException) {
      errorMessage=themeDisplay.translate("document-names-must-end-with-one-of-the-following-" + "extensions",StringUtil.merge(getAllowedFileExtensions(portletConfig,actionRequest,actionResponse)));
      errorType=ServletResponseConstants.SC_FILE_EXTENSION_EXCEPTION;
    }
 else     if (e instanceof FileNameException) {
      errorMessage=themeDisplay.translate("please-enter-a-file-with-a-valid-file-name");
      errorType=ServletResponseConstants.SC_FILE_NAME_EXCEPTION;
    }
 else     if (e instanceof FileSizeException || e instanceof LARFileSizeException) {
      long fileMaxSize=PrefsPropsUtil.getLong(PropsKeys.DL_FILE_MAX_SIZE);
      if (fileMaxSize == 0) {
        fileMaxSize=PrefsPropsUtil.getLong(PropsKeys.UPLOAD_SERVLET_REQUEST_IMPL_MAX_SIZE);
      }
      fileMaxSize/=1024;
      errorMessage=themeDisplay.translate("please-enter-a-file-with-a-valid-file-size-no-larger-" + "than-x",fileMaxSize);
      errorType=ServletResponseConstants.SC_FILE_SIZE_EXCEPTION;
    }
 else     if (e instanceof LARTypeException) {
      LARTypeException lte=(LARTypeException)e;
      errorMessage=themeDisplay.translate("please-import-a-lar-file-of-the-correct-type-x-is-not-" + "valid",lte.getMessage());
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    }
 else     if (e instanceof LARFileException) {
      errorMessage=themeDisplay.translate("please-specify-a-lar-file-to-import");
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    }
 else     if (e instanceof LayoutPrototypeException) {
      LayoutPrototypeException lpe=(LayoutPrototypeException)e;
      List<Tuple> missingLayoutPrototypes=lpe.getMissingLayoutPrototypes();
      StringBundler sb=new StringBundler(3 + (11 * missingLayoutPrototypes.size()));
      StringBundler languageKeySB=new StringBundler(5);
      languageKeySB.append("the-lar-file-could-not-be-imported-");
      languageKeySB.append("because-it-requires-page-templates-or-");
      languageKeySB.append("site-templates-that-could-not-be-");
      languageKeySB.append("found.-please-import-the-following-");
      languageKeySB.append("templates-manually");
      sb.append(themeDisplay.translate(languageKeySB.toString()));
      sb.append("<ul>");
      for (      Tuple missingLayoutPrototype : missingLayoutPrototypes) {
        String layoutPrototypeClassName=(String)missingLayoutPrototype.getObject(0);
        String layoutPrototypeUuid=(String)missingLayoutPrototype.getObject(1);
        String layoutPrototypeName=(String)missingLayoutPrototype.getObject(2);
        sb.append("<li>");
        sb.append(ResourceActionsUtil.getModelResource(themeDisplay.getLocale(),layoutPrototypeClassName));
        sb.append(StringPool.COLON);
        sb.append(StringPool.SPACE);
        sb.append("<strong>");
        sb.append(layoutPrototypeName);
        sb.append("</strong>");
        sb.append(StringPool.OPEN_PARENTHESIS);
        sb.append(layoutPrototypeUuid);
        sb.append(StringPool.CLOSE_PARENTHESIS);
        sb.append("</li>");
      }
      sb.append("</ul>");
      errorMessage=sb.toString();
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    }
 else     if (e instanceof LocaleException) {
      LocaleException le=(LocaleException)e;
      errorMessage=themeDisplay.translate("the-available-languages-in-the-lar-file-x-do-not-match-" + "the-portal's-available-languages-x",new String[]{StringUtil.merge(le.getSourceAvailableLocales(),StringPool.COMMA_AND_SPACE),StringUtil.merge(le.getTargetAvailableLocales(),StringPool.COMMA_AND_SPACE)});
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    }
  }
 else {
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
  }
  deleteTempFileEntry(themeDisplay.getScopeGroupId());
  JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
  jsonObject.put("message",errorMessage);
  jsonObject.put("status",errorType);
  writeJSON(actionRequest,actionResponse,jsonObject);
  ServletResponseUtil.write(response,String.valueOf(errorType));
}
