{
  if (_duplicateLanguageKeyLinesMap.isEmpty()) {
    return;
  }
  Set<String> allDuplicateLines=new HashSet<>();
  for (  Map.Entry<String,Set<String>> entry : _duplicateLanguageKeyLinesMap.entrySet()) {
    Set<String> duplicateLines=entry.getValue();
    removeDuplicateKeys(entry.getKey(),duplicateLines);
    allDuplicateLines.addAll(duplicateLines);
  }
  File coreLanguagePropertiesFile=new File(getFile("portal-impl",PORTAL_MAX_DIR_LEVEL),"src/content/Language.properties");
  String coreLanguagePropertiesContent=FileUtil.read(coreLanguagePropertiesFile);
  String newCoreLanguagePropertiesContent=coreLanguagePropertiesContent;
  String[][] categoryPrefixAndNameArray=getCategoryPrefixAndNameArray();
  for (  String line : allDuplicateLines) {
    String categoryName=getCategoryName(line,categoryPrefixAndNameArray);
    int pos=newCoreLanguagePropertiesContent.indexOf("## " + categoryName);
    for (int i=0; i < 3; i++) {
      pos=newCoreLanguagePropertiesContent.indexOf("\n",pos + 1);
    }
    if (!newCoreLanguagePropertiesContent.contains("\n" + line + "\n")) {
      newCoreLanguagePropertiesContent=StringUtil.insert(newCoreLanguagePropertiesContent,line + "\n",pos + 1);
    }
  }
  if (!coreLanguagePropertiesContent.equals(newCoreLanguagePropertiesContent)) {
    processFormattedFile(coreLanguagePropertiesFile,"portal-impl/src/content/Language.properties",coreLanguagePropertiesContent,newCoreLanguagePropertiesContent);
  }
}
