{
  long pk=nextLong();
  UserNotificationEvent newUserNotificationEvent=_persistence.create(pk);
  newUserNotificationEvent.setUuid(randomString());
  newUserNotificationEvent.setCompanyId(nextLong());
  newUserNotificationEvent.setUserId(nextLong());
  newUserNotificationEvent.setType(randomString());
  newUserNotificationEvent.setTimestamp(nextLong());
  newUserNotificationEvent.setDeliverBy(nextLong());
  newUserNotificationEvent.setPayload(randomString());
  newUserNotificationEvent.setArchived(randomBoolean());
  _persistence.update(newUserNotificationEvent,false);
  UserNotificationEvent existingUserNotificationEvent=_persistence.findByPrimaryKey(newUserNotificationEvent.getPrimaryKey());
  assertEquals(existingUserNotificationEvent.getUuid(),newUserNotificationEvent.getUuid());
  assertEquals(existingUserNotificationEvent.getUserNotificationEventId(),newUserNotificationEvent.getUserNotificationEventId());
  assertEquals(existingUserNotificationEvent.getCompanyId(),newUserNotificationEvent.getCompanyId());
  assertEquals(existingUserNotificationEvent.getUserId(),newUserNotificationEvent.getUserId());
  assertEquals(existingUserNotificationEvent.getType(),newUserNotificationEvent.getType());
  assertEquals(existingUserNotificationEvent.getTimestamp(),newUserNotificationEvent.getTimestamp());
  assertEquals(existingUserNotificationEvent.getDeliverBy(),newUserNotificationEvent.getDeliverBy());
  assertEquals(existingUserNotificationEvent.getPayload(),newUserNotificationEvent.getPayload());
  assertEquals(existingUserNotificationEvent.getArchived(),newUserNotificationEvent.getArchived());
}
