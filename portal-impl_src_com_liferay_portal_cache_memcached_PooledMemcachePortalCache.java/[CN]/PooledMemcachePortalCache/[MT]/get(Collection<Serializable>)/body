{
  MemcachedClientIF memcachedClient=null;
  try {
    memcachedClient=_memcachedClientFactory.getMemcachedClient();
  }
 catch (  Exception e) {
    return null;
  }
  List<String> processedKeys=new ArrayList<String>(keys.size());
  for (  Serializable key : keys) {
    String processedKey=_name.concat(String.valueOf(key));
    processedKeys.add(processedKey);
  }
  Map<String,Object> values=null;
  try {
    Future<Map<String,Object>> future=null;
    try {
      future=memcachedClient.asyncGetBulk(processedKeys);
    }
 catch (    IllegalArgumentException iae) {
      if (_log.isWarnEnabled()) {
        _log.warn("Error retrieving with keys " + keys,iae);
      }
      future.cancel(true);
    }
    try {
      values=future.get(_timeout,_timeoutTimeUnit);
    }
 catch (    Throwable t) {
      if (_log.isWarnEnabled()) {
        _log.warn("Memcache operation error",t);
      }
      future.cancel(true);
    }
  }
  finally {
    cleanupClient(memcachedClient);
  }
  return values.values();
}
