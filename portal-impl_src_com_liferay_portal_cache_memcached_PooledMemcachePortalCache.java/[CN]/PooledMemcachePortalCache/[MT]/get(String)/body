{
  MemcachedClientIF memcachedClient=null;
  try {
    memcachedClient=_memcachedClientFactory.getMemcachedClient();
  }
 catch (  Exception e) {
    return null;
  }
  String processedKey=processKey(_cacheName + key);
  try {
    Object cachedObject=null;
    Future<Object> future=null;
    try {
      future=memcachedClient.asyncGet(processedKey);
    }
 catch (    IllegalArgumentException iae) {
      if (_log.isWarnEnabled()) {
        _log.warn("Error retrieving with keys " + key,iae);
      }
    }
    try {
      cachedObject=future.get(_timeout,_timeoutTimeUnit);
    }
 catch (    Exception e) {
      future.cancel(true);
    }
    return cachedObject;
  }
  finally {
    cleanupClient(memcachedClient);
  }
}
