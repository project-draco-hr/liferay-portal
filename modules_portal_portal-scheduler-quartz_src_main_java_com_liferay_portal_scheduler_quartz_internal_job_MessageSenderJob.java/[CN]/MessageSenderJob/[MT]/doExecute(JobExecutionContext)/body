{
  JobDetail jobDetail=jobExecutionContext.getJobDetail();
  JobDataMap jobDataMap=jobDetail.getJobDataMap();
  String destinationName=jobDataMap.getString(SchedulerEngine.DESTINATION_NAME);
  String messageJSON=(String)jobDataMap.get(SchedulerEngine.MESSAGE);
  if (messageJSON == null) {
    throw new NullPointerException("Message retrieved from job data map is null");
  }
  Message message=(Message)JSONFactoryUtil.deserialize(messageJSON);
  message.put(SchedulerEngine.DESTINATION_NAME,destinationName);
  JobKey jobKey=jobDetail.getKey();
  Map<String,Object> jobStateMap=(Map<String,Object>)jobDataMap.get(SchedulerEngine.JOB_STATE);
  JobState jobState=JobStateSerializeUtil.deserialize(jobStateMap);
  StorageType storageType=StorageType.valueOf(jobDataMap.getString(SchedulerEngine.STORAGE_TYPE));
  if (jobExecutionContext.getNextFireTime() == null) {
    message.put(SchedulerEngine.DISABLE,true);
    if (GetterUtil.getBoolean(PropsUtil.get(PropsKeys.CLUSTER_LINK_ENABLED)) && (storageType == StorageType.MEMORY_CLUSTERED)) {
      notifyClusterMember(jobKey,storageType);
    }
    if (storageType == StorageType.PERSISTED) {
      Scheduler scheduler=jobExecutionContext.getScheduler();
      scheduler.deleteJob(jobKey);
    }
  }
  message.put(SchedulerEngine.JOB_STATE,jobState);
  message.put(SchedulerEngine.STORAGE_TYPE,storageType);
  MessageBusUtil.sendMessage(destinationName,message);
}
