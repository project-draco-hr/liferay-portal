{
  int oldStatus=article.getStatus();
  if (oldStatus == WorkflowConstants.STATUS_PENDING) {
    article.setStatus(WorkflowConstants.STATUS_DRAFT);
    journalArticlePersistence.update(article);
  }
  List<JournalArticle> articleVersions=journalArticlePersistence.findByG_A(article.getGroupId(),article.getArticleId());
  articleVersions=ListUtil.sort(articleVersions,new ArticleVersionComparator());
  Map<String,Serializable> workflowContext=new HashMap<String,Serializable>();
  workflowContext.put("articleVersions",(Serializable)articleVersions);
  article=updateStatus(userId,article.getId(),WorkflowConstants.STATUS_IN_TRASH,workflowContext,new ServiceContext());
  TrashEntry trashEntry=trashEntryLocalService.getEntry(JournalArticle.class.getName(),article.getResourcePrimKey());
  String trashArticleId=TrashUtil.getTrashTitle(trashEntry.getEntryId());
  if (!articleVersions.isEmpty()) {
    for (    JournalArticle curArticleVersion : articleVersions) {
      curArticleVersion.setArticleId(trashArticleId);
      journalArticlePersistence.update(curArticleVersion);
    }
  }
  JournalArticleResource articleResource=journalArticleResourcePersistence.fetchByPrimaryKey(article.getResourcePrimKey());
  articleResource.setArticleId(trashArticleId);
  journalArticleResourcePersistence.update(articleResource);
  article.setArticleId(trashArticleId);
  article=journalArticlePersistence.update(article);
  JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
  extraDataJSONObject.put("title",article.getTitle());
  socialActivityLocalService.addActivity(userId,article.getGroupId(),JournalArticle.class.getName(),article.getResourcePrimKey(),SocialActivityConstants.TYPE_MOVE_TO_TRASH,extraDataJSONObject.toString(),0);
  if (oldStatus == WorkflowConstants.STATUS_PENDING) {
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(article.getCompanyId(),article.getGroupId(),JournalArticle.class.getName(),article.getId());
  }
  return article;
}
