{
  User user=userPersistence.findByPrimaryKey(userId);
  oldArticleId=StringUtil.toUpperCase(oldArticleId.trim());
  newArticleId=StringUtil.toUpperCase(newArticleId.trim());
  Date now=new Date();
  JournalArticle oldArticle=journalArticlePersistence.findByG_A_V(groupId,oldArticleId,version);
  if (autoArticleId) {
    newArticleId=String.valueOf(counterLocalService.increment());
  }
 else {
    validate(newArticleId);
    if (journalArticlePersistence.countByG_A(groupId,newArticleId) > 0) {
      StringBundler sb=new StringBundler(5);
      sb.append("{groupId=");
      sb.append(groupId);
      sb.append(", articleId=");
      sb.append(newArticleId);
      sb.append("}");
      throw new DuplicateArticleIdException(sb.toString());
    }
  }
  long id=counterLocalService.increment();
  long resourcePrimKey=journalArticleResourceLocalService.getArticleResourcePrimKey(groupId,newArticleId);
  JournalArticle newArticle=journalArticlePersistence.create(id);
  newArticle.setResourcePrimKey(resourcePrimKey);
  newArticle.setGroupId(groupId);
  newArticle.setCompanyId(user.getCompanyId());
  newArticle.setUserId(user.getUserId());
  newArticle.setUserName(user.getFullName());
  newArticle.setCreateDate(now);
  newArticle.setModifiedDate(now);
  newArticle.setFolderId(oldArticle.getFolderId());
  newArticle.setTreePath(oldArticle.getTreePath());
  newArticle.setArticleId(newArticleId);
  newArticle.setVersion(JournalArticleConstants.VERSION_DEFAULT);
  newArticle.setTitle(oldArticle.getTitle());
  newArticle.setUrlTitle(getUniqueUrlTitle(id,groupId,newArticleId,oldArticle.getTitleCurrentValue()));
  newArticle.setDescription(oldArticle.getDescription());
  try {
    copyArticleImages(oldArticle,newArticle);
  }
 catch (  Exception e) {
    newArticle.setContent(oldArticle.getContent());
  }
  newArticle.setDDMStructureKey(oldArticle.getDDMStructureKey());
  newArticle.setDDMTemplateKey(oldArticle.getDDMTemplateKey());
  newArticle.setLayoutUuid(oldArticle.getLayoutUuid());
  newArticle.setDisplayDate(oldArticle.getDisplayDate());
  newArticle.setExpirationDate(oldArticle.getExpirationDate());
  newArticle.setReviewDate(oldArticle.getReviewDate());
  newArticle.setIndexable(oldArticle.isIndexable());
  newArticle.setSmallImage(oldArticle.isSmallImage());
  newArticle.setSmallImageId(counterLocalService.increment());
  newArticle.setSmallImageURL(oldArticle.getSmallImageURL());
  if (oldArticle.isPending() || workflowDefinitionLinkLocalService.hasWorkflowDefinitionLink(user.getCompanyId(),groupId,JournalArticle.class.getName())) {
    newArticle.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
 else {
    newArticle.setStatus(oldArticle.getStatus());
  }
  newArticle.setExpandoBridgeAttributes(oldArticle);
  journalArticlePersistence.update(newArticle);
  addArticleResources(newArticle,true,true);
  if (oldArticle.isSmallImage()) {
    Image image=imageLocalService.fetchImage(oldArticle.getSmallImageId());
    if (image != null) {
      byte[] smallImageBytes=image.getTextObj();
      imageLocalService.updateImage(newArticle.getSmallImageId(),smallImageBytes);
    }
  }
  long[] assetCategoryIds=assetCategoryLocalService.getCategoryIds(JournalArticle.class.getName(),oldArticle.getResourcePrimKey());
  String[] assetTagNames=assetTagLocalService.getTagNames(JournalArticle.class.getName(),oldArticle.getResourcePrimKey());
  AssetEntry oldAssetEntry=assetEntryLocalService.getEntry(JournalArticle.class.getName(),oldArticle.getResourcePrimKey());
  List<AssetLink> assetLinks=assetLinkLocalService.getDirectLinks(oldAssetEntry.getEntryId());
  long[] assetLinkEntryIds=ListUtil.toLongArray(assetLinks,AssetLink.ENTRY_ID2_ACCESSOR);
  updateAsset(userId,newArticle,assetCategoryIds,assetTagNames,assetLinkEntryIds);
  return newArticle;
}
