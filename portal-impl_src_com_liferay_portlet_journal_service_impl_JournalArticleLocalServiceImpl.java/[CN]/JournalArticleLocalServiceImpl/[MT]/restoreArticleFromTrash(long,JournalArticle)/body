{
  Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(JournalArticle.class);
  indexer.delete(article);
  String trashArticleId=TrashUtil.getOriginalTitle(article.getArticleId());
  List<JournalArticle> articleVersions=journalArticleLocalService.getArticles(article.getGroupId(),article.getArticleId());
  if ((articleVersions != null) && !articleVersions.isEmpty()) {
    for (    JournalArticle curArticleVersion : articleVersions) {
      curArticleVersion.setArticleId(trashArticleId);
      journalArticlePersistence.update(curArticleVersion);
    }
  }
  article.setArticleId(trashArticleId);
  journalArticlePersistence.update(article);
  JournalArticleResource articleResource=journalArticleResourcePersistence.fetchByPrimaryKey(article.getResourcePrimKey());
  articleResource.setArticleId(trashArticleId);
  journalArticleResourcePersistence.update(articleResource);
  TrashEntry trashEntry=trashEntryLocalService.getEntry(JournalArticle.class.getName(),article.getResourcePrimKey());
  Map<String,Serializable> workflowContext=new HashMap<String,Serializable>();
  List<TrashVersion> trashVersions=trashEntryLocalService.getVersions(trashEntry.getEntryId());
  workflowContext.put("trashVersions",(Serializable)trashVersions);
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setScopeGroupId(article.getGroupId());
  updateStatus(userId,article,trashEntry.getStatus(),null,workflowContext,serviceContext);
}
