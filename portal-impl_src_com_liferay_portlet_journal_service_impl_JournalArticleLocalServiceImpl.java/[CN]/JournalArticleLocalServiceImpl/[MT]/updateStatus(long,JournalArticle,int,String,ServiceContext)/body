{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  int oldStatus=article.getStatus();
  article.setModifiedDate(serviceContext.getModifiedDate(now));
  article.setStatus(status);
  article.setStatusByUserId(user.getUserId());
  article.setStatusByUserName(user.getFullName());
  article.setStatusDate(serviceContext.getModifiedDate(now));
  if ((article.getExpirationDate() != null) && (article.getExpirationDate().before(now))) {
    article.setExpirationDate(null);
  }
  journalArticlePersistence.update(article,false);
  if (isLatestVersion(article.getGroupId(),article.getArticleId(),article.getVersion())) {
    if (status == WorkflowConstants.STATUS_APPROVED) {
      updateUrlTitles(article.getGroupId(),article.getArticleId(),article.getUrlTitle());
      if ((oldStatus != WorkflowConstants.STATUS_APPROVED) && (article.getVersion() != JournalArticleConstants.DEFAULT_VERSION)) {
        AssetEntry draftAssetEntry=null;
        try {
          draftAssetEntry=assetEntryLocalService.getEntry(JournalArticle.class.getName(),article.getPrimaryKey());
          Date[] dateInterval=getDateInterval(article.getGroupId(),article.getArticleId(),article.getDisplayDate(),article.getExpirationDate());
          Date displayDate=dateInterval[0];
          Date expirationDate=dateInterval[1];
          long[] assetCategoryIds=draftAssetEntry.getCategoryIds();
          String[] assetTagNames=draftAssetEntry.getTagNames();
          assetEntryLocalService.updateEntry(userId,article.getGroupId(),JournalArticle.class.getName(),article.getResourcePrimKey(),assetCategoryIds,assetTagNames,true,null,null,displayDate,expirationDate,ContentTypes.TEXT_HTML,article.getTitle(),article.getDescription(),null,null,0,0,null,false);
          assetEntryLocalService.deleteEntry(JournalArticle.class.getName(),article.getPrimaryKey());
        }
 catch (        NoSuchEntryException nsee) {
        }
      }
      assetEntryLocalService.updateVisible(JournalArticle.class.getName(),article.getResourcePrimKey(),true);
      ExpandoBridge expandoBridge=article.getExpandoBridge();
      expandoBridge.setAttributes(serviceContext);
      Indexer indexer=IndexerRegistryUtil.getIndexer(JournalArticle.class);
      indexer.reindex(article);
    }
 else {
      if (article.isApproved()) {
        updatePreviousApprovedArticle(article);
      }
    }
  }
  if ((oldStatus == WorkflowConstants.STATUS_PENDING) && ((status == WorkflowConstants.STATUS_APPROVED) || (status == WorkflowConstants.STATUS_DENIED))) {
    String msg="granted";
    if (status == WorkflowConstants.STATUS_DENIED) {
      msg="denied";
    }
    try {
      PortletPreferences preferences=ServiceContextUtil.getPortletPreferences(serviceContext);
      sendEmail(article,articleURL,preferences,msg);
    }
 catch (    Exception e) {
      _log.error("Unable to send email to notify the change of status " + " to " + msg + " for article "+ article.getId()+ ": "+ e.getMessage());
    }
  }
  notifySubscribers(article,serviceContext);
  return article;
}
