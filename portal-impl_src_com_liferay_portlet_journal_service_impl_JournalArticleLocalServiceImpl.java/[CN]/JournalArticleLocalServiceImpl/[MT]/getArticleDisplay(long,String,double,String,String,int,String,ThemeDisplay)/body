{
  String content=null;
  Date now=new Date();
  JournalArticle article=journalArticlePersistence.findByG_A_V(groupId,articleId,version);
  if (article.isExpired()) {
    Date expirationDate=article.getExpirationDate();
    if ((expirationDate != null) && expirationDate.before(now)) {
      return null;
    }
  }
  if (article.getDisplayDate().after(now)) {
    return null;
  }
  if (page < 1) {
    page=1;
  }
  int numberOfPages=1;
  boolean paginate=false;
  boolean pageFlow=false;
  boolean cacheable=true;
  Map tokens=JournalUtil.getTokens(groupId,themeDisplay);
  tokens.put("article_resource_pk",String.valueOf(article.getResourcePrimKey()));
  String xml=article.getContent();
  try {
    Document doc=null;
    Element root=null;
    if (article.isTemplateDriven()) {
      SAXReader reader=new SAXReader();
      doc=reader.read(new StringReader(xml));
      root=doc.getRootElement();
      Document request=null;
      if (Validator.isNotNull(xmlRequest)) {
        request=reader.read(new StringReader(xmlRequest));
      }
      List pages=root.elements("page");
      if (pages.size() > 0) {
        pageFlow=true;
        String targetPage=request.valueOf("/request/parameters/parameter[name='targetPage']/" + "value");
        Element pageEl=null;
        if (Validator.isNotNull(targetPage)) {
          XPath xpathSelector=DocumentHelper.createXPath("/root/page[@id = '" + targetPage + "']");
          pageEl=(Element)xpathSelector.selectSingleNode(doc);
        }
        DocumentFactory docFactory=DocumentFactory.getInstance();
        if (pageEl != null) {
          doc=docFactory.createDocument(pageEl);
          root=doc.getRootElement();
          numberOfPages=pages.size();
        }
 else {
          if (page > pages.size()) {
            page=1;
          }
          pageEl=(Element)pages.get(page - 1);
          doc=docFactory.createDocument(pageEl);
          root=doc.getRootElement();
          numberOfPages=pages.size();
          paginate=true;
        }
      }
      if (request != null) {
        root.add(request.getRootElement().createCopy());
      }
      JournalUtil.addAllReservedEls(root,tokens,article);
      xml=JournalUtil.formatXML(doc);
    }
  }
 catch (  DocumentException de) {
    throw new SystemException(de);
  }
catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Transforming " + articleId + " "+ version+ " "+ languageId);
    }
    String script=null;
    String langType=null;
    if (article.isTemplateDriven()) {
      String defaultTemplateId=article.getTemplateId();
      if (Validator.isNull(templateId)) {
        templateId=defaultTemplateId;
      }
      JournalTemplate template=null;
      try {
        template=journalTemplatePersistence.findByG_T(groupId,templateId);
      }
 catch (      NoSuchTemplateException nste) {
        if (!defaultTemplateId.equals(templateId)) {
          template=journalTemplatePersistence.findByG_T(groupId,defaultTemplateId);
        }
 else {
          throw nste;
        }
      }
      script=template.getXsl();
      langType=template.getLangType();
      cacheable=template.isCacheable();
    }
    content=JournalUtil.transform(tokens,languageId,xml,script,langType);
    if (!pageFlow) {
      String[] pieces=StringUtil.split(content,_TOKEN_PAGE_BREAK);
      if (pieces.length > 1) {
        if (page > pieces.length) {
          page=1;
        }
        content=pieces[page - 1];
        numberOfPages=pieces.length;
        paginate=true;
      }
    }
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
  return new JournalArticleDisplayImpl(article.getId(),article.getResourcePrimKey(),article.getGroupId(),article.getUserId(),article.getArticleId(),article.getVersion(),article.getTitle(),article.getDescription(),article.getAvailableLocales(),content,article.getType(),article.getStructureId(),templateId,article.isSmallImage(),article.getSmallImageId(),article.getSmallImageURL(),numberOfPages,page,paginate,cacheable);
}
