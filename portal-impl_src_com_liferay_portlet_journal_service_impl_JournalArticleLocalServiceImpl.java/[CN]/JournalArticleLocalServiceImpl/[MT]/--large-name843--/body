{
  User user=userPersistence.findByPrimaryKey(userId);
  articleId=articleId.trim().toUpperCase();
  Date displayDate=PortalUtil.getDate(displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,user.getTimeZone(),new ArticleDisplayDateException());
  Date expirationDate=null;
  if (!neverExpire) {
    expirationDate=PortalUtil.getDate(expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,user.getTimeZone(),new ArticleExpirationDateException());
  }
  Date now=new Date();
  boolean expired=false;
  if ((expirationDate != null) && expirationDate.before(now)) {
    expired=true;
  }
  Date reviewDate=null;
  if (!neverReview) {
    reviewDate=PortalUtil.getDate(reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,user.getTimeZone(),new ArticleReviewDateException());
  }
  byte[] smallBytes=null;
  try {
    smallBytes=FileUtil.getBytes(smallFile);
  }
 catch (  IOException ioe) {
  }
  validate(user.getCompanyId(),groupId,-1,titleMap,content,type,structureId,templateId,smallImage,smallImageURL,smallFile,smallBytes);
  JournalArticle oldArticle=null;
  double oldVersion=0;
  boolean incrementVersion=false;
  boolean imported=GetterUtil.getBoolean(serviceContext.getAttribute("imported"));
  if (imported) {
    oldArticle=getArticle(groupId,articleId,version);
    oldVersion=version;
    if (!expired) {
      incrementVersion=true;
    }
 else {
      return expireArticle(userId,groupId,articleId,version,articleURL,serviceContext);
    }
  }
 else {
    oldArticle=getLatestArticle(groupId,articleId,WorkflowConstants.STATUS_ANY);
    oldVersion=oldArticle.getVersion();
    if ((version > 0) && (version != oldVersion)) {
      throw new ArticleVersionException();
    }
    if (oldArticle.isApproved() || oldArticle.isExpired()) {
      incrementVersion=true;
    }
  }
  JournalArticle article=null;
  if (incrementVersion) {
    double newVersion=MathUtil.format(oldVersion + 0.1,1,1);
    long id=counterLocalService.increment();
    article=journalArticlePersistence.create(id);
    article.setResourcePrimKey(oldArticle.getResourcePrimKey());
    article.setGroupId(oldArticle.getGroupId());
    article.setCompanyId(oldArticle.getCompanyId());
    article.setUserId(oldArticle.getUserId());
    article.setUserName(oldArticle.getUserName());
    article.setCreateDate(serviceContext.getModifiedDate(now));
    article.setClassNameId(oldArticle.getClassNameId());
    article.setClassPK(oldArticle.getClassPK());
    article.setArticleId(articleId);
    article.setVersion(newVersion);
    article.setSmallImageId(oldArticle.getSmallImageId());
  }
 else {
    article=oldArticle;
  }
  Locale locale=LocaleUtil.getDefault();
  String defaultLanguageId=GetterUtil.getString(serviceContext.getAttribute("defaultLanguageId"));
  if (Validator.isNotNull(defaultLanguageId)) {
    locale=LocaleUtil.fromLanguageId(defaultLanguageId);
  }
  String title=titleMap.get(locale);
  content=format(groupId,articleId,article.getVersion(),incrementVersion,content,structureId,images);
  article.setModifiedDate(serviceContext.getModifiedDate(now));
  article.setTitleMap(titleMap,locale);
  article.setUrlTitle(getUniqueUrlTitle(article.getId(),groupId,articleId,title));
  article.setDescriptionMap(descriptionMap,locale);
  article.setContent(content);
  article.setType(type);
  article.setStructureId(structureId);
  article.setTemplateId(templateId);
  article.setLayoutUuid(layoutUuid);
  article.setDisplayDate(displayDate);
  article.setExpirationDate(expirationDate);
  article.setReviewDate(reviewDate);
  article.setIndexable(indexable);
  article.setSmallImage(smallImage);
  if (article.getSmallImageId() == 0) {
    article.setSmallImageId(counterLocalService.increment());
  }
  article.setSmallImageURL(smallImageURL);
  if (oldArticle.isPending()) {
    article.setStatus(oldArticle.getStatus());
  }
 else   if (!expired) {
    article.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
 else {
    article.setStatus(WorkflowConstants.STATUS_EXPIRED);
  }
  journalArticlePersistence.update(article,false);
  updateAsset(userId,article,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  ExpandoBridge expandoBridge=article.getExpandoBridge();
  expandoBridge.setAttributes(serviceContext);
  saveImages(smallImage,article.getSmallImageId(),smallFile,smallBytes);
  PortletPreferences preferences=ServiceContextUtil.getPortletPreferences(serviceContext);
  if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_PUBLISH) {
    try {
      sendEmail(article,articleURL,preferences,"requested");
    }
 catch (    IOException ioe) {
      throw new SystemException(ioe);
    }
    WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),groupId,userId,JournalArticle.class.getName(),article.getId(),article,serviceContext);
  }
 else   if (article.getVersion() == JournalArticleConstants.VERSION_DEFAULT) {
    Indexer indexer=IndexerRegistryUtil.getIndexer(JournalArticle.class);
    indexer.reindex(article);
  }
  return article;
}
