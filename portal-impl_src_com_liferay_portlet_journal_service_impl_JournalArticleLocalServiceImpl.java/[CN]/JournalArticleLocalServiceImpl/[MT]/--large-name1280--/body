{
  User user=userPersistence.findByPrimaryKey(userId);
  articleId=StringUtil.toUpperCase(articleId.trim());
  byte[] smallImageBytes=null;
  try {
    smallImageBytes=FileUtil.getBytes(smallImageFile);
  }
 catch (  IOException ioe) {
  }
  JournalArticle latestArticle=getLatestArticle(groupId,articleId,WorkflowConstants.STATUS_ANY);
  JournalArticle article=latestArticle;
  boolean imported=ExportImportThreadLocal.isImportInProcess();
  double latestVersion=latestArticle.getVersion();
  boolean addNewVersion=false;
  if (imported) {
    article=getArticle(groupId,articleId,version);
  }
 else {
    if ((version > 0) && (version != latestVersion)) {
      throw new ArticleVersionException();
    }
    serviceContext.validateModifiedDate(latestArticle,ArticleVersionException.class);
    if (latestArticle.isApproved() || latestArticle.isExpired() || latestArticle.isScheduled()) {
      addNewVersion=true;
      version=MathUtil.format(latestVersion + 0.1,1,1);
    }
  }
  Date displayDate=null;
  Date expirationDate=null;
  Date reviewDate=null;
  if (article.getClassNameId() == JournalArticleConstants.CLASSNAME_ID_DEFAULT) {
    displayDate=PortalUtil.getDate(displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,user.getTimeZone(),ArticleDisplayDateException.class);
    if (!neverExpire) {
      expirationDate=PortalUtil.getDate(expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,user.getTimeZone(),ArticleExpirationDateException.class);
    }
    if (!neverReview) {
      reviewDate=PortalUtil.getDate(reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,user.getTimeZone(),ArticleReviewDateException.class);
    }
  }
  Date now=new Date();
  boolean expired=false;
  if ((expirationDate != null) && expirationDate.before(now)) {
    expired=true;
  }
  validate(user.getCompanyId(),groupId,latestArticle.getClassNameId(),titleMap,content,ddmStructureKey,ddmTemplateKey,expirationDate,smallImage,smallImageURL,smallImageFile,smallImageBytes,serviceContext);
  if (addNewVersion) {
    long id=counterLocalService.increment();
    article=journalArticlePersistence.create(id);
    article.setResourcePrimKey(latestArticle.getResourcePrimKey());
    article.setGroupId(latestArticle.getGroupId());
    article.setCompanyId(latestArticle.getCompanyId());
    article.setUserId(user.getUserId());
    article.setUserName(user.getFullName());
    article.setCreateDate(latestArticle.getCreateDate());
    article.setClassNameId(latestArticle.getClassNameId());
    article.setClassPK(latestArticle.getClassPK());
    article.setArticleId(articleId);
    article.setVersion(version);
    article.setSmallImageId(latestArticle.getSmallImageId());
  }
  Locale locale=getArticleDefaultLocale(content);
  String title=titleMap.get(locale);
  content=format(user,groupId,articleId,article.getVersion(),addNewVersion,content,ddmStructureKey,images);
  article.setModifiedDate(serviceContext.getModifiedDate(now));
  article.setFolderId(folderId);
  article.setTreePath(article.buildTreePath());
  article.setTitleMap(titleMap,locale);
  article.setUrlTitle(getUniqueUrlTitle(article.getId(),article.getArticleId(),title,latestArticle.getUrlTitle(),serviceContext));
  article.setDescriptionMap(descriptionMap,locale);
  article.setContent(content);
  article.setDDMStructureKey(ddmStructureKey);
  article.setDDMTemplateKey(ddmTemplateKey);
  article.setLayoutUuid(layoutUuid);
  article.setDisplayDate(displayDate);
  article.setExpirationDate(expirationDate);
  article.setReviewDate(reviewDate);
  article.setIndexable(indexable);
  article.setSmallImage(smallImage);
  if (smallImage) {
    if ((smallImageFile != null) && (smallImageBytes != null)) {
      article.setSmallImageId(counterLocalService.increment());
    }
  }
 else {
    article.setSmallImageId(0);
  }
  article.setSmallImageURL(smallImageURL);
  if (latestArticle.isPending()) {
    article.setStatus(latestArticle.getStatus());
  }
 else   if (!expired) {
    article.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
 else {
    article.setStatus(WorkflowConstants.STATUS_EXPIRED);
  }
  article.setExpandoBridgeAttributes(serviceContext);
  journalArticlePersistence.update(article);
  updateAsset(userId,article,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  if (classNameLocalService.getClassNameId(DDMStructure.class) == article.getClassNameId()) {
    updateDDMStructurePredefinedValues(article.getClassPK(),content,serviceContext);
  }
  saveImages(smallImage,article.getSmallImageId(),smallImageFile,smallImageBytes);
  PortletPreferences preferences=ServiceContextUtil.getPortletPreferences(serviceContext);
  if (expired && imported) {
    updateStatus(userId,article,article.getStatus(),articleURL,serviceContext,new HashMap<String,Serializable>());
  }
  if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_PUBLISH) {
    articleURL=buildArticleURL(articleURL,groupId,folderId,articleId);
    serviceContext.setAttribute("articleURL",articleURL);
    sendEmail(article,articleURL,preferences,"requested",serviceContext);
    startWorkflowInstance(userId,article,serviceContext);
  }
  return journalArticlePersistence.findByPrimaryKey(article.getId());
}
