{
  String content=null;
  Date now=new Date();
  JournalArticle article=JournalArticleUtil.findByG_A_V(groupId,articleId,version);
  if (article.isExpired()) {
    Date expirationDate=article.getExpirationDate();
    if ((expirationDate != null) && expirationDate.before(now)) {
      return null;
    }
  }
  if (article.getDisplayDate().after(now)) {
    return null;
  }
  String targetPage=null;
  int numberOfPages=1;
  boolean paginate=false;
  boolean pageFlow=false;
  if (page < 1) {
    page=1;
  }
  Map tokens=JournalUtil.getTokens(groupId,themeDisplay);
  String xml=article.getContent();
  SAXReader reader=new SAXReader();
  try {
    Document doc=null;
    Element root=null;
    Document request=null;
    Element pageEl=null;
    if (article.isTemplateDriven()) {
      doc=reader.read(new StringReader(xml));
      root=doc.getRootElement();
      try {
        if (Validator.isNotNull(xmlRequest)) {
          request=reader.read(new StringReader(xmlRequest));
        }
        List pages=root.elements("page");
        if (pages.size() > 0) {
          pageFlow=true;
          targetPage=request.valueOf("/request/parameters/parameter[name='targetPage']/value");
          if (Validator.isNotNull(targetPage)) {
            XPath xpathSelector=DocumentHelper.createXPath("/root/page[@id = '" + targetPage + "']");
            pageEl=(Element)xpathSelector.selectSingleNode(doc);
          }
          if (pageEl != null) {
            doc=DocumentFactory.getInstance().createDocument(pageEl);
            root=doc.getRootElement();
            numberOfPages=pages.size();
          }
 else {
            if (page > pages.size()) {
              page=1;
            }
            pageEl=(Element)pages.get(page - 1);
            doc=DocumentFactory.getInstance().createDocument(pageEl);
            root=doc.getRootElement();
            numberOfPages=pages.size();
            paginate=true;
          }
        }
        if (request != null) {
          root.add(request.getRootElement().createCopy());
        }
      }
 catch (      DocumentException de) {
        throw new SystemException(de);
      }
      JournalUtil.addAllReservedEls(root,tokens,article);
      xml=JournalUtil.formatXML(doc);
    }
  }
 catch (  DocumentException de) {
    throw new SystemException(de);
  }
catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Transforming " + articleId + " "+ version+ " "+ languageId);
    }
    String script=null;
    String langType=null;
    if (article.isTemplateDriven()) {
      String defaultTemplateId=article.getTemplateId();
      if (Validator.isNull(templateId)) {
        templateId=defaultTemplateId;
      }
      JournalTemplate template=null;
      try {
        template=JournalTemplateUtil.findByG_T(groupId,templateId);
      }
 catch (      NoSuchTemplateException nste) {
        if (!defaultTemplateId.equals(templateId)) {
          template=JournalTemplateUtil.findByG_T(groupId,defaultTemplateId);
        }
 else {
          throw nste;
        }
      }
      script=template.getXsl();
      langType=template.getLangType();
    }
    content=JournalUtil.transform(tokens,languageId,xml,script,langType);
    if (!pageFlow) {
      String[] pieces=StringUtil.split(content,GetterUtil.getString(PropsUtil.get(PropsUtil.JOURNAL_ARTICLE_PAGE_BREAK),StringPool.PAGE_BREAK));
      if (pieces.length > 1) {
        if (page > pieces.length) {
          page=1;
        }
        numberOfPages=pieces.length;
        content=pieces[page - 1];
        paginate=true;
      }
    }
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
  return new JournalArticleDisplayImpl(article.getId(),article.getResourcePrimKey(),article.getGroupId(),article.getUserId(),article.getArticleId(),article.getVersion(),article.getTitle(),article.getDescription(),article.getAvailableLocales(),content,article.getType(),article.getStructureId(),templateId,numberOfPages,page,paginate);
}
