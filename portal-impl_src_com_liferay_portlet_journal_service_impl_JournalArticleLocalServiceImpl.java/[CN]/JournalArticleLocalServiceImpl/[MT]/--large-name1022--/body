{
  User user=userPersistence.findByPrimaryKey(userId);
  articleId=articleId.trim().toUpperCase();
  Date displayDate=PortalUtil.getDate(displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,user.getTimeZone(),ArticleDisplayDateException.class);
  Date expirationDate=null;
  if (!neverExpire) {
    expirationDate=PortalUtil.getDate(expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,user.getTimeZone(),ArticleExpirationDateException.class);
  }
  Date now=new Date();
  boolean expired=false;
  if ((expirationDate != null) && expirationDate.before(now)) {
    expired=true;
  }
  Date reviewDate=null;
  if (!neverReview) {
    reviewDate=PortalUtil.getDate(reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,user.getTimeZone(),ArticleReviewDateException.class);
  }
  byte[] smallImageBytes=null;
  try {
    smallImageBytes=FileUtil.getBytes(smallImageFile);
  }
 catch (  IOException ioe) {
  }
  JournalArticle latestArticle=getLatestArticle(groupId,articleId,WorkflowConstants.STATUS_ANY);
  JournalArticle article=latestArticle;
  boolean imported=ImportExportThreadLocal.isImportInProcess();
  double latestVersion=latestArticle.getVersion();
  boolean addNewVersion=false;
  if (imported) {
    if (latestVersion > version) {
      article=journalArticlePersistence.fetchByG_A_V(groupId,articleId,version);
      if (article == null) {
        addNewVersion=true;
      }
    }
 else     if (latestVersion < version) {
      addNewVersion=true;
    }
  }
 else {
    if ((version > 0) && (version != latestVersion)) {
      throw new ArticleVersionException();
    }
    serviceContext.validateModifiedDate(latestArticle,ArticleVersionException.class);
    if (latestArticle.isApproved() || latestArticle.isExpired()) {
      addNewVersion=true;
      version=MathUtil.format(latestVersion + 0.1,1,1);
    }
  }
  validate(user.getCompanyId(),groupId,latestArticle.getClassNameId(),titleMap,content,type,structureId,templateId,expirationDate,smallImage,smallImageURL,smallImageFile,smallImageBytes);
  if (addNewVersion) {
    long id=counterLocalService.increment();
    article=journalArticlePersistence.create(id);
    article.setResourcePrimKey(latestArticle.getResourcePrimKey());
    article.setGroupId(latestArticle.getGroupId());
    article.setCompanyId(latestArticle.getCompanyId());
    article.setUserId(user.getUserId());
    article.setUserName(user.getFullName());
    article.setCreateDate(serviceContext.getModifiedDate(now));
    article.setClassNameId(latestArticle.getClassNameId());
    article.setClassPK(latestArticle.getClassPK());
    article.setArticleId(articleId);
    article.setVersion(version);
    article.setSmallImageId(latestArticle.getSmallImageId());
  }
  Locale locale=LocaleUtil.getDefault();
  String defaultLanguageId=ParamUtil.getString(serviceContext,"defaultLanguageId");
  if (Validator.isNull(defaultLanguageId)) {
    defaultLanguageId=LocalizationUtil.getDefaultLocale(content);
  }
  if (Validator.isNotNull(defaultLanguageId)) {
    locale=LocaleUtil.fromLanguageId(defaultLanguageId);
  }
  String title=titleMap.get(locale);
  content=format(user,groupId,articleId,article.getVersion(),addNewVersion,content,structureId,images);
  article.setModifiedDate(serviceContext.getModifiedDate(now));
  article.setFolderId(folderId);
  article.setTitleMap(titleMap,locale);
  article.setUrlTitle(getUniqueUrlTitle(article.getId(),article.getArticleId(),title,latestArticle.getUrlTitle(),serviceContext));
  article.setDescriptionMap(descriptionMap,locale);
  article.setContent(content);
  article.setType(type);
  article.setStructureId(structureId);
  article.setTemplateId(templateId);
  article.setLayoutUuid(layoutUuid);
  article.setDisplayDate(displayDate);
  article.setExpirationDate(expirationDate);
  article.setReviewDate(reviewDate);
  article.setIndexable(indexable);
  article.setSmallImage(smallImage);
  if (article.getSmallImageId() == 0) {
    article.setSmallImageId(counterLocalService.increment());
  }
  article.setSmallImageURL(smallImageURL);
  if (latestArticle.isPending()) {
    article.setStatus(latestArticle.getStatus());
  }
 else   if (!expired) {
    article.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
 else {
    article.setStatus(WorkflowConstants.STATUS_EXPIRED);
  }
  journalArticlePersistence.update(article);
  updateAsset(userId,article,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  ExpandoBridge expandoBridge=article.getExpandoBridge();
  expandoBridge.setAttributes(serviceContext);
  saveImages(smallImage,article.getSmallImageId(),smallImageFile,smallImageBytes);
  PortletPreferences preferences=ServiceContextUtil.getPortletPreferences(serviceContext);
  if (expired && imported) {
    updateStatus(userId,article,article.getStatus(),articleURL,serviceContext);
  }
  if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_PUBLISH) {
    sendEmail(article,articleURL,preferences,"requested",serviceContext);
    WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),groupId,userId,JournalArticle.class.getName(),article.getId(),article,serviceContext);
  }
 else   if (article.getVersion() == JournalArticleConstants.VERSION_DEFAULT) {
    Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(JournalArticle.class);
    indexer.reindex(article);
  }
  return article;
}
