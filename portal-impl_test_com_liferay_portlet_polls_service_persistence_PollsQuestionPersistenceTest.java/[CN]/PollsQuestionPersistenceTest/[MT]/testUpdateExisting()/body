{
  long pk=nextLong();
  PollsQuestion newPollsQuestion=_persistence.create(pk);
  newPollsQuestion.setUuid(randomString());
  newPollsQuestion.setGroupId(nextLong());
  newPollsQuestion.setCompanyId(nextLong());
  newPollsQuestion.setUserId(nextLong());
  newPollsQuestion.setUserName(randomString());
  newPollsQuestion.setCreateDate(nextDate());
  newPollsQuestion.setModifiedDate(nextDate());
  newPollsQuestion.setTitle(randomString());
  newPollsQuestion.setDescription(randomString());
  newPollsQuestion.setExpirationDate(nextDate());
  newPollsQuestion.setLastVoteDate(nextDate());
  _persistence.update(newPollsQuestion);
  PollsQuestion existingPollsQuestion=_persistence.findByPrimaryKey(newPollsQuestion.getPrimaryKey());
  assertEquals(existingPollsQuestion.getUuid(),newPollsQuestion.getUuid());
  assertEquals(existingPollsQuestion.getQuestionId(),newPollsQuestion.getQuestionId());
  assertEquals(existingPollsQuestion.getGroupId(),newPollsQuestion.getGroupId());
  assertEquals(existingPollsQuestion.getCompanyId(),newPollsQuestion.getCompanyId());
  assertEquals(existingPollsQuestion.getUserId(),newPollsQuestion.getUserId());
  assertEquals(existingPollsQuestion.getUserName(),newPollsQuestion.getUserName());
  assertEquals(existingPollsQuestion.getCreateDate(),newPollsQuestion.getCreateDate());
  assertEquals(existingPollsQuestion.getModifiedDate(),newPollsQuestion.getModifiedDate());
  assertEquals(existingPollsQuestion.getTitle(),newPollsQuestion.getTitle());
  assertEquals(existingPollsQuestion.getDescription(),newPollsQuestion.getDescription());
  assertEquals(existingPollsQuestion.getExpirationDate(),newPollsQuestion.getExpirationDate());
  assertEquals(existingPollsQuestion.getLastVoteDate(),newPollsQuestion.getLastVoteDate());
}
