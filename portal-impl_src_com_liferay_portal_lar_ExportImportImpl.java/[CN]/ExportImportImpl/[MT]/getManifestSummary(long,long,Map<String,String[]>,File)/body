{
  final Group group=GroupLocalServiceUtil.getGroup(groupId);
  String userIdStrategy=MapUtil.getString(parameterMap,PortletDataHandlerKeys.USER_ID_STRATEGY);
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(file);
  PortletDataContext portletDataContext=PortletDataContextFactoryUtil.createImportPortletDataContext(group.getCompanyId(),groupId,parameterMap,getUserIdStrategy(userId,userIdStrategy),zipReader);
  final ManifestSummary manifestSummary=new ManifestSummary();
  SAXParser saxParser=new SAXParser();
  ElementHandler elementHandler=new ElementHandler(new ElementProcessor(){
    @Override public void processElement(    Element element){
      String elementName=element.getName();
      if (elementName.equals("header")) {
        String exportDateString=element.attributeValue("export-date");
        Date exportDate=GetterUtil.getDate(exportDateString,DateFormatFactoryUtil.getSimpleDateFormat(Time.RFC822_FORMAT));
        manifestSummary.setExportDate(exportDate);
      }
 else       if (elementName.equals("portlet")) {
        String portletId=element.attributeValue("portlet-id");
        try {
          Portlet portlet=PortletLocalServiceUtil.getPortletById(group.getCompanyId(),portletId);
          if ((portlet.getPortletDataHandlerInstance() != null) && GetterUtil.getBoolean(element.attributeValue("portlet-data"))) {
            manifestSummary.addDataPortlet(portlet);
          }
          if (GetterUtil.getBoolean(element.attributeValue("portlet-setup"))) {
            manifestSummary.addSetupPortlet(portlet);
          }
        }
 catch (        SystemException se) {
        }
      }
 else       if (elementName.equals("staged-model")) {
        String className=element.attributeValue("class-name");
        long modelAdditionCount=GetterUtil.getLong(element.attributeValue("addition-count"));
        manifestSummary.addModelAdditionCount(className,modelAdditionCount);
        long modelDeletionCount=GetterUtil.getLong(element.attributeValue("deletion-count"));
        manifestSummary.addModelDeletionCount(className,modelDeletionCount);
      }
    }
  }
,new String[]{"header","portlet","staged-model"});
  saxParser.setContentHandler(elementHandler);
  InputStream is=portletDataContext.getZipEntryAsInputStream("/manifest.xml");
  if (is == null) {
    throw new LARFileException("manifest.xml is not in the LAR");
  }
  String manifestXMLContent=StringUtil.read(is);
  saxParser.parse(new InputSource(new StringReader(manifestXMLContent)));
  return manifestSummary;
}
