{
  Pipe readPipe=Pipe.open();
  Pipe writePipe=Pipe.open();
  GatheringByteChannel gatheringByteChannel=writePipe.sink();
  ScatteringByteChannel scatteringByteChannel=readPipe.source();
  RegistrationReference registrationReference=_selectorIntraband.registerChannel(writePipe.source(),readPipe.sink());
  Object attachment=new Object();
  RecordCompletionHandler<Object> recordCompletionHandler=new RecordCompletionHandler<Object>();
  _selectorIntraband.sendDatagram(registrationReference,Datagram.createRequestDatagram(_type,_data),attachment,EnumSet.of(CompletionType.SUBMITTED),recordCompletionHandler);
  Datagram receiveDatagram=readDatagramFully(scatteringByteChannel);
  recordCompletionHandler.waitUntilSubmitted();
  Assert.assertSame(attachment,recordCompletionHandler.getAttachment());
  Assert.assertEquals(_type,receiveDatagram.getType());
  ByteBuffer dataByteBuffer=receiveDatagram.getDataByteBuffer();
  Assert.assertArrayEquals(_data,dataByteBuffer.array());
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(),Level.WARNING);
  recordCompletionHandler=new RecordCompletionHandler<Object>();
  _selectorIntraband.sendDatagram(registrationReference,Datagram.createRequestDatagram(_type,_data),attachment,EnumSet.of(CompletionType.DELIVERED),recordCompletionHandler,10,TimeUnit.MILLISECONDS);
  Selector selector=_selectorIntraband.selector;
  recordCompletionHandler.waitUntilTimeouted(selector);
  Assert.assertSame(attachment,recordCompletionHandler.getAttachment());
  Assert.assertEquals(1,logRecords.size());
  assertMessageStartWith(logRecords.get(0),"Removed timeout response waiting datagram");
  logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(),Level.OFF);
  recordCompletionHandler=new RecordCompletionHandler<Object>();
  _selectorIntraband.sendDatagram(registrationReference,Datagram.createRequestDatagram(_type,_data),attachment,EnumSet.of(CompletionType.DELIVERED),recordCompletionHandler,10,TimeUnit.MILLISECONDS);
  recordCompletionHandler.waitUntilTimeouted(selector);
  Assert.assertSame(attachment,recordCompletionHandler.getAttachment());
  Assert.assertTrue(logRecords.isEmpty());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(SelectorIntraband.class.getName(),Level.SEVERE);
  recordCompletionHandler=new RecordCompletionHandler<Object>(){
    @Override public void timeouted(    Object attachment){
      super.timeouted(attachment);
      throw new NullPointerException();
    }
  }
;
  Jdk14LogImplAdvice.reset();
  try {
    _selectorIntraband.sendDatagram(registrationReference,Datagram.createRequestDatagram(_type,_data),attachment,EnumSet.of(CompletionType.DELIVERED),recordCompletionHandler,10,TimeUnit.MILLISECONDS);
  }
  finally {
    recordCompletionHandler.waitUntilTimeouted(selector);
    Jdk14LogImplAdvice.waitUntilErrorCalled();
  }
  Assert.assertFalse(selector.isOpen());
  Assert.assertEquals(1,logRecords.size());
  assertMessageStartWith(logRecords.get(0),SelectorIntraband.class + ".threadFactory-1 exiting exceptionally");
  gatheringByteChannel.close();
  scatteringByteChannel.close();
}
