{
  ServletContext servletContext=jspCompilationContext.getServletContext();
  ClassLoader classLoader=servletContext.getClassLoader();
  if (!(classLoader instanceof JspBundleClassloader)) {
    throw new IllegalStateException("Class loader is not an instance of JspBundleClassloader");
  }
  JspBundleClassloader jspBundleClassloader=(JspBundleClassloader)classLoader;
  _allParticipatingBundles=jspBundleClassloader.getBundles();
  Bundle bundle=_allParticipatingBundles[0];
  BundleWiring bundleWiring=bundle.adapt(BundleWiring.class);
  _classLoader=bundleWiring.getClassLoader();
  for (  BundleWire bundleWire : bundleWiring.getRequiredWires(null)) {
    BundleWiring providedBundleWiring=bundleWire.getProviderWiring();
    _bundleWiringPackageNames.put(providedBundleWiring,_collectPackageNames(providedBundleWiring));
  }
  if (_log.isInfoEnabled()) {
    StringBundler sb=new StringBundler(_bundleWiringPackageNames.size() * 4 + 6);
    sb.append("JSP compiler for bundle ");
    sb.append(bundle.getSymbolicName());
    sb.append(StringPool.DASH);
    sb.append(bundle.getVersion());
    sb.append(" has dependent bundle wirings: ");
    for (    BundleWiring curBundleWiring : _bundleWiringPackageNames.keySet()) {
      Bundle currentBundle=curBundleWiring.getBundle();
      sb.append(currentBundle.getSymbolicName());
      sb.append(StringPool.DASH);
      sb.append(currentBundle.getVersion());
      sb.append(StringPool.COMMA_AND_SPACE);
    }
    sb.setIndex(sb.index() - 1);
    _log.info(sb.toString());
  }
  _javaFileObjectResolver=new JspJavaFileObjectResolver(bundleWiring,_jspBundleWiring,_bundleWiringPackageNames,_serviceTracker);
  jspCompilationContext.setClassLoader(jspBundleClassloader);
  initClassPath(servletContext);
  initTLDMappings(servletContext,jspCompilationContext.getTagFileJarUrls());
  super.init(jspCompilationContext,errorDispatcher,suppressLogging);
}
