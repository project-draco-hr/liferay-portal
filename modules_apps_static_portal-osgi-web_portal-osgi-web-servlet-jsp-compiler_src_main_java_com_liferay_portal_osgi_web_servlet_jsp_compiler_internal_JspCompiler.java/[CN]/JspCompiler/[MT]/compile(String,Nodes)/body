{
  classFiles=new ArrayList<>();
  JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();
  if (javaCompiler == null) {
    errDispatcher.jspError("jsp.error.nojdk");
    throw new JasperException("Unable to find Java compiler");
  }
  DiagnosticCollector<JavaFileObject> diagnosticCollector=new DiagnosticCollector<>();
  StandardJavaFileManager standardJavaFileManager=javaCompiler.getStandardFileManager(diagnosticCollector,null,null);
  try {
    standardJavaFileManager.setLocation(StandardLocation.CLASS_PATH,cpath);
  }
 catch (  IOException ioe) {
    throw new JasperException(ioe);
  }
  try (JavaFileManager javaFileManager=getJavaFileManager(standardJavaFileManager)){
    CompilationTask compilationTask=javaCompiler.getTask(null,javaFileManager,diagnosticCollector,options,null,Arrays.asList(new StringJavaFileObject(className.substring(className.lastIndexOf('.') + 1),charArrayWriter.toString())));
    if (_log.isDebugEnabled()) {
      _log.debug("Compiling JSP: ".concat(className));
    }
    if (compilationTask.call()) {
      for (      BytecodeFile bytecodeFile : classFiles) {
        rtctxt.setBytecode(bytecodeFile.getClassName(),bytecodeFile.getBytecode());
      }
      return null;
    }
  }
 catch (  IOException ioe) {
    throw new JasperException(ioe);
  }
  List<Diagnostic<? extends JavaFileObject>> diagnostics=diagnosticCollector.getDiagnostics();
  JavacErrorDetail[] javacErrorDetails=new JavacErrorDetail[diagnostics.size()];
  for (int i=0; i < diagnostics.size(); i++) {
    Diagnostic<? extends JavaFileObject> diagnostic=diagnostics.get(i);
    javacErrorDetails[i]=ErrorDispatcher.createJavacError(javaFileName,pageNodes,new StringBuilder(diagnostic.getMessage(null)),(int)diagnostic.getLineNumber());
  }
  return javacErrorDetails;
}
