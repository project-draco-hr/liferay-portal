{
  TestInterface testInterface=new TestInterface();
  try (ReflectionServiceTracker reflectionServiceTracker=new ReflectionServiceTracker(testInterface)){
    TrackedOne trackedOne=new TrackedOne();
    ServiceRegistration<InterfaceOne> serviceRegistration1=ReflectionServiceTrackerTestUtil.registerServiceWithRanking(_bundleContext,InterfaceOne.class,trackedOne,0);
    TrackedTwo trackedTwo=new TrackedTwo();
    ServiceRegistration<InterfaceTwo> serviceRegistration2=ReflectionServiceTrackerTestUtil.registerServiceWithRanking(_bundleContext,InterfaceTwo.class,trackedTwo,0);
    serviceRegistration1.unregister();
    serviceRegistration2.unregister();
    Assert.assertNotNull(testInterface.getTrackedOne());
    Assert.assertNotNull(testInterface.getTrackedTwo());
    try {
      TrackedOne trackedOne=testInterface.getTrackedOne();
      trackedOne.noop1();
      Assert.fail("Should throw UnavailableServiceException");
    }
 catch (    UnavailableServiceException sue) {
      Assert.assertEquals(InterfaceOne.class,sue.getUnavailableServiceClass());
    }
    try {
      TrackedTwo trackedTwo=testInterface.getTrackedTwo();
      trackedTwo.noop2();
      Assert.fail("Should throw UnavailableServiceException");
    }
 catch (    UnavailableServiceException sue) {
      Assert.assertEquals(InterfaceTwo.class,sue.getUnavailableServiceClass());
    }
  }
 }
