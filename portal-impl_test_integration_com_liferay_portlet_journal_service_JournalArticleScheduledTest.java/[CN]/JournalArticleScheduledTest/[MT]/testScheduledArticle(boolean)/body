{
  int initialSearchArticlesCount=JournalTestUtil.getSearchArticlesCount(_group.getCompanyId(),_group.getGroupId());
  Date now=new Date();
  JournalArticle article=addJournalArticle(_group.getGroupId(),approved,now);
  AssetEntry assetEntry=AssetEntryLocalServiceUtil.getEntry(JournalArticle.class.getName(),article.getResourcePrimKey());
  if (approved) {
    Assert.assertFalse(article.isApproved());
    Assert.assertTrue(article.isScheduled());
    Assert.assertFalse(assetEntry.isVisible());
  }
 else {
    Assert.assertTrue(article.isDraft());
    Assert.assertFalse(article.isScheduled());
    Assert.assertFalse(assetEntry.isVisible());
  }
  Assert.assertEquals(initialSearchArticlesCount,JournalTestUtil.getSearchArticlesCount(_group.getCompanyId(),_group.getGroupId()));
  Calendar pastDisplayDateCalendar=getCalendarFromDate(now,PAST);
  article.setDisplayDate(pastDisplayDateCalendar.getTime());
  article=JournalArticleLocalServiceUtil.updateJournalArticle(article);
  JournalArticleLocalServiceUtil.checkArticles();
  article=JournalArticleLocalServiceUtil.getArticle(article.getId());
  assetEntry=AssetEntryLocalServiceUtil.getEntry(JournalArticle.class.getName(),article.getResourcePrimKey());
  if (approved) {
    Assert.assertTrue(article.isApproved());
    Assert.assertFalse(article.isScheduled());
    Assert.assertTrue(assetEntry.isVisible());
    Assert.assertEquals(initialSearchArticlesCount + 1,JournalTestUtil.getSearchArticlesCount(_group.getCompanyId(),_group.getGroupId()));
  }
 else {
    Assert.assertTrue(article.isDraft());
    Assert.assertFalse(article.isScheduled());
    Assert.assertFalse(assetEntry.isVisible());
    Assert.assertEquals(initialSearchArticlesCount,JournalTestUtil.getSearchArticlesCount(_group.getCompanyId(),_group.getGroupId()));
  }
}
