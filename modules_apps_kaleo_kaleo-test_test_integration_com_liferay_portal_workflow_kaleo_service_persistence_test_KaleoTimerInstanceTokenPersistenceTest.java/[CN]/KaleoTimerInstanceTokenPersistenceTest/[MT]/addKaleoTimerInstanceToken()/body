{
  long pk=RandomTestUtil.nextLong();
  KaleoTimerInstanceToken kaleoTimerInstanceToken=_persistence.create(pk);
  kaleoTimerInstanceToken.setGroupId(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setCompanyId(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setUserId(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setUserName(RandomTestUtil.randomString());
  kaleoTimerInstanceToken.setCreateDate(RandomTestUtil.nextDate());
  kaleoTimerInstanceToken.setModifiedDate(RandomTestUtil.nextDate());
  kaleoTimerInstanceToken.setKaleoClassName(RandomTestUtil.randomString());
  kaleoTimerInstanceToken.setKaleoClassPK(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setKaleoDefinitionId(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setKaleoInstanceId(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setKaleoInstanceTokenId(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setKaleoTaskInstanceTokenId(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setKaleoTimerId(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setKaleoTimerName(RandomTestUtil.randomString());
  kaleoTimerInstanceToken.setBlocking(RandomTestUtil.randomBoolean());
  kaleoTimerInstanceToken.setCompletionUserId(RandomTestUtil.nextLong());
  kaleoTimerInstanceToken.setCompleted(RandomTestUtil.randomBoolean());
  kaleoTimerInstanceToken.setCompletionDate(RandomTestUtil.nextDate());
  kaleoTimerInstanceToken.setWorkflowContext(RandomTestUtil.randomString());
  _kaleoTimerInstanceTokens.add(_persistence.update(kaleoTimerInstanceToken));
  return kaleoTimerInstanceToken;
}
