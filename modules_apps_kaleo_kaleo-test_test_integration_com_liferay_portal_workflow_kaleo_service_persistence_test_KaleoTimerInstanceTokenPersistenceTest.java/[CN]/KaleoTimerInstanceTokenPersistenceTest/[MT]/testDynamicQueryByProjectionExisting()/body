{
  KaleoTimerInstanceToken newKaleoTimerInstanceToken=addKaleoTimerInstanceToken();
  DynamicQuery dynamicQuery=DynamicQueryFactoryUtil.forClass(KaleoTimerInstanceToken.class,_dynamicQueryClassLoader);
  dynamicQuery.setProjection(ProjectionFactoryUtil.property("kaleoTimerInstanceTokenId"));
  Object newKaleoTimerInstanceTokenId=newKaleoTimerInstanceToken.getKaleoTimerInstanceTokenId();
  dynamicQuery.add(RestrictionsFactoryUtil.in("kaleoTimerInstanceTokenId",new Object[]{newKaleoTimerInstanceTokenId}));
  List<Object> result=_persistence.findWithDynamicQuery(dynamicQuery);
  Assert.assertEquals(1,result.size());
  Object existingKaleoTimerInstanceTokenId=result.get(0);
  Assert.assertEquals(existingKaleoTimerInstanceTokenId,newKaleoTimerInstanceTokenId);
}
