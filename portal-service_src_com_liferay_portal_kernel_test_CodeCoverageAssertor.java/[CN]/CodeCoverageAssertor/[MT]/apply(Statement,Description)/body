{
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      _dynamicInstrumentMethod.invoke(null,_includes,_excludes);
      try {
        statement.evaluate();
      }
  finally {
        List<Class<?>> assertClassList=new ArrayList<Class<?>>();
        String className=description.getClassName();
        if (className.endsWith("Test")) {
          className=className.substring(0,className.length() - 4);
          ClassLoader classLoader=getClass().getClassLoader();
          Class<?> clazz=classLoader.loadClass(className);
          assertClassList.add(clazz);
        }
        appendAssertClasses(assertClassList);
        _assertCoverageMethod.invoke(null,_includeInnerClasses,assertClassList.toArray(new Class<?>[assertClassList.size()]));
      }
    }
  }
;
}
