{
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      String className=description.getClassName();
      if (className.endsWith("Test")) {
        className=className.substring(0,className.length() - 4);
      }
      String[] includes=_generateIncludes(className);
      _dynamicallyInstrumentMethod.invoke(null,includes,_excludes);
      try {
        statement.evaluate();
      }
  finally {
        ClassLoader classLoader=getClassLoader();
        Class<?> clazz=classLoader.loadClass(className);
        List<Class<?>> assertClasses=new ArrayList<Class<?>>();
        assertClasses.add(clazz);
        appendAssertClasses(assertClasses);
        _assertCoverageMethod.invoke(null,_includeInnerClasses,assertClasses.toArray(new Class<?>[assertClasses.size()]));
      }
    }
  }
;
}
