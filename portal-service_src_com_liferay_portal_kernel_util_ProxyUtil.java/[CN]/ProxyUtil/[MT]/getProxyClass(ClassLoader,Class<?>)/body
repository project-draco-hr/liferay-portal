{
  EqualityWeakReference<ClassLoader> classLoaderReference=new EqualityWeakReference<ClassLoader>(classLoader);
  ConcurrentMap<LookupKey,Reference<Class<?>>> classReferences=_classReferences.get(classLoaderReference);
  if (classReferences == null) {
    classReferences=new ConcurrentHashMap<LookupKey,Reference<Class<?>>>();
    classLoaderReference=new EqualityWeakReference<ClassLoader>(classLoader,_classLoaderReferenceQueue);
    ConcurrentMap<LookupKey,Reference<Class<?>>> oldClassReferences=_classReferences.putIfAbsent(classLoaderReference,classReferences);
    if (oldClassReferences != null) {
      classReferences=oldClassReferences;
      classLoaderReference.enqueue();
    }
  }
  LookupKey lookupKey=new LookupKey(interfaceClasses);
  Reference<Class<?>> classReference=classReferences.get(lookupKey);
  Class<?> clazz=null;
  if ((classReference == null) || ((clazz=classReference.get()) == null)) {
synchronized (classReferences) {
      classReference=classReferences.get(lookupKey);
      if ((classReference == null) || ((clazz=classReference.get()) == null)) {
        clazz=Proxy.getProxyClass(classLoader,interfaceClasses);
        classReferences.put(lookupKey,new WeakReference<Class<?>>(clazz));
      }
    }
  }
  Constructor<?> constructor=null;
  try {
    constructor=clazz.getConstructor(_argumentsClazz);
  }
 catch (  Exception e) {
    throw new InternalError(e.toString());
  }
  EqualityWeakReference<Class<?>> proxyClassReference=new EqualityWeakReference<Class<?>>(clazz,_proxyClassReferenceQueue);
  _constructors.putIfAbsent(proxyClassReference,constructor);
  while (true) {
    EqualityWeakReference<ClassLoader> staleClassLoaderReference=(EqualityWeakReference<ClassLoader>)_classLoaderReferenceQueue.poll();
    if (staleClassLoaderReference == null) {
      break;
    }
    _classReferences.remove(staleClassLoaderReference);
  }
  while (true) {
    EqualityWeakReference<Class<?>> staleProxyClassReference=(EqualityWeakReference<Class<?>>)_proxyClassReferenceQueue.poll();
    if (staleProxyClassReference == null) {
      break;
    }
    _constructors.remove(staleProxyClassReference);
  }
  return clazz;
}
