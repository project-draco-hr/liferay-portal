{
  ConcurrentMap<LookupKey,Class<?>> classReferences=_classReferences.get(classLoader);
  if (classReferences == null) {
    classReferences=new ConcurrentReferenceValueHashMap<LookupKey,Class<?>>(FinalizeManager.WEAK_REFERENCE_FACTORY);
    ConcurrentMap<LookupKey,Class<?>> oldClassReferences=_classReferences.putIfAbsent(classLoader,classReferences);
    if (oldClassReferences != null) {
      classReferences=oldClassReferences;
    }
  }
  LookupKey lookupKey=new LookupKey(interfaceClasses);
  Class<?> clazz=classReferences.get(lookupKey);
  if (clazz == null) {
synchronized (classReferences) {
      clazz=classReferences.get(lookupKey);
      if (clazz == null) {
        clazz=Proxy.getProxyClass(classLoader,interfaceClasses);
        classReferences.put(lookupKey,clazz);
      }
    }
  }
  Constructor<?> constructor=null;
  try {
    constructor=clazz.getConstructor(_argumentsClazz);
    constructor.setAccessible(true);
  }
 catch (  Exception e) {
    throw new InternalError(e.toString());
  }
  _constructors.putIfAbsent(clazz,constructor);
  return clazz;
}
