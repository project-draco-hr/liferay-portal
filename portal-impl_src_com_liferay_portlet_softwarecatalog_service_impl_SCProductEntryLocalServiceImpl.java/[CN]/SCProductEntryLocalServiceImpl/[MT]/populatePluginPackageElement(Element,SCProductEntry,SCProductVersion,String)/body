{
  DocUtil.add(el,"name",productEntry.getName());
  String moduleId=ModuleId.toString(productEntry.getRepoGroupId(),productEntry.getRepoArtifactId(),productVersion.getVersion(),"war");
  DocUtil.add(el,"module-id",moduleId);
  Element typesEl=el.addElement("types");
  DocUtil.add(typesEl,"type",productEntry.getType());
  DocUtil.add(el,"short-description",productEntry.getShortDescription());
  if (Validator.isNotNull(productEntry.getLongDescription())) {
    DocUtil.add(el,"long-description",productEntry.getLongDescription());
  }
  if (Validator.isNotNull(productVersion.getChangeLog())) {
    DocUtil.add(el,"change-log",productVersion.getChangeLog());
  }
  if (Validator.isNotNull(productVersion.getDirectDownloadURL())) {
    DocUtil.add(el,"download-url",productVersion.getDirectDownloadURL());
  }
  DocUtil.add(el,"author",productEntry.getUserName());
  Element licensesEl=el.addElement("licenses");
  Iterator itr=productEntry.getLicenses().iterator();
  while (itr.hasNext()) {
    SCLicense license=(SCLicense)itr.next();
    Element licenseEl=licensesEl.addElement("license");
    licenseEl.addText(license.getName());
    licenseEl.addAttribute("osi-approved",String.valueOf(license.isOpenSource()));
  }
  Element liferayVersionsEl=el.addElement("liferay-versions");
  itr=productVersion.getFrameworkVersions().iterator();
  while (itr.hasNext()) {
    SCFrameworkVersion frameworkVersion=(SCFrameworkVersion)itr.next();
    DocUtil.add(liferayVersionsEl,"liferay-version",frameworkVersion.getName());
  }
}
