{
  User user=userPersistence.findByPrimaryKey(userId);
  long groupId=serviceContext.getScopeGroupId();
  tags=getTags(tags);
  repoGroupId=StringUtil.toLowerCase(repoGroupId.trim());
  repoArtifactId=StringUtil.toLowerCase(repoArtifactId.trim());
  validate(0,name,type,shortDescription,pageURL,author,repoGroupId,repoArtifactId,licenseIds,thumbnails,fullImages);
  long productEntryId=counterLocalService.increment();
  SCProductEntry productEntry=scProductEntryPersistence.create(productEntryId);
  productEntry.setGroupId(groupId);
  productEntry.setCompanyId(user.getCompanyId());
  productEntry.setUserId(user.getUserId());
  productEntry.setUserName(user.getFullName());
  productEntry.setName(name);
  productEntry.setType(type);
  productEntry.setTags(tags);
  productEntry.setShortDescription(shortDescription);
  productEntry.setLongDescription(longDescription);
  productEntry.setPageURL(pageURL);
  productEntry.setAuthor(author);
  productEntry.setRepoGroupId(repoGroupId);
  productEntry.setRepoArtifactId(repoArtifactId);
  scProductEntryPersistence.update(productEntry);
  if (serviceContext.isAddGroupPermissions() || serviceContext.isAddGuestPermissions()) {
    addProductEntryResources(productEntry,serviceContext.isAddGroupPermissions(),serviceContext.isAddGuestPermissions());
  }
 else {
    addProductEntryResources(productEntry,serviceContext.getModelPermissions());
  }
  scProductEntryPersistence.setSCLicenses(productEntryId,licenseIds);
  saveProductScreenshots(productEntry,thumbnails,fullImages);
  if (PropsValues.SC_PRODUCT_COMMENTS_ENABLED) {
    mbMessageLocalService.addDiscussionMessage(userId,productEntry.getUserName(),groupId,SCProductEntry.class.getName(),productEntryId,WorkflowConstants.ACTION_PUBLISH);
  }
  return productEntry;
}
