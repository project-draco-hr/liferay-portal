{
  tags=getTags(tags);
  Date now=new Date();
  validate(name,type,shortDescription,pageURL,author,licenseIds,thumbnails,fullImages);
  SCProductEntry productEntry=scProductEntryPersistence.findByPrimaryKey(productEntryId);
  productEntry.setModifiedDate(now);
  productEntry.setName(name);
  productEntry.setType(type);
  productEntry.setTags(tags);
  productEntry.setShortDescription(shortDescription);
  productEntry.setLongDescription(longDescription);
  productEntry.setPageURL(pageURL);
  productEntry.setAuthor(author);
  productEntry.setRepoGroupId(repoGroupId);
  productEntry.setRepoArtifactId(repoArtifactId);
  scProductEntryPersistence.update(productEntry);
  scProductEntryPersistence.setSCLicenses(productEntryId,licenseIds);
  if (thumbnails.size() == 0) {
    scProductScreenshotLocalService.deleteProductScreenshots(productEntryId);
  }
 else {
    saveProductScreenshots(productEntry,thumbnails,fullImages);
  }
  String version=StringPool.BLANK;
  List productVersions=scProductVersionPersistence.findByProductEntryId(productEntryId,0,1);
  if (productVersions.size() > 0) {
    SCProductVersion productVersion=(SCProductVersion)productVersions.get(0);
    productVersion.setModifiedDate(now);
    scProductVersionPersistence.update(productVersion);
    version=productVersion.getVersion();
  }
  try {
    Indexer.updateProductEntry(productEntry.getCompanyId(),productEntry.getGroupId(),productEntry.getUserId(),productEntry.getUserName(),productEntryId,name,now,version,type,shortDescription,longDescription,pageURL,repoGroupId,repoArtifactId);
  }
 catch (  IOException ioe) {
    _log.error("Indexing " + productEntryId,ioe);
  }
  return productEntry;
}
