{
  final AtomicReference<String> previousGradlewDistributionUrl=new AtomicReference<>(null);
  Path gitIgnorePath=path.resolve("gitignore");
  Path dotGitIgnorePath=path.resolve(".gitignore");
  Assert.assertFalse(Files.exists(gitIgnorePath));
  Assert.assertTrue(Files.exists(dotGitIgnorePath));
  if (gitIgnoreForbidden) {
    Assert.assertFalse("Forbidden " + dotGitIgnorePath,Files.exists(dotGitIgnorePath));
  }
 else {
    Assert.assertTrue("Missing " + dotGitIgnorePath,Files.exists(dotGitIgnorePath));
  }
  boolean gradlewExists=Files.exists(path.resolve("gradlew"));
  if (gradlewForbidden) {
    Assert.assertFalse("Forbidden Gradle wrapper in " + path,gradlewExists);
  }
 else {
    Assert.assertTrue("Missing Gradle wrapper in " + path,gradlewExists);
    String gradlewDistributionUrl=_readProperty(path.resolve("gradle/wrapper/gradle-wrapper.properties"),"distributionUrl");
    boolean first=previousGradlewDistributionUrl.compareAndSet(null,gradlewDistributionUrl);
    if (!first) {
      Assert.assertEquals("Wrong Gradle wrapper distribution URL in " + path,previousGradlewDistributionUrl.get(),gradlewDistributionUrl);
    }
  }
  File buildGradle=new File(path.toFile(),"build.gradle");
  Assert.assertTrue(buildGradle.exists());
  _lacks(buildGradle,".*latest.release.*");
}
