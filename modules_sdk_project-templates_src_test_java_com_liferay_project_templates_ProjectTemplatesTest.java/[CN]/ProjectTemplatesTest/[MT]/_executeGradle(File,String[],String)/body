{
  if (Validator.isNotNull(_repositoryUrl)) {
    File buildGradleFile=new File(gradleProjectDir,"build.gradle");
    Path buildGradlePath=buildGradleFile.toPath();
    String buildGradle=FileTestUtil.read(buildGradlePath);
    buildGradle=buildGradle.replace("\"" + _REPOSITORY_CDN_URL + "\"","\"" + _repositoryUrl + "\"");
    Files.write(buildGradlePath,buildGradle.getBytes(StandardCharsets.UTF_8));
  }
  GradleRunner gradleRunner=GradleRunner.create();
  if (Validator.isNotNull(_httpProxyHost) && Validator.isNotNull(_httpProxyPort)) {
    String[] arguments=new String[taskPath.length + 2];
    arguments[0]="-Dhttp.proxyHost=" + _httpProxyHost;
    arguments[1]="-Dhttp.proxyPort=" + _httpProxyPort;
    System.arraycopy(taskPath,0,arguments,2,taskPath.length);
    gradleRunner.withArguments(arguments);
  }
 else {
    gradleRunner.withArguments(taskPath);
  }
  gradleRunner.withGradleDistribution(_gradleDistribution);
  gradleRunner.withProjectDir(gradleProjectDir);
  BuildResult buildResult=gradleRunner.build();
  if (testTaskPaths.length == 0) {
    testTaskPaths=taskPath;
  }
  for (  String testTaskPath : testTaskPaths) {
    BuildTask buildTask=buildResult.task(testTaskPath);
    Assert.assertNotNull("Build task \"" + testTaskPath + "\" not found",buildTask);
    Assert.assertEquals("Unexpected outcome for task \"" + buildTask.getPath() + "\"",TaskOutcome.SUCCESS,buildTask.getOutcome());
  }
}
