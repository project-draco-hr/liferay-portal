{
  File destinationDir=temporaryFolder.newFolder("mavenBuild");
  List<String> completeArgs=new ArrayList<>(args.length + 6);
  completeArgs.add("archetype:generate");
  completeArgs.add("-B");
  completeArgs.add("-DarchetypeArtifactId=com.liferay.project.templates." + template);
  completeArgs.add("-DarchetypeGroupId=com.liferay");
  completeArgs.add("-DarchetypeVersion=1.0.0");
  completeArgs.add("-DgroupId=com.test");
  completeArgs.add("-Dversion=1.0.0");
  if (Validator.isNotNull(template)) {
    completeArgs.add("--template");
    completeArgs.add(template);
  }
  for (  String arg : args) {
    completeArgs.add(arg);
  }
  MavenCli mavenCli=new MavenCli();
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  ByteArrayOutputStream errorOutput=new ByteArrayOutputStream();
  int retcode=mavenCli.doMain(completeArgs.toArray(new String[completeArgs.size()]),destinationDir.getPath(),new PrintStream(output),new PrintStream(errorOutput));
  Assert.assertEquals(new String(errorOutput.toByteArray()),0,retcode);
  output=new ByteArrayOutputStream();
  errorOutput=new ByteArrayOutputStream();
  File projectDir=new File(destinationDir,name);
  _testExists(projectDir,"pom.xml");
  _testNotExists(projectDir,"build.gradle");
  _testNotExists(projectDir,"gradlew");
  _testNotExists(projectDir,"gradlew.bat");
  _testNotExists(projectDir,"gradle/wrapper/gradle-wrapper.jar");
  _testNotExists(projectDir,"gradle/wrapper/gradle-wrapper.properties");
  return projectDir;
}
