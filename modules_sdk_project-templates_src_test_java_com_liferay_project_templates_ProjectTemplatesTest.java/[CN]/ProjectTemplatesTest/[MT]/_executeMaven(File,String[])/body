{
  File deps=new File("build/mavenEmbedderDeps.txt");
  String[] lines=FileTestUtil.readLines(deps);
  URL[] urls=new URL[lines.length];
  for (int i=0; i < lines.length; i++) {
    File file=new File(lines[i]);
    URI uri=file.toURI();
    urls[i]=uri.toURL();
  }
  try (URLClassLoader classLoader=new URLClassLoader(urls,null)){
    Class<?> mavenCLIClazz=classLoader.loadClass("org.apache.maven.cli.MavenCli");
    Object mavenCli=mavenCLIClazz.newInstance();
    ByteArrayOutputStream output=new ByteArrayOutputStream();
    ByteArrayOutputStream errorOutput=new ByteArrayOutputStream();
    Method doMain=mavenCLIClazz.getMethod("doMain",String[].class,String.class,PrintStream.class,PrintStream.class);
    Thread currentThread=Thread.currentThread();
    ClassLoader contextClassLoader=currentThread.getContextClassLoader();
    currentThread.setContextClassLoader(classLoader);
    try {
      PrintStream out=new PrintStream(output);
      PrintStream err=new PrintStream(errorOutput);
      String[] arguments=null;
      if (Validator.isNotNull(_httpProxyHost) && Validator.isNotNull(_httpProxyPort)) {
        arguments=new String[args.length + 2];
        arguments[0]="-Dhttp.proxyHost=" + _httpProxyHost;
        arguments[1]="-Dhttp.proxyPort=" + _httpProxyPort;
        System.arraycopy(args,0,arguments,2,args.length);
      }
 else {
        arguments=args;
      }
      Integer retcode=(Integer)doMain.invoke(mavenCli,arguments,gradleProjectDir.getAbsolutePath(),out,err);
      Assert.assertEquals(new String(errorOutput.toByteArray()),0,retcode.intValue());
    }
  finally {
      currentThread.setContextClassLoader(contextClassLoader);
    }
  }
 }
