{
  final Project project=task.getProject();
  Properties artifactProperties;
  try {
    artifactProperties=FileUtil.readProperties(_recordArtifactTask.getOutputFile());
  }
 catch (  IOException ioe) {
    throw new GradleException("Unable to read artifact properties",ioe);
  }
  final String artifactGitId=artifactProperties.getProperty("artifact.git.id");
  if (Validator.isNull(artifactGitId)) {
    if (_logger.isInfoEnabled()) {
      _logger.info(project + " has never been published");
    }
    return true;
  }
  final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  project.javaexec(new Action<JavaExecSpec>(){
    @Override public void execute(    JavaExecSpec javaExecSpec){
      File gitDir=new File(_rootDir,".git");
      javaExecSpec.args(FileUtil.getAbsolutePath(gitDir),FileUtil.getAbsolutePath(project.getProjectDir()),artifactGitId,_IGNORED_MESSAGE_PATTERN);
      javaExecSpec.setClasspath(_antJGitFileCollection);
      javaExecSpec.setMain("com.liferay.ant.jgit.GitUpToDateTask");
      javaExecSpec.setStandardOutput(byteArrayOutputStream);
    }
  }
);
  return !Boolean.parseBoolean(byteArrayOutputStream.toString());
}
