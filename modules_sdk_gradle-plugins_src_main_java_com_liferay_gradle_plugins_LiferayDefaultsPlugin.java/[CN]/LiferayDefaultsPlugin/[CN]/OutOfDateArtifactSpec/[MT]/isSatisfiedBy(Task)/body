{
  final Project project=task.getProject();
  Properties artifactProperties=null;
  try {
    artifactProperties=FileUtil.readProperties(_recordArtifactTask.getOutputFile());
  }
 catch (  IOException ioe) {
    throw new GradleException("Unable to read artifact properties",ioe);
  }
  final String artifactGitId=artifactProperties.getProperty("artifact.git.id");
  if (Validator.isNull(artifactGitId)) {
    if (_logger.isInfoEnabled()) {
      _logger.info(project + " has never been published");
    }
    return true;
  }
  final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  project.exec(new Action<ExecSpec>(){
    @Override public void execute(    ExecSpec execSpec){
      execSpec.commandLine("git","log","--format=%s",artifactGitId + "..HEAD",".");
      execSpec.setStandardOutput(byteArrayOutputStream);
      execSpec.setWorkingDir(project.getProjectDir());
    }
  }
);
  String output=byteArrayOutputStream.toString();
  String[] lines=output.split("\\r?\\n");
  for (  String line : lines) {
    if (_logger.isInfoEnabled()) {
      _logger.info(line);
    }
    if (Validator.isNull(line)) {
      continue;
    }
    if (!line.contains(_IGNORED_MESSAGE_PATTERN)) {
      return true;
    }
  }
  return false;
}
