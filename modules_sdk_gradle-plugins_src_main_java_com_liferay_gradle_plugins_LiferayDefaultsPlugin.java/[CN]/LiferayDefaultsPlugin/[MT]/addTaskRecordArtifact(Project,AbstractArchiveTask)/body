{
  WritePropertiesTask writePropertiesTask=GradleUtil.addTask(project,RECORD_ARTIFACT_TASK_NAME,WritePropertiesTask.class);
  writePropertiesTask.property("artifact.git.id",new Callable<String>(){
    @Override public String call() throws Exception {
      return getGitHead(project);
    }
  }
);
  for (  final AbstractArchiveTask abstractArchiveTask : abstractArchiveTasks) {
    String key=abstractArchiveTask.getClassifier();
    if (Validator.isNull(key)) {
      key="artifact.url";
    }
 else {
      key="artifact." + key + ".url";
    }
    writePropertiesTask.property(key,new Callable<String>(){
      @Override public String call() throws Exception {
        return getArtifactRemoteURL(abstractArchiveTask,true);
      }
    }
);
  }
  writePropertiesTask.setDescription("Records the commit ID and the artifact URLs.");
  writePropertiesTask.setOutputFile("artifact.properties");
  return writePropertiesTask;
}
