{
  final File portalRootDir=getPortalRootDir(project);
  final boolean publishing=isPublishing(project);
  boolean testProject=isTestProject(project);
  applyPlugins(project);
  configureMavenConf2ScopeMappings(project);
  applyConfigScripts(project);
  Configuration portalConfiguration=GradleUtil.getConfiguration(project,LiferayJavaPlugin.PORTAL_CONFIGURATION_NAME);
  Configuration portalTestConfiguration=addConfigurationPortalTest(project);
  addDependenciesPortalTest(project);
  addDependenciesTestCompile(project);
  addTaskJarJavadoc(project);
  addTaskJarSources(project,testProject);
  configureBasePlugin(project,portalRootDir);
  configureConfigurations(project);
  configureEclipse(project,portalTestConfiguration);
  configureIdea(project,portalTestConfiguration);
  configureJavaPlugin(project);
  configureProject(project);
  configureRepositories(project);
  configureSourceSetMain(project);
  configureSourceSetTest(project,portalConfiguration,portalTestConfiguration);
  configureSourceSetTestIntegration(project,portalConfiguration,portalTestConfiguration);
  configureTaskJar(project,testProject);
  configureTaskTest(project);
  configureTaskTestIntegration(project);
  configureTasksFindBugs(project);
  configureTasksJavaCompile(project);
  configureTasksPublishNodeModule(project);
  withPlugin(project,BundlePlugin.class,new Action<BundlePlugin>(){
    @Override public void execute(    BundlePlugin bundlePlugin){
      addTaskCopyLibs(project);
      configureBundleDefaultInstructions(project,publishing);
      configureTaskJavadoc(project);
    }
  }
);
  withPlugin(project,ServiceBuilderPlugin.class,new Action<ServiceBuilderPlugin>(){
    @Override public void execute(    ServiceBuilderPlugin serviceBuilderPlugin){
      configureLocalPortalTool(project,portalRootDir,ServiceBuilderPlugin.CONFIGURATION_NAME,ServiceBuilderDefaultsPlugin.PORTAL_TOOL_NAME,"portal-tools-service-builder");
    }
  }
);
  project.afterEvaluate(new Action<Project>(){
    @Override public void execute(    Project project){
      configureArtifacts(project);
      configureProjectBndProperties(project);
      configureProjectVersion(project);
      configureTaskUploadArchives(project);
    }
  }
);
}
