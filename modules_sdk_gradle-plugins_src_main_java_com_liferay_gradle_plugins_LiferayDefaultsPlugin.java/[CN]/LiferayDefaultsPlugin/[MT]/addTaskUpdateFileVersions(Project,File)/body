{
  ReplaceRegexTask replaceRegexTask=GradleUtil.addTask(project,UPDATE_FILE_VERSIONS_TASK_NAME,ReplaceRegexTask.class);
  replaceRegexTask.doLast(new Action<Task>(){
    @Override public void execute(    Task task){
      ReplaceRegexTask replaceRegexTask=(ReplaceRegexTask)task;
      if (!_logger.isLifecycleEnabled()) {
        return;
      }
      for (      Object file : replaceRegexTask.getMatchedFiles()) {
        _logger.lifecycle("Project version in " + project.relativePath(file) + " updated");
      }
    }
  }
);
  replaceRegexTask.pre(new Closure<String>(null){
    @SuppressWarnings("unused") public String doCall(    String content,    File file){
      String fileName=file.getName();
      if (!fileName.equals("build.gradle")) {
        return content;
      }
      if ((gitRepoDir != null) && FileUtil.isChild(file,gitRepoDir)) {
        return content.replaceAll(getModuleDependencyRegex(project),Matcher.quoteReplacement(getProjectDependency(project)));
      }
 else {
        return content.replaceAll(Pattern.quote(getProjectDependency(project)),Matcher.quoteReplacement(getModuleDependency(project,true)));
      }
    }
  }
);
  replaceRegexTask.replaceOnlyIf(new Closure<Boolean>(null){
    @SuppressWarnings("unused") public Boolean doCall(    String group,    String replacement,    String content){
      String projectPath=project.getPath();
      if ((gitRepoDir == null) && !projectPath.startsWith(":core:")) {
        return true;
      }
      Version groupVersion=getVersion(group);
      Version replacementVersion=getVersion(replacement);
      if ((groupVersion == null) || (replacementVersion == null) || (groupVersion.getMajor() != replacementVersion.getMajor())) {
        return true;
      }
      return false;
    }
  }
);
  replaceRegexTask.setDescription("Updates the project version in external files.");
  replaceRegexTask.setIgnoreUnmatched(true);
  replaceRegexTask.setReplacement(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return project.getVersion();
    }
  }
);
  return replaceRegexTask;
}
