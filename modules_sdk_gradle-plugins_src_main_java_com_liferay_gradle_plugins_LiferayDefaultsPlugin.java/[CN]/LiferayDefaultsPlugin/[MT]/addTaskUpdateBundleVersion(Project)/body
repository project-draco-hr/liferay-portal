{
  Task task=project.task(UPDATE_BUNDLE_VERSION_TASK_NAME);
  Action<Task> action=new Action<Task>(){
    private void _update(    Project project,    Object fileName,    String oldSub,    String newSub) throws IOException {
      File file=project.file(fileName);
      if (!file.exists()) {
        if (_logger.isInfoEnabled()) {
          _logger.info("Unable to find " + project.relativePath(file));
        }
        return;
      }
      Path path=file.toPath();
      String content=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);
      String newContent=content.replace(oldSub,newSub);
      if (content.equals(newContent)) {
        if (_logger.isWarnEnabled()) {
          _logger.warn("Unable to update " + project.relativePath(file));
        }
        return;
      }
      Files.write(path,newContent.getBytes(StandardCharsets.UTF_8));
      if (_logger.isLifecycleEnabled()) {
        _logger.lifecycle("Updated " + project.relativePath(file));
      }
    }
    @Override public void execute(    Task task){
      try {
        Project project=task.getProject();
        VersionNumber versionNumber=VersionNumber.parse(String.valueOf(project.getVersion()));
        VersionNumber newVersionNumber=new VersionNumber(versionNumber.getMajor(),versionNumber.getMinor(),versionNumber.getMicro() + 1,versionNumber.getQualifier());
        _update(project,"bnd.bnd",Constants.BUNDLE_VERSION + ": " + versionNumber,Constants.BUNDLE_VERSION + ": " + newVersionNumber);
        File moduleConfigFile=getModuleConfigFile(project);
        if (moduleConfigFile != null) {
          _update(project,moduleConfigFile,"\"version\": \"" + versionNumber + "\"","\"version\": \"" + newVersionNumber + "\"");
        }
      }
 catch (      IOException ioe) {
        throw new GradleException("Unable to update bundle version",ioe);
      }
    }
  }
;
  task.doLast(action);
  task.onlyIf(new Spec<Task>(){
    @Override public boolean isSatisfiedBy(    Task task){
      Project project=task.getProject();
      String version=String.valueOf(project.getVersion());
      if (version.contains("LIFERAY-PATCHED-")) {
        return false;
      }
      return true;
    }
  }
);
  task.setDescription("Updates the project version in the " + Constants.BUNDLE_VERSION + " header.");
  return task;
}
