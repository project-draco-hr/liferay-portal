{
  if (!InlineSQLHelperUtil.isEnabled()) {
    return findByC_P(companyId,parentUserGroupId,start,end,orderByComparator);
  }
  StringBundler query=null;
  if (orderByComparator != null) {
    query=new StringBundler(4 + (orderByComparator.getOrderByFields().length * 3));
  }
 else {
    query=new StringBundler(4);
  }
  if (getDB().isSupportsInlineDistinct()) {
    query.append(_FILTER_SQL_SELECT_USERGROUP_WHERE);
  }
 else {
    query.append(_FILTER_SQL_SELECT_USERGROUP_NO_INLINE_DISTINCT_WHERE);
  }
  query.append(_FINDER_COLUMN_C_P_COMPANYID_2);
  query.append(_FINDER_COLUMN_C_P_PARENTUSERGROUPID_2);
  if (orderByComparator != null) {
    appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
  }
 else {
    query.append(UserGroupModelImpl.ORDER_BY_JPQL);
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),UserGroup.class.getName(),_FILTER_COLUMN_PK,_FILTER_COLUMN_USERID);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity(_FILTER_ENTITY_ALIAS,UserGroupImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    qPos.add(parentUserGroupId);
    return (List<UserGroup>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
