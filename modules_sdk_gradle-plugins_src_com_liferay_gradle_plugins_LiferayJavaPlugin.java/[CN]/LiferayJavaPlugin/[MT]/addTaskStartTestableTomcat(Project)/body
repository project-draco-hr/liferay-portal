{
  StartAppServerTask startTestableTomcatTask=GradleUtil.addTask(project,START_TESTABLE_TOMCAT_TASK_NAME,StartAppServerTask.class);
  startTestableTomcatTask.dependsOn(SETUP_TESTABLE_TOMCAT_TASK_NAME);
  startTestableTomcatTask.finalizedBy(STOP_TESTABLE_TOMCAT_TASK_NAME);
  startTestableTomcatTask.setAppServerType("tomcat");
  startTestableTomcatTask.doFirst(new Action<Task>(){
    @Override public void execute(    Task task){
      Project project=task.getProject();
      LiferayExtension liferayExtension=GradleUtil.getExtension(project,LiferayExtension.class);
      File liferayHome=liferayExtension.getLiferayHome();
      project.delete(new File(liferayHome,"data"),new File(liferayHome,"logs"),new File(liferayHome,"osgi/state"),new File(liferayHome,"portal-setup-wizard.properties"));
    }
  }
);
  Action<Task> action=new Action<Task>(){
    @Override public void execute(    Task task){
      StartAppServerTask startAppServerTask=(StartAppServerTask)task;
      File appServerBinDir=startAppServerTask.getAppServerBinDir();
      boolean started=false;
      _startedAppServersReentrantLock.lock();
      try {
        if (_startedAppServerBinDirs.contains(appServerBinDir)) {
          started=true;
        }
 else {
          _startedAppServerBinDirs.add(appServerBinDir);
        }
      }
  finally {
        _startedAppServersReentrantLock.unlock();
      }
      if (started) {
        if (_logger.isDebugEnabled()) {
          _logger.debug("Application server " + appServerBinDir + " is already started");
        }
        Project project=startAppServerTask.getProject();
        Gradle gradle=project.getGradle();
        StartParameter startParameter=gradle.getStartParameter();
        if (startParameter.isParallelProjectExecutionEnabled()) {
          if (_logger.isDebugEnabled()) {
            _logger.debug("Waiting for application server " + appServerBinDir + " to be reachable");
          }
          startAppServerTask.waitForAppServer();
        }
        throw new StopExecutionException();
      }
    }
  }
;
  startTestableTomcatTask.doFirst(action);
  return startTestableTomcatTask;
}
