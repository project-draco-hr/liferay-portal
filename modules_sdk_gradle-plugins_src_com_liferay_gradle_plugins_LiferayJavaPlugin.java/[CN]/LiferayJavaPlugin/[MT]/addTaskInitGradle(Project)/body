{
  InitGradleTask initGradleTask=GradleUtil.addTask(project,INIT_GRADLE_TASK_NAME,InitGradleTask.class);
  initGradleTask.setDescription("Initializes build.gradle by migrating information from legacy " + "files.");
  initGradleTask.onlyIf(new Spec<Task>(){
    @Override public boolean isSatisfiedBy(    Task task){
      try {
        Project project=task.getProject();
        File buildGradleFile=project.file("build.gradle");
        if (!buildGradleFile.exists() || (buildGradleFile.length() == 0)) {
          return true;
        }
        long buildGradleLastModified=_getLastModified(buildGradleFile);
        for (        String sourceFileName : InitGradleTask.SOURCE_FILE_NAMES) {
          File sourceFile=project.file(sourceFileName);
          if (sourceFile.exists() && (buildGradleLastModified < _getLastModified(sourceFile))) {
            return true;
          }
        }
        return false;
      }
 catch (      IOException ioe) {
      }
catch (      Exception e) {
        if (_logger.isWarnEnabled()) {
          _logger.warn(e.getMessage(),e);
        }
      }
      return true;
    }
    private long _getLastModified(    File file) throws Exception {
      ProcessExecutor processExecutor=new ProcessExecutor("git","log","--format=%ct","--max-count=1",file.getName());
      processExecutor.directory(file.getParentFile());
      processExecutor.exitValueNormal();
      processExecutor.readOutput(true);
      ProcessResult processResult=processExecutor.executeNoTimeout();
      String output=processResult.outputUTF8();
      return Long.parseLong(output.trim());
    }
  }
);
  return initGradleTask;
}
