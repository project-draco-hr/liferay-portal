{
  User user=userPersistence.findByPrimaryKey(userId);
  Date displayDate=PortalUtil.getDate(displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,user.getTimeZone(),new EntryDisplayDateException());
  byte[] smallImageBytes=null;
  try {
    if ((smallImageInputStream != null) && smallImage) {
      smallImageBytes=FileUtil.getBytes(smallImageInputStream);
    }
  }
 catch (  IOException ioe) {
  }
  validate(title,content,smallImage,smallImageURL,smallImageFileName,smallImageBytes);
  BlogsEntry entry=blogsEntryPersistence.findByPrimaryKey(entryId);
  String oldUrlTitle=entry.getUrlTitle();
  String urlTitleFromContext=GetterUtil.getString(serviceContext.getAttribute("urlTitle"));
  String urlTitle=null;
  if (isContextUrlTitleRegexpMatch(urlTitleFromContext)) {
    urlTitle=BlogsUtil.getUrlTitle(entry.getEntryId(),urlTitleFromContext);
    urlTitle=ModelHintsUtil.trimString(BlogsEntry.class.getName(),"urlTitle",urlTitle);
    BlogsEntry entryWithUrlTitle=blogsEntryPersistence.fetchByG_UT(serviceContext.getScopeGroupId(),urlTitle);
    if ((entryWithUrlTitle != null) && (entryWithUrlTitle.getEntryId() != entry.getEntryId())) {
      urlTitle=getUniqueUrlTitle(entry.getEntryId(),entry.getGroupId(),urlTitle);
    }
  }
 else   if (isContextUrlTitleRegexpMatch(oldUrlTitle)) {
    urlTitle=oldUrlTitle;
  }
 else {
    urlTitle=getUniqueUrlTitle(entry.getEntryId(),entry.getGroupId(),title);
  }
  entry.setModifiedDate(serviceContext.getModifiedDate(null));
  entry.setTitle(title);
  entry.setUrlTitle(urlTitle);
  entry.setDescription(description);
  entry.setContent(content);
  entry.setDisplayDate(displayDate);
  entry.setAllowPingbacks(allowPingbacks);
  entry.setAllowTrackbacks(allowTrackbacks);
  entry.setSmallImage(smallImage);
  if (entry.getSmallImageId() == 0) {
    entry.setSmallImageId(counterLocalService.increment());
  }
  entry.setSmallImageURL(smallImageURL);
  if (entry.isPending() || entry.isDraft()) {
  }
 else   if (entry.isApproved()) {
    entry.setStatus(WorkflowConstants.STATUS_DRAFT_FROM_APPROVED);
  }
 else {
    entry.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  entry.setExpandoBridgeAttributes(serviceContext);
  blogsEntryPersistence.update(entry,false);
  if ((serviceContext.getGroupPermissions() != null) || (serviceContext.getGuestPermissions() != null)) {
    updateEntryResources(entry,serviceContext.getGroupPermissions(),serviceContext.getGuestPermissions());
  }
  saveImages(smallImage,entry.getSmallImageId(),smallImageBytes);
  updateAsset(userId,entry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  boolean pingOldTrackbacks=false;
  if (!oldUrlTitle.equals(entry.getUrlTitle())) {
    pingOldTrackbacks=true;
  }
  serviceContext.setAttribute("pingOldTrackbacks",String.valueOf(pingOldTrackbacks));
  if (entry.getStatus() != WorkflowConstants.STATUS_DRAFT) {
    serviceContext.setAttribute("update",Boolean.TRUE.toString());
  }
  if (Validator.isNotNull(trackbacks)) {
    serviceContext.setAttribute("trackbacks",trackbacks);
  }
 else {
    serviceContext.setAttribute("trackbacks",null);
  }
  WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),entry.getGroupId(),userId,BlogsEntry.class.getName(),entry.getEntryId(),entry,serviceContext);
  return entry;
}
