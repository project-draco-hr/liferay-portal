{
  User user=userPersistence.findByPrimaryKey(userId);
  long groupId=serviceContext.getScopeGroupId();
  long entryId=counterLocalService.increment();
  validate(title,content);
  BlogsEntry entry=blogsEntryPersistence.create(entryId);
  entry.setUuid(serviceContext.getUuid());
  entry.setGroupId(groupId);
  entry.setCompanyId(user.getCompanyId());
  entry.setUserId(user.getUserId());
  entry.setUserName(user.getFullName());
  entry.setTitle(title);
  entry.setSubtitle(subtitle);
  entry.setUrlTitle(getUniqueUrlTitle(entryId,title,null,serviceContext));
  entry.setDescription(description);
  entry.setContent(content);
  entry.setDisplayDate(displayDate);
  entry.setAllowPingbacks(allowPingbacks);
  entry.setAllowTrackbacks(allowTrackbacks);
  entry.setStatus(WorkflowConstants.STATUS_DRAFT);
  entry.setStatusByUserId(userId);
  entry.setStatusDate(serviceContext.getModifiedDate(null));
  entry.setExpandoBridgeAttributes(serviceContext);
  blogsEntryPersistence.update(entry);
  if (serviceContext.isAddGroupPermissions() || serviceContext.isAddGuestPermissions()) {
    addEntryResources(entry,serviceContext.isAddGroupPermissions(),serviceContext.isAddGuestPermissions());
  }
 else {
    addEntryResources(entry,serviceContext.getModelPermissions());
  }
  updateAsset(userId,entry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  addDiscussion(entry,userId,groupId);
  long coverImageFileEntryId=0;
  String coverImageURL=null;
  if (coverImageImageSelector != null) {
    coverImageFileEntryId=coverImageImageSelector.getImageId();
    coverImageURL=coverImageImageSelector.getImageURL();
  }
  if (coverImageFileEntryId != 0) {
    coverImageFileEntryId=addCoverImageFileEntry(userId,groupId,entryId,coverImageImageSelector);
  }
  boolean smallImage=false;
  long smallImageFileEntryId=0;
  String smallImageURL=null;
  if (smallImageImageSelector != null) {
    smallImage=!smallImageImageSelector.isRemoveSmallImage();
    smallImageFileEntryId=smallImageImageSelector.getImageId();
    smallImageURL=smallImageImageSelector.getImageURL();
  }
  if (smallImageFileEntryId != 0) {
    smallImageFileEntryId=addSmallImageFileEntry(userId,groupId,entryId,smallImageImageSelector);
  }
  validate(smallImageFileEntryId);
  entry.setCoverImageCaption(coverImageCaption);
  entry.setCoverImageFileEntryId(coverImageFileEntryId);
  entry.setCoverImageURL(coverImageURL);
  entry.setSmallImage(smallImage);
  entry.setSmallImageFileEntryId(smallImageFileEntryId);
  entry.setSmallImageURL(smallImageURL);
  blogsEntryPersistence.update(entry);
  if (ArrayUtil.isNotEmpty(trackbacks)) {
    serviceContext.setAttribute("trackbacks",trackbacks);
  }
 else {
    serviceContext.setAttribute("trackbacks",null);
  }
  entry=startWorkflowInstance(userId,entry,serviceContext);
  if ((coverImageImageSelector != null) && (coverImageImageSelector.getImageId() != 0)) {
    PortletFileRepositoryUtil.deletePortletFileEntry(coverImageImageSelector.getImageId());
  }
  if ((smallImageImageSelector != null) && (smallImageImageSelector.getImageId() != 0)) {
    PortletFileRepositoryUtil.deletePortletFileEntry(smallImageImageSelector.getImageId());
  }
  return entry;
}
