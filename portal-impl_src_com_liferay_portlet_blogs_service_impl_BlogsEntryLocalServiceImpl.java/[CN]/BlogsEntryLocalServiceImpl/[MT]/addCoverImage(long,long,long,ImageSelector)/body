{
  long coverImageId=0;
  byte[] bytes=null;
  try {
    bytes=coverImageSelector.getCroppedImageBytes();
  }
 catch (  IOException ioe) {
    if (_log.isDebugEnabled()) {
      _log.debug("Cannot obtain cropped image from image selector image " + "id " + coverImageSelector.getImageId());
    }
  }
  if (bytes != null) {
    File file=null;
    try {
      file=FileUtil.createTempFile(bytes);
      String title=coverImageSelector.getTitle();
      String mimeType=coverImageSelector.getMimeType();
      if (Validator.isNull(title)) {
        title=StringUtil.randomString() + "_tempCroppedImage_" + entryId;
      }
      ServiceContext serviceContext=new ServiceContext();
      serviceContext.setAddGroupPermissions(true);
      serviceContext.setAddGuestPermissions(true);
      Folder folder=PortletFileRepositoryUtil.addPortletFolder(groupId,userId,PortletKeys.BLOGS,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,String.valueOf(entryId),serviceContext);
      FileEntry fileEntry=PortletFileRepositoryUtil.addPortletFileEntry(groupId,userId,BlogsEntry.class.getName(),entryId,PortletKeys.BLOGS,folder.getFolderId(),file,title,mimeType,false);
      coverImageId=fileEntry.getFileEntryId();
      PortletFileRepositoryUtil.deletePortletFileEntry(coverImageSelector.getImageId());
    }
 catch (    IOException ioe) {
      if (_log.isDebugEnabled()) {
        _log.debug("Cannot obtain cropped image from image selector " + "image id " + coverImageSelector.getImageId());
      }
    }
 finally {
      FileUtil.delete(file);
    }
  }
  return coverImageId;
}
