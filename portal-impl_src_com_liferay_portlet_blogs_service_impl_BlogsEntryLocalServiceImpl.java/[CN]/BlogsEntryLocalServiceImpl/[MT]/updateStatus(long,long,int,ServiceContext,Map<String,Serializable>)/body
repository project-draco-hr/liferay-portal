{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  BlogsEntry entry=blogsEntryPersistence.findByPrimaryKey(entryId);
  int oldStatus=entry.getStatus();
  if ((status == WorkflowConstants.STATUS_APPROVED) && now.before(entry.getDisplayDate())) {
    status=WorkflowConstants.STATUS_SCHEDULED;
  }
  entry.setStatus(status);
  entry.setStatusByUserId(user.getUserId());
  entry.setStatusByUserName(user.getFullName());
  entry.setStatusDate(serviceContext.getModifiedDate(now));
  blogsEntryPersistence.update(entry);
  blogsStatsUserLocalService.updateStatsUser(entry.getGroupId(),entry.getUserId(),entry.getDisplayDate());
  AssetEntry assetEntry=assetEntryLocalService.fetchEntry(BlogsEntry.class.getName(),entryId);
  if ((assetEntry == null) || (assetEntry.getPublishDate() == null)) {
    serviceContext.setCommand(Constants.ADD);
  }
  JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
  extraDataJSONObject.put("title",entry.getTitle());
  if (status == WorkflowConstants.STATUS_APPROVED) {
    assetEntryLocalService.updateEntry(BlogsEntry.class.getName(),entryId,entry.getDisplayDate(),true);
    if ((oldStatus != WorkflowConstants.STATUS_IN_TRASH) && (oldStatus != WorkflowConstants.STATUS_SCHEDULED)) {
      if (serviceContext.isCommandUpdate()) {
        socialActivityLocalService.addActivity(user.getUserId(),entry.getGroupId(),BlogsEntry.class.getName(),entryId,BlogsActivityKeys.UPDATE_ENTRY,extraDataJSONObject.toString(),0);
      }
 else {
        socialActivityLocalService.addUniqueActivity(user.getUserId(),entry.getGroupId(),BlogsEntry.class.getName(),entryId,BlogsActivityKeys.ADD_ENTRY,extraDataJSONObject.toString(),0);
      }
    }
    if (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {
      trashEntryLocalService.deleteEntry(BlogsEntry.class.getName(),entryId);
    }
    if (oldStatus != WorkflowConstants.STATUS_IN_TRASH) {
      notifySubscribers(userId,entry,serviceContext,workflowContext);
      String[] trackbacks=(String[])serviceContext.getAttribute("trackbacks");
      Boolean pingOldTrackbacks=ParamUtil.getBoolean(serviceContext,"pingOldTrackbacks");
      pingGoogle(entry,serviceContext);
      pingPingback(entry,serviceContext);
      pingTrackbacks(entry,trackbacks,pingOldTrackbacks,serviceContext);
    }
  }
 else {
    assetEntryLocalService.updateVisible(BlogsEntry.class.getName(),entryId,false);
    if ((status == WorkflowConstants.STATUS_SCHEDULED) && (oldStatus != WorkflowConstants.STATUS_IN_TRASH)) {
      if (serviceContext.isCommandUpdate()) {
        socialActivityLocalService.addActivity(user.getUserId(),entry.getGroupId(),BlogsEntry.class.getName(),entryId,BlogsActivityKeys.UPDATE_ENTRY,extraDataJSONObject.toString(),0);
      }
 else {
        socialActivityLocalService.addUniqueActivity(user.getUserId(),entry.getGroupId(),BlogsEntry.class.getName(),entryId,BlogsActivityKeys.ADD_ENTRY,extraDataJSONObject.toString(),0);
      }
    }
    if (status == WorkflowConstants.STATUS_IN_TRASH) {
      trashEntryLocalService.addTrashEntry(userId,entry.getGroupId(),BlogsEntry.class.getName(),entry.getEntryId(),entry.getUuid(),null,oldStatus,null,null);
    }
 else     if (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {
      trashEntryLocalService.deleteEntry(BlogsEntry.class.getName(),entryId);
    }
  }
  return entry;
}
