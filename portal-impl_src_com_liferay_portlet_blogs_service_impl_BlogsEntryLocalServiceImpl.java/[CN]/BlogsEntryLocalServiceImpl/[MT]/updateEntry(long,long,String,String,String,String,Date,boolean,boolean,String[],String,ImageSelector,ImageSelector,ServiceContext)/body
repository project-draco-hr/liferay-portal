{
  BlogsEntry entry=blogsEntryPersistence.findByPrimaryKey(entryId);
  validate(title,content);
  String oldUrlTitle=entry.getUrlTitle();
  entry.setModifiedDate(serviceContext.getModifiedDate(null));
  entry.setTitle(title);
  entry.setSubtitle(subtitle);
  entry.setUrlTitle(getUniqueUrlTitle(entryId,title,oldUrlTitle,serviceContext));
  entry.setDescription(description);
  entry.setContent(content);
  entry.setDisplayDate(displayDate);
  entry.setAllowPingbacks(allowPingbacks);
  entry.setAllowTrackbacks(allowTrackbacks);
  if (entry.isPending() || entry.isDraft()) {
  }
 else {
    entry.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  entry.setExpandoBridgeAttributes(serviceContext);
  blogsEntryPersistence.update(entry);
  if ((serviceContext.getGroupPermissions() != null) || (serviceContext.getGuestPermissions() != null)) {
    updateEntryResources(entry,serviceContext.getGroupPermissions(),serviceContext.getGuestPermissions());
  }
  updateAsset(userId,entry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  long coverImageFileEntryId=entry.getCoverImageFileEntryId();
  String coverImageURL=entry.getCoverImageURL();
  long deletePreviousCoverImageFileEntryId=0;
  if (coverImageImageSelector != null) {
    coverImageFileEntryId=coverImageImageSelector.getImageId();
    coverImageURL=coverImageImageSelector.getImageURL();
    if (coverImageImageSelector.getImageId() == 0) {
      if (entry.getCoverImageFileEntryId() != 0) {
        deletePreviousCoverImageFileEntryId=entry.getCoverImageFileEntryId();
      }
    }
 else     if (coverImageImageSelector.getImageId() != entry.getCoverImageFileEntryId()) {
      if (entry.getCoverImageFileEntryId() != 0) {
        deletePreviousCoverImageFileEntryId=entry.getCoverImageFileEntryId();
      }
      if (coverImageImageSelector.getImageId() != 0) {
        coverImageFileEntryId=addCoverImage(userId,entry.getGroupId(),entryId,coverImageImageSelector);
      }
    }
  }
  boolean smallImage=entry.isSmallImage();
  long smallImageFileEntryId=entry.getSmallImageFileEntryId();
  String smallImageURL=entry.getSmallImageURL();
  FileEntry tempSmallImageFileEntry=null;
  long deletePreviousSmallImageFileEntryId=0;
  if (smallImageImageSelector != null) {
    smallImage=!smallImageImageSelector.isRemoveSmallImage();
    smallImageFileEntryId=smallImageImageSelector.getImageId();
    smallImageURL=smallImageImageSelector.getImageURL();
    if (smallImageImageSelector.getImageId() == 0) {
      if (entry.getSmallImageFileEntryId() != 0) {
        deletePreviousSmallImageFileEntryId=entry.getSmallImageFileEntryId();
      }
    }
 else     if (smallImageImageSelector.getImageId() != entry.getSmallImageFileEntryId()) {
      if (entry.getSmallImageFileEntryId() != 0) {
        deletePreviousSmallImageFileEntryId=entry.getSmallImageFileEntryId();
      }
      tempSmallImageFileEntry=PortletFileRepositoryUtil.getPortletFileEntry(smallImageImageSelector.getImageId());
      smallImageFileEntryId=addSmallImageFileEntry(userId,entry.getGroupId(),entry.getEntryId(),tempSmallImageFileEntry.getMimeType(),tempSmallImageFileEntry.getTitle(),tempSmallImageFileEntry.getContentStream());
    }
  }
  validate(smallImageFileEntryId);
  entry.setCoverImageCaption(coverImageCaption);
  entry.setCoverImageFileEntryId(coverImageFileEntryId);
  entry.setCoverImageURL(coverImageURL);
  entry.setSmallImage(smallImage);
  entry.setSmallImageFileEntryId(smallImageFileEntryId);
  entry.setSmallImageURL(smallImageURL);
  blogsEntryPersistence.update(entry);
  boolean pingOldTrackbacks=false;
  if (!oldUrlTitle.equals(entry.getUrlTitle())) {
    pingOldTrackbacks=true;
  }
  serviceContext.setAttribute("pingOldTrackbacks",String.valueOf(pingOldTrackbacks));
  if (ArrayUtil.isNotEmpty(trackbacks)) {
    serviceContext.setAttribute("trackbacks",trackbacks);
  }
 else {
    serviceContext.setAttribute("trackbacks",null);
  }
  entry=startWorkflowInstance(userId,entry,serviceContext);
  if (deletePreviousCoverImageFileEntryId != 0) {
    PortletFileRepositoryUtil.deletePortletFileEntry(deletePreviousCoverImageFileEntryId);
  }
  if (deletePreviousSmallImageFileEntryId != 0) {
    PortletFileRepositoryUtil.deletePortletFileEntry(deletePreviousSmallImageFileEntryId);
  }
  if ((coverImageImageSelector != null) && (coverImageImageSelector.getImageId() != 0) && (coverImageImageSelector.getImageId() != entry.getCoverImageFileEntryId())) {
    PortletFileRepositoryUtil.deletePortletFileEntry(coverImageImageSelector.getImageId());
  }
  if (tempSmallImageFileEntry != null) {
    PortletFileRepositoryUtil.deletePortletFileEntry(tempSmallImageFileEntry.getFileEntryId());
  }
  return entry;
}
