{
  int oldStatus=entry.getStatus();
  if (oldStatus == WorkflowConstants.STATUS_PENDING) {
    WorkflowInstanceLink workflowInstanceLink=workflowInstanceLinkLocalService.getWorkflowInstanceLink(entry.getCompanyId(),entry.getGroupId(),BlogsEntry.class.getName(),entry.getEntryId());
    WorkflowInstance workflowInstance=WorkflowInstanceManagerUtil.getWorkflowInstance(entry.getCompanyId(),workflowInstanceLink.getWorkflowInstanceId());
    Map<String,Serializable> workflowContext=workflowInstance.getWorkflowContext();
    ServiceContext serviceContext=(ServiceContext)workflowContext.get(WorkflowConstants.CONTEXT_SERVICE_CONTEXT);
    boolean update=ParamUtil.getBoolean(serviceContext,"update");
    if (update) {
      oldStatus=WorkflowConstants.STATUS_DRAFT_FROM_APPROVED;
    }
 else {
      oldStatus=WorkflowConstants.STATUS_DRAFT;
    }
    entry.setStatus(oldStatus);
    blogsEntryPersistence.update(entry,false);
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(workflowInstanceLink.getWorkflowInstanceLinkId());
  }
  updateStatus(userId,entry.getEntryId(),WorkflowConstants.STATUS_IN_TRASH,new ServiceContext());
  socialActivityLocalService.addActivity(userId,entry.getGroupId(),BlogsEntry.class.getName(),entry.getEntryId(),SocialActivityConstants.TYPE_MOVE_TO_TRASH,StringPool.BLANK,0);
  trashEntryLocalService.addTrashEntry(userId,entry.getGroupId(),BlogsEntry.class.getName(),entry.getEntryId(),oldStatus,null,null);
  return entry;
}
