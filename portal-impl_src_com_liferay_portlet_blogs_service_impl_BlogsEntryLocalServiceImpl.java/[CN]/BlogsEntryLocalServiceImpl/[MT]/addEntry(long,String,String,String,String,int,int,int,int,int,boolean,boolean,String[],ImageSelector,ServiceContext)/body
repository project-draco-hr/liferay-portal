{
  User user=userPersistence.findByPrimaryKey(userId);
  long groupId=serviceContext.getScopeGroupId();
  Date displayDate=PortalUtil.getDate(displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,user.getTimeZone(),EntryDisplayDateException.class);
  Date now=new Date();
  long smallImageFileEntryId=0;
  boolean isSmallImage=false;
  String smallImageURL=null;
  if (smallImage != null) {
    smallImageFileEntryId=smallImage.getImageId();
    isSmallImage=!smallImage.isRemoveSmallImage();
    smallImageURL=smallImage.getImageURL();
  }
  validate(title,content,smallImageFileEntryId);
  long entryId=counterLocalService.increment();
  if (smallImageFileEntryId != 0) {
    FileEntry tempSmallImageFileEntry=PortletFileRepositoryUtil.getPortletFileEntry(smallImageFileEntryId);
    Folder smallImageFileEntryFolder=PortletFileRepositoryUtil.addPortletFolder(groupId,userId,PortletKeys.BLOGS,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,String.valueOf(entryId),serviceContext);
    FileEntry smallImageFileEntry=PortletFileRepositoryUtil.addPortletFileEntry(groupId,userId,BlogsEntry.class.getName(),entryId,PortletKeys.BLOGS,smallImageFileEntryFolder.getFolderId(),tempSmallImageFileEntry.getContentStream(),tempSmallImageFileEntry.getTitle(),tempSmallImageFileEntry.getMimeType(),false);
    smallImageFileEntryId=smallImageFileEntry.getFileEntryId();
    PortletFileRepositoryUtil.deletePortletFileEntry(tempSmallImageFileEntry.getFileEntryId());
  }
  BlogsEntry entry=blogsEntryPersistence.create(entryId);
  entry.setUuid(serviceContext.getUuid());
  entry.setGroupId(groupId);
  entry.setCompanyId(user.getCompanyId());
  entry.setUserId(user.getUserId());
  entry.setUserName(user.getFullName());
  entry.setCreateDate(serviceContext.getCreateDate(now));
  entry.setModifiedDate(serviceContext.getModifiedDate(now));
  entry.setTitle(title);
  entry.setSubtitle(subtitle);
  entry.setUrlTitle(getUniqueUrlTitle(entryId,title,null,serviceContext));
  entry.setDescription(description);
  entry.setContent(content);
  entry.setDisplayDate(displayDate);
  entry.setAllowPingbacks(allowPingbacks);
  entry.setAllowTrackbacks(allowTrackbacks);
  entry.setSmallImage(isSmallImage);
  entry.setSmallImageFileEntryId(smallImageFileEntryId);
  entry.setSmallImageURL(smallImageURL);
  entry.setStatus(WorkflowConstants.STATUS_DRAFT);
  entry.setStatusByUserId(userId);
  entry.setStatusDate(serviceContext.getModifiedDate(now));
  entry.setExpandoBridgeAttributes(serviceContext);
  blogsEntryPersistence.update(entry);
  if (serviceContext.isAddGroupPermissions() || serviceContext.isAddGuestPermissions()) {
    addEntryResources(entry,serviceContext.isAddGroupPermissions(),serviceContext.isAddGuestPermissions());
  }
 else {
    addEntryResources(entry,serviceContext.getGroupPermissions(),serviceContext.getGuestPermissions());
  }
  updateAsset(userId,entry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  addDiscussion(entry,userId,groupId);
  if (ArrayUtil.isNotEmpty(trackbacks)) {
    serviceContext.setAttribute("trackbacks",trackbacks);
  }
 else {
    serviceContext.setAttribute("trackbacks",null);
  }
  return startWorkflowInstance(userId,entry,serviceContext);
}
