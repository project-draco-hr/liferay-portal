{
  User user=userPersistence.findByPrimaryKey(userId);
  Date displayDate=PortalUtil.getDate(displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,user.getTimeZone(),new EntryDisplayDateException());
  validate(title,content);
  BlogsEntry entry=blogsEntryPersistence.findByPrimaryKey(entryId);
  String oldUrlTitle=entry.getUrlTitle();
  entry.setModifiedDate(serviceContext.getModifiedDate(null));
  entry.setTitle(title);
  entry.setUrlTitle(getUniqueUrlTitle(entryId,entry.getGroupId(),title));
  entry.setContent(content);
  entry.setDisplayDate(displayDate);
  entry.setAllowPingbacks(allowPingbacks);
  entry.setAllowTrackbacks(allowTrackbacks);
  entry.setExpandoBridgeAttributes(serviceContext);
  blogsEntryPersistence.update(entry,false);
  if ((serviceContext.getCommunityPermissions() != null) || (serviceContext.getGuestPermissions() != null)) {
    updateEntryResources(entry,serviceContext.getCommunityPermissions(),serviceContext.getGuestPermissions());
  }
  updateAsset(userId,entry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  boolean pingOldTrackbacks=false;
  if (!oldUrlTitle.equals(entry.getUrlTitle())) {
    pingOldTrackbacks=true;
  }
  if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_PUBLISH) {
    Map<String,Serializable> workflowContext=new HashMap<String,Serializable>();
    workflowContext.put("pingOldTrackbacks",String.valueOf(pingOldTrackbacks));
    workflowContext.put("trackbacks",trackbacks);
    workflowContext.put("serviceContext",serviceContext);
    WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),entry.getGroupId(),userId,BlogsEntry.class.getName(),entry.getEntryId(),entry,workflowContext);
  }
  return entry;
}
