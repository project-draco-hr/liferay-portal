{
  User user=userPersistence.findByPrimaryKey(userId);
  BlogsEntry entry=blogsEntryPersistence.findByPrimaryKey(entryId);
  long coverImageFileEntryId=entry.getCoverImageFileEntryId();
  String coverImageURL=entry.getCoverImageURL();
  boolean smallImage=entry.isSmallImage();
  long smallImageFileEntryId=entry.getSmallImageFileEntryId();
  String smallImageURL=entry.getSmallImageURL();
  if (overwriteImages) {
    if (coverImageImageSelector != null) {
      coverImageFileEntryId=coverImageImageSelector.getImageId();
      coverImageURL=coverImageImageSelector.getImageURL();
      if (coverImageImageSelector.getImageId() == 0) {
        if (entry.getCoverImageFileEntryId() != 0) {
          PortletFileRepositoryUtil.deletePortletFileEntry(entry.getCoverImageFileEntryId());
        }
      }
 else       if (coverImageImageSelector.getImageId() != entry.getCoverImageFileEntryId()) {
        if (entry.getCoverImageFileEntryId() != 0) {
          PortletFileRepositoryUtil.deletePortletFileEntry(entry.getCoverImageFileEntryId());
        }
        if (coverImageImageSelector.getImageId() != 0) {
          coverImageFileEntryId=addCoverImage(userId,entry.getGroupId(),entryId,coverImageImageSelector);
        }
      }
    }
    if (smallImageImageSelector != null) {
      smallImage=!smallImageImageSelector.isRemoveSmallImage();
      smallImageFileEntryId=smallImageImageSelector.getImageId();
      smallImageURL=smallImageImageSelector.getImageURL();
      if (smallImageImageSelector.getImageId() == 0) {
        if (entry.getSmallImageFileEntryId() != 0) {
          PortletFileRepositoryUtil.deletePortletFileEntry(entry.getSmallImageFileEntryId());
        }
      }
 else       if (smallImageImageSelector.getImageId() != entry.getSmallImageFileEntryId()) {
        if (entry.getSmallImageFileEntryId() != 0) {
          PortletFileRepositoryUtil.deletePortletFileEntry(entry.getSmallImageFileEntryId());
        }
        FileEntry tempFileEntry=PortletFileRepositoryUtil.getPortletFileEntry(smallImageImageSelector.getImageId());
        smallImageFileEntryId=addSmallImageFileEntry(userId,entry.getGroupId(),entry.getEntryId(),tempFileEntry.getMimeType(),tempFileEntry.getTitle(),tempFileEntry.getContentStream());
        PortletFileRepositoryUtil.deletePortletFileEntry(tempFileEntry.getFileEntryId());
      }
    }
  }
  validate(title,content,smallImageFileEntryId);
  String oldUrlTitle=entry.getUrlTitle();
  entry.setModifiedDate(serviceContext.getModifiedDate(null));
  entry.setTitle(title);
  entry.setSubtitle(subtitle);
  entry.setUrlTitle(getUniqueUrlTitle(entryId,title,oldUrlTitle,serviceContext));
  entry.setDescription(description);
  entry.setContent(content);
  entry.setDisplayDate(displayDate);
  entry.setAllowPingbacks(allowPingbacks);
  entry.setAllowTrackbacks(allowTrackbacks);
  entry.setCoverImageFileEntryId(coverImageFileEntryId);
  entry.setCoverImageURL(coverImageURL);
  entry.setSmallImage(smallImage);
  entry.setSmallImageFileEntryId(smallImageFileEntryId);
  entry.setSmallImageURL(smallImageURL);
  if (entry.isPending() || entry.isDraft()) {
  }
 else {
    entry.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  entry.setExpandoBridgeAttributes(serviceContext);
  blogsEntryPersistence.update(entry);
  if ((serviceContext.getGroupPermissions() != null) || (serviceContext.getGuestPermissions() != null)) {
    updateEntryResources(entry,serviceContext.getGroupPermissions(),serviceContext.getGuestPermissions());
  }
  updateAsset(userId,entry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  boolean pingOldTrackbacks=false;
  if (!oldUrlTitle.equals(entry.getUrlTitle())) {
    pingOldTrackbacks=true;
  }
  serviceContext.setAttribute("pingOldTrackbacks",String.valueOf(pingOldTrackbacks));
  if (ArrayUtil.isNotEmpty(trackbacks)) {
    serviceContext.setAttribute("trackbacks",trackbacks);
  }
 else {
    serviceContext.setAttribute("trackbacks",null);
  }
  return startWorkflowInstance(userId,entry,serviceContext);
}
