{
  User user=userPersistence.findByPrimaryKey(userId);
  Date displayDate=PortalUtil.getDate(displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,user.getTimeZone(),EntryDisplayDateException.class);
  BlogsEntry entry=blogsEntryPersistence.findByPrimaryKey(entryId);
  long coverImageFileEntryId=0;
  String coverImageURL=null;
  if (coverImageSelector != null) {
    coverImageFileEntryId=coverImageSelector.getImageId();
    coverImageURL=coverImageSelector.getImageURL();
    if (coverImageSelector.getImageId() == 0) {
      if (entry.getCoverImageFileEntryId() != 0) {
        PortletFileRepositoryUtil.deletePortletFileEntry(entry.getCoverImageFileEntryId());
      }
    }
 else     if (coverImageSelector.getImageId() != entry.getCoverImageFileEntryId()) {
      if (entry.getCoverImageFileEntryId() != 0) {
        PortletFileRepositoryUtil.deletePortletFileEntry(entry.getCoverImageFileEntryId());
      }
      if (coverImageSelector.getImageId() != 0) {
        coverImageFileEntryId=addCoverImage(userId,entry.getGroupId(),entryId,coverImageSelector);
      }
    }
  }
  boolean smallImage=entry.isSmallImage();
  long smallImageFileEntryId=0;
  String smallImageURL=null;
  if (smallImageSelector != null) {
    smallImage=!smallImageSelector.isRemoveSmallImage();
    smallImageFileEntryId=smallImageSelector.getImageId();
    smallImageURL=smallImageSelector.getImageURL();
    if (smallImageSelector.getImageId() == 0) {
      if (entry.getSmallImageFileEntryId() != 0) {
        PortletFileRepositoryUtil.deletePortletFileEntry(entry.getSmallImageFileEntryId());
      }
    }
 else     if (smallImageSelector.getImageId() != entry.getSmallImageFileEntryId()) {
      if (entry.getSmallImageFileEntryId() != 0) {
        PortletFileRepositoryUtil.deletePortletFileEntry(entry.getSmallImageFileEntryId());
      }
      FileEntry tempFileEntry=PortletFileRepositoryUtil.getPortletFileEntry(smallImageSelector.getImageId());
      smallImageFileEntryId=addSmallImageFileEntry(userId,entry.getGroupId(),entry.getEntryId(),tempFileEntry.getMimeType(),tempFileEntry.getTitle(),tempFileEntry.getContentStream());
      PortletFileRepositoryUtil.deletePortletFileEntry(tempFileEntry.getFileEntryId());
    }
  }
  validate(title,content,smallImageFileEntryId);
  String oldUrlTitle=entry.getUrlTitle();
  entry.setModifiedDate(serviceContext.getModifiedDate(null));
  entry.setTitle(title);
  entry.setSubtitle(subtitle);
  entry.setUrlTitle(getUniqueUrlTitle(entryId,title,oldUrlTitle,serviceContext));
  entry.setDescription(description);
  entry.setContent(content);
  entry.setDisplayDate(displayDate);
  entry.setAllowPingbacks(allowPingbacks);
  entry.setAllowTrackbacks(allowTrackbacks);
  entry.setCoverImageFileEntryId(coverImageFileEntryId);
  entry.setCoverImageURL(coverImageURL);
  entry.setSmallImage(smallImage);
  entry.setSmallImageFileEntryId(smallImageFileEntryId);
  entry.setSmallImageURL(smallImageURL);
  if (entry.isPending() || entry.isDraft()) {
  }
 else {
    entry.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  entry.setExpandoBridgeAttributes(serviceContext);
  blogsEntryPersistence.update(entry);
  if ((serviceContext.getGroupPermissions() != null) || (serviceContext.getGuestPermissions() != null)) {
    updateEntryResources(entry,serviceContext.getGroupPermissions(),serviceContext.getGuestPermissions());
  }
  updateAsset(userId,entry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  boolean pingOldTrackbacks=false;
  if (!oldUrlTitle.equals(entry.getUrlTitle())) {
    pingOldTrackbacks=true;
  }
  serviceContext.setAttribute("pingOldTrackbacks",String.valueOf(pingOldTrackbacks));
  if (ArrayUtil.isNotEmpty(trackbacks)) {
    serviceContext.setAttribute("trackbacks",trackbacks);
  }
 else {
    serviceContext.setAttribute("trackbacks",null);
  }
  return startWorkflowInstance(userId,entry,serviceContext);
}
