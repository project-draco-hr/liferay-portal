{
  String asciiString="abcdefghijklmn";
  Serializer serializer=new Serializer();
  serializer.buffer=new byte[0];
  serializer.writeString(asciiString);
  Assert.assertEquals(serializer.index,5 + asciiString.length());
  Assert.assertTrue(BigEndianCodec.getBoolean(serializer.buffer,0));
  int length=BigEndianCodec.getInt(serializer.buffer,1);
  Assert.assertEquals(asciiString.length(),length);
  ByteBuffer byteBuffer=ByteBuffer.allocate(asciiString.length());
  for (int i=0; i < asciiString.length(); i++) {
    byteBuffer.put((byte)asciiString.charAt(i));
  }
  byteBuffer.flip();
  UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
  serializer.writeTo(unsyncByteArrayOutputStream);
  byte[] data=unsyncByteArrayOutputStream.toByteArray();
  for (int i=5; i < data.length; i++) {
    Assert.assertEquals(byteBuffer.get(),data[i]);
  }
  String nonAsciiString="???ASCII Code????????????";
  serializer=new Serializer();
  serializer.writeString(nonAsciiString);
  Assert.assertEquals(serializer.index,5 + nonAsciiString.length() * 2);
  Assert.assertFalse(BigEndianCodec.getBoolean(serializer.buffer,0));
  length=BigEndianCodec.getInt(serializer.buffer,1);
  Assert.assertEquals(nonAsciiString.length(),length);
  byteBuffer=ByteBuffer.allocate(nonAsciiString.length() * 2);
  byteBuffer.order(ByteOrder.BIG_ENDIAN);
  CharBuffer charBuffer=byteBuffer.asCharBuffer();
  for (int i=0; i < nonAsciiString.length(); i++) {
    charBuffer.put(nonAsciiString.charAt(i));
  }
  unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
  serializer.writeTo(unsyncByteArrayOutputStream);
  data=unsyncByteArrayOutputStream.toByteArray();
  for (int i=5; i < data.length; i++) {
    Assert.assertEquals(byteBuffer.get(),data[i]);
  }
}
