{
  final AtomicReference<String> locationReference=new AtomicReference<String>();
  final AtomicReference<String> messageReference=new AtomicReference<String>();
  final AtomicInteger statusReference=new AtomicInteger();
  StubHttpServletResponse stubHttpServletResponse=new StubHttpServletResponse(){
    @Override public boolean isCommitted(){
      return false;
    }
    @Override public void resetBuffer(){
    }
    @Override public void sendRedirect(    String location){
      locationReference.set(location);
    }
    @Override public void setStatus(    int status,    String message){
      statusReference.set(status);
      messageReference.set(message);
    }
  }
;
  MetaInfoCacheServletResponse metaInfoCacheServletResponse=new MetaInfoCacheServletResponse(stubHttpServletResponse);
  metaInfoCacheServletResponse.sendRedirect("testURL");
  assertEquals("testURL",locationReference.get());
  metaInfoCacheServletResponse.flushBuffer();
  try {
    metaInfoCacheServletResponse.sendRedirect("testURL");
    fail();
  }
 catch (  IllegalStateException ise) {
  }
}
