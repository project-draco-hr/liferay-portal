{
  long pk=nextLong();
  UserIdMapper newUserIdMapper=_persistence.create(pk);
  newUserIdMapper.setUserId(nextLong());
  newUserIdMapper.setType(randomString());
  newUserIdMapper.setDescription(randomString());
  newUserIdMapper.setExternalUserId(randomString());
  _persistence.update(newUserIdMapper);
  UserIdMapper existingUserIdMapper=_persistence.findByPrimaryKey(newUserIdMapper.getPrimaryKey());
  assertEquals(existingUserIdMapper.getUserIdMapperId(),newUserIdMapper.getUserIdMapperId());
  assertEquals(existingUserIdMapper.getUserId(),newUserIdMapper.getUserId());
  assertEquals(existingUserIdMapper.getType(),newUserIdMapper.getType());
  assertEquals(existingUserIdMapper.getDescription(),newUserIdMapper.getDescription());
  assertEquals(existingUserIdMapper.getExternalUserId(),newUserIdMapper.getExternalUserId());
}
