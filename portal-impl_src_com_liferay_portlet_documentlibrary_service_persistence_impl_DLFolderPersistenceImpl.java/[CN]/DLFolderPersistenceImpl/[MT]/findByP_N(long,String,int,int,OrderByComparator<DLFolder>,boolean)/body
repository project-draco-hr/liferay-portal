{
  boolean pagination=true;
  FinderPath finderPath=null;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    pagination=false;
    finderPath=FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_P_N;
    finderArgs=new Object[]{parentFolderId,name};
  }
 else {
    finderPath=FINDER_PATH_WITH_PAGINATION_FIND_BY_P_N;
    finderArgs=new Object[]{parentFolderId,name,start,end,orderByComparator};
  }
  List<DLFolder> list=null;
  if (retrieveFromCache) {
    list=(List<DLFolder>)finderCache.getResult(finderPath,finderArgs,this);
    if ((list != null) && !list.isEmpty()) {
      for (      DLFolder dlFolder : list) {
        if ((parentFolderId != dlFolder.getParentFolderId()) || !Objects.equals(name,dlFolder.getName())) {
          list=null;
          break;
        }
      }
    }
  }
  if (list == null) {
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(4 + (orderByComparator.getOrderByFields().length * 2));
    }
 else {
      query=new StringBundler(4);
    }
    query.append(_SQL_SELECT_DLFOLDER_WHERE);
    query.append(_FINDER_COLUMN_P_N_PARENTFOLDERID_2);
    boolean bindName=false;
    if (name == null) {
      query.append(_FINDER_COLUMN_P_N_NAME_1);
    }
 else     if (name.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_P_N_NAME_3);
    }
 else {
      bindName=true;
      query.append(_FINDER_COLUMN_P_N_NAME_2);
    }
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else     if (pagination) {
      query.append(DLFolderModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(parentFolderId);
      if (bindName) {
        qPos.add(name);
      }
      if (!pagination) {
        list=(List<DLFolder>)QueryUtil.list(q,getDialect(),start,end,false);
        Collections.sort(list);
        list=Collections.unmodifiableList(list);
      }
 else {
        list=(List<DLFolder>)QueryUtil.list(q,getDialect(),start,end);
      }
      cacheResult(list);
      finderCache.putResult(finderPath,finderArgs,list);
    }
 catch (    Exception e) {
      finderCache.removeResult(finderPath,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return list;
}
