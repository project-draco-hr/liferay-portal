{
  JSONFactoryUtil jsonFactoryUtil=new JSONFactoryUtil();
  jsonFactoryUtil.setJSONFactory(new JSONFactoryImpl());
  Thread currentThread=Thread.currentThread();
  ClassLoader currentClassLoader=currentThread.getContextClassLoader();
  PortalClassLoaderUtil.setClassLoader(currentClassLoader);
  PortalUUIDUtil portalUUIDUtil=new PortalUUIDUtil();
  portalUUIDUtil.setPortalUUID(new PortalUUIDImpl());
  PropsUtil.setProps(new PropsImpl());
  RegistryUtil.setRegistry(new BasicRegistryImpl());
  Registry registry=RegistryUtil.getRegistry();
  MessageBus messageBus=Mockito.mock(MessageBus.class);
  registry.registerService(MessageBus.class,messageBus);
  Mockito.when(messageBus.getDestination(Matchers.anyString())).then(new Answer<Destination>(){
    @Override public Destination answer(    InvocationOnMock invocationOnMock) throws Throwable {
      String destinationName=(String)invocationOnMock.getArguments()[0];
      if (!_synchronousDestination.getName().equals(destinationName)) {
        throw new IllegalArgumentException("Invalid destination: " + destinationName);
      }
      return _synchronousDestination;
    }
  }
);
  Mockito.when(messageBus.registerMessageListener(Matchers.anyString(),Matchers.any(MessageListener.class))).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {
      _synchronousDestination.register((MessageListener)invocationOnMock.getArguments()[1]);
      return true;
    }
  }
);
  Mockito.when(messageBus.unregisterMessageListener(Matchers.anyString(),Matchers.any(MessageListener.class))).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {
      _synchronousDestination.unregister((MessageListener)invocationOnMock.getArguments()[1]);
      return true;
    }
  }
);
  _synchronousDestination=new SynchronousDestination();
  _synchronousDestination.setName(_TEST_DESTINATION_NAME);
  MessageBusUtil.addDestination(_synchronousDestination);
  _quartzSchedulerEngine=new QuartzSchedulerEngine();
  ReflectionTestUtil.setFieldValue(_quartzSchedulerEngine,"_memoryScheduler",new MockScheduler(StorageType.MEMORY,_MEMORY_TEST_GROUP_NAME));
  ReflectionTestUtil.setFieldValue(_quartzSchedulerEngine,"_persistedScheduler",new MockScheduler(StorageType.PERSISTED,_PERSISTED_TEST_GROUP_NAME));
  _quartzSchedulerEngine.start();
}
