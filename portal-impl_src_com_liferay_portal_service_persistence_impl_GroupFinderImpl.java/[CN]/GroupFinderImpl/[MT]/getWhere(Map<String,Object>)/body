{
  if ((params == null) || params.isEmpty()) {
    return StringPool.BLANK;
  }
  StringBundler sb=new StringBundler(params.size());
  for (  Map.Entry<String,Object> entry : params.entrySet()) {
    String key=entry.getKey();
    if (key.equals("classNameIds")) {
      if (entry.getValue() instanceof Long) {
        sb.append("(Group_.classNameId = ?) AND ");
      }
 else {
        sb.append(StringPool.OPEN_PARENTHESIS);
        long[] classNameIds=(long[])entry.getValue();
        for (int i=0; i < classNameIds.length; i++) {
          sb.append("(Group_.classNameId = ?) OR ");
        }
        sb.setStringAt("(Group_.classNameId = ?)) AND ",sb.index() - 1);
      }
    }
 else     if (key.equals("excludedGroupIds")) {
      List<Long> excludedGroupIds=(List<Long>)entry.getValue();
      if (!excludedGroupIds.isEmpty()) {
        sb.append(StringPool.OPEN_PARENTHESIS);
        for (int i=0; i < excludedGroupIds.size(); i++) {
          sb.append("(Group_.groupId != ?) AND ");
        }
        sb.setStringAt("(Group_.groupId != ?)) AND ",sb.index() - 1);
      }
    }
 else     if (key.equals("groupsTree")) {
      List<Group> groupsTree=(List<Group>)entry.getValue();
      if (!groupsTree.isEmpty()) {
        sb.append(StringPool.OPEN_PARENTHESIS);
        for (int i=0; i < groupsTree.size(); i++) {
          sb.append("(Group_.treePath LIKE ?) OR ");
        }
        sb.setStringAt("(Group_.treePath LIKE ?)) AND ",sb.index() - 1);
      }
    }
 else     if (key.equals("types")) {
      List<Integer> types=(List<Integer>)entry.getValue();
      if (!types.isEmpty()) {
        sb.append(StringPool.OPEN_PARENTHESIS);
        for (int i=0; i < types.size(); i++) {
          sb.append("(Group_.type_ = ?) OR ");
        }
        sb.setStringAt("(Group_.type_ = ?)) AND ",sb.index() - 1);
      }
    }
 else {
      if (key.equals("rolePermissions")) {
        RolePermissions rolePermissions=(RolePermissions)entry.getValue();
        if (ResourceBlockLocalServiceUtil.isSupported(rolePermissions.getName())) {
          key="rolePermissions_6_block";
        }
 else {
          key="rolePermissions_6";
        }
      }
      Map<String,String> whereMap=_getWhereMap();
      String whereValue=whereMap.get(key);
      if (Validator.isNotNull(whereValue)) {
        sb.append(whereValue);
      }
    }
  }
  return sb.toString();
}
