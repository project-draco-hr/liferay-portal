{
  if (params == null) {
    params=_emptyLinkedHashMap;
  }
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=null;
  LinkedHashMap<String,Object> params3=null;
  LinkedHashMap<String,Object> params4=null;
  Long userId=(Long)params.get("usersGroups");
  boolean inherit=GetterUtil.getBoolean(params.get("inherit"),true);
  boolean doUnion=false;
  if (Validator.isNotNull(userId) && inherit) {
    doUnion=true;
  }
  if (doUnion) {
    params2=new LinkedHashMap<>(params1);
    params3=new LinkedHashMap<>(params1);
    params4=new LinkedHashMap<>(params1);
    _populateUnionParams(userId,null,params1,params2,params3,params4);
  }
 else {
    params1.put("classNameIds",_getGroupOrganizationClassNameIds());
  }
  String sqlKey=_buildSQLCacheKey(obc,params1,params2,params3,params4);
  String sql=_findByCompanyIdSQLCache.get(sqlKey);
  if (sql == null) {
    String findByCompanyIdSQL=CustomSQLUtil.get(FIND_BY_COMPANY_ID);
    if (params.get("active") == Boolean.TRUE) {
      findByCompanyIdSQL=StringUtil.replace(findByCompanyIdSQL,"(Group_.liveGroupId = 0) AND",StringPool.BLANK);
    }
    findByCompanyIdSQL=replaceOrderBy(findByCompanyIdSQL,obc);
    StringBundler sb=new StringBundler(9);
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(replaceJoinAndWhere(findByCompanyIdSQL,params1));
    if (doUnion) {
      sb.append(") UNION (");
      sb.append(replaceJoinAndWhere(findByCompanyIdSQL,params2));
      sb.append(") UNION (");
      sb.append(replaceJoinAndWhere(findByCompanyIdSQL,params3));
      sb.append(") UNION (");
      sb.append(replaceJoinAndWhere(findByCompanyIdSQL,params4));
    }
    sb.append(StringPool.CLOSE_PARENTHESIS);
    if (obc != null) {
      sb.append(" ORDER BY ");
      sb.append(obc.toString());
    }
    sql=sb.toString();
    _findByCompanyIdSQLCache.put(sqlKey,sql);
  }
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addScalar("groupId",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params1);
    qPos.add(companyId);
    if (doUnion) {
      setJoin(qPos,params2);
      qPos.add(companyId);
      setJoin(qPos,params3);
      qPos.add(companyId);
      setJoin(qPos,params4);
      qPos.add(companyId);
    }
    List<Long> groupIds=(List<Long>)QueryUtil.list(q,getDialect(),start,end);
    List<Group> groups=new ArrayList<>(groupIds.size());
    for (    Long groupId : groupIds) {
      Group group=GroupUtil.findByPrimaryKey(groupId);
      groups.add(group);
    }
    return groups;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
