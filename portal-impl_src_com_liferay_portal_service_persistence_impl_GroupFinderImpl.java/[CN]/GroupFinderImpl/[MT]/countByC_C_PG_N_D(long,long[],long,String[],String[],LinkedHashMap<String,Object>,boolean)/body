{
  String parentGroupIdComparator=StringPool.EQUAL;
  if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
    parentGroupIdComparator=StringPool.NOT_EQUAL;
  }
  names=CustomSQLUtil.keywords(names);
  descriptions=CustomSQLUtil.keywords(descriptions);
  if (params == null) {
    params=_emptyLinkedHashMap;
  }
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=null;
  LinkedHashMap<String,Object> params3=null;
  LinkedHashMap<String,Object> params4=null;
  Long userId=(Long)params.get("usersGroups");
  boolean doUnion=Validator.isNotNull(userId);
  if (doUnion) {
    params2=new LinkedHashMap<>(params1);
    params3=new LinkedHashMap<>(params1);
    params4=new LinkedHashMap<>(params1);
    _populateUnionParams(userId,classNameIds,params1,params2,params3,params4);
  }
 else   if (classNameIds != null) {
    params1.put("classNameIds",classNameIds);
  }
  Session session=null;
  try {
    session=openSession();
    Set<Long> groupIds=new HashSet<>();
    groupIds.addAll(countByC_PG_N_D(session,companyId,parentGroupId,parentGroupIdComparator,names,descriptions,params1,andOperator));
    if (doUnion) {
      if (params2.containsKey("classNameIds")) {
        groupIds.addAll(countByC_PG_N_D(session,companyId,parentGroupId,parentGroupIdComparator,names,descriptions,params2,andOperator));
      }
      if (params3.containsKey("classNameIds")) {
        groupIds.addAll(countByC_PG_N_D(session,companyId,parentGroupId,parentGroupIdComparator,names,descriptions,params3,andOperator));
      }
      if (params4.containsKey("classNameIds")) {
        groupIds.addAll(countByC_PG_N_D(session,companyId,parentGroupId,parentGroupIdComparator,names,descriptions,params4,andOperator));
      }
    }
    return groupIds.size();
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
