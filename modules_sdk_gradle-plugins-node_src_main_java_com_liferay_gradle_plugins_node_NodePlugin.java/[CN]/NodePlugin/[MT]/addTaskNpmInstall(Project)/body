{
  final ExecuteNpmTask executeNpmTask=GradleUtil.addTask(project,NPM_INSTALL_TASK_NAME,ExecuteNpmTask.class);
  executeNpmTask.onlyIf(new Spec<Task>(){
    @Override public boolean isSatisfiedBy(    Task task){
      Project project=task.getProject();
      File packageJsonFile=project.file("package.json");
      if (!packageJsonFile.exists()) {
        return false;
      }
      JsonSlurper jsonSlurper=new JsonSlurper();
      Map<String,Object> packageJson=(Map<String,Object>)jsonSlurper.parse(packageJsonFile);
      if (packageJson.containsKey("dependencies") || packageJson.containsKey("devDependencies")) {
        return true;
      }
      return false;
    }
  }
);
  executeNpmTask.setArgs("install");
  executeNpmTask.setDescription("Install Node packages from package.json.");
  TaskInputs taskInputs=executeNpmTask.getInputs();
  taskInputs.file(new Callable<File>(){
    @Override public File call() throws Exception {
      return new File(executeNpmTask.getWorkingDir(),"package.json");
    }
  }
);
  TaskOutputs taskOutputs=executeNpmTask.getOutputs();
  taskOutputs.dir(new Callable<File>(){
    @Override public File call() throws Exception {
      return new File(executeNpmTask.getWorkingDir(),"node_modules");
    }
  }
);
  return executeNpmTask;
}
