{
  if (Validator.isNull(classPKField)) {
    throw new IllegalArgumentException("classPKField is null");
  }
  PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
  long checkGroupId=0;
  if (groupIds.length == 1) {
    checkGroupId=groupIds[0];
  }
  if (permissionChecker.hasPermission(checkGroupId,className,0,ActionKeys.VIEW)) {
    return sql;
  }
  String permissionJoin=StringPool.BLANK;
  if (Validator.isNotNull(bridgeJoin)) {
    permissionJoin=bridgeJoin;
  }
  permissionJoin+=CustomSQLUtil.get(JOIN_RESOURCE_PERMISSION);
  StringBundler sb=new StringBundler(8);
  sb.append("((ResourcePermission.primKeyId = ");
  sb.append(classPKField);
  if (Validator.isNotNull(groupIdField) && (groupIds.length > 0)) {
    sb.append(") AND (");
    sb.append(groupIdField);
    if (groupIds.length > 1) {
      sb.append(" IN (");
      sb.append(StringUtil.merge(groupIds));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
 else {
      sb.append(" = ");
      sb.append(groupIds[0]);
    }
  }
  sb.append("))");
  String roleIdsOrOwnerIdSQL=getRoleIdsOrOwnerIdSQL(permissionChecker,groupIds,userIdField);
  int scope=ResourceConstants.SCOPE_INDIVIDUAL;
  permissionJoin=StringUtil.replace(permissionJoin,new String[]{"[$CLASS_NAME$]","[$COMPANY_ID$]","[$PRIM_KEYS$]","[$RESOURCE_SCOPE_INDIVIDUAL$]","[$ROLE_IDS_OR_OWNER_ID$]"},new String[]{className,String.valueOf(permissionChecker.getCompanyId()),sb.toString(),String.valueOf(scope),roleIdsOrOwnerIdSQL});
  int pos=sql.indexOf(_WHERE_CLAUSE);
  if (pos != -1) {
    return sql.substring(0,pos + 1).concat(permissionJoin).concat(sql.substring(pos + 1));
  }
  pos=sql.indexOf(_GROUP_BY_CLAUSE);
  if (pos != -1) {
    return sql.substring(0,pos + 1).concat(permissionJoin).concat(sql.substring(pos + 1));
  }
  pos=sql.indexOf(_ORDER_BY_CLAUSE);
  if (pos != -1) {
    return sql.substring(0,pos + 1).concat(permissionJoin).concat(sql.substring(pos + 1));
  }
  return sql.concat(StringPool.SPACE).concat(permissionJoin);
}
