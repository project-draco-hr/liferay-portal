{
  if (Validator.isNull(classPKField)) {
    throw new IllegalArgumentException("classPKField is null");
  }
  PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
  if (groupIds.length == 1) {
    long groupId=groupIds[0];
    Group group=GroupLocalServiceUtil.fetchGroup(groupId);
    if (group != null) {
      long companyId=group.getCompanyId();
      long[] roleIds=getRoleIds(groupId);
      try {
        if (ResourcePermissionLocalServiceUtil.hasResourcePermission(companyId,className,ResourceConstants.SCOPE_GROUP,String.valueOf(groupId),roleIds,ActionKeys.VIEW)) {
          return sql;
        }
        if (ResourcePermissionLocalServiceUtil.hasResourcePermission(companyId,className,ResourceConstants.SCOPE_GROUP_TEMPLATE,String.valueOf(GroupConstants.DEFAULT_PARENT_GROUP_ID),roleIds,ActionKeys.VIEW)) {
          return sql;
        }
        if (ResourcePermissionLocalServiceUtil.hasResourcePermission(companyId,className,ResourceConstants.SCOPE_COMPANY,String.valueOf(companyId),roleIds,ActionKeys.VIEW)) {
          return sql;
        }
      }
 catch (      PortalException pe) {
        if (_log.isDebugEnabled()) {
          _log.debug("Unable to retrieve resource permissions for " + className + " inside Group "+ groupId,pe);
        }
      }
    }
  }
  String permissionJoin=StringPool.BLANK;
  if (Validator.isNotNull(bridgeJoin)) {
    permissionJoin=bridgeJoin;
  }
  permissionJoin+=CustomSQLUtil.get(JOIN_RESOURCE_PERMISSION);
  StringBundler sb=new StringBundler(8);
  sb.append("((ResourcePermission.primKeyId = ");
  sb.append(classPKField);
  if (Validator.isNotNull(groupIdField) && (groupIds.length > 0)) {
    sb.append(") AND (");
    sb.append(groupIdField);
    if (groupIds.length > 1) {
      sb.append(" IN (");
      sb.append(StringUtil.merge(groupIds));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
 else {
      sb.append(" = ");
      sb.append(groupIds[0]);
    }
  }
  sb.append("))");
  String roleIdsOrOwnerIdSQL=getRoleIdsOrOwnerIdSQL(permissionChecker,groupIds,userIdField);
  int scope=ResourceConstants.SCOPE_INDIVIDUAL;
  permissionJoin=StringUtil.replace(permissionJoin,new String[]{"[$CLASS_NAME$]","[$COMPANY_ID$]","[$PRIM_KEYS$]","[$RESOURCE_SCOPE_INDIVIDUAL$]","[$ROLE_IDS_OR_OWNER_ID$]"},new String[]{className,String.valueOf(permissionChecker.getCompanyId()),sb.toString(),String.valueOf(scope),roleIdsOrOwnerIdSQL});
  int pos=sql.indexOf(_WHERE_CLAUSE);
  if (pos != -1) {
    return sql.substring(0,pos + 1).concat(permissionJoin).concat(sql.substring(pos + 1));
  }
  pos=sql.indexOf(_GROUP_BY_CLAUSE);
  if (pos != -1) {
    return sql.substring(0,pos + 1).concat(permissionJoin).concat(sql.substring(pos + 1));
  }
  pos=sql.indexOf(_ORDER_BY_CLAUSE);
  if (pos != -1) {
    return sql.substring(0,pos + 1).concat(permissionJoin).concat(sql.substring(pos + 1));
  }
  return sql.concat(StringPool.SPACE).concat(permissionJoin);
}
