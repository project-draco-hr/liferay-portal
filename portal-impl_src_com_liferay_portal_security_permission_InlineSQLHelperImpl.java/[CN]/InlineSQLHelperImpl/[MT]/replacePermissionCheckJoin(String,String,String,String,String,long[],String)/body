{
  if (Validator.isNull(classPKField)) {
    throw new IllegalArgumentException("classPKField is null");
  }
  PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
  long checkGroupId=0;
  if (groupIds.length == 1) {
    checkGroupId=groupIds[0];
  }
  if (permissionChecker.hasPermission(checkGroupId,className,0,ActionKeys.VIEW)) {
    return sql;
  }
  String permissionJoin=StringPool.BLANK;
  if (Validator.isNotNull(bridgeJoin)) {
    permissionJoin=bridgeJoin;
  }
  permissionJoin+=CustomSQLUtil.get(JOIN_RESOURCE_PERMISSION);
  StringBundler sb=new StringBundler();
  sb.append("(((InlineSQLResourcePermission.primKey = CAST_TEXT(");
  sb.append(classPKField);
  sb.append(")) AND ((");
  boolean hasPreviousViewableGroup=false;
  List<Long> viewableGroupIds=new ArrayList<>();
  for (int j=0; j < groupIds.length; j++) {
    long groupId=groupIds[j];
    if (!permissionChecker.hasPermission(groupId,className,0,ActionKeys.VIEW)) {
      if (Validator.isNotNull(groupIdField)) {
        if ((j > 0) && hasPreviousViewableGroup) {
          sb.append(" OR ");
        }
        hasPreviousViewableGroup=true;
        sb.append(StringPool.OPEN_PARENTHESIS);
        sb.append(groupIdField);
        sb.append(" = ");
        sb.append(groupId);
        sb.append(StringPool.CLOSE_PARENTHESIS);
      }
    }
 else {
      viewableGroupIds.add(groupId);
    }
  }
  sb.append(StringPool.CLOSE_PARENTHESIS);
  if (!viewableGroupIds.isEmpty()) {
    for (    Long viewableGroupId : viewableGroupIds) {
      if (Validator.isNotNull(groupIdField)) {
        sb.append(" OR (");
        sb.append(groupIdField);
        sb.append(" = ");
        sb.append(viewableGroupId);
        sb.append(StringPool.CLOSE_PARENTHESIS);
      }
    }
  }
  sb.append(")))");
  String roleIdsOrOwnerIdSQL=getRoleIdsOrOwnerIdSQL(permissionChecker,groupIds,userIdField);
  int scope=ResourceConstants.SCOPE_INDIVIDUAL;
  permissionJoin=StringUtil.replace(permissionJoin,new String[]{"[$CLASS_NAME$]","[$COMPANY_ID$]","[$PRIM_KEYS$]","[$RESOURCE_SCOPE_INDIVIDUAL$]","[$ROLE_IDS_OR_OWNER_ID$]"},new String[]{className,String.valueOf(permissionChecker.getCompanyId()),sb.toString(),String.valueOf(scope),roleIdsOrOwnerIdSQL});
  int pos=sql.indexOf(_WHERE_CLAUSE);
  if (pos != -1) {
    return sql.substring(0,pos + 1).concat(permissionJoin).concat(sql.substring(pos + 1));
  }
  pos=sql.indexOf(_GROUP_BY_CLAUSE);
  if (pos != -1) {
    return sql.substring(0,pos + 1).concat(permissionJoin).concat(sql.substring(pos + 1));
  }
  pos=sql.indexOf(_ORDER_BY_CLAUSE);
  if (pos != -1) {
    return sql.substring(0,pos + 1).concat(permissionJoin).concat(sql.substring(pos + 1));
  }
  return sql.concat(StringPool.SPACE).concat(permissionJoin);
}
