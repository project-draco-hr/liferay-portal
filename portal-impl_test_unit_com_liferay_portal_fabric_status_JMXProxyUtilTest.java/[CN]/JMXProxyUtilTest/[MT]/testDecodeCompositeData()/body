{
  MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  CompositeDataSupport compositeDataSupport=(CompositeDataSupport)mBeanServer.getAttribute(createObjectName(ManagementFactory.MEMORY_MXBEAN_NAME),"HeapMemoryUsage");
  MemoryUsage memoryUsage=(MemoryUsage)JMXProxyUtil.decode(MemoryUsage.class,compositeDataSupport);
  Assert.assertEquals(compositeDataSupport.get("init"),memoryUsage.getInit());
  Assert.assertEquals(compositeDataSupport.get("used"),memoryUsage.getUsed());
  Assert.assertEquals(compositeDataSupport.get("committed"),memoryUsage.getCommitted());
  Assert.assertEquals(compositeDataSupport.get("max"),memoryUsage.getMax());
  Thread currentThread=Thread.currentThread();
  CompositeData[] compositeDatas=(CompositeData[])mBeanServer.invoke(createObjectName(ManagementFactory.THREAD_MXBEAN_NAME),"getThreadInfo",new Object[]{new long[]{currentThread.getId()},true,true},new String[]{long[].class.getName(),boolean.class.getName(),boolean.class.getName()});
  Assert.assertEquals(1,compositeDatas.length);
  compositeDataSupport=(CompositeDataSupport)compositeDatas[0];
  ThreadInfo threadInfo=(ThreadInfo)JMXProxyUtil.decode(ThreadInfo.class,compositeDataSupport);
  Assert.assertEquals(compositeDataSupport.get("threadId"),threadInfo.getThreadId());
  Assert.assertEquals(compositeDataSupport.get("threadName"),threadInfo.getThreadName());
  Assert.assertEquals(compositeDataSupport.get("suspended"),threadInfo.isSuspended());
  Assert.assertEquals(compositeDataSupport.get("inNative"),threadInfo.isInNative());
  Assert.assertEquals(compositeDataSupport.get("blockedCount"),threadInfo.getBlockedCount());
  Assert.assertEquals(compositeDataSupport.get("blockedTime"),threadInfo.getBlockedTime());
  Assert.assertEquals(compositeDataSupport.get("waitedCount"),threadInfo.getWaitedCount());
  Assert.assertEquals(compositeDataSupport.get("waitedTime"),threadInfo.getWaitedTime());
  assertEquals(createLockInfo((CompositeData)compositeDataSupport.get("lockInfo")),threadInfo.getLockInfo());
  Assert.assertEquals(compositeDataSupport.get("lockName"),threadInfo.getLockName());
  Assert.assertEquals(compositeDataSupport.get("lockOwnerId"),threadInfo.getLockOwnerId());
  Assert.assertEquals(compositeDataSupport.get("lockOwnerName"),threadInfo.getLockOwnerName());
  Assert.assertArrayEquals(createStackTraceElements((CompositeData[])compositeDataSupport.get("stackTrace")),threadInfo.getStackTrace());
  assertEquals(createMonitorInfos((CompositeData[])compositeDataSupport.get("lockedMonitors")),threadInfo.getLockedMonitors());
  assertEquals(createLockInfos((CompositeData[])compositeDataSupport.get("lockedSynchronizers")),threadInfo.getLockedSynchronizers());
  Assert.assertSame(compositeDataSupport,JMXProxyUtil.decode(Object.class,compositeDataSupport));
}
