{
  if (_log.isDebugEnabled()) {
    _log.debug("Language " + languageId);
  }
  if (Validator.isNull(viewMode)) {
    viewMode=Constants.VIEW;
  }
  if (_logTokens.isDebugEnabled()) {
    String tokensString=PropertiesUtil.list(tokens);
    _logTokens.debug(tokensString);
  }
  if (_logTransformBefore.isDebugEnabled()) {
    _logTransformBefore.debug(document);
  }
  for (  TransformerListener transformerListener : _transformerListeners) {
    if (_logXmlBeforeListener.isDebugEnabled()) {
      _logXmlBeforeListener.debug(document);
    }
    if (transformerListener != null) {
      document=transformerListener.onXml(document,languageId,tokens);
      if (_logXmlAfterListener.isDebugEnabled()) {
        _logXmlAfterListener.debug(document);
      }
    }
    if (_logScriptBeforeListener.isDebugEnabled()) {
      _logScriptBeforeListener.debug(script);
    }
    if (transformerListener != null) {
      script=transformerListener.onScript(script,document,languageId,tokens);
      if (_logScriptAfterListener.isDebugEnabled()) {
        _logScriptAfterListener.debug(script);
      }
    }
  }
  String output=null;
  if (Validator.isNull(langType)) {
    output=LocalizationUtil.getLocalization(document.asXML(),languageId);
  }
 else {
    long companyId=0;
    long companyGroupId=0;
    long articleGroupId=0;
    long classNameId=0;
    if (tokens != null) {
      companyId=GetterUtil.getLong(tokens.get("company_id"));
      companyGroupId=GetterUtil.getLong(tokens.get("company_group_id"));
      articleGroupId=GetterUtil.getLong(tokens.get("article_group_id"));
      classNameId=GetterUtil.getLong(tokens.get(TemplateConstants.CLASS_NAME_ID));
    }
    long scopeGroupId=0;
    long siteGroupId=0;
    if (themeDisplay != null) {
      companyId=themeDisplay.getCompanyId();
      companyGroupId=themeDisplay.getCompanyGroupId();
      scopeGroupId=themeDisplay.getScopeGroupId();
      siteGroupId=themeDisplay.getSiteGroupId();
    }
    String templateId=tokens.get("template_id");
    templateId=getTemplateId(templateId,companyId,companyGroupId,articleGroupId);
    Template template=getTemplate(templateId,tokens,languageId,document,script,langType);
    if (contextObjects != null) {
      for (      String key : contextObjects.keySet()) {
        template.put(key,contextObjects.get(key));
      }
    }
    UnsyncStringWriter unsyncStringWriter=new UnsyncStringWriter();
    try {
      if (document != null) {
        Element rootElement=document.getRootElement();
        List<TemplateNode> templateNodes=getTemplateNodes(themeDisplay,rootElement,Long.valueOf(tokens.get("ddm_structure_id")));
        if (templateNodes != null) {
          for (          TemplateNode templateNode : templateNodes) {
            template.put(templateNode.getName(),templateNode);
          }
        }
        if (portletRequestModel != null) {
          template.put("request",portletRequestModel.toMap());
          if (langType.equals(TemplateConstants.LANG_TYPE_XSL)) {
            Document requestDocument=SAXReaderUtil.read(portletRequestModel.toXML());
            Element requestElement=requestDocument.getRootElement();
            template.put("xmlRequest",requestElement.asXML());
          }
        }
 else {
          Element requestElement=rootElement.element("request");
          template.put("request",insertRequestVariables(requestElement));
          if (langType.equals(TemplateConstants.LANG_TYPE_XSL)) {
            template.put("xmlRequest",requestElement.asXML());
          }
        }
      }
      template.put("articleGroupId",articleGroupId);
      template.put("company",getCompany(themeDisplay,companyId));
      template.put("companyId",companyId);
      template.put("device",getDevice(themeDisplay));
      String templatesPath=getTemplatesPath(companyId,articleGroupId,classNameId);
      Locale locale=LocaleUtil.fromLanguageId(languageId);
      template.put("locale",locale);
      template.put("permissionChecker",PermissionThreadLocal.getPermissionChecker());
      template.put("randomNamespace",StringUtil.randomId() + StringPool.UNDERLINE);
      template.put("scopeGroupId",scopeGroupId);
      template.put("siteGroupId",siteGroupId);
      template.put("templatesPath",templatesPath);
      template.put("viewMode",viewMode);
      if (themeDisplay != null) {
        TemplateManager templateManager=TemplateManagerUtil.getTemplateManager(langType);
        HttpServletRequest request=themeDisplay.getRequest();
        templateManager.addTaglibApplication(template,"Application",request.getServletContext());
        templateManager.addTaglibFactory(template,"PortalJspTagLibs",request.getServletContext());
        templateManager.addTaglibRequest(template,"Request",request,themeDisplay.getResponse());
        templateManager.addTaglibTheme(template,"taglibLiferay",request,new PipingServletResponse(themeDisplay.getResponse(),unsyncStringWriter));
      }
      template.put("groupId",articleGroupId);
      template.put("journalTemplatesPath",templatesPath);
      mergeTemplate(template,unsyncStringWriter,propagateException);
    }
 catch (    Exception e) {
      if (e instanceof DocumentException) {
        throw new TransformException("Unable to read XML document",e);
      }
 else       if (e instanceof IOException) {
        throw new TransformException("Error reading template",e);
      }
 else       if (e instanceof TransformException) {
        throw (TransformException)e;
      }
 else {
        throw new TransformException("Unhandled exception",e);
      }
    }
    output=unsyncStringWriter.toString();
  }
  for (  TransformerListener transformerListener : _transformerListeners) {
    if (_logOutputBeforeListener.isDebugEnabled()) {
      _logOutputBeforeListener.debug(output);
    }
    output=transformerListener.onOutput(output,languageId,tokens);
    if (_logOutputAfterListener.isDebugEnabled()) {
      _logOutputAfterListener.debug(output);
    }
  }
  if (_logTransfromAfter.isDebugEnabled()) {
    _logTransfromAfter.debug(output);
  }
  return output;
}
