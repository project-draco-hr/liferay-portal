{
  Organization organization=OrganizationLocalServiceUtil.fetchOrganizationByUuidAndCompanyId(stagedModel.getUuid(),group.getCompanyId());
  List<StagedModel> dependentAddressStagedModels=dependentStagedModelsMap.get(Address.class.getSimpleName());
  Assert.assertEquals(1,dependentAddressStagedModels.size());
  Address address=(Address)dependentAddressStagedModels.get(0);
  Address importedAddress=AddressLocalServiceUtil.fetchAddressByUuidAndCompanyId(address.getUuid(),group.getCompanyId());
  Assert.assertNotNull(importedAddress);
  Assert.assertEquals(organization.getPrimaryKey(),importedAddress.getClassPK());
  List<StagedModel> dependentEmailAddressStagedModels=dependentStagedModelsMap.get(EmailAddress.class.getSimpleName());
  Assert.assertEquals(1,dependentEmailAddressStagedModels.size());
  EmailAddress emailAddress=(EmailAddress)dependentEmailAddressStagedModels.get(0);
  EmailAddress importedEmailAddress=EmailAddressLocalServiceUtil.fetchEmailAddressByUuidAndCompanyId(emailAddress.getUuid(),group.getCompanyId());
  Assert.assertNotNull(importedEmailAddress);
  Assert.assertEquals(organization.getPrimaryKey(),importedEmailAddress.getClassPK());
  List<OrgLabor> orgLabors=OrgLaborLocalServiceUtil.getOrgLabors(organization.getOrganizationId());
  Assert.assertEquals(1,orgLabors.size());
  Assert.assertEquals(organization.getPrimaryKey(),orgLabors.get(0).getOrganizationId());
  List<StagedModel> dependentPasswordPolicyStagedModels=dependentStagedModelsMap.get(PasswordPolicy.class.getSimpleName());
  Assert.assertEquals(1,dependentPasswordPolicyStagedModels.size());
  PasswordPolicy passwordPolicy=(PasswordPolicy)dependentPasswordPolicyStagedModels.get(0);
  PasswordPolicyRel passwordPolicyRel=PasswordPolicyRelLocalServiceUtil.fetchPasswordPolicyRel(organization.getModelClassName(),organization.getPrimaryKey());
  Assert.assertNotNull(passwordPolicyRel);
  Assert.assertEquals(passwordPolicy.getPasswordPolicyId(),passwordPolicyRel.getPasswordPolicyId());
  List<StagedModel> dependentPhoneStagedModels=dependentStagedModelsMap.get(Phone.class.getSimpleName());
  Assert.assertEquals(1,dependentPhoneStagedModels.size());
  Phone phone=(Phone)dependentPhoneStagedModels.get(0);
  Phone importedPhone=PhoneLocalServiceUtil.fetchPhoneByUuidAndCompanyId(phone.getUuid(),group.getCompanyId());
  Assert.assertNotNull(importedPhone);
  Assert.assertEquals(organization.getPrimaryKey(),importedPhone.getClassPK());
  List<StagedModel> dependentWebsiteStagedModels=dependentStagedModelsMap.get(Website.class.getSimpleName());
  Assert.assertEquals(1,dependentWebsiteStagedModels.size());
  Website website=(Website)dependentWebsiteStagedModels.get(0);
  Website importedWebsite=WebsiteLocalServiceUtil.fetchWebsiteByUuidAndCompanyId(website.getUuid(),group.getCompanyId());
  Assert.assertNotNull(importedWebsite);
  Assert.assertEquals(organization.getPrimaryKey(),importedWebsite.getClassPK());
}
