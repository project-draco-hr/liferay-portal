{
  Organization organization=OrganizationTestUtil.addOrganization();
  Organization suborganization=OrganizationTestUtil.addOrganization(organization.getOrganizationId(),ServiceTestUtil.randomString(),false);
  addDependentStagedModel(dependentStagedModelsMap,Organization.class,suborganization);
  Address address=OrganizationTestUtil.addAddress(organization);
  addDependentStagedModel(dependentStagedModelsMap,Address.class,address);
  EmailAddress emailAddress=OrganizationTestUtil.addEmailAddress(organization);
  addDependentStagedModel(dependentStagedModelsMap,EmailAddress.class,emailAddress);
  OrganizationTestUtil.addOrgLabor(organization);
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext(group.getGroupId());
  PasswordPolicy passwordPolicy=OrganizationTestUtil.addPasswordPolicyRel(organization,serviceContext);
  addDependentStagedModel(dependentStagedModelsMap,PasswordPolicy.class,passwordPolicy);
  Phone phone=OrganizationTestUtil.addPhone(organization);
  addDependentStagedModel(dependentStagedModelsMap,Phone.class,phone);
  Website website=OrganizationTestUtil.addWebsite(organization);
  addDependentStagedModel(dependentStagedModelsMap,Website.class,website);
  return organization;
}
