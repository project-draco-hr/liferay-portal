{
  if (Validator.isNotNull(sourceFileName)) {
    dlLocalService.validate(name,sourceFileName,is);
  }
  if (newFolderId > 0 && (folderId != newFolderId)) {
    folderId=newFolderId;
  }
  String extension=FileUtil.getExtension(name);
  try {
    String titleWithException=title;
    if (Validator.isNotNull(extension)) {
      title+=extension;
    }
    dlFolderLocalService.getFolder(groupId,newFolderId,titleWithException);
    throw new DuplicateFolderNameException();
  }
 catch (  NoSuchFolderException nsfe) {
  }
  Iterator itr=dlFileEntryPersistence.findByF_T(folderId,title).iterator();
  while (itr.hasNext()) {
    DLFileEntry fileEntry=(DLFileEntry)itr.next();
    if (!name.equals(fileEntry.getName())) {
      String curExtension=FileUtil.getExtension(fileEntry.getName());
      if (PropsValues.WEBDAV_LITMUS && Validator.isNull(extension)) {
        if (Validator.isNull(curExtension)) {
          throw new DuplicateFileException(fileEntry.getTitleWithExtension());
        }
      }
 else       if (extension.equals(curExtension)) {
        throw new DuplicateFileException(fileEntry.getTitleWithExtension());
      }
    }
  }
}
