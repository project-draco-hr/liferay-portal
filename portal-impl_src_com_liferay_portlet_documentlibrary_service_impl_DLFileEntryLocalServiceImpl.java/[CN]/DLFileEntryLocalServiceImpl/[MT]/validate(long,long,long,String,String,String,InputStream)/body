{
  if (Validator.isNotNull(sourceFileName)) {
    dlLocalService.validate(name,sourceFileName,is);
  }
  if (newFolderId > 0 && (folderId != newFolderId)) {
    folderId=newFolderId;
  }
  String extension=FileUtil.getExtension(name);
  try {
    String titleWithExtension=title;
    if (Validator.isNotNull(extension)) {
      titleWithExtension+=StringPool.PERIOD + extension;
    }
    dlFolderLocalService.getFolder(groupId,folderId,titleWithExtension);
    throw new DuplicateFolderNameException();
  }
 catch (  NoSuchFolderException nsfe) {
  }
  List<DLFileEntry> fileEntries=dlFileEntryPersistence.findByF_T(folderId,title);
  for (  DLFileEntry fileEntry : fileEntries) {
    if (!name.equals(fileEntry.getName())) {
      String curExtension=FileUtil.getExtension(fileEntry.getName());
      if (PropsValues.WEBDAV_LITMUS && Validator.isNull(extension)) {
        if (Validator.isNull(curExtension)) {
          throw new DuplicateFileException(fileEntry.getTitleWithExtension());
        }
      }
 else       if (extension.equals(curExtension)) {
        throw new DuplicateFileException(fileEntry.getTitleWithExtension());
      }
    }
  }
}
