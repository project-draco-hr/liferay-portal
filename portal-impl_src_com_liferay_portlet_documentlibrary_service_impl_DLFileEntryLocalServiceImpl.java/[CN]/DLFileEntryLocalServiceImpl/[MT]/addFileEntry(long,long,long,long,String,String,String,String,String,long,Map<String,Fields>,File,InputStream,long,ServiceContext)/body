{
  if (Validator.isNull(title)) {
    if (size == 0) {
      throw new FileNameException();
    }
 else {
      title=sourceFileName;
    }
  }
  User user=userPersistence.findByPrimaryKey(userId);
  folderId=dlFolderLocalService.getFolderId(user.getCompanyId(),folderId);
  String name=String.valueOf(counterLocalService.increment(DLFileEntry.class.getName()));
  String extension=DLAppUtil.getExtension(title,sourceFileName);
  long newFileEntryTypeId=getFileEntryTypeId(PortalUtil.getSiteAndCompanyGroupIds(groupId),folderId,fileEntryTypeId);
  if (fileEntryTypeId == -1) {
    fieldsMap=getFieldsMap(newFileEntryTypeId,serviceContext);
  }
  fileEntryTypeId=newFileEntryTypeId;
  Date now=new Date();
  validateFile(groupId,folderId,0,title,extension,sourceFileName,file,is);
  long fileEntryId=counterLocalService.increment();
  DLFileEntry dlFileEntry=dlFileEntryPersistence.create(fileEntryId);
  dlFileEntry.setUuid(serviceContext.getUuid());
  dlFileEntry.setGroupId(groupId);
  dlFileEntry.setCompanyId(user.getCompanyId());
  dlFileEntry.setUserId(user.getUserId());
  dlFileEntry.setUserName(user.getFullName());
  dlFileEntry.setVersionUserId(user.getUserId());
  dlFileEntry.setVersionUserName(user.getFullName());
  dlFileEntry.setCreateDate(serviceContext.getCreateDate(now));
  dlFileEntry.setModifiedDate(serviceContext.getModifiedDate(now));
  DLFolder repositoryDLFolder=null;
  if (repositoryId != groupId) {
    Repository repository=repositoryLocalService.getRepository(repositoryId);
    repositoryDLFolder=dlFolderPersistence.findByPrimaryKey(repository.getDlFolderId());
  }
  if ((repositoryDLFolder != null) && repositoryDLFolder.isHidden()) {
    long classNameId=PortalUtil.getClassNameId((String)serviceContext.getAttribute("className"));
    long classPK=ParamUtil.getLong(serviceContext,"classPK");
    if (Validator.isNotNull(classNameId) && Validator.isNotNull(classPK)) {
      dlFileEntry.setClassNameId(classNameId);
      dlFileEntry.setClassPK(classPK);
    }
  }
  dlFileEntry.setRepositoryId(repositoryId);
  dlFileEntry.setFolderId(folderId);
  dlFileEntry.setName(name);
  dlFileEntry.setExtension(extension);
  dlFileEntry.setMimeType(mimeType);
  dlFileEntry.setTitle(title);
  dlFileEntry.setDescription(description);
  dlFileEntry.setFileEntryTypeId(fileEntryTypeId);
  dlFileEntry.setVersion(DLFileEntryConstants.VERSION_DEFAULT);
  dlFileEntry.setSize(size);
  dlFileEntry.setReadCount(DLFileEntryConstants.DEFAULT_READ_COUNT);
  dlFileEntryPersistence.update(dlFileEntry);
  addFileVersion(user,dlFileEntry,serviceContext.getModifiedDate(now),extension,mimeType,title,description,null,StringPool.BLANK,fileEntryTypeId,fieldsMap,DLFileEntryConstants.VERSION_DEFAULT,size,WorkflowConstants.STATUS_DRAFT,serviceContext);
  if (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    DLFolder dlFolder=dlFolderPersistence.findByPrimaryKey(dlFileEntry.getFolderId());
    dlFolder.setLastPostDate(dlFileEntry.getModifiedDate());
    dlFolderPersistence.update(dlFolder);
  }
  if (file != null) {
    DLStoreUtil.addFile(user.getCompanyId(),dlFileEntry.getDataRepositoryId(),name,false,file);
  }
 else {
    DLStoreUtil.addFile(user.getCompanyId(),dlFileEntry.getDataRepositoryId(),name,false,is);
  }
  return dlFileEntry;
}
