{
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileEntry dlFileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
  long oldDataRepositoryId=dlFileEntry.getDataRepositoryId();
  if (DLStoreUtil.hasFile(user.getCompanyId(),DLFolderConstants.getDataRepositoryId(dlFileEntry.getGroupId(),newFolderId),dlFileEntry.getName(),StringPool.BLANK)) {
    throw new DuplicateFileException(dlFileEntry.getName());
  }
  dlFileEntry.setFolderId(newFolderId);
  dlFileEntryPersistence.update(dlFileEntry,false);
  DLStoreUtil.updateFile(user.getCompanyId(),oldDataRepositoryId,dlFileEntry.getDataRepositoryId(),dlFileEntry.getName());
  Indexer indexer=IndexerRegistryUtil.getIndexer(FileModel.class);
  FileModel fileModel=new FileModel();
  fileModel.setCompanyId(user.getCompanyId());
  fileModel.setFileName(dlFileEntry.getName());
  fileModel.setPortletId(PortletKeys.DOCUMENT_LIBRARY);
  fileModel.setRepositoryId(oldDataRepositoryId);
  indexer.delete(fileModel);
  fileModel.setGroupId(dlFileEntry.getGroupId());
  fileModel.setRepositoryId(dlFileEntry.getDataRepositoryId());
  indexer.reindex(fileModel);
  return dlFileEntry;
}
