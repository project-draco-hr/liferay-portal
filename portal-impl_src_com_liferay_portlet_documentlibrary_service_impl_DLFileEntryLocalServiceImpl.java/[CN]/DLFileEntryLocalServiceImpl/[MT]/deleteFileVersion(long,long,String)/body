{
  if (Validator.isNull(version) || version.equals(DLFileEntryConstants.PRIVATE_WORKING_COPY_VERSION)) {
    throw new InvalidFileVersionException();
  }
  if (!hasFileEntryLock(userId,fileEntryId)) {
    lockFileEntry(userId,fileEntryId);
  }
  try {
    DLFileVersion fileVersion=dlFileVersionPersistence.findByF_V(fileEntryId,version);
    if (!fileVersion.isApproved()) {
      throw new InvalidFileVersionException("Cannot delete an unapproved file version");
    }
 else {
      int count=dlFileVersionPersistence.countByF_S(fileEntryId,WorkflowConstants.STATUS_APPROVED);
      if (count <= 1) {
        throw new InvalidFileVersionException("Cannot delete the only approved file version");
      }
    }
    DLFileEntry fileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
    dlFileVersionPersistence.remove(fileVersion);
    expandoValueLocalService.deleteValues(DLFileVersion.class.getName(),fileVersion.getFileVersionId());
    if (version.equals(fileEntry.getVersion())) {
      try {
        DLFileVersion latestFileVersion=dlFileVersionLocalService.getLatestFileVersion(fileEntry.getFileEntryId(),true);
        fileEntry.setVersion(latestFileVersion.getVersion());
        fileEntry.setSize(latestFileVersion.getSize());
        dlFileEntryPersistence.update(fileEntry,false);
      }
 catch (      NoSuchFileVersionException nsfve) {
      }
    }
  }
  finally {
    unlockFileEntry(fileEntryId);
  }
}
