{
  if (Validator.isNull(version)) {
    throw new InvalidFileVersionException("Version is null");
  }
  if (version.equals(DLFileEntryConstants.PRIVATE_WORKING_COPY_VERSION)) {
    throw new InvalidFileVersionException("Cannot delete a private working copy file version");
  }
  if (!hasFileEntryLock(userId,fileEntryId)) {
    lockFileEntry(userId,fileEntryId);
  }
  boolean latestVersion=false;
  DLFileEntry dlFileEntry=null;
  try {
    DLFileVersion dlFileVersion=dlFileVersionPersistence.findByF_V(fileEntryId,version);
    if (!dlFileVersion.isApproved()) {
      throw new InvalidFileVersionException("Cannot delete an unapproved file version");
    }
 else {
      int count=dlFileVersionPersistence.countByF_S(fileEntryId,WorkflowConstants.STATUS_APPROVED);
      if (count <= 1) {
        throw new InvalidFileVersionException("Cannot delete the only approved file version");
      }
    }
    dlFileVersionPersistence.remove(dlFileVersion);
    expandoRowLocalService.deleteRows(dlFileVersion.getFileVersionId());
    dlFileEntryMetadataLocalService.deleteFileVersionFileEntryMetadata(dlFileVersion.getFileVersionId());
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(dlFileVersion.getCompanyId(),dlFileVersion.getGroupId(),DLFileEntryConstants.getClassName(),dlFileVersion.getFileVersionId());
    dlFileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
    latestVersion=version.equals(dlFileEntry.getVersion());
    if (latestVersion) {
      DLFileVersion dlLatestFileVersion=dlFileVersionLocalService.fetchLatestFileVersion(dlFileEntry.getFileEntryId(),true);
      if (dlLatestFileVersion != null) {
        dlLatestFileVersion.setModifiedDate(new Date());
        dlLatestFileVersion.setStatusDate(new Date());
        dlFileVersionPersistence.update(dlLatestFileVersion);
        dlFileEntry.setModifiedDate(new Date());
        dlFileEntry.setFileName(dlLatestFileVersion.getFileName());
        dlFileEntry.setExtension(dlLatestFileVersion.getExtension());
        dlFileEntry.setMimeType(dlLatestFileVersion.getMimeType());
        dlFileEntry.setTitle(dlLatestFileVersion.getTitle());
        dlFileEntry.setDescription(dlLatestFileVersion.getDescription());
        dlFileEntry.setExtraSettings(dlLatestFileVersion.getExtraSettings());
        dlFileEntry.setFileEntryTypeId(dlLatestFileVersion.getFileEntryTypeId());
        dlFileEntry.setVersion(dlLatestFileVersion.getVersion());
        dlFileEntry.setSize(dlLatestFileVersion.getSize());
        dlFileEntry=dlFileEntryPersistence.update(dlFileEntry);
      }
    }
    DLStoreUtil.deleteFile(dlFileEntry.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),version);
  }
  finally {
    unlockFileEntry(fileEntryId);
  }
  if (latestVersion) {
    return dlFileEntry;
  }
  return null;
}
