{
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileEntry dlFileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
  boolean checkedOut=dlFileEntry.isCheckedOut();
  DLFileVersion dlFileVersion=dlFileVersionLocalService.getLatestFileVersion(fileEntryId,!checkedOut);
  boolean autoCheckIn=false;
  if (!checkedOut && dlFileVersion.isApproved() && !Validator.equals(dlFileVersion.getUuid(),serviceContext.getUuidWithoutReset())) {
    autoCheckIn=true;
  }
  if (autoCheckIn) {
    dlFileEntry=checkOutFileEntry(userId,fileEntryId,serviceContext);
  }
 else   if (!checkedOut) {
    lockFileEntry(userId,fileEntryId);
  }
  if (!hasFileEntryLock(userId,fileEntryId)) {
    lockFileEntry(userId,fileEntryId);
  }
  if (checkedOut || autoCheckIn) {
    dlFileVersion=dlFileVersionLocalService.getLatestFileVersion(fileEntryId,false);
  }
  try {
    if (Validator.isNull(extension)) {
      extension=dlFileEntry.getExtension();
    }
    if (Validator.isNull(mimeType)) {
      mimeType=dlFileEntry.getMimeType();
    }
    if (Validator.isNull(title)) {
      title=sourceFileName;
      if (Validator.isNull(title)) {
        title=dlFileEntry.getTitle();
      }
    }
    String fileName=DLUtil.getSanitizedFileName(title,extension);
    Date now=new Date();
    validateFile(dlFileEntry.getGroupId(),dlFileEntry.getFolderId(),dlFileEntry.getFileEntryId(),sourceFileName,fileName,extension,title);
    String version=dlFileVersion.getVersion();
    if (size == 0) {
      size=dlFileVersion.getSize();
    }
    updateFileVersion(user,dlFileVersion,sourceFileName,fileName,extension,mimeType,title,description,changeLog,extraSettings,fileEntryTypeId,ddmFormValuesMap,version,size,dlFileVersion.getStatus(),serviceContext.getModifiedDate(now),serviceContext);
    if (!checkedOut && (dlFileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID)) {
      dlFolderLocalService.updateLastPostDate(dlFileEntry.getFolderId(),serviceContext.getModifiedDate(now));
    }
    if ((file != null) || (is != null)) {
      try {
        DLStoreUtil.deleteFile(user.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),version);
      }
 catch (      NoSuchModelException nsme) {
      }
      if (file != null) {
        DLStoreUtil.updateFile(user.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),dlFileEntry.getExtension(),false,version,sourceFileName,file);
      }
 else {
        DLStoreUtil.updateFile(user.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),dlFileEntry.getExtension(),false,version,sourceFileName,is);
      }
    }
    if (autoCheckIn) {
      if (ExportImportThreadLocal.isImportInProcess()) {
        checkInFileEntry(userId,fileEntryId,majorVersion,changeLog,serviceContext);
      }
 else {
        dlFileEntryService.checkInFileEntry(fileEntryId,majorVersion,changeLog,serviceContext);
      }
    }
  }
 catch (  PortalException pe) {
    if (autoCheckIn) {
      try {
        if (ExportImportThreadLocal.isImportInProcess()) {
          cancelCheckOut(userId,fileEntryId);
        }
 else {
          dlFileEntryService.cancelCheckOut(fileEntryId);
        }
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
    throw pe;
  }
catch (  SystemException se) {
    if (autoCheckIn) {
      try {
        if (ExportImportThreadLocal.isImportInProcess()) {
          cancelCheckOut(userId,fileEntryId);
        }
 else {
          dlFileEntryService.cancelCheckOut(fileEntryId);
        }
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
    throw se;
  }
 finally {
    if (!autoCheckIn && !checkedOut) {
      unlockFileEntry(fileEntryId);
    }
  }
  return dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
}
