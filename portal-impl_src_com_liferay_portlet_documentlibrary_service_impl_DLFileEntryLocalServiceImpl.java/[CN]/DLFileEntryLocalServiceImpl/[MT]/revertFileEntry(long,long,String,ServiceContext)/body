{
  if (Validator.isNull(version) || version.equals(DLFileEntryConstants.PRIVATE_WORKING_COPY_VERSION)) {
    throw new InvalidFileVersionException();
  }
  DLFileVersion dlFileVersion=dlFileVersionLocalService.getFileVersion(fileEntryId,version);
  if (!dlFileVersion.isApproved()) {
    throw new InvalidFileVersionException("Cannot revert from an unapproved file version");
  }
  DLFileVersion latestDLFileVersion=dlFileVersionLocalService.getLatestFileVersion(fileEntryId,false);
  if (version.equals(latestDLFileVersion.getVersion())) {
    throw new InvalidFileVersionException("Cannot revert from the latest file version");
  }
  String sourceFileName=dlFileVersion.getTitle();
  String extension=dlFileVersion.getExtension();
  String mimeType=dlFileVersion.getMimeType();
  String title=dlFileVersion.getTitle();
  String description=dlFileVersion.getDescription();
  String changeLog="Reverted to " + version;
  boolean majorVersion=true;
  String extraSettings=dlFileVersion.getExtraSettings();
  long fileEntryTypeId=dlFileVersion.getFileEntryTypeId();
  Map<String,Fields> fieldsMap=null;
  InputStream is=getFileAsStream(userId,fileEntryId,version);
  long size=dlFileVersion.getSize();
  DLFileEntry dlFileEntry=updateFileEntry(userId,fileEntryId,sourceFileName,extension,mimeType,title,description,changeLog,majorVersion,extraSettings,fileEntryTypeId,fieldsMap,null,is,size,serviceContext);
  DLFileVersion newDlFileVersion=dlFileVersionLocalService.getFileVersion(fileEntryId,dlFileEntry.getVersion());
  copyFileEntryMetadata(dlFileVersion.getCompanyId(),dlFileVersion.getFileEntryTypeId(),fileEntryId,dlFileVersion.getFileVersionId(),newDlFileVersion.getFileVersionId(),serviceContext);
}
