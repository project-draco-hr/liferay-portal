{
  try {
    dlService.deleteFile(fileEntry.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,fileEntry.getFolderId(),fileEntry.getName());
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e,e);
    }
  }
  dlFileRankLocalService.deleteFileRanks(fileEntry.getFolderId(),fileEntry.getName());
  dlFileShortcutLocalService.deleteFileShortcuts(fileEntry.getFolderId(),fileEntry.getName());
  Iterator itr=dlFileVersionPersistence.findByF_N(fileEntry.getFolderId(),fileEntry.getName()).iterator();
  while (itr.hasNext()) {
    DLFileVersion fileVersion=(DLFileVersion)itr.next();
    dlFileVersionPersistence.remove(fileVersion.getPrimaryKey());
  }
  tagsAssetLocalService.deleteAsset(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  ratingsStatsLocalService.deleteStats(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  mbMessageLocalService.deleteDiscussionMessages(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  resourceLocalService.deleteResource(fileEntry.getCompanyId(),DLFileEntry.class.getName(),ResourceImpl.SCOPE_INDIVIDUAL,fileEntry.getFileEntryId());
  webDAVPropsLocalService.deleteWebDAVProps(DLFileEntry.class.getName(),fileEntry.getPrimaryKey());
  dlFileEntryPersistence.remove(fileEntry.getPrimaryKey());
}
