{
  try {
    long repositoryId=getRepositoryId(fileEntry.getGroupId(),fileEntry.getFolderId());
    dlService.deleteFile(fileEntry.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,repositoryId,fileEntry.getName());
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e,e);
    }
  }
  dlFileRankLocalService.deleteFileRanks(fileEntry.getFolderId(),fileEntry.getName());
  dlFileShortcutLocalService.deleteFileShortcuts(fileEntry.getGroupId(),fileEntry.getFolderId(),fileEntry.getName());
  List<DLFileVersion> fileVersions=dlFileVersionPersistence.findByG_F_N(fileEntry.getGroupId(),fileEntry.getFolderId(),fileEntry.getName());
  for (  DLFileVersion fileVersion : fileVersions) {
    dlFileVersionPersistence.remove(fileVersion);
  }
  workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(fileEntry.getCompanyId(),fileEntry.getGroupId(),DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  socialActivityLocalService.deleteActivities(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  ratingsStatsLocalService.deleteStats(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  mbMessageLocalService.deleteDiscussionMessages(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  expandoValueLocalService.deleteValues(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  assetEntryLocalService.deleteEntry(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
  webDAVPropsLocalService.deleteWebDAVProps(DLFileEntry.class.getName(),fileEntry.getPrimaryKey());
  resourceLocalService.deleteResource(fileEntry.getCompanyId(),DLFileEntry.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,fileEntry.getFileEntryId());
  dlFileEntryPersistence.remove(fileEntry);
}
