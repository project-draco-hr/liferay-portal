{
  dlFileEntryPersistence.remove(dlFileEntry);
  resourceLocalService.deleteResource(dlFileEntry.getCompanyId(),DLFileEntry.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,dlFileEntry.getFileEntryId());
  webDAVPropsLocalService.deleteWebDAVProps(DLFileEntry.class.getName(),dlFileEntry.getFileEntryId());
  dlFileEntryMetadataLocalService.deleteFileEntryMetadata(dlFileEntry.getFileEntryId());
  List<DLFileVersion> dlFileVersions=dlFileVersionPersistence.findByFileEntryId(dlFileEntry.getFileEntryId());
  for (  DLFileVersion dlFileVersion : dlFileVersions) {
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(dlFileEntry.getCompanyId(),dlFileEntry.getGroupId(),DLFileEntry.class.getName(),dlFileVersion.getFileVersionId());
    dlFileVersionPersistence.remove(dlFileVersion);
    expandoValueLocalService.deleteValues(DLFileVersion.class.getName(),dlFileVersion.getFileVersionId());
  }
  expandoValueLocalService.deleteValues(DLFileEntry.class.getName(),dlFileEntry.getFileEntryId());
  lockLocalService.unlock(DLFileEntry.class.getName(),dlFileEntry.getFileEntryId());
  dlAppHelperLocalService.deleteFileEntry(new LiferayFileEntry(dlFileEntry));
  try {
    DLStoreUtil.deleteFile(dlFileEntry.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,dlFileEntry.getDataRepositoryId(),dlFileEntry.getName());
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e,e);
    }
  }
}
