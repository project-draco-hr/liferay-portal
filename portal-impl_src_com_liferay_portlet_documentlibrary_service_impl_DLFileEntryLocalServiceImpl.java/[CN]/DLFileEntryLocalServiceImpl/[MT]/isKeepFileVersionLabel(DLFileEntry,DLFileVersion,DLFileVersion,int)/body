{
  if (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT) {
    return false;
  }
  if (PropsValues.DL_FILE_ENTRY_VERSION_POLICY != 1) {
    return false;
  }
  if ((lastDLFileVersion.getFolderId() == latestDLFileVersion.getFolderId()) && Validator.equals(lastDLFileVersion.getExtension(),latestDLFileVersion.getExtension()) && Validator.equals(lastDLFileVersion.getMimeType(),latestDLFileVersion.getMimeType())&& Validator.equals(lastDLFileVersion.getTitle(),latestDLFileVersion.getTitle())&& Validator.equals(lastDLFileVersion.getDescription(),latestDLFileVersion.getDescription())&& (lastDLFileVersion.getFileEntryTypeId() == latestDLFileVersion.getFileEntryTypeId())) {
    AssetEntry lastAssetEntry=assetEntryLocalService.getEntry(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId());
    AssetEntry latestAssetEntry=assetEntryLocalService.getEntry(DLFileEntryConstants.getClassName(),latestDLFileVersion.getFileVersionId());
    if (!Validator.equalsSorted(lastAssetEntry.getCategoryIds(),latestAssetEntry.getCategoryIds())) {
      return false;
    }
    if (!Validator.equalsSorted(lastAssetEntry.getTagNames(),latestAssetEntry.getTagNames())) {
      return false;
    }
    List<AssetLink> lastAssetLinks=assetLinkLocalService.getDirectLinks(lastAssetEntry.getEntryId(),AssetLinkConstants.TYPE_RELATED);
    List<AssetLink> latestAssetLinks=assetLinkLocalService.getDirectLinks(latestAssetEntry.getEntryId(),AssetLinkConstants.TYPE_RELATED);
    if (!Validator.equalsSorted(StringUtil.split(ListUtil.toString(lastAssetLinks,AssetLink.ENTRY_ID2_ACCESSOR),0L),StringUtil.split(ListUtil.toString(latestAssetLinks,AssetLink.ENTRY_ID2_ACCESSOR),0L))) {
      return false;
    }
    ExpandoTable expandoTable=null;
    try {
      expandoTable=expandoTableLocalService.getDefaultTable(lastDLFileVersion.getCompanyId(),DLFileEntry.class.getName());
    }
 catch (    NoSuchTableException nste) {
    }
    if (expandoTable != null) {
      Date lastModifiedDate=null;
      try {
        ExpandoRow lastExpandoRow=expandoRowLocalService.getRow(expandoTable.getTableId(),lastDLFileVersion.getPrimaryKey());
        lastModifiedDate=lastExpandoRow.getModifiedDate();
      }
 catch (      NoSuchRowException nsre) {
      }
      Date latestModifiedDate=null;
      try {
        ExpandoRow latestExpandoRow=expandoRowLocalService.getRow(expandoTable.getTableId(),latestDLFileVersion.getPrimaryKey());
        latestModifiedDate=latestExpandoRow.getModifiedDate();
      }
 catch (      NoSuchRowException nsre) {
      }
      if (!Validator.equals(lastModifiedDate,latestModifiedDate)) {
        return false;
      }
    }
    List<DLFileEntryMetadata> lastFileEntryMetadatas=dlFileEntryMetadataLocalService.getFileVersionFileEntryMetadatas(lastDLFileVersion.getFileVersionId());
    List<DLFileEntryMetadata> latestFileEntryMetadatas=dlFileEntryMetadataLocalService.getFileVersionFileEntryMetadatas(latestDLFileVersion.getFileVersionId());
    for (    DLFileEntryMetadata lastFileEntryMetadata : lastFileEntryMetadatas) {
      Fields lastFields=StorageEngineUtil.getFields(lastFileEntryMetadata.getDDMStorageId());
      boolean found=false;
      for (      DLFileEntryMetadata latestEntryMetadata : latestFileEntryMetadatas) {
        Fields latestFields=StorageEngineUtil.getFields(latestEntryMetadata.getDDMStorageId());
        if (lastFields.equals(latestFields)) {
          found=true;
          break;
        }
      }
      if (!found) {
        return false;
      }
    }
    long lastSize=lastDLFileVersion.getSize();
    long latestSize=latestDLFileVersion.getSize();
    if ((lastSize == 0) && ((latestSize == 0) || (latestSize > 0))) {
      return true;
    }
    if (lastSize != latestSize) {
      return false;
    }
    InputStream lastInputStream=null;
    InputStream latestInputStream=null;
    try {
      String lastChecksum=lastDLFileVersion.getChecksum();
      if (Validator.isNull(lastChecksum)) {
        lastInputStream=DLStoreUtil.getFileAsStream(dlFileEntry.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),lastDLFileVersion.getVersion());
        lastChecksum=DigesterUtil.digest(lastInputStream);
        lastDLFileVersion.setChecksum(lastChecksum);
        dlFileVersionPersistence.update(lastDLFileVersion);
      }
      latestInputStream=DLStoreUtil.getFileAsStream(dlFileEntry.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),latestDLFileVersion.getVersion());
      String latestChecksum=DigesterUtil.digest(latestInputStream);
      if (lastChecksum.equals(latestChecksum)) {
        return true;
      }
      latestDLFileVersion.setChecksum(latestChecksum);
      dlFileVersionPersistence.update(latestDLFileVersion);
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn(e,e);
      }
    }
 finally {
      StreamUtil.cleanUp(lastInputStream);
      StreamUtil.cleanUp(latestInputStream);
    }
  }
  return false;
}
