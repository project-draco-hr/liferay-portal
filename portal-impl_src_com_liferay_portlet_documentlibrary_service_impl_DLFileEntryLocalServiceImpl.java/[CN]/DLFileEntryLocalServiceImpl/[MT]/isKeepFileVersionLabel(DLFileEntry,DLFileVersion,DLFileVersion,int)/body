{
  if (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT) {
    return false;
  }
  if (PropsValues.DL_FILE_ENTRY_VERSION_POLICY != 1) {
    return false;
  }
  if ((lastDLFileVersion.getFolderId() == latestDLFileVersion.getFolderId()) && Validator.equals(lastDLFileVersion.getTitle(),latestDLFileVersion.getTitle()) && Validator.equals(lastDLFileVersion.getDescription(),latestDLFileVersion.getDescription())&& (lastDLFileVersion.getFileEntryTypeId() == latestDLFileVersion.getFileEntryTypeId())) {
    ExpandoTable expandoTable=null;
    try {
      expandoTable=expandoTableLocalService.getDefaultTable(lastDLFileVersion.getCompanyId(),DLFileEntry.class.getName());
    }
 catch (    NoSuchTableException nste) {
    }
    if (expandoTable != null) {
      Date lastModifiedDate=null;
      try {
        ExpandoRow lastExpandoRow=expandoRowLocalService.getRow(expandoTable.getTableId(),lastDLFileVersion.getPrimaryKey());
        lastModifiedDate=lastExpandoRow.getModifiedDate();
      }
 catch (      NoSuchRowException nsre) {
      }
      Date latestModifiedDate=null;
      try {
        ExpandoRow latestExpandoRow=expandoRowLocalService.getRow(expandoTable.getTableId(),latestDLFileVersion.getPrimaryKey());
        latestModifiedDate=latestExpandoRow.getModifiedDate();
      }
 catch (      NoSuchRowException nsre) {
      }
      if (!Validator.equals(lastModifiedDate,latestModifiedDate)) {
        return false;
      }
    }
    DLFileEntryType dlFileEntryType=dlFileEntryTypeLocalService.getFileEntryType(lastDLFileVersion.getFileEntryTypeId());
    List<DDMStructure> ddmStructures=dlFileEntryType.getDDMStructures();
    for (    DDMStructure ddmStructure : ddmStructures) {
      DLFileEntryMetadata lastFileEntryMetadata=dlFileEntryMetadataLocalService.getFileEntryMetadata(ddmStructure.getStructureId(),lastDLFileVersion.getFileVersionId());
      DLFileEntryMetadata latestFileEntryMetadata=dlFileEntryMetadataLocalService.getFileEntryMetadata(ddmStructure.getStructureId(),latestDLFileVersion.getFileVersionId());
      Fields lastFields=StorageEngineUtil.getFields(lastFileEntryMetadata.getDDMStorageId());
      Fields latestFields=StorageEngineUtil.getFields(latestFileEntryMetadata.getDDMStorageId());
      Iterator<com.liferay.portlet.dynamicdatamapping.storage.Field> lastItr=lastFields.iterator();
      Iterator<com.liferay.portlet.dynamicdatamapping.storage.Field> latestItr=latestFields.iterator();
      while (lastItr.hasNext() && latestItr.hasNext()) {
        com.liferay.portlet.dynamicdatamapping.storage.Field lastField=lastItr.next();
        com.liferay.portlet.dynamicdatamapping.storage.Field latestField=latestItr.next();
        if (!lastField.equals(latestField)) {
          return false;
        }
        if (lastItr.hasNext() && !latestItr.hasNext() || !lastItr.hasNext() && latestItr.hasNext()) {
          return false;
        }
      }
    }
    long lastSize=lastDLFileVersion.getSize();
    long latestSize=latestDLFileVersion.getSize();
    if ((lastSize == 0) && ((latestSize == 0) || (latestSize > 0))) {
      return true;
    }
    if (lastSize != latestSize) {
      return false;
    }
    InputStream lastInputStream=null;
    InputStream latestInputStream=null;
    try {
      String lastChecksum=lastDLFileVersion.getChecksum();
      if (Validator.isNull(lastChecksum)) {
        lastInputStream=DLStoreUtil.getFileAsStream(dlFileEntry.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),lastDLFileVersion.getVersion());
        lastChecksum=DigesterUtil.digestBase64(lastInputStream);
        lastDLFileVersion.setChecksum(lastChecksum);
        dlFileVersionPersistence.update(lastDLFileVersion);
      }
      latestInputStream=DLStoreUtil.getFileAsStream(dlFileEntry.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),latestDLFileVersion.getVersion());
      String latestChecksum=DigesterUtil.digestBase64(latestInputStream);
      if (lastChecksum.equals(latestChecksum)) {
        return true;
      }
      latestDLFileVersion.setChecksum(latestChecksum);
      dlFileVersionPersistence.update(latestDLFileVersion);
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn(e,e);
      }
    }
 finally {
      StreamUtil.cleanUp(lastInputStream);
      StreamUtil.cleanUp(latestInputStream);
    }
  }
  return false;
}
