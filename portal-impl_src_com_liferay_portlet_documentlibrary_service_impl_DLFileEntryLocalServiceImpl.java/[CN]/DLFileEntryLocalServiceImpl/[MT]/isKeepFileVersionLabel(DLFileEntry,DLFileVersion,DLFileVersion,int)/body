{
  if (PropsValues.DL_FILE_ENTRY_VERSION_POLICY != 1) {
    return false;
  }
  if (lastDLFileVersion.getFolderId() != latestDLFileVersion.getFolderId()) {
    return false;
  }
  if (!Validator.equals(lastDLFileVersion.getTitle(),latestDLFileVersion.getTitle())) {
    return false;
  }
  if (!Validator.equals(lastDLFileVersion.getDescription(),latestDLFileVersion.getDescription())) {
    return false;
  }
  if (lastDLFileVersion.getFileEntryTypeId() != latestDLFileVersion.getFileEntryTypeId()) {
    return false;
  }
  if (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT) {
    return false;
  }
  DLFileEntryType dlFileEntryType=dlFileEntryTypeLocalService.getFileEntryType(lastDLFileVersion.getFileEntryTypeId());
  List<DDMStructure> ddmStructures=dlFileEntryType.getDDMStructures();
  for (  DDMStructure ddmStructure : ddmStructures) {
    DLFileEntryMetadata lastFileEntryMetadata=null;
    try {
      lastFileEntryMetadata=dlFileEntryMetadataLocalService.getFileEntryMetadata(ddmStructure.getStructureId(),lastDLFileVersion.getFileVersionId());
    }
 catch (    NoSuchFileEntryMetadataException nsfem) {
      return false;
    }
    DLFileEntryMetadata latestFileEntryMetadata=dlFileEntryMetadataLocalService.getFileEntryMetadata(ddmStructure.getStructureId(),latestDLFileVersion.getFileVersionId());
    Fields lastFields=StorageEngineUtil.getFields(lastFileEntryMetadata.getDDMStorageId());
    Fields latestFields=StorageEngineUtil.getFields(latestFileEntryMetadata.getDDMStorageId());
    Set<String> lastFieldNames=lastFields.getNames();
    Set<String> latestFieldNames=latestFields.getNames();
    if (lastFieldNames.size() != latestFieldNames.size()) {
      return false;
    }
    for (    String fieldName : lastFieldNames) {
      com.liferay.portlet.dynamicdatamapping.storage.Field lastField=lastFields.get(fieldName);
      com.liferay.portlet.dynamicdatamapping.storage.Field latestField=latestFields.get(fieldName);
      if ((lastField == null) || !lastField.equals(latestField) && !lastField.isPrivate()) {
        return false;
      }
    }
  }
  ExpandoTable expandoTable=null;
  try {
    expandoTable=expandoTableLocalService.getDefaultTable(lastDLFileVersion.getCompanyId(),DLFileEntry.class.getName());
  }
 catch (  NoSuchTableException nste) {
  }
  if (expandoTable != null) {
    Date lastModifiedDate=null;
    try {
      ExpandoRow lastExpandoRow=expandoRowLocalService.getRow(expandoTable.getTableId(),lastDLFileVersion.getPrimaryKey());
      lastModifiedDate=lastExpandoRow.getModifiedDate();
    }
 catch (    NoSuchRowException nsre) {
    }
    Date latestModifiedDate=null;
    try {
      ExpandoRow latestExpandoRow=expandoRowLocalService.getRow(expandoTable.getTableId(),latestDLFileVersion.getPrimaryKey());
      latestModifiedDate=latestExpandoRow.getModifiedDate();
    }
 catch (    NoSuchRowException nsre) {
    }
    if (!Validator.equals(lastModifiedDate,latestModifiedDate)) {
      return false;
    }
  }
  long lastSize=lastDLFileVersion.getSize();
  long latestSize=latestDLFileVersion.getSize();
  if ((lastSize == 0) && (latestSize >= 0)) {
    return true;
  }
  if (lastSize != latestSize) {
    return false;
  }
  InputStream lastInputStream=null;
  InputStream latestInputStream=null;
  try {
    String lastChecksum=lastDLFileVersion.getChecksum();
    if (Validator.isNull(lastChecksum)) {
      lastInputStream=DLStoreUtil.getFileAsStream(dlFileEntry.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),lastDLFileVersion.getVersion());
      lastChecksum=DigesterUtil.digestBase64(lastInputStream);
      lastDLFileVersion.setChecksum(lastChecksum);
      dlFileVersionPersistence.update(lastDLFileVersion);
    }
    latestInputStream=DLStoreUtil.getFileAsStream(dlFileEntry.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),latestDLFileVersion.getVersion());
    String latestChecksum=DigesterUtil.digestBase64(latestInputStream);
    if (lastChecksum.equals(latestChecksum)) {
      return true;
    }
    latestDLFileVersion.setChecksum(latestChecksum);
    dlFileVersionPersistence.update(latestDLFileVersion);
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e,e);
    }
  }
 finally {
    StreamUtil.cleanUp(lastInputStream);
    StreamUtil.cleanUp(latestInputStream);
  }
  return false;
}
