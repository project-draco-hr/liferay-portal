{
  User user=userPersistence.findByPrimaryKey(userId);
  if (Validator.isNull(title)) {
    title=sourceFileName;
    if (Validator.isNull(title)) {
      title=name;
    }
  }
  Date now=new Date();
  DLFileEntry fileEntry=dlFileEntryPersistence.findByG_F_N(groupId,folderId,name);
  validate(groupId,folderId,newFolderId,name,title,sourceFileName,is);
  fileEntry.setTitle(title);
  fileEntry.setDescription(description);
  fileEntry.setExtraSettings(extraSettings);
  fileEntry.setExpandoBridgeAttributes(serviceContext);
  if (folderId != newFolderId) {
    long oldFileEntryId=fileEntry.getFileEntryId();
    if (dlLocalService.hasFile(user.getCompanyId(),DLFileEntryImpl.getRepositoryId(groupId,newFolderId),name,StringPool.BLANK)) {
      throw new DuplicateFileException(name);
    }
    long newFileEntryId=counterLocalService.increment();
    DLFileEntry newFileEntry=dlFileEntryPersistence.create(newFileEntryId);
    newFileEntry.setGroupId(fileEntry.getGroupId());
    newFileEntry.setCompanyId(fileEntry.getCompanyId());
    newFileEntry.setUserId(fileEntry.getUserId());
    newFileEntry.setUserName(fileEntry.getUserName());
    newFileEntry.setVersionUserId(fileEntry.getVersionUserId());
    newFileEntry.setVersionUserName(fileEntry.getVersionUserName());
    newFileEntry.setCreateDate(fileEntry.getCreateDate());
    newFileEntry.setModifiedDate(fileEntry.getModifiedDate());
    newFileEntry.setFolderId(newFolderId);
    newFileEntry.setName(name);
    newFileEntry.setTitle(fileEntry.getTitle());
    newFileEntry.setDescription(fileEntry.getDescription());
    newFileEntry.setVersion(fileEntry.getVersion());
    newFileEntry.setSize(fileEntry.getSize());
    newFileEntry.setReadCount(fileEntry.getReadCount());
    newFileEntry.setExtraSettings(extraSettings);
    dlFileEntryPersistence.update(newFileEntry,false);
    dlFileEntryPersistence.remove(fileEntry);
    if (serviceContext.isStartWorkflow()) {
      updateWorkflowInstance(fileEntry,newFileEntry);
    }
    List<DLFileVersion> fileVersions=dlFileVersionPersistence.findByG_F_N(groupId,folderId,name);
    for (    DLFileVersion fileVersion : fileVersions) {
      long newFileVersionId=counterLocalService.increment();
      DLFileVersion newFileVersion=dlFileVersionPersistence.create(newFileVersionId);
      newFileVersion.setGroupId(fileVersion.getGroupId());
      newFileVersion.setCompanyId(fileVersion.getCompanyId());
      newFileVersion.setUserId(fileVersion.getUserId());
      newFileVersion.setUserName(fileVersion.getUserName());
      newFileVersion.setCreateDate(fileVersion.getCreateDate());
      newFileVersion.setFolderId(newFolderId);
      newFileVersion.setName(name);
      newFileVersion.setVersion(fileVersion.getVersion());
      newFileVersion.setSize(fileVersion.getSize());
      newFileVersion.setStatus(fileVersion.getStatus());
      newFileVersion.setStatusByUserId(userId);
      newFileVersion.setStatusByUserName(user.getFullName());
      newFileVersion.setStatusDate(serviceContext.getModifiedDate(now));
      dlFileVersionPersistence.update(newFileVersion,false);
      dlFileVersionPersistence.remove(fileVersion);
    }
    dlFileShortcutLocalService.updateFileShortcuts(groupId,folderId,name,newFolderId,name);
    Resource resource=resourceLocalService.getResource(fileEntry.getCompanyId(),DLFileEntry.class.getName(),ResourceConstants.SCOPE_INDIVIDUAL,String.valueOf(fileEntry.getFileEntryId()));
    resource.setPrimKey(String.valueOf(newFileEntryId));
    resourcePersistence.update(resource,false);
    assetEntryLocalService.deleteEntry(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
    List<DLFileShortcut> fileShortcuts=dlFileShortcutPersistence.findByG_TF_TN(groupId,folderId,name);
    for (    DLFileShortcut fileShortcut : fileShortcuts) {
      assetEntryLocalService.deleteEntry(DLFileShortcut.class.getName(),fileShortcut.getFileShortcutId());
    }
    expandoValueLocalService.deleteValues(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
    RatingsStats stats=ratingsStatsLocalService.getStats(DLFileEntry.class.getName(),oldFileEntryId);
    stats.setClassPK(newFileEntryId);
    ratingsStatsPersistence.update(stats,false);
    long classNameId=PortalUtil.getClassNameId(DLFileEntry.class.getName());
    List<RatingsEntry> entries=ratingsEntryPersistence.findByC_C(classNameId,oldFileEntryId);
    for (    RatingsEntry entry : entries) {
      entry.setClassPK(newFileEntryId);
      ratingsEntryPersistence.update(entry,false);
    }
    MBDiscussion discussion=mbDiscussionPersistence.fetchByC_C(classNameId,oldFileEntryId);
    if (discussion != null) {
      discussion.setClassPK(newFileEntryId);
      mbDiscussionPersistence.update(discussion,false);
    }
    socialActivityLocalService.deleteActivities(DLFileEntry.class.getName(),fileEntry.getFileEntryId());
    dlService.updateFile(user.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,newFileEntry.getGroupId(),fileEntry.getRepositoryId(),newFileEntry.getRepositoryId(),name,newFileEntryId);
    folderId=newFolderId;
    fileEntry=newFileEntry;
  }
  updateAsset(userId,fileEntry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  String version=getNextVersion(fileEntry,majorVersion,serviceContext.getStatus());
  boolean newFileVersion=true;
  try {
    DLFileVersion fileVersion=dlFileVersionLocalService.getLatestFileVersion(groupId,folderId,name);
    if (size == 0) {
      size=fileVersion.getSize();
    }
    if (fileVersion.getStatus() == StatusConstants.DRAFT) {
      updateFileVersion(user,fileVersion,serviceContext.getModifiedDate(now),version,versionDescription,size,serviceContext.getStatus());
      newFileVersion=false;
    }
 else     if (is != null) {
      addFileVersion(user,fileEntry,serviceContext.getModifiedDate(now),version,versionDescription,size,serviceContext.getStatus());
    }
  }
 catch (  NoSuchFileVersionException nsfve) {
    addFileVersion(user,fileEntry,serviceContext.getModifiedDate(now),version,versionDescription,size,serviceContext.getStatus());
  }
  if (serviceContext.getStatus() == StatusConstants.APPROVED) {
    fileEntry.setVersion(version);
  }
  fileEntry.setVersionUserId(user.getUserId());
  fileEntry.setVersionUserName(user.getFullName());
  fileEntry.setModifiedDate(serviceContext.getModifiedDate(now));
  fileEntry.setSize(size);
  fileEntry.setExpandoBridgeAttributes(serviceContext);
  dlFileEntryPersistence.update(fileEntry,false);
  if (fileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    DLFolder folder=dlFolderPersistence.findByPrimaryKey(fileEntry.getFolderId());
    folder.setLastPostDate(fileEntry.getModifiedDate());
    dlFolderPersistence.update(folder,false);
  }
  if (is == null) {
    int fetchFailures=0;
    while (is == null) {
      try {
        is=dlLocalService.getFileAsStream(user.getCompanyId(),fileEntry.getRepositoryId(),name);
      }
 catch (      NoSuchFileException nsfe) {
        fetchFailures++;
        if (PropsValues.DL_HOOK_IMPL.equals(JCRHook.class.getName()) && (fetchFailures < PropsValues.DL_HOOK_JCR_FETCH_MAX_FAILURES)) {
          try {
            Thread.sleep(PropsValues.DL_HOOK_JCR_FETCH_DELAY);
          }
 catch (          InterruptedException ie) {
          }
        }
 else {
          throw nsfe;
        }
      }
    }
  }
  dlLocalService.updateFile(user.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,fileEntry.getGroupId(),fileEntry.getRepositoryId(),name,false,version,sourceFileName,fileEntry.getFileEntryId(),fileEntry.getLuceneProperties(),fileEntry.getModifiedDate(),serviceContext,is);
  fileEntry=updateWorkflowStatus(userId,fileEntry.getFileEntryId(),serviceContext);
  if (newFileVersion && serviceContext.isStartWorkflow()) {
    try {
      WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),groupId,userId,DLFileEntry.class.getName(),fileEntry.getFileEntryId(),fileEntry);
    }
 catch (    Exception e) {
      throw new SystemException(e);
    }
  }
  return fileEntry;
}
