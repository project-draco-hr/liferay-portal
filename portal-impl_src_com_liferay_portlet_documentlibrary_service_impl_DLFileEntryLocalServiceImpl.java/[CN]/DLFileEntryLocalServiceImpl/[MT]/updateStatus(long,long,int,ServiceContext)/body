{
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileEntry fileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
  DLFileVersion latestFileVersion=dlFileVersionLocalService.getLatestFileVersion(fileEntry.getGroupId(),fileEntry.getFolderId(),fileEntry.getName());
  latestFileVersion.setStatus(status);
  latestFileVersion.setStatusByUserId(user.getUserId());
  latestFileVersion.setStatusByUserName(user.getFullName());
  latestFileVersion.setStatusDate(new Date());
  dlFileVersionPersistence.update(latestFileVersion,false);
  if (status == WorkflowConstants.STATUS_APPROVED) {
    if (DLUtil.compareVersions(fileEntry.getVersion(),latestFileVersion.getVersion()) <= 0) {
      fileEntry.setTitle(latestFileVersion.getTitle());
      fileEntry.setDescription(latestFileVersion.getDescription());
      fileEntry.setExtraSettings(latestFileVersion.getExtraSettings());
      fileEntry.setVersion(latestFileVersion.getVersion());
      fileEntry.setVersionUserId(latestFileVersion.getUserId());
      fileEntry.setVersionUserName(latestFileVersion.getUserName());
      fileEntry.setModifiedDate(latestFileVersion.getCreateDate());
      fileEntry.setSize(latestFileVersion.getSize());
      dlFileEntryPersistence.update(fileEntry,false);
    }
    if (fileEntry.getVersion().equals(latestFileVersion.getVersion())) {
      if ((latestFileVersion.getVersion() != DLFileEntryConstants.DEFAULT_VERSION)) {
        AssetEntry draftAssetEntry=null;
        try {
          draftAssetEntry=assetEntryLocalService.getEntry(DLFileEntry.class.getName(),latestFileVersion.getPrimaryKey());
          long[] assetCategoryIds=draftAssetEntry.getCategoryIds();
          String[] assetTagNames=draftAssetEntry.getTagNames();
          assetEntryLocalService.updateEntry(userId,fileEntry.getGroupId(),DLFileEntry.class.getName(),fileEntry.getFileEntryId(),fileEntry.getUuid(),assetCategoryIds,assetTagNames,true,null,null,null,null,draftAssetEntry.getMimeType(),fileEntry.getTitle(),fileEntry.getDescription(),null,null,0,0,null,false);
          assetEntryLocalService.deleteEntry(draftAssetEntry.getEntryId());
        }
 catch (        NoSuchEntryException nsee) {
        }
      }
      assetEntryLocalService.updateVisible(DLFileEntry.class.getName(),fileEntry.getFileEntryId(),true);
    }
    socialActivityLocalService.addUniqueActivity(latestFileVersion.getUserId(),latestFileVersion.getGroupId(),latestFileVersion.getCreateDate(),DLFileEntry.class.getName(),fileEntryId,DLActivityKeys.ADD_FILE_ENTRY,StringPool.BLANK,0);
    Indexer indexer=IndexerRegistryUtil.getIndexer(DLFileEntry.class);
    indexer.reindex(fileEntry);
  }
 else {
    if (fileEntry.getVersion().equals(latestFileVersion.getVersion())) {
      String newVersion=DLFileEntryConstants.DEFAULT_VERSION;
      List<DLFileVersion> approvedFileVersions=dlFileVersionPersistence.findByG_F_N_S(fileEntry.getGroupId(),fileEntry.getFolderId(),fileEntry.getName(),WorkflowConstants.STATUS_APPROVED);
      if (!approvedFileVersions.isEmpty()) {
        newVersion=approvedFileVersions.get(0).getVersion();
      }
      fileEntry.setVersion(newVersion);
      dlFileEntryPersistence.update(fileEntry,false);
    }
    if (Validator.isNull(fileEntry.getVersion())) {
      assetEntryLocalService.updateVisible(DLFileEntry.class.getName(),fileEntry.getFileEntryId(),false);
    }
    if (latestFileVersion.getVersion().equals(DLFileEntryConstants.DEFAULT_VERSION)) {
      Indexer indexer=IndexerRegistryUtil.getIndexer(DLFileEntry.class);
      indexer.delete(fileEntry);
    }
  }
  return fileEntry;
}
