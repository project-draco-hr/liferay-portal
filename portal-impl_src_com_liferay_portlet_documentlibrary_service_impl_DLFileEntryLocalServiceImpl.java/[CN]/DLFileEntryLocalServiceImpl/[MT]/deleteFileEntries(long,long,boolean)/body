{
  final RepositoryEventTrigger repositoryEventTrigger=getFolderRepositoryEventTrigger(groupId,folderId);
  ActionableDynamicQuery actionableDynamicQuery=dlFileEntryLocalService.getActionableDynamicQuery();
  actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      Property folderIdproperty=PropertyFactoryUtil.forName("folderId");
      dynamicQuery.add(folderIdproperty.eq(folderId));
    }
  }
);
  actionableDynamicQuery.setGroupId(groupId);
  actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<DLFileEntry>(){
    @Override public void performAction(    DLFileEntry dlFileEntry) throws PortalException {
      if (includeTrashedEntries || !dlFileEntry.isInTrashExplicitly()) {
        repositoryEventTrigger.trigger(RepositoryEventType.Delete.class,FileEntry.class,new LiferayFileEntry(dlFileEntry));
        dlFileEntryLocalService.deleteFileEntry(dlFileEntry);
      }
    }
  }
);
  actionableDynamicQuery.performActions();
}
