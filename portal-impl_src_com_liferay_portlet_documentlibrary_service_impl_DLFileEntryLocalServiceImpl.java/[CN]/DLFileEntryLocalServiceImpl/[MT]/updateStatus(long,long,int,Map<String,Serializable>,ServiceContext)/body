{
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileVersion dlFileVersion=dlFileVersionPersistence.findByPrimaryKey(fileVersionId);
  int oldStatus=dlFileVersion.getStatus();
  int oldDLFileVersionStatus=WorkflowConstants.STATUS_ANY;
  List<ObjectValuePair<Long,Integer>> dlFileVersionStatusOVPs=new ArrayList<ObjectValuePair<Long,Integer>>();
  List<DLFileVersion> dlFileVersions=(List<DLFileVersion>)workflowContext.get("dlFileVersions");
  if ((dlFileVersions != null) && !dlFileVersions.isEmpty()) {
    DLFileVersion oldDLFileVersion=dlFileVersions.get(0);
    oldDLFileVersionStatus=oldDLFileVersion.getStatus();
    dlFileVersionStatusOVPs=getDlFileVersionStatuses(dlFileVersions);
  }
  dlFileVersion.setStatus(status);
  dlFileVersion.setStatusByUserId(user.getUserId());
  dlFileVersion.setStatusByUserName(user.getFullName());
  dlFileVersion.setStatusDate(new Date());
  dlFileVersionPersistence.update(dlFileVersion);
  DLFileEntry dlFileEntry=dlFileEntryPersistence.findByPrimaryKey(dlFileVersion.getFileEntryId());
  if (status == WorkflowConstants.STATUS_APPROVED) {
    if (DLUtil.compareVersions(dlFileEntry.getVersion(),dlFileVersion.getVersion()) <= 0) {
      dlFileEntry.setExtension(dlFileVersion.getExtension());
      dlFileEntry.setMimeType(dlFileVersion.getMimeType());
      dlFileEntry.setTitle(dlFileVersion.getTitle());
      dlFileEntry.setDescription(dlFileVersion.getDescription());
      dlFileEntry.setExtraSettings(dlFileVersion.getExtraSettings());
      dlFileEntry.setFileEntryTypeId(dlFileVersion.getFileEntryTypeId());
      dlFileEntry.setVersion(dlFileVersion.getVersion());
      dlFileEntry.setModifiedDate(dlFileVersion.getCreateDate());
      dlFileEntry.setSize(dlFileVersion.getSize());
      dlFileEntryPersistence.update(dlFileEntry);
    }
  }
 else {
    if ((status != WorkflowConstants.STATUS_IN_TRASH) && dlFileEntry.getVersion().equals(dlFileVersion.getVersion())) {
      String newVersion=DLFileEntryConstants.VERSION_DEFAULT;
      List<DLFileVersion> approvedFileVersions=dlFileVersionPersistence.findByF_S(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_APPROVED);
      if (!approvedFileVersions.isEmpty()) {
        newVersion=approvedFileVersions.get(0).getVersion();
      }
      dlFileEntry.setVersion(newVersion);
      dlFileEntryPersistence.update(dlFileEntry);
    }
    if (dlFileVersion.getVersion().equals(DLFileEntryConstants.VERSION_DEFAULT)) {
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
      indexer.delete(dlFileEntry);
    }
  }
  if (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {
    List<TrashVersion> trashVersions=(List<TrashVersion>)workflowContext.get("trashVersions");
    for (    TrashVersion trashVersion : trashVersions) {
      DLFileVersion trashDLFileVersion=dlFileVersionPersistence.findByPrimaryKey(trashVersion.getClassPK());
      trashDLFileVersion.setStatus(trashVersion.getStatus());
      dlFileVersionPersistence.update(trashDLFileVersion);
    }
    trashEntryLocalService.deleteEntry(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId());
    Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
    indexer.delete(dlFileEntry);
  }
 else   if (status == WorkflowConstants.STATUS_IN_TRASH) {
    for (    DLFileVersion curDLFileVersion : dlFileVersions) {
      curDLFileVersion.setStatus(WorkflowConstants.STATUS_IN_TRASH);
      dlFileVersionPersistence.update(curDLFileVersion);
    }
    UnicodeProperties typeSettingsProperties=new UnicodeProperties();
    typeSettingsProperties.put("title",dlFileEntry.getTitle());
    trashEntryLocalService.addTrashEntry(userId,dlFileEntry.getGroupId(),DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),oldDLFileVersionStatus,dlFileVersionStatusOVPs,typeSettingsProperties);
  }
  dlAppHelperLocalService.updateStatus(userId,new LiferayFileEntry(dlFileEntry),new LiferayFileVersion(dlFileVersion),oldStatus,status,workflowContext,serviceContext);
  if (((status == WorkflowConstants.STATUS_APPROVED) || (status == WorkflowConstants.STATUS_IN_TRASH) || (oldStatus == WorkflowConstants.STATUS_IN_TRASH)) && ((serviceContext == null) || serviceContext.isIndexingEnabled())) {
    reindex(dlFileEntry);
  }
  return dlFileEntry;
}
