{
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileVersion dlFileVersion=dlFileVersionPersistence.findByPrimaryKey(fileVersionId);
  int oldStatus=dlFileVersion.getStatus();
  dlFileVersion.setStatus(status);
  dlFileVersion.setStatusByUserId(user.getUserId());
  dlFileVersion.setStatusByUserName(user.getFullName());
  dlFileVersion.setStatusDate(new Date());
  dlFileVersionPersistence.update(dlFileVersion,false);
  DLFileEntry dlFileEntry=dlFileEntryPersistence.findByPrimaryKey(dlFileVersion.getFileEntryId());
  if (status == WorkflowConstants.STATUS_APPROVED) {
    if (DLUtil.compareVersions(dlFileEntry.getVersion(),dlFileVersion.getVersion()) <= 0) {
      dlFileEntry.setExtension(dlFileVersion.getExtension());
      dlFileEntry.setTitle(dlFileVersion.getTitle());
      dlFileEntry.setDescription(dlFileVersion.getDescription());
      dlFileEntry.setExtraSettings(dlFileVersion.getExtraSettings());
      dlFileEntry.setFileEntryTypeId(dlFileVersion.getFileEntryTypeId());
      dlFileEntry.setVersion(dlFileVersion.getVersion());
      dlFileEntry.setVersionUserId(dlFileVersion.getUserId());
      dlFileEntry.setVersionUserName(dlFileVersion.getUserName());
      dlFileEntry.setModifiedDate(dlFileVersion.getCreateDate());
      dlFileEntry.setSize(dlFileVersion.getSize());
      dlFileEntryPersistence.update(dlFileEntry,false);
    }
  }
 else {
    if (dlFileEntry.getVersion().equals(dlFileVersion.getVersion())) {
      String newVersion=DLFileEntryConstants.VERSION_DEFAULT;
      List<DLFileVersion> approvedFileVersions=dlFileVersionPersistence.findByF_S(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_APPROVED);
      if (!approvedFileVersions.isEmpty()) {
        newVersion=approvedFileVersions.get(0).getVersion();
      }
      dlFileEntry.setVersion(newVersion);
      dlFileEntryPersistence.update(dlFileEntry,false);
    }
    if (dlFileVersion.getVersion().equals(DLFileEntryConstants.VERSION_DEFAULT)) {
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
      indexer.delete(dlFileEntry);
    }
  }
  if (oldStatus == WorkflowConstants.STATUS_IN_TRASH) {
    List<DLFileVersion> trashedFileVersions=dlFileVersionPersistence.findByF_S(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_IN_TRASH);
    for (    DLFileVersion trashedFileVersion : trashedFileVersions) {
      trashedFileVersion.setStatus(WorkflowConstants.STATUS_APPROVED);
      dlFileVersionPersistence.update(trashedFileVersion,false);
    }
  }
 else   if (status == WorkflowConstants.STATUS_IN_TRASH) {
    List<DLFileVersion> approvedFileVersions=dlFileVersionPersistence.findByF_S(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_APPROVED);
    for (    DLFileVersion approvedFileVersion : approvedFileVersions) {
      approvedFileVersion.setStatus(WorkflowConstants.STATUS_IN_TRASH);
      dlFileVersionPersistence.update(approvedFileVersion,false);
    }
  }
  dlAppHelperLocalService.updateStatus(userId,new LiferayFileEntry(dlFileEntry),new LiferayFileVersion(dlFileVersion),oldStatus,status,workflowContext);
  if (status == WorkflowConstants.STATUS_APPROVED) {
    reindex(dlFileEntry);
  }
  return dlFileEntry;
}
