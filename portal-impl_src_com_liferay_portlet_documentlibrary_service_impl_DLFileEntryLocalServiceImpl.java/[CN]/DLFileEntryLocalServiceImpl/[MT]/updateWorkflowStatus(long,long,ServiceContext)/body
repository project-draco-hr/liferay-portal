{
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileVersion fileVersion=dlFileVersionPersistence.findByPrimaryKey(fileVersionId);
  fileVersion.setStatus(serviceContext.getStatus());
  fileVersion.setStatusByUserId(user.getUserId());
  fileVersion.setStatusByUserName(user.getFullName());
  fileVersion.setStatusDate(new Date());
  dlFileVersionPersistence.update(fileVersion,false);
  DLFileEntry fileEntry=dlFileEntryPersistence.findByG_F_N(fileVersion.getGroupId(),fileVersion.getFolderId(),fileVersion.getName());
  if (fileVersion.isApproved() && (DLUtil.compareVersions(fileEntry.getVersion(),fileVersion.getVersion()) < 0)) {
    fileEntry.setVersion(fileVersion.getVersion());
    dlFileEntryPersistence.update(fileEntry,false);
  }
 else   if (!fileVersion.isApproved() && (DLUtil.compareVersions(fileEntry.getVersion(),fileVersion.getVersion()) == 0)) {
    String newVersion=DLFileEntryConstants.DEFAULT_VERSION;
    if (DLUtil.compareVersions(fileVersion.getVersion(),newVersion) > 1) {
      List<DLFileVersion> approvedFileVersions=dlFileVersionPersistence.findByG_F_N_S(fileEntry.getGroupId(),fileEntry.getFolderId(),fileEntry.getName(),StatusConstants.APPROVED);
      if (!approvedFileVersions.isEmpty()) {
        newVersion=approvedFileVersions.get(0).getVersion();
      }
    }
    fileEntry.setVersion(newVersion);
    dlFileEntryPersistence.update(fileEntry,false);
  }
  if (fileVersion.isApproved() && (DLUtil.compareVersions(fileEntry.getVersion(),fileVersion.getVersion()) == 0)) {
    assetEntryLocalService.updateVisible(DLFileEntry.class.getName(),fileEntry.getFileEntryId(),true);
  }
 else   if (Validator.isNull(fileEntry.getVersion())) {
    assetEntryLocalService.updateVisible(DLFileEntry.class.getName(),fileEntry.getFileEntryId(),false);
  }
  if (fileVersion.isApproved() && (DLUtil.compareVersions(fileEntry.getVersion(),fileVersion.getVersion()) == 0)) {
    if (fileVersion.getVersion().equals(DLFileEntryConstants.DEFAULT_VERSION)) {
      socialActivityLocalService.addUniqueActivity(fileVersion.getUserId(),fileVersion.getGroupId(),fileVersion.getCreateDate(),DLFileEntry.class.getName(),fileEntry.getFileEntryId(),DLActivityKeys.ADD_FILE_ENTRY,StringPool.BLANK,0);
    }
 else {
      socialActivityLocalService.addActivity(fileVersion.getUserId(),fileVersion.getGroupId(),fileVersion.getCreateDate(),DLFileEntry.class.getName(),fileEntry.getFileEntryId(),DLActivityKeys.UPDATE_FILE_ENTRY,StringPool.BLANK,0);
    }
  }
  Indexer indexer=IndexerRegistryUtil.getIndexer(DLFileEntry.class);
  if (fileVersion.isApproved() && (DLUtil.compareVersions(fileEntry.getVersion(),fileVersion.getVersion()) == 0)) {
    indexer.reindex(fileEntry);
  }
 else   if (Validator.isNull(fileEntry.getVersion())) {
    indexer.delete(fileEntry);
  }
  return fileEntry;
}
