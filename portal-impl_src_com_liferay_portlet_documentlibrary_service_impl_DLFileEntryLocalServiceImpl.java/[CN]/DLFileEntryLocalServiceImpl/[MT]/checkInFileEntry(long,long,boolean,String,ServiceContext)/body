{
  boolean hasLock=hasFileEntryLock(userId,fileEntryId);
  boolean isCheckedOut=isFileEntryCheckedOut(fileEntryId);
  if (!isCheckedOut) {
    return;
  }
  if (!hasLock) {
    lockFileEntry(userId,fileEntryId);
  }
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileEntry dlFileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
  String version=getNextVersion(dlFileEntry,majorVersion,serviceContext.getWorkflowAction());
  DLFileVersion dlFileVersion=dlFileVersionLocalService.getLatestFileVersion(fileEntryId,false);
  dlFileVersion.setVersion(version);
  dlFileVersion.setChangeLog(changeLog);
  dlFileVersionPersistence.update(dlFileVersion,false);
  updateAsset(userId,dlFileEntry,dlFileVersion,dlFileVersion.getFileVersionId());
  if (dlFileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    MessageBusUtil.sendMessage(DestinationNames.DOCUMENT_LIBRARY_FOLDER_LAST_POST_DATE,dlFileEntry);
  }
  DLStoreUtil.updateFileVersion(user.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,dlFileEntry.getGroupId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),DLFileEntryConstants.PRIVATE_WORKING_COPY_VERSION,version,dlFileEntry.getTitle(),serviceContext);
  index(dlFileEntry,serviceContext);
  if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_PUBLISH) {
    WorkflowHandlerRegistryUtil.startWorkflowInstance(user.getCompanyId(),dlFileEntry.getGroupId(),userId,DLFileEntry.class.getName(),dlFileVersion.getFileVersionId(),dlFileVersion,serviceContext);
  }
  lockLocalService.unlock(DLFileEntry.class.getName(),fileEntryId);
}
