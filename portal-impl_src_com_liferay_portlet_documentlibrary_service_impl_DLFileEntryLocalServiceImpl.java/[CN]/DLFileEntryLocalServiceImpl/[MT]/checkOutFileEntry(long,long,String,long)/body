{
  DLFileEntry dlFileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
  boolean hasLock=lockLocalService.hasLock(userId,DLFileEntry.class.getName(),fileEntryId);
  if (hasLock) {
    return dlFileEntry;
  }
 else   if (!hasLock) {
    if ((expirationTime <= 0) || (expirationTime > DLFileEntryImpl.LOCK_EXPIRATION_TIME)) {
      expirationTime=DLFileEntryImpl.LOCK_EXPIRATION_TIME;
    }
    lockLocalService.lock(userId,DLFileEntry.class.getName(),fileEntryId,owner,false,expirationTime);
  }
  User user=userPersistence.findByPrimaryKey(userId);
  dlFileEntryPersistence.update(dlFileEntry,false);
  DLFileVersion dlFileVersion=getLatestFileVersion(fileEntryId);
  if (!dlFileVersion.equals(DLFileEntryConstants.PRIVATE_WORKING_COPY_VERSION)) {
    String version=DLFileEntryConstants.PRIVATE_WORKING_COPY_VERSION;
    dlFileVersion=addFileVersion(user,dlFileEntry,new Date(),dlFileVersion.getExtension(),dlFileVersion.getMimeType(),dlFileVersion.getTitle(),dlFileVersion.getDescription(),dlFileVersion.getChangeLog(),dlFileVersion.getExtraSettings(),dlFileVersion.getDocumentTypeId(),version,dlFileVersion.getSize(),WorkflowConstants.STATUS_DRAFT,new ServiceContext());
    File file=getFile(dlFileEntry);
    InputStream is;
    try {
      is=new FileInputStream(file);
    }
 catch (    FileNotFoundException fnfe) {
      throw new NoSuchFileException(fnfe);
    }
    try {
      dlLocalService.deleteFile(user.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),version);
    }
 catch (    NoSuchFileException nsfe) {
    }
    dlLocalService.updateFile(user.getCompanyId(),PortletKeys.DOCUMENT_LIBRARY,dlFileEntry.getGroupId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),dlFileEntry.getExtension(),false,version,dlFileVersion.getTitle(),dlFileEntry.getFileEntryId(),dlFileEntry.getLuceneProperties(),dlFileEntry.getModifiedDate(),new ServiceContext(),is);
  }
  updateAsset(userId,dlFileEntry,dlFileVersion,null,null,null);
  return dlFileEntry;
}
