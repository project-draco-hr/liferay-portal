{
  final RepositoryEventTrigger repositoryEventTrigger=RepositoryUtil.getRepositoryEventTrigger(repositoryId);
  int total=dlFileEntryPersistence.countByR_F(repositoryId,folderId);
  final IntervalActionProcessor<Void> intervalActionProcessor=new IntervalActionProcessor<>(total);
  intervalActionProcessor.setPerformIntervalActionMethod(new IntervalActionProcessor.PerformIntervalActionMethod<Void>(){
    @Override public Void performIntervalAction(    int start,    int end) throws PortalException {
      List<DLFileEntry> dlFileEntries=dlFileEntryPersistence.findByR_F(repositoryId,folderId,start,end);
      for (      DLFileEntry dlFileEntry : dlFileEntries) {
        if (includeTrashedEntries || !dlFileEntry.isInTrashExplicitly()) {
          repositoryEventTrigger.trigger(RepositoryEventType.Delete.class,FileEntry.class,new LiferayFileEntry(dlFileEntry));
          dlFileEntryLocalService.deleteFileEntry(dlFileEntry);
        }
 else {
          intervalActionProcessor.incrementStart();
        }
      }
      return null;
    }
  }
);
  intervalActionProcessor.performIntervalActions();
}
