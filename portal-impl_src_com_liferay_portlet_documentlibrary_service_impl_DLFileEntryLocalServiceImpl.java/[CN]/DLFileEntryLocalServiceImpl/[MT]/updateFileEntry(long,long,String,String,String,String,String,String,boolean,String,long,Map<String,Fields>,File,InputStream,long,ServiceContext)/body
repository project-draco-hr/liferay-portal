{
  User user=userPersistence.findByPrimaryKey(userId);
  DLFileEntry dlFileEntry=dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
  boolean checkedOut=dlFileEntry.isCheckedOut();
  DLFileVersion dlFileVersion=dlFileVersionLocalService.getLatestFileVersion(fileEntryId,!checkedOut);
  boolean autoCheckIn=!checkedOut && dlFileVersion.isApproved();
  if (autoCheckIn) {
    dlFileEntry=checkOutFileEntry(userId,fileEntryId);
  }
 else   if (!checkedOut) {
    lockFileEntry(userId,fileEntryId);
  }
  if (!hasFileEntryLock(userId,fileEntryId)) {
    lockFileEntry(userId,fileEntryId);
  }
  if (checkedOut || autoCheckIn) {
    dlFileVersion=dlFileVersionLocalService.getLatestFileVersion(fileEntryId,false);
  }
  try {
    if (Validator.isNull(extension)) {
      extension=dlFileEntry.getExtension();
    }
    if (Validator.isNull(mimeType)) {
      mimeType=dlFileEntry.getMimeType();
    }
    if (Validator.isNull(title)) {
      title=sourceFileName;
      if (Validator.isNull(title)) {
        title=dlFileEntry.getTitle();
      }
    }
    Date now=new Date();
    validateFile(dlFileEntry.getGroupId(),dlFileEntry.getFolderId(),dlFileEntry.getFileEntryId(),extension,title,sourceFileName,file,is);
    String version=dlFileVersion.getVersion();
    if (size == 0) {
      size=dlFileVersion.getSize();
    }
    updateFileVersion(user,dlFileVersion,sourceFileName,extension,mimeType,title,description,changeLog,extraSettings,fileEntryTypeId,fieldsMap,version,size,dlFileVersion.getStatus(),serviceContext.getModifiedDate(now),serviceContext);
    dlAppHelperLocalService.updateAsset(userId,new LiferayFileEntry(dlFileEntry),new LiferayFileVersion(dlFileVersion),serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
    if ((file != null) || (is != null)) {
      try {
        DLStoreUtil.deleteFile(user.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),version);
      }
 catch (      NoSuchFileException nsfe) {
      }
      if (file != null) {
        DLStoreUtil.updateFile(user.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),dlFileEntry.getExtension(),false,version,sourceFileName,file);
      }
 else {
        DLStoreUtil.updateFile(user.getCompanyId(),dlFileEntry.getDataRepositoryId(),dlFileEntry.getName(),dlFileEntry.getExtension(),false,version,sourceFileName,is);
      }
    }
    if (autoCheckIn) {
      checkInFileEntry(userId,fileEntryId,majorVersion,changeLog,serviceContext);
    }
 else     if (serviceContext.getWorkflowAction() == WorkflowConstants.ACTION_PUBLISH) {
      String syncEvent=DLSyncConstants.EVENT_UPDATE;
      if (dlFileVersion.getVersion().equals(DLFileEntryConstants.VERSION_DEFAULT)) {
        syncEvent=DLSyncConstants.EVENT_ADD;
      }
      startWorkflowInstance(userId,serviceContext,dlFileVersion,syncEvent);
    }
  }
 catch (  PortalException pe) {
    if (autoCheckIn) {
      cancelCheckOut(userId,fileEntryId);
    }
    throw pe;
  }
catch (  SystemException se) {
    if (autoCheckIn) {
      cancelCheckOut(userId,fileEntryId);
    }
    throw se;
  }
 finally {
    if (!autoCheckIn && !checkedOut) {
      unlockFileEntry(fileEntryId);
    }
  }
  return dlFileEntryPersistence.findByPrimaryKey(fileEntryId);
}
