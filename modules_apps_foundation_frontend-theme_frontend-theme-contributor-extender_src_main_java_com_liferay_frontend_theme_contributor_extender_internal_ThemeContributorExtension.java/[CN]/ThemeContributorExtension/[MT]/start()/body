{
  final BundleContext bundleContext=_bundle.getBundleContext();
  String filter="(&(objectClass=" + ServletContext.class.getName() + ")(osgi.web.symbolicname="+ _bundle.getSymbolicName()+ "))";
  final Dictionary<String,Object> properties=new Hashtable<>();
  properties.put("service.ranking",_weight);
  _serviceTracker=ServiceTrackerFactory.open(bundleContext,filter,new ServiceTrackerCustomizer<ServletContext,Collection<ServiceRegistration<?>>>(){
    @Override public Collection<ServiceRegistration<?>> addingService(    ServiceReference<ServletContext> serviceReference){
      Collection<ServiceRegistration<?>> serviceRegistrations=new ArrayList<>();
      ServletContext servletContext=bundleContext.getService(serviceReference);
      serviceRegistrations.add(bundleContext.registerService(PortalWebResources.class.getName(),new ThemeContributorPortalWebResources(servletContext),null));
      String contextPath=servletContext.getContextPath();
      _bundleWebResources.setServletContextPath(contextPath);
      serviceRegistrations.add(bundleContext.registerService(BundleWebResources.class,_bundleWebResources,properties));
      return serviceRegistrations;
    }
    @Override public void modifiedService(    ServiceReference<ServletContext> serviceReference,    Collection<ServiceRegistration<?>> service){
      removedService(serviceReference,service);
      addingService(serviceReference);
    }
    @Override public void removedService(    ServiceReference<ServletContext> serviceReference,    Collection<ServiceRegistration<?>> serviceRegistrations){
      for (      ServiceRegistration<?> serviceRegistration : serviceRegistrations) {
        serviceRegistration.unregister();
      }
      bundleContext.ungetService(serviceReference);
    }
  }
);
}
