{
  if (!InlineSQLHelperUtil.isEnabled()) {
    return countByT_N(tableId,names);
  }
  StringBundler query=new StringBundler();
  query.append(_FILTER_SQL_COUNT_EXPANDOCOLUMN_WHERE);
  query.append(_FINDER_COLUMN_T_N_TABLEID_2);
  if ((names == null) || (names.length > 0)) {
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < names.length; i++) {
      String name=names[i];
      if (name == null) {
        query.append(_FINDER_COLUMN_T_N_NAME_1);
      }
 else       if (name.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_T_N_NAME_3);
      }
 else {
        query.append(_FINDER_COLUMN_T_N_NAME_2);
      }
      if ((i + 1) < names.length) {
        query.append(WHERE_OR);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
  }
  query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),ExpandoColumn.class.getName(),_FILTER_ENTITY_TABLE_FILTER_PK_COLUMN);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,com.liferay.portal.kernel.dao.orm.Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(tableId);
    if (names != null) {
      qPos.add(names);
    }
    Long count=(Long)q.uniqueResult();
    return count.intValue();
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
