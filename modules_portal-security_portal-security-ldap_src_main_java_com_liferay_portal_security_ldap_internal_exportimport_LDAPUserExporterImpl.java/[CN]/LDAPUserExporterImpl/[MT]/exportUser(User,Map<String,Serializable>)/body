{
  if (user.isDefaultUser() || (user.getStatus() != WorkflowConstants.STATUS_APPROVED)) {
    return;
  }
  long companyId=user.getCompanyId();
  if (!_ldapSettings.isExportEnabled(companyId)) {
    return;
  }
  long ldapServerId=_portalLDAP.getLdapServerId(companyId,user.getScreenName(),user.getEmailAddress());
  LdapContext ldapContext=_portalLDAP.getContext(ldapServerId,companyId);
  try {
    if (ldapContext == null) {
      return;
    }
    Properties userMappings=_ldapSettings.getUserMappings(ldapServerId,companyId);
    Properties userExpandoMappings=_ldapSettings.getUserExpandoMappings(ldapServerId,companyId);
    Binding binding=_portalLDAP.getUser(ldapServerId,user.getCompanyId(),user.getScreenName(),user.getEmailAddress(),true);
    if (binding == null) {
      binding=addUser(ldapServerId,ldapContext,user,userMappings);
    }
 else {
      Attributes attributes=_portalLDAP.getUserAttributes(ldapServerId,companyId,ldapContext,_portalLDAP.getNameInNamespace(ldapServerId,companyId,binding));
      String modifyTimestamp=LDAPUtil.getAttributeString(attributes,"modifyTimestamp");
      if (Validator.isNotNull(modifyTimestamp)) {
        Date modifiedDate=LDAPUtil.parseDate(modifyTimestamp);
        if (modifiedDate.equals(user.getModifiedDate())) {
          if (_log.isDebugEnabled()) {
            _log.debug("Skipping user " + user.getEmailAddress() + " because he is already synchronized");
          }
          return;
        }
      }
    }
    Name name=new CompositeName();
    name.add(_portalLDAP.getNameInNamespace(ldapServerId,companyId,binding));
    Modifications modifications=_portalToLDAPConverter.getLDAPUserModifications(user,userExpandoAttributes,userMappings,userExpandoMappings);
    if (modifications == null) {
      return;
    }
    ModificationItem[] modificationItems=modifications.getItems();
    ldapContext.modifyAttributes(name,modificationItems);
    if (!_ldapSettings.isExportGroupEnabled(companyId)) {
      return;
    }
    List<UserGroup> userGroups=_userGroupLocalService.getUserUserGroups(user.getUserId());
    for (    UserGroup userGroup : userGroups) {
      exportUser(user.getUserId(),userGroup.getUserGroupId(),UserOperation.ADD);
    }
    Modifications groupModifications=_portalToLDAPConverter.getLDAPUserGroupModifications(ldapServerId,userGroups,user,userMappings);
    ModificationItem[] groupModificationItems=groupModifications.getItems();
    if (groupModificationItems.length > 0) {
      ldapContext.modifyAttributes(name,groupModificationItems);
    }
  }
 catch (  NameNotFoundException nnfe) {
    LDAPAuthConfiguration ldapAuthConfiguration=_ldapAuthConfigurationProvider.getConfiguration(companyId);
    if (ldapAuthConfiguration.required()) {
      throw nnfe;
    }
    _log.error(nnfe,nnfe);
  }
 finally {
    if (ldapContext != null) {
      ldapContext.close();
    }
  }
}
