{
  String fileContentKey=path.concat(StringPool.QUESTION).concat(minifierType);
  FileContentBag fileContentBag=(FileContentBag)_fileContentBagCache.get(fileContentKey);
  if ((fileContentBag != null) && !PropsValues.COMBO_CHECK_TIMESTAMP) {
    return fileContentBag._fileContent;
  }
  File file=getFile(path);
  if ((fileContentBag != null) && PropsValues.COMBO_CHECK_TIMESTAMP) {
    long elapsedTime=System.currentTimeMillis() - fileContentBag._lastModified;
    if ((file != null) && (elapsedTime <= PropsValues.COMBO_CHECK_TIMESTAMP_INTERVAL) && (file.lastModified() == fileContentBag._lastModified)) {
      return fileContentBag._fileContent;
    }
 else {
      _fileContentBagCache.remove(fileContentKey);
    }
  }
  if (file == null) {
    fileContentBag=_EMPTY_FILE_CONTENT_BAG;
  }
 else {
    String stringFileContent=FileUtil.read(file);
    if (!StringUtil.endsWith(path,_CSS_MINIFIED_SUFFIX) && !StringUtil.endsWith(path,_JAVASCRIPT_MINIFIED_SUFFIX)) {
      if (minifierType.equals("css")) {
        String cssRealPath=file.getAbsolutePath();
        try {
          stringFileContent=DynamicCSSUtil.parseSass(request,cssRealPath,stringFileContent);
        }
 catch (        Exception e) {
          _log.error("Unable to parse SASS on CSS " + cssRealPath,e);
          if (_log.isDebugEnabled()) {
            _log.debug(stringFileContent);
          }
          response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_NO_CACHE_VALUE);
        }
        stringFileContent=MinifierUtil.minifyCss(stringFileContent);
      }
 else       if (minifierType.equals("js")) {
        stringFileContent=MinifierUtil.minifyJavaScript(stringFileContent);
      }
    }
    fileContentBag=new FileContentBag(stringFileContent.getBytes(StringPool.UTF8),file.lastModified());
  }
  if (PropsValues.COMBO_CHECK_TIMESTAMP) {
    int timeToLive=(int)(PropsValues.COMBO_CHECK_TIMESTAMP_INTERVAL / Time.SECOND);
    _fileContentBagCache.put(fileContentKey,fileContentBag,timeToLive);
  }
  return fileContentBag._fileContent;
}
