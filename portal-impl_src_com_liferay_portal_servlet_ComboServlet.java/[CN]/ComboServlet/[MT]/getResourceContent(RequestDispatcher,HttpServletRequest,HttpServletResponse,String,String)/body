{
  String resourcePath=getResourcePath(modulePath);
  String portletId=getModulePortletId(modulePath);
  Portlet portlet=PortletLocalServiceUtil.getPortletById(portletId);
  if (!resourcePath.startsWith(portlet.getContextPath())) {
    resourcePath=portlet.getContextPath() + resourcePath;
  }
  String fileContentKey=resourcePath.concat(StringPool.QUESTION).concat(minifierType);
  FileContentBag fileContentBag=_fileContentBagPortalCache.get(fileContentKey);
  if ((fileContentBag != null) && !PropsValues.COMBO_CHECK_TIMESTAMP) {
    return fileContentBag._fileContent;
  }
  if ((fileContentBag != null) && PropsValues.COMBO_CHECK_TIMESTAMP) {
    long elapsedTime=System.currentTimeMillis() - fileContentBag._lastModified;
    if ((requestDispatcher != null) && (elapsedTime <= PropsValues.COMBO_CHECK_TIMESTAMP_INTERVAL) && (RequestDispatcherUtil.getLastModifiedTime(requestDispatcher,request,response) == fileContentBag._lastModified)) {
      return fileContentBag._fileContent;
    }
    _fileContentBagPortalCache.remove(fileContentKey);
  }
  if (requestDispatcher == null) {
    fileContentBag=_EMPTY_FILE_CONTENT_BAG;
  }
 else {
    ObjectValuePair<String,Long> objectValuePair=RequestDispatcherUtil.getContentAndLastModifiedTime(requestDispatcher,request,response);
    String stringFileContent=objectValuePair.getKey();
    if (!StringUtil.endsWith(resourcePath,_CSS_MINIFIED_SUFFIX) && !StringUtil.endsWith(resourcePath,_JAVASCRIPT_MINIFIED_SUFFIX)) {
      if (minifierType.equals("css")) {
        try {
          stringFileContent=DynamicCSSUtil.replaceToken(getServletContext(),request,stringFileContent);
        }
 catch (        Exception e) {
          _log.error("Unable to replace tokens in CSS " + resourcePath,e);
          if (_log.isDebugEnabled()) {
            _log.debug(stringFileContent);
          }
          response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_NO_CACHE_VALUE);
        }
        String baseURL=StringPool.BLANK;
        int slashIndex=resourcePath.lastIndexOf(CharPool.SLASH);
        if (slashIndex != -1) {
          baseURL=resourcePath.substring(0,slashIndex + 1);
        }
        stringFileContent=AggregateUtil.updateRelativeURLs(stringFileContent,baseURL);
        stringFileContent=MinifierUtil.minifyCss(stringFileContent);
      }
 else       if (minifierType.equals("js")) {
        stringFileContent=MinifierUtil.minifyJavaScript(resourcePath,stringFileContent);
      }
    }
    fileContentBag=new FileContentBag(stringFileContent.getBytes(StringPool.UTF8),objectValuePair.getValue());
  }
  if (PropsValues.COMBO_CHECK_TIMESTAMP) {
    int timeToLive=(int)(PropsValues.COMBO_CHECK_TIMESTAMP_INTERVAL / Time.SECOND);
    _fileContentBagPortalCache.put(fileContentKey,fileContentBag,timeToLive);
  }
  return fileContentBag._fileContent;
}
