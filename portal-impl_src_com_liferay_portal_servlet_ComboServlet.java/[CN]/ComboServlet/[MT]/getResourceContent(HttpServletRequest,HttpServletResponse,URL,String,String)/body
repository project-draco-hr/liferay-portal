{
  String fileContentKey=resourcePath.concat(StringPool.QUESTION).concat(minifierType);
  FileContentBag fileContentBag=(FileContentBag)_fileContentBagPortalCache.get(fileContentKey);
  if ((fileContentBag != null) && !PropsValues.COMBO_CHECK_TIMESTAMP) {
    return fileContentBag._fileContent;
  }
  URLConnection urlConnection=null;
  if (resourceURL != null) {
    urlConnection=resourceURL.openConnection();
  }
  if ((fileContentBag != null) && PropsValues.COMBO_CHECK_TIMESTAMP) {
    long elapsedTime=System.currentTimeMillis() - fileContentBag._lastModified;
    if ((urlConnection != null) && (elapsedTime <= PropsValues.COMBO_CHECK_TIMESTAMP_INTERVAL) && (urlConnection.getLastModified() == fileContentBag._lastModified)) {
      return fileContentBag._fileContent;
    }
    _fileContentBagPortalCache.remove(fileContentKey);
  }
  if (resourceURL == null) {
    fileContentBag=_EMPTY_FILE_CONTENT_BAG;
  }
 else {
    String stringFileContent=StringUtil.read(urlConnection.getInputStream());
    if (!StringUtil.endsWith(resourcePath,_CSS_MINIFIED_SUFFIX) && !StringUtil.endsWith(resourcePath,_JAVASCRIPT_MINIFIED_SUFFIX)) {
      if (minifierType.equals("css")) {
        try {
          stringFileContent=DynamicCSSUtil.parseSass(request,getServletContext(),resourcePath,stringFileContent);
        }
 catch (        Exception e) {
          _log.error("Unable to parse SASS on CSS " + resourceURL.getPath(),e);
          if (_log.isDebugEnabled()) {
            _log.debug(stringFileContent);
          }
          response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_NO_CACHE_VALUE);
        }
        stringFileContent=MinifierUtil.minifyCss(stringFileContent);
      }
 else       if (minifierType.equals("js")) {
        stringFileContent=MinifierUtil.minifyJavaScript(stringFileContent);
      }
    }
    fileContentBag=new FileContentBag(stringFileContent.getBytes(StringPool.UTF8),urlConnection.getLastModified());
  }
  if (PropsValues.COMBO_CHECK_TIMESTAMP) {
    int timeToLive=(int)(PropsValues.COMBO_CHECK_TIMESTAMP_INTERVAL / Time.SECOND);
    _fileContentBagPortalCache.put(fileContentKey,fileContentBag,timeToLive);
  }
  return fileContentBag._fileContent;
}
