{
  Set<String> modulePathsSet=new LinkedHashSet<>();
  Map<String,String[]> parameterMap=HttpUtil.getParameterMap(request.getQueryString());
  Enumeration<String> enu=Collections.enumeration(parameterMap.keySet());
  while (enu.hasMoreElements()) {
    String name=enu.nextElement();
    if (_protectedParameters.contains(name)) {
      continue;
    }
    name=HttpUtil.decodePath(name);
    ServletContext servletContext=getServletContext();
    String contextPath=servletContext.getContextPath();
    if (name.startsWith(contextPath)) {
      name=name.replaceFirst(contextPath,StringPool.BLANK);
    }
    String pathProxy=PortalUtil.getPathProxy();
    if (name.startsWith(pathProxy)) {
      name=name.replaceFirst(pathProxy,StringPool.BLANK);
    }
    modulePathsSet.add(name);
  }
  if (modulePathsSet.isEmpty()) {
    PortalUtil.sendError(HttpServletResponse.SC_NOT_FOUND,new NoSuchLayoutException("Query string translates to an empty module paths set"),request,response);
    return;
  }
  String[] modulePaths=modulePathsSet.toArray(new String[modulePathsSet.size()]);
  String firstModulePath=modulePaths[0];
  String resourcePath=getResourcePath(firstModulePath);
  String extension=FileUtil.getExtension(resourcePath);
  String minifierType=ParamUtil.getString(request,"minifierType");
  if (Validator.isNull(minifierType)) {
    minifierType="js";
    if (StringUtil.equalsIgnoreCase(extension,_CSS_EXTENSION)) {
      minifierType="css";
    }
  }
  if (!minifierType.equals("css") && !minifierType.equals("js")) {
    minifierType="js";
  }
  String modulePathsString=null;
  byte[][] bytesArray=null;
  if (!PropsValues.COMBO_CHECK_TIMESTAMP) {
    modulePathsString=Arrays.toString(modulePaths);
    modulePathsString+=StringPool.POUND + LanguageUtil.getLanguageId(request);
    bytesArray=_bytesArrayPortalCache.get(modulePathsString);
  }
  if (bytesArray == null) {
    bytesArray=new byte[modulePaths.length][];
    for (int i=0; i < modulePaths.length; i++) {
      String modulePath=modulePaths[i];
      if (!validateModuleExtension(modulePath)) {
        response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_NO_CACHE_VALUE);
        response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        return;
      }
      byte[] bytes=new byte[0];
      if (Validator.isNotNull(modulePath)) {
        RequestDispatcher requestDispatcher=getResourceRequestDispatcher(request,response,modulePath);
        if (requestDispatcher == null) {
          response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_NO_CACHE_VALUE);
          response.setStatus(HttpServletResponse.SC_NOT_FOUND);
          return;
        }
        bytes=getResourceContent(requestDispatcher,request,response,modulePath,minifierType);
      }
      bytesArray[i]=bytes;
    }
    if ((modulePathsString != null) && !PropsValues.COMBO_CHECK_TIMESTAMP) {
      _bytesArrayPortalCache.put(modulePathsString,bytesArray);
    }
  }
  String contentType=ContentTypes.TEXT_JAVASCRIPT;
  if (StringUtil.equalsIgnoreCase(extension,_CSS_EXTENSION)) {
    contentType=ContentTypes.TEXT_CSS;
  }
  response.setContentType(contentType);
  ServletResponseUtil.write(response,bytesArray);
}
