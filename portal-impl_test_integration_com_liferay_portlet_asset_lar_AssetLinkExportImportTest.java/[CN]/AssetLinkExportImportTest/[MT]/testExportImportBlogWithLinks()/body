{
  long groupId=group.getGroupId();
  BlogsEntry mainBlogEntry=BlogsTestUtil.addEntry(TestPropsValues.getUserId(),group.getGroupId(),ServiceTestUtil.randomString(),true);
  String mainBlogEntryUuid=mainBlogEntry.getUuid();
  AssetEntry mainAssetEntry=AssetEntryLocalServiceUtil.getEntry(group.getGroupId(),mainBlogEntryUuid);
  BlogsEntry relatedBlogEntry1=BlogsTestUtil.addEntry(TestPropsValues.getUserId(),group.getGroupId(),ServiceTestUtil.randomString(),true);
  BlogsEntry relatedBlogEntry2=BlogsTestUtil.addEntry(TestPropsValues.getUserId(),group.getGroupId(),ServiceTestUtil.randomString(),true);
  List<AssetLink> assetLinks=new ArrayList<AssetLink>();
  AssetLink assetLink1=createAssetLink(groupId,mainBlogEntryUuid,relatedBlogEntry1.getUuid(),1);
  assetLinks.add(assetLink1);
  AssetLink assetLink2=createAssetLink(groupId,mainBlogEntryUuid,relatedBlogEntry2.getUuid(),2);
  assetLinks.add(assetLink2);
  long numberOfLinksOfAssetEntry=AssetLinkLocalServiceUtil.getDirectLinks(mainAssetEntry.getEntryId()).size();
  doExport(PortletKeys.BLOGS);
  doImport(PortletKeys.BLOGS);
  AssetEntry importMainAssetEntry=AssetEntryLocalServiceUtil.getEntry(importedGroup.getGroupId(),mainBlogEntryUuid);
  List<AssetLink> importedLinks=AssetLinkLocalServiceUtil.getDirectLinks(importMainAssetEntry.getEntryId());
  long numberOfLinksAfterImport=importedLinks.size();
  Assert.assertEquals(numberOfLinksAfterImport,numberOfLinksOfAssetEntry);
  _checkImportedLinks(assetLinks,importedGroup.getGroupId());
}
