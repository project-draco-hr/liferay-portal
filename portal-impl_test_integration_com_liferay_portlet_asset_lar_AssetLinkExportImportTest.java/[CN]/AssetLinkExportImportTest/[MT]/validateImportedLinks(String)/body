{
  AssetEntry originalAssetEntry=AssetEntryLocalServiceUtil.getEntry(group.getGroupId(),uuid);
  List<AssetLink> assetLinks=AssetLinkLocalServiceUtil.getLinks(originalAssetEntry.getEntryId());
  AssetEntry importedAssetEntry=AssetEntryLocalServiceUtil.getEntry(importedGroup.getGroupId(),uuid);
  List<AssetLink> importedAssetLinks=AssetLinkLocalServiceUtil.getLinks(importedAssetEntry.getEntryId());
  Assert.assertEquals(assetLinks.size(),importedAssetLinks.size());
  for (  AssetLink assetLink : assetLinks) {
    AssetEntry sourceAssetEntry=AssetEntryLocalServiceUtil.getEntry(assetLink.getEntryId1());
    AssetEntry targetAssetEntry=AssetEntryLocalServiceUtil.getEntry(assetLink.getEntryId2());
    Iterator<AssetLink> iterator=importedAssetLinks.iterator();
    while (iterator.hasNext()) {
      AssetLink importedLink=iterator.next();
      AssetEntry importedLinkSourceAssetEntry=AssetEntryLocalServiceUtil.getEntry(importedLink.getEntryId1());
      AssetEntry importedLinkTargetAssetEntry=AssetEntryLocalServiceUtil.getEntry(importedLink.getEntryId2());
      if (!sourceAssetEntry.getClassUuid().equals(importedLinkSourceAssetEntry.getClassUuid())) {
        continue;
      }
      if (!targetAssetEntry.getClassUuid().equals(importedLinkTargetAssetEntry.getClassUuid())) {
        continue;
      }
      iterator.remove();
      break;
    }
  }
  Assert.assertEquals(0,importedAssetLinks.size());
}
