{
  String className=classResource.replaceAll("\\.class$","");
  className=className.replaceAll("/",".");
  Class<?> annotatedClass=null;
  try {
    annotatedClass=bundle.loadClass(className);
  }
 catch (  Throwable t) {
    _logger.log(Logger.LOG_DEBUG,t.getMessage());
    return;
  }
  for (  Class<?> handledType : handledTypesArray) {
    if (handledType.isAssignableFrom(annotatedClass)) {
      annotatedClasses.add(annotatedClass);
      return;
    }
  }
  Annotation[] classAnnotations=new Annotation[0];
  try {
    classAnnotations=annotatedClass.getAnnotations();
  }
 catch (  Throwable t) {
    _logger.log(Logger.LOG_DEBUG,t.getMessage());
  }
  for (  Annotation classAnnotation : classAnnotations) {
    if (ArrayUtil.contains(handledTypesArray,classAnnotation.annotationType())) {
      annotatedClasses.add(annotatedClass);
      return;
    }
  }
  Method[] classMethods=new Method[0];
  try {
    classMethods=annotatedClass.getDeclaredMethods();
  }
 catch (  Throwable t) {
    _logger.log(Logger.LOG_DEBUG,t.getMessage());
  }
  for (  Method method : classMethods) {
    Annotation[] methodAnnotations=new Annotation[0];
    try {
      methodAnnotations=method.getDeclaredAnnotations();
    }
 catch (    Throwable t) {
      _logger.log(Logger.LOG_DEBUG,t.getMessage());
    }
    for (    Annotation methodAnnotation : methodAnnotations) {
      if (ArrayUtil.contains(handledTypesArray,methodAnnotation.annotationType())) {
        annotatedClasses.add(annotatedClass);
        return;
      }
    }
  }
  Field[] declaredFields=new Field[0];
  try {
    declaredFields=annotatedClass.getDeclaredFields();
  }
 catch (  Throwable t) {
    _logger.log(Logger.LOG_DEBUG,t.getMessage());
  }
  for (  Field field : declaredFields) {
    Annotation[] fieldAnnotations=new Annotation[0];
    try {
      fieldAnnotations=field.getDeclaredAnnotations();
    }
 catch (    Throwable t) {
      _logger.log(Logger.LOG_DEBUG,t.getMessage());
    }
    for (    Annotation fieldAnnotation : fieldAnnotations) {
      if (ArrayUtil.contains(handledTypesArray,fieldAnnotation.annotationType())) {
        annotatedClasses.add(annotatedClass);
        return;
      }
    }
  }
}
