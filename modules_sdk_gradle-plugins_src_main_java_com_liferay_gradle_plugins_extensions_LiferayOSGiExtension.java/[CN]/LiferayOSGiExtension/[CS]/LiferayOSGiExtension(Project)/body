{
  _project=project;
  _bundleDefaultInstructions.put(Constants.BUNDLE_SYMBOLICNAME,project.getName());
  _bundleDefaultInstructions.put(Constants.DONOTCOPY,"(" + DONOTCOPY_DEFAULT + ")");
  _bundleDefaultInstructions.put(Constants.DSANNOTATIONS,"*");
  _bundleDefaultInstructions.put(Constants.METATYPE,"*");
  _bundleDefaultInstructions.put(Constants.PLUGIN,StringUtil.merge(_BND_PLUGIN_CLASS_NAMES,","));
  _bundleDefaultInstructions.put("Javac-Debug",new Callable<String>(){
    @Override public String call() throws Exception {
      CompileOptions compileOptions=_getCompileOptions();
      return _getOnOffValue(compileOptions.isDebug());
    }
  }
);
  _bundleDefaultInstructions.put("Javac-Deprecation",new Callable<String>(){
    @Override public String call() throws Exception {
      CompileOptions compileOptions=_getCompileOptions();
      return _getOnOffValue(compileOptions.isDeprecation());
    }
  }
);
  _bundleDefaultInstructions.put("Javac-Encoding",new Callable<String>(){
    @Override public String call() throws Exception {
      CompileOptions compileOptions=_getCompileOptions();
      String encoding=compileOptions.getEncoding();
      if (Validator.isNull(encoding)) {
        encoding=System.getProperty("file.encoding");
      }
      return encoding;
    }
  }
);
  _bundleDefaultInstructions.put("-jsp","*.jsp,*.jspf");
  _bundleDefaultInstructions.put("-sass","*");
}
