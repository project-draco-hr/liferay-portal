{
  Element fileEntryElement=portletDataContext.getExportDataElement(fileEntry);
  String fileEntryPath=ExportImportPathUtil.getModelPath(fileEntry);
  if (!fileEntry.isDefaultRepository()) {
    Repository repository=RepositoryLocalServiceUtil.getRepository(fileEntry.getRepositoryId());
    StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext,fileEntry,repository,PortletDataContext.REFERENCE_TYPE_STRONG);
    portletDataContext.addClassedModel(fileEntryElement,fileEntryPath,fileEntry);
    long portletRepositoryClassNameId=PortalUtil.getClassNameId(PortletRepository.class.getName());
    if (repository.getClassNameId() != portletRepositoryClassNameId) {
      return;
    }
  }
  if (fileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext,fileEntry,fileEntry.getFolder(),PortletDataContext.REFERENCE_TYPE_PARENT);
  }
  LiferayFileEntry liferayFileEntry=(LiferayFileEntry)fileEntry;
  liferayFileEntry.setCachedFileVersion(fileEntry.getFileVersion());
  if (!portletDataContext.isPerformDirectBinaryImport()) {
    InputStream is=null;
    try {
      is=FileEntryUtil.getContentStream(fileEntry);
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to retrieve content for file entry " + fileEntry.getFileEntryId(),e);
      }
    }
    if (is == null) {
      fileEntryElement.detach();
      return;
    }
    try {
      String binPath=ExportImportPathUtil.getModelPath(fileEntry,fileEntry.getVersion());
      portletDataContext.addZipEntry(binPath,is);
      fileEntryElement.addAttribute("bin-path",binPath);
    }
  finally {
      try {
        is.close();
      }
 catch (      IOException ioe) {
        _log.error(ioe,ioe);
      }
    }
  }
  if (portletDataContext.getBooleanParameter("document_library","previews-and-thumbnails")) {
    DLProcessorRegistryUtil.exportGeneratedFiles(portletDataContext,fileEntry,fileEntryElement);
  }
  exportMetaData(portletDataContext,fileEntryElement,fileEntry);
  portletDataContext.addClassedModel(fileEntryElement,fileEntryPath,liferayFileEntry,DLFileEntry.class);
}
