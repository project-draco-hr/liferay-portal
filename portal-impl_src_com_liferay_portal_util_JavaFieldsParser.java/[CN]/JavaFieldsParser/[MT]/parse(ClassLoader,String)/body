{
  int x=s.indexOf("${");
  if (x == -1) {
    return s;
  }
  List<String> replaceFrom=new ArrayList<>();
  List<String> replaceWith=new ArrayList<>();
  while (true) {
    if (x == -1) {
      break;
    }
    int y=s.indexOf("}",x);
    if (y == -1) {
      break;
    }
    String javaSnippet=s.substring(x + 2,y);
    if (_log.isDebugEnabled()) {
      _log.debug("Java snippet " + javaSnippet);
    }
    String className=_getClassName(javaSnippet);
    if (_log.isDebugEnabled()) {
      _log.debug("Class name " + className);
    }
    if (className == null) {
      break;
    }
    Class<?> clazz=null;
    try {
      clazz=classLoader.loadClass(className);
    }
 catch (    Exception e) {
      _log.error("Unable to load class " + className,e);
      break;
    }
    String fieldName=_getFieldName(javaSnippet);
    if (_log.isDebugEnabled()) {
      _log.debug("Field name " + fieldName);
    }
    if (fieldName == null) {
      break;
    }
    String fieldValue=null;
    try {
      Field field=clazz.getField(fieldName);
      fieldValue=String.valueOf(field.get(null));
      if (_log.isDebugEnabled()) {
        _log.debug("Field value " + fieldValue);
      }
    }
 catch (    Exception e) {
      _log.error("Unable to load field " + fieldName,e);
      break;
    }
    replaceFrom.add("${".concat(javaSnippet).concat("}"));
    replaceWith.add(fieldValue);
    x=s.indexOf("${",y);
  }
  if (replaceFrom.isEmpty()) {
    return s;
  }
  return StringUtil.replace(s,replaceFrom.toArray(new String[replaceFrom.size()]),replaceWith.toArray(new String[replaceWith.size()]));
}
