{
  long pk=RandomTestUtil.nextLong();
  KaleoTask newKaleoTask=_persistence.create(pk);
  newKaleoTask.setGroupId(RandomTestUtil.nextLong());
  newKaleoTask.setCompanyId(RandomTestUtil.nextLong());
  newKaleoTask.setUserId(RandomTestUtil.nextLong());
  newKaleoTask.setUserName(RandomTestUtil.randomString());
  newKaleoTask.setCreateDate(RandomTestUtil.nextDate());
  newKaleoTask.setModifiedDate(RandomTestUtil.nextDate());
  newKaleoTask.setKaleoDefinitionId(RandomTestUtil.nextLong());
  newKaleoTask.setKaleoNodeId(RandomTestUtil.nextLong());
  newKaleoTask.setName(RandomTestUtil.randomString());
  newKaleoTask.setDescription(RandomTestUtil.randomString());
  _kaleoTasks.add(_persistence.update(newKaleoTask));
  KaleoTask existingKaleoTask=_persistence.findByPrimaryKey(newKaleoTask.getPrimaryKey());
  Assert.assertEquals(existingKaleoTask.getKaleoTaskId(),newKaleoTask.getKaleoTaskId());
  Assert.assertEquals(existingKaleoTask.getGroupId(),newKaleoTask.getGroupId());
  Assert.assertEquals(existingKaleoTask.getCompanyId(),newKaleoTask.getCompanyId());
  Assert.assertEquals(existingKaleoTask.getUserId(),newKaleoTask.getUserId());
  Assert.assertEquals(existingKaleoTask.getUserName(),newKaleoTask.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoTask.getCreateDate()),Time.getShortTimestamp(newKaleoTask.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoTask.getModifiedDate()),Time.getShortTimestamp(newKaleoTask.getModifiedDate()));
  Assert.assertEquals(existingKaleoTask.getKaleoDefinitionId(),newKaleoTask.getKaleoDefinitionId());
  Assert.assertEquals(existingKaleoTask.getKaleoNodeId(),newKaleoTask.getKaleoNodeId());
  Assert.assertEquals(existingKaleoTask.getName(),newKaleoTask.getName());
  Assert.assertEquals(existingKaleoTask.getDescription(),newKaleoTask.getDescription());
}
