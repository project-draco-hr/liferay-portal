{
  String servletContextName=GetterUtil.getString(theme.getServletContextName());
  if (ServletContextPool.get(servletContextName) == null) {
    ServletContextPool.put(servletContextName,servletContext);
  }
  String resourcePath=getResourcePath(theme,page);
  if (!VelocityEngineUtil.resourceExists(resourcePath)) {
    _log.error(resourcePath + " does not exist");
    return null;
  }
  VelocityContext velocityContext=VelocityEngineUtil.getWrappedStandardToolsContext();
  VelocityVariables.insertVariables(velocityContext,request);
  velocityContext.put("pageContext",pageContext);
  ServletContext themeServletContext=ServletContextPool.get(servletContextName);
  velocityContext.put("themeServletContext",themeServletContext);
  HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
  Writer writer=null;
  if (write) {
    writer=pageContext.getOut();
  }
 else {
    writer=new UnsyncStringWriter();
  }
  VelocityTaglib velocityTaglib=new VelocityTaglib(servletContext,request,new PipingServletResponse(response,writer),pageContext);
  request.setAttribute(WebKeys.VELOCITY_TAGLIB,velocityTaglib);
  velocityContext.put("taglibLiferay",velocityTaglib);
  velocityContext.put("theme",velocityTaglib);
  velocityContext.put("writer",writer);
  VelocityEngineUtil.mergeTemplate(resourcePath,velocityContext,writer);
  if (write) {
    return null;
  }
 else {
    return ((UnsyncStringWriter)writer).toString();
  }
}
