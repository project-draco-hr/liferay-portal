{
  String ctxName=GetterUtil.getString(theme.getServletContextName());
  if (VelocityContextPool.get(ctxName) == null) {
    VelocityContextPool.put(ctxName,ctx);
  }
  int pos=page.lastIndexOf(StringPool.PERIOD);
  StringBuilder sb=new StringBuilder();
  sb.append(ctxName);
  sb.append(theme.getVelocityResourceListener());
  sb.append(theme.getTemplatesPath());
  sb.append(StringPool.SLASH);
  sb.append(page.substring(0,pos));
  sb.append(".vm");
  String source=sb.toString();
  if (!Velocity.resourceExists(source)) {
    _log.error(source + " does not exist");
    return null;
  }
  StringWriter sw=new StringWriter();
  VelocityContext vc=new VelocityContext();
  VelocityVariables.insertVariables(vc,req);
  StringServletResponse stringServletRes=new StringServletResponse((HttpServletResponse)pageContext.getResponse());
  VelocityTaglib velocityTaglib=new VelocityTaglib(ctx,req,stringServletRes,pageContext);
  req.setAttribute(WebKeys.VELOCITY_TAGLIB,velocityTaglib);
  vc.put("taglibLiferay",velocityTaglib);
  vc.put("theme",velocityTaglib);
  Velocity.mergeTemplate(source,StringPool.UTF8,vc,sw);
  String output=sw.toString();
  if (write) {
    pageContext.getOut().print(output);
    return null;
  }
 else {
    return output;
  }
}
