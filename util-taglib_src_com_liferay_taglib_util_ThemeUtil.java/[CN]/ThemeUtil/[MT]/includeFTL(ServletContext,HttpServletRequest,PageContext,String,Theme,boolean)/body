{
  String servletContextName=GetterUtil.getString(theme.getServletContextName());
  if (ServletContextPool.get(servletContextName) == null) {
    ServletContextPool.put(servletContextName,servletContext);
  }
  String portletId=getPortletId(request);
  String resourcePath=theme.getResourcePath(servletContext,portletId,path);
  if (Validator.isNotNull(portletId) && !TemplateManagerUtil.hasTemplate(TemplateManager.FREE_MARKER,resourcePath) && portletId.contains(PortletConstants.INSTANCE_SEPARATOR)) {
    String rootPortletId=PortletConstants.getRootPortletId(portletId);
    resourcePath=theme.getResourcePath(servletContext,rootPortletId,path);
  }
  if (Validator.isNotNull(portletId) && !TemplateManagerUtil.hasTemplate(TemplateManager.FREE_MARKER,resourcePath)) {
    resourcePath=theme.getResourcePath(servletContext,null,path);
  }
  if (!TemplateManagerUtil.hasTemplate(TemplateManager.FREE_MARKER,resourcePath)) {
    _log.error(resourcePath + " does not exist");
    return null;
  }
  Template freemarkerTemplate=TemplateManagerUtil.getTemplate(TemplateManager.FREE_MARKER,resourcePath,TemplateContextType.STANDARD);
  freemarkerTemplate.prepare(request);
  ServletContext themeServletContext=ServletContextPool.get(servletContextName);
  freemarkerTemplate.put("themeServletContext",themeServletContext);
  HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
  Writer writer=null;
  if (write) {
    writer=UnsyncPrintWriterPool.borrow(pageContext.getOut());
  }
 else {
    writer=new UnsyncStringWriter();
  }
  VelocityTaglib velocityTaglib=new VelocityTaglib(servletContext,request,new PipingServletResponse(response,writer),pageContext);
  request.setAttribute(WebKeys.VELOCITY_TAGLIB,velocityTaglib);
  freemarkerTemplate.put("taglibLiferay",velocityTaglib);
  freemarkerTemplate.put("theme",velocityTaglib);
  freemarkerTemplate.put("writer",writer);
  TemplateHashModel portalTaglib=FreeMarkerTaglibFactoryUtil.createTaglibFactory(servletContext);
  freemarkerTemplate.put("PortalJspTagLibs",portalTaglib);
  TemplateHashModel themeTaglib=FreeMarkerTaglibFactoryUtil.createTaglibFactory(themeServletContext);
  freemarkerTemplate.put("ThemeJspTaglibs",themeTaglib);
  final Servlet servlet=(Servlet)pageContext.getPage();
  GenericServlet genericServlet=null;
  if (servlet instanceof GenericServlet) {
    genericServlet=(GenericServlet)servlet;
  }
 else {
    genericServlet=new GenericServlet(){
      @Override public void service(      ServletRequest servletRequest,      ServletResponse servletResponse) throws ServletException, IOException {
        servlet.service(servletRequest,servletResponse);
      }
    }
;
    genericServlet.init(pageContext.getServletConfig());
  }
  ServletContextHashModel servletContextHashModel=new ServletContextHashModel(genericServlet,ObjectWrapper.DEFAULT_WRAPPER);
  freemarkerTemplate.put("Application",servletContextHashModel);
  HttpRequestHashModel httpRequestHashModel=new HttpRequestHashModel(request,response,ObjectWrapper.DEFAULT_WRAPPER);
  freemarkerTemplate.put("Request",httpRequestHashModel);
  freemarkerTemplate.processTemplate(writer);
  if (write) {
    return null;
  }
 else {
    return writer.toString();
  }
}
