{
  String servletContextName=GetterUtil.getString(theme.getServletContextName());
  if (ServletContextPool.get(servletContextName) == null) {
    ServletContextPool.put(servletContextName,servletContext);
  }
  String portletId=getPortletId(request);
  String resourcePath=theme.getResourcePath(servletContext,portletId,page);
  boolean checkResourceExists=true;
  if (Validator.isNotNull(portletId)) {
    if (PortletConstants.hasInstanceId(portletId) && (checkResourceExists=!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_VM,resourcePath))) {
      String rootPortletId=PortletConstants.getRootPortletId(portletId);
      resourcePath=theme.getResourcePath(servletContext,rootPortletId,page);
    }
    if (checkResourceExists && (checkResourceExists=!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_VM,resourcePath))) {
      resourcePath=theme.getResourcePath(servletContext,null,page);
    }
  }
  if (checkResourceExists && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_VM,resourcePath)) {
    _log.error(resourcePath + " does not exist");
    return null;
  }
  TemplateResource templateResource=TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_VM,resourcePath);
  if (templateResource == null) {
    throw new Exception("Unable to load template resource " + resourcePath);
  }
  Template template=TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_VM,templateResource,restricted);
  template.prepare(request);
  template.put("pageContext",pageContext);
  ServletContext themeServletContext=ServletContextPool.get(servletContextName);
  template.put("themeServletContext",themeServletContext);
  HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
  Writer writer=null;
  if (write) {
    writer=pageContext.getOut();
  }
 else {
    writer=new UnsyncStringWriter();
  }
  VelocityTaglib velocityTaglib=new VelocityTaglibImpl(servletContext,request,new PipingServletResponse(response,writer),pageContext,template);
  template.put(TemplateConstants.WRITER,writer);
  template.put("taglibLiferay",velocityTaglib);
  template.put("theme",velocityTaglib);
  template.processTemplate(writer);
  if (write) {
    return null;
  }
 else {
    return ((UnsyncStringWriter)writer).toString();
  }
}
