{
  String pluginServletContextName=GetterUtil.getString(theme.getServletContextName());
  ServletContext pluginServletContext=ServletContextPool.get(pluginServletContextName);
  ClassLoader pluginClassLoader=null;
  if (pluginServletContext != null) {
    pluginClassLoader=(ClassLoader)pluginServletContext.getAttribute(PluginContextListener.PLUGIN_CLASS_LOADER);
  }
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  TemplateContextType templateContextType=TemplateContextType.STANDARD;
  if ((pluginClassLoader != null) && (pluginClassLoader != contextClassLoader)) {
    currentThread.setContextClassLoader(pluginClassLoader);
    templateContextType=TemplateContextType.CLASS_LOADER;
  }
  try {
    if (extension.equals(ThemeHelper.TEMPLATE_EXTENSION_FTL)) {
      return doIncludeFTL(servletContext,request,pageContext,path,theme,templateContextType,write);
    }
 else     if (extension.equals(ThemeHelper.TEMPLATE_EXTENSION_JSP)) {
      doIncludeJSP(servletContext,request,response,path,theme);
    }
 else     if (extension.equals(ThemeHelper.TEMPLATE_EXTENSION_VM)) {
      return doIncludeVM(servletContext,request,pageContext,path,theme,templateContextType,write);
    }
    return null;
  }
  finally {
    if ((pluginClassLoader != null) && (pluginClassLoader != contextClassLoader)) {
      currentThread.setContextClassLoader(contextClassLoader);
    }
  }
}
