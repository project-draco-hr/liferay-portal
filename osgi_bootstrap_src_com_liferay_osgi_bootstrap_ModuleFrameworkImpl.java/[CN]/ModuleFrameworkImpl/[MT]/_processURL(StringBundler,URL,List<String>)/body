{
  Manifest manifest;
  try {
    manifest=new Manifest(url.openStream());
  }
 catch (  IOException ie) {
    _log.error(ie,ie);
    return;
  }
  Attributes attributes=manifest.getMainAttributes();
  String bundleSymbolicName=attributes.getValue(Constants.BUNDLE_SYMBOLICNAME);
  if (Validator.isNull(bundleSymbolicName)) {
    if (url.toString().contains(PropsValues.LIFERAY_LIB_PORTAL_DIR)) {
      manifest=_calculateLibraryManifest(url,manifest);
      attributes=manifest.getMainAttributes();
      bundleSymbolicName=attributes.getValue(new Attributes.Name(Constants.BUNDLE_SYMBOLICNAME));
      if (Validator.isNull(bundleSymbolicName)) {
        return;
      }
    }
 else {
      return;
    }
  }
  String rootBundleSymbolicName=bundleSymbolicName;
  int pos=rootBundleSymbolicName.indexOf(StringPool.SEMICOLON);
  if (pos != -1) {
    rootBundleSymbolicName=rootBundleSymbolicName.substring(0,pos);
  }
  for (  String ignoredFragment : ignoredFragments) {
    int fragmentLength=ignoredFragment.length();
    boolean endsWithStar=ignoredFragment.endsWith(StringPool.STAR);
    boolean isIgnoredFragment=rootBundleSymbolicName.equals(ignoredFragment);
    boolean startsWithFragment=rootBundleSymbolicName.startsWith(ignoredFragment.substring(0,fragmentLength - 1));
    if (isIgnoredFragment || (endsWithStar && startsWithFragment)) {
      return;
    }
  }
  String exportPackageHeader=GetterUtil.getString(attributes.getValue(Constants.EXPORT_PACKAGE));
  Map<String,Map<String,String>> exportPackageHeaderMap=OSGiHeader.parseHeader(exportPackageHeader);
  for (  Map.Entry<String,Map<String,String>> entry : exportPackageHeaderMap.entrySet()) {
    String key=entry.getKey();
    List<URL> list=_extraPackageMap.get(key);
    if (list == null) {
      list=new ArrayList<URL>();
      _extraPackageMap.put(key,list);
    }
    list.add(url);
    sb.append(key);
    Map<String,String> value=entry.getValue();
    if (value.containsKey("version")) {
      sb.append(";version=\"");
      sb.append(value.get("version"));
      sb.append("\"");
    }
    sb.append(StringPool.COMMA);
  }
}
