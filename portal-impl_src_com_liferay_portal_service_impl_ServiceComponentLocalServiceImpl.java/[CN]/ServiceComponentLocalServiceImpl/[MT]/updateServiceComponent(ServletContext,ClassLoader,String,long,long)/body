{
  try {
    ModelHintsUtil.read(portletClassLoader,"META-INF/portlet-model-hints.xml");
    Class<?> finderCacheClass=Class.forName("com.liferay.portlet.service.FinderCache",true,portletClassLoader);
    Method clearCacheMethod=finderCacheClass.getMethod("clearCache");
    clearCacheMethod.invoke(finderCacheClass);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
  ServiceComponent serviceComponent=null;
  ServiceComponent previousServiceComponent=null;
  List<ServiceComponent> serviceComponents=serviceComponentPersistence.findByBuildNamespace(buildNamespace,0,1);
  if (serviceComponents.size() == 0) {
    long serviceComponentId=counterLocalService.increment();
    serviceComponent=serviceComponentPersistence.create(serviceComponentId);
    serviceComponent.setBuildNamespace(buildNamespace);
    serviceComponent.setBuildNumber(buildNumber);
    serviceComponent.setBuildDate(buildDate);
  }
 else {
    serviceComponent=serviceComponents.get(0);
    if (serviceComponent.getBuildNumber() < buildNumber) {
      previousServiceComponent=serviceComponent;
      long serviceComponentId=counterLocalService.increment();
      serviceComponent=serviceComponentPersistence.create(serviceComponentId);
      serviceComponent.setBuildNamespace(buildNamespace);
      serviceComponent.setBuildNumber(buildNumber);
      serviceComponent.setBuildDate(buildDate);
    }
 else     if (serviceComponent.getBuildNumber() > buildNumber) {
      throw new OldServiceComponentException("Build namespace " + buildNamespace + " has build number "+ serviceComponent.getBuildNumber()+ " which is newer than "+ buildNumber);
    }
 else {
      return serviceComponent;
    }
  }
  try {
    DocumentFactory docFactory=DocumentFactory.getInstance();
    Document doc=docFactory.createDocument(StringPool.UTF8);
    Element data=doc.addElement("data");
    String tablesSQL=HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/sql/tables.sql"));
    data.addElement("tables-sql").addCDATA(tablesSQL);
    String sequencesSQL=HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/sql/sequences.sql"));
    data.addElement("sequences-sql").addCDATA(sequencesSQL);
    String indexesSQL=HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/sql/indexes.sql"));
    data.addElement("indexes-sql").addCDATA(indexesSQL);
    String dataXML=XMLFormatter.toString(doc);
    serviceComponent.setData(dataXML);
    serviceComponentPersistence.update(serviceComponent,false);
    upgradeDB(portletClassLoader,buildNamespace,buildNumber,previousServiceComponent,tablesSQL,sequencesSQL,indexesSQL);
    removeOldServiceComponents(buildNamespace);
    return serviceComponent;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
}
