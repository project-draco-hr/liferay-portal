{
  if (journalTemplate.isNew()) {
    Object[] args=new Object[]{journalTemplate.getUuid(),Long.valueOf(journalTemplate.getGroupId())};
    FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_UUID_G,args,Long.valueOf(1));
    FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_UUID_G,args,journalTemplate);
    args=new Object[]{Long.valueOf(journalTemplate.getSmallImageId())};
    FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_SMALLIMAGEID,args,Long.valueOf(1));
    FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_SMALLIMAGEID,args,journalTemplate);
    args=new Object[]{Long.valueOf(journalTemplate.getGroupId()),journalTemplate.getTemplateId()};
    FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_G_T,args,Long.valueOf(1));
    FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_G_T,args,journalTemplate);
  }
 else {
    JournalTemplateModelImpl journalTemplateModelImpl=(JournalTemplateModelImpl)journalTemplate;
    if ((journalTemplateModelImpl.getColumnBitmask() & FINDER_PATH_FETCH_BY_UUID_G.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{journalTemplate.getUuid(),Long.valueOf(journalTemplate.getGroupId())};
      FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_UUID_G,args,Long.valueOf(1));
      FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_UUID_G,args,journalTemplate);
    }
    if ((journalTemplateModelImpl.getColumnBitmask() & FINDER_PATH_FETCH_BY_SMALLIMAGEID.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{Long.valueOf(journalTemplate.getSmallImageId())};
      FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_SMALLIMAGEID,args,Long.valueOf(1));
      FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_SMALLIMAGEID,args,journalTemplate);
    }
    if ((journalTemplateModelImpl.getColumnBitmask() & FINDER_PATH_FETCH_BY_G_T.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{Long.valueOf(journalTemplate.getGroupId()),journalTemplate.getTemplateId()};
      FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_G_T,args,Long.valueOf(1));
      FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_G_T,args,journalTemplate);
    }
  }
}
