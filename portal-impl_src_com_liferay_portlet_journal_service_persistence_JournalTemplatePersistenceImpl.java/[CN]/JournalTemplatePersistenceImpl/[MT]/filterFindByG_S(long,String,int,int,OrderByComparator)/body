{
  if (!InlineSQLHelperUtil.isEnabled(groupId)) {
    return findByG_S(groupId,structureId,start,end,orderByComparator);
  }
  StringBundler query=null;
  if (orderByComparator != null) {
    query=new StringBundler(4 + (orderByComparator.getOrderByFields().length * 3));
  }
 else {
    query=new StringBundler(4);
  }
  query.append(_FILTER_SQL_SELECT_JOURNALTEMPLATE_WHERE);
  query.append(_FINDER_COLUMN_G_S_GROUPID_2);
  if (structureId == null) {
    query.append(_FINDER_COLUMN_G_S_STRUCTUREID_1);
  }
 else {
    if (structureId.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_S_STRUCTUREID_3);
    }
 else {
      query.append(_FINDER_COLUMN_G_S_STRUCTUREID_2);
    }
  }
  appendGroupByComparator(query,_FILTER_COLUMN_PK);
  if (orderByComparator != null) {
    if (getDB().isSupportsInlineDistinct()) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_TABLE,orderByComparator);
    }
  }
 else {
    if (getDB().isSupportsInlineDistinct()) {
      query.append(JournalTemplateModelImpl.ORDER_BY_JPQL);
    }
 else {
      query.append(JournalTemplateModelImpl.ORDER_BY_SQL);
    }
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),JournalTemplate.class.getName(),_FILTER_COLUMN_PK,groupId);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    if (getDB().isSupportsInlineDistinct()) {
      q.addEntity(_FILTER_ENTITY_ALIAS,JournalTemplateImpl.class);
    }
 else {
      q.addEntity(_FILTER_ENTITY_TABLE,JournalTemplateImpl.class);
    }
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    if (structureId != null) {
      qPos.add(structureId);
    }
    return (List<JournalTemplate>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
