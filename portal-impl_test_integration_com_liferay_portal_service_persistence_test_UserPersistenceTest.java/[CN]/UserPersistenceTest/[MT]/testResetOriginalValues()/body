{
  User newUser=addUser();
  _persistence.clearCache();
  User existingUser=_persistence.findByPrimaryKey(newUser.getPrimaryKey());
  Assert.assertEquals(existingUser.getContactId(),ReflectionTestUtil.invoke(existingUser,"getOriginalContactId",new Class<?>[0]));
  Assert.assertEquals(existingUser.getPortraitId(),ReflectionTestUtil.invoke(existingUser,"getOriginalPortraitId",new Class<?>[0]));
  Assert.assertEquals(existingUser.getCompanyId(),ReflectionTestUtil.invoke(existingUser,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertEquals(existingUser.getUserId(),ReflectionTestUtil.invoke(existingUser,"getOriginalUserId",new Class<?>[0]));
  Assert.assertEquals(existingUser.getCompanyId(),ReflectionTestUtil.invoke(existingUser,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertEquals(existingUser.getDefaultUser(),ReflectionTestUtil.invoke(existingUser,"getOriginalDefaultUser",new Class<?>[0]));
  Assert.assertEquals(existingUser.getCompanyId(),ReflectionTestUtil.invoke(existingUser,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingUser.getScreenName(),ReflectionTestUtil.invoke(existingUser,"getOriginalScreenName",new Class<?>[0])));
  Assert.assertEquals(existingUser.getCompanyId(),ReflectionTestUtil.invoke(existingUser,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingUser.getEmailAddress(),ReflectionTestUtil.invoke(existingUser,"getOriginalEmailAddress",new Class<?>[0])));
  Assert.assertEquals(existingUser.getCompanyId(),ReflectionTestUtil.invoke(existingUser,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertEquals(existingUser.getFacebookId(),ReflectionTestUtil.invoke(existingUser,"getOriginalFacebookId",new Class<?>[0]));
  Assert.assertEquals(existingUser.getCompanyId(),ReflectionTestUtil.invoke(existingUser,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingUser.getOpenId(),ReflectionTestUtil.invoke(existingUser,"getOriginalOpenId",new Class<?>[0])));
}
