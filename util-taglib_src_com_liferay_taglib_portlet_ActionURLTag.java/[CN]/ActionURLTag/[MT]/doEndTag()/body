{
  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(PortalClassLoaderUtil.getClassLoader());
    Object windowStateWrapper=_windowState;
    if (windowStateWrapper == null) {
      windowStateWrapper=new NullWrapper(String.class.getName());
    }
    Object portletModeWrapper=_portletMode;
    if (portletModeWrapper == null) {
      portletModeWrapper=new NullWrapper(String.class.getName());
    }
    Object varWrapper=_var;
    if (varWrapper == null) {
      varWrapper=new NullWrapper(String.class.getName());
    }
    Object varImplWrapper=_varImpl;
    if (varImplWrapper == null) {
      varImplWrapper=new NullWrapper(String.class.getName());
    }
    Object secureWrapper=_secure;
    if (secureWrapper == null) {
      secureWrapper=new NullWrapper(Boolean.class.getName());
    }
    Object portletNameWrapper=_portletName;
    if (portletNameWrapper == null) {
      portletNameWrapper=new NullWrapper(String.class.getName());
    }
    Object anchorWrapper=_anchor;
    if (anchorWrapper == null) {
      anchorWrapper=new NullWrapper(Boolean.class.getName());
    }
    Object encryptWrapper=_encrypt;
    if (encryptWrapper == null) {
      encryptWrapper=new NullWrapper(Boolean.class.getName());
    }
    Object paramsWrapper=getParams();
    if (paramsWrapper == null) {
      paramsWrapper=new NullWrapper(Map.class.getName());
    }
    MethodWrapper methodWrapper=new MethodWrapper(_TAG_CLASS,_TAG_DO_END_METHOD,new Object[]{pageContext,new BooleanWrapper(isAction()),windowStateWrapper,portletModeWrapper,varWrapper,varImplWrapper,secureWrapper,portletNameWrapper,anchorWrapper,encryptWrapper,new BooleanWrapper(_portletConfiguration),paramsWrapper});
    MethodInvoker.invoke(methodWrapper);
  }
 catch (  Exception e) {
    if (e instanceof JspException) {
      throw (JspException)e;
    }
 else {
      throw new JspException(e);
    }
  }
 finally {
    clearParams();
    Thread.currentThread().setContextClassLoader(contextClassLoader);
  }
  return EVAL_PAGE;
}
