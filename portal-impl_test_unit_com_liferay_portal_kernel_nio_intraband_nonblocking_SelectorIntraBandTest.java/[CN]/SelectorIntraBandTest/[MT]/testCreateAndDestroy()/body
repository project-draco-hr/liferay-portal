{
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(SelectorIntraBand.class.getName(),Level.INFO);
  Thread wakeUpThread=new Thread(new WakeUpRunnable(_selectorIntraBand));
  wakeUpThread.start();
  Thread pollingThread=_selectorIntraBand.pollingThread;
  Selector selector=_selectorIntraBand.selector;
synchronized (selector) {
    wakeUpThread.interrupt();
    wakeUpThread.join();
    while (pollingThread.getState() != Thread.State.BLOCKED)     ;
    selector.close();
  }
  pollingThread.join();
  Assert.assertEquals(1,logRecords.size());
  String pollingThreadName=pollingThread.getName();
  LogRecord logRecord=logRecords.get(0);
  Assert.assertEquals(pollingThreadName.concat(" exiting gracefully on selector closure"),logRecord.getMessage());
  _selectorIntraBand=new SelectorIntraBand(1000);
  logRecords=JDKLoggerTestUtil.configureJDKLogger(SelectorIntraBand.class.getName(),Level.OFF);
  wakeUpThread=new Thread(new WakeUpRunnable(_selectorIntraBand));
  wakeUpThread.start();
  pollingThread=_selectorIntraBand.pollingThread;
  selector=_selectorIntraBand.selector;
synchronized (selector) {
    wakeUpThread.interrupt();
    wakeUpThread.join();
    while (pollingThread.getState() != Thread.State.BLOCKED)     ;
    selector.close();
  }
  pollingThread.join();
  Assert.assertTrue(logRecords.isEmpty());
}
