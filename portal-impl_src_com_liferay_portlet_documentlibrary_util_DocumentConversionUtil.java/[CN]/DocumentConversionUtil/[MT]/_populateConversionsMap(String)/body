{
  Filter filter=new Filter(documentFamily);
  DocumentFormatRegistry registry=new DefaultDocumentFormatRegistry();
  String[] sourceExtensions=PropsUtil.getArray(PropsKeys.OPENOFFICE_CONVERSION_SOURCE_EXTENSIONS,filter);
  String[] targetExtensions=PropsUtil.getArray(PropsKeys.OPENOFFICE_CONVERSION_TARGET_EXTENSIONS,filter);
  for (  String sourceExtension : sourceExtensions) {
    List<String> list=new ArrayList<String>(targetExtensions.length);
    DocumentFormat sourceFormat=registry.getFormatByFileExtension(sourceExtension);
    if (sourceFormat == null) {
      if (_log.isWarnEnabled()) {
        _log.warn("This is not a valid source extension " + sourceExtension);
      }
      continue;
    }
    for (    String targetExtension : targetExtensions) {
      DocumentFormat targetFormat=registry.getFormatByFileExtension(targetExtension);
      if (targetFormat == null) {
        if (_log.isWarnEnabled()) {
          _log.warn("This is not a valid target extension " + targetFormat);
        }
        continue;
      }
      if (sourceFormat.isExportableTo(targetFormat)) {
        list.add(targetExtension);
      }
    }
    if (list.isEmpty()) {
      if (_log.isInfoEnabled()) {
        _log.info("There are no conversions supported from " + sourceExtension);
      }
    }
 else {
      if (_log.isInfoEnabled()) {
        _log.info("Conversions supported from " + sourceExtension + " to "+ list);
      }
      _conversionsMap.put(sourceExtension,list.toArray(new String[list.size()]));
    }
  }
}
