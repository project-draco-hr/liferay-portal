{
  long pk=ServiceTestUtil.nextLong();
  SocialActivityCounter newSocialActivityCounter=_persistence.create(pk);
  newSocialActivityCounter.setGroupId(ServiceTestUtil.nextLong());
  newSocialActivityCounter.setCompanyId(ServiceTestUtil.nextLong());
  newSocialActivityCounter.setClassNameId(ServiceTestUtil.nextLong());
  newSocialActivityCounter.setClassPK(ServiceTestUtil.nextLong());
  newSocialActivityCounter.setName(ServiceTestUtil.randomString());
  newSocialActivityCounter.setOwnerType(ServiceTestUtil.nextInt());
  newSocialActivityCounter.setCurrentValue(ServiceTestUtil.nextInt());
  newSocialActivityCounter.setTotalValue(ServiceTestUtil.nextInt());
  newSocialActivityCounter.setGraceValue(ServiceTestUtil.nextInt());
  newSocialActivityCounter.setStartPeriod(ServiceTestUtil.nextInt());
  newSocialActivityCounter.setEndPeriod(ServiceTestUtil.nextInt());
  newSocialActivityCounter.setActive(ServiceTestUtil.randomBoolean());
  _persistence.update(newSocialActivityCounter);
  SocialActivityCounter existingSocialActivityCounter=_persistence.findByPrimaryKey(newSocialActivityCounter.getPrimaryKey());
  Assert.assertEquals(existingSocialActivityCounter.getActivityCounterId(),newSocialActivityCounter.getActivityCounterId());
  Assert.assertEquals(existingSocialActivityCounter.getGroupId(),newSocialActivityCounter.getGroupId());
  Assert.assertEquals(existingSocialActivityCounter.getCompanyId(),newSocialActivityCounter.getCompanyId());
  Assert.assertEquals(existingSocialActivityCounter.getClassNameId(),newSocialActivityCounter.getClassNameId());
  Assert.assertEquals(existingSocialActivityCounter.getClassPK(),newSocialActivityCounter.getClassPK());
  Assert.assertEquals(existingSocialActivityCounter.getName(),newSocialActivityCounter.getName());
  Assert.assertEquals(existingSocialActivityCounter.getOwnerType(),newSocialActivityCounter.getOwnerType());
  Assert.assertEquals(existingSocialActivityCounter.getCurrentValue(),newSocialActivityCounter.getCurrentValue());
  Assert.assertEquals(existingSocialActivityCounter.getTotalValue(),newSocialActivityCounter.getTotalValue());
  Assert.assertEquals(existingSocialActivityCounter.getGraceValue(),newSocialActivityCounter.getGraceValue());
  Assert.assertEquals(existingSocialActivityCounter.getStartPeriod(),newSocialActivityCounter.getStartPeriod());
  Assert.assertEquals(existingSocialActivityCounter.getEndPeriod(),newSocialActivityCounter.getEndPeriod());
  Assert.assertEquals(existingSocialActivityCounter.getActive(),newSocialActivityCounter.getActive());
}
