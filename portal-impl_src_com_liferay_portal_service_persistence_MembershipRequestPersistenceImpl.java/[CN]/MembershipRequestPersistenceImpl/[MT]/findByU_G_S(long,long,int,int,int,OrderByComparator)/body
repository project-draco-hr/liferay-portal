{
  Object[] finderArgs=new Object[]{userId,groupId,statusId,String.valueOf(start),String.valueOf(end),String.valueOf(orderByComparator)};
  List<MembershipRequest> list=(List<MembershipRequest>)FinderCacheUtil.getResult(FINDER_PATH_FIND_BY_U_G_S,finderArgs,this);
  if (list == null) {
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(5 + (orderByComparator.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(5);
    }
    query.append(_SQL_SELECT_MEMBERSHIPREQUEST_WHERE);
    query.append(_FINDER_COLUMN_U_G_S_USERID_2);
    query.append(_FINDER_COLUMN_U_G_S_GROUPID_2);
    query.append(_FINDER_COLUMN_U_G_S_STATUSID_2);
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      query.append(MembershipRequestModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(userId);
      qPos.add(groupId);
      qPos.add(statusId);
      list=(List<MembershipRequest>)QueryUtil.list(q,getDialect(),start,end);
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        FinderCacheUtil.removeResult(FINDER_PATH_FIND_BY_U_G_S,finderArgs);
      }
 else {
        cacheResult(list);
        FinderCacheUtil.putResult(FINDER_PATH_FIND_BY_U_G_S,finderArgs,list);
      }
      closeSession(session);
    }
  }
  return list;
}
