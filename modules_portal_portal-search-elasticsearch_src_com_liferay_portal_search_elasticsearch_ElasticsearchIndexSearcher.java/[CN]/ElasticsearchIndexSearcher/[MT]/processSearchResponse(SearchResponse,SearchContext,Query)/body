{
  SearchHits searchHits=searchResponse.getHits();
  int[] startAndEnd=SearchPaginationUtil.calculateStartAndEnd(searchContext.getStart(),searchContext.getEnd(),(int)searchHits.getTotalHits());
  int start=startAndEnd[0];
  int end=startAndEnd[1];
  if ((searchContext.getStart() != QueryUtil.ALL_POS) && (searchContext.getEnd() != QueryUtil.ALL_POS) && ((start != searchContext.getStart()) || (end != searchContext.getEnd()))) {
    searchContext.setEnd(end);
    searchContext.setStart(start);
    searchResponse=doSearch(searchContext,query);
    searchHits=searchResponse.getHits();
  }
  Hits hits=new HitsImpl();
  List<Document> documents=new ArrayList<Document>();
  Set<String> queryTerms=new HashSet<String>();
  List<Float> scores=new ArrayList<Float>();
  updateFacetCollectors(searchContext,searchResponse);
  if (searchHits.totalHits() > 0) {
    SearchHit[] searchHitsArray=searchHits.getHits();
    for (    SearchHit searchHit : searchHitsArray) {
      Document document=processSearchHit(searchHit);
      documents.add(document);
      scores.add(searchHit.getScore());
      addSnippets(searchHit,document,searchContext.getQueryConfig(),queryTerms);
    }
  }
  hits.setDocs(documents.toArray(new Document[documents.size()]));
  hits.setLength((int)searchHits.getTotalHits());
  hits.setQueryTerms(queryTerms.toArray(new String[queryTerms.size()]));
  hits.setScores(scores.toArray(new Float[scores.size()]));
  hits.setQuery(query);
  TimeValue timeValue=searchResponse.getTook();
  hits.setSearchTime((float)timeValue.getSecondsFrac());
  return hits;
}
