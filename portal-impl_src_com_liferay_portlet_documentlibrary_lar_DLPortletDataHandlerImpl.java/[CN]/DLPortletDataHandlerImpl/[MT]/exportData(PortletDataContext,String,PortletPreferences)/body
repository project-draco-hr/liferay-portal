{
  try {
    XStream xStream=new XStream();
    Document doc=DocumentHelper.createDocument();
    Element root=doc.addElement("documentlibrary-data");
    root.addAttribute("group-id",String.valueOf(context.getGroupId()));
    List<DLFolder> folders=DLFolderUtil.findByGroupId(context.getGroupId());
    List<DLFileEntry> entries=new ArrayList<DLFileEntry>();
    List<DLFileShortcut> shortcuts=new ArrayList<DLFileShortcut>();
    Iterator<DLFolder> foldersItr=folders.iterator();
    while (foldersItr.hasNext()) {
      DLFolder folder=foldersItr.next();
      if (context.addPrimaryKey(DLFolder.class,folder.getPrimaryKeyObj())) {
        foldersItr.remove();
      }
 else {
        folder.setUserUuid(folder.getUserUuid());
        List<DLFileEntry> folderEntries=DLFileEntryUtil.findByFolderId(folder.getFolderId());
        if (context.hasDateRange()) {
          for (          DLFileEntry entry : folderEntries) {
            if (context.isWithinDateRange(entry.getModifiedDate())) {
              entries.add(entry);
            }
          }
        }
 else {
          entries.addAll(folderEntries);
        }
        if (context.getBooleanParameter(_NAMESPACE,"shortcuts")) {
          List<DLFileShortcut> folderShortcuts=DLFileShortcutUtil.findByFolderId(folder.getFolderId());
          if (context.hasDateRange()) {
            for (            DLFileShortcut shortcut : folderShortcuts) {
              if (context.isWithinDateRange(shortcut.getModifiedDate())) {
                shortcuts.add(shortcut);
              }
            }
          }
 else {
            shortcuts.addAll(folderShortcuts);
          }
        }
        if (!context.isWithinDateRange(folder.getModifiedDate())) {
          foldersItr.remove();
        }
      }
    }
    String xml=xStream.toXML(folders);
    Element el=root.addElement("documentlibrary-folders");
    Document tempDoc=DocumentUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    List<DLFileRank> ranks=new ArrayList<DLFileRank>();
    Iterator<DLFileEntry> entriesItr=entries.iterator();
    while (entriesItr.hasNext()) {
      DLFileEntry entry=entriesItr.next();
      if (context.addPrimaryKey(DLFileEntry.class,entry.getPrimaryKeyObj())) {
        entriesItr.remove();
      }
 else {
        entry.setUserUuid(entry.getUserUuid());
        if (context.getBooleanParameter(_NAMESPACE,"comments")) {
          context.addComments(DLFileEntry.class,entry.getPrimaryKeyObj());
        }
        if (context.getBooleanParameter(_NAMESPACE,"ratings")) {
          context.addRatingsEntries(DLFileEntry.class,entry.getPrimaryKeyObj());
        }
        if (context.getBooleanParameter(_NAMESPACE,"tags")) {
          context.addTagsEntries(DLFileEntry.class,entry.getPrimaryKeyObj());
        }
        InputStream in=DLFileEntryLocalServiceUtil.getFileAsStream(entry.getCompanyId(),entry.getUserId(),entry.getFolderId(),entry.getName());
        context.getZipWriter().addEntry(_ZIP_FOLDER + entry.getName(),FileUtil.getBytes(in));
        if (context.getBooleanParameter(_NAMESPACE,"ranks")) {
          List<DLFileRank> entryRanks=DLFileRankUtil.findByF_N(entry.getFolderId(),entry.getName());
          ranks.addAll(entryRanks);
        }
      }
    }
    xml=xStream.toXML(entries);
    el=root.addElement("documentlibrary-entries");
    tempDoc=DocumentUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    Iterator<DLFileShortcut> shortcutsItr=shortcuts.iterator();
    while (shortcutsItr.hasNext()) {
      DLFileShortcut shortcut=shortcutsItr.next();
      if (context.addPrimaryKey(DLFileShortcut.class,shortcut.getPrimaryKeyObj())) {
        shortcutsItr.remove();
      }
 else {
        shortcut.setUserUuid(shortcut.getUserUuid());
      }
    }
    xml=xStream.toXML(shortcuts);
    el=root.addElement("documentlibrary-shortcuts");
    tempDoc=DocumentUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    Iterator<DLFileRank> ranksItr=ranks.iterator();
    while (ranksItr.hasNext()) {
      DLFileRank rank=ranksItr.next();
      if (context.addPrimaryKey(DLFileRank.class,rank.getPrimaryKeyObj())) {
        ranksItr.remove();
      }
 else {
        rank.setUserUuid(rank.getUserUuid());
      }
    }
    xml=xStream.toXML(ranks);
    el=root.addElement("documentlibrary-ranks");
    tempDoc=DocumentUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    return doc.asXML();
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
