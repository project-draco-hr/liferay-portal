{
  boolean exportShortcuts=context.getBooleanParameter(_NAMESPACE,_SHORTCUTS);
  boolean exportRanks=context.getBooleanParameter(_NAMESPACE,_RANKS);
  boolean exportComments=context.getBooleanParameter(_NAMESPACE,_COMMENTS);
  boolean exportRatings=context.getBooleanParameter(_NAMESPACE,_RATINGS);
  boolean exportTags=context.getBooleanParameter(_NAMESPACE,_TAGS);
  try {
    XStream xStream=new XStream();
    Document doc=DocumentHelper.createDocument();
    Element root=doc.addElement("documentlibrary-data");
    root.addAttribute("group-id",String.valueOf(context.getGroupId()));
    List folders=DLFolderUtil.findByGroupId(context.getGroupId());
    List entries=new ArrayList();
    List shortcuts=new ArrayList();
    Iterator itr=folders.iterator();
    while (itr.hasNext()) {
      DLFolder folder=(DLFolder)itr.next();
      if (context.addPrimaryKey(DLFolder.class,folder.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        folder.setUserUuid(folder.getUserUuid());
        List folderEntries=DLFileEntryUtil.findByFolderId(folder.getFolderId());
        entries.addAll(folderEntries);
        if (exportShortcuts) {
          List folderShortcuts=DLFileShortcutUtil.findByFolderId(folder.getFolderId());
          shortcuts.addAll(folderShortcuts);
        }
      }
    }
    String xml=xStream.toXML(folders);
    Element el=root.addElement("documentlibrary-folders");
    Document tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    List ranks=new ArrayList();
    itr=entries.iterator();
    while (itr.hasNext()) {
      DLFileEntry entry=(DLFileEntry)itr.next();
      if (context.addPrimaryKey(DLFileEntry.class,entry.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        entry.setUserUuid(entry.getUserUuid());
        if (exportComments) {
          context.addComments(DLFileEntry.class,entry.getPrimaryKeyObj());
        }
        if (exportRatings) {
          context.addRatingsEntries(DLFileEntry.class,entry.getPrimaryKeyObj());
        }
        if (exportTags) {
          context.addTagsEntries(DLFileEntry.class,entry.getPrimaryKeyObj());
        }
        InputStream in=DLFileEntryLocalServiceUtil.getFileAsStream(entry.getCompanyId(),entry.getUserId(),entry.getFolderId(),entry.getName());
        context.getZipWriter().addEntry(_ZIP_FOLDER + entry.getName(),FileUtil.getBytes(in));
        if (exportRanks) {
          List entryRanks=DLFileRankUtil.findByF_N(entry.getFolderId(),entry.getName());
          ranks.addAll(entryRanks);
        }
      }
    }
    xml=xStream.toXML(entries);
    el=root.addElement("documentlibrary-entries");
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    itr=shortcuts.iterator();
    while (itr.hasNext()) {
      DLFileShortcut shortcut=(DLFileShortcut)itr.next();
      if (context.addPrimaryKey(DLFileShortcut.class,shortcut.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        shortcut.setUserUuid(shortcut.getUserUuid());
      }
    }
    xml=xStream.toXML(shortcuts);
    el=root.addElement("documentlibrary-shortcuts");
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    itr=ranks.iterator();
    while (itr.hasNext()) {
      DLFileRank rank=(DLFileRank)itr.next();
      if (context.addPrimaryKey(DLFileRank.class,rank.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        rank.setUserUuid(rank.getUserUuid());
      }
    }
    xml=xStream.toXML(ranks);
    el=root.addElement("documentlibrary-ranks");
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    return doc.asXML();
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
