{
  String path=repositoryElement.attributeValue("path");
  if (!portletDataContext.isPathNotProcessed(path)) {
    return;
  }
  Repository repository=(Repository)portletDataContext.getZipEntryAsObject(repositoryElement,path);
  long userId=portletDataContext.getUserId(repository.getUserUuid());
  ServiceContext serviceContext=portletDataContext.createServiceContext(repositoryElement,repository,_NAMESPACE);
  long importedRepositoryId=0;
  try {
    if (portletDataContext.isDataStrategyMirror()) {
      Repository existingRepository=RepositoryUtil.fetchByUUID_G(repository.getUuid(),portletDataContext.getScopeGroupId());
      if (existingRepository == null) {
        existingRepository=RepositoryLocalServiceUtil.fetchRepository(portletDataContext.getScopeGroupId(),repository.getName());
      }
      long classNameId=0;
      if (existingRepository != null) {
        classNameId=existingRepository.getClassNameId();
      }
      if ((existingRepository == null) || (classNameId != PortalUtil.getClassNameId(LiferayRepository.class))) {
        serviceContext.setUuid(repository.getUuid());
        importedRepositoryId=RepositoryLocalServiceUtil.addRepository(userId,portletDataContext.getScopeGroupId(),repository.getClassNameId(),DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,repository.getName(),repository.getDescription(),repository.getPortletId(),repository.getTypeSettingsProperties(),false,serviceContext);
      }
 else {
        RepositoryLocalServiceUtil.updateRepository(existingRepository.getRepositoryId(),repository.getName(),repository.getDescription());
        importedRepositoryId=existingRepository.getRepositoryId();
      }
    }
 else {
      importedRepositoryId=RepositoryLocalServiceUtil.addRepository(userId,portletDataContext.getScopeGroupId(),repository.getClassNameId(),DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,repository.getName(),repository.getDescription(),repository.getPortletId(),repository.getTypeSettingsProperties(),false,serviceContext);
    }
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to connect to repository {name=" + repository.getName() + ", typeSettings="+ repository.getTypeSettingsProperties()+ "}",e);
    }
  }
  Repository importedRepository=RepositoryLocalServiceUtil.getRepository(importedRepositoryId);
  portletDataContext.importClassedModel(repository,importedRepository,_NAMESPACE);
}
