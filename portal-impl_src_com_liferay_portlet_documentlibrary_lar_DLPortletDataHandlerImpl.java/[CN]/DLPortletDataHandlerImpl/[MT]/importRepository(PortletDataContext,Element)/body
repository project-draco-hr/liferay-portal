{
  String path=repositoryElement.attributeValue("path");
  if (!portletDataContext.isPathNotProcessed(path)) {
    return;
  }
  Repository repository=(Repository)portletDataContext.getZipEntryAsObject(path);
  long userId=portletDataContext.getUserId(repository.getUserUuid());
  long classNameId=PortalUtil.getClassNameId(repositoryElement.attributeValue("repositoryClassName"));
  String repositoryPath=getImportRepositoryPath(portletDataContext,repository.getRepositoryId());
  ServiceContext serviceContext=portletDataContext.createServiceContext(repositoryPath,repository,_NAMESPACE);
  try {
    RepositoryLocalServiceUtil.addRepository(userId,portletDataContext.getScopeGroupId(),classNameId,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,repository.getName(),repository.getDescription(),repository.getPortletId(),repository.getTypeSettingsProperties(),serviceContext);
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to connect to repository {name=" + repository.getName() + ",typeSettings="+ repository.getTypeSettingsProperties()+ "}",e);
    }
  }
}
