{
  long userId=context.getUserId(fileEntry.getUserUuid());
  long groupId=context.getGroupId();
  long folderId=MapUtil.getLong(folderPKs,fileEntry.getFolderId(),fileEntry.getFolderId());
  long[] assetCategoryIds=null;
  String[] assetTagNames=null;
  if (context.getBooleanParameter(_NAMESPACE,"categories")) {
    assetCategoryIds=context.getAssetCategoryIds(DLFileEntry.class,fileEntry.getFileEntryId());
  }
  if (context.getBooleanParameter(_NAMESPACE,"tags")) {
    assetTagNames=context.getAssetTagNames(DLFileEntry.class,fileEntry.getFileEntryId());
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setAssetCategoryIds(assetCategoryIds);
  serviceContext.setAssetTagNames(assetTagNames);
  serviceContext.setCreateDate(fileEntry.getCreateDate());
  serviceContext.setModifiedDate(fileEntry.getModifiedDate());
  serviceContext.setScopeGroupId(groupId);
  InputStream is=context.getZipEntryAsInputStream(binPath);
  if ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) && (folderId == fileEntry.getFolderId())) {
    String path=getImportFolderPath(context,folderId);
    DLFolder folder=(DLFolder)context.getZipEntryAsObject(path);
    importFolder(context,folderPKs,folder);
    folderId=MapUtil.getLong(folderPKs,fileEntry.getFolderId(),fileEntry.getFolderId());
  }
  DLFileEntry importedFileEntry=null;
  try {
    if ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) && (folderId > 0)) {
      DLFolderUtil.findByPrimaryKey(folderId);
    }
    if (context.getDataStrategy().equals(PortletDataHandlerKeys.DATA_STRATEGY_MIRROR)) {
      DLFileEntry existingFileEntry=DLFileEntryUtil.fetchByUUID_G(fileEntry.getUuid(),groupId);
      if (existingFileEntry == null) {
        importedFileEntry=DLFileEntryLocalServiceUtil.addFileEntry(fileEntry.getUuid(),userId,groupId,folderId,fileEntry.getName(),fileEntry.getTitle(),fileEntry.getDescription(),null,fileEntry.getExtraSettings(),is,fileEntry.getSize(),serviceContext);
      }
 else       if (!isDuplicateFileEntry(fileEntry,existingFileEntry)) {
        importedFileEntry=DLFileEntryLocalServiceUtil.updateFileEntry(userId,groupId,existingFileEntry.getFolderId(),folderId,existingFileEntry.getName(),fileEntry.getTitle(),fileEntry.getTitle(),fileEntry.getDescription(),null,true,fileEntry.getExtraSettings(),is,fileEntry.getSize(),serviceContext);
      }
    }
 else {
      importedFileEntry=DLFileEntryLocalServiceUtil.addFileEntry(null,userId,groupId,folderId,fileEntry.getName(),fileEntry.getTitle(),fileEntry.getDescription(),null,fileEntry.getExtraSettings(),is,fileEntry.getSize(),serviceContext);
    }
    fileEntryNames.put(fileEntry.getName(),importedFileEntry.getName());
    String lockKey=DLUtil.getLockId(fileEntry.getGroupId(),fileEntry.getFolderId(),fileEntry.getName());
    String newLockKey=DLUtil.getLockId(importedFileEntry.getGroupId(),importedFileEntry.getFolderId(),importedFileEntry.getName());
    context.importLocks(DLFileEntry.class,lockKey,newLockKey);
    context.importPermissions(DLFileEntry.class,fileEntry.getFileEntryId(),importedFileEntry.getFileEntryId());
    if (context.getBooleanParameter(_NAMESPACE,"comments")) {
      context.importComments(DLFileEntry.class,fileEntry.getFileEntryId(),importedFileEntry.getFileEntryId(),groupId);
    }
    if (context.getBooleanParameter(_NAMESPACE,"ratings")) {
      context.importRatingsEntries(DLFileEntry.class,fileEntry.getFileEntryId(),importedFileEntry.getFileEntryId());
    }
  }
 catch (  NoSuchFolderException nsfe) {
    _log.error("Could not find the parent folder for entry " + fileEntry.getFileEntryId());
  }
}
