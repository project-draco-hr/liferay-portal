{
  long userId=context.getUserId(fileEntry.getUserUuid());
  long folderId=MapUtil.getLong(folderPKs,fileEntry.getFolderId(),fileEntry.getFolderId());
  String[] tagsCategories=null;
  String[] tagsEntries=null;
  if (context.getBooleanParameter(_NAMESPACE,"categories")) {
    tagsCategories=context.getTagsCategories(DLFileEntry.class,fileEntry.getFileEntryId());
  }
  if (context.getBooleanParameter(_NAMESPACE,"tags")) {
    tagsEntries=context.getTagsEntries(DLFileEntry.class,fileEntry.getFileEntryId());
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setScopeGroupId(context.getGroupId());
  serviceContext.setTagsCategories(tagsCategories);
  serviceContext.setTagsEntries(tagsEntries);
  byte[] bytes=context.getZipEntryAsByteArray(binPath);
  if ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) && (folderId == fileEntry.getFolderId())) {
    String path=getImportFolderPath(context,folderId);
    DLFolder folder=(DLFolder)context.getZipEntryAsObject(path);
    importFolder(context,folderPKs,folder);
    folderId=MapUtil.getLong(folderPKs,fileEntry.getFolderId(),fileEntry.getFolderId());
  }
  DLFileEntry existingFileEntry=null;
  try {
    DLFolderUtil.findByPrimaryKey(folderId);
    if (context.getDataStrategy().equals(PortletDataHandlerKeys.DATA_STRATEGY_MIRROR)) {
      try {
        existingFileEntry=DLFileEntryFinderUtil.findByUuid_G(fileEntry.getUuid(),context.getGroupId());
        existingFileEntry=DLFileEntryLocalServiceUtil.updateFileEntry(userId,existingFileEntry.getFolderId(),folderId,existingFileEntry.getName(),fileEntry.getName(),fileEntry.getTitle(),fileEntry.getDescription(),fileEntry.getExtraSettings(),bytes,serviceContext);
      }
 catch (      NoSuchFileEntryException nsfee) {
        existingFileEntry=DLFileEntryLocalServiceUtil.addFileEntry(fileEntry.getUuid(),userId,folderId,fileEntry.getName(),fileEntry.getTitle(),fileEntry.getDescription(),fileEntry.getExtraSettings(),bytes,serviceContext);
      }
    }
 else {
      existingFileEntry=DLFileEntryLocalServiceUtil.addFileEntry(userId,folderId,fileEntry.getName(),fileEntry.getTitle(),fileEntry.getDescription(),fileEntry.getExtraSettings(),bytes,serviceContext);
    }
    fileEntryNames.put(fileEntry.getName(),existingFileEntry.getName());
    if (context.getBooleanParameter(_NAMESPACE,"comments")) {
      context.importComments(DLFileEntry.class,fileEntry.getFileEntryId(),existingFileEntry.getFileEntryId(),context.getGroupId());
    }
    if (context.getBooleanParameter(_NAMESPACE,"ratings")) {
      context.importRatingsEntries(DLFileEntry.class,fileEntry.getFileEntryId(),existingFileEntry.getFileEntryId());
    }
  }
 catch (  NoSuchFolderException nsfe) {
    _log.error("Could not find the parent folder for entry " + fileEntry.getFileEntryId());
  }
}
