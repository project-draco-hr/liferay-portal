{
  long userId=portletDataContext.getUserId(fileShortcut.getUserUuid());
  Map<Long,Long> folderPKs=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DLFolder.class);
  long folderId=MapUtil.getLong(folderPKs,fileShortcut.getFolderId(),fileShortcut.getFolderId());
  long groupId=portletDataContext.getScopeGroupId();
  if (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    Folder folder=FolderUtil.findByPrimaryKey(folderId);
    groupId=folder.getRepositoryId();
  }
  Map<Long,Long> fileEntryPKs=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DLFileEntry.class);
  long fileEntryId=MapUtil.getLong(fileEntryPKs,fileShortcut.getToFileEntryId(),fileShortcut.getToFileEntryId());
  ServiceContext serviceContext=portletDataContext.createServiceContext(fileShortcutElement,fileShortcut,_NAMESPACE);
  DLFileShortcut importedFileShortcut=null;
  if (portletDataContext.isDataStrategyMirror()) {
    DLFileShortcut existingFileShortcut=DLFileShortcutUtil.fetchByUUID_G(fileShortcut.getUuid(),portletDataContext.getScopeGroupId());
    if (existingFileShortcut == null) {
      serviceContext.setUuid(fileShortcut.getUuid());
      importedFileShortcut=DLAppLocalServiceUtil.addFileShortcut(userId,groupId,folderId,fileEntryId,serviceContext);
    }
 else {
      importedFileShortcut=DLAppLocalServiceUtil.updateFileShortcut(userId,existingFileShortcut.getFileShortcutId(),folderId,fileEntryId,serviceContext);
    }
  }
 else {
    importedFileShortcut=DLAppLocalServiceUtil.addFileShortcut(userId,groupId,folderId,fileEntryId,serviceContext);
  }
  portletDataContext.importClassedModel(fileShortcut,importedFileShortcut,_NAMESPACE);
}
