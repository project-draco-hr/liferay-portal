{
  if (!context.isWithinDateRange(fileEntry.getModifiedDate())) {
    return;
  }
  DLFileVersion fileVersion=DLFileVersionLocalServiceUtil.getFileVersion(context.getScopeGroupId(),fileEntry.getFolderId(),fileEntry.getName(),fileEntry.getVersion());
  if (fileVersion.getStatus() != WorkflowConstants.STATUS_APPROVED) {
    return;
  }
  if (foldersEl != null) {
    exportParentFolder(context,foldersEl,fileEntry.getFolderId());
  }
  String path=getFileEntryPath(context,fileEntry);
  if (context.isPathNotProcessed(path)) {
    Element fileEntryEl=fileEntriesEl.addElement("file-entry");
    fileEntryEl.addAttribute("path",path);
    String binPath=getFileEntryBinPath(context,fileEntry);
    fileEntryEl.addAttribute("bin-path",binPath);
    fileEntry.setUserUuid(fileEntry.getUserUuid());
    context.addLocks(DLFileEntry.class,DLUtil.getLockId(fileEntry.getGroupId(),fileEntry.getFolderId(),fileEntry.getName()));
    context.addPermissions(DLFileEntry.class,fileEntry.getFileEntryId());
    if (context.getBooleanParameter(_NAMESPACE,"categories")) {
      context.addAssetCategories(DLFileEntry.class,fileEntry.getFileEntryId());
    }
    if (context.getBooleanParameter(_NAMESPACE,"comments")) {
      context.addComments(DLFileEntry.class,fileEntry.getFileEntryId());
    }
    if (context.getBooleanParameter(_NAMESPACE,"ratings")) {
      context.addRatingsEntries(DLFileEntry.class,fileEntry.getFileEntryId());
    }
    if (context.getBooleanParameter(_NAMESPACE,"tags")) {
      context.addAssetTags(DLFileEntry.class,fileEntry.getFileEntryId());
    }
    long repositoryId=getRepositoryId(fileEntry.getGroupId(),fileEntry.getFolderId());
    InputStream is=DLLocalServiceUtil.getFileAsStream(fileEntry.getCompanyId(),repositoryId,fileEntry.getName(),fileEntry.getVersion());
    if (is == null) {
      if (_log.isWarnEnabled()) {
        _log.warn("No file found for file entry " + fileEntry.getFileEntryId());
      }
      fileEntryEl.detach();
      return;
    }
    try {
      context.addZipEntry(getFileEntryBinPath(context,fileEntry),is);
    }
  finally {
      try {
        is.close();
      }
 catch (      IOException ioe) {
        _log.error(ioe,ioe);
      }
    }
    context.addZipEntry(path,fileEntry);
    if (context.getBooleanParameter(_NAMESPACE,"ranks")) {
      List<DLFileRank> fileRanks=DLFileRankUtil.findByF_N(fileEntry.getFolderId(),fileEntry.getName());
      for (      DLFileRank fileRank : fileRanks) {
        exportFileRank(context,fileRanksEl,fileRank);
      }
    }
  }
}
