{
  try {
    Document doc=DocumentUtil.readDocumentFromXML(data);
    Element root=doc.getRootElement();
    List<Element> folderEls=root.element("folders").elements("folder");
    Map<Long,Long> folderPKs=context.getNewPrimaryKeysMap(DLFolder.class);
    for (    Element folderEl : folderEls) {
      String path=folderEl.attributeValue("path");
      if (context.isPathNotProcessed(path)) {
        DLFolder folder=(DLFolder)context.getZipEntryAsObject(path);
        importFolder(context,folderPKs,folder);
      }
    }
    List<Element> fileEntryEls=root.element("file-entries").elements("file-entry");
    Map<String,String> fileEntryNames=context.getNewPrimaryKeysMap(DLFileEntry.class);
    for (    Element fileEntryEl : fileEntryEls) {
      String path=fileEntryEl.attributeValue("path");
      String binPath=fileEntryEl.attributeValue("bin-path");
      if (context.isPathNotProcessed(path)) {
        DLFileEntry fileEntry=(DLFileEntry)context.getZipEntryAsObject(path);
        importFileEntry(context,folderPKs,fileEntryNames,fileEntry,binPath);
      }
    }
    if (context.getBooleanParameter(_NAMESPACE,"shortcuts")) {
      List<Element> fileShortcutEls=root.element("file-shortcuts").elements("file-shortcut");
      for (      Element fileShortcutEl : fileShortcutEls) {
        String path=fileShortcutEl.attributeValue("path");
        if (context.isPathNotProcessed(path)) {
          DLFileShortcut fileShortcut=(DLFileShortcut)context.getZipEntryAsObject(path);
          importFileShortcut(context,folderPKs,fileEntryNames,fileShortcut);
        }
      }
    }
    if (context.getBooleanParameter(_NAMESPACE,"ranks")) {
      List<Element> fileRankEls=root.element("file-ranks").elements("file-rank");
      for (      Element fileRankEl : fileRankEls) {
        String path=fileRankEl.attributeValue("path");
        if (context.isPathNotProcessed(path)) {
          DLFileRank fileRank=(DLFileRank)context.getZipEntryAsObject(path);
          importFileRank(context,folderPKs,fileEntryNames,fileRank);
        }
      }
    }
    return null;
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
