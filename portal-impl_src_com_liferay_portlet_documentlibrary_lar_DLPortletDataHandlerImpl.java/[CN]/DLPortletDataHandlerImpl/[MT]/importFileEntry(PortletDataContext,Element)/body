{
  String path=fileEntryElement.attributeValue("path");
  if (!portletDataContext.isPathNotProcessed(path)) {
    return;
  }
  DLFileEntry fileEntry=(DLFileEntry)portletDataContext.getZipEntryAsObject(path);
  String binPath=fileEntryElement.attributeValue("bin-path");
  long userId=portletDataContext.getUserId(fileEntry.getUserUuid());
  Map<Long,Long> folderPKs=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DLFolder.class);
  long folderId=MapUtil.getLong(folderPKs,fileEntry.getFolderId(),fileEntry.getFolderId());
  long[] assetCategoryIds=null;
  String[] assetTagNames=null;
  if (portletDataContext.getBooleanParameter(_NAMESPACE,"categories")) {
    assetCategoryIds=portletDataContext.getAssetCategoryIds(DLFileEntry.class,fileEntry.getFileEntryId());
  }
  if (portletDataContext.getBooleanParameter(_NAMESPACE,"tags")) {
    assetTagNames=portletDataContext.getAssetTagNames(DLFileEntry.class,fileEntry.getFileEntryId());
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setAssetCategoryIds(assetCategoryIds);
  serviceContext.setAssetTagNames(assetTagNames);
  serviceContext.setCreateDate(fileEntry.getCreateDate());
  serviceContext.setModifiedDate(fileEntry.getModifiedDate());
  serviceContext.setScopeGroupId(portletDataContext.getScopeGroupId());
  InputStream is=portletDataContext.getZipEntryAsInputStream(binPath);
  if ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) && (folderId == fileEntry.getFolderId())) {
    String folderPath=getImportFolderPath(portletDataContext,folderId);
    DLFolder folder=(DLFolder)portletDataContext.getZipEntryAsObject(folderPath);
    importFolder(portletDataContext,folder);
    folderId=MapUtil.getLong(folderPKs,fileEntry.getFolderId(),fileEntry.getFolderId());
  }
  fileEntry.setFolderId(folderId);
  DLFileEntry importedFileEntry=null;
  String titleWithExtension=fileEntry.getTitle();
  String extension=fileEntry.getExtension();
  if (!titleWithExtension.endsWith(StringPool.PERIOD + extension)) {
    titleWithExtension+=StringPool.PERIOD + extension;
  }
  if (portletDataContext.isDataStrategyMirror()) {
    DLFileEntry existingFileEntry=DLFileEntryUtil.fetchByUUID_G(fileEntry.getUuid(),portletDataContext.getScopeGroupId());
    if (existingFileEntry == null) {
      DLFileEntry existingTitleFileEntry=DLFileEntryUtil.fetchByG_F_T(portletDataContext.getScopeGroupId(),folderId,fileEntry.getTitle());
      if (existingTitleFileEntry != null) {
        if (portletDataContext.isDataStrategyMirrorWithOverwritting()) {
          DLAppLocalServiceUtil.deleteFileEntry(existingTitleFileEntry.getFileEntryId());
        }
 else {
          String originalTitle=fileEntry.getTitle();
          String dotExtension=StringPool.PERIOD + extension;
          if (originalTitle.endsWith(dotExtension)) {
            int pos=originalTitle.lastIndexOf(dotExtension);
            originalTitle=originalTitle.substring(0,pos);
          }
          for (int i=1; ; i++) {
            titleWithExtension=originalTitle + StringPool.SPACE + i+ dotExtension;
            existingTitleFileEntry=DLFileEntryUtil.findByG_F_T(portletDataContext.getScopeGroupId(),folderId,titleWithExtension);
            if (existingTitleFileEntry == null) {
              break;
            }
          }
        }
      }
      serviceContext.setUuid(fileEntry.getUuid());
      importedFileEntry=DLAppLocalServiceUtil.addFileEntry(userId,portletDataContext.getScopeGroupId(),folderId,titleWithExtension,fileEntry.getDescription(),null,fileEntry.getExtraSettings(),is,fileEntry.getSize(),serviceContext);
    }
 else     if (!isDuplicateFileEntry(fileEntry,existingFileEntry)) {
      importedFileEntry=DLAppLocalServiceUtil.updateFileEntry(userId,existingFileEntry.getFileEntryId(),fileEntry.getTitle(),fileEntry.getTitle(),fileEntry.getDescription(),null,true,fileEntry.getExtraSettings(),is,fileEntry.getSize(),serviceContext);
    }
 else {
      DLFileVersion latestFileVersion=existingFileEntry.getLatestFileVersion();
      DLAppLocalServiceUtil.updateAsset(userId,existingFileEntry,latestFileVersion,assetCategoryIds,assetTagNames);
      Indexer indexer=IndexerRegistryUtil.getIndexer(DLFileEntry.class);
      indexer.reindex(existingFileEntry);
      importedFileEntry=existingFileEntry;
    }
  }
 else {
    try {
      importedFileEntry=DLAppLocalServiceUtil.addFileEntry(userId,portletDataContext.getScopeGroupId(),folderId,titleWithExtension,fileEntry.getDescription(),null,fileEntry.getExtraSettings(),is,fileEntry.getSize(),serviceContext);
    }
 catch (    DuplicateFileException dfe) {
      String title=fileEntry.getTitle();
      String[] titleParts=title.split("\\.",2);
      title=titleParts[0] + PwdGenerator.getPassword();
      if (titleParts.length > 1) {
        title+=StringPool.PERIOD + titleParts[1];
      }
      if (!title.endsWith(StringPool.PERIOD + extension)) {
        title+=StringPool.PERIOD + extension;
      }
      importedFileEntry=DLAppLocalServiceUtil.addFileEntry(userId,portletDataContext.getScopeGroupId(),folderId,title,fileEntry.getDescription(),null,fileEntry.getExtraSettings(),is,fileEntry.getSize(),serviceContext);
    }
  }
  Map<Long,Long> fileEntryPKs=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DLFileEntry.class);
  fileEntryPKs.put(fileEntry.getFileEntryId(),importedFileEntry.getFileEntryId());
  Map<String,String> fileEntryNames=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(DLFileEntry.class.getName() + ".name");
  fileEntryNames.put(fileEntry.getName(),importedFileEntry.getName());
  String lockKey=String.valueOf(fileEntry.getFileEntryId());
  String newLockKey=String.valueOf(importedFileEntry.getFileEntryId());
  portletDataContext.importLocks(DLFileEntry.class,lockKey,newLockKey);
  portletDataContext.importPermissions(DLFileEntry.class,fileEntry.getFileEntryId(),importedFileEntry.getFileEntryId());
  if (portletDataContext.getBooleanParameter(_NAMESPACE,"comments")) {
    portletDataContext.importComments(DLFileEntry.class,fileEntry.getFileEntryId(),importedFileEntry.getFileEntryId(),portletDataContext.getScopeGroupId());
  }
  if (portletDataContext.getBooleanParameter(_NAMESPACE,"ratings")) {
    portletDataContext.importRatingsEntries(DLFileEntry.class,fileEntry.getFileEntryId(),importedFileEntry.getFileEntryId());
  }
}
