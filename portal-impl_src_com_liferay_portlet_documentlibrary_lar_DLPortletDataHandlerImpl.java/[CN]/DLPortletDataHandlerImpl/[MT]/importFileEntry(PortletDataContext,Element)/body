{
  String path=fileEntryElement.attributeValue("path");
  if (!portletDataContext.isPathNotProcessed(path)) {
    return;
  }
  FileEntry fileEntry=(FileEntry)portletDataContext.getZipEntryAsObject(path);
  long userId=portletDataContext.getUserId(fileEntry.getUserUuid());
  Map<Long,Long> folderPKs=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DLFolder.class);
  long folderId=MapUtil.getLong(folderPKs,fileEntry.getFolderId(),fileEntry.getFolderId());
  long[] assetCategoryIds=null;
  String[] assetTagNames=null;
  if (portletDataContext.getBooleanParameter(_NAMESPACE,"categories")) {
    assetCategoryIds=portletDataContext.getAssetCategoryIds(FileEntry.class,fileEntry.getFileEntryId());
  }
  if (portletDataContext.getBooleanParameter(_NAMESPACE,"tags")) {
    assetTagNames=portletDataContext.getAssetTagNames(FileEntry.class,fileEntry.getFileEntryId());
  }
  ServiceContext serviceContext=portletDataContext.createServiceContext(fileEntryElement,fileEntry,_NAMESPACE);
  serviceContext.setAttribute("sourceFileName","A." + fileEntry.getExtension());
  String binPath=fileEntryElement.attributeValue("bin-path");
  InputStream is=null;
  if (Validator.isNull(binPath) && portletDataContext.isPerformDirectBinaryImport()) {
    is=FileEntryUtil.getContentStream(fileEntry);
  }
 else {
    is=portletDataContext.getZipEntryAsInputStream(binPath);
  }
  String folderUuid=StringPool.BLANK;
  if ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) && (folderId == fileEntry.getFolderId())) {
    String folderPath=getImportFolderPath(portletDataContext,folderId);
    Folder folder=(Folder)portletDataContext.getZipEntryAsObject(folderPath);
    importFolder(portletDataContext,folderPath,folder);
    folderUuid=folder.getUuid();
    folderId=MapUtil.getLong(folderPKs,fileEntry.getFolderId(),fileEntry.getFolderId());
  }
  FileEntry importedFileEntry=null;
  String titleWithExtension=fileEntry.getTitle();
  String extension=fileEntry.getExtension();
  if (!titleWithExtension.endsWith(StringPool.PERIOD + extension)) {
    titleWithExtension+=StringPool.PERIOD + extension;
  }
  if (portletDataContext.isDataStrategyMirror()) {
    FileEntry existingFileEntry=FileEntryUtil.fetchByUUID_R(fileEntry.getUuid(),portletDataContext.getScopeGroupId());
    if (existingFileEntry == null) {
      FileEntry existingTitleFileEntry=FileEntryUtil.fetchByR_F_T(portletDataContext.getScopeGroupId(),folderId,fileEntry.getTitle());
      if (existingTitleFileEntry != null) {
        if (portletDataContext.isDataStrategyMirrorWithOverwritting()) {
          DLAppLocalServiceUtil.deleteFileEntry(existingTitleFileEntry.getFileEntryId());
        }
 else {
          String originalTitle=fileEntry.getTitle();
          String dotExtension=StringPool.PERIOD + extension;
          if (originalTitle.endsWith(dotExtension)) {
            int pos=originalTitle.lastIndexOf(dotExtension);
            originalTitle=originalTitle.substring(0,pos);
          }
          for (int i=1; ; i++) {
            titleWithExtension=originalTitle + StringPool.SPACE + i+ dotExtension;
            existingTitleFileEntry=FileEntryUtil.findByR_F_T(portletDataContext.getScopeGroupId(),folderId,titleWithExtension);
            if (existingTitleFileEntry == null) {
              break;
            }
          }
        }
      }
      serviceContext.setUuid(fileEntry.getUuid());
      importedFileEntry=DLAppLocalServiceUtil.addFileEntry(userId,portletDataContext.getScopeGroupId(),folderId,fileEntry.getMimeType(),titleWithExtension,fileEntry.getDescription(),null,is,fileEntry.getSize(),serviceContext);
    }
 else     if (!isDuplicateFileEntry(folderUuid,fileEntry,existingFileEntry)) {
      importedFileEntry=DLAppLocalServiceUtil.updateFileEntry(userId,existingFileEntry.getFileEntryId(),fileEntry.getTitle(),fileEntry.getMimeType(),fileEntry.getTitle(),fileEntry.getDescription(),null,true,is,fileEntry.getSize(),serviceContext);
    }
 else {
      FileVersion latestFileVersion=existingFileEntry.getLatestFileVersion();
      DLAppLocalServiceUtil.updateAsset(userId,existingFileEntry,latestFileVersion,assetCategoryIds,assetTagNames,null);
      if (existingFileEntry instanceof LiferayFileEntry) {
        LiferayFileEntry liferayFileEntry=(LiferayFileEntry)existingFileEntry;
        Indexer indexer=IndexerRegistryUtil.getIndexer(DLFileEntry.class);
        indexer.reindex(liferayFileEntry.getModel());
      }
      importedFileEntry=existingFileEntry;
    }
  }
 else {
    try {
      importedFileEntry=DLAppLocalServiceUtil.addFileEntry(userId,portletDataContext.getScopeGroupId(),folderId,fileEntry.getMimeType(),titleWithExtension,fileEntry.getDescription(),null,is,fileEntry.getSize(),serviceContext);
    }
 catch (    DuplicateFileException dfe) {
      String title=fileEntry.getTitle();
      String[] titleParts=title.split("\\.",2);
      title=titleParts[0] + PwdGenerator.getPassword();
      if (titleParts.length > 1) {
        title+=StringPool.PERIOD + titleParts[1];
      }
      if (!title.endsWith(StringPool.PERIOD + extension)) {
        title+=StringPool.PERIOD + extension;
      }
      importedFileEntry=DLAppLocalServiceUtil.addFileEntry(userId,portletDataContext.getScopeGroupId(),folderId,fileEntry.getMimeType(),title,fileEntry.getDescription(),null,is,fileEntry.getSize(),serviceContext);
    }
  }
  Map<String,String> fileEntryTitles=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(FileEntry.class.getName() + ".title");
  fileEntryTitles.put(fileEntry.getTitle(),importedFileEntry.getTitle());
  portletDataContext.importClassedModel(fileEntry,importedFileEntry,_NAMESPACE);
}
