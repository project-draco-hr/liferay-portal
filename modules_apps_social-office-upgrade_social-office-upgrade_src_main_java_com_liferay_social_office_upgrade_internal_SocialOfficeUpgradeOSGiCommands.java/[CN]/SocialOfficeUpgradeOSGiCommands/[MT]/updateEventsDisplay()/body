{
  ActionableDynamicQuery actionableDynamicQuery=_layoutLocalService.getActionableDynamicQuery();
  actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    public void addCriteria(    DynamicQuery dynamicQuery){
      dynamicQuery.add(RestrictionsFactoryUtil.like("typeSettings","%1_WAR_eventsdisplayportlet%"));
    }
  }
);
  final AtomicInteger atomicInteger=new AtomicInteger(0);
  actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<Layout>(){
    public void performAction(    Layout layout) throws PortalException {
      String newPortletId=PortletConstants.assemblePortletId("com_liferay_calendar_web_portlet_CalendarPortlet",StringUtil.randomId());
      String typeSettings=layout.getTypeSettings();
      typeSettings=typeSettings.replace("1_WAR_eventsdisplayportlet",newPortletId);
      layout.setTypeSettings(typeSettings);
      _layoutLocalService.updateLayout(layout);
      List<PortletPreferences> preferencesList=_portletPreferencesLocalService.getPortletPreferences(layout.getPlid(),"1_WAR_eventsdisplayportlet");
      for (      PortletPreferences preferences : preferencesList) {
        _addPreferences(preferences);
        preferences.setPortletId(newPortletId);
        _portletPreferencesLocalService.updatePortletPreferences(preferences);
      }
      atomicInteger.incrementAndGet();
    }
    private void _addPreferences(    PortletPreferences portletPreferences) throws PortalException {
      Document document;
      try {
        document=SAXReaderUtil.read(portletPreferences.getPreferences());
      }
 catch (      DocumentException de) {
        throw new PortalException(de);
      }
      Element preferencesElement=document.getRootElement();
      _addPreference(preferencesElement,"displaySchedulerHeader","false");
      _addPreference(preferencesElement,"showMonthView","false");
      _addPreference(preferencesElement,"showAgendaView","true");
      _addPreference(preferencesElement,"showWeekView","false");
      _addPreference(preferencesElement,"showDayView","false");
      _addPreference(preferencesElement,"defaultView","agenda");
      _addPreference(preferencesElement,"displaySchedulerOnly","true");
      _addPreference(preferencesElement,"showUserEvents","false");
      portletPreferences.setPreferences(preferencesElement.asXML());
    }
    private void _addPreference(    Element rootElement,    String name,    String value){
      Element nameElement=SAXReaderUtil.createElement("name");
      nameElement.setText(name);
      Element valueElement=SAXReaderUtil.createElement("value");
      valueElement.setText(value);
      Element preferenceElement=SAXReaderUtil.createElement("preference");
      preferenceElement.add(nameElement);
      preferenceElement.add(valueElement);
      rootElement.add(preferenceElement);
    }
  }
);
  actionableDynamicQuery.performActions();
  System.out.printf("[socialOffice:updateEventsDisplay] %d Events Display instances " + "converted to Calendar.%n",atomicInteger.get());
}
