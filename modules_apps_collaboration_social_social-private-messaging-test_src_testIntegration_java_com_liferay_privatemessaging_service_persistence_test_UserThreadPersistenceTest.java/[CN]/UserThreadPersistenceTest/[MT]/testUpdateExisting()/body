{
  long pk=RandomTestUtil.nextLong();
  UserThread newUserThread=_persistence.create(pk);
  newUserThread.setCompanyId(RandomTestUtil.nextLong());
  newUserThread.setUserId(RandomTestUtil.nextLong());
  newUserThread.setUserName(RandomTestUtil.randomString());
  newUserThread.setCreateDate(RandomTestUtil.nextDate());
  newUserThread.setModifiedDate(RandomTestUtil.nextDate());
  newUserThread.setMbThreadId(RandomTestUtil.nextLong());
  newUserThread.setTopMBMessageId(RandomTestUtil.nextLong());
  newUserThread.setRead(RandomTestUtil.randomBoolean());
  newUserThread.setDeleted(RandomTestUtil.randomBoolean());
  _userThreads.add(_persistence.update(newUserThread));
  UserThread existingUserThread=_persistence.findByPrimaryKey(newUserThread.getPrimaryKey());
  Assert.assertEquals(existingUserThread.getUserThreadId(),newUserThread.getUserThreadId());
  Assert.assertEquals(existingUserThread.getCompanyId(),newUserThread.getCompanyId());
  Assert.assertEquals(existingUserThread.getUserId(),newUserThread.getUserId());
  Assert.assertEquals(existingUserThread.getUserName(),newUserThread.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingUserThread.getCreateDate()),Time.getShortTimestamp(newUserThread.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingUserThread.getModifiedDate()),Time.getShortTimestamp(newUserThread.getModifiedDate()));
  Assert.assertEquals(existingUserThread.getMbThreadId(),newUserThread.getMbThreadId());
  Assert.assertEquals(existingUserThread.getTopMBMessageId(),newUserThread.getTopMBMessageId());
  Assert.assertEquals(existingUserThread.getRead(),newUserThread.getRead());
  Assert.assertEquals(existingUserThread.getDeleted(),newUserThread.getDeleted());
}
