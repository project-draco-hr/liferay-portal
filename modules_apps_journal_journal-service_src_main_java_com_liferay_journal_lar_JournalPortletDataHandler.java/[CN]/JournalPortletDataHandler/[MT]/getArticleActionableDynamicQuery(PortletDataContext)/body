{
  ExportActionableDynamicQuery exportActionableDynamicQuery=_journalArticleLocalService.getExportActionableDynamicQuery(portletDataContext);
  final ExportActionableDynamicQuery.AddCriteriaMethod addCriteriaMethod=exportActionableDynamicQuery.getAddCriteriaMethod();
  exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      addCriteriaMethod.addCriteria(dynamicQuery);
      if (portletDataContext.getBooleanParameter(NAMESPACE,"version-history")) {
        return;
      }
      Class<?> clazz=getClass();
      DynamicQuery versionArticleDynamicQuery=DynamicQueryFactoryUtil.forClass(JournalArticle.class,"versionArticle",clazz.getClassLoader());
      versionArticleDynamicQuery.setProjection(ProjectionFactoryUtil.alias(ProjectionFactoryUtil.max("versionArticle.version"),"versionArticle.version"));
      versionArticleDynamicQuery.add(RestrictionsFactoryUtil.eqProperty("this.resourcePrimKey","versionArticle.resourcePrimKey"));
      Property workflowStatusProperty=PropertyFactoryUtil.forName("status");
      StagedModelDataHandler<?> stagedModelDataHandler=StagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(JournalArticle.class.getName());
      versionArticleDynamicQuery.add(workflowStatusProperty.in(stagedModelDataHandler.getExportableStatuses()));
      Property versionProperty=PropertyFactoryUtil.forName("version");
      dynamicQuery.add(versionProperty.eq(versionArticleDynamicQuery));
    }
  }
);
  exportActionableDynamicQuery.setStagedModelType(new StagedModelType(JournalArticle.class.getName()));
  return exportActionableDynamicQuery;
}
