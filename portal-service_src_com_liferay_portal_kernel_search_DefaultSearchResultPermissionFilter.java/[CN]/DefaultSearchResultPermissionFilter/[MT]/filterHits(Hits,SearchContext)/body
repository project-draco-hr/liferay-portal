{
  List<Document> docs=new ArrayList<Document>();
  List<Float> scores=new ArrayList<Float>();
  Document[] documents=hits.getDocs();
  int excludeDocsSize=0;
  int status=GetterUtil.getInteger(searchContext.getAttribute(Field.STATUS),WorkflowConstants.STATUS_APPROVED);
  for (int i=0; i < documents.length; i++) {
    Document document=documents[i];
    String entryClassName=document.get(Field.ENTRY_CLASS_NAME);
    Indexer indexer=IndexerRegistryUtil.getIndexer(entryClassName);
    long entryClassPK=GetterUtil.getLong(document.get(Field.ENTRY_CLASS_PK));
    try {
      if ((indexer == null) || (indexer.isFilterSearch() && indexer.hasPermission(_permissionChecker,entryClassName,entryClassPK,ActionKeys.VIEW) && indexer.isVisibleRelatedEntry(entryClassPK,status)) || !indexer.isFilterSearch()|| !indexer.isPermissionAware()) {
        docs.add(document);
        scores.add(hits.score(i));
      }
 else {
        excludeDocsSize++;
      }
    }
 catch (    Exception e) {
      excludeDocsSize++;
    }
  }
  hits.setDocs(docs.toArray(new Document[docs.size()]));
  hits.setScores(scores.toArray(new Float[scores.size()]));
  hits.setSearchTime((float)(System.currentTimeMillis() - hits.getStart()) / Time.SECOND);
  hits.setLength(hits.getLength() - excludeDocsSize);
}
