{
  String className=ParamUtil.getString(request,"serviceClassName");
  String methodName=ParamUtil.getString(request,"serviceMethodName");
  String[] serviceParameters=getStringArrayFromJSON(request,"serviceParameters");
  String[] serviceParameterTypes=getStringArrayFromJSON(request,"serviceParameterTypes");
  if (!isValidRequest(request)) {
    return null;
  }
  ClassLoader contextClassLoader=ClassLoaderUtil.getContextClassLoader();
  Class<?> clazz=contextClassLoader.loadClass(className);
  Object[] methodAndParameterTypes=getMethodAndParameterTypes(clazz,methodName,serviceParameters,serviceParameterTypes);
  if (methodAndParameterTypes == null) {
    return null;
  }
  Method method=(Method)methodAndParameterTypes[0];
  Type[] parameterTypes=(Type[])methodAndParameterTypes[1];
  Object[] args=new Object[serviceParameters.length];
  for (int i=0; i < serviceParameters.length; i++) {
    args[i]=getArgValue(request,clazz,methodName,serviceParameters[i],parameterTypes[i]);
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Invoking " + clazz + " on method "+ method.getName()+ " with args "+ Arrays.toString(args));
    }
    Object returnObj=null;
    boolean remoteAccess=AccessControlThreadLocal.isRemoteAccess();
    try {
      AccessControlThreadLocal.setRemoteAccess(true);
      returnObj=method.invoke(clazz,args);
    }
  finally {
      AccessControlThreadLocal.setRemoteAccess(remoteAccess);
    }
    if (returnObj != null) {
      return getReturnValue(returnObj);
    }
 else {
      return JSONFactoryUtil.getNullJSON();
    }
  }
 catch (  Exception e) {
    if (_log.isDebugEnabled()) {
      _log.debug("Invoked " + clazz + " on method "+ method.getName()+ " with args "+ Arrays.toString(args),e);
    }
    return JSONFactoryUtil.serializeThrowable(e);
  }
}
