{
  String className=ParamUtil.getString(request,"serviceClassName");
  String methodName=ParamUtil.getString(request,"serviceMethodName");
  String[] serviceParameters=getStringArrayFromJSON(request,"serviceParameters");
  String[] serviceParameterTypes=getStringArrayFromJSON(request,"serviceParameterTypes");
  if (!isValidRequest(request)) {
    return null;
  }
  Class<?> classObj=Class.forName(className);
  Object[] methodAndParameterTypes=getMethodAndParameterTypes(classObj,methodName,serviceParameters,serviceParameterTypes);
  if (methodAndParameterTypes != null) {
    Method method=(Method)methodAndParameterTypes[0];
    Class<?>[] parameterTypes=(Class[])methodAndParameterTypes[1];
    Object[] args=new Object[serviceParameters.length];
    for (int i=0; i < serviceParameters.length; i++) {
      args[i]=getArgValue(request,classObj,methodName,serviceParameters[i],parameterTypes[i]);
    }
    try {
      if (_log.isDebugEnabled()) {
        _log.debug("Invoking class " + classObj + " on method "+ method.getName()+ " with args "+ args);
      }
      Object returnObj=method.invoke(classObj,args);
      if (returnObj != null) {
        return getReturnValue(returnObj);
      }
 else {
        JSONObject jsonObj=JSONFactoryUtil.createJSONObject();
        return jsonObj.toString();
      }
    }
 catch (    Exception e) {
      _log.error(e,e);
      JSONObject jsonObj=JSONFactoryUtil.createJSONObject();
      if (e instanceof InvocationTargetException) {
        jsonObj.put("exception",e.getCause().toString());
      }
 else {
        jsonObj.put("exception",e.getMessage());
      }
      return jsonObj.toString();
    }
  }
  return null;
}
