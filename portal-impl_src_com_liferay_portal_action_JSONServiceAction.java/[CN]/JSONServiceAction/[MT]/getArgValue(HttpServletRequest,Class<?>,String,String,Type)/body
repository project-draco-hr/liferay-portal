{
  String classDescriptor=JSONServiceUtil.getClassDescriptor(parameterType);
  String value=ParamUtil.getString(request,parameter);
  if (Validator.isNull(value) && !classDescriptor.equals("[Ljava.lang.String;")) {
    return null;
  }
 else   if (classDescriptor.equals("boolean") || classDescriptor.equals(Boolean.class.getName())) {
    return Boolean.valueOf(ParamUtil.getBoolean(request,parameter));
  }
 else   if (classDescriptor.equals("double") || classDescriptor.equals(Double.class.getName())) {
    return new Double(ParamUtil.getDouble(request,parameter));
  }
 else   if (classDescriptor.equals("int") || classDescriptor.equals(Integer.class.getName())) {
    return new Integer(ParamUtil.getInteger(request,parameter));
  }
 else   if (classDescriptor.equals("long") || classDescriptor.equals(Long.class.getName())) {
    return new Long(ParamUtil.getLong(request,parameter));
  }
 else   if (classDescriptor.equals("short") || classDescriptor.equals(Short.class.getName())) {
    return new Short(ParamUtil.getShort(request,parameter));
  }
 else   if (classDescriptor.equals(Date.class.getName())) {
    return new Date(ParamUtil.getLong(request,parameter));
  }
 else   if (classDescriptor.equals(ServiceContext.class.getName())) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject(value);
    jsonObject.put("javaClass",ServiceContext.class.getName());
    return ServiceContextUtil.deserialize(jsonObject);
  }
 else   if (classDescriptor.equals(String.class.getName())) {
    return value;
  }
 else   if (classDescriptor.equals("[Z")) {
    return ParamUtil.getBooleanValues(request,parameter);
  }
 else   if (classDescriptor.equals("[D")) {
    return ParamUtil.getDoubleValues(request,parameter);
  }
 else   if (classDescriptor.equals("[F")) {
    return ParamUtil.getFloatValues(request,parameter);
  }
 else   if (classDescriptor.equals("[I")) {
    return ParamUtil.getIntegerValues(request,parameter);
  }
 else   if (classDescriptor.equals("[J")) {
    return ParamUtil.getLongValues(request,parameter);
  }
 else   if (classDescriptor.equals("[S")) {
    return ParamUtil.getShortValues(request,parameter);
  }
 else   if (classDescriptor.equals("[Ljava.lang.String;")) {
    return StringUtil.split(value);
  }
 else   if (classDescriptor.equals("[[Z")) {
    String[] values=request.getParameterValues(parameter);
    if ((values != null) && (values.length > 0)) {
      String[] values0=StringUtil.split(values[0]);
      boolean[][] doubleArray=new boolean[values.length][values0.length];
      for (int i=0; i < values.length; i++) {
        String[] curValues=StringUtil.split(values[i]);
        for (int j=0; j < curValues.length; j++) {
          doubleArray[i][j]=GetterUtil.getBoolean(curValues[j]);
        }
      }
      return doubleArray;
    }
 else {
      return new boolean[0][0];
    }
  }
 else   if (classDescriptor.equals("[[D")) {
    String[] values=request.getParameterValues(parameter);
    if ((values != null) && (values.length > 0)) {
      String[] values0=StringUtil.split(values[0]);
      double[][] doubleArray=new double[values.length][values0.length];
      for (int i=0; i < values.length; i++) {
        String[] curValues=StringUtil.split(values[i]);
        for (int j=0; j < curValues.length; j++) {
          doubleArray[i][j]=GetterUtil.getDouble(curValues[j]);
        }
      }
      return doubleArray;
    }
 else {
      return new double[0][0];
    }
  }
 else   if (classDescriptor.equals("[[F")) {
    String[] values=request.getParameterValues(parameter);
    if ((values != null) && (values.length > 0)) {
      String[] values0=StringUtil.split(values[0]);
      float[][] doubleArray=new float[values.length][values0.length];
      for (int i=0; i < values.length; i++) {
        String[] curValues=StringUtil.split(values[i]);
        for (int j=0; j < curValues.length; j++) {
          doubleArray[i][j]=GetterUtil.getFloat(curValues[j]);
        }
      }
      return doubleArray;
    }
 else {
      return new float[0][0];
    }
  }
 else   if (classDescriptor.equals("[[I")) {
    String[] values=request.getParameterValues(parameter);
    if ((values != null) && (values.length > 0)) {
      String[] values0=StringUtil.split(values[0]);
      int[][] doubleArray=new int[values.length][values0.length];
      for (int i=0; i < values.length; i++) {
        String[] curValues=StringUtil.split(values[i]);
        for (int j=0; j < curValues.length; j++) {
          doubleArray[i][j]=GetterUtil.getInteger(curValues[j]);
        }
      }
      return doubleArray;
    }
 else {
      return new int[0][0];
    }
  }
 else   if (classDescriptor.equals("[[J")) {
    String[] values=request.getParameterValues(parameter);
    if ((values != null) && (values.length > 0)) {
      String[] values0=StringUtil.split(values[0]);
      long[][] doubleArray=new long[values.length][values0.length];
      for (int i=0; i < values.length; i++) {
        String[] curValues=StringUtil.split(values[i]);
        for (int j=0; j < curValues.length; j++) {
          doubleArray[i][j]=GetterUtil.getLong(curValues[j]);
        }
      }
      return doubleArray;
    }
 else {
      return new long[0][0];
    }
  }
 else   if (classDescriptor.equals("[[S")) {
    String[] values=request.getParameterValues(parameter);
    if ((values != null) && (values.length > 0)) {
      String[] values0=StringUtil.split(values[0]);
      short[][] doubleArray=new short[values.length][values0.length];
      for (int i=0; i < values.length; i++) {
        String[] curValues=StringUtil.split(values[i]);
        for (int j=0; j < curValues.length; j++) {
          doubleArray[i][j]=GetterUtil.getShort(curValues[j]);
        }
      }
      return doubleArray;
    }
 else {
      return new short[0][0];
    }
  }
 else   if (classDescriptor.equals("[[Ljava.lang.String")) {
    String[] values=request.getParameterValues(parameter);
    if ((values != null) && (values.length > 0)) {
      String[] values0=StringUtil.split(values[0]);
      String[][] doubleArray=new String[values.length][values0.length];
      for (int i=0; i < values.length; i++) {
        doubleArray[i]=StringUtil.split(values[i]);
      }
      return doubleArray;
    }
 else {
      return new String[0][0];
    }
  }
 else   if (classDescriptor.equals("java.util.Map<java.util.Locale, java.lang.String>")) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject(value);
    return LocalizationUtil.deserialize(jsonObject);
  }
 else {
    _log.error("Unsupported parameter type for class " + classObj + ", method "+ methodName+ ", parameter "+ parameter+ ", and type "+ classDescriptor);
    return null;
  }
}
