{
  if (returnObj instanceof RepositoryModel) {
    RepositoryModel<?> repositoryModel=(RepositoryModel<?>)returnObj;
    returnObj=repositoryModel.getModel();
    returnType=repositoryModel.getModelClass();
  }
  if ((returnObj instanceof Boolean) || (returnObj instanceof Double) || (returnObj instanceof Integer)|| (returnObj instanceof Long)|| (returnObj instanceof Short)|| (returnObj instanceof String)) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
    jsonObject.put("returnValue",returnObj.toString());
    return jsonObject.toString();
  }
 else   if (returnObj instanceof BaseModel<?>) {
    String serializerClassName=getSerializerClassName(returnObj);
    MethodKey methodKey=new MethodKey(serializerClassName,"toJSONObject",returnType);
    MethodHandler methodHandler=new MethodHandler(methodKey,returnObj);
    JSONObject jsonObject=(JSONObject)methodHandler.invoke(false);
    return jsonObject.toString();
  }
 else   if (returnObj instanceof BaseModel<?>[]) {
    JSONArray jsonArray=JSONFactoryUtil.createJSONArray();
    BaseModel<?>[] returnArray=(BaseModel[])returnObj;
    if (returnArray.length > 0) {
      BaseModel<?> returnItem0=returnArray[0];
      String serializerClassName=getSerializerClassName(returnItem0);
      MethodKey methodKey=new MethodKey(serializerClassName,"toJSONArray",returnType);
      MethodHandler methodHandler=new MethodHandler(methodKey,returnObj);
      jsonArray=(JSONArray)methodHandler.invoke(false);
    }
    return jsonArray.toString();
  }
 else   if (returnObj instanceof BaseModel<?>[][]) {
    JSONArray jsonArray=JSONFactoryUtil.createJSONArray();
    BaseModel<?>[][] returnArray=(BaseModel<?>[][])returnObj;
    if ((returnArray.length > 0) && (returnArray[0].length > 0)) {
      BaseModel<?> returnItem0=returnArray[0][0];
      String serializerClassName=getSerializerClassName(returnItem0);
      MethodKey methodKey=new MethodKey(serializerClassName,"toJSONArray",returnType);
      MethodHandler methodHandler=new MethodHandler(methodKey,returnObj);
      jsonArray=(JSONArray)methodHandler.invoke(false);
    }
    return jsonArray.toString();
  }
 else   if (returnObj instanceof List<?>) {
    JSONArray jsonArray=JSONFactoryUtil.createJSONArray();
    List<Object> returnList=(List<Object>)returnObj;
    if (!returnList.isEmpty()) {
      Object returnItem0=returnList.get(0);
      if ((returnItem0 instanceof Boolean) || (returnItem0 instanceof Number) || (returnItem0 instanceof String)) {
        for (        Object returnItem : returnList) {
          jsonArray.put(returnItem.toString());
        }
        return jsonArray.toString();
      }
      if (returnItem0 instanceof RepositoryModel) {
        RepositoryModel<?> repositoryModel=(RepositoryModel<?>)returnItem0;
        returnItem0=repositoryModel.getModel();
        List<Object> newReturnList=new ArrayList<Object>(returnList.size());
        for (        Object returnItem : returnList) {
          RepositoryModel<?> curRepositoryModel=(RepositoryModel<?>)returnItem;
          Object curReturnItem=curRepositoryModel.getModel();
          newReturnList.add(curReturnItem);
        }
        returnObj=newReturnList;
      }
      String serializerClassName=getSerializerClassName(returnItem0);
      MethodKey methodKey=new MethodKey(serializerClassName,"toJSONArray",returnType);
      MethodHandler methodHandler=new MethodHandler(methodKey,returnObj);
      jsonArray=(JSONArray)methodHandler.invoke(false);
    }
    return jsonArray.toString();
  }
 else   if (returnObj instanceof JSONArray) {
    JSONArray jsonArray=(JSONArray)returnObj;
    return jsonArray.toString();
  }
 else   if (returnObj instanceof JSONObject) {
    JSONObject jsonObject=(JSONObject)returnObj;
    return jsonObject.toString();
  }
 else   if (returnObj instanceof AssetEntryDisplay) {
    return getReturnValue((AssetEntryDisplay)returnObj);
  }
 else   if (returnObj instanceof AssetEntryDisplay[]) {
    return getReturnValue((AssetEntryDisplay[])returnObj);
  }
 else   if (returnObj instanceof AssetEntryType) {
    return getReturnValue((AssetEntryType)returnObj);
  }
 else   if (returnObj instanceof AssetEntryType[]) {
    return getReturnValue((AssetEntryType[])returnObj);
  }
 else {
    return JSONFactoryUtil.serialize(returnObj);
  }
}
