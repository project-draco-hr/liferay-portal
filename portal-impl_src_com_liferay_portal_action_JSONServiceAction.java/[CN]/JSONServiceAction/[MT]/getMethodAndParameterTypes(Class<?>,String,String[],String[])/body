{
  String parameterNames=StringUtil.merge(parameters);
  String key=classObj.getName() + "_METHOD_NAME_" + methodName+ "_PARAMETERS_"+ parameterNames;
  Object[] methodAndParameterTypes=_methodCache.get(key);
  if (methodAndParameterTypes != null) {
    return methodAndParameterTypes;
  }
  Method method=null;
  Class<?>[] methodParameterTypes=null;
  Method[] methods=classObj.getMethods();
  for (int i=0; i < methods.length; i++) {
    Method curMethod=methods[i];
    if (curMethod.getName().equals(methodName)) {
      Class<?>[] curParameterTypes=curMethod.getParameterTypes();
      if (curParameterTypes.length == parameters.length) {
        if (parameterTypes.length > 0 && parameterTypes.length == curParameterTypes.length) {
          boolean match=true;
          for (int j=0; j < parameterTypes.length; j++) {
            String t1=parameterTypes[j];
            String t2=curParameterTypes[j].getName();
            if (!t1.equals(t2)) {
              match=false;
            }
          }
          if (match) {
            method=curMethod;
            methodParameterTypes=curParameterTypes;
            break;
          }
        }
 else         if (method != null) {
          _log.error("Obscure method name for class " + classObj + ", method "+ methodName+ ", and parameters "+ parameterNames);
          return null;
        }
 else {
          method=curMethod;
          methodParameterTypes=curParameterTypes;
        }
      }
    }
  }
  if (method != null) {
    methodAndParameterTypes=new Object[]{method,methodParameterTypes};
    _methodCache.put(key,methodAndParameterTypes);
    return methodAndParameterTypes;
  }
 else {
    _log.error("No method found for class " + classObj + ", method "+ methodName+ ", and parameters "+ parameterNames);
    return null;
  }
}
