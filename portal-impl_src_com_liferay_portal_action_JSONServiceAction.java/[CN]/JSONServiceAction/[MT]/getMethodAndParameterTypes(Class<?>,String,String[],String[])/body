{
  StringBundler keyStringBundler=new StringBundler(5);
  keyStringBundler.append(clazz.getName());
  keyStringBundler.append("_METHOD_NAME_");
  keyStringBundler.append(methodName);
  keyStringBundler.append("_PARAMETERS_");
  String parameterTypesNames=StringUtil.merge(parameterTypes);
  if (Validator.isNull(parameterTypesNames)) {
    keyStringBundler.append(parameters.length);
  }
 else {
    keyStringBundler.append(parameterTypesNames);
  }
  String key=keyStringBundler.toString();
  Object[] methodAndParameterTypes=_methodCache.get(key);
  if (methodAndParameterTypes != null) {
    return methodAndParameterTypes;
  }
  Method method=null;
  Type[] methodParameterTypes=null;
  Method[] methods=clazz.getMethods();
  for (  Method curMethod : methods) {
    if (curMethod.getName().equals(methodName)) {
      Type[] curParameterTypes=curMethod.getGenericParameterTypes();
      if (curParameterTypes.length == parameters.length) {
        if ((parameterTypes.length > 0) && (parameterTypes.length == curParameterTypes.length)) {
          boolean match=true;
          for (int j=0; j < parameterTypes.length; j++) {
            String t1=parameterTypes[j];
            String t2=getTypeNameOrClassDescriptor(curParameterTypes[j]);
            if (!t1.equals(t2)) {
              match=false;
            }
          }
          if (match) {
            method=curMethod;
            methodParameterTypes=curParameterTypes;
            break;
          }
        }
 else         if (method != null) {
          String parameterNames=StringUtil.merge(parameters);
          _log.error("Obscure method name for class " + clazz + ", method "+ methodName+ ", and parameters "+ parameterNames);
          return null;
        }
 else {
          method=curMethod;
          methodParameterTypes=curParameterTypes;
        }
      }
    }
  }
  if (method != null) {
    methodAndParameterTypes=new Object[]{method,methodParameterTypes};
    _methodCache.put(key,methodAndParameterTypes);
    return methodAndParameterTypes;
  }
 else {
    String parameterNames=StringUtil.merge(parameters);
    _log.error("No method found for class " + clazz + ", method "+ methodName+ ", and parameters "+ parameterNames);
    return null;
  }
}
