{
  String parameterTypeName=parameterType.getName();
  if (Validator.isNull(ParamUtil.getString(request,parameter))) {
    return null;
  }
 else   if (parameterTypeName.equals("boolean") || parameterTypeName.equals(Boolean.class.getName())) {
    return Boolean.valueOf(ParamUtil.getBoolean(request,parameter));
  }
 else   if (parameterTypeName.equals("double") || parameterTypeName.equals(Double.class.getName())) {
    return new Double(ParamUtil.getDouble(request,parameter));
  }
 else   if (parameterTypeName.equals("int") || parameterTypeName.equals(Integer.class.getName())) {
    return new Integer(ParamUtil.getInteger(request,parameter));
  }
 else   if (parameterTypeName.equals("long") || parameterTypeName.equals(Long.class.getName())) {
    return new Long(ParamUtil.getLong(request,parameter));
  }
 else   if (parameterTypeName.equals("short") || parameterTypeName.equals(Short.class.getName())) {
    return new Short(ParamUtil.getShort(request,parameter));
  }
 else   if (parameterTypeName.equals(Date.class.getName())) {
    return new Date(ParamUtil.getLong(request,parameter));
  }
 else   if (parameterTypeName.equals(ServiceContext.class.getName())) {
    String value=ParamUtil.getString(request,parameter);
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject(value);
    jsonObject.put("javaClass",ServiceContext.class.getName());
    return ServiceContextUtil.deserialize(jsonObject);
  }
 else   if (parameterTypeName.equals(String.class.getName())) {
    return ParamUtil.getString(request,parameter);
  }
 else   if (parameterTypeName.equals("[Ljava.lang.String;")) {
    return StringUtil.split(ParamUtil.getString(request,parameter));
  }
 else {
    _log.error("Unsupported parameter type for class " + classObj + ", method "+ methodName+ ", parameter "+ parameter+ ", and type "+ parameterTypeName);
    return null;
  }
}
