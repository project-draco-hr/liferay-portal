{
  SPIShutdownHook spiShutdownHook=_mockRemoteSPI.new SPIShutdownHook();
  Assert.assertTrue(spiShutdownHook.shutdown(0,null));
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(RemoteSPI.class.getName(),Level.SEVERE);
  _mockRemoteSPI.setFailOnStop(true);
  Assert.assertTrue(spiShutdownHook.shutdown(0,null));
  Assert.assertEquals(1,logRecords.size());
  LogRecord logRecord=logRecords.get(0);
  Assert.assertEquals("Unable to stop SPI",logRecord.getMessage());
  Throwable throwable=logRecord.getThrown();
  Assert.assertSame(RemoteException.class,throwable.getClass());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(RemoteSPI.class.getName(),Level.OFF);
  _mockRemoteSPI.setFailOnStop(true);
  Assert.assertTrue(spiShutdownHook.shutdown(0,null));
  Assert.assertTrue(logRecords.isEmpty());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(RemoteSPI.class.getName(),Level.SEVERE);
  _mockRemoteSPI.setFailOnStop(false);
  _mockRemoteSPI.setFailOnDestroy(true);
  Assert.assertTrue(spiShutdownHook.shutdown(0,null));
  Assert.assertEquals(1,logRecords.size());
  logRecord=logRecords.get(0);
  Assert.assertEquals("Unable to destroy SPI",logRecord.getMessage());
  throwable=logRecord.getThrown();
  Assert.assertSame(RemoteException.class,throwable.getClass());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(RemoteSPI.class.getName(),Level.OFF);
  _mockRemoteSPI.setFailOnStop(false);
  _mockRemoteSPI.setFailOnDestroy(true);
  Assert.assertTrue(spiShutdownHook.shutdown(0,null));
  Assert.assertTrue(logRecords.isEmpty());
}
