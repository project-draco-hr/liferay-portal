{
  final Thread mainThread=Thread.currentThread();
  FutureTask<?> futureTask=new FutureTask<Object>(new Callable<Object>(){
    @Override public Object call() throws Exception {
      AbstractQueuedSynchronizer abstractQueuedSynchronizer=(AbstractQueuedSynchronizer)ReflectionTestUtil.getFieldValue(_mockRemoteSPI.countDownLatch,"sync");
      while (true) {
        Collection<Thread> queuedThreads=abstractQueuedSynchronizer.getQueuedThreads();
        if (queuedThreads.contains(mainThread)) {
          if (countDownOrInterrupt) {
            CountDownLatch countDownLatch=_mockRemoteSPI.countDownLatch;
            countDownLatch.countDown();
          }
 else {
            mainThread.interrupt();
          }
          break;
        }
      }
      return null;
    }
  }
);
  Thread thread=new Thread(futureTask);
  thread.start();
  return futureTask;
}
