{
  articleId=StringUtil.upperCase(articleId);
  title=StringUtil.lowerCase(title);
  content=StringUtil.lowerCase(content);
  Timestamp displayDateGT_TS=CalendarUtil.getTimestamp(displayDateGT);
  Timestamp displayDateLT_TS=CalendarUtil.getTimestamp(displayDateLT);
  Timestamp reviewDate_TS=CalendarUtil.getTimestamp(reviewDate);
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    String sql=CustomSQLUtil.get(COUNT_BY_C_A_V_G_T_C_T_S_T_D_A_E_R);
    if (version == null) {
      sql=StringUtil.replace(sql,"(version = ?) [$AND_OR_CONNECTOR$]","");
    }
    if (approved == null) {
      sql=StringUtil.replace(sql,"(approved = ?) AND","");
    }
    if (expired == null) {
      sql=StringUtil.replace(sql,"(expired = ?) AND","");
    }
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(HibernateUtil.getCountColumnName(),Hibernate.INTEGER);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    qPos.add(articleId);
    qPos.add(articleId);
    if (version != null) {
      qPos.add(version);
    }
    qPos.add(groupId);
    qPos.add(groupId);
    qPos.add(title);
    qPos.add(title);
    qPos.add(content);
    qPos.add(content);
    qPos.add(type);
    qPos.add(type);
    qPos.add(structureId);
    qPos.add(structureId);
    qPos.add(templateId);
    qPos.add(templateId);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateLT_TS);
    qPos.add(displayDateLT_TS);
    if (approved != null) {
      qPos.add(approved);
    }
    if (expired != null) {
      qPos.add(expired);
    }
    qPos.add(reviewDate_TS);
    qPos.add(reviewDate_TS);
    Iterator itr=q.list().iterator();
    if (itr.hasNext()) {
      Integer count=(Integer)itr.next();
      if (count != null) {
        return count.intValue();
      }
    }
    return 0;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
}
