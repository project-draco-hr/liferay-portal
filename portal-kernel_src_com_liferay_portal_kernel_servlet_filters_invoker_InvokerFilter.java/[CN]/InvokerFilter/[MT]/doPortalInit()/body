{
  _invokerFilterChainSize=GetterUtil.getInteger(PropsUtil.get(PropsKeys.INVOKER_FILTER_CHAIN_SIZE));
  if (_invokerFilterChainSize > 0) {
    _filterChains=new ConcurrentLFUCache<>(_invokerFilterChainSize);
  }
  _invokerFilterURIMaxLength=GetterUtil.getInteger(PropsUtil.get(PropsKeys.INVOKER_FILTER_URI_MAX_LENGTH));
  ServletContext servletContext=_filterConfig.getServletContext();
  InvokerFilterHelper invokerFilterHelper=(InvokerFilterHelper)servletContext.getAttribute(InvokerFilterHelper.class.getName());
  if (invokerFilterHelper == null) {
    invokerFilterHelper=new InvokerFilterHelper();
    servletContext.setAttribute(InvokerFilterHelper.class.getName(),invokerFilterHelper);
    invokerFilterHelper.init(_filterConfig);
  }
  _invokerFilterHelper=invokerFilterHelper;
  _invokerFilterHelper.addInvokerFilter(this);
  String dispatcher=GetterUtil.getString(_filterConfig.getInitParameter("dispatcher"));
  if (dispatcher.equals("ERROR")) {
    _dispatcher=Dispatcher.ERROR;
  }
 else   if (dispatcher.equals("FORWARD")) {
    _dispatcher=Dispatcher.FORWARD;
  }
 else   if (dispatcher.equals("INCLUDE")) {
    _dispatcher=Dispatcher.INCLUDE;
  }
 else   if (dispatcher.equals("REQUEST")) {
    _dispatcher=Dispatcher.REQUEST;
  }
 else {
    throw new IllegalArgumentException("Invalid dispatcher " + dispatcher);
  }
}
