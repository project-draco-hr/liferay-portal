{
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  String uri=getURI(request);
  int length=uri.length();
  HttpServletResponse response=(HttpServletResponse)servletResponse;
  String queryString=request.getQueryString();
  if (queryString != null) {
    length+=queryString.length();
  }
  if (length > _INVOKER_FILTER_URI_MAX_LENGTH) {
    response.sendError(HttpServletResponse.SC_REQUEST_URI_TOO_LONG);
    if (_log.isWarnEnabled()) {
      StringBundler sb=new StringBundler(5);
      sb.append("Rejected ");
      sb.append(StringUtil.shorten(uri,_INVOKER_FILTER_URI_MAX_LENGTH));
      sb.append(" because it has more than ");
      sb.append(_INVOKER_FILTER_URI_MAX_LENGTH);
      sb.append(" characters");
      _log.warn(sb.toString());
    }
    return;
  }
  request=handleNonSerializableRequest(request);
  response=HttpOnlyCookieServletResponse.getHttpOnlyCookieServletResponse(response);
  response=secureResponseHeaders(request,response);
  request.setAttribute(WebKeys.INVOKER_FILTER_URI,uri);
  try {
    InvokerFilterChain invokerFilterChain=getInvokerFilterChain(request,uri,filterChain);
    Thread currentThread=Thread.currentThread();
    ClassLoader contextClassLoader=currentThread.getContextClassLoader();
    invokerFilterChain.setContextClassLoader(contextClassLoader);
    invokerFilterChain.doFilter(request,response);
  }
  finally {
    request.removeAttribute(WebKeys.INVOKER_FILTER_URI);
  }
}
