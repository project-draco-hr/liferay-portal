{
  Configuration configuration=new Configuration();
  try {
    String[] resources=getConfigurationResources();
    for (    String resource : resources) {
      try {
        readResource(configuration,resource);
      }
 catch (      Exception e2) {
        if (_log.isWarnEnabled()) {
          _log.warn(e2,e2);
        }
      }
    }
    Properties properties=PropsUtil.getProperties();
    if (SPIUtil.isSPI()) {
      properties.put("hibernate.cache.use_query_cache",Boolean.FALSE.toString());
      properties.put("hibernate.cache.use_second_level_cache",Boolean.FALSE.toString());
    }
    configuration.setProperties(properties);
    if (Validator.isNull(PropsValues.HIBERNATE_DIALECT)) {
      Dialect dialect=determineDialect();
      setDB(dialect);
      Class<?> clazz=dialect.getClass();
      configuration.setProperty("hibernate.dialect",clazz.getName());
    }
    DB db=DBFactoryUtil.getDB();
    String dbType=db.getType();
    if (dbType.equals(DB.TYPE_HYPERSONIC)) {
    }
    if (_mvccEnabled) {
      EventListeners eventListeners=configuration.getEventListeners();
      eventListeners.setAutoFlushEventListeners(new AutoFlushEventListener[]{NestableAutoFlushEventListener.INSTANCE});
      eventListeners.setPostUpdateEventListeners(new PostUpdateEventListener[]{MVCCSynchronizerPostUpdateEventListener.INSTANCE});
    }
  }
 catch (  Exception e1) {
    _log.error(e1,e1);
  }
  Properties hibernateProperties=getHibernateProperties();
  if (_beanFactory.containsBean(ShardUtil.class.getName()) && _customContextSessionEnabled) {
    hibernateProperties.setProperty(Environment.CURRENT_SESSION_CONTEXT_CLASS,ShardSpringSessionContext.class.getName());
  }
  for (  Map.Entry<Object,Object> entry : hibernateProperties.entrySet()) {
    String key=(String)entry.getKey();
    String value=(String)entry.getValue();
    configuration.setProperty(key,value);
  }
  return configuration;
}
