{
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  if (!cmd.equals(Constants.UPDATE)) {
    return;
  }
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  Layout layout=PortletConfigurationLayoutUtil.getLayout(themeDisplay);
  String portletResource=ParamUtil.getString(actionRequest,"portletResource");
  PortletPermissionUtil.check(themeDisplay.getPermissionChecker(),themeDisplay.getScopeGroupId(),layout,portletResource,ActionKeys.CONFIGURATION);
  PortletPreferences portletPreferences=null;
  Settings settings=null;
  String settingsScope=ParamUtil.getString(actionRequest,"settingsScope");
  UnicodeProperties properties=PropertiesParamUtil.getProperties(actionRequest,PREFERENCES_PREFIX);
  if (Validator.isNull(settingsScope)) {
    portletPreferences=actionRequest.getPreferences();
    for (    Map.Entry<String,String> entry : properties.entrySet()) {
      String name=entry.getKey();
      String value=entry.getValue();
      portletPreferences.setValue(name,value);
    }
    Map<String,String[]> portletPreferencesMap=(Map<String,String[]>)actionRequest.getAttribute(WebKeys.PORTLET_PREFERENCES_MAP);
    if (portletPreferencesMap != null) {
      for (      Map.Entry<String,String[]> entry : portletPreferencesMap.entrySet()) {
        String name=entry.getKey();
        String[] values=entry.getValue();
        portletPreferences.setValues(name,values);
      }
    }
    postProcessPreferences(themeDisplay.getCompanyId(),actionRequest,portletPreferences);
  }
 else {
    String serviceName=ParamUtil.getString(actionRequest,"serviceName");
    if (settingsScope.equals("company")) {
      settings=SettingsFactoryUtil.getServiceCompanySettings(themeDisplay.getCompanyId(),serviceName);
    }
 else     if (settingsScope.equals("group")) {
      settings=SettingsFactoryUtil.getServiceGroupSettings(themeDisplay.getSiteGroupId(),serviceName);
    }
 else     if (settingsScope.equals("portletInstance")) {
      settings=SettingsFactoryUtil.getPortletInstanceSettings(themeDisplay.getLayout(),portletResource);
    }
    if (settings != null) {
      for (      Map.Entry<String,String> entry : properties.entrySet()) {
        String name=entry.getKey();
        String value=entry.getValue();
        settings.setValue(name,value);
      }
      Map<String,String[]> portletPreferencesMap=(Map<String,String[]>)actionRequest.getAttribute(WebKeys.PORTLET_PREFERENCES_MAP);
      if (portletPreferencesMap != null) {
        for (        Map.Entry<String,String[]> entry : portletPreferencesMap.entrySet()) {
          String name=entry.getKey();
          String[] values=entry.getValue();
          settings.setValues(name,values);
        }
      }
    }
  }
  if (SessionErrors.isEmpty(actionRequest)) {
    try {
      if (portletPreferences != null) {
        portletPreferences.store();
      }
      if (settings != null) {
        settings.store();
      }
    }
 catch (    ValidatorException ve) {
      SessionErrors.add(actionRequest,ValidatorException.class.getName(),ve);
      return;
    }
    SessionMessages.add(actionRequest,PortalUtil.getPortletId(actionRequest) + SessionMessages.KEY_SUFFIX_REFRESH_PORTLET,portletResource);
    SessionMessages.add(actionRequest,PortalUtil.getPortletId(actionRequest) + SessionMessages.KEY_SUFFIX_UPDATED_CONFIGURATION);
    String redirect=PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest,"redirect"));
    if (Validator.isNotNull(redirect)) {
      actionResponse.sendRedirect(redirect);
    }
  }
}
