{
  Map<Long,Integer> hostRecentBatchSizesMap=_recentBatchSizesMap.get(hostName);
  if ((hostRecentBatchSizesMap == null) || hostRecentBatchSizesMap.isEmpty()) {
    return 0;
  }
  int batchSizeTotal=0;
  Set<Map.Entry<Long,Integer>> hostRecentBatchSizesEntrySet=hostRecentBatchSizesMap.entrySet();
  List<Map.Entry<Long,Integer>> hostRecentBatchSizeEntriesToBeRemoved=new ArrayList<>(hostRecentBatchSizesMap.size());
  for (  Map.Entry<Long,Integer> recentBatchSize : hostRecentBatchSizesEntrySet) {
    int batchSize=recentBatchSize.getValue();
    long timestamp=recentBatchSize.getKey();
    if ((timestamp + recentBatchPeriod) > System.currentTimeMillis()) {
      batchSizeTotal+=batchSize;
    }
 else {
      hostRecentBatchSizeEntriesToBeRemoved.add(recentBatchSize);
    }
  }
  hostRecentBatchSizesEntrySet.removeAll(hostRecentBatchSizeEntriesToBeRemoved);
  return batchSizeTotal;
}
