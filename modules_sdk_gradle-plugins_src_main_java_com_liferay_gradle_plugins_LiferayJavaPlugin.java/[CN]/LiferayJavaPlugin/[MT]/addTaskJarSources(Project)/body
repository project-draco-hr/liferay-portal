{
  final Jar jar=GradleUtil.addTask(project,JAR_SOURCES_TASK_NAME,Jar.class);
  jar.setClassifier("sources");
  jar.setGroup(BasePlugin.BUILD_GROUP);
  jar.setDescription("Assembles a jar archive containing the main source files.");
  jar.setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE);
  File docrootDir=project.file("docroot");
  if (docrootDir.exists()) {
    jar.from(docrootDir);
  }
 else {
    SourceSet sourceSet=GradleUtil.getSourceSet(project,SourceSet.MAIN_SOURCE_SET_NAME);
    jar.from(sourceSet.getAllSource());
    if (isTestProject(project)) {
      sourceSet=GradleUtil.getSourceSet(project,SourceSet.TEST_SOURCE_SET_NAME);
      jar.from(sourceSet.getAllSource());
      sourceSet=GradleUtil.getSourceSet(project,TestIntegrationBasePlugin.TEST_INTEGRATION_SOURCE_SET_NAME);
      jar.from(sourceSet.getAllSource());
    }
  }
  TaskContainer taskContainer=project.getTasks();
  taskContainer.withType(PatchTask.class,new Action<PatchTask>(){
    @Override public void execute(    final PatchTask patchTask){
      jar.from(new Callable<File>(){
        @Override public File call() throws Exception {
          return patchTask.getPatchesDir();
        }
      }
,new Closure<Void>(null){
        @SuppressWarnings("unused") public void doCall(        CopySpec copySpec){
          copySpec.into("META-INF/patches");
        }
      }
);
    }
  }
);
  return jar;
}
