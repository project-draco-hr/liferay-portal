{
  PermissionCheckerImpl permissionChecker=null;
  try {
    LayoutsRemotePublisherRequest publisherRequest=(LayoutsRemotePublisherRequest)JSONUtil.deserialize(message);
    long userId=publisherRequest.getUserId();
    long sourceGroupId=publisherRequest.getSourceGroupId();
    boolean privateLayout=publisherRequest.isPrivateLayout();
    Map<Long,Boolean> layoutIdMap=publisherRequest.getLayoutIdMap();
    Map<String,String[]> parameterMap=publisherRequest.getParameterMap();
    String remoteAddress=publisherRequest.getRemoteAddress();
    int remotePort=publisherRequest.getRemotePort();
    boolean secureConnection=publisherRequest.isSecureConnection();
    long remoteGroupId=publisherRequest.getRemoteGroupId();
    boolean remotePrivateLayout=publisherRequest.isRemotePrivateLayout();
    Date startDate=publisherRequest.getStartDate();
    Date endDate=publisherRequest.getEndDate();
    PrincipalThreadLocal.setName(userId);
    User user=UserLocalServiceUtil.getUserById(userId);
    permissionChecker=PermissionCheckerFactory.create(user,false);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    StagingUtil.copyRemoteLayouts(sourceGroupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,secureConnection,remoteGroupId,remotePrivateLayout,parameterMap,startDate,endDate);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    try {
      PermissionCheckerFactory.recycle(permissionChecker);
    }
 catch (    Exception e) {
    }
  }
}
