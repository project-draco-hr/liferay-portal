{
  contextObjects.put(PortletDisplayTemplateConstants.TEMPLATE_ID,ddmTemplateId);
  contextObjects.put(PortletDisplayTemplateConstants.ENTRIES,entries);
  if (!entries.isEmpty()) {
    contextObjects.put(PortletDisplayTemplateConstants.ENTRY,entries.get(0));
  }
  contextObjects.put(PortletDisplayTemplateConstants.LOCALE,request.getLocale());
  contextObjects.put(PortletDisplayTemplateConstants.REQUEST,request);
  RenderRequest renderRequest=(RenderRequest)request.getAttribute(JavaConstants.JAVAX_PORTLET_REQUEST);
  contextObjects.put(PortletDisplayTemplateConstants.RENDER_REQUEST,renderRequest);
  RenderResponse renderResponse=(RenderResponse)request.getAttribute(JavaConstants.JAVAX_PORTLET_RESPONSE);
  contextObjects.put(PortletDisplayTemplateConstants.RENDER_RESPONSE,renderResponse);
  PortletURL currentURL=PortletURLUtil.getCurrent(renderRequest,renderResponse);
  contextObjects.put(PortletDisplayTemplateConstants.CURRENT_URL,currentURL.toString());
  ThemeDisplay themeDisplay=(ThemeDisplay)renderRequest.getAttribute(WebKeys.THEME_DISPLAY);
  contextObjects.put(PortletDisplayTemplateConstants.THEME_DISPLAY,themeDisplay);
  DDMTemplate ddmTemplate=DDMTemplateLocalServiceUtil.getTemplate(ddmTemplateId);
  contextObjects.put(TemplateConstants.CLASS_NAME_ID,ddmTemplate.getClassNameId());
  String language=ddmTemplate.getLanguage();
  TemplateManager templateManager=TemplateManagerUtil.getTemplateManager(language);
  TemplateHandler templateHandler=TemplateHandlerRegistryUtil.getTemplateHandler(ddmTemplate.getClassNameId());
  if (templateHandler instanceof BasePortletDisplayTemplateHandler) {
    BasePortletDisplayTemplateHandler portletDisplayTemplateHandler=(BasePortletDisplayTemplateHandler)templateHandler;
    Map<String,Object> customContextObjects=portletDisplayTemplateHandler.getCustomContextObjects();
    for (    String variableName : customContextObjects.keySet()) {
      if (contextObjects.containsKey(variableName)) {
        continue;
      }
      Object object=customContextObjects.get(variableName);
      if (object instanceof Class) {
        templateManager.addStaticClassSupport(contextObjects,variableName,(Class<?>)object);
      }
 else {
        contextObjects.put(variableName,object);
      }
    }
  }
  if (language.equals(TemplateConstants.LANG_TYPE_FTL)) {
    _addTaglibSupportFTL(templateManager,contextObjects,request,response);
  }
 else   if (language.equals(TemplateConstants.LANG_TYPE_VM)) {
    _addTaglibSupportVM(templateManager,contextObjects,request,response);
  }
  UnsyncStringWriter unsyncStringWriter=new UnsyncStringWriter();
  contextObjects.putAll(_getPortletPreferences(renderRequest));
  return _transformer.transform(themeDisplay,contextObjects,ddmTemplate.getScript(),language,unsyncStringWriter);
}
