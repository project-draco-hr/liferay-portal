{
  final Map<Path,Path> mergedPaths=new HashMap<>();
  Path inputPath1=Paths.get("inputPaths1");
  Path mappedInputPath1=Paths.get("mappedInputPath1");
  Path inputPath2=Paths.get("inputPaths2");
  Path mappedInputPath2=Paths.get("mappedInputPath2");
  mergedPaths.put(inputPath1,mappedInputPath1);
  mergedPaths.put(inputPath2,mappedInputPath2);
  Path bootstrapPath1=Paths.get("bootstrapPath1");
  Path mappedBootstrapPath1=Paths.get("mappedBootstrapPath1");
  Path bootstrapPath2=Paths.get("bootstrapPath2");
  Path mappedBootstrapPath2=Paths.get("mappedBootstrapPath2");
  Path bootstrapPath3=Paths.get("bootstrapPath3");
  Path mappedBootstrapPath3=Paths.get("mappedBootstrapPath3");
  mergedPaths.put(bootstrapPath1,mappedBootstrapPath1);
  mergedPaths.put(bootstrapPath2,mappedBootstrapPath2);
  mergedPaths.put(bootstrapPath3,mappedBootstrapPath3);
  Path runtimePath1=Paths.get("runtimePath1");
  Path mappedRuntimePath1=Paths.get("mappedRuntimePath1");
  Path runtimePath2=Paths.get("runtimePath2");
  Path mappedRuntimePath2=Paths.get("mappedRuntimePath2");
  Path runtimePath3=Paths.get("runtimePath3");
  Path mappedRuntimePath3=Paths.get("mappedRuntimePath3");
  mergedPaths.put(runtimePath1,mappedRuntimePath1);
  mergedPaths.put(runtimePath2,mappedRuntimePath2);
  mergedPaths.put(runtimePath3,mappedRuntimePath3);
  NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler=new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>("repository"){
    @Override public NoticeableFuture<Map<Path,Path>> getFiles(    Channel channel,    Map<Path,Path> pathMap,    boolean deleteAfterFetch){
      DefaultNoticeableFuture<Map<Path,Path>> defaultNoticeableFuture=new DefaultNoticeableFuture<>();
      defaultNoticeableFuture.set(mergedPaths);
      return defaultNoticeableFuture;
    }
  }
,new LocalFabricAgent(new EmbeddedProcessExecutor()),0);
  Builder builder=new Builder();
  builder.setBootstrapClassPath(bootstrapPath1 + File.pathSeparator + bootstrapPath2+ File.pathSeparator+ bootstrapPath3);
  builder.setRuntimeClassPath(runtimePath1 + File.pathSeparator + runtimePath2+ File.pathSeparator+ runtimePath3);
  ProcessConfig processConfig=builder.build();
  ProcessCallable<Serializable> processCallable=new LoadPathProcessCallable(inputPath1.toFile(),inputPath2.toFile());
  FabricPathMappingVisitor fabricPathMappingVisitor=new FabricPathMappingVisitor(InputResource.class,Paths.get("repository"));
  ObjectGraphUtil.walkObjectGraph(processCallable,fabricPathMappingVisitor);
  NoticeableFuture<LoadedPaths> noticeableFuture=nettyFabricWorkerExecutionChannelHandler.loadPaths(_embeddedChannel,new NettyFabricWorkerConfig<Serializable>(0,processConfig,processCallable,fabricPathMappingVisitor.getPathMap()));
  LoadedPaths loadedPaths=noticeableFuture.get();
  Map<Path,Path> loadedInputPaths=loadedPaths.getInputPaths();
  Assert.assertEquals(2,loadedInputPaths.size());
  Assert.assertEquals(mappedInputPath1,loadedInputPaths.get(inputPath1));
  Assert.assertEquals(mappedInputPath2,loadedInputPaths.get(inputPath2));
  processConfig=loadedPaths.toProcessConfig(processConfig);
  Assert.assertEquals(mappedBootstrapPath1 + File.pathSeparator + mappedBootstrapPath2+ File.pathSeparator+ mappedBootstrapPath3,processConfig.getBootstrapClassPath());
  Assert.assertEquals(mappedRuntimePath1 + File.pathSeparator + mappedRuntimePath2+ File.pathSeparator+ mappedRuntimePath3,processConfig.getRuntimeClassPath());
}
