{
  final Map<Path,Path> mergedPaths=new HashMap<Path,Path>();
  Path inputPath1=getAbsolutePath("inputPaths1");
  Path mappedInputPath1=getAbsolutePath("mappedInputPath1");
  Path inputPath2=getAbsolutePath("inputPaths2");
  Path mappedInputPath2=getAbsolutePath("mappedInputPath2");
  mergedPaths.put(inputPath1,mappedInputPath1);
  mergedPaths.put(inputPath2,mappedInputPath2);
  Path bootstrapPath1=getAbsolutePath("bootstrapPath1");
  Path mappedBootstrapPath1=getAbsolutePath("mappedBootstrapPath1");
  Path bootstrapPath2=getAbsolutePath("bootstrapPath2");
  Path mappedBootstrapPath2=getAbsolutePath("mappedBootstrapPath2");
  Path bootstrapPath3=getAbsolutePath("bootstrapPath3");
  Path mappedBootstrapPath3=getAbsolutePath("mappedBootstrapPath3");
  mergedPaths.put(bootstrapPath1,mappedBootstrapPath1);
  mergedPaths.put(bootstrapPath2,mappedBootstrapPath2);
  mergedPaths.put(bootstrapPath3,mappedBootstrapPath3);
  Path runtimePath1=getAbsolutePath("runtimePath1");
  Path mappedRuntimePath1=getAbsolutePath("mappedRuntimePath1");
  Path runtimePath2=getAbsolutePath("runtimePath2");
  Path mappedRuntimePath2=getAbsolutePath("mappedRuntimePath2");
  Path runtimePath3=getAbsolutePath("runtimePath3");
  Path mappedRuntimePath3=getAbsolutePath("mappedRuntimePath3");
  mergedPaths.put(runtimePath1,mappedRuntimePath1);
  mergedPaths.put(runtimePath2,mappedRuntimePath2);
  mergedPaths.put(runtimePath3,mappedRuntimePath3);
  NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler=new NettyFabricWorkerExecutionChannelHandler(new MockRepository(){
    @Override public NoticeableFuture<Map<Path,Path>> getFiles(    Map<Path,Path> pathMap,    boolean deleteAfterFetch){
      DefaultNoticeableFuture<Map<Path,Path>> defaultNoticeableFuture=new DefaultNoticeableFuture<Map<Path,Path>>();
      defaultNoticeableFuture.set(mergedPaths);
      return defaultNoticeableFuture;
    }
    @Override public Path getRepositoryPath(){
      return getAbsolutePath("repository");
    }
  }
,new EmbeddedProcessExecutor(),0);
  Builder builder=new Builder();
  builder.setBootstrapClassPath(bootstrapPath1 + File.pathSeparator + bootstrapPath2+ File.pathSeparator+ bootstrapPath3);
  builder.setRuntimeClassPath(runtimePath1 + File.pathSeparator + runtimePath2+ File.pathSeparator+ runtimePath3);
  ProcessConfig processConfig=builder.build();
  ProcessCallable<Serializable> processCallable=new LoadPathProcessCallable(inputPath1.toFile(),inputPath2.toFile());
  FabricPathMappingVisitor fabricPathMappingVisitor=new FabricPathMappingVisitor(InputResource.class,getAbsolutePath("repository"));
  ObjectGraphUtil.walkObjectGraph(processCallable,fabricPathMappingVisitor);
  NoticeableFuture<LoadedPaths> noticeableFuture=nettyFabricWorkerExecutionChannelHandler.loadPaths(new NettyFabricWorkerConfig<Serializable>(0,processConfig,processCallable,fabricPathMappingVisitor.getPathMap()));
  LoadedPaths loadedPaths=noticeableFuture.get();
  Map<Path,Path> loadedInputPaths=loadedPaths.getInputPaths();
  Assert.assertEquals(2,loadedInputPaths.size());
  Assert.assertEquals(mappedInputPath1,loadedInputPaths.get(inputPath1));
  Assert.assertEquals(mappedInputPath2,loadedInputPaths.get(inputPath2));
  processConfig=loadedPaths.toProcessConfig(processConfig);
  Assert.assertEquals(mappedBootstrapPath1 + File.pathSeparator + mappedBootstrapPath2+ File.pathSeparator+ mappedBootstrapPath3,processConfig.getBootstrapClassPath());
  Assert.assertEquals(mappedRuntimePath1 + File.pathSeparator + mappedRuntimePath2+ File.pathSeparator+ mappedRuntimePath3,processConfig.getRuntimeClassPath());
}
