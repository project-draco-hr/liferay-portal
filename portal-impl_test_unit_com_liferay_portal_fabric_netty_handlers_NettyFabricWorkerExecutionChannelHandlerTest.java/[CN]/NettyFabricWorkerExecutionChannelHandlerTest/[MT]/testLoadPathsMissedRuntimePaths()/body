{
  final Map<Path,Path> mergedPaths=new HashMap<>();
  Path runtimePath1=Paths.get("runtimePath1");
  Path mappedRuntimePath1=Paths.get("mappedRuntimePath1");
  Path runtimePath2=Paths.get("runtimePath2");
  Path runtimePath3=Paths.get("runtimePath3");
  Path mappedRuntimePath3=Paths.get("mappedRuntimePath3");
  mergedPaths.put(runtimePath1,mappedRuntimePath1);
  mergedPaths.put(runtimePath3,mappedRuntimePath3);
  NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler=new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>(){
    @Override public NoticeableFuture<Map<Path,Path>> getFiles(    Channel channel,    Map<Path,Path> pathMap,    boolean deleteAfterFetch){
      DefaultNoticeableFuture<Map<Path,Path>> defaultNoticeableFuture=new DefaultNoticeableFuture<Map<Path,Path>>();
      defaultNoticeableFuture.set(mergedPaths);
      return defaultNoticeableFuture;
    }
    @Override public Path getRepositoryPath(){
      return Paths.get("repository");
    }
  }
,new LocalFabricAgent(new EmbeddedProcessExecutor()),0);
  Builder builder=new Builder();
  builder.setBootstrapClassPath(StringPool.BLANK);
  builder.setRuntimeClassPath(runtimePath1 + File.pathSeparator + runtimePath2+ File.pathSeparator+ runtimePath3);
  ProcessConfig processConfig=builder.build();
  ProcessCallable<Serializable> processCallable=new ReturnProcessCallable<Serializable>(null);
  FabricPathMappingVisitor fabricPathMappingVisitor=new FabricPathMappingVisitor(InputResource.class,Paths.get("repository"));
  ObjectGraphUtil.walkObjectGraph(processCallable,fabricPathMappingVisitor);
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyFabricWorkerExecutionChannelHandler.class.getName(),Level.WARNING)){
    NoticeableFuture<LoadedPaths> noticeableFuture=nettyFabricWorkerExecutionChannelHandler.loadPaths(_embeddedChannel,new NettyFabricWorkerConfig<Serializable>(0,processConfig,processCallable,fabricPathMappingVisitor.getPathMap()));
    LoadedPaths loadedPaths=noticeableFuture.get();
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Incomplete runtime classpath loaded, missed: " + Arrays.asList(runtimePath2),logRecord.getMessage());
    Map<Path,Path> loadedInputPaths=loadedPaths.getInputPaths();
    Assert.assertTrue(loadedInputPaths.isEmpty());
    ProcessConfig loadedProcessConfig=loadedPaths.toProcessConfig(processConfig);
    Assert.assertEquals(StringPool.BLANK,loadedProcessConfig.getBootstrapClassPath());
    Assert.assertEquals(mappedRuntimePath1 + File.pathSeparator + mappedRuntimePath3,loadedProcessConfig.getRuntimeClassPath());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyFabricWorkerExecutionChannelHandler.class.getName(),Level.OFF)){
    NoticeableFuture<LoadedPaths> noticeableFuture=nettyFabricWorkerExecutionChannelHandler.loadPaths(_embeddedChannel,new NettyFabricWorkerConfig<Serializable>(0,processConfig,processCallable,fabricPathMappingVisitor.getPathMap()));
    LoadedPaths loadedPaths=noticeableFuture.get();
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
    Map<Path,Path> loadedInputPaths=loadedPaths.getInputPaths();
    Assert.assertTrue(loadedInputPaths.isEmpty());
    ProcessConfig loadedProcessConfig=loadedPaths.toProcessConfig(processConfig);
    Assert.assertEquals(StringPool.BLANK,loadedProcessConfig.getBootstrapClassPath());
    Assert.assertEquals(mappedRuntimePath1 + File.pathSeparator + mappedRuntimePath3,loadedProcessConfig.getRuntimeClassPath());
  }
 }
