{
  Map<Path,Path> inputPaths=Collections.emptyMap();
  String newBootstrapClassPath="newBootstrapClassPath";
  String newRuntimeClassPath="newRuntimeClassPath";
  LoadedPaths loadedPaths=new LoadedPaths(inputPaths,newBootstrapClassPath,newRuntimeClassPath);
  Assert.assertSame(inputPaths,loadedPaths.getInputPaths());
  List<String> arguments=Collections.emptyList();
  Builder builder=new Builder();
  builder.setArguments(arguments);
  builder.setBootstrapClassPath("oldBootstrapClassPath");
  builder.setRuntimeClassPath("oldRuntimeClassPath");
  ProcessConfig processConfig=loadedPaths.toProcessConfig(builder.build());
  Assert.assertSame(arguments,processConfig.getArguments());
  Assert.assertEquals(newBootstrapClassPath,processConfig.getBootstrapClassPath());
  Assert.assertEquals(newRuntimeClassPath,processConfig.getRuntimeClassPath());
  ClassLoader classLoader=processConfig.getReactClassLoader();
  Assert.assertSame(URLClassLoader.class,classLoader.getClass());
  URLClassLoader urlClassLoader=(URLClassLoader)classLoader;
  URL[] urls=urlClassLoader.getURLs();
  Assert.assertEquals(2,urls.length);
  File file=new File(newBootstrapClassPath);
  URI uri=file.toURI();
  Assert.assertEquals(urls[0],uri.toURL());
  file=new File(newRuntimeClassPath);
  uri=file.toURI();
  Assert.assertEquals(urls[1],uri.toURL());
  final MalformedURLException malformedURLException=new MalformedURLException();
  Map<Object,Object> handlers=ReflectionTestUtil.getFieldValue(URL.class,"handlers");
  handlers.put("file",new URLStreamHandler(){
    @Override protected void parseURL(    URL url,    String spec,    int start,    int limit){
      ReflectionUtil.throwException(malformedURLException);
    }
    @Override protected URLConnection openConnection(    URL url){
      throw new UnsupportedOperationException();
    }
  }
);
  try {
    loadedPaths.toProcessConfig(builder.build());
    Assert.fail();
  }
 catch (  ProcessException pe) {
    Assert.assertSame(malformedURLException,pe.getCause());
  }
 finally {
    handlers.clear();
  }
}
