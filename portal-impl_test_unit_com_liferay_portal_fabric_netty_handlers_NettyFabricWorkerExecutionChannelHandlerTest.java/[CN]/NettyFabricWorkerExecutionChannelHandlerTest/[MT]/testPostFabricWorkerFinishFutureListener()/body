{
  NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler=new NettyFabricWorkerExecutionChannelHandler(new MockRepository(),new EmbeddedProcessExecutor(),Long.MAX_VALUE);
  Path inputResource1=FileServerTestUtil.createEmptyFile(Paths.get("inputResource1"));
  Path inputResource2=FileServerTestUtil.createEmptyFile(Paths.get("inputResource2"));
  Map<Path,Path> inputResources=new HashMap<Path,Path>();
  inputResources.put(inputResource1,inputResource1);
  inputResources.put(inputResource2,inputResource2);
  PostFabricWorkerFinishFutureListener postFabricWorkerFinishFutureListener=nettyFabricWorkerExecutionChannelHandler.new PostFabricWorkerFinishFutureListener(_embeddedChannel,createNettyFabricWorkerConfig(),new LoadedResources(inputResources,null,null));
  DefaultNoticeableFuture<Serializable> defaultNoticeableFuture=new DefaultNoticeableFuture<Serializable>();
  Throwable throwable=new Throwable();
  defaultNoticeableFuture.setException(throwable);
  installNettyFabricAgentStub();
  NettyFabricWorkerStub<Serializable> nettyFabricWorkerStub=installNettyFabricWorkerStub();
  NoticeableFuture<?> noticeableFuture=nettyFabricWorkerStub.getProcessNoticeableFuture();
  defaultNoticeableFuture.addFutureListener(postFabricWorkerFinishFutureListener);
  Assert.assertTrue(Files.notExists(inputResource1));
  Assert.assertTrue(Files.notExists(inputResource2));
  invokeRPC();
  try {
    noticeableFuture.get();
    Assert.fail();
  }
 catch (  ExecutionException ee) {
    Assert.assertEquals(throwable,ee.getCause());
  }
  nettyFabricWorkerStub=installNettyFabricWorkerStub();
  noticeableFuture=nettyFabricWorkerStub.getProcessNoticeableFuture();
  postFabricWorkerFinishFutureListener.complete(null);
  invokeRPC();
  try {
    noticeableFuture.get();
    Assert.fail();
  }
 catch (  ExecutionException ee) {
    Throwable t=ee.getCause();
    Assert.assertSame(NullPointerException.class,t.getClass());
  }
  inputResource1=FileServerTestUtil.createEmptyFile(Paths.get("inputResource1"));
  inputResource2=FileServerTestUtil.createEmptyFile(Paths.get("inputResource2"));
  inputResources=new HashMap<Path,Path>();
  inputResources.put(inputResource1,inputResource1);
  inputResources.put(inputResource2,inputResource2);
  postFabricWorkerFinishFutureListener=nettyFabricWorkerExecutionChannelHandler.new PostFabricWorkerFinishFutureListener(_embeddedChannel,createNettyFabricWorkerConfig(),new LoadedResources(inputResources,null,null));
  defaultNoticeableFuture=new DefaultNoticeableFuture<Serializable>();
  defaultNoticeableFuture.set(StringPool.BLANK);
  nettyFabricWorkerStub=installNettyFabricWorkerStub();
  noticeableFuture=nettyFabricWorkerStub.getProcessNoticeableFuture();
  defaultNoticeableFuture.addFutureListener(postFabricWorkerFinishFutureListener);
  Assert.assertTrue(Files.notExists(inputResource1));
  Assert.assertTrue(Files.notExists(inputResource2));
  invokeRPC();
  Assert.assertEquals(StringPool.BLANK,noticeableFuture.get());
}
