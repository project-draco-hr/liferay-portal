{
  final Map<Path,Path> mergedPaths=new HashMap<>();
  Path bootstrapPath1=Paths.get("bootstrapPath1");
  Path mappedBootstrapPath1=Paths.get("mappedBootstrapPath1");
  Path bootstrapPath2=Paths.get("bootstrapPath2");
  Path bootstrapPath3=Paths.get("bootstrapPath3");
  mergedPaths.put(bootstrapPath1,mappedBootstrapPath1);
  NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler=new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>("repository"){
    @Override public NoticeableFuture<Map<Path,Path>> getFiles(    Channel channel,    Map<Path,Path> pathMap,    boolean deleteAfterFetch){
      DefaultNoticeableFuture<Map<Path,Path>> defaultNoticeableFuture=new DefaultNoticeableFuture<Map<Path,Path>>();
      defaultNoticeableFuture.set(mergedPaths);
      return defaultNoticeableFuture;
    }
  }
,new LocalFabricAgent(new EmbeddedProcessExecutor()),0);
  Builder builder=new Builder();
  builder.setBootstrapClassPath(bootstrapPath1 + File.pathSeparator + bootstrapPath2+ File.pathSeparator+ bootstrapPath3);
  builder.setRuntimeClassPath(StringPool.BLANK);
  ProcessConfig processConfig=builder.build();
  ProcessCallable<Serializable> processCallable=new ReturnProcessCallable<>(null);
  FabricPathMappingVisitor fabricPathMappingVisitor=new FabricPathMappingVisitor(InputResource.class,Paths.get("repository"));
  ObjectGraphUtil.walkObjectGraph(processCallable,fabricPathMappingVisitor);
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyFabricWorkerExecutionChannelHandler.class.getName(),Level.WARNING)){
    NoticeableFuture<LoadedPaths> noticeableFuture=nettyFabricWorkerExecutionChannelHandler.loadPaths(_embeddedChannel,new NettyFabricWorkerConfig<Serializable>(0,processConfig,processCallable,fabricPathMappingVisitor.getPathMap()));
    LoadedPaths loadedPaths=noticeableFuture.get();
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Incomplete bootstrap classpath loaded, missed: " + Arrays.asList(bootstrapPath2,bootstrapPath3),logRecord.getMessage());
    Map<Path,Path> loadedInputPaths=loadedPaths.getInputPaths();
    Assert.assertTrue(loadedInputPaths.isEmpty());
    ProcessConfig loadedProcessConfig=loadedPaths.toProcessConfig(processConfig);
    Assert.assertEquals(mappedBootstrapPath1.toString(),loadedProcessConfig.getBootstrapClassPath());
    Assert.assertEquals(StringPool.BLANK,loadedProcessConfig.getRuntimeClassPath());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyFabricWorkerExecutionChannelHandler.class.getName(),Level.OFF)){
    NoticeableFuture<LoadedPaths> noticeableFuture=nettyFabricWorkerExecutionChannelHandler.loadPaths(_embeddedChannel,new NettyFabricWorkerConfig<Serializable>(0,processConfig,processCallable,fabricPathMappingVisitor.getPathMap()));
    LoadedPaths loadedPaths=noticeableFuture.get();
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
    Map<Path,Path> loadedInputPaths=loadedPaths.getInputPaths();
    Assert.assertTrue(loadedInputPaths.isEmpty());
    ProcessConfig loadedProcessConfig=loadedPaths.toProcessConfig(processConfig);
    Assert.assertEquals(mappedBootstrapPath1.toString(),loadedProcessConfig.getBootstrapClassPath());
    Assert.assertEquals(StringPool.BLANK,loadedProcessConfig.getRuntimeClassPath());
  }
 }
