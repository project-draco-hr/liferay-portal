{
  final Map<Path,Path> mergedPaths=new HashMap<Path,Path>();
  Path inputPath1=Paths.get("inputPaths1");
  Path mappedInputPath1=Paths.get("mappedInputPath1");
  Path inputPath2=Paths.get("inputPaths2");
  mergedPaths.put(inputPath1,mappedInputPath1);
  NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler=new NettyFabricWorkerExecutionChannelHandler(new MockRepository(){
    @Override public NoticeableFuture<Map<Path,Path>> getFiles(    Map<Path,Path> pathMap,    boolean deleteAfterFetch){
      DefaultNoticeableFuture<Map<Path,Path>> defaultNoticeableFuture=new DefaultNoticeableFuture<Map<Path,Path>>();
      defaultNoticeableFuture.set(mergedPaths);
      return defaultNoticeableFuture;
    }
    @Override public Path getRepositoryPath(){
      return Paths.get("repository");
    }
  }
,new LocalFabricAgent(new EmbeddedProcessExecutor()),0);
  Builder builder=new Builder();
  builder.setBootstrapClassPath(StringPool.BLANK);
  builder.setRuntimeClassPath(StringPool.BLANK);
  ProcessConfig processConfig=builder.build();
  ProcessCallable<Serializable> processCallable=new LoadPathProcessCallable(inputPath1.toFile(),inputPath2.toFile());
  FabricPathMappingVisitor fabricPathMappingVisitor=new FabricPathMappingVisitor(InputResource.class,Paths.get("repository"));
  ObjectGraphUtil.walkObjectGraph(processCallable,fabricPathMappingVisitor);
  NoticeableFuture<LoadedPaths> noticeableFuture=nettyFabricWorkerExecutionChannelHandler.loadPaths(new NettyFabricWorkerConfig<Serializable>(0,processConfig,processCallable,fabricPathMappingVisitor.getPathMap()));
  try {
    noticeableFuture.get();
  }
 catch (  ExecutionException ee) {
    Throwable throwable=ee.getCause();
    Assert.assertSame(IOException.class,throwable.getClass());
    Assert.assertEquals("Unable to get input paths: " + Arrays.asList(inputPath2),throwable.getMessage());
  }
}
