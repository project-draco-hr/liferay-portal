{
  NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler=new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>(),new LocalFabricAgent(new EmbeddedProcessExecutor()),Long.MAX_VALUE);
  Channel channel=NettyTestUtil.createEmptyEmbeddedChannel();
  channel.close();
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyFabricWorkerExecutionChannelHandler.class.getName(),Level.SEVERE)){
    nettyFabricWorkerExecutionChannelHandler.sendResult(channel,0,StringPool.BLANK,null);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Unable to send back fabric worker result " + "{id=0, result=, throwable=null}",logRecord.getMessage());
  }
   installNettyFabricAgentStub();
  NettyFabricWorkerStub<Serializable> nettyFabricWorkerStub=installNettyFabricWorkerStub();
  NoticeableFuture<Serializable> noticeableFuture=nettyFabricWorkerStub.getProcessNoticeableFuture();
  nettyFabricWorkerExecutionChannelHandler.sendResult(_embeddedChannel,0,StringPool.BLANK,null);
  invokeRPC();
  Assert.assertEquals(StringPool.BLANK,noticeableFuture.get());
  nettyFabricWorkerStub=installNettyFabricWorkerStub();
  noticeableFuture=nettyFabricWorkerStub.getProcessNoticeableFuture();
  Throwable throwable=new Throwable();
  nettyFabricWorkerExecutionChannelHandler.sendResult(_embeddedChannel,0,null,throwable);
  invokeRPC();
  try {
    noticeableFuture.get();
    Assert.fail();
  }
 catch (  ExecutionException ee) {
    Assert.assertSame(throwable,ee.getCause());
  }
}
