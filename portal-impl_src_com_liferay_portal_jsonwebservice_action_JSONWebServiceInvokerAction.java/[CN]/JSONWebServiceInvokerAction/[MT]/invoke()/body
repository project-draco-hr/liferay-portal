{
  Object command=JSONFactoryUtil.looseDeserialize(_command);
  List<Object> list=null;
  boolean batchMode=false;
  if (command instanceof List) {
    list=(List<Object>)command;
    batchMode=true;
  }
 else   if (command instanceof Map) {
    list=new ArrayList<>(1);
    list.add(command);
    batchMode=false;
  }
 else {
    throw new IllegalArgumentException();
  }
  for (int i=0; i < list.size(); i++) {
    Map<String,Map<String,Object>> map=(Map<String,Map<String,Object>>)list.get(i);
    if (map.isEmpty()) {
      throw new IllegalArgumentException();
    }
    Set<Map.Entry<String,Map<String,Object>>> entrySet=map.entrySet();
    Iterator<Map.Entry<String,Map<String,Object>>> iterator=entrySet.iterator();
    Map.Entry<String,Map<String,Object>> entry=iterator.next();
    Statement statement=_parseStatement(null,entry.getKey(),entry.getValue());
    Object result=_executeStatement(statement);
    list.set(i,result);
  }
  Object result=null;
  if (batchMode == false) {
    result=list.get(0);
  }
 else {
    result=list;
  }
  return new InvokerResult(result);
}
