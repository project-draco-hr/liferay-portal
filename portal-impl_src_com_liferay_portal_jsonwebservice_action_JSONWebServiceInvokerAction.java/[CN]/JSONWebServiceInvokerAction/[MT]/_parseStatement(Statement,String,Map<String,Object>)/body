{
  Statement statement=new Statement(parentStatement);
  _statements.add(statement);
  int x=assignment.indexOf(StringPool.EQUAL);
  if (x == -1) {
    statement.setMethod(assignment.trim());
  }
 else {
    String name=assignment.substring(0,x).trim();
    int y=name.indexOf(StringPool.OPEN_BRACKET);
    if (y != -1) {
      String whitelistString=name.substring(y + 1,name.length() - 1);
      String[] whiteList=StringUtil.split(whitelistString);
      for (int i=0; i < whiteList.length; i++) {
        whiteList[i]=whiteList[i].trim();
      }
      statement.setWhitelist(whiteList);
      name=name.substring(0,y);
    }
    statement.setName(name);
    statement.setMethod(assignment.substring(x + 1).trim());
  }
  HashMap<String,Object> parameterMap=new HashMap<>(statementBody.size());
  statement.setParameterMap(parameterMap);
  for (  Map.Entry<String,Object> entry : statementBody.entrySet()) {
    String key=entry.getKey();
    if (key.startsWith(StringPool.AT)) {
      String value=(String)entry.getValue();
      List<Flag> flags=statement.getFlags();
      if (flags == null) {
        flags=new ArrayList<>();
        statement.setFlags(flags);
      }
      Flag flag=new Flag();
      flag.setName(key.substring(1));
      flag.setValue(value);
      flags.add(flag);
    }
 else     if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) {
      Map<String,Object> map=(Map<String,Object>)entry.getValue();
      List<Statement> variableStatements=statement.getVariableStatements();
      if (variableStatements == null) {
        variableStatements=new ArrayList<>();
        statement.setVariableStatements(variableStatements);
      }
      Statement variableStatement=_parseStatement(statement,key,map);
      variableStatements.add(variableStatement);
    }
 else {
      Object value=entry.getValue();
      parameterMap.put(CamelCaseUtil.normalizeCamelCase(key),value);
    }
  }
  return statement;
}
