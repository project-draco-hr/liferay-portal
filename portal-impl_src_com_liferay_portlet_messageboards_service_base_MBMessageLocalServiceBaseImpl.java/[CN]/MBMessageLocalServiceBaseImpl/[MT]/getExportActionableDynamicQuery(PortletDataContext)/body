{
  final ExportActionableDynamicQuery exportActionableDynamicQuery=new ExportActionableDynamicQuery(){
    @Override public long performCount() throws PortalException {
      ManifestSummary manifestSummary=portletDataContext.getManifestSummary();
      StagedModelType stagedModelType=getStagedModelType();
      long modelAdditionCount=super.performCount();
      manifestSummary.addModelAdditionCount(stagedModelType,modelAdditionCount);
      long modelDeletionCount=ExportImportHelperUtil.getModelDeletionCount(portletDataContext,stagedModelType);
      manifestSummary.addModelDeletionCount(stagedModelType,modelDeletionCount);
      return modelAdditionCount;
    }
  }
;
  initActionableDynamicQuery(exportActionableDynamicQuery);
  exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      Criterion modifiedDateCriterion=portletDataContext.getDateRangeCriteria("modifiedDate");
      if (modifiedDateCriterion != null) {
        Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
        disjunction.add(RestrictionsFactoryUtil.gtProperty("modifiedDate","lastPublishDate"));
        Property lastPublishDateProperty=PropertyFactoryUtil.forName("lastPublishDate");
        disjunction.add(lastPublishDateProperty.isNull());
        Conjunction conjunction=RestrictionsFactoryUtil.conjunction();
        conjunction.add(modifiedDateCriterion);
        conjunction.add(disjunction);
        modifiedDateCriterion=conjunction;
      }
      Criterion statusDateCriterion=portletDataContext.getDateRangeCriteria("statusDate");
      if ((modifiedDateCriterion != null) && (statusDateCriterion != null)) {
        Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
        disjunction.add(modifiedDateCriterion);
        disjunction.add(statusDateCriterion);
        dynamicQuery.add(disjunction);
      }
      StagedModelType stagedModelType=exportActionableDynamicQuery.getStagedModelType();
      long referrerClassNameId=stagedModelType.getReferrerClassNameId();
      Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
      if ((referrerClassNameId != StagedModelType.REFERRER_CLASS_NAME_ID_ALL) && (referrerClassNameId != StagedModelType.REFERRER_CLASS_NAME_ID_ANY)) {
        dynamicQuery.add(classNameIdProperty.eq(stagedModelType.getReferrerClassNameId()));
      }
 else       if (referrerClassNameId == StagedModelType.REFERRER_CLASS_NAME_ID_ANY) {
        dynamicQuery.add(classNameIdProperty.isNotNull());
      }
      Property workflowStatusProperty=PropertyFactoryUtil.forName("status");
      if (portletDataContext.isInitialPublication()) {
        dynamicQuery.add(workflowStatusProperty.ne(WorkflowConstants.STATUS_IN_TRASH));
      }
 else {
        StagedModelDataHandler<?> stagedModelDataHandler=StagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(MBMessage.class.getName());
        dynamicQuery.add(workflowStatusProperty.in(stagedModelDataHandler.getExportableStatuses()));
      }
    }
  }
);
  exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());
  exportActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<MBMessage>(){
    @Override public void performAction(    MBMessage mbMessage) throws PortalException {
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,mbMessage);
    }
  }
);
  exportActionableDynamicQuery.setStagedModelType(new StagedModelType(PortalUtil.getClassNameId(MBMessage.class.getName()),StagedModelType.REFERRER_CLASS_NAME_ID_ALL));
  return exportActionableDynamicQuery;
}
