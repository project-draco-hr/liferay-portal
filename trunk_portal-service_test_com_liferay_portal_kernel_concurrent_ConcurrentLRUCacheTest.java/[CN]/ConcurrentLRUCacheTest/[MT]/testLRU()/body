{
  ConcurrentLRUCache<String,String> concurrentLRUCache=new ConcurrentLRUCache<String,String>(2,0.5F);
  try {
    concurrentLRUCache.put(null,"value");
    fail();
  }
 catch (  NullPointerException npe) {
  }
  concurrentLRUCache.put("key1","value1");
  assertEquals(0,concurrentLRUCache.evictCount());
  assertEquals(0,concurrentLRUCache.hitCount());
  assertEquals(0,concurrentLRUCache.missCount());
  assertEquals(1,concurrentLRUCache.putCount());
  assertEquals(1,concurrentLRUCache.size());
  assertEquals("value1",concurrentLRUCache.get("key1"));
  assertEquals(0,concurrentLRUCache.evictCount());
  assertEquals(1,concurrentLRUCache.hitCount());
  assertEquals(0,concurrentLRUCache.missCount());
  assertEquals(1,concurrentLRUCache.putCount());
  assertEquals(1,concurrentLRUCache.size());
  concurrentLRUCache.put("key2","value2");
  assertEquals(0,concurrentLRUCache.evictCount());
  assertEquals(1,concurrentLRUCache.hitCount());
  assertEquals(0,concurrentLRUCache.missCount());
  assertEquals(2,concurrentLRUCache.putCount());
  assertEquals(2,concurrentLRUCache.size());
  concurrentLRUCache.put("key2","value2-2");
  assertEquals(0,concurrentLRUCache.evictCount());
  assertEquals(1,concurrentLRUCache.hitCount());
  assertEquals(0,concurrentLRUCache.missCount());
  assertEquals(3,concurrentLRUCache.putCount());
  assertEquals(2,concurrentLRUCache.size());
  concurrentLRUCache.put("key3","value3");
  assertEquals(1,concurrentLRUCache.evictCount());
  assertEquals(1,concurrentLRUCache.hitCount());
  assertEquals(0,concurrentLRUCache.missCount());
  assertEquals(4,concurrentLRUCache.putCount());
  assertEquals(2,concurrentLRUCache.size());
  assertEquals("value1",concurrentLRUCache.get("key1"));
  assertNull(concurrentLRUCache.get("key2"));
  assertEquals("value3",concurrentLRUCache.get("key3"));
  assertEquals(1,concurrentLRUCache.evictCount());
  assertEquals(3,concurrentLRUCache.hitCount());
  assertEquals(1,concurrentLRUCache.missCount());
  assertEquals(4,concurrentLRUCache.putCount());
  assertEquals(2,concurrentLRUCache.size());
}
