{
  Test test=eventContext.getEvent();
  Statement statement=new InvokeMethod(null,test.getTestInstance()){
    @Override public void evaluate(){
      eventContext.proceed();
    }
  }
;
  TestClass arquillianTestClass=test.getTestClass();
  Class<?> clazz=arquillianTestClass.getJavaClass();
  org.junit.runners.model.TestClass junitTestClass=new org.junit.runners.model.TestClass(clazz);
  Object target=test.getTestInstance();
  statement=withBefores(statement,Before.class,junitTestClass,target);
  statement=withAfters(statement,After.class,junitTestClass,target);
  Method method=test.getTestMethod();
  statement=withRules(statement,Rule.class,junitTestClass,target,Description.createTestDescription(clazz,method.getName(),method.getAnnotations()));
  List<FrameworkMethod> frameworkMethods=new ArrayList<>(junitTestClass.getAnnotatedMethods(org.junit.Test.class));
  frameworkMethods.removeAll(junitTestClass.getAnnotatedMethods(Ignore.class));
  Collections.sort(frameworkMethods,FrameworkMethodComparator.INSTANCE);
  FrameworkMethod firstFrameworkMethod=frameworkMethods.get(0);
  boolean firstMethod=false;
  if (method.equals(firstFrameworkMethod.getMethod())) {
    firstMethod=true;
    statement=withBefores(statement,BeforeClass.class,junitTestClass,null);
  }
  FrameworkMethod lastFrameworkMethod=frameworkMethods.get(frameworkMethods.size() - 1);
  boolean lastMethod=false;
  if (method.equals(lastFrameworkMethod.getMethod())) {
    lastMethod=true;
    statement=withAfters(statement,AfterClass.class,junitTestClass,null);
  }
  evaluateWithClassRule(statement,junitTestClass,target,Description.createSuiteDescription(clazz),firstMethod,lastMethod);
}
