{
  List list=new ArrayList();
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    String sql=null;
    sql="(";
    sql+=CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C);
    sql=StringUtil.replace(sql,"[$JOIN$]",CustomSQLUtil.get(JOIN_BY_GROUPS_PERMISSIONS));
    sql+=")";
    sql+=" UNION ";
    sql+="(";
    sql+=CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C);
    sql=StringUtil.replace(sql,"[$JOIN$]",CustomSQLUtil.get(JOIN_BY_ORG_GROUP_PERMISSION));
    sql=StringUtil.replace(sql,"[$PARENT_ORGANIZATION_ID_COMPARATOR$]",parentOrganizationComparator);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    sql+=")";
    sql+=" ORDER BY orgName ASC";
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("orgId",Hibernate.STRING);
    QueryPos qPos=QueryPos.getInstance(q);
    for (int i=0; i < 2; i++) {
      qPos.add(Organization.class.getName());
      qPos.add(resourceId);
      if (i == 0) {
        qPos.add(Organization.class.getName());
      }
 else       if (i == 1) {
        qPos.add(groupId);
      }
      qPos.add(companyId);
      qPos.add(parentOrganizationId);
      qPos.add(name);
      qPos.add(name);
      qPos.add(street);
      qPos.add(street);
      qPos.add(street);
      qPos.add(street);
      qPos.add(street);
      qPos.add(street);
      qPos.add(city);
      qPos.add(city);
      qPos.add(zip);
      qPos.add(zip);
      qPos.add(regionId);
      qPos.add(regionId);
      qPos.add(regionId);
      qPos.add(regionId);
      qPos.add(countryId);
      qPos.add(countryId);
      qPos.add(countryId);
      qPos.add(countryId);
    }
    Iterator itr=QueryUtil.iterate(q,HibernateUtil.getDialect(),begin,end);
    while (itr.hasNext()) {
      String organizationId=(String)itr.next();
      Organization organization=OrganizationUtil.findByPrimaryKey(organizationId);
      list.add(organization);
    }
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
  return list;
}
