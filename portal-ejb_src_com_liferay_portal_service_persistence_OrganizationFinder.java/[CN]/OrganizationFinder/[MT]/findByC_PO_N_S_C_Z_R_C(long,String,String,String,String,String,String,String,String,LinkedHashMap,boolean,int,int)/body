{
  name=StringUtil.lowerCase(name);
  street=StringUtil.lowerCase(street);
  city=StringUtil.lowerCase(city);
  zip=StringUtil.lowerCase(zip);
  if (params != null) {
    Long resourceId=(Long)params.get("permissionsResourceId");
    Long groupId=(Long)params.get("permissionsGroupId");
    if (Validator.isNotNull(groupId) && Validator.isNotNull(resourceId)) {
      return _findByPermissions(companyId,parentOrganizationId,parentOrganizationComparator,name,street,city,zip,regionId,countryId,resourceId.longValue(),groupId.longValue(),andOperator,begin,end);
    }
  }
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C);
    sql=StringUtil.replace(sql,"[$JOIN$]",_getJoin(params));
    sql=StringUtil.replace(sql,"[$WHERE$]",_getWhere(params));
    sql=StringUtil.replace(sql,"[$PARENT_ORGANIZATION_ID_COMPARATOR$]",parentOrganizationComparator);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    StringMaker sm=new StringMaker();
    sm.append(sql);
    sm.append(" ORDER BY orgName ASC");
    sql=sm.toString();
    SQLQuery q=session.createSQLQuery(sql);
    q.setCacheable(false);
    q.addScalar("orgId",Hibernate.STRING);
    QueryPos qPos=QueryPos.getInstance(q);
    _setJoin(qPos,params);
    qPos.add(companyId);
    qPos.add(parentOrganizationId);
    qPos.add(name);
    qPos.add(name);
    qPos.add(street);
    qPos.add(street);
    qPos.add(street);
    qPos.add(street);
    qPos.add(street);
    qPos.add(street);
    qPos.add(city);
    qPos.add(city);
    qPos.add(zip);
    qPos.add(zip);
    qPos.add(regionId);
    qPos.add(regionId);
    qPos.add(regionId);
    qPos.add(regionId);
    qPos.add(countryId);
    qPos.add(countryId);
    qPos.add(countryId);
    qPos.add(countryId);
    List list=new ArrayList();
    Iterator itr=QueryUtil.iterate(q,HibernateUtil.getDialect(),begin,end);
    while (itr.hasNext()) {
      String organizationId=(String)itr.next();
      Organization organization=OrganizationUtil.findByPrimaryKey(organizationId);
      list.add(organization);
    }
    return list;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
}
