{
  long currentTime=System.currentTimeMillis();
  TreeSet<NotificationEvent> notificationEventsSet=_getNotificationEvents();
  Map<String,NotificationEvent> unconfirmedNotificationEvents=_getUnconfirmedNotificationEvents();
  List<NotificationEvent> notificationEvents=new ArrayList<NotificationEvent>(notificationEventsSet.size() + unconfirmedNotificationEvents.size());
  for (  NotificationEvent notificationEvent : notificationEventsSet) {
    if (isRemoveNotificationEvent(notificationEvent,currentTime)) {
      break;
    }
 else {
      notificationEvents.add(notificationEvent);
    }
  }
  if (flush) {
    notificationEventsSet.clear();
  }
 else   if (notificationEventsSet.size() != notificationEvents.size()) {
    notificationEventsSet.retainAll(notificationEvents);
  }
  List<String> invalidNotificationEventUuids=new ArrayList<String>(unconfirmedNotificationEvents.size());
  Set<Map.Entry<String,NotificationEvent>> unconfirmedNotificationEventsSet=unconfirmedNotificationEvents.entrySet();
  Iterator<Map.Entry<String,NotificationEvent>> itr=unconfirmedNotificationEventsSet.iterator();
  while (itr.hasNext()) {
    Map.Entry<String,NotificationEvent> entry=itr.next();
    NotificationEvent notificationEvent=entry.getValue();
    if (isRemoveNotificationEvent(notificationEvent,currentTime)) {
      invalidNotificationEventUuids.add(notificationEvent.getUuid());
      itr.remove();
    }
 else {
      notificationEvents.add(entry.getValue());
    }
  }
  if (PropsValues.USER_NOTIFICATION_EVENT_CONFIRMATION_ENABLED && !invalidNotificationEventUuids.isEmpty()) {
    UserNotificationEventLocalServiceUtil.deleteUserNotificationEvents(invalidNotificationEventUuids);
  }
  return notificationEvents;
}
