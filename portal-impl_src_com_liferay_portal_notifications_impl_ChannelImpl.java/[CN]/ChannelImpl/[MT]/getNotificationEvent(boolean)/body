{
  Lock writeLock=_channelRWLock.writeLock();
  try {
    writeLock.lock();
    List<NotificationEvent> notificationEvents=new ArrayList<NotificationEvent>(_notificationEvents.size() + _unconfirmedNotificationEvents.size());
    long currentTime=System.currentTimeMillis();
    for (    NotificationEvent notificationEvent : _notificationEvents) {
      boolean remove=evaluateRemoval(notificationEvent,currentTime);
      if (!remove) {
        notificationEvents.add(notificationEvent);
      }
 else {
        break;
      }
    }
    if (flush) {
      _notificationEvents.clear();
    }
 else     if (_notificationEvents.size() != notificationEvents.size()) {
      _notificationEvents.retainAll(notificationEvents);
    }
    Collection<String> invalidNotificationEvent=new ArrayList<String>(_unconfirmedNotificationEvents.size());
    Iterator<Map.Entry<String,NotificationEvent>> unconfirmedEvtIter=_unconfirmedNotificationEvents.entrySet().iterator();
    while (unconfirmedEvtIter.hasNext()) {
      Map.Entry<String,NotificationEvent> event=unconfirmedEvtIter.next();
      boolean remove=evaluateRemoval(event.getValue(),currentTime);
      if (remove) {
        invalidNotificationEvent.add(event.getValue().getUuid());
        unconfirmedEvtIter.remove();
      }
 else {
        notificationEvents.add(event.getValue());
      }
    }
    if (invalidNotificationEvent.size() > 0) {
      try {
        _userNotificationEventLocalService.deleteUserNotificationEvents(invalidNotificationEvent);
      }
 catch (      Exception e) {
        throw new ChannelException(e);
      }
    }
    return notificationEvents;
  }
  finally {
    writeLock.unlock();
  }
}
