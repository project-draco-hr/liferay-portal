{
  TagsEntry entry=updateEntry(entryId,name);
  List curProperties=TagsPropertyUtil.findByEntryId(entryId);
  Set keepProperties=CollectionFactory.getHashSet();
  for (int i=0; i < properties.length; i++) {
    String[] property=StringUtil.split(properties[i],"|");
    Long propertyId=new Long(0);
    if (property.length > 0) {
      propertyId=new Long(GetterUtil.getLong(property[0]));
    }
    String key=StringPool.BLANK;
    if (property.length > 1) {
      key=GetterUtil.getString(property[1]);
    }
    String value=StringPool.BLANK;
    if (property.length > 2) {
      value=GetterUtil.getString(property[2]);
    }
    if (propertyId.longValue() == 0) {
      if (Validator.isNotNull(key)) {
        TagsPropertyLocalServiceUtil.addProperty(userId,entryId,key,value);
      }
    }
 else {
      if (Validator.isNull(key)) {
        TagsPropertyLocalServiceUtil.deleteProperty(propertyId.longValue());
      }
 else {
        TagsPropertyLocalServiceUtil.updateProperty(propertyId.longValue(),key,value);
        keepProperties.add(new Long(propertyId.longValue()));
      }
    }
  }
  Iterator itr=curProperties.iterator();
  while (itr.hasNext()) {
    TagsProperty property=(TagsProperty)itr.next();
    if (!keepProperties.contains(new Long(property.getPropertyId()))) {
      TagsPropertyLocalServiceUtil.deleteProperty(property);
    }
  }
  return entry;
}
