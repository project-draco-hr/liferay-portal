{
  long vocabularyScopeGroupId=group.getGroupId();
  if (isGlobalScope) {
    Company company=CompanyLocalServiceUtil.getCompany(layout.getCompanyId());
    Group companyGroup=company.getGroup();
    vocabularyScopeGroupId=companyGroup.getGroupId();
  }
  Map<String,String[]> preferenceMap=new HashMap<String,String[]>();
  AssetVocabulary assetVocabulary=addAssetVocabulary(vocabularyScopeGroupId);
  preferenceMap.put("assetVocabularyId",new String[]{assetVocabulary.getVocabularyId() + ""});
  PortletPreferences portletPreferences=getImportedPortletPreferences(layout,preferenceMap);
  Assert.assertNotNull("assetVocabularyId is null for the imported Asset Publisher",portletPreferences.getValue("assetVocabularyId",null));
  String importedAssetVocabularyIdPreference=portletPreferences.getValue("assetVocabularyId",null);
  long importedAssetVocabularyId=Long.parseLong(importedAssetVocabularyIdPreference);
  AssetVocabulary importedVocabulary=AssetVocabularyLocalServiceUtil.fetchAssetVocabulary(importedAssetVocabularyId);
  Assert.assertNotNull("Asset vocabulary not found",importedVocabulary);
  if (isGlobalScope) {
    Assert.assertEquals("Invalid Asset Vocabulary scope",vocabularyScopeGroupId,importedVocabulary.getGroupId());
  }
 else {
    Assert.assertEquals("Invalid Asset Vocabulary scope",importedGroup.getGroupId(),importedVocabulary.getGroupId());
    deleteAssetVocabulary(importedVocabulary);
  }
  deleteAssetVocabulary(assetVocabulary);
}
