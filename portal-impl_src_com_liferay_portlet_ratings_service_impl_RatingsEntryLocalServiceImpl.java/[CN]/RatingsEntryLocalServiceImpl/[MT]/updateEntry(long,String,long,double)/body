{
  boolean newEntry=false;
  long classNameId=PortalUtil.getClassNameId(className);
  double oldScore=0;
  Date now=new Date();
  RatingsEntry entry=ratingsEntryPersistence.fetchByU_C_C(userId,classNameId,classPK);
  if (entry != null) {
    oldScore=entry.getScore();
    entry.setModifiedDate(now);
    entry.setScore(score);
    ratingsEntryPersistence.update(entry,false);
    RatingsStats stats=ratingsStatsLocalService.getStats(className,classPK);
    stats.setTotalScore(stats.getTotalScore() - oldScore + score);
    stats.setAverageScore(stats.getTotalScore() / stats.getTotalEntries());
    ratingsStatsPersistence.update(stats,false);
  }
 else {
    newEntry=true;
    User user=userPersistence.findByPrimaryKey(userId);
    long entryId=counterLocalService.increment();
    entry=ratingsEntryPersistence.create(entryId);
    entry.setCompanyId(user.getCompanyId());
    entry.setUserId(user.getUserId());
    entry.setUserName(user.getFullName());
    entry.setCreateDate(now);
    entry.setModifiedDate(now);
    entry.setClassNameId(classNameId);
    entry.setClassPK(classPK);
    entry.setScore(score);
    ratingsEntryPersistence.update(entry,false);
    RatingsStats stats=ratingsStatsLocalService.getStats(className,classPK);
    stats.setTotalEntries(stats.getTotalEntries() + 1);
    stats.setTotalScore(stats.getTotalScore() + score);
    stats.setAverageScore(stats.getTotalScore() / stats.getTotalEntries());
    ratingsStatsPersistence.update(stats,false);
  }
  if (className.equals(BlogsEntry.class.getName())) {
    BlogsEntry blogsEntry=blogsEntryPersistence.findByPrimaryKey(classPK);
    BlogsStatsUser blogsStasUser=blogsStatsUserLocalService.getStatsUser(blogsEntry.getGroupId(),blogsEntry.getUserId());
    int ratingsTotalEntries=blogsStasUser.getRatingsTotalEntries();
    double ratingsTotalScore=blogsStasUser.getRatingsTotalScore();
    double ratingsAverageScore=blogsStasUser.getRatingsAverageScore();
    if (newEntry) {
      ratingsTotalEntries++;
      ratingsTotalScore+=score;
    }
 else {
      ratingsTotalScore=ratingsTotalScore - oldScore + score;
    }
    ratingsAverageScore=ratingsTotalScore / ratingsTotalEntries;
    blogsStasUser.setRatingsTotalEntries(ratingsTotalEntries);
    blogsStasUser.setRatingsTotalScore(ratingsTotalScore);
    blogsStasUser.setRatingsAverageScore(ratingsAverageScore);
    blogsStatsUserPersistence.update(blogsStasUser,false);
  }
  return entry;
}
