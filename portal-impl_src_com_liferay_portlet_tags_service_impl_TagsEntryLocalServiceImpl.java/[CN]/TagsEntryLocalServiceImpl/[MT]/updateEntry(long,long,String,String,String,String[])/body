{
  TagsEntry entry=updateEntry(entryId,name,parentEntryName,vocabularyName);
  Set<Long> newProperties=new HashSet<Long>();
  List<TagsProperty> oldProperties=tagsPropertyPersistence.findByEntryId(entryId);
  for (int i=0; i < properties.length; i++) {
    String[] property=StringUtil.split(properties[i],StringPool.COLON);
    long propertyId=0;
    if (property.length > 0) {
      propertyId=GetterUtil.getLong(property[0]);
    }
    String key=StringPool.BLANK;
    if (property.length > 1) {
      key=GetterUtil.getString(property[1]);
    }
    String value=StringPool.BLANK;
    if (property.length > 2) {
      value=GetterUtil.getString(property[2]);
    }
    if (propertyId == 0) {
      if (Validator.isNotNull(key)) {
        tagsPropertyLocalService.addProperty(userId,entryId,key,value);
      }
    }
 else {
      if (Validator.isNull(key)) {
        tagsPropertyLocalService.deleteProperty(propertyId);
      }
 else {
        tagsPropertyLocalService.updateProperty(propertyId,key,value);
        newProperties.add(propertyId);
      }
    }
  }
  for (  TagsProperty property : oldProperties) {
    if (!newProperties.contains(property.getPropertyId())) {
      tagsPropertyLocalService.deleteProperty(property);
    }
  }
  return entry;
}
