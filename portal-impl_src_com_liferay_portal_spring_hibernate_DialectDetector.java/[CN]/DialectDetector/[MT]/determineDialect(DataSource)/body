{
  Dialect dialect=null;
  Connection con=null;
  try {
    con=dataSource.getConnection();
    DatabaseMetaData metaData=con.getMetaData();
    String dbName=metaData.getDatabaseProductName();
    int dbMajorVersion=metaData.getDatabaseMajorVersion();
    if (_log.isInfoEnabled()) {
      _log.info("Determining dialect for " + dbName + " "+ dbMajorVersion);
    }
    if (dbName.startsWith("HSQL")) {
      if (_log.isWarnEnabled()) {
        _log.warn("Liferay is configured to use Hypersonic as its " + "database. Do NOT use Hypersonic in production. " + "Hypersonic is an embedded database useful "+ "for development and demo'ing purposes. "+ "The database settings can be "+ "changed in portal.properties");
      }
    }
    if (dbName.equals("ASE") && (dbMajorVersion == 15)) {
      dialect=new SybaseDialect();
    }
 else     if (dbName.startsWith("DB2") && (dbMajorVersion == 9)) {
      dialect=new DB2Dialect();
    }
 else {
      dialect=DialectFactory.determineDialect(dbName,dbMajorVersion);
    }
    DBUtil.setInstance(dialect);
    if (_log.isInfoEnabled()) {
      _log.info("Using dialect " + dialect.getClass().getName());
    }
  }
 catch (  Exception e) {
    String msg=GetterUtil.getString(e.getMessage());
    if (msg.indexOf("explicitly set for database: DB2") != -1) {
      dialect=new DB2400Dialect();
      if (_log.isWarnEnabled()) {
        _log.warn("DB2400Dialect was dynamically chosen as the " + "Hibernate dialect for DB2. This can be " + "overriden in portal.properties");
      }
    }
 else {
      _log.error(e,e);
    }
  }
 finally {
    DataAccess.cleanUp(con);
  }
  if (dialect == null) {
    throw new RuntimeException("No dialect found");
  }
  return dialect.getClass().getName();
}
