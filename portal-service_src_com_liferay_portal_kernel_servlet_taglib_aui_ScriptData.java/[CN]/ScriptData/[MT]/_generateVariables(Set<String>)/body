{
  Map<String,String> generatedVariablesMap=new HashMap<>();
  Map<String,Integer> variablesIndex=new HashMap<>();
  Set<String> generatedVariables=new HashSet<>();
  for (  String requiredFile : requiredFiles) {
    StringBundler sb=new StringBundler();
    CharSequence firstCharacter=requiredFile.subSequence(0,1);
    Matcher matcher=patternValidFirstCharacter.matcher(firstCharacter);
    if (!matcher.matches()) {
      sb.append(StringPool.UNDERLINE);
    }
 else {
      sb.append(firstCharacter);
    }
    for (int i=1; i < requiredFile.length(); i++) {
      CharSequence curCharacter=requiredFile.subSequence(i,i + 1);
      matcher=patternValidCharacters.matcher(curCharacter);
      if (!matcher.matches()) {
        while (++i < requiredFile.length()) {
          CharSequence nextCharacter=requiredFile.subSequence(i,i + 1);
          matcher=patternValidCharacters.matcher(nextCharacter);
          if (matcher.matches()) {
            sb.append(StringUtil.toUpperCase(nextCharacter.toString()));
            break;
          }
        }
      }
 else {
        sb.append(curCharacter);
      }
    }
    String generatedVariable=sb.toString();
    if (generatedVariables.contains(generatedVariable)) {
      int index=1;
      if (variablesIndex.containsKey(generatedVariable)) {
        index=variablesIndex.get(generatedVariable) + 1;
      }
      variablesIndex.put(generatedVariable,index);
      generatedVariable+=index;
    }
    generatedVariables.add(generatedVariable);
    generatedVariablesMap.put(requiredFile,generatedVariable);
  }
  return generatedVariablesMap;
}
