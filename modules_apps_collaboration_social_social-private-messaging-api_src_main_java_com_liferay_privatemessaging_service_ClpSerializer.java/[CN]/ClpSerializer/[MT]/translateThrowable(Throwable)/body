{
  if (_useReflectionToTranslateThrowable) {
    try {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
      ObjectOutputStream objectOutputStream=new ObjectOutputStream(unsyncByteArrayOutputStream);
      objectOutputStream.writeObject(throwable);
      objectOutputStream.flush();
      objectOutputStream.close();
      UnsyncByteArrayInputStream unsyncByteArrayInputStream=new UnsyncByteArrayInputStream(unsyncByteArrayOutputStream.unsafeGetByteArray(),0,unsyncByteArrayOutputStream.size());
      Thread currentThread=Thread.currentThread();
      ClassLoader contextClassLoader=currentThread.getContextClassLoader();
      ObjectInputStream objectInputStream=new ClassLoaderObjectInputStream(unsyncByteArrayInputStream,contextClassLoader);
      throwable=(Throwable)objectInputStream.readObject();
      objectInputStream.close();
      return throwable;
    }
 catch (    ClassNotFoundException cnfe) {
      if (_log.isInfoEnabled()) {
        _log.info("Do not use reflection to translate throwable");
      }
      _useReflectionToTranslateThrowable=false;
    }
catch (    SecurityException se) {
      if (_log.isInfoEnabled()) {
        _log.info("Do not use reflection to translate throwable");
      }
      _useReflectionToTranslateThrowable=false;
    }
catch (    Throwable throwable2) {
      _log.error(throwable2,throwable2);
      return throwable2;
    }
  }
  Class<?> clazz=throwable.getClass();
  String className=clazz.getName();
  if (className.equals("com.liferay.privatemessaging.exception.NoSuchUserThreadException")) {
    return new com.liferay.privatemessaging.exception.NoSuchUserThreadException(throwable.getMessage(),throwable.getCause());
  }
  return throwable;
}
