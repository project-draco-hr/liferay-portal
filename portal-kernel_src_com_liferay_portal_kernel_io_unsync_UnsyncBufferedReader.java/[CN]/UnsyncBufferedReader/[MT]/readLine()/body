{
  if (reader == null) {
    throw new IOException("Reader closed");
  }
  StringBundler sb=null;
  while (true) {
    if (index >= firstInvalidIndex) {
      readUnderlyingReader();
    }
    if (index >= firstInvalidIndex) {
      if (sb != null && sb.index() > 0) {
        return sb.toString();
      }
 else {
        return null;
      }
    }
    boolean isLineEnd=false;
    int lineStartPosition=index;
    int lineEndPosition=index;
    char lineEndChar=0;
    while (lineEndPosition < firstInvalidIndex) {
      lineEndChar=buffer[lineEndPosition];
      if ((lineEndChar == '\n') || (lineEndChar == '\r')) {
        isLineEnd=true;
        break;
      }
      lineEndPosition++;
    }
    String thisLine=new String(buffer,lineStartPosition,lineEndPosition - lineStartPosition);
    index=lineEndPosition;
    if (isLineEnd) {
      index++;
      if (lineEndChar == '\r') {
        if (index < buffer.length && buffer[index] == '\n') {
          index++;
        }
      }
      if (sb == null) {
        return thisLine;
      }
 else {
        sb.append(thisLine);
        return sb.toString();
      }
    }
    if (sb == null) {
      sb=new StringBundler();
    }
    sb.append(thisLine);
  }
}
