{
  long pk=ServiceTestUtil.nextLong();
  ShoppingOrderItem newShoppingOrderItem=_persistence.create(pk);
  newShoppingOrderItem.setOrderId(ServiceTestUtil.nextLong());
  newShoppingOrderItem.setItemId(ServiceTestUtil.randomString());
  newShoppingOrderItem.setSku(ServiceTestUtil.randomString());
  newShoppingOrderItem.setName(ServiceTestUtil.randomString());
  newShoppingOrderItem.setDescription(ServiceTestUtil.randomString());
  newShoppingOrderItem.setProperties(ServiceTestUtil.randomString());
  newShoppingOrderItem.setPrice(ServiceTestUtil.nextDouble());
  newShoppingOrderItem.setQuantity(ServiceTestUtil.nextInt());
  newShoppingOrderItem.setShippedDate(ServiceTestUtil.nextDate());
  _persistence.update(newShoppingOrderItem,false);
  ShoppingOrderItem existingShoppingOrderItem=_persistence.findByPrimaryKey(newShoppingOrderItem.getPrimaryKey());
  Assert.assertEquals(existingShoppingOrderItem.getOrderItemId(),newShoppingOrderItem.getOrderItemId());
  Assert.assertEquals(existingShoppingOrderItem.getOrderId(),newShoppingOrderItem.getOrderId());
  Assert.assertEquals(existingShoppingOrderItem.getItemId(),newShoppingOrderItem.getItemId());
  Assert.assertEquals(existingShoppingOrderItem.getSku(),newShoppingOrderItem.getSku());
  Assert.assertEquals(existingShoppingOrderItem.getName(),newShoppingOrderItem.getName());
  Assert.assertEquals(existingShoppingOrderItem.getDescription(),newShoppingOrderItem.getDescription());
  Assert.assertEquals(existingShoppingOrderItem.getProperties(),newShoppingOrderItem.getProperties());
  AssertUtils.assertEquals(existingShoppingOrderItem.getPrice(),newShoppingOrderItem.getPrice());
  Assert.assertEquals(existingShoppingOrderItem.getQuantity(),newShoppingOrderItem.getQuantity());
  Assert.assertEquals(Time.getShortTimestamp(existingShoppingOrderItem.getShippedDate()),Time.getShortTimestamp(newShoppingOrderItem.getShippedDate()));
}
