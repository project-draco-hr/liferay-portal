{
  DLFolder dlFolder=findByPrimaryKey(folderId);
  int count=countByP_N(parentFolderId,name);
  Session session=null;
  try {
    session=openSession();
    StringBundler query=null;
    if (obc != null) {
      query=new StringBundler(4 + (obc.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(4);
    }
    query.append(_SQL_SELECT_DLFOLDER_WHERE);
    query.append(_FINDER_COLUMN_P_N_PARENTFOLDERID_2);
    if (name == null) {
      query.append(_FINDER_COLUMN_P_N_NAME_1);
    }
 else {
      if (name.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_P_N_NAME_3);
      }
 else {
        query.append(_FINDER_COLUMN_P_N_NAME_2);
      }
    }
    if (obc != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,obc);
    }
 else {
      query.append(DLFolderModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Query q=session.createQuery(sql);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(parentFolderId);
    if (name != null) {
      qPos.add(name);
    }
    Object[] objArray=QueryUtil.getPrevAndNext(q,count,obc,dlFolder);
    DLFolder[] array=new DLFolderImpl[3];
    array[0]=(DLFolder)objArray[0];
    array[1]=(DLFolder)objArray[1];
    array[2]=(DLFolder)objArray[2];
    return array;
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
