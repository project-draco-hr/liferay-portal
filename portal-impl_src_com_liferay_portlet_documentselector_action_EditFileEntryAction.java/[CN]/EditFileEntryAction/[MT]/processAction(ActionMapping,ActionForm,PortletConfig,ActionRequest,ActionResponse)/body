{
  FileEntry fileEntry=null;
  try {
    UploadException uploadException=(UploadException)actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION);
    if (uploadException != null) {
      if (uploadException.isExceededLiferayFileItemSizeLimit()) {
        throw new LiferayFileItemException();
      }
 else       if (uploadException.isExceededSizeLimit()) {
        throw new FileSizeException(uploadException.getCause());
      }
      throw new PortalException(uploadException.getCause());
    }
 else {
      fileEntry=updateFileEntry(actionRequest);
    }
    String redirect=ParamUtil.getString(actionRequest,"redirect");
    int workflowAction=ParamUtil.getInteger(actionRequest,"workflowAction",WorkflowConstants.ACTION_SAVE_DRAFT);
    if ((fileEntry != null) && (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT)) {
      redirect=getSaveAndContinueRedirect(portletConfig,actionRequest,fileEntry,redirect);
      sendRedirect(actionRequest,actionResponse,redirect);
    }
 else {
      redirect=PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest,"redirect"));
      if (Validator.isNotNull(redirect)) {
        if (fileEntry != null) {
          String portletId=HttpUtil.getParameter(redirect,"p_p_id",false);
          String namespace=PortalUtil.getPortletNamespace(portletId);
          redirect=HttpUtil.addParameter(redirect,namespace + "className",DLFileEntry.class.getName());
          redirect=HttpUtil.addParameter(redirect,namespace + "classPK",fileEntry.getFileEntryId());
        }
        actionResponse.sendRedirect(redirect);
      }
    }
  }
 catch (  Exception e) {
    handleUploadException(portletConfig,actionRequest,actionResponse,e);
  }
}
