{
  List<StagedModel> dependentStagedModels=dependentStagedModelsMap.get(MBCategory.class.getSimpleName());
  MBCategory category=(MBCategory)dependentStagedModels.get(0);
  List<ObjectValuePair<String,InputStream>> objectValuePairs=MBTestUtil.getInputStreamOVPs("attachment.txt",getClass(),StringPool.BLANK);
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId(),TestPropsValues.getUserId());
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_PUBLISH);
  MBMessage message=MBMessageLocalServiceUtil.addMessage(TestPropsValues.getUserId(),RandomTestUtil.randomString(),group.getGroupId(),category.getCategoryId(),0,0,RandomTestUtil.randomString(),RandomTestUtil.randomString(),MBMessageConstants.DEFAULT_FORMAT,objectValuePairs,false,0.0,false,serviceContext);
  MBMessageLocalServiceUtil.updateAnswer(message,true,false);
  List<FileEntry> attachmentsFileEntries=message.getAttachmentsFileEntries();
  FileEntry fileEntry=attachmentsFileEntries.get(0);
  Folder folder=fileEntry.getFolder();
  while (folder != null) {
    addDependentStagedModel(dependentStagedModelsMap,DLFolder.class,folder);
    folder=folder.getParentFolder();
  }
  addDependentStagedModel(dependentStagedModelsMap,DLFileEntry.class,attachmentsFileEntries.get(0));
  Repository repository=RepositoryUtil.fetchByPrimaryKey(fileEntry.getRepositoryId());
  addDependentStagedModel(dependentStagedModelsMap,Repository.class,repository);
  return message;
}
