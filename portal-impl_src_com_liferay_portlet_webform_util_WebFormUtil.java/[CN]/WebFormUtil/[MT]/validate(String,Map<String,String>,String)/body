{
  boolean validationResult=false;
  Context context=Context.enter();
  StringBuilder sb=new StringBuilder();
  sb.append("thisFieldValue = String('" + thisFieldValue + "');\n");
  sb.append("var fieldsMap = {};\n");
  for (  String key : fieldsMap.keySet()) {
    sb.append("fieldsMap['" + key + "'] = '"+ fieldsMap.get(key)+ "';\n");
  }
  sb.append("function validation(thisFieldValue, fieldsMap) {\n");
  sb.append(validationScript);
  sb.append("};\n");
  sb.append("internalValidationResult = ");
  sb.append("validation(thisFieldValue, fieldsMap);");
  String script=sb.toString();
  try {
    Scriptable scope=context.initStandardObjects();
    Object jsfieldsMap=Context.javaToJS(fieldsMap,scope);
    ScriptableObject.putProperty(scope,"jsfieldsMap",jsfieldsMap);
    context.evaluateString(scope,script,"Validation Script",1,null);
    Object obj=ScriptableObject.getProperty(scope,"internalValidationResult");
    if (obj instanceof Boolean) {
      validationResult=((Boolean)obj).booleanValue();
    }
 else {
      throw new Exception("The script must return a boolean value");
    }
  }
 catch (  Exception e) {
    String msg="The following script has execution errors:\n" + validationScript + "\n"+ e.getMessage();
    _log.error(msg);
    throw new Exception(msg,e);
  }
 finally {
    Context.exit();
  }
  return validationResult;
}
