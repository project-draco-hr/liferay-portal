{
  long pk=RandomTestUtil.nextLong();
  SAPEntry newSAPEntry=_persistence.create(pk);
  newSAPEntry.setUuid(RandomTestUtil.randomString());
  newSAPEntry.setCompanyId(RandomTestUtil.nextLong());
  newSAPEntry.setUserId(RandomTestUtil.nextLong());
  newSAPEntry.setUserName(RandomTestUtil.randomString());
  newSAPEntry.setCreateDate(RandomTestUtil.nextDate());
  newSAPEntry.setModifiedDate(RandomTestUtil.nextDate());
  newSAPEntry.setAllowedServiceSignatures(RandomTestUtil.randomString());
  newSAPEntry.setDefaultSAPEntry(RandomTestUtil.randomBoolean());
  newSAPEntry.setEnabled(RandomTestUtil.randomBoolean());
  newSAPEntry.setName(RandomTestUtil.randomString());
  newSAPEntry.setTitle(RandomTestUtil.randomString());
  _sapEntries.add(_persistence.update(newSAPEntry));
  SAPEntry existingSAPEntry=_persistence.findByPrimaryKey(newSAPEntry.getPrimaryKey());
  Assert.assertEquals(existingSAPEntry.getUuid(),newSAPEntry.getUuid());
  Assert.assertEquals(existingSAPEntry.getSapEntryId(),newSAPEntry.getSapEntryId());
  Assert.assertEquals(existingSAPEntry.getCompanyId(),newSAPEntry.getCompanyId());
  Assert.assertEquals(existingSAPEntry.getUserId(),newSAPEntry.getUserId());
  Assert.assertEquals(existingSAPEntry.getUserName(),newSAPEntry.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingSAPEntry.getCreateDate()),Time.getShortTimestamp(newSAPEntry.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingSAPEntry.getModifiedDate()),Time.getShortTimestamp(newSAPEntry.getModifiedDate()));
  Assert.assertEquals(existingSAPEntry.getAllowedServiceSignatures(),newSAPEntry.getAllowedServiceSignatures());
  Assert.assertEquals(existingSAPEntry.getDefaultSAPEntry(),newSAPEntry.getDefaultSAPEntry());
  Assert.assertEquals(existingSAPEntry.getEnabled(),newSAPEntry.getEnabled());
  Assert.assertEquals(existingSAPEntry.getName(),newSAPEntry.getName());
  Assert.assertEquals(existingSAPEntry.getTitle(),newSAPEntry.getTitle());
}
