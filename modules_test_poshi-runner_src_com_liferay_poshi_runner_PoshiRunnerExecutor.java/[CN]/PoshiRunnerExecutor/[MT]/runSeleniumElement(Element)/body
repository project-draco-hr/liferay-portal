{
  List<String> arguments=new ArrayList<>();
  List<Class<?>> parameterClasses=new ArrayList<>();
  String selenium=executeElement.attributeValue("selenium");
  int parameterCount=PoshiRunnerContext.getSeleniumParameterCount(selenium);
  for (int i=0; i < parameterCount; i++) {
    String argument=executeElement.attributeValue("argument" + (i + 1));
    if (argument == null) {
      if (i == 0) {
        if (selenium.equals("assertConfirmation") || selenium.equals("assertConsoleTextNotPresent") || selenium.equals("assertConsoleTextPresent")|| selenium.equals("assertLocation")|| selenium.equals("assertTextNotPresent")|| selenium.equals("assertTextPresent")|| selenium.equals("waitForConfirmation")|| selenium.equals("waitForTextNotPresent")|| selenium.equals("waitForTextPresent")) {
          argument=PoshiRunnerVariablesUtil.getValueFromCommandMap("value1");
        }
 else {
          argument=PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1");
        }
      }
 else       if (i == 1) {
        argument=PoshiRunnerVariablesUtil.getValueFromCommandMap("value1");
        if (selenium.equals("clickAt")) {
          argument="";
        }
      }
 else       if (i == 2) {
        argument=PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2");
      }
    }
    arguments.add(argument);
    parameterClasses.add(String.class);
  }
  LiferaySelenium liferaySelenium=SeleniumUtil.getSelenium();
  Class<?> clazz=liferaySelenium.getClass();
  try {
    Method method=clazz.getMethod(selenium,parameterClasses.toArray(new Class[parameterClasses.size()]));
    _returnObject=method.invoke(liferaySelenium,(Object[])arguments.toArray(new String[arguments.size()]));
  }
 catch (  Exception e) {
    throw new PoshiRunnerException("\nBUILD FAILED: No Such Method",e);
  }
}
