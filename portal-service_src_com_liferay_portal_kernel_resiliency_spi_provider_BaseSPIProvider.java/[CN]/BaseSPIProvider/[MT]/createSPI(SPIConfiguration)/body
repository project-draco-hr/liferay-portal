{
  String classPath=getClassPath();
  RemoteSPI remoteSPI=createRemoteSPI(spiConfiguration);
  String spiUUID=remoteSPI.getUUID();
  SynchronousQueue<SPI> synchronousQueue=SPISynchronousQueueUtil.createSynchronousQueue(spiUUID);
  FutureTask<RegistrationReference> weldServerFutureTask=new FutureTask<RegistrationReference>(new WeldServerCallable(remoteSPI.getWelder()));
  Thread weldServerThread=new Thread(weldServerFutureTask,"Weld Server Thread for " + spiConfiguration.getSPIId());
  weldServerThread.setDaemon(true);
  weldServerThread.start();
  try {
    Future<SPI> cancelHandlerFuture=ProcessExecutor.execute(spiConfiguration.getJavaExecutable(),classPath,spiConfiguration.getJVMArguments(),remoteSPI);
    SPI spi=synchronousQueue.poll(spiConfiguration.getRegisterTimeout(),TimeUnit.MILLISECONDS);
    if (spi != null) {
      RegistrationReference registrationReference=weldServerFutureTask.get(spiConfiguration.getRegisterTimeout(),TimeUnit.MILLISECONDS);
      RemoteSPIProxy remoteSPIHolder=new RemoteSPIProxy(spi,spiConfiguration,getName(),cancelHandlerFuture,registrationReference);
      if (!MPIHelperUtil.registerSPI(remoteSPIHolder)) {
        cancelHandlerFuture.cancel(true);
        throw new PortalResiliencyException("Unable to register SPI " + remoteSPIHolder + ". Forcibly cancelled spi process launching.");
      }
      return remoteSPIHolder;
    }
 else {
      cancelHandlerFuture.cancel(true);
      throw new PortalResiliencyException("SPI synchronous queue waiting timeout. Forcibly " + "cancelled spi process launching.");
    }
  }
 catch (  InterruptedException ie) {
    throw new PortalResiliencyException("Interrupted on waiting SPI process registering back RMI Stub",ie);
  }
catch (  PortalResiliencyException pre) {
    throw pre;
  }
catch (  Exception e) {
    throw new PortalResiliencyException("Unable to launch SPI process",e);
  }
 finally {
    weldServerFutureTask.cancel(true);
    SPISynchronousQueueUtil.destroySynchronousQueue(spiUUID);
  }
}
