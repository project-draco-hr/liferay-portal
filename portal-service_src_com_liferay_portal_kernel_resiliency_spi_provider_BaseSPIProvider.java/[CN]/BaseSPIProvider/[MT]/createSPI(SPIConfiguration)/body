{
  Builder builder=new Builder();
  builder.setArguments(spiConfiguration.getJVMArguments());
  builder.setBootstrapClassPath(getClassPath());
  builder.setJavaExecutable(spiConfiguration.getJavaExecutable());
  builder.setReactClassLoader(PortalClassLoaderUtil.getClassLoader());
  builder.setRuntimeClassPath(getClassPath());
  RemoteSPI remoteSPI=createRemoteSPI(spiConfiguration);
  String spiUUID=remoteSPI.getUUID();
  SynchronousQueue<SPI> synchronousQueue=SPISynchronousQueueUtil.createSynchronousQueue(spiUUID);
  FutureTask<RegistrationReference> weldServerFutureTask=new FutureTask<RegistrationReference>(new WeldServerCallable(remoteSPI.getWelder()));
  Thread weldServerThread=new Thread(weldServerFutureTask,"Weld Server Thread for " + spiConfiguration.getSPIId());
  weldServerThread.setDaemon(true);
  weldServerThread.start();
  try {
    ProcessChannel<SPI> processChannel=ProcessExecutorUtil.execute(builder.build(),remoteSPI);
    Future<SPI> cancelHandlerFuture=processChannel.getProcessNoticeableFuture();
    SPI spi=synchronousQueue.poll(spiConfiguration.getRegisterTimeout(),TimeUnit.MILLISECONDS);
    if (spi != null) {
      RegistrationReference registrationReference=weldServerFutureTask.get(spiConfiguration.getRegisterTimeout(),TimeUnit.MILLISECONDS);
      RemoteSPIProxy remoteSPIProxy=new RemoteSPIProxy(spi,spiConfiguration,getName(),cancelHandlerFuture,registrationReference);
      if (!MPIHelperUtil.registerSPI(remoteSPIProxy)) {
        cancelHandlerFuture.cancel(true);
        throw new PortalResiliencyException("Unable to register SPI " + remoteSPIProxy + ". Forcibly cancelled SPI process launch.");
      }
      return remoteSPIProxy;
    }
    cancelHandlerFuture.cancel(true);
    throw new PortalResiliencyException("SPI synchronous queue waiting timeout. Forcibly " + "cancelled SPI process launch.");
  }
 catch (  InterruptedException ie) {
    throw new PortalResiliencyException("Interrupted on waiting SPI process, registering back RMI stub",ie);
  }
catch (  PortalResiliencyException pre) {
    throw pre;
  }
catch (  Exception e) {
    throw new PortalResiliencyException("Unable to launch SPI process",e);
  }
 finally {
    weldServerFutureTask.cancel(true);
    SPISynchronousQueueUtil.destroySynchronousQueue(spiUUID);
  }
}
