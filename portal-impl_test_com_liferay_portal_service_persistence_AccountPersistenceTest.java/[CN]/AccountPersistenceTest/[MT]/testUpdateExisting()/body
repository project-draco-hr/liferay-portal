{
  long pk=nextLong();
  Account newAccount=_persistence.create(pk);
  newAccount.setCompanyId(nextLong());
  newAccount.setUserId(nextLong());
  newAccount.setUserName(randomString());
  newAccount.setCreateDate(nextDate());
  newAccount.setModifiedDate(nextDate());
  newAccount.setParentAccountId(nextLong());
  newAccount.setName(randomString());
  newAccount.setLegalName(randomString());
  newAccount.setLegalId(randomString());
  newAccount.setLegalType(randomString());
  newAccount.setSicCode(randomString());
  newAccount.setTickerSymbol(randomString());
  newAccount.setIndustry(randomString());
  newAccount.setType(randomString());
  newAccount.setSize(randomString());
  _persistence.update(newAccount);
  Account existingAccount=_persistence.findByPrimaryKey(newAccount.getPrimaryKey());
  assertEquals(existingAccount.getAccountId(),newAccount.getAccountId());
  assertEquals(existingAccount.getCompanyId(),newAccount.getCompanyId());
  assertEquals(existingAccount.getUserId(),newAccount.getUserId());
  assertEquals(existingAccount.getUserName(),newAccount.getUserName());
  assertEquals(existingAccount.getCreateDate(),newAccount.getCreateDate());
  assertEquals(existingAccount.getModifiedDate(),newAccount.getModifiedDate());
  assertEquals(existingAccount.getParentAccountId(),newAccount.getParentAccountId());
  assertEquals(existingAccount.getName(),newAccount.getName());
  assertEquals(existingAccount.getLegalName(),newAccount.getLegalName());
  assertEquals(existingAccount.getLegalId(),newAccount.getLegalId());
  assertEquals(existingAccount.getLegalType(),newAccount.getLegalType());
  assertEquals(existingAccount.getSicCode(),newAccount.getSicCode());
  assertEquals(existingAccount.getTickerSymbol(),newAccount.getTickerSymbol());
  assertEquals(existingAccount.getIndustry(),newAccount.getIndustry());
  assertEquals(existingAccount.getType(),newAccount.getType());
  assertEquals(existingAccount.getSize(),newAccount.getSize());
}
