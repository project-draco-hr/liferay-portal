{
  String pathOfClass=StringUtil.replace(className,CharPool.PERIOD,CharPool.SLASH);
  pathOfClass=pathOfClass.concat(".class");
  URL url=classloader.getResource(pathOfClass);
  if (_log.isDebugEnabled()) {
    _log.debug("Build class path from " + url);
  }
  String protocol=url.getProtocol();
  if (protocol.equals("bundle") || protocol.equals("bundleresource")) {
    try {
      URLConnection urlConnection=url.openConnection();
      Class<?> clazz=urlConnection.getClass();
      Method getLocalURLMethod=clazz.getDeclaredMethod("getLocalURL");
      getLocalURLMethod.setAccessible(true);
      url=(URL)getLocalURLMethod.invoke(urlConnection);
    }
 catch (    Exception e) {
      _log.error("Unable to resolve local URL from bundle",e);
      return StringPool.BLANK;
    }
  }
  String path=URLCodec.decodeURL(url.getPath());
  if (_log.isDebugEnabled()) {
    _log.debug("Path " + path);
  }
  path=StringUtil.replace(path,CharPool.BACK_SLASH,CharPool.SLASH);
  if (_log.isDebugEnabled()) {
    _log.debug("Decoded path " + path);
  }
  if (ServerDetector.isWebLogic() && protocol.equals("zip")) {
    path="file:".concat(path);
  }
  if ((ServerDetector.isJBoss() || ServerDetector.isWildfly()) && (protocol.equals("vfs") || protocol.equals("vfsfile"))) {
    int pos=path.indexOf(".jar/");
    if (pos != -1) {
      String jarFilePath=path.substring(0,pos + 4);
      File jarFile=new File(jarFilePath);
      if (jarFile.isFile()) {
        path=jarFilePath + '!' + path.substring(pos + 4);
      }
    }
    path="file:".concat(path);
  }
  File dir=null;
  int pos=-1;
  if (!path.startsWith("file:") || ((pos=path.indexOf(CharPool.EXCLAMATION)) == -1)) {
    if (!path.endsWith(pathOfClass)) {
      _log.error("Class " + className + " is not loaded from a JAR file");
      return StringPool.BLANK;
    }
    String classesDirName=path.substring(0,path.length() - pathOfClass.length());
    if (!classesDirName.endsWith("/WEB-INF/classes/")) {
      _log.error("Class " + className + " is not loaded from a standard "+ "location (/WEB-INF/classes)");
      return StringPool.BLANK;
    }
    String libDirName=classesDirName.substring(0,classesDirName.length() - "classes/".length());
    libDirName+="/lib";
    dir=new File(libDirName);
  }
 else {
    pos=path.lastIndexOf(CharPool.SLASH,pos);
    dir=new File(path.substring("file:".length(),pos));
  }
  if (!dir.isDirectory()) {
    _log.error(dir.toString() + " is not a directory");
    return StringPool.BLANK;
  }
  File[] files=dir.listFiles(new FileFilter(){
    @Override public boolean accept(    File file){
      if (file.isDirectory()) {
        return false;
      }
      String name=file.getName();
      if (name.endsWith(".jar") || name.equals("bundleFile")) {
        return true;
      }
      return false;
    }
  }
);
  if (files == null) {
    return StringPool.BLANK;
  }
  Arrays.sort(files);
  StringBundler sb=new StringBundler(files.length * 2);
  for (  File file : files) {
    sb.append(file.getAbsolutePath());
    sb.append(File.pathSeparator);
  }
  sb.setIndex(sb.index() - 1);
  return sb.toString();
}
