{
  String path=request.getPathInfo();
  if (_log.isDebugEnabled()) {
    _log.debug("Path " + path);
  }
  try {
    AuthTokenUtil.checkCSRFToken(request,LanguageServlet.class.getName());
  }
 catch (  PortalException pe) {
    _log.error("Invalid authentication token received");
    return;
  }
  if (Validator.isNotNull(path) && path.startsWith(StringPool.SLASH)) {
    path=path.substring(1);
  }
  String[] pathArray=StringUtil.split(path,CharPool.SLASH);
  if (pathArray.length == 0) {
    _log.error("Language id is not specified");
    return;
  }
  if (pathArray.length == 1) {
    _log.error("Language key is not specified");
    return;
  }
  Locale locale=LocaleUtil.fromLanguageId(pathArray[0]);
  String key=pathArray[1];
  Object[] arguments=null;
  if (pathArray.length > 2) {
    arguments=new Object[pathArray.length - 2];
    System.arraycopy(pathArray,2,arguments,0,arguments.length);
  }
  String value=key;
  try {
    if (ArrayUtil.isEmpty(arguments)) {
      value=LanguageUtil.get(locale,key);
    }
 else {
      value=LanguageUtil.format(locale,key,arguments);
    }
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e,e);
    }
  }
  if (!LanguageUtil.isValidLanguageKey(locale,key)) {
    response.setDateHeader(HttpHeaders.EXPIRES,0);
    response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_NO_CACHE_VALUE);
    response.setHeader(HttpHeaders.PRAGMA,HttpHeaders.PRAGMA_NO_CACHE_VALUE);
  }
  response.setContentType(ContentTypes.TEXT_PLAIN_UTF8);
  response.setHeader(HttpHeaders.CONTENT_DISPOSITION,_CONTENT_DISPOSITION);
  ServletResponseUtil.write(response,value.getBytes(StringPool.UTF8));
}
