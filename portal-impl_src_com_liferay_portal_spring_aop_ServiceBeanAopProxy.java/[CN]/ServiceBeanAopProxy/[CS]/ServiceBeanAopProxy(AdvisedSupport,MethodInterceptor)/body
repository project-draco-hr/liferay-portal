{
  _advisedSupport=advisedSupport;
  _advisorChainFactory=_advisedSupport.getAdvisorChainFactory();
  ArrayList<MethodInterceptor> classLevelMethodInterceptors=new ArrayList<MethodInterceptor>();
  ArrayList<MethodInterceptor> fullMethodInterceptors=new ArrayList<MethodInterceptor>();
  while (true) {
    if (!(methodInterceptor instanceof ChainableMethodAdvice)) {
      classLevelMethodInterceptors.add(methodInterceptor);
      fullMethodInterceptors.add(methodInterceptor);
      break;
    }
    ChainableMethodAdvice chainableMethodAdvice=(ChainableMethodAdvice)methodInterceptor;
    if (methodInterceptor instanceof AnnotationChainableMethodAdvice) {
      AnnotationChainableMethodAdvice annotationChainableMethodAdvice=(AnnotationChainableMethodAdvice)methodInterceptor;
      Class<? extends Annotation> annotationType=annotationChainableMethodAdvice.getAnnotationType();
      Target target=annotationType.getAnnotation(Target.class);
      if (target == null) {
        classLevelMethodInterceptors.add(methodInterceptor);
      }
 else {
        for (        ElementType elementType : target.value()) {
          if (elementType == ElementType.TYPE) {
            classLevelMethodInterceptors.add(methodInterceptor);
            break;
          }
        }
      }
    }
 else {
      classLevelMethodInterceptors.add(methodInterceptor);
    }
    fullMethodInterceptors.add(methodInterceptor);
    methodInterceptor=chainableMethodAdvice.nextMethodInterceptor;
  }
  classLevelMethodInterceptors.trimToSize();
  _classLevelMethodInterceptors=classLevelMethodInterceptors;
  _fullMethodInterceptors=fullMethodInterceptors;
  AnnotationChainableMethodAdvice.registerAnnotationType(Skip.class);
}
