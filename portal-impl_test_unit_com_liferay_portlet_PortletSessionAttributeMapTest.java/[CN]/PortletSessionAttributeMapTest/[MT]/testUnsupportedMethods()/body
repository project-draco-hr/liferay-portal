{
  PortletSessionAttributeMap portletSessionAttributeMap=new PortletSessionAttributeMap(_session);
  try {
    portletSessionAttributeMap.clear();
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  try {
    portletSessionAttributeMap.put(null,null);
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  try {
    ReflectionTestUtil.invokeBridge(portletSessionAttributeMap,"put",new Class<?>[]{String.class,Object.class},null,null);
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertSame(InvocationTargetException.class,e.getClass());
    Throwable throwable=e.getCause();
    Assert.assertSame(UnsupportedOperationException.class,throwable.getClass());
  }
  try {
    portletSessionAttributeMap.putAll(null);
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  try {
    portletSessionAttributeMap.remove(null);
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  Set<String> keySet=portletSessionAttributeMap.keySet();
  try {
    keySet.clear();
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  Set<Map.Entry<String,Object>> entrySet=portletSessionAttributeMap.entrySet();
  try {
    entrySet.clear();
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
}
