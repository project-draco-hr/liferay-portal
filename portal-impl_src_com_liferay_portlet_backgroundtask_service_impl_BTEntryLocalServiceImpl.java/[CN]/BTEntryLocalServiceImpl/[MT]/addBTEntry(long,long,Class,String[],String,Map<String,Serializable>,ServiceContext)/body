{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  final long btEntryId=counterLocalService.increment();
  BTEntry btEntry=btEntryPersistence.create(btEntryId);
  btEntry.setCompanyId(user.getCompanyId());
  btEntry.setCreateDate(serviceContext.getCreateDate(now));
  btEntry.setGroupId(groupId);
  btEntry.setModifiedDate(serviceContext.getModifiedDate(now));
  btEntry.setUserId(userId);
  btEntry.setUserName(user.getFullName());
  btEntry.setName(name);
  String servletContextNamesString=StringUtil.merge(servletContextNames,StringPool.COMMA);
  if (Validator.isNotNull(servletContextNamesString)) {
    btEntry.setServletContextNames(servletContextNamesString);
  }
  btEntry.setStatus(BackgroundTaskConstants.STATUS_NEW);
  if (taskContext != null) {
    String taskContextString=JSONFactoryUtil.serialize(taskContext);
    btEntry.setTaskContext(taskContextString);
  }
  btEntry.setTaskExecutorClassName(taskExecutorClass.getName());
  btEntryPersistence.update(btEntry);
  TransactionCommitCallbackRegistryUtil.registerCallback(new Callable<Void>(){
    public Void call() throws Exception {
      Message message=new Message();
      message.put("btEntryId",btEntryId);
      MessageBusUtil.sendMessage(DestinationNames.BACKGROUND_TASK,message);
      return null;
    }
  }
);
  return btEntry;
}
