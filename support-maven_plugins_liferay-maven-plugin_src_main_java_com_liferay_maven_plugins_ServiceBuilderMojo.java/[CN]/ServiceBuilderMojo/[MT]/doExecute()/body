{
  File inputFile=new File(serviceFileName);
  if (!inputFile.exists()) {
    getLog().warn(inputFile.getAbsolutePath() + " does not exist");
    return;
  }
  getLog().info("Building from " + serviceFileName);
  PropsUtil.set("spring.configs","META-INF/service-builder-spring.xml");
  PropsUtil.set(PropsKeys.RESOURCE_ACTIONS_READ_PORTLET_RESOURCES,"false");
  InitUtil.initWithSpring();
  copyServicePropertiesFile();
  FileUtil.mkdirs(sqlDir);
  String serviceFileCopy=null;
  if (pluginType.equals("ext")) {
    pluginName=null;
    springBaseFileName=null;
    springDynamicDataSourceFileName=null;
    springHibernateFileName=null;
    springInfrastructureFileName=null;
    springShardDataSourceFileName=null;
    if (serviceFileName.indexOf("/main/resources/") > 0) {
      File serviceFile=new File(serviceFileName);
      serviceFileCopy=StringUtil.replace(serviceFileName,"/main/resources/","/main/java/");
      FileUtil.copyFile(serviceFile,new File(serviceFileCopy));
    }
  }
  new ServiceBuilder(serviceFileName,hbmFileName,ormFileName,modelHintsFileName,springFileName,springBaseFileName,null,springDynamicDataSourceFileName,springHibernateFileName,springInfrastructureFileName,springShardDataSourceFileName,apiDir,implDir,jsonFileName,remotingFileName,sqlDir,sqlFileName,sqlIndexesFileName,sqlIndexesPropertiesFileName,sqlSequencesFileName,autoNamespaceTables,beanLocatorUtil,propsUtil,pluginName,null);
  if (serviceFileCopy != null) {
    FileUtil.delete(serviceFileCopy);
  }
  moveServicePropertiesFile();
  invokeDependencyBuild();
}
