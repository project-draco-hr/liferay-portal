{
  Random random=new Random();
  final byte[] data=new byte[1024 * 1024];
  random.nextBytes(data);
  FutureTask<Void> writeFutureTask=new FutureTask<Void>(new Callable<Void>(){
    public Void call() throws Exception {
      ByteBuffer byteBuffer=ByteBuffer.wrap(data);
      while (byteBuffer.hasRemaining()) {
        gatheringByteChannel.write(byteBuffer);
      }
      return null;
    }
  }
);
  Thread writeThread=new Thread(writeFutureTask);
  writeThread.start();
  FutureTask<byte[]> readFutureTask=new FutureTask<byte[]>(new Callable<byte[]>(){
    public byte[] call() throws Exception {
      ByteBuffer byteBuffer=ByteBuffer.allocate(data.length);
      while (byteBuffer.hasRemaining()) {
        scatteringByteChannel.read(byteBuffer);
      }
      return byteBuffer.array();
    }
  }
);
  Thread readThread=new Thread(readFutureTask);
  readThread.start();
  writeFutureTask.get();
  Assert.assertArrayEquals(data,readFutureTask.get());
}
