{
  long pk=ServiceTestUtil.nextLong();
  CalEvent newCalEvent=_persistence.create(pk);
  newCalEvent.setUuid(ServiceTestUtil.randomString());
  newCalEvent.setGroupId(ServiceTestUtil.nextLong());
  newCalEvent.setCompanyId(ServiceTestUtil.nextLong());
  newCalEvent.setUserId(ServiceTestUtil.nextLong());
  newCalEvent.setUserName(ServiceTestUtil.randomString());
  newCalEvent.setCreateDate(ServiceTestUtil.nextDate());
  newCalEvent.setModifiedDate(ServiceTestUtil.nextDate());
  newCalEvent.setTitle(ServiceTestUtil.randomString());
  newCalEvent.setDescription(ServiceTestUtil.randomString());
  newCalEvent.setLocation(ServiceTestUtil.randomString());
  newCalEvent.setStartDate(ServiceTestUtil.nextDate());
  newCalEvent.setEndDate(ServiceTestUtil.nextDate());
  newCalEvent.setDurationHour(ServiceTestUtil.nextInt());
  newCalEvent.setDurationMinute(ServiceTestUtil.nextInt());
  newCalEvent.setAllDay(ServiceTestUtil.randomBoolean());
  newCalEvent.setTimeZoneSensitive(ServiceTestUtil.randomBoolean());
  newCalEvent.setType(ServiceTestUtil.randomString());
  newCalEvent.setRepeating(ServiceTestUtil.randomBoolean());
  newCalEvent.setRecurrence(ServiceTestUtil.randomString());
  newCalEvent.setRemindBy(ServiceTestUtil.nextInt());
  newCalEvent.setFirstReminder(ServiceTestUtil.nextInt());
  newCalEvent.setSecondReminder(ServiceTestUtil.nextInt());
  _persistence.update(newCalEvent);
  CalEvent existingCalEvent=_persistence.findByPrimaryKey(newCalEvent.getPrimaryKey());
  Assert.assertEquals(existingCalEvent.getUuid(),newCalEvent.getUuid());
  Assert.assertEquals(existingCalEvent.getEventId(),newCalEvent.getEventId());
  Assert.assertEquals(existingCalEvent.getGroupId(),newCalEvent.getGroupId());
  Assert.assertEquals(existingCalEvent.getCompanyId(),newCalEvent.getCompanyId());
  Assert.assertEquals(existingCalEvent.getUserId(),newCalEvent.getUserId());
  Assert.assertEquals(existingCalEvent.getUserName(),newCalEvent.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingCalEvent.getCreateDate()),Time.getShortTimestamp(newCalEvent.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingCalEvent.getModifiedDate()),Time.getShortTimestamp(newCalEvent.getModifiedDate()));
  Assert.assertEquals(existingCalEvent.getTitle(),newCalEvent.getTitle());
  Assert.assertEquals(existingCalEvent.getDescription(),newCalEvent.getDescription());
  Assert.assertEquals(existingCalEvent.getLocation(),newCalEvent.getLocation());
  Assert.assertEquals(Time.getShortTimestamp(existingCalEvent.getStartDate()),Time.getShortTimestamp(newCalEvent.getStartDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingCalEvent.getEndDate()),Time.getShortTimestamp(newCalEvent.getEndDate()));
  Assert.assertEquals(existingCalEvent.getDurationHour(),newCalEvent.getDurationHour());
  Assert.assertEquals(existingCalEvent.getDurationMinute(),newCalEvent.getDurationMinute());
  Assert.assertEquals(existingCalEvent.getAllDay(),newCalEvent.getAllDay());
  Assert.assertEquals(existingCalEvent.getTimeZoneSensitive(),newCalEvent.getTimeZoneSensitive());
  Assert.assertEquals(existingCalEvent.getType(),newCalEvent.getType());
  Assert.assertEquals(existingCalEvent.getRepeating(),newCalEvent.getRepeating());
  Assert.assertEquals(existingCalEvent.getRecurrence(),newCalEvent.getRecurrence());
  Assert.assertEquals(existingCalEvent.getRemindBy(),newCalEvent.getRemindBy());
  Assert.assertEquals(existingCalEvent.getFirstReminder(),newCalEvent.getFirstReminder());
  Assert.assertEquals(existingCalEvent.getSecondReminder(),newCalEvent.getSecondReminder());
}
