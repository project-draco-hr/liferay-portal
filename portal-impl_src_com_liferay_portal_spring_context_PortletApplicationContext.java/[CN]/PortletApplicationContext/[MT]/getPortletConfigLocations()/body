{
  String[] configLocations=getConfigLocations();
  ClassLoader classLoader=PortletClassLoaderUtil.getClassLoader();
  Configuration serviceBuilderPropertiesConfiguration=null;
  try {
    serviceBuilderPropertiesConfiguration=ConfigurationFactoryUtil.getConfiguration(classLoader,"service");
  }
 catch (  Exception e) {
    if (_log.isDebugEnabled()) {
      _log.debug("Unable to read service.properties");
    }
    return configLocations;
  }
  List<String> serviceBuilderPropertiesConfigLocations=Arrays.asList(serviceBuilderPropertiesConfiguration.getArray(PropsKeys.SPRING_CONFIGS));
  serviceBuilderPropertiesConfigLocations.remove("WEB-INF/classes/META-INF/base-spring.xml");
  serviceBuilderPropertiesConfigLocations.remove("WEB-INF/classes/META-INF/cluster-spring.xml");
  serviceBuilderPropertiesConfigLocations.remove("WEB-INF/classes/META-INF/hibernate-spring.xml");
  serviceBuilderPropertiesConfigLocations.remove("WEB-INF/classes/META-INF/infrastructure-spring.xml");
  serviceBuilderPropertiesConfigLocations.remove("WEB-INF/classes/META-INF/shard-data-source-spring.xml");
  return ArrayUtil.append(configLocations,serviceBuilderPropertiesConfigLocations.toArray(new String[serviceBuilderPropertiesConfigLocations.size()]));
}
