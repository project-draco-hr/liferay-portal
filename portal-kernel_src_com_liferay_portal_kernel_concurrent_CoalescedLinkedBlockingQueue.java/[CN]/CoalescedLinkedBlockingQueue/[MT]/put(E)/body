{
  if (e == null) {
    throw new NullPointerException();
  }
  int c=-1;
  final ReentrantLock putLock=this.putLock;
  final AtomicInteger count=this.count;
  putLock.lockInterruptibly();
  try {
    if (coalesceElement(e)) {
      return;
    }
    while (count.get() == capacity) {
      notFull.await();
    }
    enqueue(e);
    c=count.getAndIncrement();
    if (c + 1 < capacity) {
      notFull.signal();
    }
  }
  finally {
    putLock.unlock();
  }
  if (c == 0) {
    signalNotEmpty();
  }
}
