{
  if (transactional == null) {
    return null;
  }
  RuleBasedTransactionAttribute ruleBasedTransactionAttribute=new RuleBasedTransactionAttribute();
  int isolationLevel=transactional.isolation().value();
  if (isolationLevel == TransactionDefinition.ISOLATION_COUNTER) {
    ruleBasedTransactionAttribute.setIsolationLevel(PropsValues.TRANSACTION_ISOLATION_COUNTER);
  }
 else   if (isolationLevel == TransactionDefinition.ISOLATION_PORTAL) {
    ruleBasedTransactionAttribute.setIsolationLevel(PropsValues.TRANSACTION_ISOLATION_PORTAL);
  }
 else {
    ruleBasedTransactionAttribute.setIsolationLevel(isolationLevel);
  }
  ruleBasedTransactionAttribute.setPropagationBehavior(transactional.propagation().value());
  ruleBasedTransactionAttribute.setReadOnly(transactional.readOnly());
  ruleBasedTransactionAttribute.setTimeout(transactional.timeout());
  List<RollbackRuleAttribute> rollBackAttributes=new ArrayList<RollbackRuleAttribute>();
  Class<?>[] rollbackFor=transactional.rollbackFor();
  for (int i=0; i < rollbackFor.length; i++) {
    RollbackRuleAttribute rollbackRuleAttribute=new RollbackRuleAttribute(rollbackFor[i]);
    rollBackAttributes.add(rollbackRuleAttribute);
  }
  String[] rollbackForClassName=transactional.rollbackForClassName();
  for (int i=0; i < rollbackForClassName.length; i++) {
    RollbackRuleAttribute rollbackRuleAttribute=new RollbackRuleAttribute(rollbackForClassName[i]);
    rollBackAttributes.add(rollbackRuleAttribute);
  }
  Class<?>[] noRollbackFor=transactional.noRollbackFor();
  for (int i=0; i < noRollbackFor.length; ++i) {
    NoRollbackRuleAttribute noRollbackRuleAttribute=new NoRollbackRuleAttribute(noRollbackFor[i]);
    rollBackAttributes.add(noRollbackRuleAttribute);
  }
  String[] noRollbackForClassName=transactional.noRollbackForClassName();
  for (int i=0; i < noRollbackForClassName.length; ++i) {
    NoRollbackRuleAttribute noRollbackRuleAttribute=new NoRollbackRuleAttribute(noRollbackForClassName[i]);
    rollBackAttributes.add(noRollbackRuleAttribute);
  }
  ruleBasedTransactionAttribute.getRollbackRules().addAll(rollBackAttributes);
  return ruleBasedTransactionAttribute;
}
