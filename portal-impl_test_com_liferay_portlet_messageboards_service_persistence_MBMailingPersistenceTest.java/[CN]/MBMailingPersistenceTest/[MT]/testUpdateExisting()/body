{
  long pk=nextLong();
  MBMailing newMBMailing=_persistence.create(pk);
  newMBMailing.setUuid(randomString());
  newMBMailing.setGroupId(nextLong());
  newMBMailing.setCompanyId(nextLong());
  newMBMailing.setUserId(nextLong());
  newMBMailing.setUserName(randomString());
  newMBMailing.setCreateDate(nextDate());
  newMBMailing.setModifiedDate(nextDate());
  newMBMailing.setCategoryId(nextLong());
  newMBMailing.setMailingListAddress(randomString());
  newMBMailing.setMailAddress(randomString());
  newMBMailing.setMailInProtocol(randomString());
  newMBMailing.setMailInServerName(randomString());
  newMBMailing.setMailInUseSSL(randomBoolean());
  newMBMailing.setMailInServerPort(nextInt());
  newMBMailing.setMailInUserName(randomString());
  newMBMailing.setMailInPassword(randomString());
  newMBMailing.setMailInReadInterval(nextInt());
  newMBMailing.setMailOutConfigured(randomBoolean());
  newMBMailing.setMailOutServerName(randomString());
  newMBMailing.setMailOutUseSSL(randomBoolean());
  newMBMailing.setMailOutServerPort(nextInt());
  newMBMailing.setMailOutUserName(randomString());
  newMBMailing.setMailOutPassword(randomString());
  newMBMailing.setActive(randomBoolean());
  _persistence.update(newMBMailing,false);
  MBMailing existingMBMailing=_persistence.findByPrimaryKey(newMBMailing.getPrimaryKey());
  assertEquals(existingMBMailing.getUuid(),newMBMailing.getUuid());
  assertEquals(existingMBMailing.getMailingId(),newMBMailing.getMailingId());
  assertEquals(existingMBMailing.getGroupId(),newMBMailing.getGroupId());
  assertEquals(existingMBMailing.getCompanyId(),newMBMailing.getCompanyId());
  assertEquals(existingMBMailing.getUserId(),newMBMailing.getUserId());
  assertEquals(existingMBMailing.getUserName(),newMBMailing.getUserName());
  assertEquals(existingMBMailing.getCreateDate(),newMBMailing.getCreateDate());
  assertEquals(existingMBMailing.getModifiedDate(),newMBMailing.getModifiedDate());
  assertEquals(existingMBMailing.getCategoryId(),newMBMailing.getCategoryId());
  assertEquals(existingMBMailing.getMailingListAddress(),newMBMailing.getMailingListAddress());
  assertEquals(existingMBMailing.getMailAddress(),newMBMailing.getMailAddress());
  assertEquals(existingMBMailing.getMailInProtocol(),newMBMailing.getMailInProtocol());
  assertEquals(existingMBMailing.getMailInServerName(),newMBMailing.getMailInServerName());
  assertEquals(existingMBMailing.getMailInUseSSL(),newMBMailing.getMailInUseSSL());
  assertEquals(existingMBMailing.getMailInServerPort(),newMBMailing.getMailInServerPort());
  assertEquals(existingMBMailing.getMailInUserName(),newMBMailing.getMailInUserName());
  assertEquals(existingMBMailing.getMailInPassword(),newMBMailing.getMailInPassword());
  assertEquals(existingMBMailing.getMailInReadInterval(),newMBMailing.getMailInReadInterval());
  assertEquals(existingMBMailing.getMailOutConfigured(),newMBMailing.getMailOutConfigured());
  assertEquals(existingMBMailing.getMailOutServerName(),newMBMailing.getMailOutServerName());
  assertEquals(existingMBMailing.getMailOutUseSSL(),newMBMailing.getMailOutUseSSL());
  assertEquals(existingMBMailing.getMailOutServerPort(),newMBMailing.getMailOutServerPort());
  assertEquals(existingMBMailing.getMailOutUserName(),newMBMailing.getMailOutUserName());
  assertEquals(existingMBMailing.getMailOutPassword(),newMBMailing.getMailOutPassword());
  assertEquals(existingMBMailing.getActive(),newMBMailing.getActive());
}
