{
  try {
    AuthVerifierResult authVerifierResult=new AuthVerifierResult();
    HttpServletRequest request=accessControlContext.getRequest();
    HttpAuthorizationHeader httpAuthorizationHeader=HttpAuthManagerUtil.parse(request);
    String scheme=httpAuthorizationHeader.getScheme();
    long userId=0;
    if (StringUtil.equalsIgnoreCase(scheme,HttpAuthorizationHeader.SCHEME_DIGEST)) {
      userId=HttpAuthManagerUtil.getUserId(request,httpAuthorizationHeader);
    }
    if (userId == 0) {
      boolean forcedDigestAuth=MapUtil.getBoolean(accessControlContext.getSettings(),"digest_auth");
      if (forcedDigestAuth) {
        HttpServletResponse response=accessControlContext.getResponse();
        httpAuthorizationHeader=new HttpAuthorizationHeader(HttpAuthorizationHeader.SCHEME_DIGEST);
        HttpAuthManagerUtil.generateChallenge(request,response,httpAuthorizationHeader);
        authVerifierResult.setState(AuthVerifierResult.State.INVALID_CREDENTIALS);
      }
      return authVerifierResult;
    }
    authVerifierResult.setState(AuthVerifierResult.State.SUCCESS);
    authVerifierResult.setUserId(userId);
    return authVerifierResult;
  }
 catch (  PortalException se) {
    throw new AuthException(se);
  }
catch (  SystemException se) {
    throw new AuthException(se);
  }
}
