{
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long workflowTaskId=ParamUtil.getLong(actionRequest,"workflowTaskId");
  long assigneeUserId=ParamUtil.getLong(actionRequest,"assigneeUserId");
  String comment=ParamUtil.getString(actionRequest,"comment");
  StringBundler sb=new StringBundler(6);
  if (cmd.equals(Constants.ASSIGN)) {
    sb.append(LanguageUtil.get(themeDisplay.getLocale(),"task-assigned-to"));
    sb.append(StringPool.SPACE);
    sb.append(PortalUtil.getUserName(assigneeUserId,StringPool.BLANK));
  }
 else {
    sb.append(LanguageUtil.get(themeDisplay.getLocale(),"task-updated"));
  }
  if (Validator.isNotNull(comment)) {
    sb.append(StringPool.COLON);
    sb.append(StringPool.SPACE);
    sb.append(comment);
  }
  String threadView=PropsValues.DISCUSSION_THREAD_VIEW;
  MBMessageDisplay messageDisplay=MBMessageLocalServiceUtil.getDiscussionMessageDisplay(themeDisplay.getUserId(),WorkflowTask.class.getName(),workflowTaskId,StatusConstants.APPROVED,threadView);
  MBThread thread=messageDisplay.getThread();
  ServiceContext serviceContext=ServiceContextFactory.getInstance(MBMessage.class.getName(),actionRequest);
  MBMessageServiceUtil.addDiscussionMessage(WorkflowTask.class.getName(),workflowTaskId,thread.getThreadId(),thread.getRootMessageId(),null,sb.toString(),serviceContext);
}
