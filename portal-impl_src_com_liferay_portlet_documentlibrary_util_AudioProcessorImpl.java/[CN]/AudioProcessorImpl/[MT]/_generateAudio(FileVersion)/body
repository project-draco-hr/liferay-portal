{
  String tempFileId=DLUtil.getTempFileId(fileVersion.getFileEntryId(),fileVersion.getVersion());
  File[] previewTempFiles=new File[_PREVIEW_TYPES.length];
  for (int i=0; i < _PREVIEW_TYPES.length; i++) {
    previewTempFiles[i]=getPreviewTempFile(tempFileId,_PREVIEW_TYPES[i]);
  }
  File audioTempFile=null;
  InputStream inputStream=null;
  try {
    audioTempFile=FileUtil.createTempFile(fileVersion.getExtension());
    if (!PrefsPropsUtil.getBoolean(PropsKeys.XUGGLER_ENABLED,PropsValues.XUGGLER_ENABLED) || _hasAudio(fileVersion)) {
      return;
    }
    if (!hasPreviews(fileVersion)) {
      File file=null;
      if (fileVersion instanceof LiferayFileVersion) {
        try {
          LiferayFileVersion liferayFileVersion=(LiferayFileVersion)fileVersion;
          file=liferayFileVersion.getFile(false);
        }
 catch (        UnsupportedOperationException uoe) {
        }
      }
      if (file == null) {
        inputStream=fileVersion.getContentStream(false);
        FileUtil.write(audioTempFile,inputStream);
        file=audioTempFile;
      }
      try {
        _generateAudioXuggler(fileVersion,file,previewTempFiles);
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  }
 catch (  NoSuchFileEntryException nsfee) {
  }
 finally {
    StreamUtil.cleanUp(inputStream);
    _fileVersionIds.remove(fileVersion.getFileVersionId());
    for (int i=0; i < previewTempFiles.length; i++) {
      FileUtil.delete(previewTempFiles[i]);
    }
    FileUtil.delete(audioTempFile);
  }
}
