{
  Object[] finderArgs=new Object[]{calendarId,notificationType,notificationTemplateType};
  Object result=null;
  if (retrieveFromCache) {
    result=FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_C_NT_NTT,finderArgs,this);
  }
  if (result instanceof CalendarNotificationTemplate) {
    CalendarNotificationTemplate calendarNotificationTemplate=(CalendarNotificationTemplate)result;
    if ((calendarId != calendarNotificationTemplate.getCalendarId()) || !Validator.equals(notificationType,calendarNotificationTemplate.getNotificationType()) || !Validator.equals(notificationTemplateType,calendarNotificationTemplate.getNotificationTemplateType())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(5);
    query.append(_SQL_SELECT_CALENDARNOTIFICATIONTEMPLATE_WHERE);
    query.append(_FINDER_COLUMN_C_NT_NTT_CALENDARID_2);
    boolean bindNotificationType=false;
    if (notificationType == null) {
      query.append(_FINDER_COLUMN_C_NT_NTT_NOTIFICATIONTYPE_1);
    }
 else     if (notificationType.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_C_NT_NTT_NOTIFICATIONTYPE_3);
    }
 else {
      bindNotificationType=true;
      query.append(_FINDER_COLUMN_C_NT_NTT_NOTIFICATIONTYPE_2);
    }
    boolean bindNotificationTemplateType=false;
    if (notificationTemplateType == null) {
      query.append(_FINDER_COLUMN_C_NT_NTT_NOTIFICATIONTEMPLATETYPE_1);
    }
 else     if (notificationTemplateType.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_C_NT_NTT_NOTIFICATIONTEMPLATETYPE_3);
    }
 else {
      bindNotificationTemplateType=true;
      query.append(_FINDER_COLUMN_C_NT_NTT_NOTIFICATIONTEMPLATETYPE_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(calendarId);
      if (bindNotificationType) {
        qPos.add(notificationType);
      }
      if (bindNotificationTemplateType) {
        qPos.add(notificationTemplateType);
      }
      List<CalendarNotificationTemplate> list=q.list();
      if (list.isEmpty()) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_C_NT_NTT,finderArgs,list);
      }
 else {
        if ((list.size() > 1) && _log.isWarnEnabled()) {
          _log.warn("CalendarNotificationTemplatePersistenceImpl.fetchByC_NT_NTT(long, String, String, boolean) with parameters (" + StringUtil.merge(finderArgs) + ") yields a result set with more than 1 result. This violates the logical unique restriction. There is no order guarantee on which result is returned by this finder.");
        }
        CalendarNotificationTemplate calendarNotificationTemplate=list.get(0);
        result=calendarNotificationTemplate;
        cacheResult(calendarNotificationTemplate);
        if ((calendarNotificationTemplate.getCalendarId() != calendarId) || (calendarNotificationTemplate.getNotificationType() == null) || !calendarNotificationTemplate.getNotificationType().equals(notificationType)|| (calendarNotificationTemplate.getNotificationTemplateType() == null)|| !calendarNotificationTemplate.getNotificationTemplateType().equals(notificationTemplateType)) {
          FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_C_NT_NTT,finderArgs,calendarNotificationTemplate);
        }
      }
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_C_NT_NTT,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (CalendarNotificationTemplate)result;
  }
}
