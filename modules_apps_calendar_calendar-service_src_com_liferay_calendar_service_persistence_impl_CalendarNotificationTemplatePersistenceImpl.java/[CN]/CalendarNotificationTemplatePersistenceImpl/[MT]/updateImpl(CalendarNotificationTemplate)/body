{
  calendarNotificationTemplate=toUnwrappedModel(calendarNotificationTemplate);
  boolean isNew=calendarNotificationTemplate.isNew();
  CalendarNotificationTemplateModelImpl calendarNotificationTemplateModelImpl=(CalendarNotificationTemplateModelImpl)calendarNotificationTemplate;
  if (Validator.isNull(calendarNotificationTemplate.getUuid())) {
    String uuid=PortalUUIDUtil.generate();
    calendarNotificationTemplate.setUuid(uuid);
  }
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  Date now=new Date();
  if (isNew && (calendarNotificationTemplate.getCreateDate() == null)) {
    if (serviceContext == null) {
      calendarNotificationTemplate.setCreateDate(now);
    }
 else {
      calendarNotificationTemplate.setCreateDate(serviceContext.getCreateDate(now));
    }
  }
  if (!calendarNotificationTemplateModelImpl.hasSetModifiedDate()) {
    if (serviceContext == null) {
      calendarNotificationTemplate.setModifiedDate(now);
    }
 else {
      calendarNotificationTemplate.setModifiedDate(serviceContext.getModifiedDate(now));
    }
  }
  Session session=null;
  try {
    session=openSession();
    if (calendarNotificationTemplate.isNew()) {
      session.save(calendarNotificationTemplate);
      calendarNotificationTemplate.setNew(false);
    }
 else {
      calendarNotificationTemplate=(CalendarNotificationTemplate)session.merge(calendarNotificationTemplate);
    }
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
  finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
  if (isNew || !CalendarNotificationTemplateModelImpl.COLUMN_BITMASK_ENABLED) {
    finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
  }
 else {
    if ((calendarNotificationTemplateModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{calendarNotificationTemplateModelImpl.getOriginalUuid()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID,args);
      args=new Object[]{calendarNotificationTemplateModelImpl.getUuid()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID,args);
    }
    if ((calendarNotificationTemplateModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{calendarNotificationTemplateModelImpl.getOriginalUuid(),calendarNotificationTemplateModelImpl.getOriginalCompanyId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C,args);
      args=new Object[]{calendarNotificationTemplateModelImpl.getUuid(),calendarNotificationTemplateModelImpl.getCompanyId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C,args);
    }
    if ((calendarNotificationTemplateModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_CALENDARID.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{calendarNotificationTemplateModelImpl.getOriginalCalendarId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_CALENDARID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_CALENDARID,args);
      args=new Object[]{calendarNotificationTemplateModelImpl.getCalendarId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_CALENDARID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_CALENDARID,args);
    }
  }
  entityCache.putResult(CalendarNotificationTemplateModelImpl.ENTITY_CACHE_ENABLED,CalendarNotificationTemplateImpl.class,calendarNotificationTemplate.getPrimaryKey(),calendarNotificationTemplate,false);
  clearUniqueFindersCache(calendarNotificationTemplateModelImpl);
  cacheUniqueFindersCache(calendarNotificationTemplateModelImpl,isNew);
  calendarNotificationTemplate.resetOriginalValues();
  return calendarNotificationTemplate;
}
