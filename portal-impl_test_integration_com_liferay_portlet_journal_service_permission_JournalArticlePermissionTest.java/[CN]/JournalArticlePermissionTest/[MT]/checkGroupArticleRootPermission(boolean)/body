{
  User user=UserTestUtil.addUser();
  UserLocalServiceUtil.addGroupUser(_group.getGroupId(),user);
  PermissionChecker permissionChecker=_getPermissionChecker(user);
  if (!hasRootPermission) {
    RoleTestUtil.removeResourcePermission(RoleConstants.POWER_USER,JournalPermission.RESOURCE_NAME,ResourceConstants.SCOPE_GROUP,String.valueOf(_group.getGroupId()),ActionKeys.VIEW);
  }
  long groupId=_group.getGroupId();
  int status=WorkflowConstants.STATUS_ANY;
  boolean hasViewPermission=JournalArticlePermission.contains(permissionChecker,groupId,_article.getArticleId(),status,ActionKeys.VIEW);
  boolean hasSubarticleViewPermission=JournalArticlePermission.contains(permissionChecker,groupId,_subarticle.getArticleId(),status,ActionKeys.VIEW);
  if (!hasRootPermission) {
    Assert.assertFalse(hasViewPermission);
    Assert.assertFalse(hasSubarticleViewPermission);
  }
 else {
    Assert.assertTrue(hasViewPermission);
    Assert.assertTrue(hasSubarticleViewPermission);
  }
  if (!hasRootPermission) {
    RoleTestUtil.addResourcePermission(RoleConstants.POWER_USER,JournalPermission.RESOURCE_NAME,ResourceConstants.SCOPE_GROUP,String.valueOf(_group.getGroupId()),ActionKeys.VIEW);
  }
}
