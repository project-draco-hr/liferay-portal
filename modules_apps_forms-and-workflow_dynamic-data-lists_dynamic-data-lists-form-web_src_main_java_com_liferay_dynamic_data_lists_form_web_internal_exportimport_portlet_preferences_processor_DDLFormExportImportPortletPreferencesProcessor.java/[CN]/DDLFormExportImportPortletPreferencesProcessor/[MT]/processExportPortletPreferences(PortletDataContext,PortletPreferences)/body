{
  try {
    portletDataContext.addPortletPermissions(DDLPermission.RESOURCE_NAME);
  }
 catch (  PortalException pe) {
    throw new PortletDataException("Unable to export portlet permissions",pe);
  }
  String portletId=portletDataContext.getPortletId();
  final long recordSetId=GetterUtil.getLong(portletPreferences.getValue("recordSetId",null));
  if (recordSetId == 0) {
    if (_log.isWarnEnabled()) {
      _log.warn("Record set ID is not set for preferences of portlet " + portletId);
    }
    return portletPreferences;
  }
  DDLRecordSet recordSet=_ddlRecordSetLocalService.fetchRecordSet(recordSetId);
  if (recordSet != null) {
    StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext,portletId,recordSet);
    ActionableDynamicQuery recordActionableDynamicQuery=_ddlRecordStagedModelRepository.getExportActionableDynamicQuery(portletDataContext,DDLRecordSetConstants.SCOPE_FORMS);
    final ActionableDynamicQuery.AddCriteriaMethod addCriteriaMethod=recordActionableDynamicQuery.getAddCriteriaMethod();
    recordActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
      @Override public void addCriteria(      DynamicQuery dynamicQuery){
        addCriteriaMethod.addCriteria(dynamicQuery);
        Property property=PropertyFactoryUtil.forName("recordSetId");
        dynamicQuery.add(property.eq(recordSetId));
      }
    }
);
    try {
      recordActionableDynamicQuery.performActions();
    }
 catch (    PortalException pe) {
      throw new PortletDataException("Unable to export referenced records",pe);
    }
  }
  return portletPreferences;
}
