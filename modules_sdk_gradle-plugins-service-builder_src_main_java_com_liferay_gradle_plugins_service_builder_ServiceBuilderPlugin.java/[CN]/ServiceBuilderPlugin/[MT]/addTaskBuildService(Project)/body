{
  final BuildServiceTask buildServiceTask=GradleUtil.addTask(project,BUILD_SERVICE_TASK_NAME,BuildServiceTask.class);
  buildServiceTask.setDescription("Runs Liferay Service Builder.");
  buildServiceTask.setGroup(BasePlugin.BUILD_GROUP);
  buildServiceTask.setHbmFile(new Callable<File>(){
    @Override public File call() throws Exception {
      File resourcesDir=getResourcesDir(project);
      String fileName="META-INF/portlet-hbm.xml";
      if (buildServiceTask.isOsgiModule()) {
        fileName="META-INF/module-hbm.xml";
      }
      return new File(resourcesDir,fileName);
    }
  }
);
  buildServiceTask.setImplDir(new Callable<File>(){
    @Override public File call() throws Exception {
      return getJavaDir(project);
    }
  }
);
  buildServiceTask.setInputFile("service.xml");
  buildServiceTask.setModelHintsFile(new Callable<File>(){
    @Override public File call() throws Exception {
      File resourcesDir=getResourcesDir(project);
      return new File(resourcesDir,"META-INF/portlet-model-hints.xml");
    }
  }
);
  buildServiceTask.setPluginName(new Callable<String>(){
    @Override public String call() throws Exception {
      if (buildServiceTask.isOsgiModule()) {
        return "";
      }
      return project.getName();
    }
  }
);
  buildServiceTask.setPropsUtil(new Callable<String>(){
    @Override public String call() throws Exception {
      if (buildServiceTask.isOsgiModule()) {
        String bundleSymbolicName=_osgiHelper.getBundleSymbolicName(project);
        return bundleSymbolicName + ".util.ServiceProps";
      }
      return "com.liferay.util.service.ServiceProps";
    }
  }
);
  buildServiceTask.setResourcesDir(new Callable<File>(){
    @Override public File call() throws Exception {
      return getResourcesDir(project);
    }
  }
);
  buildServiceTask.setSpringFile(new Callable<File>(){
    @Override public File call() throws Exception {
      File resourcesDir=getResourcesDir(project);
      String fileName="META-INF/portlet-spring.xml";
      if (buildServiceTask.isOsgiModule()) {
        fileName="META-INF/spring/module-spring.xml";
      }
      return new File(resourcesDir,fileName);
    }
  }
);
  buildServiceTask.setSqlDir(new Callable<File>(){
    @Override public File call() throws Exception {
      File resourcesDir=getResourcesDir(project);
      return new File(resourcesDir,"META-INF/sql");
    }
  }
);
  PluginContainer pluginContainer=project.getPlugins();
  pluginContainer.withType(WarPlugin.class,new Action<WarPlugin>(){
    @Override public void execute(    WarPlugin warPlugin){
      configureTaskBuildServiceForWarPlugin(buildServiceTask);
    }
  }
);
  return buildServiceTask;
}
