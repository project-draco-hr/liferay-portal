{
  URLClassLoader urlClassLoader=new URLClassLoader(urls,null);
  Class<? extends Callable<T>> callableClass=constructor.getDeclaringClass();
  assertSame(callableClass + " is not enclosed by " + getClass(),getClass(),callableClass.getEnclosingClass());
  callableClass=(Class<? extends Callable<T>>)urlClassLoader.loadClass(callableClass.getName());
  Class<?>[] parameterTypes=constructor.getParameterTypes();
  for (int i=0; i < parameterTypes.length; i++) {
    parameterTypes[i]=urlClassLoader.loadClass(parameterTypes[i].getName());
  }
  constructor=callableClass.getDeclaredConstructor(parameterTypes);
  if (constructor.getParameterTypes().length > arguments.length) {
    Class<?> outterClass=urlClassLoader.loadClass(getClass().getName());
    Object outterObject=outterClass.newInstance();
    Object[] newArguments=new Object[arguments.length + 1];
    newArguments[0]=outterObject;
    System.arraycopy(arguments,0,newArguments,1,arguments.length);
    arguments=newArguments;
  }
  constructor.setAccessible(true);
  Callable<T> callable=constructor.newInstance(arguments);
  Thread currentThread=Thread.currentThread();
  ClassLoader classLoader=currentThread.getContextClassLoader();
  try {
    currentThread.setContextClassLoader(urlClassLoader);
    return callable.call();
  }
  finally {
    currentThread.setContextClassLoader(classLoader);
  }
}
