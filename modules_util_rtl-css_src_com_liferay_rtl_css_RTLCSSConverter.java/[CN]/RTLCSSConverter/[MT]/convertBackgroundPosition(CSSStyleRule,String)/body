{
  CSSDeclaration declaration=styleRule.getDeclarationOfPropertyNameCaseInsensitive(property);
  if (declaration == null) {
    return;
  }
  CSSExpression expression=declaration.getExpression();
  List<CSSExpressionMemberTermSimple> terms=expression.getAllSimpleMembers();
  for (  CSSExpressionMemberTermSimple term : terms) {
    String value=term.getValue();
    if (value.contains("right")) {
      term.setValue("left");
    }
 else     if (value.contains("left")) {
      term.setValue("right");
    }
  }
  if (terms.size() == 1) {
    CSSExpressionMemberTermSimple term=terms.get(0);
    String value=term.getValue();
    Matcher matcher=_percentOrLengthPattern.matcher(value);
    if (matcher.matches()) {
      expression.addTermSimple(value);
      term.setValue("right");
    }
  }
 else   if (terms.size() == 2) {
    CSSExpressionMemberTermSimple term=terms.get(0);
    String value=term.getValue();
    Matcher matcher=_percentPattern.matcher(value);
    if (matcher.matches()) {
      int delta=Integer.valueOf(value.replaceAll("[^\\d]",""),10);
      value=(100 - delta) + "%";
      term.setValue(value);
    }
  }
}
