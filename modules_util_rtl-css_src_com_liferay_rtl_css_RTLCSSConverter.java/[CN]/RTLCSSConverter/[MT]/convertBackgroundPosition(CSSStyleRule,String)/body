{
  CSSDeclaration cssDeclaration=cssStyleRule.getDeclarationOfPropertyNameCaseInsensitive(property);
  if (cssDeclaration == null) {
    return;
  }
  CSSExpression cssExpression=cssDeclaration.getExpression();
  List<CSSExpressionMemberTermSimple> cssExpressionMemberTerms=cssExpression.getAllSimpleMembers();
  for (  CSSExpressionMemberTermSimple cssExpressionMemberTerm : cssExpressionMemberTerms) {
    String value=cssExpressionMemberTerm.getValue();
    if (value.contains("right")) {
      cssExpressionMemberTerm.setValue("left");
    }
 else     if (value.contains("left")) {
      cssExpressionMemberTerm.setValue("right");
    }
  }
  if (cssExpressionMemberTerms.size() == 1) {
    CSSExpressionMemberTermSimple cssExpressionMemberTerm=cssExpressionMemberTerms.get(0);
    String value=cssExpressionMemberTerm.getValue();
    Matcher matcher=_percentOrLengthPattern.matcher(value);
    if (matcher.matches()) {
      cssExpression.addTermSimple(value);
      cssExpressionMemberTerm.setValue("right");
    }
  }
 else   if (cssExpressionMemberTerms.size() == 2) {
    CSSExpressionMemberTermSimple cssExpressionMemberTerm=cssExpressionMemberTerms.get(0);
    String value=cssExpressionMemberTerm.getValue();
    Matcher matcher=_percentPattern.matcher(value);
    if (matcher.matches()) {
      int delta=Integer.valueOf(value.replaceAll("[^\\d]",""),10);
      value=(100 - delta) + "%";
      cssExpressionMemberTerm.setValue(value);
    }
  }
}
