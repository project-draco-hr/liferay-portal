{
  long questionId=ParamUtil.getLong(actionRequest,"questionId");
  Map<Locale,String> titleMap=LocalizationUtil.getLocalizationMap(actionRequest,"title");
  Map<Locale,String> descriptionMap=LocalizationUtil.getLocalizationMap(actionRequest,"description");
  int expirationDateMonth=ParamUtil.getInteger(actionRequest,"expirationDateMonth");
  int expirationDateDay=ParamUtil.getInteger(actionRequest,"expirationDateDay");
  int expirationDateYear=ParamUtil.getInteger(actionRequest,"expirationDateYear");
  int expirationDateHour=ParamUtil.getInteger(actionRequest,"expirationDateHour");
  int expirationDateMinute=ParamUtil.getInteger(actionRequest,"expirationDateMinute");
  int expirationDateAmPm=ParamUtil.getInteger(actionRequest,"expirationDateAmPm");
  boolean neverExpire=ParamUtil.getBoolean(actionRequest,"neverExpire");
  if (expirationDateAmPm == Calendar.PM) {
    expirationDateHour+=12;
  }
  List<PollsChoice> choices=new ArrayList<PollsChoice>();
  Set<String> readParameters=new HashSet<String>();
  Enumeration<String> enu=actionRequest.getParameterNames();
  while (enu.hasMoreElements()) {
    String param=enu.nextElement();
    if (param.startsWith(CHOICE_DESCRIPTION_PREFIX)) {
      try {
        String id=param.substring(CHOICE_DESCRIPTION_PREFIX.length(),param.indexOf(CharPool.UNDERLINE));
        if (readParameters.contains(id)) {
          continue;
        }
        String choiceName=ParamUtil.getString(actionRequest,CHOICE_NAME_PREFIX + id);
        Map<Locale,String> localeChoiceDescriptionMap=LocalizationUtil.getLocalizationMap(actionRequest,CHOICE_DESCRIPTION_PREFIX + id);
        PollsChoice choice=PollsChoiceUtil.create(0);
        choice.setName(choiceName);
        choice.setDescriptionMap(localeChoiceDescriptionMap);
        choices.add(choice);
        readParameters.add(id);
      }
 catch (      Exception e) {
      }
    }
  }
  ServiceContext serviceContext=ServiceContextFactory.getInstance(BookmarksEntry.class.getName(),actionRequest);
  PollsQuestion question=null;
  if (questionId <= 0) {
    question=PollsQuestionServiceUtil.addQuestion(titleMap,descriptionMap,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,choices,serviceContext);
    addAndStoreSelection(portletConfig,actionRequest,question);
  }
 else {
    PollsQuestionServiceUtil.updateQuestion(questionId,titleMap,descriptionMap,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,choices,serviceContext);
  }
}
