{
  Message message=schedulerResponse.getMessage();
  LayoutsRemotePublisherRequest publisherRequest=(LayoutsRemotePublisherRequest)message.getPayload();
  User user=_userLocalService.getUser(publisherRequest.getUserId());
  Map<String,Serializable> publishLayoutRemoteSettingsMap=ExportImportConfigurationSettingsMapFactory.buildPublishLayoutRemoteSettingsMap(user,publisherRequest.getSourceGroupId(),publisherRequest.isPrivateLayout(),publisherRequest.getLayoutIdMap(),publisherRequest.getParameterMap(),publisherRequest.getRemoteAddress(),publisherRequest.getRemotePort(),publisherRequest.getRemotePathContext(),publisherRequest.isSecureConnection(),publisherRequest.getRemoteGroupId(),publisherRequest.isRemotePrivateLayout());
  ExportImportConfiguration exportImportConfiguration=_exportImportConfigurationLocalService.addDraftExportImportConfiguration(user.getUserId(),schedulerResponse.getDescription(),ExportImportConfigurationConstants.TYPE_SCHEDULED_PUBLISH_LAYOUT_REMOTE,publishLayoutRemoteSettingsMap);
  _schedulerEngineHelper.schedule(schedulerResponse.getTrigger(),StorageType.PERSISTED,schedulerResponse.getDescription(),DestinationNames.LAYOUTS_REMOTE_PUBLISHER,exportImportConfiguration.getExportImportConfigurationId(),0);
}
