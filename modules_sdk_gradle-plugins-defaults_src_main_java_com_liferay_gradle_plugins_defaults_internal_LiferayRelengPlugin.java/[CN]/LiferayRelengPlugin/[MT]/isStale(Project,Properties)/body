{
  Logger logger=project.getLogger();
  final String artifactGitId=artifactProperties.getProperty("artifact.git.id");
  if (Validator.isNull(artifactGitId)) {
    if (logger.isInfoEnabled()) {
      logger.info("{} has never been published",project);
    }
    return true;
  }
  String result=getGitResult(project,"log","--format=%s",artifactGitId + "..HEAD",".");
  String[] lines=result.split("\\r?\\n");
  for (  String line : lines) {
    if (logger.isInfoEnabled()) {
      logger.info(line);
    }
    if (Validator.isNull(line)) {
      continue;
    }
    if (!line.contains(PrintArtifactPublishCommandsTask.IGNORED_MESSAGE_PATTERN)) {
      return true;
    }
  }
  if (GradleUtil.hasPlugin(project,LiferayThemeDefaultsPlugin.class)) {
    WriteDigestTask writeDigestTask=(WriteDigestTask)GradleUtil.getTask(project,LiferayThemeDefaultsPlugin.WRITE_PARENT_THEMES_DIGEST_TASK_NAME);
    String digest=writeDigestTask.getDigest();
    String oldDigest=writeDigestTask.getOldDigest();
    if (logger.isInfoEnabled()) {
      logger.info("Digest for {} is {}, old digest is {}",writeDigestTask,digest,oldDigest);
    }
    if (!Objects.equals(digest,oldDigest)) {
      return true;
    }
  }
  return false;
}
