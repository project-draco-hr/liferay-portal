{
  final PrintArtifactPublishCommandsTask printArtifactPublishCommandsTask=GradleUtil.addTask(project,PRINT_ARTIFACT_PUBLISH_COMMANDS,PrintArtifactPublishCommandsTask.class);
  printArtifactPublishCommandsTask.setArtifactPropertiesFile(new Callable<File>(){
    @Override public File call() throws Exception {
      return recordArtifactTask.getOutputFile();
    }
  }
);
  printArtifactPublishCommandsTask.setDescription("Prints the artifact publish commands if this project has been " + "changed since the last publish.");
  configureTaskEnabledIfStale(printArtifactPublishCommandsTask,recordArtifactTask);
  String projectPath=project.getPath();
  if (projectPath.startsWith(":apps:") || projectPath.startsWith(":private:apps:")) {
    configureTaskEnabledIfLeaf(printArtifactPublishCommandsTask);
    _configureTaskEnabledIfDependenciesArePublished(printArtifactPublishCommandsTask);
  }
  GradleUtil.withPlugin(project,LiferayOSGiDefaultsPlugin.class,new Action<LiferayOSGiDefaultsPlugin>(){
    @Override public void execute(    LiferayOSGiDefaultsPlugin liferayOSGiDefaultsPlugin){
      configureTaskPrintArtifactPublishCommandsForOSGi(printArtifactPublishCommandsTask);
    }
  }
);
  project.afterEvaluate(new Action<Project>(){
    @Override public void execute(    Project project){
      TaskContainer taskContainer=project.getTasks();
      Task task=taskContainer.findByName(UPDATE_VERSION_TASK_NAME);
      if (task instanceof ReplaceRegexTask) {
        ReplaceRegexTask replaceRegexTask=(ReplaceRegexTask)task;
        Map<String,FileCollection> matches=replaceRegexTask.getMatches();
        printArtifactPublishCommandsTask.prepNextFiles(matches.values());
      }
      if (GradleUtil.hasPlugin(project,CachePlugin.class)) {
        CacheExtension cacheExtension=GradleUtil.getExtension(project,CacheExtension.class);
        for (        TaskCache taskCache : cacheExtension.getTasks()) {
          printArtifactPublishCommandsTask.prepNextFiles(new File(taskCache.getCacheDir(),TaskCacheApplicator.DIGEST_FILE_NAME));
        }
      }
      if (GradleUtil.hasPlugin(project,LiferayThemeDefaultsPlugin.class)) {
        WriteDigestTask writeDigestTask=(WriteDigestTask)GradleUtil.getTask(project,LiferayThemeDefaultsPlugin.WRITE_PARENT_THEMES_DIGEST_TASK_NAME);
        printArtifactPublishCommandsTask.prepNextFiles(writeDigestTask.getDigestFile());
      }
    }
  }
);
  return printArtifactPublishCommandsTask;
}
