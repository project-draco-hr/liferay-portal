{
  StopWatch stopWatch=null;
  if (_log.isDebugEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
    _log.debug("From: " + from);
    _log.debug("To: " + Arrays.toString(to));
    _log.debug("CC: " + Arrays.toString(cc));
    _log.debug("BCC: " + Arrays.toString(bcc));
    _log.debug("List Addresses: " + Arrays.toString(bulkAddresses));
    _log.debug("Subject: " + subject);
    _log.debug("Body: " + body);
    _log.debug("HTML Format: " + htmlFormat);
    _log.debug("Reply to: " + Arrays.toString(replyTo));
    _log.debug("Message ID: " + messageId);
    _log.debug("In Reply To: " + inReplyTo);
    if ((fileAttachments != null) && _log.isDebugEnabled()) {
      for (int i=0; i < fileAttachments.size(); i++) {
        FileAttachment fileAttachment=fileAttachments.get(i);
        File file=fileAttachment.getFile();
        if (file == null) {
          continue;
        }
        _log.debug("Attachment " + i + " file "+ file.getAbsolutePath()+ " and file name "+ fileAttachment.getFileName());
      }
    }
  }
  try {
    InternetAddressUtil.validateAddress(from);
    if (to != null) {
      InternetAddressUtil.validateAddresses(to);
    }
    if (cc != null) {
      InternetAddressUtil.validateAddresses(cc);
    }
    if (bcc != null) {
      InternetAddressUtil.validateAddresses(bcc);
    }
    if (replyTo != null) {
      InternetAddressUtil.validateAddresses(replyTo);
    }
    if (bulkAddresses != null) {
      InternetAddressUtil.validateAddresses(bulkAddresses);
    }
    Session session=null;
    if (smtpAccount == null) {
      session=getSession();
    }
 else {
      session=getSession(smtpAccount);
    }
    Message message=new LiferayMimeMessage(session);
    message.addHeader("X-Auto-Response-Suppress","AutoReply, DR, NDR, NRN, OOF, RN");
    message.setFrom(from);
    if (to != null) {
      message.setRecipients(Message.RecipientType.TO,to);
    }
    if (cc != null) {
      message.setRecipients(Message.RecipientType.CC,cc);
    }
    if (bcc != null) {
      message.setRecipients(Message.RecipientType.BCC,bcc);
    }
    subject=GetterUtil.getString(subject);
    message.setSubject(subject);
    if ((fileAttachments != null) && (fileAttachments.size() > 0)) {
      MimeMultipart rootMultipart=new MimeMultipart(_MULTIPART_TYPE_MIXED);
      MimeMultipart messageMultipart=new MimeMultipart(_MULTIPART_TYPE_ALTERNATIVE);
      MimeBodyPart messageBodyPart=new MimeBodyPart();
      messageBodyPart.setContent(messageMultipart);
      rootMultipart.addBodyPart(messageBodyPart);
      if (htmlFormat) {
        MimeBodyPart bodyPart=new MimeBodyPart();
        bodyPart.setContent(body,_TEXT_HTML);
        messageMultipart.addBodyPart(bodyPart);
      }
 else {
        MimeBodyPart bodyPart=new MimeBodyPart();
        bodyPart.setText(body);
        messageMultipart.addBodyPart(bodyPart);
      }
      for (int i=0; i < fileAttachments.size(); i++) {
        FileAttachment fileAttachment=fileAttachments.get(i);
        File file=fileAttachment.getFile();
        if (file == null) {
          continue;
        }
        MimeBodyPart mimeBodyPart=new MimeBodyPart();
        DataSource dataSource=new FileDataSource(file);
        mimeBodyPart.setDataHandler(new DataHandler(dataSource));
        mimeBodyPart.setDisposition(Part.ATTACHMENT);
        if (fileAttachment.getFileName() != null) {
          mimeBodyPart.setFileName(fileAttachment.getFileName());
        }
 else {
          mimeBodyPart.setFileName(file.getName());
        }
        rootMultipart.addBodyPart(mimeBodyPart);
      }
      message.setContent(rootMultipart);
      message.saveChanges();
    }
 else {
      if (htmlFormat) {
        message.setContent(body,_TEXT_HTML);
      }
 else {
        message.setContent(body,_TEXT_PLAIN);
      }
    }
    message.setSentDate(new Date());
    if (replyTo != null) {
      message.setReplyTo(replyTo);
    }
    if (messageId != null) {
      message.setHeader("Message-ID",messageId);
    }
    if (inReplyTo != null) {
      message.setHeader("In-Reply-To",inReplyTo);
      message.setHeader("References",inReplyTo);
    }
    int batchSize=GetterUtil.getInteger(PropsUtil.get(PropsKeys.MAIL_BATCH_SIZE),_BATCH_SIZE);
    _send(session,message,bulkAddresses,batchSize);
  }
 catch (  SendFailedException sfe) {
    _log.error(sfe);
  }
catch (  Exception e) {
    throw new MailEngineException(e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Sending mail takes " + stopWatch.getTime() + " ms");
  }
}
