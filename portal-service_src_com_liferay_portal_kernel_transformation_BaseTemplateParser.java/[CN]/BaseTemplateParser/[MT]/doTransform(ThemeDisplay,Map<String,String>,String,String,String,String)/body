{
  UnsyncStringWriter unsyncStringWriter=new UnsyncStringWriter();
  boolean load=false;
  try {
    TransformationContext context=doGetTransformationContext();
    Document doc=SAXReaderUtil.read(xml);
    Element root=doc.getRootElement();
    List<TemplateNode> nodes=extractDynamicContents(themeDisplay,root);
    for (    TemplateNode node : nodes) {
      context.put(node.getName(),node);
    }
    context.put("xmlRequest",root.element("request").asXML());
    context.put("request",insertRequestVariables(root.element("request")));
    long companyId=GetterUtil.getLong(tokens.get("company_id"));
    Company company=CompanyLocalServiceUtil.getCompanyById(companyId);
    long groupId=GetterUtil.getLong(tokens.get("group_id"));
    String templateId=tokens.get("template_id");
    context.put("company",company);
    context.put("companyId",String.valueOf(companyId));
    context.put("groupId",String.valueOf(groupId));
    context.put("viewMode",viewMode);
    context.put("locale",LocaleUtil.fromLanguageId(languageId));
    context.put("permissionChecker",PermissionThreadLocal.getPermissionChecker());
    doPopulateCustomContext(context);
    script=injectEditInPlace(xml,script);
    templateId=companyId + groupId + templateId;
    long companyGroupId=GetterUtil.getLong(tokens.get("company_group_id"));
    if (companyGroupId > 0) {
      templateId=companyId + companyGroupId + templateId;
    }
    String errorTemplateId=doGetErrorTemplateId();
    String errorTemplateContent=doGetErrorTemplateContent();
    load=doMergeTemplate(templateId,script,context,unsyncStringWriter,errorTemplateId,errorTemplateContent);
  }
 catch (  Exception e) {
    if (e instanceof DocumentException) {
      throw new TransformException("Unable to read XML document",e);
    }
 else     if (e instanceof IOException) {
      throw new TransformException("Error reading template",e);
    }
 else     if (e instanceof TransformException) {
      throw (TransformException)e;
    }
 else {
      throw new TransformException("Unhandled exception",e);
    }
  }
  if (!load) {
    throw new TransformException("Unable to dynamically load transform script");
  }
  return unsyncStringWriter.toString();
}
