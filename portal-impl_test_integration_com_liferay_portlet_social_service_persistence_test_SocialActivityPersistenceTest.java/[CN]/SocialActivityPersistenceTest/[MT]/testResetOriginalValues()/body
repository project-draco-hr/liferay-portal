{
  SocialActivity newSocialActivity=addSocialActivity();
  _persistence.clearCache();
  SocialActivity existingSocialActivity=_persistence.findByPrimaryKey(newSocialActivity.getPrimaryKey());
  Assert.assertEquals(Long.valueOf(existingSocialActivity.getMirrorActivityId()),ReflectionTestUtil.<Long>invoke(existingSocialActivity,"getOriginalMirrorActivityId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialActivity.getGroupId()),ReflectionTestUtil.<Long>invoke(existingSocialActivity,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialActivity.getUserId()),ReflectionTestUtil.<Long>invoke(existingSocialActivity,"getOriginalUserId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialActivity.getCreateDate()),ReflectionTestUtil.<Long>invoke(existingSocialActivity,"getOriginalCreateDate",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialActivity.getClassNameId()),ReflectionTestUtil.<Long>invoke(existingSocialActivity,"getOriginalClassNameId",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialActivity.getClassPK()),ReflectionTestUtil.<Long>invoke(existingSocialActivity,"getOriginalClassPK",new Class<?>[0]));
  Assert.assertEquals(Integer.valueOf(existingSocialActivity.getType()),ReflectionTestUtil.<Integer>invoke(existingSocialActivity,"getOriginalType",new Class<?>[0]));
  Assert.assertEquals(Long.valueOf(existingSocialActivity.getReceiverUserId()),ReflectionTestUtil.<Long>invoke(existingSocialActivity,"getOriginalReceiverUserId",new Class<?>[0]));
}
