{
  if (PropsValues.LOCALE_PREPEND_FRIENDLY_URL_STYLE == 0) {
    return null;
  }
  String contextPath=PortalUtil.getPathContext();
  String requestURI=request.getRequestURI();
  if ((Validator.isNotNull(contextPath)) && (requestURI.indexOf(contextPath) != -1)) {
    requestURI=requestURI.substring(contextPath.length());
  }
  requestURI=StringUtil.replace(requestURI,StringPool.DOUBLE_SLASH,StringPool.SLASH);
  String i18nLanguageId=requestURI.substring(1);
  int pos=requestURI.indexOf(CharPool.SLASH,1);
  if (pos != -1) {
    i18nLanguageId=i18nLanguageId.substring(0,pos - 1);
  }
  if (_languageIds.contains(i18nLanguageId)) {
    return null;
  }
  String defaultLanguageId=LocaleUtil.toLanguageId(LocaleUtil.getDefault());
  String guestLanguageId=CookieKeys.getCookie(request,CookieKeys.GUEST_LANGUAGE_ID);
  if (Validator.isNull(guestLanguageId)) {
    guestLanguageId=defaultLanguageId;
  }
  if (PropsValues.LOCALE_PREPEND_FRIENDLY_URL_STYLE == 1) {
    if (!defaultLanguageId.equals(guestLanguageId)) {
      i18nLanguageId=guestLanguageId;
    }
 else {
      return null;
    }
  }
 else   if (PropsValues.LOCALE_PREPEND_FRIENDLY_URL_STYLE == 2) {
    i18nLanguageId=guestLanguageId;
  }
  if (i18nLanguageId == null) {
    return null;
  }
  String i18nPathLanguageId=i18nLanguageId;
  Locale locale=LocaleUtil.fromLanguageId(i18nLanguageId);
  if (!LanguageUtil.isDuplicateLanguageCode(locale.getLanguage())) {
    i18nPathLanguageId=locale.getLanguage();
  }
 else {
    Locale priorityLocale=LanguageUtil.getLocale(locale.getLanguage());
    if (locale.equals(priorityLocale)) {
      i18nPathLanguageId=locale.getLanguage();
    }
  }
  Locale i18nPathLocale=LocaleUtil.fromLanguageId(i18nPathLanguageId);
  if (!LanguageUtil.isAvailableLocale(i18nPathLocale)) {
    return null;
  }
  String i18nPath=StringPool.SLASH.concat(i18nPathLanguageId);
  if (requestURI.contains(i18nPath.concat(StringPool.SLASH))) {
    return null;
  }
  String redirect=contextPath + i18nPath + requestURI;
  LayoutSet layoutSet=(LayoutSet)request.getAttribute(WebKeys.VIRTUAL_HOST_LAYOUT_SET);
  if ((layoutSet != null) && (requestURI.startsWith(_PRIVATE_GROUP_SERVLET_MAPPING) || requestURI.startsWith(_PRIVATE_USER_SERVLET_MAPPING) || requestURI.startsWith(_PUBLIC_GROUP_SERVLET_MAPPING))) {
    int x=requestURI.indexOf(StringPool.SLASH,1);
    if (x == -1) {
      requestURI+=StringPool.SLASH;
      x=requestURI.indexOf(CharPool.SLASH,1);
    }
    int y=requestURI.indexOf(CharPool.SLASH,x + 1);
    if (y == -1) {
      requestURI+=StringPool.SLASH;
      y=requestURI.indexOf(CharPool.SLASH,x + 1);
    }
    String groupFriendlyURL=requestURI.substring(x,y);
    Group group=layoutSet.getGroup();
    if (group.getFriendlyURL().equals(groupFriendlyURL)) {
      redirect=contextPath + i18nPath + requestURI.substring(y);
    }
  }
  String queryString=request.getQueryString();
  if (Validator.isNotNull(queryString)) {
    redirect+=StringPool.QUESTION + request.getQueryString();
  }
  return redirect;
}
