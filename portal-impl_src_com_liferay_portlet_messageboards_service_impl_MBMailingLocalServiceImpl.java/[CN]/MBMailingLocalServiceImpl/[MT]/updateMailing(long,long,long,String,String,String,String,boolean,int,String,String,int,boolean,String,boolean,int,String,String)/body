{
  _validate(mailingListAddress,mailAddress,mailInServerName,mailInUserName,mailOutConfigured,mailOutServerName,mailOutUserName);
  Date now=new Date();
  MBMailing mailing;
  try {
    mailing=getMailingByCategory(categoryId);
  }
 catch (  Exception e) {
    User user=userPersistence.findByPrimaryKey(userId);
    long mailingId=counterLocalService.increment();
    mailing=mbMailingPersistence.create(mailingId);
    mailing.setCompanyId(user.getCompanyId());
    mailing.setGroupId(groupId);
    mailing.setUserId(user.getUserId());
    mailing.setUserName(user.getFullName());
    mailing.setCreateDate(now);
    mailing.setCategoryId(categoryId);
  }
  mailing.setModifiedDate(now);
  mailing.setMailingListAddress(mailingListAddress);
  mailing.setMailAddress(mailAddress);
  mailing.setMailInProtocol(mailInProtocol);
  mailing.setMailInServerName(mailInServerName);
  mailing.setMailInUseSSL(mailInUseSSL);
  mailing.setMailInServerPort(mailInServerPort);
  mailing.setMailInUserName(mailInUserName);
  mailing.setMailInPassword(mailInPassword);
  mailing.setMailInReadInterval(mailInReadInterval);
  if (mailOutConfigured) {
    mailing.setMailOutConfigured(true);
    mailing.setMailOutServerName(mailOutServerName);
    mailing.setMailOutUseSSL(mailOutUseSSL);
    mailing.setMailOutServerPort(mailOutServerPort);
    mailing.setMailOutUserName(mailOutUserName);
    mailing.setMailOutPassword(mailOutPassword);
  }
 else {
    mailing.setMailOutConfigured(false);
  }
  mailing.setActive(true);
  mbMailingPersistence.update(mailing,false);
  _scheduleEmailReader(mailing);
  return mailing;
}
