{
  Map<Class<?>,List<Field>> deleteAfterTestRunFields=new HashMap<Class<?>,List<Field>>();
  Class<?> testClass=testContext.getClazz();
  while (testClass != null) {
    for (    Field field : testClass.getDeclaredFields()) {
      DeleteAfterTestRun deleteAfterTestRun=field.getAnnotation(DeleteAfterTestRun.class);
      if (deleteAfterTestRun == null) {
        continue;
      }
      Class<?> fieldClass=field.getType();
      if (!PersistedModel.class.isAssignableFrom(fieldClass)) {
        throw new IllegalArgumentException("Unable to annotate field " + field + " because it is not of type "+ PersistedModel.class);
      }
      List<Field> fields=deleteAfterTestRunFields.get(fieldClass);
      if (fields == null) {
        fields=new ArrayList<Field>();
        deleteAfterTestRunFields.put(fieldClass,fields);
      }
      field.setAccessible(true);
      fields.add(field);
    }
    testClass=testClass.getSuperclass();
  }
  Object instance=testContext.getInstance();
  Set<Map.Entry<Class<?>,List<Field>>> set=deleteAfterTestRunFields.entrySet();
  Iterator<Map.Entry<Class<?>,List<Field>>> iterator=set.iterator();
  while (iterator.hasNext()) {
    Map.Entry<Class<?>,List<Field>> entry=iterator.next();
    Class<?> clazz=entry.getKey();
    if (_orderedClasses.contains(clazz)) {
      continue;
    }
    iterator.remove();
    PersistedModelLocalService persistedModelLocalService=PersistedModelLocalServiceRegistryUtil.getPersistedModelLocalService(clazz.getName());
    for (    Field field : entry.getValue()) {
      try {
        PersistedModel persistedModel=(PersistedModel)field.get(instance);
        if (persistedModel == null) {
          continue;
        }
        persistedModelLocalService.deletePersistedModel(persistedModel);
        field.set(instance,null);
      }
 catch (      Exception e) {
        _log.error("Unable to delete",e);
      }
    }
  }
  for (  Class<?> clazz : _orderedClasses) {
    List<Field> fields=deleteAfterTestRunFields.remove(clazz);
    if (fields == null) {
      continue;
    }
    PersistedModelLocalService persistedModelLocalService=PersistedModelLocalServiceRegistryUtil.getPersistedModelLocalService(clazz.getName());
    for (    Field field : fields) {
      try {
        PersistedModel persistedModel=(PersistedModel)field.get(instance);
        if (persistedModel == null) {
          continue;
        }
        persistedModelLocalService.deletePersistedModel(persistedModel);
        field.set(instance,null);
      }
 catch (      Exception e) {
        _log.error("Unable to delete",e);
      }
    }
  }
}
