{
  long pk=RandomTestUtil.nextLong();
  RecentLayoutRevision newRecentLayoutRevision=_persistence.create(pk);
  newRecentLayoutRevision.setMvccVersion(RandomTestUtil.nextLong());
  newRecentLayoutRevision.setGroupId(RandomTestUtil.nextLong());
  newRecentLayoutRevision.setCompanyId(RandomTestUtil.nextLong());
  newRecentLayoutRevision.setUserId(RandomTestUtil.nextLong());
  newRecentLayoutRevision.setLayoutRevisionId(RandomTestUtil.nextLong());
  newRecentLayoutRevision.setLayoutSetBranchId(RandomTestUtil.nextLong());
  newRecentLayoutRevision.setPlid(RandomTestUtil.nextLong());
  _recentLayoutRevisions.add(_persistence.update(newRecentLayoutRevision));
  RecentLayoutRevision existingRecentLayoutRevision=_persistence.findByPrimaryKey(newRecentLayoutRevision.getPrimaryKey());
  Assert.assertEquals(existingRecentLayoutRevision.getMvccVersion(),newRecentLayoutRevision.getMvccVersion());
  Assert.assertEquals(existingRecentLayoutRevision.getRecentLayoutRevisionId(),newRecentLayoutRevision.getRecentLayoutRevisionId());
  Assert.assertEquals(existingRecentLayoutRevision.getGroupId(),newRecentLayoutRevision.getGroupId());
  Assert.assertEquals(existingRecentLayoutRevision.getCompanyId(),newRecentLayoutRevision.getCompanyId());
  Assert.assertEquals(existingRecentLayoutRevision.getUserId(),newRecentLayoutRevision.getUserId());
  Assert.assertEquals(existingRecentLayoutRevision.getLayoutRevisionId(),newRecentLayoutRevision.getLayoutRevisionId());
  Assert.assertEquals(existingRecentLayoutRevision.getLayoutSetBranchId(),newRecentLayoutRevision.getLayoutSetBranchId());
  Assert.assertEquals(existingRecentLayoutRevision.getPlid(),newRecentLayoutRevision.getPlid());
}
