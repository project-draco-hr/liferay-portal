{
  if (!InlineSQLHelperUtil.isEnabled()) {
    return countByC_T(companyId,types);
  }
  StringBundler query=new StringBundler();
  query.append(_FILTER_SQL_COUNT_ROLE_WHERE);
  boolean conjunctionable=false;
  if (conjunctionable) {
    query.append(WHERE_AND);
  }
  query.append(_FINDER_COLUMN_C_T_COMPANYID_5);
  conjunctionable=true;
  if ((types == null) || (types.length > 0)) {
    if (conjunctionable) {
      query.append(WHERE_AND);
    }
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < types.length; i++) {
      query.append(_FINDER_COLUMN_C_T_TYPE_5_SQL);
      if ((i + 1) < types.length) {
        query.append(WHERE_OR);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
    conjunctionable=true;
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),Role.class.getName(),_FILTER_ENTITY_TABLE_FILTER_PK_COLUMN);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,com.liferay.portal.kernel.dao.orm.Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    if (types != null) {
      qPos.add(types);
    }
    Long count=(Long)q.uniqueResult();
    return count.intValue();
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
