{
  _defaultWorkflowDestinationEventListener=new DefaultWorkflowDestinationEventListener();
  _defaultWorkflowDestinationEventListener.setWorkflowEngineName("Liferay Kaleo Workflow Engine");
  MessageListener workflowComparatorMessageListener=registerProxyMessageListener(_workflowComparatorFactory,com.liferay.portal.kernel.messaging.DestinationNames.WORKFLOW_COMPARATOR);
  _defaultWorkflowDestinationEventListener.setWorkflowComparatorFactoryListener(workflowComparatorMessageListener);
  MessageListener workflowDefinitionManagerProxyMessageListener=registerProxyMessageListener(_workflowDefinitionManager,com.liferay.portal.kernel.messaging.DestinationNames.WORKFLOW_DEFINITION);
  _defaultWorkflowDestinationEventListener.setWorkflowDefinitionManagerListener(workflowDefinitionManagerProxyMessageListener);
  MessageListener workflowEngineManagerProxyMessageListener=registerProxyMessageListener(_workflowEngineManager,com.liferay.portal.kernel.messaging.DestinationNames.WORKFLOW_ENGINE);
  _defaultWorkflowDestinationEventListener.setWorkflowEngineManagerListener(workflowEngineManagerProxyMessageListener);
  MessageListener workflowInstanceManagerProxyMessageListener=registerProxyMessageListener(_workflowInstanceManager,com.liferay.portal.kernel.messaging.DestinationNames.WORKFLOW_INSTANCE);
  _defaultWorkflowDestinationEventListener.setWorkflowInstanceManagerListener(workflowInstanceManagerProxyMessageListener);
  MessageListener workflowLogManagerProxyMessageListener=registerProxyMessageListener(_workflowLogManagerk,com.liferay.portal.kernel.messaging.DestinationNames.WORKFLOW_LOG);
  _defaultWorkflowDestinationEventListener.setWorkflowLogManagerListener(workflowLogManagerProxyMessageListener);
  MessageListener workflowTaskManagerProxyMessageListener=registerProxyMessageListener(_workflowTaskManager,com.liferay.portal.kernel.messaging.DestinationNames.WORKFLOW_TASK);
  _defaultWorkflowDestinationEventListener.setWorkflowTaskManagerListener(workflowTaskManagerProxyMessageListener);
  _workflowEngineDestination.addDestinationEventListener(_defaultWorkflowDestinationEventListener);
}
