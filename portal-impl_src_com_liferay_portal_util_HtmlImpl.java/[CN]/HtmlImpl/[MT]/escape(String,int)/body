{
  if (text == null) {
    return null;
  }
  if (text.length() == 0) {
    return StringPool.BLANK;
  }
  String prefix=StringPool.BLANK;
  String postfix=StringPool.BLANK;
  if (mode == ESCAPE_MODE_ATTRIBUTE) {
    prefix="&#x";
    postfix=StringPool.SEMICOLON;
  }
 else   if (mode == ESCAPE_MODE_CSS) {
    prefix=StringPool.BACK_SLASH;
  }
 else   if (mode == ESCAPE_MODE_JS) {
    prefix="\\x";
  }
 else   if (mode == ESCAPE_MODE_URL) {
    return HttpUtil.encodeURL(text,true);
  }
 else {
    return escape(text);
  }
  StringBuilder sb=new StringBuilder(text.length());
  char[] hexBuffer=new char[4];
  boolean modified=false;
  for (int i=0; i < text.length(); i++) {
    char c=text.charAt(i);
    if (c < 256) {
      if ((c < 128) && _VALID_CHARS[c]) {
        sb.append(c);
      }
 else       if ((mode == ESCAPE_MODE_ATTRIBUTE) && ((c == CharPool.TAB) || (c == CharPool.NEW_LINE) || (c == CharPool.RETURN))) {
        sb.append(CharPool.SPACE);
        modified=true;
      }
 else {
        sb.append(prefix);
        _appendHexChars(sb,hexBuffer,c);
        sb.append(postfix);
        if ((mode == ESCAPE_MODE_CSS) && (i < (text.length() - 1))) {
          char nextChar=text.charAt(i + 1);
          if ((nextChar >= CharPool.NUMBER_0) && (nextChar <= CharPool.NUMBER_9)) {
            sb.append(CharPool.SPACE);
          }
        }
        modified=true;
      }
    }
 else     if ((mode == ESCAPE_MODE_ATTRIBUTE) && (!_isValidXmlCharacter(c) || _isUnicodeCompatibilityCharacter(c))) {
      sb.append(CharPool.SPACE);
      modified=true;
    }
 else {
      sb.append(c);
    }
  }
  if (modified) {
    return sb.toString();
  }
  return text;
}
