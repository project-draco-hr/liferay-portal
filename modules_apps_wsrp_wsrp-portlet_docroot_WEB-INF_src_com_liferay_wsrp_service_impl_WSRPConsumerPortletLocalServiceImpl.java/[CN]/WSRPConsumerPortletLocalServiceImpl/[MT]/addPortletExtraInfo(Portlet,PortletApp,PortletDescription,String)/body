{
  MarkupType[] markupTypes=portletDescription.getMarkupTypes();
  for (  MarkupType markupType : markupTypes) {
    Set<String> mimeTypePortletModes=new HashSet<>();
    for (    String portletMode : markupType.getModes()) {
      portletMode=StringUtil.toLowerCase(portletMode);
      if (portletMode.startsWith("wsrp:")) {
        portletMode=portletMode.substring(5);
      }
      mimeTypePortletModes.add(portletMode);
    }
    portlet.getPortletModes().put(markupType.getMimeType(),mimeTypePortletModes);
    Set<String> mimeTypeWindowStates=new HashSet<>();
    for (    String windowState : markupType.getWindowStates()) {
      windowState=StringUtil.toLowerCase(windowState);
      if (windowState.startsWith("wsrp:")) {
        windowState=windowState.substring(5);
      }
      mimeTypeWindowStates.add(windowState);
    }
    portlet.getWindowStates().put(markupType.getMimeType(),mimeTypeWindowStates);
  }
  String shortTitle=LocalizedStringUtil.getLocalizedStringValue(portletDescription.getShortTitle(),title);
  String keywords=StringUtil.merge(LocalizedStringUtil.getLocalizedStringValues(portletDescription.getKeywords()),StringPool.SPACE);
  String description=LocalizedStringUtil.getLocalizedStringValue(portletDescription.getShortTitle());
  PortletInfo portletInfo=new PortletInfo(title,shortTitle,keywords,description);
  portlet.setPortletInfo(portletInfo);
  portlet.setFriendlyURLMapperClass(ConsumerFriendlyURLMapper.class.getName());
  ParameterDescription[] parameterDescriptions=portletDescription.getNavigationalPublicValueDescriptions();
  if (parameterDescriptions != null) {
    for (    ParameterDescription parameterDescription : parameterDescriptions) {
      QName[] qNames=parameterDescription.getNames();
      if (ArrayUtil.isEmpty(qNames)) {
        continue;
      }
      com.liferay.portal.kernel.xml.QName qName=getQName(qNames[0]);
      String identifier=parameterDescription.getIdentifier();
      portletApp.addPublicRenderParameter(identifier,qName);
      portlet.addPublicRenderParameter(portletApp.getPublicRenderParameter(identifier));
    }
  }
  QName[] handledEvents=portletDescription.getHandledEvents();
  if (handledEvents != null) {
    for (    QName handledEvent : handledEvents) {
      portlet.addProcessingEvent(getQName(handledEvent));
    }
  }
  QName[] publishedEvents=portletDescription.getPublishedEvents();
  if (publishedEvents != null) {
    for (    QName publishedEvent : publishedEvents) {
      portlet.addPublishingEvent(getQName(publishedEvent));
    }
  }
  MessageElement[] messageElements=ExtensionHelperUtil.getMessageElements(portletDescription.getExtensions());
  if (messageElements != null) {
    for (    MessageElement messageElement : messageElements) {
      setExtension(portlet,messageElement);
    }
  }
}
