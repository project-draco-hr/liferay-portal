{
  int orderByPos=sqlLowerCase.lastIndexOf(" order by ");
  if (orderByPos < 0) {
    return super.getLimitString(sql,offset,limit);
  }
  String orderByString=sql.substring(orderByPos + 9,sql.length());
  String[] orderByArray=StringUtil.split(orderByString,StringPool.COMMA);
  int fromPos=sqlLowerCase.indexOf(" from ");
  String selectFrom=sql.substring(0,fromPos);
  for (int i=0; i < orderByArray.length; i++) {
    String orderBy=orderByArray[i].trim();
    String orderByColumn=null;
    String orderByType=null;
    int columnPos=orderBy.indexOf(CharPool.SPACE);
    if (columnPos == -1) {
      orderByColumn=orderBy;
      orderByType="ASC";
    }
 else {
      orderByColumn=orderBy.substring(0,columnPos);
      orderByType=orderBy.substring(columnPos + 1);
    }
    Pattern pattern=Pattern.compile("\\Q".concat(orderByColumn).concat("\\E as (\\w+)"),Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(selectFrom);
    if (matcher.find()) {
      orderByColumn=matcher.group(1);
    }
    orderByArray[i]=orderByColumn.concat(StringPool.SPACE).concat(orderByType);
  }
  String selectFromWhere=sql.substring(fromPos,orderByPos);
  StringBundler sb=new StringBundler(10);
  sb.append("select * from (select *, row_number() over (order by ");
  sb.append(StringUtil.merge(orderByArray,StringPool.COMMA));
  sb.append(") as _page_row_num from (");
  sb.append(selectFrom);
  sb.append(selectFromWhere);
  sb.append(" ) temp ) temp2 where _page_row_num between ");
  sb.append(offset + 1);
  sb.append(" and ");
  sb.append(limit);
  sb.append(" order by _page_row_num");
  return sb.toString();
}
