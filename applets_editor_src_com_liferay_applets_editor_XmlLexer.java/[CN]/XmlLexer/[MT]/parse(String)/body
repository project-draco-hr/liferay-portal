{
  _tokens=new ArrayList();
  for (int ii=0; ii < str.length(); ++ii) {
    String substr=str.substring(ii);
    if (substr.charAt(0) != '<') {
      int beg=ii;
      int end=str.indexOf("<",ii + 1);
      if (end == -1) {
        end=str.length() - 1;
      }
 else {
        --end;
      }
      _tokens.add(new Token(beg,end,STYLE_TEXT));
    }
 else     if (substr.startsWith("<!--")) {
      _tokens.add(getBracketed(str,ii,"<!--","-->",STYLE_COMMENT));
    }
 else     if (isScriptTag(substr)) {
      List nest=new ArrayList();
      int beg=ii;
      int end=extractNest(str,ii + 1,nest);
      _tokens.add(new Token(beg,end,STYLE_ELEMENT));
      _tokens.addAll(nest);
      ii=((Token)_tokens.get(_tokens.size() - 1)).getEnd();
      if (!str.substring(ii - 1).startsWith("/>")) {
        int closeTag=str.toLowerCase().indexOf("</script",ii + 1);
        if (closeTag == -1) {
          if (ii + 1 != str.length() - 1) {
            _tokens.add(new Token(ii + 1,str.length() - 1,STYLE_TEXT));
          }
          ii=str.length() - 1;
        }
 else {
          _tokens.add(new Token(ii + 1,closeTag - 1,STYLE_SCRIPT));
          nest.clear();
          int closeTagEnd=extractNest(str,closeTag + 1,nest);
          _tokens.add(new Token(closeTag,closeTagEnd,STYLE_ELEMENT));
          _tokens.addAll(nest);
        }
      }
    }
 else {
      List nest=new ArrayList();
      int beg=ii;
      int end=extractNest(str,ii + 1,nest);
      _tokens.add(new Token(beg,end,STYLE_ELEMENT));
      _tokens.addAll(nest);
    }
    ii=((Token)_tokens.get(_tokens.size() - 1)).getEnd();
  }
}
