{
  Token tail=null;
  int absEnd=str.indexOf(">",start);
  if (absEnd == -1) {
    absEnd=str.length() - 1;
  }
 else {
    if (str.charAt(absEnd - 1) == '?' || str.charAt(absEnd - 1) == '/') {
      --absEnd;
      tail=new Token(absEnd,absEnd + 1,STYLE_ELEMENT);
    }
 else {
      tail=new Token(absEnd,absEnd,STYLE_ELEMENT);
    }
    --absEnd;
  }
  boolean hasAtt=false;
  for (++start; start <= absEnd; ++start) {
    if (Character.isWhitespace(str.charAt(start))) {
      hasAtt=true;
      break;
    }
  }
  if (hasAtt) {
    int beg=start;
    int end=-1;
    for (++start; start <= absEnd; ++start) {
      if (str.charAt(start) == '"') {
        end=start - 1;
        nest.add(new Token(beg,end,STYLE_ATTR_NAME));
        int valBeg=start;
        int valEnd=-1;
        for (++start; start <= absEnd; ++start) {
          if (str.charAt(start) == '"') {
            valEnd=start;
            nest.add(new Token(valBeg,valEnd,STYLE_ATTR_VALUE));
            break;
          }
        }
        if (valEnd == -1) {
          nest.add(new Token(valBeg,absEnd,STYLE_ATTR_VALUE));
        }
 else {
          beg=start + 1;
          end=-1;
          continue;
        }
      }
 else       if (str.charAt(start) == '\'') {
        end=start - 1;
        nest.add(new Token(beg,end,STYLE_ATTR_NAME));
        int valBeg=start;
        int valEnd=-1;
        for (++start; start <= absEnd; ++start) {
          if (str.charAt(start) == '\'') {
            valEnd=start;
            nest.add(new Token(valBeg,valEnd,STYLE_ATTR_VALUE));
            break;
          }
        }
        if (valEnd == -1) {
          nest.add(new Token(valBeg,absEnd,STYLE_ATTR_VALUE));
        }
 else {
          beg=start + 1;
          end=-1;
          continue;
        }
      }
    }
    if (end == -1) {
      nest.add(new Token(beg,absEnd,STYLE_ATTR_NAME));
    }
  }
  if (tail != null)   nest.add(tail);
  if (nest.size() > 0) {
    absEnd=((Token)nest.get(0)).getBeg() - 1;
  }
  return absEnd;
}
