{
  List<SourceProcessor> sourceProcessors=new ArrayList<>();
  sourceProcessors.add(new BNDSourceProcessor());
  sourceProcessors.add(new CSSSourceProcessor());
  sourceProcessors.add(new FTLSourceProcessor());
  sourceProcessors.add(new GradleSourceProcessor());
  sourceProcessors.add(new JavaSourceProcessor());
  sourceProcessors.add(new JSONSourceProcessor());
  sourceProcessors.add(new JSPSourceProcessor());
  sourceProcessors.add(new JSSourceProcessor());
  sourceProcessors.add(new PropertiesSourceProcessor());
  sourceProcessors.add(new SHSourceProcessor());
  sourceProcessors.add(new SQLSourceProcessor());
  sourceProcessors.add(new TLDSourceProcessor());
  sourceProcessors.add(new XMLSourceProcessor());
  ExecutorService executorService=Executors.newFixedThreadPool(sourceProcessors.size());
  List<Future<Void>> futures=new ArrayList<>(sourceProcessors.size());
  for (  final SourceProcessor sourceProcessor : sourceProcessors) {
    Future<Void> future=executorService.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        _runSourceProcessor(sourceProcessor);
        return null;
      }
    }
);
    futures.add(future);
  }
  ExecutionException ee1=null;
  for (  Future<Void> future : futures) {
    try {
      future.get();
    }
 catch (    ExecutionException ee2) {
      if (ee1 == null) {
        ee1=ee2;
      }
 else {
        ee1.addSuppressed(ee2);
      }
    }
  }
  executorService.shutdown();
  while (!executorService.isTerminated()) {
    Thread.sleep(20);
  }
  if (ee1 != null) {
    throw ee1;
  }
  if (_sourceFormatterArgs.isThrowException()) {
    if (!_errorMessages.isEmpty()) {
      throw new Exception(StringUtil.merge(_errorMessages,"\n"));
    }
    if (_firstSourceMismatchException != null) {
      throw _firstSourceMismatchException;
    }
  }
}
