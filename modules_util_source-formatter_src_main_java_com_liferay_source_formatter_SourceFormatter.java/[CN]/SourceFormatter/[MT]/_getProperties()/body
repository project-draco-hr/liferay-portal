{
  SourceFormatterHelper sourceFormatterHelper=new SourceFormatterHelper(_sourceFormatterArgs.isUseProperties());
  String fileName="source-formatter.properties";
  File portalImplDir=sourceFormatterHelper.getFile(_sourceFormatterArgs.getBaseDirName(),"portal-impl",ToolsUtil.PORTAL_MAX_DIR_LEVEL);
  if (portalImplDir == null) {
    for (int i=0; i <= ToolsUtil.PLUGINS_MAX_DIR_LEVEL; i++) {
      try {
        InputStream inputStream=new FileInputStream(_sourceFormatterArgs.getBaseDirName() + fileName);
        Properties properties=new Properties();
        properties.load(inputStream);
        return properties;
      }
 catch (      FileNotFoundException fnfe) {
      }
      fileName="../" + fileName;
    }
    return new Properties();
  }
  Set<String> excludes=new HashSet<>(_defaultExcludes);
  List<Properties> propertiesList=new ArrayList<>();
  File propertiesFile=sourceFormatterHelper.getFile(_sourceFormatterArgs.getBaseDirName(),"portal-impl/src/" + fileName,ToolsUtil.PORTAL_MAX_DIR_LEVEL);
  if (propertiesFile != null) {
    InputStream inputStream=new FileInputStream(propertiesFile);
    Properties properties=new Properties();
    properties.load(inputStream);
    propertiesList.add(properties);
    String excludesValue=properties.getProperty("source.formatter.excludes");
    List<String> excludesList=ListUtil.fromString(GetterUtil.getString(excludesValue),StringPool.COMMA);
    excludes.addAll(excludesList);
  }
  String parentDirName=_sourceFormatterArgs.getBaseDirName() + "../";
  for (int i=0; i < ToolsUtil.PORTAL_MAX_DIR_LEVEL - 1; i++) {
    try {
      InputStream inputStream=new FileInputStream(parentDirName + fileName);
      Properties properties=new Properties();
      properties.load(inputStream);
      propertiesList.add(properties);
    }
 catch (    FileNotFoundException fnfe) {
    }
    parentDirName+="../";
  }
  List<String> modulePropertiesFileNames=sourceFormatterHelper.getFileNames(_sourceFormatterArgs.getBaseDirName(),null,excludes.toArray(new String[excludes.size()]),new String[]{"**/modules/**/" + fileName},_sourceFormatterArgs.isIncludeSubrepositories());
  for (  String modulePropertiesFileName : modulePropertiesFileNames) {
    InputStream inputStream=new FileInputStream(modulePropertiesFileName);
    Properties properties=new Properties();
    properties.load(inputStream);
    propertiesList.add(properties);
  }
  Properties properties=new Properties();
  properties.setProperty("source.formatter.excludes",StringUtil.merge(excludes));
  if (propertiesList.isEmpty()) {
    return properties;
  }
  for (int i=0; i < propertiesList.size(); i++) {
    Properties props=propertiesList.get(i);
    Enumeration<String> enu=(Enumeration<String>)props.propertyNames();
    while (enu.hasMoreElements()) {
      String key=enu.nextElement();
      String value=props.getProperty(key);
      if (Validator.isNull(value)) {
        continue;
      }
      if (key.contains("excludes")) {
        String existingValue=properties.getProperty(key);
        if (Validator.isNotNull(existingValue)) {
          value=existingValue + StringPool.COMMA + value;
        }
        properties.put(key,value);
      }
 else       if (!properties.containsKey(key)) {
        properties.put(key,value);
      }
    }
  }
  return properties;
}
