{
  Map<String,String> arguments=ArgumentsUtil.parseArguments(args);
  try {
    SourceFormatterArgs sourceFormatterArgs=new SourceFormatterArgs();
    boolean autoFix=ArgumentsUtil.getBoolean(arguments,"source.auto.fix",SourceFormatterArgs.AUTO_FIX);
    sourceFormatterArgs.setAutoFix(autoFix);
    String baseDirName=ArgumentsUtil.getString(arguments,"source.base.dir",SourceFormatterArgs.BASE_DIR_NAME);
    sourceFormatterArgs.setBaseDirName(baseDirName);
    boolean formatCurrentBranch=ArgumentsUtil.getBoolean(arguments,"format.current.branch",SourceFormatterArgs.FORMAT_CURRENT_BRANCH);
    sourceFormatterArgs.setFormatCurrentBranch(formatCurrentBranch);
    boolean formatLatestAuthor=ArgumentsUtil.getBoolean(arguments,"format.latest.author",SourceFormatterArgs.FORMAT_LATEST_AUTHOR);
    sourceFormatterArgs.setFormatLatestAuthor(formatLatestAuthor);
    boolean formatLocalChanges=ArgumentsUtil.getBoolean(arguments,"format.local.changes",SourceFormatterArgs.FORMAT_LOCAL_CHANGES);
    sourceFormatterArgs.setFormatLocalChanges(formatLocalChanges);
    if (formatCurrentBranch) {
      String gitWorkingBranchName=ArgumentsUtil.getString(arguments,"git.working.branch.name",SourceFormatterArgs.GIT_WORKING_BRANCH_NAME);
      sourceFormatterArgs.setGitWorkingBranchName(gitWorkingBranchName);
      sourceFormatterArgs.setRecentChangesFileNames(GitUtil.getCurrentBranchFileNames(baseDirName,gitWorkingBranchName));
    }
 else     if (formatLatestAuthor) {
      sourceFormatterArgs.setRecentChangesFileNames(GitUtil.getLatestAuthorFileNames(baseDirName));
    }
 else     if (formatLocalChanges) {
      sourceFormatterArgs.setRecentChangesFileNames(GitUtil.getLocalChangesFileNames(baseDirName));
    }
    String copyrightFileName=ArgumentsUtil.getString(arguments,"source.copyright.file",SourceFormatterArgs.COPYRIGHT_FILE_NAME);
    sourceFormatterArgs.setCopyrightFileName(copyrightFileName);
    String fileNamesString=ArgumentsUtil.getString(arguments,"source.files",StringPool.BLANK);
    String[] fileNames=StringUtil.split(fileNamesString,StringPool.COMMA);
    if (ArrayUtil.isNotEmpty(fileNames)) {
      sourceFormatterArgs.setFileNames(Arrays.asList(fileNames));
    }
    int maxLineLength=ArgumentsUtil.getInteger(arguments,"max.line.length",SourceFormatterArgs.MAX_LINE_LENGTH);
    sourceFormatterArgs.setMaxLineLength(maxLineLength);
    boolean printErrors=ArgumentsUtil.getBoolean(arguments,"source.print.errors",SourceFormatterArgs.PRINT_ERRORS);
    sourceFormatterArgs.setPrintErrors(printErrors);
    int processorThreadCount=ArgumentsUtil.getInteger(arguments,"processor.thread.count",SourceFormatterArgs.PROCESSOR_THREAD_COUNT);
    sourceFormatterArgs.setProcessorThreadCount(processorThreadCount);
    boolean throwException=ArgumentsUtil.getBoolean(arguments,"source.throw.exception",SourceFormatterArgs.THROW_EXCEPTION);
    sourceFormatterArgs.setThrowException(throwException);
    boolean useProperties=ArgumentsUtil.getBoolean(arguments,"source.use.properties",SourceFormatterArgs.USE_PROPERTIES);
    sourceFormatterArgs.setUseProperties(useProperties);
    SourceFormatter sourceFormatter=new SourceFormatter(sourceFormatterArgs);
    sourceFormatter.format();
  }
 catch (  GitException ge) {
    System.out.println(ge.getMessage());
    System.exit(0);
  }
catch (  Exception e) {
    ArgumentsUtil.processMainException(arguments,e);
  }
}
