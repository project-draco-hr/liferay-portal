{
  UploadPortletRequest uploadPortletRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long repositoryId=ParamUtil.getLong(uploadPortletRequest,"repositoryId");
  long folderId=ParamUtil.getLong(uploadPortletRequest,"folderId");
  String sourceFileName=uploadPortletRequest.getFileName("file");
  String title=ParamUtil.getString(uploadPortletRequest,"title");
  String description=ParamUtil.getString(uploadPortletRequest,"description");
  String changeLog=ParamUtil.getString(uploadPortletRequest,"changeLog");
  if (folderId > 0) {
    Folder folder=DLAppServiceUtil.getFolder(folderId);
    if (folder.getGroupId() != themeDisplay.getScopeGroupId()) {
      throw new NoSuchFolderException("{folderId=" + folderId + "}");
    }
  }
  InputStream inputStream=null;
  try {
    String contentType=uploadPortletRequest.getContentType("file");
    long size=uploadPortletRequest.getSize("file");
    if (size == 0) {
      contentType=MimeTypesUtil.getContentType(title);
    }
    if (size > 0) {
      HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
      String[] mimeTypes=ItemSelectorUtil.getMimeTypes(request);
      if (ArrayUtil.isNotEmpty(mimeTypes) && !ArrayUtil.contains(mimeTypes,contentType)) {
        throw new FileMimeTypeException(contentType);
      }
    }
    inputStream=uploadPortletRequest.getFileAsStream("file");
    ServiceContext serviceContext=ServiceContextFactory.getInstance(DLFileEntry.class.getName(),uploadPortletRequest);
    FileEntry fileEntry=DLAppServiceUtil.addFileEntry(repositoryId,folderId,sourceFileName,contentType,title,description,changeLog,inputStream,size,serviceContext);
    return fileEntry;
  }
 catch (  Exception e) {
    UploadException uploadException=(UploadException)actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION);
    if (uploadException != null) {
      if (uploadException.isExceededLiferayFileItemSizeLimit()) {
        throw new LiferayFileItemException();
      }
 else       if (uploadException.isExceededSizeLimit()) {
        throw new FileSizeException(uploadException.getCause());
      }
    }
    throw e;
  }
 finally {
    StreamUtil.cleanUp(inputStream);
  }
}
