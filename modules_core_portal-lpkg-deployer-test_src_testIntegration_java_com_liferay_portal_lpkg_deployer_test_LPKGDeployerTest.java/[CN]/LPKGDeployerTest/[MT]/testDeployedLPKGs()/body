{
  Bundle testBundle=FrameworkUtil.getBundle(LPKGDeployerTest.class);
  BundleContext bundleContext=testBundle.getBundleContext();
  final String deploymentDir=bundleContext.getProperty("lpkg.deployer.dir");
  Assert.assertNotNull("Missing configuration for \"lpkg.deployer.dir\"",deploymentDir);
  Path deploymentDirPath=Paths.get(deploymentDir);
  Assert.assertTrue(deploymentDir + " does not exist",Files.exists(deploymentDirPath));
  final List<File> lpkgFiles=new ArrayList<>();
  Files.walkFileTree(deploymentDirPath,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult visitFile(    Path filePath,    BasicFileAttributes basicFileAttributes) throws IOException {
      Path fileNamePath=filePath.getFileName();
      String fileName=StringUtil.toLowerCase(fileNamePath.toString());
      if (!fileName.endsWith(".lpkg")) {
        Assert.fail("Unexpected file " + filePath + " in "+ deploymentDir);
      }
      lpkgFiles.add(filePath.toFile());
      return FileVisitResult.CONTINUE;
    }
  }
);
  Assert.assertTrue("No lpkg file in " + deploymentDir,!lpkgFiles.isEmpty());
  ServiceTracker<LPKGDeployer,LPKGDeployer> serviceTracker=new ServiceTracker<>(bundleContext,LPKGDeployer.class,null);
  serviceTracker.open();
  LPKGDeployer lpkgDeployer=serviceTracker.getService();
  serviceTracker.close();
  Map<Bundle,List<Bundle>> bundleMap=lpkgDeployer.getDeployedLPKGBundles();
  for (  File file : lpkgFiles) {
    Bundle lpkgBundle=bundleContext.getBundle(file.getCanonicalPath());
    Assert.assertNotNull("No matching lpkg bundle for " + file.getCanonicalPath(),lpkgBundle);
    List<Bundle> bundles=bundleMap.get(lpkgBundle);
    Assert.assertNotNull("Registered lpkg bundles " + bundleMap.keySet() + " do not contain "+ lpkgBundle,bundles);
    ZipFile zipFile=new ZipFile(file);
    Enumeration<? extends ZipEntry> zipEntries=zipFile.entries();
    while (zipEntries.hasMoreElements()) {
      ZipEntry zipEntry=zipEntries.nextElement();
      String name=zipEntry.getName();
      if (name.endsWith(".jar") || name.endsWith("*.war")) {
        Bundle bundle=bundleContext.getBundle(StringPool.SLASH + name);
        Assert.assertNotNull(bundle);
        Assert.assertTrue(bundles.contains(bundle));
      }
    }
  }
}
