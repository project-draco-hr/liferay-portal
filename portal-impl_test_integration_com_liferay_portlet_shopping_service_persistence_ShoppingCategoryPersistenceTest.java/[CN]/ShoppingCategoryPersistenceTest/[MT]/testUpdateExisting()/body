{
  long pk=ServiceTestUtil.nextLong();
  ShoppingCategory newShoppingCategory=_persistence.create(pk);
  newShoppingCategory.setGroupId(ServiceTestUtil.nextLong());
  newShoppingCategory.setCompanyId(ServiceTestUtil.nextLong());
  newShoppingCategory.setUserId(ServiceTestUtil.nextLong());
  newShoppingCategory.setUserName(ServiceTestUtil.randomString());
  newShoppingCategory.setCreateDate(ServiceTestUtil.nextDate());
  newShoppingCategory.setModifiedDate(ServiceTestUtil.nextDate());
  newShoppingCategory.setParentCategoryId(ServiceTestUtil.nextLong());
  newShoppingCategory.setName(ServiceTestUtil.randomString());
  newShoppingCategory.setDescription(ServiceTestUtil.randomString());
  _persistence.update(newShoppingCategory,false);
  ShoppingCategory existingShoppingCategory=_persistence.findByPrimaryKey(newShoppingCategory.getPrimaryKey());
  Assert.assertEquals(existingShoppingCategory.getCategoryId(),newShoppingCategory.getCategoryId());
  Assert.assertEquals(existingShoppingCategory.getGroupId(),newShoppingCategory.getGroupId());
  Assert.assertEquals(existingShoppingCategory.getCompanyId(),newShoppingCategory.getCompanyId());
  Assert.assertEquals(existingShoppingCategory.getUserId(),newShoppingCategory.getUserId());
  Assert.assertEquals(existingShoppingCategory.getUserName(),newShoppingCategory.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingShoppingCategory.getCreateDate()),Time.getShortTimestamp(newShoppingCategory.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingShoppingCategory.getModifiedDate()),Time.getShortTimestamp(newShoppingCategory.getModifiedDate()));
  Assert.assertEquals(existingShoppingCategory.getParentCategoryId(),newShoppingCategory.getParentCategoryId());
  Assert.assertEquals(existingShoppingCategory.getName(),newShoppingCategory.getName());
  Assert.assertEquals(existingShoppingCategory.getDescription(),newShoppingCategory.getDescription());
}
