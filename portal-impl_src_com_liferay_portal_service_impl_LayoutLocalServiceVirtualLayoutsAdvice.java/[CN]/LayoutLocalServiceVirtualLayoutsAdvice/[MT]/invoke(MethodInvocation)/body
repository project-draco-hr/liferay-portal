{
  Method method=methodInvocation.getMethod();
  String methodName=method.getName();
  Object[] arguments=methodInvocation.getArguments();
  Class<?>[] parameterTypes=method.getParameterTypes();
  if ((methodName.equals("getLayouts") && Arrays.equals(parameterTypes,_TYPES_L_B_L)) || Arrays.equals(parameterTypes,_TYPES_L_B_L_B_I_I)) {
    long groupId=(Long)arguments[0];
    boolean privateLayout=(Boolean)arguments[1];
    long parentLayoutId=(Long)arguments[2];
    PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
    try {
      Group group=GroupLocalServiceUtil.getGroup(groupId);
      LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(groupId,privateLayout);
      mergeLayoutSetProtypeLayouts(permissionChecker,group,layoutSet);
      if (!PropsValues.USER_GROUPS_COPY_LAYOUTS_TO_USER_PERSONAL_SITE && group.isUser() && (parentLayoutId == LayoutConstants.DEFAULT_PARENT_LAYOUT_ID)) {
        Object returnValue=methodInvocation.proceed();
        return addUserGroupLayouts(permissionChecker,group,layoutSet,(List<Layout>)returnValue);
      }
    }
 catch (    Exception e) {
      _log.error(e,e);
      throw e;
    }
  }
 else   if (methodName.equals("getLayout") && (Arrays.equals(parameterTypes,_TYPES_L) || Arrays.equals(parameterTypes,_TYPES_L_B_L))) {
    Layout layout=(Layout)methodInvocation.proceed();
    if (Validator.isNull(layout.getTemplateLayoutUuid())) {
      return layout;
    }
    PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
    Group group=layout.getGroup();
    LayoutSet layoutSet=layout.getLayoutSet();
    mergeLayoutSetProtypeLayouts(permissionChecker,group,layoutSet);
  }
  return methodInvocation.proceed();
}
