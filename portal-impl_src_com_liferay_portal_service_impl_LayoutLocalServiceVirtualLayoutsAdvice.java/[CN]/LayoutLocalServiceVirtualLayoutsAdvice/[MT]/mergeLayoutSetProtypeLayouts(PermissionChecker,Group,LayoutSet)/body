{
  if (!layoutSet.getLayoutSetPrototypeLinkEnabled() || Validator.isNull(layoutSet.getLayoutSetPrototypeUuid()) || group.isLayoutPrototype()|| group.isLayoutSetPrototype()) {
    return;
  }
  LayoutSetPrototype layoutSetPrototype=LayoutSetPrototypeLocalServiceUtil.getLayoutSetPrototypeByUuid(layoutSet.getLayoutSetPrototypeUuid());
  UnicodeProperties settingsProperties=layoutSet.getSettingsProperties();
  long lastMergeTime=GetterUtil.getLong(settingsProperties.getProperty("last-merge-time"));
  Date modifiedDate=layoutSetPrototype.getModifiedDate();
  if (lastMergeTime >= modifiedDate.getTime()) {
    return;
  }
  String owner=PortalUUIDUtil.generate();
  try {
    Lock lock=LockLocalServiceUtil.lock(LayoutLocalServiceVirtualLayoutsAdvice.class.getName(),String.valueOf(layoutSet.getLayoutSetId()),owner,false);
    if (!owner.equals(lock.getOwner())) {
      return;
    }
  }
 catch (  Exception e) {
    return;
  }
  try {
    Map<String,String[]> parameterMap=null;
    if (lastMergeTime > 0) {
      parameterMap=getLayoutTemplatesParameters(false);
    }
 else {
      parameterMap=getLayoutTemplatesParameters(true);
    }
    importLayoutSetPrototype(permissionChecker,layoutSetPrototype,layoutSet.getGroupId(),layoutSet.isPrivateLayout(),parameterMap);
    settingsProperties.setProperty("last-merge-time",String.valueOf(modifiedDate.getTime()));
    LayoutSetLocalServiceUtil.updateLayoutSet(layoutSet,false);
  }
  finally {
    LockLocalServiceUtil.unlock(LayoutLocalServiceVirtualLayoutsAdvice.class.getName(),String.valueOf(layoutSet.getLayoutSetId()),owner,false);
  }
}
