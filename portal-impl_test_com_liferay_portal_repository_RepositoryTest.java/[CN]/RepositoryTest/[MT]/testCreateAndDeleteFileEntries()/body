{
  long defaultRepositoryId=getGroupId();
  long otherRepositoryId=RepositoryFactoryUtil.createRepository(TestPropsValues.COMPANY_ID,getGroupId(),"Test","Test",PortletKeys.DOCUMENT_LIBRARY,RepositoryConstants.TYPE_LIFERAY,new UnicodeProperties());
  long repositoryIds[]=new long[]{defaultRepositoryId,otherRepositoryId};
  long fileEntryIds[]=new long[4];
  InputStream is=new UnsyncByteArrayInputStream(_TEST_CONTENT.getBytes());
  for (int i=0; i < repositoryIds.length; i++) {
    long repositoryId=repositoryIds[i];
    String name=Long.toString(repositoryId);
    LocalRepository localRepository=RepositoryFactoryUtil.getLocalRepository(repositoryId);
    FileEntry fileEntry1=localRepository.addFileEntry(TestPropsValues.USER_ID,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,Long.toString(DLFolderConstants.DEFAULT_PARENT_FOLDER_ID),StringPool.BLANK,StringPool.BLANK,null,is,_TEST_CONTENT.length(),new ServiceContext());
    fileEntryIds[i]=fileEntry1.getFileEntryId();
    Folder folder=localRepository.addFolder(TestPropsValues.USER_ID,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,name,name,new ServiceContext());
    long folderId=folder.getFolderId();
    FileEntry fileEntry2=localRepository.addFileEntry(TestPropsValues.USER_ID,folderId,Long.toString(folderId),StringPool.BLANK,StringPool.BLANK,null,is,_TEST_CONTENT.length(),new ServiceContext());
    fileEntryIds[i + 2]=fileEntry2.getFileEntryId();
  }
  RepositoryFactoryUtil.deleteRepositories(TestPropsValues.COMPANY_ID,getGroupId(),RepositoryConstants.PURGE_ALL);
  for (int i=0; i < repositoryIds.length; i++) {
    try {
      RepositoryFactoryUtil.getLocalRepository(repositoryIds[i]).getFileEntry(fileEntryIds[i]);
      fail("Should not be able to get file entry " + fileEntryIds[i] + " from repository "+ repositoryIds[i]);
    }
 catch (    Exception e) {
    }
  }
}
