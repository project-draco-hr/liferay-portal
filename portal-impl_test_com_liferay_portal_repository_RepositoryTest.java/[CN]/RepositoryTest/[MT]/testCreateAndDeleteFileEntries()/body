{
  long defaultRepositoryId=getGroupId();
  long dlRepositoryId=RepositoryFactoryUtil.createRepository(getGroupId(),"Test","Test",PortletKeys.DOCUMENT_LIBRARY,RepositoryConstants.TYPE_LIFERAY,new UnicodeProperties());
  long[] repositoryIds={defaultRepositoryId,dlRepositoryId};
  long[] fileEntryIds=new long[4];
  InputStream inputStream=new UnsyncByteArrayInputStream(_TEST_CONTENT.getBytes());
  for (int i=0; i < repositoryIds.length; i++) {
    long repositoryId=repositoryIds[i];
    LocalRepository localRepository=RepositoryFactoryUtil.getLocalRepository(repositoryId);
    FileEntry fileEntry1=localRepository.addFileEntry(TestPropsValues.USER_ID,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,String.valueOf(DLFolderConstants.DEFAULT_PARENT_FOLDER_ID),StringPool.BLANK,StringPool.BLANK,null,inputStream,_TEST_CONTENT.length(),new ServiceContext());
    fileEntryIds[i]=fileEntry1.getFileEntryId();
    Folder folder=localRepository.addFolder(TestPropsValues.USER_ID,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,String.valueOf(repositoryId),String.valueOf(repositoryId),new ServiceContext());
    long folderId=folder.getFolderId();
    FileEntry fileEntry2=localRepository.addFileEntry(TestPropsValues.USER_ID,folderId,String.valueOf(folderId),StringPool.BLANK,StringPool.BLANK,null,inputStream,_TEST_CONTENT.length(),new ServiceContext());
    fileEntryIds[i + 2]=fileEntry2.getFileEntryId();
  }
  RepositoryFactoryUtil.deleteRepositories(getGroupId(),RepositoryConstants.PURGE_ALL);
  for (int i=0; i < repositoryIds.length; i++) {
    long repositoryId=repositoryIds[i];
    long fileEntryId=fileEntryIds[i];
    try {
      LocalRepository localRepository=RepositoryFactoryUtil.getLocalRepository(repositoryId);
      localRepository.getFileEntry(fileEntryId);
      fail("Should not be able to get file entry " + fileEntryId + " from repository "+ repositoryId);
    }
 catch (    Exception e) {
    }
  }
}
