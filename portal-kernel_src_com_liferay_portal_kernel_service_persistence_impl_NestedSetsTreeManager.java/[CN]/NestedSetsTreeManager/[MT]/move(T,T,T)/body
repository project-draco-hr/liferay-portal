{
  if (Objects.equals(oldParentT,newParentT)) {
    return;
  }
  List<T> descendants=doGetDescendants(t.getNestedSetsTreeNodeScopeId(),t.getNestedSetsTreeNodeLeft(),t.getNestedSetsTreeNodeRight());
  long newParentNestedSetsTreeNodeRight=0;
  if (newParentT == null) {
    newParentNestedSetsTreeNodeRight=getMaxNestedSetsTreeNodeRight(t.getNestedSetsTreeNodeScopeId());
  }
 else {
    newParentNestedSetsTreeNodeRight=newParentT.getNestedSetsTreeNodeRight();
  }
  long delta=0;
  if (t.getNestedSetsTreeNodeRight() < newParentNestedSetsTreeNodeRight) {
    doUpdate(t.getNestedSetsTreeNodeScopeId(),-(t.getNestedSetsTreeNodeRight() - t.getNestedSetsTreeNodeLeft() + 1),t.getNestedSetsTreeNodeRight(),false,newParentNestedSetsTreeNodeRight,false,null);
    delta=newParentNestedSetsTreeNodeRight - t.getNestedSetsTreeNodeRight() - 1;
    doUpdate(t.getNestedSetsTreeNodeScopeId(),delta,t.getNestedSetsTreeNodeLeft(),true,t.getNestedSetsTreeNodeRight(),true,descendants);
  }
 else {
    doUpdate(t.getNestedSetsTreeNodeScopeId(),t.getNestedSetsTreeNodeRight() - t.getNestedSetsTreeNodeLeft() + 1,newParentNestedSetsTreeNodeRight,true,t.getNestedSetsTreeNodeLeft(),false,null);
    delta=newParentNestedSetsTreeNodeRight - t.getNestedSetsTreeNodeLeft();
    doUpdate(t.getNestedSetsTreeNodeScopeId(),delta,t.getNestedSetsTreeNodeLeft(),true,t.getNestedSetsTreeNodeRight(),true,descendants);
  }
  t.setNestedSetsTreeNodeLeft(t.getNestedSetsTreeNodeLeft() + delta);
  t.setNestedSetsTreeNodeRight(t.getNestedSetsTreeNodeRight() + delta);
}
