{
  response.setContentType(Details.CONTENT_TYPE);
  ServletOutputStream outputStream=response.getOutputStream();
  PrintWriter printWriter=new PrintWriter(outputStream,true);
  printWriter.println("(function() {");
  printWriter.print(_details.globalJSVariable());
  printWriter.println(".PATHS = {");
  String delimiter="";
  Set<String> processedNames=new HashSet<>();
  Collection<JSLoaderModule> jsLoaderModules=_jsLoaderModulesTracker.getJsLoaderModules();
  for (  JSLoaderModule jsLoaderModule : jsLoaderModules) {
    printWriter.write(delimiter);
    printWriter.write("'");
    printWriter.write(jsLoaderModule.getName());
    printWriter.write('@');
    printWriter.write(jsLoaderModule.getVersion());
    printWriter.write("': '");
    printWriter.write(jsLoaderModule.getContextPath());
    printWriter.write("'");
    if (!processedNames.contains(jsLoaderModule.getName())) {
      processedNames.add(jsLoaderModule.getName());
      printWriter.println(",");
      printWriter.write("'");
      printWriter.write(jsLoaderModule.getName());
      printWriter.write("': '");
      printWriter.write(jsLoaderModule.getContextPath());
      printWriter.write("'");
    }
    delimiter=",\n";
  }
  printWriter.println("\n};");
  printWriter.print(_details.globalJSVariable());
  printWriter.println(".MODULES = {");
  delimiter="";
  processedNames.clear();
  for (  JSLoaderModule jsLoaderModule : jsLoaderModules) {
    String unversionedConfiguration=jsLoaderModule.getUnversionedConfiguration();
    if (unversionedConfiguration.length() == 0) {
      continue;
    }
    if (!processedNames.contains(jsLoaderModule.getName())) {
      processedNames.add(jsLoaderModule.getName());
      printWriter.write(delimiter);
      printWriter.write(unversionedConfiguration);
      delimiter=",\n";
    }
    String versionedConfiguration=jsLoaderModule.getVersionedConfiguration();
    if (versionedConfiguration.length() > 0) {
      printWriter.write(delimiter);
      printWriter.write(versionedConfiguration);
      delimiter=",\n";
    }
  }
  printWriter.println("\n};");
  printWriter.print(_details.globalJSVariable());
  printWriter.println(".MAPS = {");
  delimiter="";
  processedNames.clear();
  for (  JSLoaderModule jsLoaderModule : jsLoaderModules) {
    if (processedNames.contains(jsLoaderModule.getName())) {
      continue;
    }
    processedNames.add(jsLoaderModule.getName());
    printWriter.write(delimiter);
    printWriter.write("'");
    printWriter.write(jsLoaderModule.getName());
    printWriter.write("': '");
    printWriter.write(jsLoaderModule.getName());
    printWriter.write('@');
    printWriter.write(jsLoaderModule.getVersion());
    printWriter.write("'");
    delimiter=",\n";
    String unversionedMapsConfiguration=jsLoaderModule.getUnversionedMapsConfiguration();
    if (!unversionedMapsConfiguration.equals("")) {
      printWriter.write(delimiter);
      printWriter.write(unversionedMapsConfiguration);
    }
  }
  printWriter.println("\n};");
  printWriter.println("}());");
  Collection<URL> jsConfigURLs=_jsBundleConfigTracker.getJsConfigURLs();
  for (  URL jsConfigURL : jsConfigURLs) {
    try (InputStream inputStream=jsConfigURL.openStream()){
      StreamUtil.transfer(inputStream,outputStream,false);
      outputStream.println();
    }
 catch (    Exception e) {
      _logger.log(Logger.LOG_ERROR,"Could not open resource",e);
    }
  }
  printWriter.close();
}
