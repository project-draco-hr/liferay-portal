{
  String assetTagName=RandomTestUtil.randomString();
  String[] assetTagProperties={"key" + AssetTagConstants.PROPERTY_KEY_VALUE_SEPARATOR + "value"};
  List<AssetTag> initialScopeGroupAssetTags=AssetTagFinderUtil.filterFindByG_N_P(new long[]{_scopeGroup.getGroupId()},assetTagName,assetTagProperties,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  List<AssetTag> initialSiteGroupAssetTags=AssetTagFinderUtil.filterFindByG_N_P(new long[]{_siteGroup.getGroupId()},assetTagName,assetTagProperties,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  addAssetTag(_siteGroup.getGroupId(),assetTagName,assetTagProperties);
  User user=UserTestUtil.addUser(null,0);
  PermissionChecker originalPermissionChecker=PermissionThreadLocal.getPermissionChecker();
  try {
    PermissionChecker permissionChecker=PermissionCheckerFactoryUtil.create(user);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    List<AssetTag> scopeGroupAssetTags=AssetTagFinderUtil.filterFindByG_N_P(new long[]{_scopeGroup.getGroupId()},assetTagName,assetTagProperties,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    Assert.assertEquals(initialScopeGroupAssetTags.size(),scopeGroupAssetTags.size());
    List<AssetTag> siteGroupAssetTags=AssetTagFinderUtil.filterFindByG_N_P(new long[]{_siteGroup.getGroupId()},assetTagName,assetTagProperties,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    Assert.assertEquals(initialSiteGroupAssetTags.size() + 1,siteGroupAssetTags.size());
  }
  finally {
    PermissionThreadLocal.setPermissionChecker(originalPermissionChecker);
  }
}
