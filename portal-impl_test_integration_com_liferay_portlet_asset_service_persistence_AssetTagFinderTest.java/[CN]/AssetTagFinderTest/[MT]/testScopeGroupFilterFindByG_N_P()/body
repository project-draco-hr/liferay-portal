{
  Group scopeGroup=addScopeGroup();
  Group siteGroup=scopeGroup.getParentGroup();
  String tagName=ServiceTestUtil.randomString();
  String[] tagProperties=new String[]{"key:value"};
  List<AssetTag> initialTagsScopeGroup=AssetTagFinderUtil.filterFindByG_N_P(new long[]{scopeGroup.getGroupId()},tagName,tagProperties,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  List<AssetTag> initialTagsSiteGroup=AssetTagFinderUtil.filterFindByG_N_P(new long[]{siteGroup.getGroupId()},tagName,tagProperties,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  addAssetTag(siteGroup.getGroupId(),tagName,tagProperties);
  User user=UserTestUtil.addUser(null,0);
  PermissionChecker originalPermissionChecker=PermissionThreadLocal.getPermissionChecker();
  try {
    PermissionChecker permissionChecker=PermissionCheckerFactoryUtil.create(user);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    List<AssetTag> finalTagsScopeGroup=AssetTagFinderUtil.filterFindByG_N_P(new long[]{scopeGroup.getGroupId()},tagName,tagProperties,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    List<AssetTag> finalTagsSiteGroup=AssetTagFinderUtil.filterFindByG_N_P(new long[]{siteGroup.getGroupId()},tagName,tagProperties,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    Assert.assertEquals(initialTagsScopeGroup.size(),finalTagsScopeGroup.size());
    Assert.assertEquals(initialTagsSiteGroup.size() + 1,finalTagsSiteGroup.size());
  }
  finally {
    PermissionThreadLocal.setPermissionChecker(originalPermissionChecker);
  }
}
