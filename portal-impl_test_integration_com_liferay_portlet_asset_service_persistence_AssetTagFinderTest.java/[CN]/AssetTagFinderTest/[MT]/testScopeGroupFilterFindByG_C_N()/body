{
  Group scopeGroup=addScopeGroup();
  Group siteGroup=scopeGroup.getParentGroup();
  long classNameId=PortalUtil.getClassNameId(BlogsEntry.class);
  String tagName=ServiceTestUtil.randomString();
  List<AssetTag> initialTagsScopeGroup=AssetTagFinderUtil.filterFindByG_C_N(scopeGroup.getGroupId(),classNameId,tagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  List<AssetTag> initialTagsSiteGroup=AssetTagFinderUtil.filterFindByG_C_N(siteGroup.getGroupId(),classNameId,tagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  addBlogEntry(scopeGroup.getGroupId(),tagName);
  User user=UserTestUtil.addUser(null,0);
  PermissionChecker originalPermissionChecker=PermissionThreadLocal.getPermissionChecker();
  try {
    PermissionChecker permissionChecker=PermissionCheckerFactoryUtil.create(user);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    List<AssetTag> finalTagsScopeGroup=AssetTagFinderUtil.filterFindByG_C_N(scopeGroup.getGroupId(),classNameId,tagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    List<AssetTag> finalTagsSiteGroup=AssetTagFinderUtil.filterFindByG_C_N(siteGroup.getGroupId(),classNameId,tagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    Assert.assertEquals(initialTagsScopeGroup.size() + 1,finalTagsScopeGroup.size());
    Assert.assertEquals(initialTagsSiteGroup.size(),finalTagsSiteGroup.size());
  }
  finally {
    PermissionThreadLocal.setPermissionChecker(originalPermissionChecker);
  }
}
