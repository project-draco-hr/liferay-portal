{
  long defaultRepositoryId=_group.getGroupId();
  long classNameId=PortalUtil.getClassNameId(LiferayRepository.class);
  Repository dlRepository=RepositoryLocalServiceUtil.addRepository(TestPropsValues.getUserId(),_group.getGroupId(),classNameId,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,"Test 1","Test 1",PortletKeys.DOCUMENT_LIBRARY,new UnicodeProperties(),hidden,new ServiceContext());
  long[] repositoryIds={dlRepository.getRepositoryId()};
  if (!hidden) {
    repositoryIds=new long[]{defaultRepositoryId,dlRepository.getRepositoryId()};
  }
  long[] fileEntryIds=new long[4];
  long[] folderIds=new long[2];
  InputStream inputStream=new UnsyncByteArrayInputStream(_TEST_CONTENT.getBytes());
  for (int i=0; i < repositoryIds.length; i++) {
    long repositoryId=repositoryIds[i];
    int initialFoldersCount=DLAppServiceUtil.getFoldersCount(repositoryId,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID);
    LocalRepository localRepository=RepositoryServiceUtil.getLocalRepositoryImpl(repositoryId);
    String name1=String.valueOf(DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) + ".txt";
    FileEntry fileEntry1=localRepository.addFileEntry(TestPropsValues.getUserId(),DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,name1,ContentTypes.TEXT_PLAIN,name1,StringPool.BLANK,StringPool.BLANK,inputStream,_TEST_CONTENT.length(),new ServiceContext());
    fileEntryIds[i]=fileEntry1.getFileEntryId();
    Folder folder=localRepository.addFolder(TestPropsValues.getUserId(),DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,String.valueOf(repositoryId),String.valueOf(repositoryId),new ServiceContext());
    folderIds[i]=folder.getFolderId();
    String name2=String.valueOf(folderIds[i]) + ".txt";
    FileEntry fileEntry2=localRepository.addFileEntry(TestPropsValues.getUserId(),folderIds[i],name2,ContentTypes.TEXT_PLAIN,name2,StringPool.BLANK,StringPool.BLANK,inputStream,_TEST_CONTENT.length(),new ServiceContext());
    fileEntryIds[i + 2]=fileEntry2.getFileEntryId();
    Assert.assertEquals(initialFoldersCount + 1,DLAppServiceUtil.getFoldersCount(repositoryId,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID));
    Assert.assertEquals(1,DLAppServiceUtil.getFileEntriesAndFileShortcutsCount(repositoryId,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,WorkflowConstants.STATUS_ANY));
    Assert.assertEquals(1,DLAppServiceUtil.getFileEntriesAndFileShortcutsCount(repositoryId,folder.getFolderId(),WorkflowConstants.STATUS_ANY));
  }
  DLAppLocalServiceUtil.deleteAllRepositories(_group.getGroupId());
  for (int i=0; i < repositoryIds.length; i++) {
    long repositoryId=repositoryIds[i];
    long fileEntryId=fileEntryIds[i];
    try {
      LocalRepository localRepository=RepositoryServiceUtil.getLocalRepositoryImpl(repositoryId);
      localRepository.getFileEntry(fileEntryId);
      Assert.fail("Should not be able to get file entry " + fileEntryId + " from repository "+ repositoryId);
    }
 catch (    Exception e) {
    }
  }
}
