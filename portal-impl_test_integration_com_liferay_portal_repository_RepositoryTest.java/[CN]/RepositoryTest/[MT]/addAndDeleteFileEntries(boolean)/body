{
  long defaultRepositoryId=_group.getGroupId();
  long classNameId=PortalUtil.getClassNameId(LiferayRepository.class);
  Repository dlRepository=RepositoryLocalServiceUtil.addRepository(TestPropsValues.getUserId(),_group.getGroupId(),classNameId,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,"Test 1","Test 1",PortletKeys.DOCUMENT_LIBRARY,new UnicodeProperties(),hidden,new ServiceContext());
  long[] repositoryIds={dlRepository.getRepositoryId()};
  if (!hidden) {
    repositoryIds=new long[]{defaultRepositoryId,dlRepository.getRepositoryId()};
  }
  long[] fileEntryIds=new long[4];
  long[] folderIds=new long[2];
  for (int i=0; i < repositoryIds.length; i++) {
    long repositoryId=repositoryIds[i];
    long[] entryIds=populateRepository(repositoryId);
    fileEntryIds[i]=entryIds[0];
    folderIds[i]=entryIds[1];
    fileEntryIds[i + 2]=entryIds[2];
  }
  DLAppLocalServiceUtil.deleteAllRepositories(_group.getGroupId());
  for (int i=0; i < repositoryIds.length; i++) {
    long repositoryId=repositoryIds[i];
    long fileEntryId=fileEntryIds[i];
    try {
      LocalRepository localRepository=RepositoryServiceUtil.getLocalRepositoryImpl(repositoryId);
      localRepository.getFileEntry(fileEntryId);
      Assert.fail("Should not be able to get file entry " + fileEntryId + " from repository "+ repositoryId);
    }
 catch (    Exception e) {
    }
  }
}
