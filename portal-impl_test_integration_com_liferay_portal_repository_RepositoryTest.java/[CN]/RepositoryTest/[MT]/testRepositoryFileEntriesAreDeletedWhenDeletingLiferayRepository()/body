{
  long classNameId=PortalUtil.getClassNameId(LiferayRepository.class);
  long[] fileEntryIds=new long[4];
  long[] folderIds=new long[2];
  long[] entryIds=populateRepository(_group.getGroupId());
  fileEntryIds[0]=entryIds[0];
  fileEntryIds[1]=entryIds[2];
  folderIds[0]=entryIds[1];
  Repository dlRepository2=RepositoryLocalServiceUtil.addRepository(TestPropsValues.getUserId(),_group.getGroupId(),classNameId,DLFolderConstants.DEFAULT_PARENT_FOLDER_ID,RandomTestUtil.randomString(),RandomTestUtil.randomString(),PortletKeys.DOCUMENT_LIBRARY,new UnicodeProperties(),true,new ServiceContext());
  entryIds=populateRepository(dlRepository2.getRepositoryId());
  fileEntryIds[2]=entryIds[0];
  fileEntryIds[3]=entryIds[2];
  folderIds[1]=entryIds[1];
  DLAppLocalServiceUtil.deleteAll(_group.getGroupId());
  try {
    LocalRepository localRepository=RepositoryServiceUtil.getLocalRepositoryImpl(dlRepository2.getRepositoryId());
    localRepository.getFileEntry(fileEntryIds[0]);
    localRepository.getFileEntry(fileEntryIds[1]);
    Assert.fail("Should be able to get file entry from repository " + dlRepository2.getRepositoryId());
  }
 catch (  Exception e) {
  }
  try {
    LocalRepository localRepository=RepositoryServiceUtil.getLocalRepositoryImpl(dlRepository2.getRepositoryId());
    localRepository.getFileEntry(fileEntryIds[2]);
    localRepository.getFileEntry(fileEntryIds[3]);
  }
 catch (  Exception e) {
    Assert.fail("Should not be able to get file entry from repository " + dlRepository2.getRepositoryId());
  }
}
