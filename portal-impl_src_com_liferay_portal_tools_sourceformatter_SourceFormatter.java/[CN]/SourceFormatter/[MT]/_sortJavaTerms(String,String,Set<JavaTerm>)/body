{
  String previousJavaTermContent=StringPool.BLANK;
  int previousJavaTermLineCount=-1;
  String previousJavaTermName=StringPool.BLANK;
  int previousJavaTermType=-1;
  Iterator<JavaTerm> itr=javaTerms.iterator();
  while (itr.hasNext()) {
    JavaTerm javaTerm=itr.next();
    String javaTermContent=javaTerm.getContent();
    int javaTermLineCount=javaTerm.getLineCount();
    String javaTermName=javaTerm.getName();
    int javaTermType=javaTerm.getType();
    String excluded=null;
    if (_javaTermSortExclusions != null) {
      excluded=_javaTermSortExclusions.getProperty(fileName + StringPool.AT + javaTermLineCount);
      if (excluded == null) {
        excluded=_javaTermSortExclusions.getProperty(fileName + StringPool.AT + javaTermName);
      }
      if (excluded == null) {
        excluded=_javaTermSortExclusions.getProperty(fileName);
      }
    }
    if (excluded == null) {
      if (previousJavaTermLineCount > javaTermLineCount) {
        String javaTermNameLowerCase=javaTermName.toLowerCase();
        String previousJavaTermNameLowerCase=previousJavaTermName.toLowerCase();
        if (fileName.contains("persistence") && ((previousJavaTermName.startsWith("doCount") && javaTermName.startsWith("doCount")) || (previousJavaTermName.startsWith("doFind") && javaTermName.startsWith("doFind")) || (previousJavaTermNameLowerCase.startsWith("count") && javaTermNameLowerCase.startsWith("count"))|| (previousJavaTermNameLowerCase.startsWith("filter") && javaTermNameLowerCase.startsWith("filter"))|| (previousJavaTermNameLowerCase.startsWith("find") && javaTermNameLowerCase.startsWith("find"))|| (previousJavaTermNameLowerCase.startsWith("join") && javaTermNameLowerCase.startsWith("join")))) {
        }
 else {
          content=StringUtil.replaceFirst(content,javaTermContent,previousJavaTermContent);
          content=StringUtil.replaceLast(content,previousJavaTermContent,javaTermContent);
          return content;
        }
      }
      if ((previousJavaTermType == javaTermType) && ((javaTermType == _TYPE_VARIABLE_PRIVATE_STATIC) || (javaTermType == _TYPE_VARIABLE_PRIVATE) || (javaTermType == _TYPE_VARIABLE_PROTECTED_STATIC)|| (javaTermType == _TYPE_VARIABLE_PROTECTED)) && (_hasAnnotationOrJavadoc(previousJavaTermContent) || _hasAnnotationOrJavadoc(javaTermContent))) {
        if (!content.contains("\n\n" + javaTermContent)) {
          return StringUtil.replace(content,"\n" + javaTermContent,"\n\n" + javaTermContent);
        }
      }
    }
    previousJavaTermContent=javaTermContent;
    previousJavaTermLineCount=javaTermLineCount;
    previousJavaTermName=javaTermName;
    previousJavaTermType=javaTermType;
  }
  return content;
}
