{
  Path tempPath=Files.createTempDirectory(null);
  File tempDir=tempPath.toFile();
  _config.put("root.url",tempDir.getPath());
  try (ZipFile zipFile=new ZipFile(_lpkgFile)){
    ZipEntry zipEntry=zipFile.getEntry("liferay-marketplace.properties");
    if (zipEntry == null) {
      throw new Exception(_lpkgFile + " does not have liferay-marketplace.properties");
    }
    Properties properties=new Properties();
    try (InputStream inputStream=zipFile.getInputStream(zipEntry)){
      properties.load(inputStream);
    }
     String symbolicName=properties.getProperty("title");
    if ((symbolicName == null) || symbolicName.isEmpty()) {
      throw new Exception(_lpkgFile + " does not have a valid symbolic name");
    }
    Version version=null;
    String versionString=properties.getProperty("version");
    try {
      new Version(versionString);
    }
 catch (    IllegalArgumentException iae) {
      throw new Exception(_lpkgFile + " does not have a valid version: " + versionString,iae);
    }
    ResourceIndexer resourceIndexer=new RepoIndex();
    Set<File> files=new LinkedHashSet<>();
    Enumeration<? extends ZipEntry> enumeration=zipFile.entries();
    while (enumeration.hasMoreElements()) {
      zipEntry=enumeration.nextElement();
      String name=zipEntry.getName();
      if (!name.endsWith(".jar")) {
        continue;
      }
      File file=new File(tempDir,name);
      Files.copy(zipFile.getInputStream(zipEntry),file.toPath(),StandardCopyOption.REPLACE_EXISTING);
      files.add(file);
    }
    File indexFile=new File(tempDir,symbolicName + "-" + version+ "-index.xml");
    try (OutputStream outputStream=new FileOutputStream(indexFile)){
      resourceIndexer.index(files,outputStream,_config);
    }
     if (outputFile.isDirectory()) {
      outputFile=new File(outputFile,indexFile.getName());
    }
    Files.move(indexFile.toPath(),outputFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
    return outputFile;
  }
  finally {
    PathUtil.deltree(tempPath);
  }
}
