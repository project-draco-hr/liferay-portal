{
  String[] systemPackagesExtra=PropsValues.MODULE_FRAMEWORK_SYSTEM_PACKAGES_EXTRA;
  String hashcode=_getHashcode(systemPackagesExtra);
  File coreDir=new File(PropsValues.LIFERAY_WEB_PORTAL_CONTEXT_TEMPDIR,"osgi");
  if (!coreDir.exists()) {
    coreDir.mkdir();
  }
  File cacheFile=new File(coreDir,"system-packages.txt");
  File hashcodeFile=new File(coreDir,"system-packages.hash");
  if (cacheFile.exists() && hashcodeFile.exists() && _hasMatchingHashcode(hashcodeFile,hashcode)) {
    try {
      ObjectInputStream objectInputStream=new ObjectInputStream(new FileInputStream(cacheFile));
      _extraPackageMap=(Map<String,List<URL>>)objectInputStream.readObject();
      String extraPackages=(String)objectInputStream.readObject();
      return extraPackages;
    }
 catch (    IOException ioe) {
      _log.error(ioe,ioe);
    }
catch (    ClassNotFoundException cnfe) {
      _log.error(cnfe,cnfe);
    }
  }
  _extraPackageMap=new TreeMap<String,List<URL>>();
  StringBundler sb=new StringBundler();
  for (  String extraPackage : systemPackagesExtra) {
    sb.append(extraPackage);
    sb.append(StringPool.COMMA);
  }
  ClassLoader classLoader=ClassLoaderUtil.getPortalClassLoader();
  PrintStream err=System.err;
  try {
    System.setErr(new PrintStream(err){
      @Override public void println(      String string){
        if (_log.isDebugEnabled()) {
          _log.debug(string);
        }
      }
    }
);
    Enumeration<URL> enu=classLoader.getResources("META-INF/MANIFEST.MF");
    while (enu.hasMoreElements()) {
      URL url=enu.nextElement();
      _processURL(sb,url,PropsValues.MODULE_FRAMEWORK_SYSTEM_BUNDLE_IGNORED_FRAGMENTS);
    }
  }
 catch (  IOException ioe) {
    _log.error(ioe,ioe);
  }
 finally {
    System.setErr(err);
  }
  _extraPackageMap=Collections.unmodifiableMap(_extraPackageMap);
  sb.setIndex(sb.index() - 1);
  if (_log.isTraceEnabled()) {
    String s=sb.toString();
    s=s.replace(",","\n");
    _log.trace("The portal's system bundle is exporting the following " + "packages:\n" + s);
  }
  try {
    ObjectOutputStream objectOutputStream=new ObjectOutputStream(new FileOutputStream(cacheFile));
    objectOutputStream.writeObject(_extraPackageMap);
    objectOutputStream.writeObject(sb.toString());
    FileUtil.write(hashcodeFile,hashcode);
  }
 catch (  IOException ioe) {
    _log.error(ioe,ioe);
  }
  return sb.toString();
}
