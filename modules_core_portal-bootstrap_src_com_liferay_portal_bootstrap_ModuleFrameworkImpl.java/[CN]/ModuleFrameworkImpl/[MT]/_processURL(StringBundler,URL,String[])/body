{
  Manifest manifest=null;
  try {
    manifest=new Manifest(url.openStream());
  }
 catch (  IOException ioe) {
    _log.error(ioe,ioe);
    return;
  }
  Attributes attributes=manifest.getMainAttributes();
  String bundleSymbolicName=attributes.getValue(Constants.BUNDLE_SYMBOLICNAME);
  if (Validator.isNull(bundleSymbolicName)) {
    String urlString=_decodePath(url.toString());
    urlString=StringUtil.toLowerCase(urlString);
    if (urlString.contains(_liferayLibPortalDir)) {
      manifest=_calculateManifest(url,manifest);
      attributes=manifest.getMainAttributes();
      bundleSymbolicName=attributes.getValue(new Attributes.Name(Constants.BUNDLE_SYMBOLICNAME));
      if (Validator.isNull(bundleSymbolicName)) {
        return;
      }
    }
 else {
      return;
    }
  }
  String rootBundleSymbolicName=bundleSymbolicName;
  int index=rootBundleSymbolicName.indexOf(StringPool.SEMICOLON);
  if (index != -1) {
    rootBundleSymbolicName=rootBundleSymbolicName.substring(0,index);
  }
  for (  String ignoredFragment : ignoredFragments) {
    String ignoredFramentPrefix=ignoredFragment.substring(0,ignoredFragment.length() - 1);
    if (rootBundleSymbolicName.equals(ignoredFragment) || (ignoredFragment.endsWith(StringPool.STAR) && rootBundleSymbolicName.startsWith(ignoredFramentPrefix))) {
      return;
    }
  }
  String exportPackage=GetterUtil.getString(attributes.getValue(Constants.EXPORT_PACKAGE));
  Parameters parameters=OSGiHeader.parseHeader(exportPackage);
  for (  Map.Entry<String,Attrs> entry : parameters.entrySet()) {
    String key=entry.getKey();
    List<URL> urls=_extraPackageMap.get(key);
    if (urls == null) {
      urls=new ArrayList<>();
      _extraPackageMap.put(key,urls);
    }
    urls.add(url);
    sb.append(key);
    Attrs value=entry.getValue();
    if (value.containsKey("version")) {
      sb.append(";version=\"");
      sb.append(value.get("version"));
      sb.append("\"");
    }
    sb.append(StringPool.COMMA);
  }
}
