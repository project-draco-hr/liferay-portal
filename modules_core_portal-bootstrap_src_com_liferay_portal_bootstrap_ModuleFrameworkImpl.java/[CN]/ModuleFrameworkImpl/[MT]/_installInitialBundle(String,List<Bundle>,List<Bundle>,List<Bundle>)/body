{
  boolean start=false;
  int startLevel=PropsValues.MODULE_FRAMEWORK_BEGINNING_START_LEVEL;
  int index=location.lastIndexOf(StringPool.AT);
  if (index != -1) {
    String[] parts=StringUtil.split(location.substring(index + 1),StringPool.COLON);
    for (    String part : parts) {
      if (part.equals("start")) {
        start=true;
      }
 else {
        startLevel=GetterUtil.getInteger(part);
      }
    }
    location=location.substring(0,index);
  }
  InputStream inputStream=null;
  try {
    if (!location.startsWith("file:")) {
      location="file:".concat(PropsValues.MODULE_FRAMEWORK_BASE_DIR.concat("/static/").concat(location));
    }
    URL initialBundleURL=new URL(location);
    try {
      inputStream=new BufferedInputStream(initialBundleURL.openStream());
    }
 catch (    IOException ioe) {
      if (_log.isWarnEnabled()) {
        _log.warn(ioe.getMessage());
      }
      return;
    }
    Bundle bundle=_addBundle(initialBundleURL.toString(),inputStream,false);
    if ((bundle == null) || _isFragmentBundle(bundle)) {
      return;
    }
    if (!start && _hasLazyActivationPolicy(bundle)) {
      lazyActivationBundles.add(bundle);
      return;
    }
    if (((bundle.getState() & Bundle.UNINSTALLED) == 0) && (startLevel > 0)) {
      BundleStartLevel bundleStartLevel=bundle.adapt(BundleStartLevel.class);
      bundleStartLevel.setStartLevel(startLevel);
    }
    if (start) {
      startBundles.add(bundle);
    }
    if ((bundle.getState() & Bundle.INSTALLED) != 0) {
      refreshBundles.add(bundle);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    StreamUtil.cleanUp(inputStream);
  }
}
