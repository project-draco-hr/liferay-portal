{
  File file=_getJarFile();
  if (file.isDirectory()) {
    Path jarDirPath=file.toPath();
    final Path rootDirPath=jarDirPath.resolve(dirName);
    Files.walkFileTree(rootDirPath,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path path,      BasicFileAttributes basicFileAttributes) throws IOException {
        Path relativePath=rootDirPath.relativize(path);
        String fileName=relativePath.toString();
        Path destinationPath=destinationDirPath.resolve(fileName);
        Files.createDirectories(destinationPath.getParent());
        Files.copy(path,destinationPath,StandardCopyOption.REPLACE_EXISTING);
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 else {
    try (JarFile jarFile=new JarFile(file)){
      Enumeration<JarEntry> enumeration=jarFile.entries();
      while (enumeration.hasMoreElements()) {
        JarEntry jarEntry=enumeration.nextElement();
        if (jarEntry.isDirectory()) {
          continue;
        }
        String name=jarEntry.getName();
        if (!name.startsWith(dirName + "/")) {
          continue;
        }
        String fileName=name.substring(dirName.length() + 1);
        Path destinationPath=destinationDirPath.resolve(fileName);
        Files.createDirectories(destinationPath.getParent());
        try (InputStream inputStream=jarFile.getInputStream(jarEntry)){
          Files.copy(inputStream,destinationPath,StandardCopyOption.REPLACE_EXISTING);
        }
       }
    }
   }
}
