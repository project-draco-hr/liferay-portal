{
  String anyAssetTypeString=getParameter(actionRequest,"anyAssetType");
  boolean anyAssetType=GetterUtil.getBoolean(anyAssetTypeString);
  if (anyAssetType) {
    return null;
  }
  long defaultAssetTypeId=GetterUtil.getLong(anyAssetTypeString);
  if ((defaultAssetTypeId == 0) && (classNameIds.length == 1)) {
    defaultAssetTypeId=GetterUtil.getLong(classNameIds[0]);
  }
  if (defaultAssetTypeId <= 0) {
    return null;
  }
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String className=PortalUtil.getClassName(defaultAssetTypeId);
  AssetRendererFactory assetRendererFactory=AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);
  long[] groupIds={themeDisplay.getCompanyGroupId(),themeDisplay.getScopeGroupId()};
  if (assetRendererFactory.getClassTypes(groupIds,themeDisplay.getLocale()) == null) {
    return null;
  }
  String assetClassName=AssetPublisherUtil.getClassName(assetRendererFactory);
  String anyAssetClassTypeString=getParameter(actionRequest,"anyClassType" + assetClassName);
  boolean anyAssetClassType=GetterUtil.getBoolean(anyAssetClassTypeString);
  if (anyAssetClassType) {
    return null;
  }
  long defaultAssetClassTypeId=GetterUtil.getLong(anyAssetClassTypeString);
  if (defaultAssetClassTypeId > 0) {
    return new String[]{String.valueOf(defaultAssetClassTypeId)};
  }
 else {
    return StringUtil.split(getParameter(actionRequest,"classTypeIds" + assetClassName));
  }
}
