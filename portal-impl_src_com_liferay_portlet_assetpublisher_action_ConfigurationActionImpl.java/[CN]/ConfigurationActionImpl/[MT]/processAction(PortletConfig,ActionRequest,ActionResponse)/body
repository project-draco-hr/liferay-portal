{
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  String portletResource=ParamUtil.getString(actionRequest,"portletResource");
  PortletPreferences preferences=PortletPreferencesFactoryUtil.getPortletSetup(actionRequest,portletResource);
  if (cmd.equals(Constants.UPDATE)) {
    updateDisplaySettings(actionRequest);
    String selectionStyle=getParameter(actionRequest,"selectionStyle");
    if (selectionStyle.equals("dynamic")) {
      updateQueryLogic(actionRequest,preferences);
    }
    updateDefaultAssetPublisher(actionRequest);
    super.processAction(portletConfig,actionRequest,actionResponse);
  }
 else {
    try {
      if (cmd.equals("add-selection")) {
        AssetPublisherUtil.addSelection(actionRequest,preferences);
      }
 else       if (cmd.equals("move-selection-down")) {
        moveSelectionDown(actionRequest,preferences);
      }
 else       if (cmd.equals("move-selection-up")) {
        moveSelectionUp(actionRequest,preferences);
      }
 else       if (cmd.equals("remove-selection")) {
        removeSelection(actionRequest,preferences);
      }
 else       if (cmd.equals("selection-style")) {
        setSelectionStyle(actionRequest,preferences);
      }
      if (SessionErrors.isEmpty(actionRequest)) {
        preferences.store();
        SessionMessages.add(actionRequest,portletConfig.getPortletName() + ".doConfigure");
      }
      actionResponse.sendRedirect(ParamUtil.getString(actionRequest,"redirect"));
    }
 catch (    Exception e) {
      if (e instanceof AssetTagException) {
        SessionErrors.add(actionRequest,e.getClass().getName(),e);
      }
 else {
        throw e;
      }
    }
  }
}
