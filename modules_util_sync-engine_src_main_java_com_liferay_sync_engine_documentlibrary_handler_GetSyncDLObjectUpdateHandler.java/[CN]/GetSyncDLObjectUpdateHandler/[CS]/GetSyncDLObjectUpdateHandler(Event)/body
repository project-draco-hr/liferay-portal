{
  super(event);
  GetSyncContextEvent getSyncContextEvent=new GetSyncContextEvent(getSyncAccountId(),Collections.<String,Object>emptyMap()){
    @Override public void executePost(    String urlPath,    Map<String,Object> parameters) throws Exception {
      SyncAccount syncAccount=SyncAccountService.fetchSyncAccount(getSyncAccountId());
      Session session=SessionManager.getSession(getSyncAccountId(),true);
      HttpResponse httpResponse=session.execute(new HttpPost(syncAccount.getUrl() + "/api/jsonws" + urlPath));
      StatusLine statusLine=httpResponse.getStatusLine();
      if (statusLine.getStatusCode() != HttpStatus.SC_OK) {
        doCancel();
        return;
      }
      Handler<Void> handler=event.getHandler();
      String response=getResponseString(httpResponse);
      if (handler.handlePortalException(getException(response))) {
        doCancel();
        return;
      }
      if (!_firedProcessingState) {
        SyncEngineUtil.fireSyncEngineStateChanged(getSyncAccountId(),SyncEngineUtil.SYNC_ENGINE_STATE_PROCESSING);
        _firedProcessingState=true;
      }
    }
    @Override public void run(){
      SyncAccount syncAccount=SyncAccountService.fetchSyncAccount(getSyncAccountId());
      SyncSite syncSite=SyncSiteService.fetchSyncSite((Long)event.getParameterValue("repositoryId"),getSyncAccountId());
      if ((syncAccount == null) || (syncAccount.getState() != SyncAccount.STATE_CONNECTED) || (syncSite == null)|| !syncSite.isActive()) {
        doCancel();
        return;
      }
      super.run();
    }
    protected void doCancel(){
      if (_firedProcessingState) {
        SyncEngineUtil.fireSyncEngineStateChanged(getSyncAccountId(),SyncEngineUtil.SYNC_ENGINE_STATE_PROCESSED);
        _firedProcessingState=false;
      }
      event.cancel();
      _scheduledFuture.cancel(true);
    }
    private boolean _firedProcessingState;
  }
;
  _scheduledFuture=_scheduledExecutorService.scheduleWithFixedDelay(getSyncContextEvent,10,5,TimeUnit.SECONDS);
}
