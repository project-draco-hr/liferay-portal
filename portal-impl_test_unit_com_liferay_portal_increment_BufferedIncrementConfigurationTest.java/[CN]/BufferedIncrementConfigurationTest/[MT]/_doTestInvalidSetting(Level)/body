{
  Map<String,String> props=new HashMap<String,String>();
  props.put(PropsKeys.BUFFERED_INCREMENT_ENABLED,"false");
  if (level == Level.OFF) {
    props.put(PropsKeys.BUFFERED_INCREMENT_STANDBY_QUEUE_THRESHOLD,"1");
    props.put(PropsKeys.BUFFERED_INCREMENT_STANDBY_TIME_UPPER_LIMIT,"-1");
  }
 else {
    props.put(PropsKeys.BUFFERED_INCREMENT_STANDBY_QUEUE_THRESHOLD,"-1");
    props.put(PropsKeys.BUFFERED_INCREMENT_STANDBY_TIME_UPPER_LIMIT,"1");
  }
  props.put(PropsKeys.BUFFERED_INCREMENT_THREADPOOL_KEEP_ALIVE_TIME,"-3");
  props.put(PropsKeys.BUFFERED_INCREMENT_THREADPOOL_MAX_SIZE,"-4");
  PropsUtilAdvice.setProps(props);
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(BufferedIncrementConfiguration.class.getName(),level);
  BufferedIncrementConfiguration bufferedIncrementConfiguration=new BufferedIncrementConfiguration(StringPool.BLANK);
  Assert.assertFalse(bufferedIncrementConfiguration.isEnabled());
  if (level == Level.OFF) {
    Assert.assertEquals(1,bufferedIncrementConfiguration.getStandbyQueueThreshold());
    Assert.assertEquals(-1,bufferedIncrementConfiguration.getStandbyTimeUpperLimit());
  }
 else {
    Assert.assertEquals(-1,bufferedIncrementConfiguration.getStandbyQueueThreshold());
    Assert.assertEquals(1,bufferedIncrementConfiguration.getStandbyTimeUpperLimit());
  }
  Assert.assertEquals(0,bufferedIncrementConfiguration.getThreadpoolKeepAliveTime());
  Assert.assertEquals(1,bufferedIncrementConfiguration.getThreadpoolMaxSize());
  Assert.assertFalse(bufferedIncrementConfiguration.isStandbyEnabled());
  try {
    bufferedIncrementConfiguration.calculateStandbyTime(0);
  }
 catch (  IllegalStateException ise) {
    Assert.assertEquals("Standby is disabled",ise.getMessage());
  }
  return logRecords;
}
