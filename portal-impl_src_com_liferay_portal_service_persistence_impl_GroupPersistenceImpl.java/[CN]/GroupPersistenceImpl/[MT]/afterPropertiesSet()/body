{
  String[] listenerClassNames=StringUtil.split(GetterUtil.getString(com.liferay.portal.util.PropsUtil.get("value.object.listener.com.liferay.portal.model.Group")));
  if (listenerClassNames.length > 0) {
    try {
      List<ModelListener<Group>> listenersList=new ArrayList<ModelListener<Group>>();
      for (      String listenerClassName : listenerClassNames) {
        listenersList.add((ModelListener<Group>)InstanceFactory.newInstance(getClassLoader(),listenerClassName));
      }
      listeners=listenersList.toArray(new ModelListener[listenersList.size()]);
    }
 catch (    Exception e) {
      _log.error(e);
    }
  }
  groupToOrganizationTableMapper=TableMapperFactory.getTableMapper("Groups_Orgs","groupId","organizationId",this,organizationPersistence);
  groupToRoleTableMapper=TableMapperFactory.getTableMapper("Groups_Roles","groupId","roleId",this,rolePersistence);
  groupToUserGroupTableMapper=TableMapperFactory.getTableMapper("Groups_UserGroups","groupId","userGroupId",this,userGroupPersistence);
  groupToUserTableMapper=TableMapperFactory.getTableMapper("Users_Groups","groupId","userId",this,userPersistence);
}
