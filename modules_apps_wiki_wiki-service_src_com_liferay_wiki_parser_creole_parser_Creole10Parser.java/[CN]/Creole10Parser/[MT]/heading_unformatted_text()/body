{
  StringBundler text=new StringBundler();
  Token c=null;
  try {
{
      int cnt66=0;
      loop66:       do {
        int alt66=2;
switch (input.LA(1)) {
case STAR:
{
            alt66=1;
          }
        break;
case BLANKS:
{
        alt66=1;
      }
    break;
case ITAL:
{
    alt66=1;
  }
break;
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case PIPE:
case EXTENSION:
case FORCED_LINEBREAK:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case BRACE_CLOSE:
case COLON_SLASH:
case SLASH:
case INSIGNIFICANT_CHAR:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
{
alt66=1;
}
break;
}
switch (alt66) {
case 1:
{
c=(Token)input.LT(1);
if ((input.LA(1) >= FORCED_END_OF_LINE && input.LA(1) <= WIKI) || (input.LA(1) >= POUND && input.LA(1) <= STAR) || (input.LA(1) >= PIPE && input.LA(1) <= ITAL)|| (input.LA(1) >= EXTENSION && input.LA(1) <= FORCED_LINEBREAK)|| (input.LA(1) >= NOWIKI_BLOCK_CLOSE && input.LA(1) <= 80)) {
input.consume();
errorRecovery=false;
failed=false;
}
 else {
if (backtracking > 0) {
failed=true;
return text;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
recoverFromMismatchedSet(input,mse,FOLLOW_set_in_heading_unformatted_text1808);
throw mse;
}
if (backtracking == 0) {
text.append(c.getText());
}
}
break;
default :
if (cnt66 >= 1) break loop66;
if (backtracking > 0) {
failed=true;
return text;
}
EarlyExitException eee=new EarlyExitException(66,input);
throw eee;
}
cnt66++;
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return text;
}
