{
  Group group=userSearchFixture.addGroup();
  final String keyword=RandomTestUtil.randomString();
  userSearchFixture.addUser(group,keyword);
  final String configRange1="[11110101010101 TO 19990101010101]";
  final String configRange2="[19990202020202 TO 22220202020202]";
  final String customRange="[11110101010101 TO 22220202020202]";
  final Collection<String> frequencies=toEntryStrings(new HashMap<String,Integer>(){
{
      put(configRange1,0);
      put(configRange2,1);
      put(customRange,1);
    }
  }
);
  IdempotentRetryAssert.retryAssert(10,TimeUnit.SECONDS,new Callable<Void>(){
    @Override public Void call() throws Exception {
      SearchContext searchContext=getSearchContext(keyword);
      ModifiedFacet modifiedFacet=new ModifiedFacet(searchContext);
      setConfigurationRanges(modifiedFacet,configRange1,configRange2);
      setCustomRange(modifiedFacet,searchContext,customRange);
      searchContext.addFacet(modifiedFacet);
      assertRanges(frequencies,modifiedFacet,searchContext);
      return null;
    }
  }
);
}
