{
  String path=GetterUtil.getString(super.processPath(request,response));
  HttpSession session=request.getSession();
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  UserTracker userTracker=LiveUsers.getUserTracker(themeDisplay.getCompanyId(),session.getId());
  if ((userTracker != null) && !path.equals(_PATH_C) && !path.contains(_PATH_J_SECURITY_CHECK)&& !path.contains(_PATH_PORTAL_PROTECTED)&& !_trackerIgnorePaths.contains(path)) {
    String fullPath=null;
    try {
      if (PropsValues.SESSION_TRACKER_FRIENDLY_PATHS_ENABLED) {
        fullPath=getFriendlyTrackerPath(path,themeDisplay,request);
      }
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
    String fullPathWithoutQueryString=fullPath;
    if (Validator.isNull(fullPath)) {
      String queryString=request.getQueryString();
      fullPathWithoutQueryString=path;
      if (Validator.isNotNull(queryString)) {
        fullPath=path.concat(StringPool.QUESTION).concat(queryString);
      }
 else {
        fullPath=path;
      }
    }
    int pos=fullPathWithoutQueryString.indexOf(StringPool.QUESTION);
    if (pos != -1) {
      fullPathWithoutQueryString=fullPathWithoutQueryString.substring(0,pos);
    }
    if (!_trackerIgnorePaths.contains(fullPathWithoutQueryString)) {
      UserTrackerPath userTrackerPath=UserTrackerPathUtil.create(0);
      userTrackerPath.setUserTrackerId(userTracker.getUserTrackerId());
      userTrackerPath.setPath(fullPath);
      userTrackerPath.setPathDate(new Date());
      userTracker.addPath(userTrackerPath);
    }
  }
  String remoteUser=request.getRemoteUser();
  User user=null;
  try {
    user=PortalUtil.getUser(request);
  }
 catch (  Exception e) {
  }
  if (_lastPaths.contains(path) && !_trackerIgnorePaths.contains(path)) {
    boolean saveLastPath=ParamUtil.getBoolean(request,"saveLastPath",true);
    if (themeDisplay.isLifecycleResource() || themeDisplay.isStateExclusive() || themeDisplay.isStatePopUp()|| !StringUtil.equalsIgnoreCase(request.getMethod(),HttpMethods.GET)) {
      saveLastPath=false;
    }
    if (saveLastPath) {
      LastPath lastPath=(LastPath)request.getAttribute(WebKeys.LAST_PATH);
      if (lastPath == null) {
        lastPath=new LastPath(themeDisplay.getPathMain(),path,HttpUtil.parameterMapToString(request.getParameterMap()));
      }
      session.setAttribute(WebKeys.LAST_PATH,lastPath);
    }
  }
  if (PropsValues.SETUP_WIZARD_ENABLED) {
    if (!path.equals(_PATH_PORTAL_LICENSE) && !path.equals(_PATH_PORTAL_STATUS)) {
      return _PATH_PORTAL_SETUP_WIZARD;
    }
  }
 else   if (path.equals(_PATH_PORTAL_SETUP_WIZARD)) {
    return _PATH_PORTAL_LAYOUT;
  }
  if (((remoteUser != null) || (user != null)) && path.equals(_PATH_PORTAL_LOGOUT)) {
    return path;
  }
  if (((remoteUser != null) || (user != null)) && (path.equals(_PATH_PORTAL_EXPIRE_SESSION) || path.equals(_PATH_PORTAL_EXTEND_SESSION))) {
    return path;
  }
  if (((remoteUser != null) || (user != null)) && path.equals(_PATH_PORTAL_UPDATE_TERMS_OF_USE)) {
    return path;
  }
  if ((remoteUser != null) && (user == null)) {
    return _PATH_PORTAL_LOGOUT;
  }
  if ((user != null) && !user.isActive()) {
    SessionErrors.add(request,UserActiveException.class.getName());
    return _PATH_PORTAL_ERROR;
  }
  long companyId=PortalUtil.getCompanyId(request);
  String portletId=ParamUtil.getString(request,"p_p_id");
  if (!path.equals(_PATH_PORTAL_JSON_SERVICE) && !path.equals(_PATH_PORTAL_RENDER_PORTLET) && !ParamUtil.getBoolean(request,"wsrp")&& !themeDisplay.isImpersonated()&& !InterruptedPortletRequestWhitelistUtil.isPortletInvocationWhitelisted(companyId,portletId,PortalUtil.getStrutsAction(request))) {
    if ((user != null) && !user.isTermsOfUseComplete()) {
      return _PATH_PORTAL_TERMS_OF_USE;
    }
    if ((user != null) && !user.isEmailAddressVerificationComplete()) {
      if (path.equals(_PATH_PORTAL_UPDATE_EMAIL_ADDRESS)) {
        return _PATH_PORTAL_UPDATE_EMAIL_ADDRESS;
      }
      return _PATH_PORTAL_VERIFY_EMAIL_ADDRESS;
    }
    if ((user != null) && user.isPasswordReset()) {
      try {
        PasswordPolicy passwordPolicy=user.getPasswordPolicy();
        if ((passwordPolicy == null) || passwordPolicy.isChangeRequired()) {
          return _PATH_PORTAL_UPDATE_PASSWORD;
        }
      }
 catch (      Exception e) {
        _log.error(e,e);
        return _PATH_PORTAL_UPDATE_PASSWORD;
      }
    }
 else     if ((user != null) && !user.isPasswordReset() && path.equals(_PATH_PORTAL_UPDATE_PASSWORD)) {
      response.sendRedirect(themeDisplay.getPathMain());
      return null;
    }
    if ((user != null) && !user.isEmailAddressComplete()) {
      return _PATH_PORTAL_UPDATE_EMAIL_ADDRESS;
    }
    if ((user != null) && !user.isDefaultUser() && !user.isReminderQueryComplete()) {
      return _PATH_PORTAL_UPDATE_REMINDER_QUERY;
    }
  }
  if (!isPublicPath(path)) {
    if (user == null) {
      SessionErrors.add(request,PrincipalException.class.getName());
      return _PATH_PORTAL_LOGIN;
    }
  }
  ActionMapping actionMapping=(ActionMapping)moduleConfig.findActionConfig(path);
  if (actionMapping == null) {
    Action strutsAction=StrutsActionRegistryUtil.getAction(path);
    if (strutsAction == null) {
      return null;
    }
  }
 else {
    path=actionMapping.getPath();
  }
  if (isPortletPath(path)) {
    try {
      Portlet portlet=null;
      if (Validator.isNotNull(portletId)) {
        portlet=PortletLocalServiceUtil.getPortletById(companyId,portletId);
      }
      if (portlet == null) {
        String strutsPath=path.substring(1,path.lastIndexOf(CharPool.SLASH));
        portlet=PortletLocalServiceUtil.getPortletByStrutsPath(companyId,strutsPath);
      }
      if ((portlet != null) && portlet.isActive()) {
        defineObjects(request,response,portlet);
      }
    }
 catch (    Exception e) {
      request.setAttribute(PageContext.EXCEPTION,e);
      path=_PATH_COMMON_ERROR;
    }
  }
  if (SessionErrors.contains(request,LayoutPermissionException.class.getName())) {
    return _PATH_PORTAL_ERROR;
  }
  return path;
}
