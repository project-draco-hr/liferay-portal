{
  String path=actionMapping.getPath();
  if (isPublicPath(path)) {
    return true;
  }
  boolean authorized=true;
  User user=null;
  try {
    user=PortalUtil.getUser(request);
  }
 catch (  Exception e) {
  }
  if ((user != null) && isPortletPath(path)) {
    try {
      if (path.equals(_PATH_PORTAL_LOGOUT)) {
        return true;
      }
      Portlet portlet=null;
      String portletId=ParamUtil.getString(request,"p_p_id");
      if (Validator.isNotNull(portletId)) {
        portlet=PortletLocalServiceUtil.getPortletById(user.getCompanyId(),portletId);
      }
      String strutsPath=path.substring(1,path.lastIndexOf(CharPool.SLASH));
      if (portlet != null) {
        if (!strutsPath.equals(portlet.getStrutsPath())) {
          throw new PrincipalException();
        }
      }
 else {
        portlet=PortletLocalServiceUtil.getPortletByStrutsPath(user.getCompanyId(),strutsPath);
      }
      if ((portlet != null) && portlet.isActive() && !portlet.isSystem()) {
        ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
        Layout layout=themeDisplay.getLayout();
        PermissionChecker permissionChecker=themeDisplay.getPermissionChecker();
        if (!PortletPermissionUtil.contains(permissionChecker,layout,portlet,ActionKeys.VIEW)) {
          throw new PrincipalException.MustHavePermission(permissionChecker,Portlet.class.getName(),portlet.getPortletId(),ActionKeys.VIEW);
        }
      }
 else       if ((portlet != null) && !portlet.isActive()) {
        SessionErrors.add(request,PortletActiveException.class.getName());
        authorized=false;
      }
    }
 catch (    Exception e) {
      SessionErrors.add(request,PrincipalException.class.getName());
      authorized=false;
    }
  }
  if (!authorized) {
    ForwardConfig forwardConfig=actionMapping.findForward(_PATH_PORTAL_ERROR);
    processForwardConfig(request,response,forwardConfig);
    return false;
  }
 else {
    return true;
  }
}
