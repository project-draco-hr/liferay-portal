{
  CoalescedPipe<String> coalescedPipe=new CoalescedPipe<String>();
  boolean hasException=false;
  try {
    coalescedPipe.put(null);
  }
 catch (  NullPointerException ex) {
    hasException=true;
  }
  assertTrue(hasException);
  coalescedPipe.put("test1");
  assertEquals(1,coalescedPipe.pendingCount());
  assertEquals(0,coalescedPipe.coalescedCount());
  coalescedPipe.put("test2");
  assertEquals(2,coalescedPipe.pendingCount());
  assertEquals(0,coalescedPipe.coalescedCount());
  coalescedPipe.put("test1");
  assertEquals(2,coalescedPipe.pendingCount());
  assertEquals(1,coalescedPipe.coalescedCount());
  coalescedPipe.put("test2");
  assertEquals(2,coalescedPipe.pendingCount());
  assertEquals(2,coalescedPipe.coalescedCount());
  coalescedPipe=new CoalescedPipe<String>(new Comparator<String>(){
    public int compare(    String o1,    String o2){
      return o1.length() - o2.length();
    }
  }
);
  hasException=false;
  try {
    coalescedPipe.put(null);
  }
 catch (  NullPointerException ex) {
    hasException=true;
  }
  assertTrue(hasException);
  coalescedPipe.put("a");
  assertEquals(1,coalescedPipe.pendingCount());
  assertEquals(0,coalescedPipe.coalescedCount());
  coalescedPipe.put("ab");
  assertEquals(2,coalescedPipe.pendingCount());
  assertEquals(0,coalescedPipe.coalescedCount());
  coalescedPipe.put("c");
  assertEquals(2,coalescedPipe.pendingCount());
  assertEquals(1,coalescedPipe.coalescedCount());
  coalescedPipe.put("cd");
  assertEquals(2,coalescedPipe.pendingCount());
  assertEquals(2,coalescedPipe.coalescedCount());
}
