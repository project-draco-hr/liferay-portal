{
  org.jgroups.Address sourceAddress=message.getSrc();
  org.jgroups.Address localAddress=_channel.getLocalAddress();
  Object obj=message.getObject();
  if (obj == null) {
    if (_log.isWarnEnabled()) {
      _log.warn("Message content is null");
    }
    return;
  }
  if (localAddress.equals(sourceAddress) && ClusterExecutorUtil.isShortcutLocalMethod()) {
    return;
  }
  if (obj instanceof ClusterRequest) {
    ClusterRequest clusterRequest=(ClusterRequest)obj;
    ClusterResponse clusterResponse=new ClusterResponseImpl();
    clusterResponse.setMulticast(clusterRequest.isMulticast());
    clusterResponse.setUuid(clusterRequest.getUuid());
    Object payload=clusterRequest.getPayload();
    if (payload instanceof MethodWrapper) {
      MethodWrapper methodWrapper=(MethodWrapper)payload;
      try {
        Object returnValue=MethodInvoker.invoke(methodWrapper);
        if (returnValue instanceof Serializable) {
          clusterResponse.setResult(returnValue);
        }
 else         if (returnValue != null) {
          clusterResponse.setException(new ClusterException("Return value is not serializable"));
        }
      }
 catch (      Exception e) {
        clusterResponse.setException(e);
      }
    }
 else {
      clusterResponse.setException(new ClusterException("Payload is not of type " + MethodWrapper.class.getName()));
    }
    try {
      _channel.send(sourceAddress,localAddress,clusterResponse);
    }
 catch (    ChannelException ce) {
      _log.error("Unable to send response message " + clusterResponse,ce);
    }
  }
 else   if (obj instanceof ClusterResponse) {
    ClusterResponse clusterResponse=(ClusterResponse)obj;
    String uuid=clusterResponse.getUuid();
    if (clusterResponse.isMulticast() && _multicastResultMap.containsKey(uuid)) {
      Map<Address,Future<?>> results=_multicastResultMap.get(uuid);
      Address address=new AddressImpl(sourceAddress);
      if (results.containsKey(address)) {
        FutureResult<Object> futureResult=(FutureResult<Object>)results.get(address);
        if (clusterResponse.hasException()) {
          futureResult.setException(clusterResponse.getException());
        }
 else {
          futureResult.setResult(clusterResponse.getResult());
        }
      }
 else {
        _log.error("New node coming from " + sourceAddress);
      }
    }
 else     if (_unicastResultMap.containsKey(uuid)) {
      FutureResult<Object> futureResult=(FutureResult<Object>)_unicastResultMap.get(uuid);
      if (clusterResponse.hasException()) {
        futureResult.setException(clusterResponse.getException());
      }
 else {
        futureResult.setResult(clusterResponse.getResult());
      }
    }
 else {
      _log.error("Unknow UUID " + uuid + " from "+ sourceAddress);
    }
  }
 else {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to process message content of type " + obj.getClass().getName());
    }
    return;
  }
}
