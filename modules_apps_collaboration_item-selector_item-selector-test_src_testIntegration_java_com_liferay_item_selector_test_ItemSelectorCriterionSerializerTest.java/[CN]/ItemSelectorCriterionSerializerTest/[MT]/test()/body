{
  TestItemSelectorView testItemSelectorView=new TestItemSelectorView();
  ServiceRegistration<ItemSelectorView> itemSelectorViewServiceRegistration=registerItemSelectorView(testItemSelectorView);
  List serviceRegistrations=new ArrayList<>();
  serviceRegistrations.add(itemSelectorViewServiceRegistration);
  try {
    ItemSelectorCriterion itemSelectorCriterion=new TestItemSelectorCriterion();
    List<ItemSelectorReturnType> desiredItemSelectorReturnTypes=new ArrayList<>();
    desiredItemSelectorReturnTypes.add(new TestItemSelectorReturnType());
    itemSelectorCriterion.setDesiredItemSelectorReturnTypes(desiredItemSelectorReturnTypes);
    String itemSelectorJson=_itemSelectorCriterionSerializer.serialize(itemSelectorCriterion);
    ItemSelectorCriterion deserializedItemSelectorCriterion=_itemSelectorCriterionSerializer.deserialize(itemSelectorCriterion.getClass(),itemSelectorJson);
    List<ItemSelectorReturnType> deserializedDesiredItemSelectorReturnTypes=deserializedItemSelectorCriterion.getDesiredItemSelectorReturnTypes();
    Assert.assertEquals(1,deserializedDesiredItemSelectorReturnTypes.size());
    ItemSelectorReturnType deserializedItemSelectorReturnType=deserializedDesiredItemSelectorReturnTypes.get(0);
    Class<? extends ItemSelectorReturnType> deserializedItemSelectorReturnTypeClass=deserializedItemSelectorReturnType.getClass();
    Class<TestItemSelectorReturnType> expectedItemSelectorReturnTypeClass=TestItemSelectorReturnType.class;
    Assert.assertEquals(expectedItemSelectorReturnTypeClass.getName(),deserializedItemSelectorReturnTypeClass.getName());
  }
  finally {
    _unregister(serviceRegistrations);
  }
}
