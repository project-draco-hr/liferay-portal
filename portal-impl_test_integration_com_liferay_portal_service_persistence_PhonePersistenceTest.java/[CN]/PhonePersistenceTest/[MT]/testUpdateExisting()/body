{
  long pk=RandomTestUtil.nextLong();
  Phone newPhone=_persistence.create(pk);
  newPhone.setMvccVersion(RandomTestUtil.nextLong());
  newPhone.setUuid(RandomTestUtil.randomString());
  newPhone.setCompanyId(RandomTestUtil.nextLong());
  newPhone.setUserId(RandomTestUtil.nextLong());
  newPhone.setUserName(RandomTestUtil.randomString());
  newPhone.setCreateDate(RandomTestUtil.nextDate());
  newPhone.setModifiedDate(RandomTestUtil.nextDate());
  newPhone.setClassNameId(RandomTestUtil.nextLong());
  newPhone.setClassPK(RandomTestUtil.nextLong());
  newPhone.setNumber(RandomTestUtil.randomString());
  newPhone.setExtension(RandomTestUtil.randomString());
  newPhone.setTypeId(RandomTestUtil.nextInt());
  newPhone.setPrimary(RandomTestUtil.randomBoolean());
  _persistence.update(newPhone);
  Phone existingPhone=_persistence.findByPrimaryKey(newPhone.getPrimaryKey());
  Assert.assertEquals(existingPhone.getMvccVersion(),newPhone.getMvccVersion());
  Assert.assertEquals(existingPhone.getUuid(),newPhone.getUuid());
  Assert.assertEquals(existingPhone.getPhoneId(),newPhone.getPhoneId());
  Assert.assertEquals(existingPhone.getCompanyId(),newPhone.getCompanyId());
  Assert.assertEquals(existingPhone.getUserId(),newPhone.getUserId());
  Assert.assertEquals(existingPhone.getUserName(),newPhone.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingPhone.getCreateDate()),Time.getShortTimestamp(newPhone.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingPhone.getModifiedDate()),Time.getShortTimestamp(newPhone.getModifiedDate()));
  Assert.assertEquals(existingPhone.getClassNameId(),newPhone.getClassNameId());
  Assert.assertEquals(existingPhone.getClassPK(),newPhone.getClassPK());
  Assert.assertEquals(existingPhone.getNumber(),newPhone.getNumber());
  Assert.assertEquals(existingPhone.getExtension(),newPhone.getExtension());
  Assert.assertEquals(existingPhone.getTypeId(),newPhone.getTypeId());
  Assert.assertEquals(existingPhone.getPrimary(),newPhone.getPrimary());
}
