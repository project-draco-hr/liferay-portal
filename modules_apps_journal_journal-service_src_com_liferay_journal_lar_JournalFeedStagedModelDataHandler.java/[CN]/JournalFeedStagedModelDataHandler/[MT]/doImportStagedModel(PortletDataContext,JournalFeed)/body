{
  long userId=portletDataContext.getUserId(feed.getUserUuid());
  JournalCreationStrategy creationStrategy=JournalCreationStrategyFactory.getInstance();
  long authorId=creationStrategy.getAuthorUserId(portletDataContext,feed);
  if (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {
    userId=authorId;
  }
  Group group=GroupLocalServiceUtil.getGroup(portletDataContext.getScopeGroupId());
  String newGroupFriendlyURL=group.getFriendlyURL().substring(1);
  String[] friendlyURLParts=StringUtil.split(feed.getTargetLayoutFriendlyUrl(),'/');
  String oldGroupFriendlyURL=friendlyURLParts[2];
  if (oldGroupFriendlyURL.equals(ExportImportHelper.DATA_HANDLER_GROUP_FRIENDLY_URL)) {
    feed.setTargetLayoutFriendlyUrl(StringUtil.replace(feed.getTargetLayoutFriendlyUrl(),ExportImportHelper.DATA_HANDLER_GROUP_FRIENDLY_URL,newGroupFriendlyURL));
  }
  String feedId=feed.getFeedId();
  boolean autoFeedId=false;
  if (Validator.isNumber(feedId) || (JournalFeedLocalServiceUtil.fetchFeed(portletDataContext.getScopeGroupId(),feedId) != null)) {
    autoFeedId=true;
  }
  Map<String,String> ddmStructureKeys=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(DDMStructure.class + ".ddmStructureKey");
  String parentDDMStructureKey=MapUtil.getString(ddmStructureKeys,feed.getDDMStructureKey(),feed.getDDMStructureKey());
  Map<String,String> ddmTemplateKeys=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(DDMTemplate.class + ".ddmTemplateKey");
  String parentDDMTemplateKey=MapUtil.getString(ddmTemplateKeys,feed.getDDMTemplateKey(),feed.getDDMTemplateKey());
  String parentRendererDDMTemplateKey=MapUtil.getString(ddmTemplateKeys,feed.getDDMRendererTemplateKey(),feed.getDDMRendererTemplateKey());
  ServiceContext serviceContext=portletDataContext.createServiceContext(feed);
  boolean addGroupPermissions=creationStrategy.addGroupPermissions(portletDataContext,feed);
  serviceContext.setAddGroupPermissions(addGroupPermissions);
  boolean addGuestPermissions=creationStrategy.addGuestPermissions(portletDataContext,feed);
  serviceContext.setAddGuestPermissions(addGuestPermissions);
  JournalFeed importedFeed=null;
  try {
    if (portletDataContext.isDataStrategyMirror()) {
      JournalFeed existingFeed=fetchStagedModelByUuidAndGroupId(feed.getUuid(),portletDataContext.getScopeGroupId());
      if (existingFeed == null) {
        serviceContext.setUuid(feed.getUuid());
        importedFeed=JournalFeedLocalServiceUtil.addFeed(userId,portletDataContext.getScopeGroupId(),feedId,autoFeedId,feed.getName(),feed.getDescription(),parentDDMStructureKey,parentDDMTemplateKey,parentRendererDDMTemplateKey,feed.getDelta(),feed.getOrderByCol(),feed.getOrderByType(),feed.getTargetLayoutFriendlyUrl(),feed.getTargetPortletId(),feed.getContentField(),feed.getFeedFormat(),feed.getFeedVersion(),serviceContext);
      }
 else {
        importedFeed=JournalFeedLocalServiceUtil.updateFeed(existingFeed.getGroupId(),existingFeed.getFeedId(),feed.getName(),feed.getDescription(),parentDDMStructureKey,parentDDMTemplateKey,parentRendererDDMTemplateKey,feed.getDelta(),feed.getOrderByCol(),feed.getOrderByType(),feed.getTargetLayoutFriendlyUrl(),feed.getTargetPortletId(),feed.getContentField(),feed.getFeedFormat(),feed.getFeedVersion(),serviceContext);
      }
    }
 else {
      importedFeed=JournalFeedLocalServiceUtil.addFeed(userId,portletDataContext.getScopeGroupId(),feedId,autoFeedId,feed.getName(),feed.getDescription(),parentDDMStructureKey,parentDDMTemplateKey,parentRendererDDMTemplateKey,feed.getDelta(),feed.getOrderByCol(),feed.getOrderByType(),feed.getTargetLayoutFriendlyUrl(),feed.getTargetPortletId(),feed.getContentField(),feed.getFeedFormat(),feed.getFeedVersion(),serviceContext);
    }
    portletDataContext.importClassedModel(feed,importedFeed);
    if (!feedId.equals(importedFeed.getFeedId())) {
      if (_log.isWarnEnabled()) {
        StringBundler sb=new StringBundler(5);
        sb.append("A feed with the ID ");
        sb.append(feedId);
        sb.append(" already exists. The new generated ID is ");
        sb.append(importedFeed.getFeedId());
        sb.append(".");
        _log.warn(sb.toString());
      }
    }
  }
 catch (  FeedTargetLayoutFriendlyUrlException ftlfurle) {
    if (_log.isWarnEnabled()) {
      StringBundler sb=new StringBundler(7);
      sb.append("A feed with the ID ");
      sb.append(feedId);
      sb.append(" cannot be imported because layout with friendly ");
      sb.append("URL ");
      sb.append(feed.getTargetLayoutFriendlyUrl());
      sb.append(" does not exist: ");
      sb.append(ftlfurle.getMessage());
      _log.warn(sb.toString());
    }
  }
}
