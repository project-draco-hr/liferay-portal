{
  if (_methodName0.equals(name) && Arrays.deepEquals(_methodParameterTypes0,parameterTypes)) {
    return UserThreadLocalServiceUtil.addUserThread((com.liferay.privatemessaging.model.UserThread)arguments[0]);
  }
  if (_methodName1.equals(name) && Arrays.deepEquals(_methodParameterTypes1,parameterTypes)) {
    return UserThreadLocalServiceUtil.createUserThread(((Long)arguments[0]).longValue());
  }
  if (_methodName2.equals(name) && Arrays.deepEquals(_methodParameterTypes2,parameterTypes)) {
    return UserThreadLocalServiceUtil.deleteUserThread(((Long)arguments[0]).longValue());
  }
  if (_methodName3.equals(name) && Arrays.deepEquals(_methodParameterTypes3,parameterTypes)) {
    return UserThreadLocalServiceUtil.deleteUserThread((com.liferay.privatemessaging.model.UserThread)arguments[0]);
  }
  if (_methodName4.equals(name) && Arrays.deepEquals(_methodParameterTypes4,parameterTypes)) {
    return UserThreadLocalServiceUtil.dynamicQuery();
  }
  if (_methodName5.equals(name) && Arrays.deepEquals(_methodParameterTypes5,parameterTypes)) {
    return UserThreadLocalServiceUtil.dynamicQuery((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0]);
  }
  if (_methodName6.equals(name) && Arrays.deepEquals(_methodParameterTypes6,parameterTypes)) {
    return UserThreadLocalServiceUtil.dynamicQuery((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0],((Integer)arguments[1]).intValue(),((Integer)arguments[2]).intValue());
  }
  if (_methodName7.equals(name) && Arrays.deepEquals(_methodParameterTypes7,parameterTypes)) {
    return UserThreadLocalServiceUtil.dynamicQuery((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0],((Integer)arguments[1]).intValue(),((Integer)arguments[2]).intValue(),(com.liferay.portal.kernel.util.OrderByComparator<?>)arguments[3]);
  }
  if (_methodName8.equals(name) && Arrays.deepEquals(_methodParameterTypes8,parameterTypes)) {
    return UserThreadLocalServiceUtil.dynamicQueryCount((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0]);
  }
  if (_methodName9.equals(name) && Arrays.deepEquals(_methodParameterTypes9,parameterTypes)) {
    return UserThreadLocalServiceUtil.dynamicQueryCount((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0],(com.liferay.portal.kernel.dao.orm.Projection)arguments[1]);
  }
  if (_methodName10.equals(name) && Arrays.deepEquals(_methodParameterTypes10,parameterTypes)) {
    return UserThreadLocalServiceUtil.fetchUserThread(((Long)arguments[0]).longValue());
  }
  if (_methodName11.equals(name) && Arrays.deepEquals(_methodParameterTypes11,parameterTypes)) {
    return UserThreadLocalServiceUtil.getUserThread(((Long)arguments[0]).longValue());
  }
  if (_methodName12.equals(name) && Arrays.deepEquals(_methodParameterTypes12,parameterTypes)) {
    return UserThreadLocalServiceUtil.getActionableDynamicQuery();
  }
  if (_methodName13.equals(name) && Arrays.deepEquals(_methodParameterTypes13,parameterTypes)) {
    return UserThreadLocalServiceUtil.getIndexableActionableDynamicQuery();
  }
  if (_methodName15.equals(name) && Arrays.deepEquals(_methodParameterTypes15,parameterTypes)) {
    return UserThreadLocalServiceUtil.deletePersistedModel((com.liferay.portal.kernel.model.PersistedModel)arguments[0]);
  }
  if (_methodName16.equals(name) && Arrays.deepEquals(_methodParameterTypes16,parameterTypes)) {
    return UserThreadLocalServiceUtil.getPersistedModel((java.io.Serializable)arguments[0]);
  }
  if (_methodName17.equals(name) && Arrays.deepEquals(_methodParameterTypes17,parameterTypes)) {
    return UserThreadLocalServiceUtil.getUserThreads(((Integer)arguments[0]).intValue(),((Integer)arguments[1]).intValue());
  }
  if (_methodName18.equals(name) && Arrays.deepEquals(_methodParameterTypes18,parameterTypes)) {
    return UserThreadLocalServiceUtil.getUserThreadsCount();
  }
  if (_methodName19.equals(name) && Arrays.deepEquals(_methodParameterTypes19,parameterTypes)) {
    return UserThreadLocalServiceUtil.updateUserThread((com.liferay.privatemessaging.model.UserThread)arguments[0]);
  }
  if (_methodName38.equals(name) && Arrays.deepEquals(_methodParameterTypes38,parameterTypes)) {
    return UserThreadLocalServiceUtil.getOSGiServiceIdentifier();
  }
  if (_methodName43.equals(name) && Arrays.deepEquals(_methodParameterTypes43,parameterTypes)) {
    return UserThreadLocalServiceUtil.addPrivateMessage(((Long)arguments[0]).longValue(),((Long)arguments[1]).longValue(),(java.lang.String)arguments[2],(java.lang.String)arguments[3],(java.lang.String)arguments[4],(java.util.List<com.liferay.portal.kernel.util.ObjectValuePair<java.lang.String,java.io.InputStream>>)arguments[5],(com.liferay.portal.kernel.theme.ThemeDisplay)arguments[6]);
  }
  if (_methodName44.equals(name) && Arrays.deepEquals(_methodParameterTypes44,parameterTypes)) {
    return UserThreadLocalServiceUtil.addPrivateMessageBranch(((Long)arguments[0]).longValue(),((Long)arguments[1]).longValue(),(java.lang.String)arguments[2],(java.util.List<com.liferay.portal.kernel.util.ObjectValuePair<java.lang.String,java.io.InputStream>>)arguments[3],(com.liferay.portal.kernel.theme.ThemeDisplay)arguments[4]);
  }
  if (_methodName45.equals(name) && Arrays.deepEquals(_methodParameterTypes45,parameterTypes)) {
    UserThreadLocalServiceUtil.addUserThread(((Long)arguments[0]).longValue(),((Long)arguments[1]).longValue(),((Long)arguments[2]).longValue(),((Boolean)arguments[3]).booleanValue(),((Boolean)arguments[4]).booleanValue());
    return null;
  }
  if (_methodName46.equals(name) && Arrays.deepEquals(_methodParameterTypes46,parameterTypes)) {
    UserThreadLocalServiceUtil.deleteUser(((Long)arguments[0]).longValue());
    return null;
  }
  if (_methodName47.equals(name) && Arrays.deepEquals(_methodParameterTypes47,parameterTypes)) {
    UserThreadLocalServiceUtil.deleteUserThread(((Long)arguments[0]).longValue(),((Long)arguments[1]).longValue());
    return null;
  }
  if (_methodName48.equals(name) && Arrays.deepEquals(_methodParameterTypes48,parameterTypes)) {
    return UserThreadLocalServiceUtil.fetchUserThread(((Long)arguments[0]).longValue(),((Long)arguments[1]).longValue());
  }
  if (_methodName49.equals(name) && Arrays.deepEquals(_methodParameterTypes49,parameterTypes)) {
    return UserThreadLocalServiceUtil.getMBThreadUserThreads(((Long)arguments[0]).longValue());
  }
  if (_methodName50.equals(name) && Arrays.deepEquals(_methodParameterTypes50,parameterTypes)) {
    return UserThreadLocalServiceUtil.getUserThread(((Long)arguments[0]).longValue(),((Long)arguments[1]).longValue());
  }
  if (_methodName51.equals(name) && Arrays.deepEquals(_methodParameterTypes51,parameterTypes)) {
    return UserThreadLocalServiceUtil.getUserUserThreadCount(((Long)arguments[0]).longValue(),((Boolean)arguments[1]).booleanValue());
  }
  if (_methodName52.equals(name) && Arrays.deepEquals(_methodParameterTypes52,parameterTypes)) {
    return UserThreadLocalServiceUtil.getUserUserThreadCount(((Long)arguments[0]).longValue(),((Boolean)arguments[1]).booleanValue(),((Boolean)arguments[2]).booleanValue());
  }
  if (_methodName53.equals(name) && Arrays.deepEquals(_methodParameterTypes53,parameterTypes)) {
    return UserThreadLocalServiceUtil.getUserUserThreads(((Long)arguments[0]).longValue(),((Boolean)arguments[1]).booleanValue());
  }
  if (_methodName54.equals(name) && Arrays.deepEquals(_methodParameterTypes54,parameterTypes)) {
    return UserThreadLocalServiceUtil.getUserUserThreads(((Long)arguments[0]).longValue(),((Boolean)arguments[1]).booleanValue(),((Boolean)arguments[2]).booleanValue());
  }
  if (_methodName55.equals(name) && Arrays.deepEquals(_methodParameterTypes55,parameterTypes)) {
    return UserThreadLocalServiceUtil.getUserUserThreads(((Long)arguments[0]).longValue(),((Boolean)arguments[1]).booleanValue(),((Integer)arguments[2]).intValue(),((Integer)arguments[3]).intValue());
  }
  if (_methodName56.equals(name) && Arrays.deepEquals(_methodParameterTypes56,parameterTypes)) {
    UserThreadLocalServiceUtil.markUserThreadAsRead(((Long)arguments[0]).longValue(),((Long)arguments[1]).longValue());
    return null;
  }
  if (_methodName57.equals(name) && Arrays.deepEquals(_methodParameterTypes57,parameterTypes)) {
    UserThreadLocalServiceUtil.markUserThreadAsUnread(((Long)arguments[0]).longValue(),((Long)arguments[1]).longValue());
    return null;
  }
  if (_methodName58.equals(name) && Arrays.deepEquals(_methodParameterTypes58,parameterTypes)) {
    UserThreadLocalServiceUtil.updateUserName((com.liferay.portal.kernel.model.User)arguments[0]);
    return null;
  }
  throw new UnsupportedOperationException();
}
