{
  String protocol=resourceURL.getProtocol();
  String className=getClassName(resourceName);
  if (protocol.equals("bundle") || protocol.equals("bundleresource")) {
    try {
      return new BundleJavaFileObject(resourceURL.toURI(),className,resourceURL);
    }
 catch (    URISyntaxException urise) {
      if (_verbose) {
        _logger.log(Logger.LOG_ERROR,urise.getMessage(),urise);
      }
    }
  }
 else   if (protocol.equals("jar")) {
    try {
      JarURLConnection jarUrlConnection=(JarURLConnection)resourceURL.openConnection();
      URL url=jarUrlConnection.getJarFileURL();
      return new JarJavaFileObject(url.toURI(),className,resourceURL,resourceName);
    }
 catch (    Exception e) {
      if (_verbose) {
        _logger.log(Logger.LOG_ERROR,e.getMessage(),e);
      }
    }
  }
 else   if (protocol.equals("vfs")) {
    try {
      String filePath=resourceURL.getFile();
      int indexOf=filePath.indexOf(".jar") + 4;
      filePath=filePath.substring(0,indexOf) + "!" + filePath.substring(indexOf,filePath.length());
      File file=new File(filePath);
      URI uri=file.toURI();
      return new JarJavaFileObject(uri,className,new URL("jar:" + uri.toString()),resourceName);
    }
 catch (    MalformedURLException murie) {
      if (_verbose) {
        _logger.log(Logger.LOG_ERROR,murie.getMessage(),murie);
      }
    }
  }
  return null;
}
