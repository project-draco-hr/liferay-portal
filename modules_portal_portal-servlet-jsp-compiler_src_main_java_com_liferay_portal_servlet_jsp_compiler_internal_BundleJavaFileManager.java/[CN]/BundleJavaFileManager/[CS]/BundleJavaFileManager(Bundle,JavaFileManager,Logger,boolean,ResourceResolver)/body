{
  super(javaFileManager);
  _logger=logger;
  _verbose=verbose;
  _resourceResolver=resourceResolver;
  _bundleWiring=bundle.adapt(BundleWiring.class);
  for (  BundleWire bundleWire : _bundleWiring.getRequiredWires(null)) {
    BundleWiring bundleWiring=bundleWire.getProviderWiring();
    if (!_bundleWirings.add(bundleWiring)) {
      continue;
    }
    Bundle currentBundle=bundleWiring.getBundle();
    if (currentBundle.getBundleId() == 0) {
      for (      BundleCapability bundleCapability : bundleWiring.getCapabilities(BundleRevision.PACKAGE_NAMESPACE)) {
        Map<String,Object> attributes=bundleCapability.getAttributes();
        Object packageName=attributes.get(BundleRevision.PACKAGE_NAMESPACE);
        if (packageName != null) {
          _systemPackageNames.add(packageName);
        }
      }
    }
  }
  if (_verbose) {
    StringBundler sb=new StringBundler(_bundleWirings.size() * 4 + 6);
    sb.append("BundleJavaFileManager for bundle: ");
    sb.append(bundle.getSymbolicName());
    sb.append(StringPool.DASH);
    sb.append(bundle.getVersion());
    sb.append(", dependent BundleWirings: {");
    for (    BundleWiring bundleWiring : _bundleWirings) {
      Bundle currentBundle=bundleWiring.getBundle();
      sb.append(currentBundle.getSymbolicName());
      sb.append(StringPool.DASH);
      sb.append(currentBundle.getVersion());
      sb.append(StringPool.COMMA_AND_SPACE);
    }
    if (!_bundleWirings.isEmpty()) {
      sb.setIndex(sb.index() - 1);
    }
    sb.append(StringPool.CLOSE_CURLY_BRACE);
    _logger.log(Logger.LOG_INFO,sb.toString());
  }
}
