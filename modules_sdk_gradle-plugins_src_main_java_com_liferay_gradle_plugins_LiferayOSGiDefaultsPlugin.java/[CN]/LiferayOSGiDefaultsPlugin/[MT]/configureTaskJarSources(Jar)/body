{
  Project project=jarSourcesTask.getProject();
  TaskContainer taskContainer=project.getTasks();
  taskContainer.withType(PatchTask.class,new Action<PatchTask>(){
    @Override public void execute(    final PatchTask patchTask){
      jarSourcesTask.from(new Callable<FileCollection>(){
        @Override public FileCollection call() throws Exception {
          Project project=patchTask.getProject();
          return project.zipTree(patchTask.getOriginalLibSrcFile());
        }
      }
,new Closure<Void>(null){
        @SuppressWarnings("unused") public void doCall(        CopySpec copySpec){
          String originalLibSrcDirName=patchTask.getOriginalLibSrcDirName();
          if (originalLibSrcDirName.equals(".")) {
            return;
          }
          Map<Object,Object> leadingPathReplacementsMap=new HashMap<>();
          leadingPathReplacementsMap.put(originalLibSrcDirName,"");
          copySpec.eachFile(new ReplaceLeadingPathAction(leadingPathReplacementsMap));
          copySpec.include(originalLibSrcDirName + "/");
          copySpec.setIncludeEmptyDirs(false);
        }
      }
);
      jarSourcesTask.from(new Callable<File>(){
        @Override public File call() throws Exception {
          return patchTask.getPatchesDir();
        }
      }
,new Closure<Void>(null){
        @SuppressWarnings("unused") public void doCall(        CopySpec copySpec){
          copySpec.into("META-INF/patches");
        }
      }
);
    }
  }
);
}
