{
  RepositoryHandler repositoryHandler=project.getRepositories();
  if (!_MAVEN_LOCAL_IGNORE) {
    repositoryHandler.mavenLocal();
  }
  repositoryHandler.maven(new Action<MavenArtifactRepository>(){
    @Override public void execute(    MavenArtifactRepository mavenArtifactRepository){
      mavenArtifactRepository.setUrl(_REPOSITORY_URL);
    }
  }
);
  if (Validator.isNotNull(_REPOSITORY_PRIVATE_PASSWORD) && Validator.isNotNull(_REPOSITORY_PRIVATE_URL) && Validator.isNotNull(_REPOSITORY_PRIVATE_USER_NAME)) {
    MavenArtifactRepository mavenArtifactRepository=repositoryHandler.maven(new Action<MavenArtifactRepository>(){
      @Override public void execute(      MavenArtifactRepository mavenArtifactRepository){
        mavenArtifactRepository.setUrl(_REPOSITORY_PRIVATE_URL);
      }
    }
);
    mavenArtifactRepository.authentication(new Action<AuthenticationContainer>(){
      @Override public void execute(      AuthenticationContainer authenticationContainer){
        authenticationContainer.add(new DefaultBasicAuthentication("basic"));
      }
    }
);
    mavenArtifactRepository.credentials(new Action<PasswordCredentials>(){
      @Override public void execute(      PasswordCredentials passwordCredentials){
        passwordCredentials.setPassword(_REPOSITORY_PRIVATE_PASSWORD);
        passwordCredentials.setUsername(_REPOSITORY_PRIVATE_USER_NAME);
      }
    }
);
  }
}
