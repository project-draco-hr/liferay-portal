{
  ReplaceRegexTask replaceRegexTask=GradleUtil.addTask(project,UPDATE_FILE_VERSIONS_TASK_NAME,ReplaceRegexTask.class);
  replaceRegexTask.pre(new Closure<String>(project){
    @SuppressWarnings("unused") public String doCall(    String content,    File file){
      String fileName=file.getName();
      if (!fileName.equals("build.gradle")) {
        return content;
      }
      String configuration=ProvidedBasePlugin.getPROVIDED_CONFIGURATION_NAME() + " ";
      return content.replaceAll(Pattern.quote(configuration + getProjectDependency(project)),Matcher.quoteReplacement(configuration + getModuleDependency(project,true)));
    }
  }
);
  replaceRegexTask.replaceOnlyIf(new Closure<Boolean>(project){
    @SuppressWarnings("unused") public Boolean doCall(    String group,    String replacement,    String content){
      String projectPath=project.getPath();
      if (!projectPath.startsWith(":apps:") && !projectPath.startsWith(":core:") && !projectPath.startsWith(":private:")&& !FileUtil.exists(project.getRootProject(),".gitrepo")) {
        return true;
      }
      Version groupVersion=getVersion(group);
      Version replacementVersion=getVersion(replacement);
      if ((groupVersion == null) || (replacementVersion == null) || (groupVersion.getMajor() != replacementVersion.getMajor())) {
        return true;
      }
      return false;
    }
  }
);
  replaceRegexTask.setDescription("Updates the project version in external files.");
  replaceRegexTask.setReplacement(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return project.getVersion();
    }
  }
);
  return replaceRegexTask;
}
