{
  GradleUtil.applyPlugin(project,LiferayOSGiPlugin.class);
  Gradle gradle=project.getGradle();
  StartParameter startParameter=gradle.getStartParameter();
  List<String> taskNames=startParameter.getTaskNames();
  final File portalRootDir=GradleUtil.getRootDir(project.getRootProject(),"portal-impl");
  final boolean publishing=isPublishing(project);
  boolean testProject=isTestProject(project);
  applyPlugins(project);
  configureMavenConf2ScopeMappings(project);
  applyConfigScripts(project);
  if (testProject || hasTests(project)) {
    GradleUtil.applyPlugin(project,WhipDefaultsPlugin.class);
    GradleUtil.applyPlugin(project,WhipPlugin.class);
    Configuration portalConfiguration=GradleUtil.getConfiguration(project,LiferayBasePlugin.PORTAL_CONFIGURATION_NAME);
    Configuration portalTestConfiguration=addConfigurationPortalTest(project);
    addDependenciesPortalTest(project);
    addDependenciesTestCompile(project);
    configureEclipse(project,portalTestConfiguration);
    configureIdea(project,portalTestConfiguration);
    configureSourceSetTest(project,portalConfiguration,portalTestConfiguration);
    configureSourceSetTestIntegration(project,portalConfiguration,portalTestConfiguration);
  }
  Configuration baselineConfiguration=null;
  if (hasBaseline(project)) {
    baselineConfiguration=addConfigurationBaseline(project);
  }
  addTaskBaseline(project,baselineConfiguration);
  InstallCacheTask installCacheTask=addTaskInstallCache(project);
  addTaskCommitCache(project,installCacheTask);
  addTaskCopyLibs(project);
  final Jar jarJavadocTask=addTaskJarJavadoc(project);
  final Jar jarSourcesTask=addTaskJarSources(project,testProject);
  final Jar jarTLDDocTask=addTaskJarTLDDoc(project);
  final ReplaceRegexTask updateFileVersionsTask=addTaskUpdateFileVersions(project);
  final ReplaceRegexTask updateVersionTask=addTaskUpdateVersion(project);
  configureBasePlugin(project,portalRootDir);
  configureBundleDefaultInstructions(project,portalRootDir,publishing);
  configureConfigurations(project);
  configureDeployDir(project);
  configureJavaPlugin(project);
  configureProject(project);
  configureRepositories(project);
  configureSourceSetMain(project);
  configureTaskJar(project,testProject);
  configureTaskJavadoc(project);
  configureTaskTest(project);
  configureTaskTestIntegration(project);
  configureTasksBaseline(project);
  configureTasksFindBugs(project);
  configureTasksJavaCompile(project);
  configureTasksPublishNodeModule(project);
  GradleUtil.withPlugin(project,ServiceBuilderPlugin.class,new Action<ServiceBuilderPlugin>(){
    @Override public void execute(    ServiceBuilderPlugin serviceBuilderPlugin){
      configureLocalPortalTool(project,portalRootDir,ServiceBuilderPlugin.CONFIGURATION_NAME,ServiceBuilderDefaultsPlugin.PORTAL_TOOL_NAME);
    }
  }
);
  project.afterEvaluate(new Action<Project>(){
    @Override public void execute(    Project project){
      checkVersion(project);
      configureArtifacts(project,jarJavadocTask,jarSourcesTask,jarTLDDocTask);
      configureTaskJarSources(jarSourcesTask);
      configureTaskUpdateFileVersions(updateFileVersionsTask,portalRootDir);
      GradleUtil.setProjectSnapshotVersion(project);
      configureTaskUploadArchives(project,updateFileVersionsTask,updateVersionTask);
      configureProjectBndProperties(project);
    }
  }
);
  if (taskNames.contains(EclipsePlugin.getECLIPSE_TASK_NAME()) || taskNames.contains("idea")) {
    forceProjectDependenciesEvaluation(project);
  }
  TaskExecutionGraph taskExecutionGraph=gradle.getTaskGraph();
  taskExecutionGraph.whenReady(new Closure<Void>(null){
    @SuppressWarnings("unused") public void doCall(    TaskExecutionGraph taskExecutionGraph){
      Task jarTask=GradleUtil.getTask(project,JavaPlugin.JAR_TASK_NAME);
      if (taskExecutionGraph.hasTask(jarTask)) {
        configureBundleInstructions(project);
      }
    }
  }
);
}
