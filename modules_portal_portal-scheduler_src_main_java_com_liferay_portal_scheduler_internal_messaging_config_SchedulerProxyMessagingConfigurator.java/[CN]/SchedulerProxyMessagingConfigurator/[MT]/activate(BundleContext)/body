{
  DestinationConfiguration destinationConfiguration=new DestinationConfiguration(DestinationConfiguration.DESTINATION_TYPE_PARALLEL,DestinationNames.SCHEDULER_ENGINE);
  Destination destination=_destinationFactory.createDestination(destinationConfiguration);
  Dictionary<String,Object> destinationDictionary=new HashMapDictionary<>();
  destinationDictionary.put("destination.name",destination.getName());
  _destinationServiceRegistration=bundleContext.registerService(Destination.class,destination,destinationDictionary);
  destination.register(_proxyMessageListener);
  SchedulerEngineProxyBean schedulerEngineProxyBean=new SchedulerEngineProxyBean();
  schedulerEngineProxyBean.setDestinationName(DestinationNames.SCHEDULER_ENGINE);
  schedulerEngineProxyBean.setSynchronousDestinationName(DestinationNames.SCHEDULER_ENGINE);
  schedulerEngineProxyBean.setSynchronousMessageSenderMode(SynchronousMessageSender.Mode.DIRECT);
  schedulerEngineProxyBean.afterPropertiesSet();
  InvocationHandlerFactory invocationHandlerFactory=MessagingProxyInvocationHandler.getInvocationHandlerFactory();
  InvocationHandler invocationHandler=invocationHandlerFactory.createInvocationHandler(schedulerEngineProxyBean);
  Class<?> beanClass=schedulerEngineProxyBean.getClass();
  Thread thread=Thread.currentThread();
  SchedulerEngine schedulerEngineProxy=(SchedulerEngine)ProxyUtil.newProxyInstance(thread.getContextClassLoader(),beanClass.getInterfaces(),invocationHandler);
  Dictionary<String,Object> schedulerEngineDictionary=new HashMapDictionary<>();
  schedulerEngineDictionary.put("isProxy",Boolean.TRUE);
  _schedulerEngineServiceRegistration=bundleContext.registerService(SchedulerEngine.class,schedulerEngineProxy,schedulerEngineDictionary);
}
