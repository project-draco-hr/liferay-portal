{
  _mockClusterMasterExecutor.reset(false,4,0);
  _mockSchedulerEngine.resetJobs(0,4);
  _clusterSchedulerEngine.start();
  List<SchedulerResponse> schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  Assert.assertEquals(4,_memoryClusteredJobs.size());
  _clusterSchedulerEngine.delete(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  Assert.assertEquals(3,_memoryClusteredJobs.size());
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_NOT_EXISTED_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  schedulerResponses=_getMemoryClusteredJobs(_NOT_EXISTED_GROUP_NAME);
  Assert.assertTrue(schedulerResponses.isEmpty());
  _clusterSchedulerEngine.delete(_NOT_EXISTED_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_NOT_EXISTED_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  schedulerResponses=_getMemoryClusteredJobs(_NOT_EXISTED_GROUP_NAME);
  Assert.assertTrue(schedulerResponses.isEmpty());
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  _clusterSchedulerEngine.delete(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
}
