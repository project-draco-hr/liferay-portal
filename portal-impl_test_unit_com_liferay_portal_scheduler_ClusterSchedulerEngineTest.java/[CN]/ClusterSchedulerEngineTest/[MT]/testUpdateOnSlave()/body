{
  _mockClusterMasterExecutor.reset(false,1,0);
  _mockSchedulerEngine.resetJobs(0,0);
  _clusterSchedulerEngine.start();
  Assert.assertNull(_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED));
  SchedulerResponse schedulerResponse=_getMemoryClusteredJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  _assertTriggerContent(schedulerResponse,_DEFAULT_INTERVAL);
  Trigger trigger=TriggerFactoryUtil.buildTrigger(TriggerType.SIMPLE,_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,null,null,_DEFAULT_INTERVAL * 2);
  _clusterSchedulerEngine.update(trigger,StorageType.MEMORY_CLUSTERED);
  Assert.assertNull(_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED));
  schedulerResponse=_getMemoryClusteredJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  _assertTriggerContent(schedulerResponse,_DEFAULT_INTERVAL * 2);
  trigger=TriggerFactoryUtil.buildTrigger(TriggerType.SIMPLE,_TEST_JOB_NAME_0,_NOT_EXISTED_GROUP_NAME,null,null,_DEFAULT_INTERVAL * 2);
  try {
    _clusterSchedulerEngine.update(trigger,StorageType.MEMORY_CLUSTERED);
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertEquals("Unable to update trigger for memory clustered job",e.getMessage());
  }
  trigger=TriggerFactoryUtil.buildTrigger(TriggerType.SIMPLE,_TEST_JOB_NAME_PREFIX,_NOT_EXISTED_GROUP_NAME,null,null,_DEFAULT_INTERVAL * 2);
  try {
    _clusterSchedulerEngine.update(trigger,StorageType.MEMORY_CLUSTERED);
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertEquals("Unable to update trigger for memory clustered job",e.getMessage());
  }
}
