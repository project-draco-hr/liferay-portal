{
  _clusterSchedulerEngine=_getClusterSchedulerEngine(true,2,2);
  SchedulerResponse schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  _assertTriggerState(schedulerResponse,TriggerState.NORMAL);
  _clusterSchedulerEngine.pause(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  _assertTriggerState(schedulerResponse,TriggerState.PAUSED);
  _clusterSchedulerEngine.resume(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  _assertTriggerState(schedulerResponse,TriggerState.NORMAL);
  List<SchedulerResponse> schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    _assertTriggerState(curSchedulerResponse,TriggerState.NORMAL);
  }
  _clusterSchedulerEngine.pause(_MEMORY_CLUSTER_TEST_GROUP_NAME);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    _assertTriggerState(curSchedulerResponse,TriggerState.PAUSED);
  }
  _clusterSchedulerEngine.resume(_MEMORY_CLUSTER_TEST_GROUP_NAME);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    _assertTriggerState(curSchedulerResponse,TriggerState.NORMAL);
  }
  try {
    _clusterSchedulerEngine.pause(_INVALID_JOB_NAME,_INVALID_PERSISTENT_GROUP_NAME);
    Assert.fail();
  }
 catch (  SchedulerException se) {
  }
  try {
    _clusterSchedulerEngine.resume(_INVALID_JOB_NAME,_INVALID_PERSISTENT_GROUP_NAME);
    Assert.fail();
  }
 catch (  SchedulerException se) {
  }
  try {
    _clusterSchedulerEngine.pause(_INVALID_PERSISTENT_GROUP_NAME);
    Assert.fail();
  }
 catch (  SchedulerException se) {
  }
  try {
    _clusterSchedulerEngine.resume(_INVALID_PERSISTENT_GROUP_NAME);
    Assert.fail();
  }
 catch (  SchedulerException se) {
  }
}
