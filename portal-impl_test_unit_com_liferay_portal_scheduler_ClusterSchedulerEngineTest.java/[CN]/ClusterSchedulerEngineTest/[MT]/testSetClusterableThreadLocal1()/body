{
  _clusterSchedulerEngine=_getClusterSchedulerEngine(false,4,2);
  _clusterSchedulerEngine.delete(_TEST_JOB_NAME_PREFIX + CharPool.NUMBER_0,_PERSISTENT_TEST_GROUP_NAME);
  Map<String,Serializable> context=_collectThreadLocalContext();
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(context));
  ClusterInvokeThreadLocal.setEnabled(true);
  PluginContextLifecycleThreadLocal.setInitializing(true);
  _clusterSchedulerEngine.delete(_TEST_JOB_NAME_PREFIX + CharPool.NUMBER_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  context=_collectThreadLocalContext();
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(context));
  ClusterInvokeThreadLocal.setEnabled(true);
  PluginContextLifecycleThreadLocal.setDestroying(true);
  _clusterSchedulerEngine.delete(_TEST_JOB_NAME_PREFIX + CharPool.NUMBER_1,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  context=_collectThreadLocalContext();
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(context));
  ClusterInvokeThreadLocal.setEnabled(true);
  _clusterSchedulerEngine.shutdown();
  _clusterSchedulerEngine.delete(_TEST_JOB_NAME_PREFIX + CharPool.NUMBER_2,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  context=_collectThreadLocalContext();
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(context));
  ClusterInvokeThreadLocal.setEnabled(true);
}
