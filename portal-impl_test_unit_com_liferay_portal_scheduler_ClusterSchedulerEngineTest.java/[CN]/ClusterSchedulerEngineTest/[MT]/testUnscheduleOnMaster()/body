{
  _mockClusterMasterExecutor.reset(true,0,0);
  _mockSchedulerEngine.resetJobs(4,4);
  _clusterSchedulerEngine.start();
  SchedulerResponse schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  _assertTriggerState(schedulerResponse,TriggerState.NORMAL);
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  _clusterSchedulerEngine.unschedule(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  _assertTriggerState(schedulerResponse,TriggerState.UNSCHEDULED);
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  List<SchedulerResponse> schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    if (curSchedulerResponse.getJobName().equals(_TEST_JOB_NAME_0)) {
      _assertTriggerState(curSchedulerResponse,TriggerState.UNSCHEDULED);
    }
 else {
      _assertTriggerState(curSchedulerResponse,TriggerState.NORMAL);
    }
  }
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  _clusterSchedulerEngine.unschedule(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    _assertTriggerState(curSchedulerResponse,TriggerState.UNSCHEDULED);
  }
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_PERSISTENT_TEST_GROUP_NAME,StorageType.PERSISTED);
  _assertTriggerState(schedulerResponse,TriggerState.NORMAL);
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  _clusterSchedulerEngine.unschedule(_TEST_JOB_NAME_0,_PERSISTENT_TEST_GROUP_NAME,StorageType.PERSISTED);
  schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_PERSISTENT_TEST_GROUP_NAME,StorageType.PERSISTED);
  _assertTriggerState(schedulerResponse,TriggerState.UNSCHEDULED);
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_PERSISTENT_TEST_GROUP_NAME,StorageType.PERSISTED);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    if (curSchedulerResponse.getJobName().equals(_TEST_JOB_NAME_0)) {
      _assertTriggerState(curSchedulerResponse,TriggerState.UNSCHEDULED);
    }
 else {
      _assertTriggerState(curSchedulerResponse,TriggerState.NORMAL);
    }
  }
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  _clusterSchedulerEngine.unschedule(_PERSISTENT_TEST_GROUP_NAME,StorageType.PERSISTED);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_PERSISTENT_TEST_GROUP_NAME,StorageType.PERSISTED);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    _assertTriggerState(curSchedulerResponse,TriggerState.UNSCHEDULED);
  }
  Assert.assertTrue(_memoryClusteredJobs.isEmpty());
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
}
