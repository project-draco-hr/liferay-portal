{
  _mockClusterMasterExecutor.reset(false,4,0);
  _mockSchedulerEngine.resetJobs(0,4);
  _clusterSchedulerEngine.start();
  Assert.assertNull(_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED));
  SchedulerResponse schedulerResponse=_getMemoryClusteredJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  _assertTriggerState(schedulerResponse,TriggerState.NORMAL);
  _clusterSchedulerEngine.pause(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertNull(_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED));
  schedulerResponse=_getMemoryClusteredJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  _assertTriggerState(schedulerResponse,TriggerState.PAUSED);
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  _clusterSchedulerEngine.resume(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertNull(_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED));
  schedulerResponse=_getMemoryClusteredJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME);
  _assertTriggerState(schedulerResponse,TriggerState.NORMAL);
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  List<SchedulerResponse> schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  schedulerResponses=_getMemoryClusteredJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    _assertTriggerState(curSchedulerResponse,TriggerState.NORMAL);
  }
  _clusterSchedulerEngine.pause(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  schedulerResponses=_getMemoryClusteredJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    _assertTriggerState(curSchedulerResponse,TriggerState.PAUSED);
  }
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  _clusterSchedulerEngine.resume(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  schedulerResponses=_getMemoryClusteredJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    _assertTriggerState(curSchedulerResponse,TriggerState.NORMAL);
  }
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  Assert.assertNull(_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_NOT_EXISTED_GROUP_NAME,StorageType.MEMORY_CLUSTERED));
  Assert.assertNull(_getMemoryClusteredJob(_TEST_JOB_NAME_0,_NOT_EXISTED_GROUP_NAME));
  _clusterSchedulerEngine.pause(_TEST_JOB_NAME_0,_NOT_EXISTED_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertNull(_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_NOT_EXISTED_GROUP_NAME,StorageType.MEMORY_CLUSTERED));
  Assert.assertNull(_getMemoryClusteredJob(_TEST_JOB_NAME_0,_NOT_EXISTED_GROUP_NAME));
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_NOT_EXISTED_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  schedulerResponses=_getMemoryClusteredJobs(_NOT_EXISTED_GROUP_NAME);
  Assert.assertTrue(schedulerResponses.isEmpty());
  _clusterSchedulerEngine.pause(_NOT_EXISTED_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_NOT_EXISTED_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(schedulerResponses.isEmpty());
  schedulerResponses=_getMemoryClusteredJobs(_NOT_EXISTED_GROUP_NAME);
  Assert.assertTrue(schedulerResponses.isEmpty());
  ClusterInvokeThreadLocal.setEnabled(false);
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
}
