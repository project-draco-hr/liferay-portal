{
  PortalUtil portalUtil=new PortalUtil();
  portalUtil.setPortal(new PortalImpl());
  PortalUUIDUtil portalUUIDUtil=new PortalUUIDUtil();
  portalUUIDUtil.setPortalUUID(new PortalUUIDImpl());
  _mockClusterMasterExecutor=new MockClusterMasterExecutor();
  ClusterMasterExecutorUtil clusterMasterExecutorUtil=new ClusterMasterExecutorUtil();
  clusterMasterExecutorUtil.setClusterMasterExecutor(_mockClusterMasterExecutor);
  _mockSchedulerEngine=new MockSchedulerEngine();
  _clusterSchedulerEngine=new ClusterSchedulerEngine(_mockSchedulerEngine);
  _memoryClusteredJobs=ReflectionTestUtil.getFieldValue(_clusterSchedulerEngine,"_memoryClusteredJobs");
  SchedulerEngineHelperImpl schedulerEngineHelperImpl=new SchedulerEngineHelperImpl();
  schedulerEngineHelperImpl.setSchedulerEngine(_clusterSchedulerEngine);
  SchedulerEngineHelperUtil schedulerEngineHelperUtil=new SchedulerEngineHelperUtil();
  schedulerEngineHelperUtil.setSchedulerEngineHelper(schedulerEngineHelperImpl);
  for (  Class<?> clazz : ClusterSchedulerEngine.class.getDeclaredClasses()) {
    if (!clazz.getName().contains("SchedulerClusterInvokeAcceptor")) {
      continue;
    }
    Class<? extends ClusterInvokeAcceptor> clusterInvokeAcceptorClass=(Class<? extends ClusterInvokeAcceptor>)clazz;
    Constructor<? extends ClusterInvokeAcceptor> constructor=clusterInvokeAcceptorClass.getDeclaredConstructor();
    constructor.setAccessible(true);
    _clusterInvokeAcceptor=constructor.newInstance();
    break;
  }
}
