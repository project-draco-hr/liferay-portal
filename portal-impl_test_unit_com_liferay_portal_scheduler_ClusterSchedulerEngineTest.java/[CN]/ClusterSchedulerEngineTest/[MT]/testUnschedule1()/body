{
  _clusterSchedulerEngine=_getClusterSchedulerEngine(true,2,0);
  SchedulerResponse schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  _assertTriggerState(schedulerResponse,TriggerState.NORMAL);
  _clusterSchedulerEngine.unschedule(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponse=_clusterSchedulerEngine.getScheduledJob(_TEST_JOB_NAME_0,_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  _assertTriggerState(schedulerResponse,TriggerState.UNSCHEDULED);
  List<SchedulerResponse> schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    String jobName=curSchedulerResponse.getJobName();
    if (jobName.equals(_TEST_JOB_NAME_0)) {
      _assertTriggerState(curSchedulerResponse,TriggerState.UNSCHEDULED);
    }
 else {
      _assertTriggerState(curSchedulerResponse,TriggerState.NORMAL);
    }
  }
  _clusterSchedulerEngine.unschedule(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  schedulerResponses=_clusterSchedulerEngine.getScheduledJobs(_MEMORY_CLUSTER_TEST_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
  for (  SchedulerResponse curSchedulerResponse : schedulerResponses) {
    _assertTriggerState(curSchedulerResponse,TriggerState.UNSCHEDULED);
  }
  try {
    _clusterSchedulerEngine.unschedule(_INVALID_JOB_NAME,_INVALID_MEMORY_CLUSTER_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
    Assert.fail();
  }
 catch (  SchedulerException se) {
  }
  try {
    _clusterSchedulerEngine.unschedule(_INVALID_MEMORY_CLUSTER_GROUP_NAME,StorageType.MEMORY_CLUSTERED);
    Assert.fail();
  }
 catch (  SchedulerException se) {
  }
}
