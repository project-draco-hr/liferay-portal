{
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.PERSISTED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.MEMORY_CLUSTERED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  _clusterSchedulerEngine.start();
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.PERSISTED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(true);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.PERSISTED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(true);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.MEMORY_CLUSTERED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(true);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.PERSISTED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(true);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.MEMORY_CLUSTERED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.PERSISTED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(true);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.PERSISTED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(false);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.MEMORY_CLUSTERED);
  Assert.assertTrue(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
  ClusterInvokeThreadLocal.setEnabled(true);
  PluginContextLifecycleThreadLocal.setInitializing(false);
  PluginContextLifecycleThreadLocal.setDestroying(false);
  _clusterSchedulerEngine.setClusterableThreadLocal(StorageType.MEMORY_CLUSTERED);
  Assert.assertFalse(_clusterInvokeAcceptor.accept(ClusterableContextThreadLocalAdvice.getAndClearThreadLocals()));
}
