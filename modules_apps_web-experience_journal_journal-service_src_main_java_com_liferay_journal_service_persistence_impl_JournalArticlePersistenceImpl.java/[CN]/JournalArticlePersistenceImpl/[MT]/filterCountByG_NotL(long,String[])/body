{
  if (!InlineSQLHelperUtil.isEnabled(groupId)) {
    return countByG_NotL(groupId,layoutUuids);
  }
  if (layoutUuids == null) {
    layoutUuids=new String[0];
  }
 else   if (layoutUuids.length > 1) {
    layoutUuids=ArrayUtil.distinct(layoutUuids,NULL_SAFE_STRING_COMPARATOR);
    Arrays.sort(layoutUuids,NULL_SAFE_STRING_COMPARATOR);
  }
  StringBundler query=new StringBundler();
  query.append(_FILTER_SQL_COUNT_JOURNALARTICLE_WHERE);
  query.append(_FINDER_COLUMN_G_NOTL_GROUPID_2);
  if (layoutUuids.length > 0) {
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < layoutUuids.length; i++) {
      String layoutUuid=layoutUuids[i];
      if (layoutUuid == null) {
        query.append(_FINDER_COLUMN_G_NOTL_LAYOUTUUID_1);
      }
 else       if (layoutUuid.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_G_NOTL_LAYOUTUUID_3);
      }
 else {
        query.append(_FINDER_COLUMN_G_NOTL_LAYOUTUUID_2);
      }
      if ((i + 1) < layoutUuids.length) {
        query.append(WHERE_AND);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
  }
  query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),JournalArticle.class.getName(),_FILTER_ENTITY_TABLE_FILTER_PK_COLUMN,groupId);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,com.liferay.portal.kernel.dao.orm.Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    for (    String layoutUuid : layoutUuids) {
      if ((layoutUuid != null) && !layoutUuid.isEmpty()) {
        qPos.add(layoutUuid);
      }
    }
    Long count=(Long)q.uniqueResult();
    return count.intValue();
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
