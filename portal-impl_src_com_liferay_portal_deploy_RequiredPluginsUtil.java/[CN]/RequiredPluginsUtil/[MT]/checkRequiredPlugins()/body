{
  List<String[]> levelsRequiredDeploymentContexts=DeployManagerUtil.getLevelsRequiredDeploymentContexts();
  List<String[]> levelsRequiredDeploymentWARFileNames=DeployManagerUtil.getLevelsRequiredDeploymentWARFileNames();
  boolean deployed=false;
  for (int i=0; i < levelsRequiredDeploymentContexts.size(); i++) {
    String[] levelRequiredDeploymentContexts=levelsRequiredDeploymentContexts.get(i);
    String[] levelRequiredDeploymentWARFileNames=levelsRequiredDeploymentWARFileNames.get(i);
    for (int j=0; j < levelRequiredDeploymentContexts.length; j++) {
      String levelRequiredDeploymentContext=levelRequiredDeploymentContexts[j];
      if (DeployManagerUtil.isDeployed(levelRequiredDeploymentContext)) {
        continue;
      }
      deployed=true;
      String levelRequiredDeploymentWARFileName=levelRequiredDeploymentWARFileNames[j];
      if (_log.isDebugEnabled()) {
        _log.debug("Automatically deploying the required plugin " + levelRequiredDeploymentWARFileName);
      }
      ClassLoader classLoader=PortalClassLoaderUtil.getClassLoader();
      InputStream inputStream=classLoader.getResourceAsStream("com/liferay/portal/deploy/dependencies/plugins" + (i + 1) + "/"+ levelRequiredDeploymentWARFileNames[j]);
      AutoDeployDir autoDeployDir=AutoDeployUtil.getDir(AutoDeployDir.DEFAULT_NAME);
      if (autoDeployDir == null) {
        if (_log.isDebugEnabled()) {
          _log.debug("The autodeploy directory " + AutoDeployDir.DEFAULT_NAME + " is null");
        }
        continue;
      }
      try {
        StreamUtil.transfer(inputStream,new FileOutputStream(autoDeployDir.getDeployDir() + "/" + levelRequiredDeploymentWARFileNames[j]));
      }
 catch (      IOException ioe) {
        _log.error("Unable to write file",ioe);
      }
    }
  }
  if (!deployed) {
    _unschedule(false);
  }
}
