{
  long pk=RandomTestUtil.nextLong();
  Team newTeam=_persistence.create(pk);
  newTeam.setMvccVersion(RandomTestUtil.nextLong());
  newTeam.setCompanyId(RandomTestUtil.nextLong());
  newTeam.setUserId(RandomTestUtil.nextLong());
  newTeam.setUserName(RandomTestUtil.randomString());
  newTeam.setCreateDate(RandomTestUtil.nextDate());
  newTeam.setModifiedDate(RandomTestUtil.nextDate());
  newTeam.setGroupId(RandomTestUtil.nextLong());
  newTeam.setName(RandomTestUtil.randomString());
  newTeam.setDescription(RandomTestUtil.randomString());
  _models.add(_persistence.update(newTeam));
  Team existingTeam=_persistence.findByPrimaryKey(newTeam.getPrimaryKey());
  Assert.assertEquals(existingTeam.getMvccVersion(),newTeam.getMvccVersion());
  Assert.assertEquals(existingTeam.getTeamId(),newTeam.getTeamId());
  Assert.assertEquals(existingTeam.getCompanyId(),newTeam.getCompanyId());
  Assert.assertEquals(existingTeam.getUserId(),newTeam.getUserId());
  Assert.assertEquals(existingTeam.getUserName(),newTeam.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingTeam.getCreateDate()),Time.getShortTimestamp(newTeam.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingTeam.getModifiedDate()),Time.getShortTimestamp(newTeam.getModifiedDate()));
  Assert.assertEquals(existingTeam.getGroupId(),newTeam.getGroupId());
  Assert.assertEquals(existingTeam.getName(),newTeam.getName());
  Assert.assertEquals(existingTeam.getDescription(),newTeam.getDescription());
}
