{
  long pk=ServiceTestUtil.nextLong();
  Team newTeam=_persistence.create(pk);
  newTeam.setCompanyId(ServiceTestUtil.nextLong());
  newTeam.setUserId(ServiceTestUtil.nextLong());
  newTeam.setUserName(ServiceTestUtil.randomString());
  newTeam.setCreateDate(ServiceTestUtil.nextDate());
  newTeam.setModifiedDate(ServiceTestUtil.nextDate());
  newTeam.setGroupId(ServiceTestUtil.nextLong());
  newTeam.setName(ServiceTestUtil.randomString());
  newTeam.setDescription(ServiceTestUtil.randomString());
  _persistence.update(newTeam,false);
  Team existingTeam=_persistence.findByPrimaryKey(newTeam.getPrimaryKey());
  Assert.assertEquals(existingTeam.getTeamId(),newTeam.getTeamId());
  Assert.assertEquals(existingTeam.getCompanyId(),newTeam.getCompanyId());
  Assert.assertEquals(existingTeam.getUserId(),newTeam.getUserId());
  Assert.assertEquals(existingTeam.getUserName(),newTeam.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingTeam.getCreateDate()),Time.getShortTimestamp(newTeam.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingTeam.getModifiedDate()),Time.getShortTimestamp(newTeam.getModifiedDate()));
  Assert.assertEquals(existingTeam.getGroupId(),newTeam.getGroupId());
  Assert.assertEquals(existingTeam.getName(),newTeam.getName());
  Assert.assertEquals(existingTeam.getDescription(),newTeam.getDescription());
}
