{
  String wrappedClassBinaryName=_getClassBinaryName(wrappedClass);
  String asmWrapperClassBinaryName=wrappedClassBinaryName + "ASMWrapper";
  Class<?> wrapperClass=wrapper.getClass();
  String wrapperClassDescription=Type.getDescriptor(wrapperClass);
  String defaultObjectClassDescription=Type.getDescriptor(defaultObject.getClass());
  ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  classWriter.visit(Opcodes.V1_7,Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,asmWrapperClassBinaryName,null,_getClassBinaryName(Object.class),new String[]{wrappedClassBinaryName});
  FieldVisitor fieldVisitor=classWriter.visitField(Opcodes.ACC_PRIVATE + Opcodes.ACC_FINAL,"_wrapper",wrapperClassDescription,null,null);
  fieldVisitor.visitEnd();
  fieldVisitor=classWriter.visitField(Opcodes.ACC_PRIVATE + Opcodes.ACC_FINAL,"_default",defaultObjectClassDescription,null,null);
  fieldVisitor.visitEnd();
  StringBundler sb=new StringBundler(4);
  sb.append(StringPool.OPEN_PARENTHESIS);
  sb.append(wrapperClassDescription);
  sb.append(defaultObjectClassDescription);
  sb.append(")V");
  MethodVisitor methodVisitor=classWriter.visitMethod(Opcodes.ACC_PRIVATE,"<init>",sb.toString(),null,null);
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,"java/lang/Object","<init>","()V",false);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,1);
  methodVisitor.visitFieldInsn(Opcodes.PUTFIELD,asmWrapperClassBinaryName,"_wrapper",wrapperClassDescription);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
  methodVisitor.visitFieldInsn(Opcodes.PUTFIELD,asmWrapperClassBinaryName,"_default",defaultObjectClassDescription);
  methodVisitor.visitInsn(Opcodes.RETURN);
  methodVisitor.visitMaxs(0,0);
  methodVisitor.visitEnd();
  Map<String,List<Method>> methods=compareMethods(wrappedClass,wrapperClass);
  for (  Method method : methods.get(_COMMON_METHODS)) {
    _generateMethod(classWriter,method,asmWrapperClassBinaryName,"_wrapper",wrapperClassDescription,_getClassBinaryName(wrapperClass));
  }
  for (  Method method : methods.get(_DIFFERENT_METHODS)) {
    _generateMethod(classWriter,method,asmWrapperClassBinaryName,"_default",defaultObjectClassDescription,_getClassBinaryName(defaultObject.getClass()));
  }
  classWriter.visitEnd();
  return classWriter.toByteArray();
}
