{
  Class<?>[] exceptions=method.getExceptionTypes();
  String[] exceptionsBinaryClassNames=new String[exceptions.length];
  for (int i=0; i < exceptions.length; i++) {
    exceptionsBinaryClassNames[i]=_getClassBinaryName(exceptions[i]);
  }
  MethodVisitor methodVisitor=classWriter.visitMethod(Opcodes.ACC_PUBLIC,method.getName(),Type.getMethodDescriptor(method),null,exceptionsBinaryClassNames);
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitFieldInsn(Opcodes.GETFIELD,asmWrapperClassBinaryName,fieldName,targetClassDescriptor);
  _loadValues(methodVisitor,method.getParameterTypes());
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,targetClassBinaryName,method.getName(),Type.getMethodDescriptor(method),false);
  Type type=Type.getType(method.getReturnType());
  methodVisitor.visitInsn(type.getOpcode(Opcodes.IRETURN));
  methodVisitor.visitMaxs(0,0);
  methodVisitor.visitEnd();
}
