{
  long companyId=user.getCompanyId();
  if (!AuthSettingsUtil.isLDAPAuthEnabled(companyId) || !LDAPSettingsUtil.isExportEnabled(companyId)) {
    return;
  }
  long ldapServerId=PortalLDAPUtil.getLdapServerId(companyId,user.getScreenName(),user.getEmailAddress());
  LdapContext ldapContext=PortalLDAPUtil.getContext(ldapServerId,companyId);
  try {
    if (ldapContext == null) {
      return;
    }
    Properties userMappings=LDAPSettingsUtil.getUserMappings(ldapServerId,companyId);
    Properties userExpandoMappings=LDAPSettingsUtil.getUserExpandoMappings(ldapServerId,companyId);
    Binding binding=PortalLDAPUtil.getUser(ldapServerId,user.getCompanyId(),user.getScreenName(),user.getEmailAddress());
    if (binding == null) {
      binding=addUser(ldapServerId,ldapContext,user,userMappings);
    }
    Name name=new CompositeName();
    name.add(PortalLDAPUtil.getNameInNamespace(ldapServerId,companyId,binding));
    Modifications modifications=_portalToLDAPConverter.getLDAPUserModifications(user,userExpandoAttributes,userMappings,userExpandoMappings);
    if (modifications == null) {
      return;
    }
    ModificationItem[] modificationItems=modifications.getItems();
    ldapContext.modifyAttributes(name,modificationItems);
  }
 catch (  NameNotFoundException nnfe) {
    if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.LDAP_AUTH_REQUIRED)) {
      throw nnfe;
    }
 else {
      _log.error(nnfe,nnfe);
    }
  }
catch (  Exception e) {
    throw e;
  }
 finally {
    if (ldapContext != null) {
      ldapContext.close();
    }
  }
}
