{
  if (user.isDefaultUser() || (user.getStatus() != WorkflowConstants.STATUS_APPROVED)) {
    return;
  }
  long companyId=user.getCompanyId();
  if (!PrefsPropsUtil.getBoolean(companyId,PropsKeys.LDAP_AUTH_ENABLED,PropsValues.LDAP_AUTH_ENABLED) || !LDAPSettingsUtil.isExportEnabled(companyId)) {
    return;
  }
  long ldapServerId=PortalLDAPUtil.getLdapServerId(companyId,user.getScreenName(),user.getEmailAddress());
  LdapContext ldapContext=PortalLDAPUtil.getContext(ldapServerId,companyId);
  try {
    if (ldapContext == null) {
      return;
    }
    Properties userMappings=LDAPSettingsUtil.getUserMappings(ldapServerId,companyId);
    Properties userExpandoMappings=LDAPSettingsUtil.getUserExpandoMappings(ldapServerId,companyId);
    Binding binding=PortalLDAPUtil.getUser(ldapServerId,user.getCompanyId(),user.getScreenName(),user.getEmailAddress(),true);
    if (binding == null) {
      binding=addUser(ldapServerId,ldapContext,user,userMappings);
    }
    Name name=new CompositeName();
    name.add(PortalLDAPUtil.getNameInNamespace(ldapServerId,companyId,binding));
    Modifications modifications=_portalToLDAPConverter.getLDAPUserModifications(user,userExpandoAttributes,userMappings,userExpandoMappings);
    if (modifications == null) {
      return;
    }
    ModificationItem[] modificationItems=modifications.getItems();
    ldapContext.modifyAttributes(name,modificationItems);
    if (!LDAPSettingsUtil.isExportGroupEnabled(companyId)) {
      return;
    }
    List<UserGroup> userGroups=UserGroupLocalServiceUtil.getUserUserGroups(user.getUserId());
    for (    UserGroup userGroup : userGroups) {
      exportToLDAP(user.getUserId(),userGroup.getUserGroupId(),LDAPOperation.ADD);
    }
    Modifications groupModifications=_portalToLDAPConverter.getLDAPUserGroupModifications(ldapServerId,userGroups,user,userMappings);
    ModificationItem[] groupModificationItems=groupModifications.getItems();
    if (groupModificationItems.length > 0) {
      ldapContext.modifyAttributes(name,groupModificationItems);
    }
  }
 catch (  NameNotFoundException nnfe) {
    if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.LDAP_AUTH_REQUIRED)) {
      throw nnfe;
    }
    _log.error(nnfe,nnfe);
  }
 finally {
    if (ldapContext != null) {
      ldapContext.close();
    }
  }
}
