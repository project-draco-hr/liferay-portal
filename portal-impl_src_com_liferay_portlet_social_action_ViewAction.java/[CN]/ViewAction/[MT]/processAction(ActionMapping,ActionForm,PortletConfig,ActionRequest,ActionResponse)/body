{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String[] models=PortalUtil.getSocialEquityModels();
  for (  String model : models) {
    List<SocialEquityActionMapping> equityMappings=PortalUtil.getSocialEquityActionMappings(model);
    long classNameId=PortalUtil.getClassNameId(model);
    List<SocialEquityActionMapping> mergedMappings=new ArrayList<SocialEquityActionMapping>();
    for (    SocialEquityActionMapping equityMapping : equityMappings) {
      SocialEquityActionMapping clone=equityMapping.clone();
      mergedMappings.add(clone);
      int iqValue=ParamUtil.getInteger(actionRequest,model + "." + clone.getActionKey()+ ".iqvalue",-1);
      if (iqValue >= 0) {
        clone.setInformationValue(iqValue);
      }
      int iqExpiry=ParamUtil.getInteger(actionRequest,model + "." + clone.getActionKey()+ ".iqexpiry",-1);
      if (iqExpiry >= 0) {
        clone.setInformationLifespan(iqExpiry);
      }
      int pqValue=ParamUtil.getInteger(actionRequest,model + "." + clone.getActionKey()+ ".pqvalue",-1);
      if (pqValue >= 0) {
        clone.setParticipationValue(pqValue);
      }
      int pqExpiry=ParamUtil.getInteger(actionRequest,model + "." + clone.getActionKey()+ ".pqexpiry",-1);
      if (pqExpiry >= 0) {
        clone.setParticipationLifespan(pqExpiry);
      }
    }
    SocialEquitySettingLocalServiceUtil.updateSocialEquitySettings(model,themeDisplay.getScopeGroupId(),classNameId,mergedMappings);
  }
  addSuccessMessage(actionRequest,actionResponse);
  sendRedirect(actionRequest,actionResponse);
}
