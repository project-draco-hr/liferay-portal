{
  List<Throwable> throwables=new ArrayList<Throwable>();
  if (runnables.size() < PropsValues.VERIFY_PROCESS_CONCURRENCY_THRESHOLD) {
    for (    ThrowableAwareRunnable runnable : runnables) {
      runnable.run();
      if (runnable.hasException()) {
        throwables.add(runnable.getThrowable());
      }
    }
  }
 else {
    ExecutorService executorService=Executors.newFixedThreadPool(runnables.size());
    List<Callable<Object>> jobs=new ArrayList<Callable<Object>>(runnables.size());
    for (    Runnable runnable : runnables) {
      jobs.add(Executors.callable(runnable));
    }
    try {
      List<Future<Object>> futures=executorService.invokeAll(jobs);
      for (      Future future : futures) {
        try {
          future.get();
        }
 catch (        ExecutionException e) {
          throwables.add(e.getCause());
        }
      }
    }
  finally {
      executorService.shutdown();
    }
  }
  if (!throwables.isEmpty()) {
    throw new BulkException("Verification error: " + getClass().getName(),throwables);
  }
}
