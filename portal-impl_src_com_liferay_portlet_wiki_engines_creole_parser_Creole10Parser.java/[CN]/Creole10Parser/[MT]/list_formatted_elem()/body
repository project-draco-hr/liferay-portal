{
  CollectionNode contents=new CollectionNode();
  ASTNode boldContents=null;
  ASTNode italContents=null;
  try {
    int alt60=2;
    int LA60_0=input.LA(1);
    if ((LA60_0 == STAR)) {
      alt60=1;
    }
 else     if ((LA60_0 == ITAL)) {
      alt60=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return contents;
      }
      NoViableAltException nvae=new NoViableAltException("316:1: list_formatted_elem returns [CollectionNode contents = new CollectionNode()] : ( bold_markup onestar (boldContents= list_boldcontentpart onestar )* ( bold_markup )? | ital_markup onestar (italContents= list_italcontentpart onestar )* ( ital_markup )? );",60,0,input);
      throw nvae;
    }
switch (alt60) {
case 1:
{
        pushFollow(FOLLOW_bold_markup_in_list_formatted_elem1680);
        bold_markup();
        _fsp--;
        if (failed)         return contents;
        pushFollow(FOLLOW_onestar_in_list_formatted_elem1683);
        onestar();
        _fsp--;
        if (failed)         return contents;
        loop56:         do {
          int alt56=2;
switch (input.LA(1)) {
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case EQUAL:
case PIPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case COLON_SLASH:
case SLASH:
case INSIGNIFICANT_CHAR:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
{
              alt56=1;
            }
          break;
case FORCED_LINEBREAK:
{
          alt56=1;
        }
      break;
case ESCAPE:
{
      alt56=1;
    }
  break;
case LINK_OPEN:
{
  alt56=1;
}
break;
case IMAGE_OPEN:
{
alt56=1;
}
break;
case EXTENSION:
{
alt56=1;
}
break;
case NOWIKI_OPEN:
{
alt56=1;
}
break;
case ITAL:
{
alt56=1;
}
break;
}
switch (alt56) {
case 1:
{
pushFollow(FOLLOW_list_boldcontentpart_in_list_formatted_elem1692);
boldContents=list_boldcontentpart();
_fsp--;
if (failed) return contents;
if (backtracking == 0) {
contents.add(new BoldTextNode(boldContents));
}
pushFollow(FOLLOW_onestar_in_list_formatted_elem1697);
onestar();
_fsp--;
if (failed) return contents;
}
break;
default :
break loop56;
}
}
 while (true);
int alt57=2;
int LA57_0=input.LA(1);
if ((LA57_0 == STAR)) {
int LA57_1=input.LA(2);
if ((LA57_1 == STAR)) {
alt57=1;
}
}
switch (alt57) {
case 1:
{
pushFollow(FOLLOW_bold_markup_in_list_formatted_elem1706);
bold_markup();
_fsp--;
if (failed) return contents;
}
break;
}
}
break;
case 2:
{
pushFollow(FOLLOW_ital_markup_in_list_formatted_elem1714);
ital_markup();
_fsp--;
if (failed) return contents;
pushFollow(FOLLOW_onestar_in_list_formatted_elem1717);
onestar();
_fsp--;
if (failed) return contents;
loop58: do {
int alt58=2;
switch (input.LA(1)) {
case STAR:
{
alt58=1;
}
break;
case FORCED_END_OF_LINE:
case HEADING_SECTION:
case HORIZONTAL_SECTION:
case LIST_ITEM:
case LIST_ITEM_PART:
case NOWIKI_SECTION:
case SCAPE_NODE:
case TEXT_NODE:
case UNORDERED_LIST:
case UNFORMATTED_TEXT:
case WIKI:
case POUND:
case EQUAL:
case PIPE:
case NOWIKI_BLOCK_CLOSE:
case NOWIKI_CLOSE:
case LINK_CLOSE:
case IMAGE_CLOSE:
case BLANKS:
case DASH:
case CR:
case LF:
case SPACE:
case TABULATOR:
case COLON_SLASH:
case SLASH:
case INSIGNIFICANT_CHAR:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
{
alt58=1;
}
break;
case FORCED_LINEBREAK:
{
alt58=1;
}
break;
case ESCAPE:
{
alt58=1;
}
break;
case LINK_OPEN:
{
alt58=1;
}
break;
case IMAGE_OPEN:
{
alt58=1;
}
break;
case EXTENSION:
{
alt58=1;
}
break;
case NOWIKI_OPEN:
{
alt58=1;
}
break;
}
switch (alt58) {
case 1:
{
pushFollow(FOLLOW_list_italcontentpart_in_list_formatted_elem1726);
italContents=list_italcontentpart();
_fsp--;
if (failed) return contents;
if (backtracking == 0) {
contents.add(new ItalicTextNode(italContents));
}
pushFollow(FOLLOW_onestar_in_list_formatted_elem1731);
onestar();
_fsp--;
if (failed) return contents;
}
break;
default :
break loop58;
}
}
 while (true);
int alt59=2;
int LA59_0=input.LA(1);
if ((LA59_0 == ITAL)) {
alt59=1;
}
switch (alt59) {
case 1:
{
pushFollow(FOLLOW_ital_markup_in_list_formatted_elem1740);
ital_markup();
_fsp--;
if (failed) return contents;
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return contents;
}
