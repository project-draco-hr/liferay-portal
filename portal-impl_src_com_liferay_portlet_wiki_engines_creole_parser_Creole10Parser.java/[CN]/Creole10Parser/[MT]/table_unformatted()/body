{
  CollectionNode text=new CollectionNode();
  String t=null;
  ScapedNode e=null;
  try {
    int alt92=2;
    int LA92_0=input.LA(1);
    if (((LA92_0 >= FORCED_END_OF_LINE && LA92_0 <= WIKI) || LA92_0 == POUND || LA92_0 == EQUAL || (LA92_0 >= NOWIKI_BLOCK_CLOSE && LA92_0 <= 75))) {
      alt92=1;
    }
 else     if (((LA92_0 >= FORCED_LINEBREAK && LA92_0 <= ESCAPE))) {
      alt92=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return text;
      }
      NoViableAltException nvae=new NoViableAltException("411:1: table_unformatted returns [CollectionNode text = new CollectionNode()] : (t= table_unformatted_text | ( forced_linebreak | e= escaped )+ );",92,0,input);
      throw nvae;
    }
switch (alt92) {
case 1:
{
        pushFollow(FOLLOW_table_unformatted_text_in_table_unformatted2473);
        t=table_unformatted_text();
        _fsp--;
        if (failed)         return text;
        if (backtracking == 0) {
          text.add(new UnformattedTextNode(t));
        }
      }
    break;
case 2:
{
    int cnt91=0;
    loop91:     do {
      int alt91=3;
      int LA91_0=input.LA(1);
      if ((LA91_0 == FORCED_LINEBREAK)) {
        alt91=1;
      }
 else       if ((LA91_0 == ESCAPE)) {
        alt91=2;
      }
switch (alt91) {
case 1:
{
          pushFollow(FOLLOW_forced_linebreak_in_table_unformatted2482);
          forced_linebreak();
          _fsp--;
          if (failed)           return text;
          if (backtracking == 0) {
            text.add(new ForcedEndOfLineNode());
          }
        }
      break;
case 2:
{
      pushFollow(FOLLOW_escaped_in_table_unformatted2495);
      e=escaped();
      _fsp--;
      if (failed)       return text;
      if (backtracking == 0) {
        text.add(e);
      }
    }
  break;
default :
if (cnt91 >= 1) break loop91;
if (backtracking > 0) {
failed=true;
return text;
}
EarlyExitException eee=new EarlyExitException(91,input);
throw eee;
}
cnt91++;
}
 while (true);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return text;
}
