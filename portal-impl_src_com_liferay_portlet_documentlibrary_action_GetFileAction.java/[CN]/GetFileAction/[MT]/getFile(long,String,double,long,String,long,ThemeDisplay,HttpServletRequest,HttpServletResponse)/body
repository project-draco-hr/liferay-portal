{
  InputStream is=null;
  try {
    long companyId=themeDisplay.getCompanyId();
    long userId=themeDisplay.getUserId();
    DLFileEntry fileEntry=null;
    if (Validator.isNotNull(uuid) && (groupId > 0)) {
      try {
        fileEntry=DLFileEntryLocalServiceUtil.getFileEntryByUuidAndGroupId(uuid,groupId);
        folderId=fileEntry.getFolderId();
        name=fileEntry.getName();
      }
 catch (      Exception e) {
      }
    }
    if (fileShortcutId <= 0) {
      DLFileEntryPermission.check(themeDisplay.getPermissionChecker(),folderId,name,ActionKeys.VIEW);
    }
 else {
      DLFileShortcut fileShortcut=DLFileShortcutServiceUtil.getFileShortcut(fileShortcutId);
      folderId=fileShortcut.getToFolderId();
      name=fileShortcut.getToName();
    }
    if (fileEntry == null) {
      fileEntry=DLFileEntryLocalServiceUtil.getFileEntry(folderId,name);
    }
    if (version > 0) {
      is=DLFileEntryLocalServiceUtil.getFileAsStream(companyId,userId,folderId,name,version);
    }
 else {
      is=DLFileEntryLocalServiceUtil.getFileAsStream(companyId,userId,folderId,name);
    }
    String contentType=MimeTypesUtil.getContentType(name);
    ServletResponseUtil.sendFile(res,fileEntry.getTitleWithExtension(),is,contentType);
  }
 catch (  PortalException pe) {
    if (pe instanceof PrincipalException) {
      PortalUtil.sendError(HttpServletResponse.SC_FORBIDDEN,new PrincipalException(),req,res);
    }
 else {
      PortalUtil.sendError(HttpServletResponse.SC_NOT_FOUND,pe,req,res);
    }
  }
 finally {
    ServletResponseUtil.cleanUp(is);
  }
}
