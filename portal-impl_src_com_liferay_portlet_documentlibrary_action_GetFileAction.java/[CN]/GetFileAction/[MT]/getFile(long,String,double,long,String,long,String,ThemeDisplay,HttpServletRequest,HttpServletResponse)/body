{
  InputStream is=null;
  try {
    long companyId=themeDisplay.getCompanyId();
    long userId=themeDisplay.getUserId();
    DLFileEntry fileEntry=null;
    if (Validator.isNotNull(uuid) && (groupId > 0)) {
      try {
        fileEntry=DLFileEntryLocalServiceUtil.getFileEntryByUuidAndGroupId(uuid,groupId);
        folderId=fileEntry.getFolderId();
        name=fileEntry.getName();
      }
 catch (      Exception e) {
      }
    }
    if (fileShortcutId <= 0) {
      DLFileEntryPermission.check(themeDisplay.getPermissionChecker(),folderId,name,ActionKeys.VIEW);
    }
 else {
      DLFileShortcut fileShortcut=DLFileShortcutServiceUtil.getFileShortcut(fileShortcutId);
      folderId=fileShortcut.getToFolderId();
      name=fileShortcut.getToName();
    }
    if (fileEntry == null) {
      fileEntry=DLFileEntryLocalServiceUtil.getFileEntry(folderId,name);
    }
    if (version == 0) {
      version=fileEntry.getVersion();
    }
    is=DLFileEntryLocalServiceUtil.getFileAsStream(companyId,userId,folderId,name,version);
    String fileName=fileEntry.getTitleWithExtension();
    if (Validator.isNotNull(targetExtension)) {
      String id=DocumentConversionUtil.getTempFileId(fileEntry.getFileEntryId(),version);
      String sourceExtension=FileUtil.getExtension(name);
      InputStream convertedIS=DocumentConversionUtil.convert(id,is,sourceExtension,targetExtension);
      if ((convertedIS != null) && (convertedIS != is)) {
        StringBuilder sb=new StringBuilder();
        sb.append(fileEntry.getTitle());
        sb.append(StringPool.PERIOD);
        sb.append(targetExtension);
        fileName=sb.toString();
        is=convertedIS;
      }
    }
    String contentType=MimeTypesUtil.getContentType(fileName);
    ServletResponseUtil.sendFile(response,fileName,is,contentType);
  }
  finally {
    ServletResponseUtil.cleanUp(is);
  }
}
