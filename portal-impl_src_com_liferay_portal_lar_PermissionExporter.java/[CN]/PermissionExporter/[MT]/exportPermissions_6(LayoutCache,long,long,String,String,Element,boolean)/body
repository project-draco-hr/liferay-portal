{
  List<Role> roles=layoutCache.getGroupRoles_5(groupId,resourceName);
  List<String> actionIds=null;
  if (portletActions) {
    actionIds=ResourceActionsUtil.getPortletResourceActions(resourceName);
  }
 else {
    actionIds=ResourceActionsUtil.getModelResourceActions(resourceName);
  }
  if (actionIds.isEmpty()) {
    return;
  }
  PrimitiveLongList roleIds=new PrimitiveLongList(roles.size());
  Map<Long,Role> roleIdToRole=new HashMap<Long,Role>();
  for (  Role role : roles) {
    if (role.getName().equals(RoleConstants.ADMINISTRATOR)) {
      continue;
    }
    roleIds.add(role.getRoleId());
    roleIdToRole.put(role.getRoleId(),role);
  }
  Map<Long,Set<String>> roleIdsToAction=ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(companyId,resourceName,ResourceConstants.SCOPE_INDIVIDUAL,resourcePrimKey,roleIds.getArray(),actionIds);
  for (  Role role : roleIdToRole.values()) {
    Set<String> actions=roleIdsToAction.get(role.getRoleId());
    if ((actions == null) || actions.isEmpty()) {
      continue;
    }
    Element roleElement=permissionsElement.addElement("role");
    roleElement.addAttribute("name",role.getName());
    roleElement.addAttribute("description",role.getDescription());
    roleElement.addAttribute("type",String.valueOf(role.getType()));
    for (    String action : actions) {
      Element actionKeyElement=roleElement.addElement("action-key");
      actionKeyElement.addText(action);
    }
  }
}
