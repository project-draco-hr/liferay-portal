{
  EclipseModel eclipseModel=GradleUtil.getExtension(project,EclipseModel.class);
  EclipseClasspath eclipseClasspath=eclipseModel.getClasspath();
  FileContentMerger fileContentMerger=eclipseClasspath.getFile();
  Closure<Void> closure=new Closure<Void>(project){
    @SuppressWarnings("unused") public void doCall(    Classpath classpath){
      List<ClasspathEntry> classpathEntries=classpath.getEntries();
      Iterator<ClasspathEntry> iterator=classpathEntries.iterator();
      while (iterator.hasNext()) {
        ClasspathEntry classpathEntry=iterator.next();
        if (!(classpathEntry instanceof AbstractClasspathEntry)) {
          continue;
        }
        AbstractClasspathEntry abstractClasspathEntry=(AbstractClasspathEntry)classpathEntry;
        String kind=abstractClasspathEntry.getKind();
        String path=abstractClasspathEntry.getPath();
        if (kind.equals("lib") && path.endsWith(".pom")) {
          iterator.remove();
        }
      }
    }
  }
;
  fileContentMerger.whenMerged(closure);
}
