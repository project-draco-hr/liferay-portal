{
  expression.addOperator(expression.new Operator("+",20,true){
    @Override public BigDecimal eval(    BigDecimal parameter1,    BigDecimal parameter2){
      return new BigDecimal(parameter1.doubleValue() + parameter2.doubleValue());
    }
  }
);
  expression.addOperator(expression.new Operator("-",20,true){
    @Override public BigDecimal eval(    BigDecimal parameter1,    BigDecimal parameter2){
      return new BigDecimal(parameter1.doubleValue() - parameter2.doubleValue());
    }
  }
);
  expression.addOperator(expression.new Operator("*",30,true){
    @Override public BigDecimal eval(    BigDecimal parameter1,    BigDecimal parameter2){
      return new BigDecimal(parameter1.doubleValue() * parameter2.doubleValue());
    }
  }
);
  expression.addOperator(expression.new Operator("/",30,true){
    @Override public BigDecimal eval(    BigDecimal parameter1,    BigDecimal parameter2){
      return new BigDecimal(parameter1.doubleValue() / parameter2.doubleValue());
    }
  }
);
  expression.addOperator(expression.new Operator("%",30,true){
    @Override public BigDecimal eval(    BigDecimal parameter1,    BigDecimal parameter2){
      return new BigDecimal(parameter1.doubleValue() % parameter2.doubleValue());
    }
  }
);
  expression.addOperator(expression.new Operator("^",40,false){
    @Override public BigDecimal eval(    BigDecimal parameter1,    BigDecimal parameter2){
      double pow=Math.pow(parameter1.doubleValue(),parameter2.doubleValue());
      return new BigDecimal(pow);
    }
  }
);
}
