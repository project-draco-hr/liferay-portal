{
  final TestClassLoader testClassLoader=new TestClassLoader();
  AbstractMessagingConfigurator pluginMessagingConfigurator=new AbstractMessagingConfigurator(){
    @Override protected ClassLoader getOperatingClassloader(){
      return testClassLoader;
    }
  }
;
  Set<DestinationConfiguration> destinationConfigurations=new HashSet<>();
  destinationConfigurations.add(DestinationConfiguration.createSynchronousDestinationConfiguration("liferay/plugintest1"));
  destinationConfigurations.add(DestinationConfiguration.createParallelDestinationConfiguration("liferay/plugintest2"));
  pluginMessagingConfigurator.setDestinationConfigurations(destinationConfigurations);
  Map<String,List<MessageListener>> messageListeners=new HashMap<>();
  List<MessageListener> messageListenersList=new ArrayList<>();
  messageListeners.put("liferay/plugintest1",messageListenersList);
  messageListenersList.add(new TestClassLoaderMessageListener(testClassLoader));
  pluginMessagingConfigurator.setMessageListeners(messageListeners);
  pluginMessagingConfigurator.afterPropertiesSet();
  Registry registry=RegistryUtil.getRegistry();
  Filter filter=registry.getFilter("(&(objectClass=com.liferay.portal.kernel.messaging.Destination)" + "(destination.name=*plugintest*))");
  ServiceTracker<Destination,Destination> serviceTracker=registry.trackServices(filter);
  serviceTracker.open();
  try {
    while (ArrayUtil.isEmpty(serviceTracker.getServices())) {
      Thread.sleep(1000);
    }
    Object[] services=serviceTracker.getServices();
    Assert.assertEquals(2,services.length);
    for (    Object service : services) {
      Destination destination=(Destination)service;
      String destinationName=destination.getName();
      Assert.assertTrue(destinationName.contains("plugintest1"));
      if (destinationName.equals("liferay/plugintest1")) {
        Assert.assertEquals(1,destination.getMessageListenerCount());
      }
      if (destination.getMessageListenerCount() > 0) {
        Message message=new Message();
        message.setDestinationName(destinationName);
        destination.send(message);
      }
    }
  }
 catch (  Exception e) {
    Assert.fail(StackTraceUtil.getStackTrace(e));
  }
}
