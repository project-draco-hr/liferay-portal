{
  for (int i=0; i < 6; i++) {
    java.lang.reflect.Method method=_interfaceMethods[i];
    int expectedMethodValue=expectedMethodValues[i];
    Method methodAnnotation=AnnotationLocator.locate(method,clazz,Method.class);
    if (methodAnnotation == null) {
      assertEquals("@Method : " + clazz.getName(),-1,expectedMethodValue);
      continue;
    }
    assertEquals("@Method : " + method.getName() + "()@"+ clazz.getName(),expectedMethodValue,methodAnnotation.value());
    try {
      method=clazz.getDeclaredMethod(method.getName(),method.getParameterTypes());
      methodAnnotation=AnnotationLocator.locate(method,null,Method.class);
      assertEquals(method.getName() + "()@" + clazz.getName(),expectedMethodValue,methodAnnotation.value());
    }
 catch (    Exception e) {
    }
  }
  for (int i=0; i < 6; i++) {
    java.lang.reflect.Method method=_interfaceMethods[i];
    int expectedMixValue=expectedMixValues[i];
    Mix mixAnnotation=AnnotationLocator.locate(method,clazz,Mix.class);
    if (mixAnnotation == null) {
      assertEquals("@Mix : " + clazz.getName(),-1,expectedMixValue);
      continue;
    }
    assertEquals("@Mix : " + method.getName() + "()@"+ clazz.getName(),expectedMixValue,mixAnnotation.value());
    try {
      method=clazz.getDeclaredMethod(method.getName(),method.getParameterTypes());
      mixAnnotation=AnnotationLocator.locate(method,null,Mix.class);
      assertEquals(method.getName() + "()@" + clazz.getName(),expectedMixValue,mixAnnotation.value());
    }
 catch (    Exception e) {
    }
  }
  for (int i=0; i < 6; i++) {
    java.lang.reflect.Method method=_interfaceMethods[i];
    int expectedTypeValue=expectedTypeValues[i];
    Type typeAnnotation=AnnotationLocator.locate(method,clazz,Type.class);
    if (typeAnnotation == null) {
      assertEquals("@Type : " + clazz.getName(),-1,expectedTypeValue);
      continue;
    }
    assertEquals("@Type : " + method.getName() + "()@"+ clazz.getName(),expectedTypeValue,typeAnnotation.value());
    try {
      method=clazz.getDeclaredMethod(method.getName(),method.getParameterTypes());
      typeAnnotation=AnnotationLocator.locate(method,null,Type.class);
      assertEquals(method.getName() + "()@" + clazz.getName(),expectedTypeValue,typeAnnotation.value());
    }
 catch (    Exception e) {
    }
  }
}
