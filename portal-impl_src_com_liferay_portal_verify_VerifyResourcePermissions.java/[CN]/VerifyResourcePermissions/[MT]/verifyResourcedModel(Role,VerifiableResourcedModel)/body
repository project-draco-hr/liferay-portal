{
  StringBundler countSql=new StringBundler(4);
  countSql.append("select count(*) from ");
  countSql.append(verifiableResourcedModel.getTableName());
  countSql.append(" where companyId = ");
  countSql.append(role.getCompanyId());
  StringBundler selectSql=new StringBundler(8);
  selectSql.append("select ");
  selectSql.append(verifiableResourcedModel.getPrimaryKeyColumnName());
  selectSql.append(", ");
  selectSql.append(verifiableResourcedModel.getUserIdColumnName());
  selectSql.append(" from ");
  selectSql.append(verifiableResourcedModel.getTableName());
  selectSql.append(" where companyId = ");
  selectSql.append(role.getCompanyId());
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  int total=0;
  try {
    con=DataAccess.getUpgradeOptimizedConnection();
    try {
      ps=con.prepareStatement(countSql.toString());
      rs=ps.executeQuery();
      if (rs.next()) {
        total=rs.getInt(1);
      }
    }
  finally {
      DataAccess.cleanUp(null,ps,rs);
    }
    ps=con.prepareStatement(selectSql.toString());
    rs=ps.executeQuery();
    for (int i=0; rs.next(); i++) {
      long primKey=rs.getLong(verifiableResourcedModel.getPrimaryKeyColumnName());
      long userId=rs.getLong(verifiableResourcedModel.getUserIdColumnName());
      verifyResourcedModel(role.getCompanyId(),verifiableResourcedModel.getModelName(),primKey,role,userId,i,total);
    }
  }
  finally {
    DataAccess.cleanUp(con,ps,rs);
  }
}
