{
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_1));
  Assert.assertNull(_memoryPortalCache.get(_KEY_2));
  _memoryPortalCache.put(_KEY_2,_VALUE_2);
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_memoryPortalCache.get(_KEY_2));
  _defaultPortalCacheListener.assertActionsCount(1);
  _defaultPortalCacheListener.assertPut(_KEY_2,_VALUE_2);
  _defaultPortalCacheListener.reset();
  _defaultPortalCacheReplicator.assertActionsCount(1);
  _defaultPortalCacheReplicator.assertPut(_KEY_2,_VALUE_2);
  _defaultPortalCacheReplicator.reset();
  _memoryPortalCache.put(_KEY_2,_VALUE_1,10);
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_2));
  _defaultPortalCacheListener.assertActionsCount(1);
  _defaultPortalCacheListener.assertUpdated(_KEY_2,_VALUE_1,10);
  _defaultPortalCacheListener.reset();
  _defaultPortalCacheReplicator.assertActionsCount(1);
  _defaultPortalCacheReplicator.assertUpdated(_KEY_2,_VALUE_1,10);
  _defaultPortalCacheReplicator.reset();
  try {
    _memoryPortalCache.put(null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Key is null",npe.getMessage());
  }
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_2));
  _defaultPortalCacheListener.assertActionsCount(0);
  _defaultPortalCacheReplicator.assertActionsCount(0);
  try {
    _memoryPortalCache.put(_KEY_1,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Value is null",npe.getMessage());
  }
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_2));
  _defaultPortalCacheListener.assertActionsCount(0);
  _defaultPortalCacheReplicator.assertActionsCount(0);
  try {
    _memoryPortalCache.put(_KEY_1,_VALUE_1,-1);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Time to live is negative",iae.getMessage());
  }
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_2));
  _defaultPortalCacheListener.assertActionsCount(0);
  _defaultPortalCacheReplicator.assertActionsCount(0);
  PortalCacheHelperUtil.putWithoutReplicator(_memoryPortalCache,_KEY_2,_VALUE_2);
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_memoryPortalCache.get(_KEY_2));
  _defaultPortalCacheListener.assertActionsCount(1);
  _defaultPortalCacheListener.assertUpdated(_KEY_2,_VALUE_2);
  _defaultPortalCacheListener.reset();
  _defaultPortalCacheReplicator.assertActionsCount(0);
  PortalCacheHelperUtil.putWithoutReplicator(_memoryPortalCache,_KEY_2,_VALUE_1,10);
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_memoryPortalCache.get(_KEY_2));
  _defaultPortalCacheListener.assertActionsCount(1);
  _defaultPortalCacheListener.assertUpdated(_KEY_2,_VALUE_1,10);
  _defaultPortalCacheListener.reset();
  _defaultPortalCacheReplicator.assertActionsCount(0);
}
