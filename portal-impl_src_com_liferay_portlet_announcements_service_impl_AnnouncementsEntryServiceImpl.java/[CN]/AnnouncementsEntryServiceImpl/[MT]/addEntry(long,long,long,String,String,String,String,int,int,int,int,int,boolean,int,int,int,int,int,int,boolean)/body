{
  PermissionChecker permissionChecker=getPermissionChecker();
  if (alert) {
    String portletId=PortletProviderUtil.getPortletId(AnnouncementsConstants.ALERTS_CLASSNAME,PortletProvider.Action.MANAGE);
    AnnouncementsEntryPermission.check(permissionChecker,plid,portletId,ActionKeys.ADD_ENTRY);
  }
 else {
    String portletId=PortletProviderUtil.getPortletId(AnnouncementsEntry.class.getName(),PortletProvider.Action.MANAGE);
    AnnouncementsEntryPermission.check(permissionChecker,plid,portletId,ActionKeys.ADD_ENTRY);
  }
  if (classNameId == 0) {
    if (!PortalPermissionUtil.contains(permissionChecker,ActionKeys.ADD_GENERAL_ANNOUNCEMENTS)) {
      throw new PrincipalException.MustHavePermission(permissionChecker,PortletKeys.PORTAL,PortletKeys.PORTAL,ActionKeys.ADD_GENERAL_ANNOUNCEMENTS);
    }
  }
 else {
    String className=PortalUtil.getClassName(classNameId);
    if (className.equals(Group.class.getName()) && !GroupPermissionUtil.contains(permissionChecker,classPK,ActionKeys.MANAGE_ANNOUNCEMENTS)) {
      throw new PrincipalException.MustHavePermission(permissionChecker,className,classPK,ActionKeys.MANAGE_ANNOUNCEMENTS);
    }
    if (className.equals(Organization.class.getName()) && !OrganizationPermissionUtil.contains(permissionChecker,classPK,ActionKeys.MANAGE_ANNOUNCEMENTS)) {
      throw new PrincipalException.MustHavePermission(permissionChecker,className,classPK,ActionKeys.MANAGE_ANNOUNCEMENTS);
    }
    if (className.equals(Role.class.getName())) {
      Role role=roleLocalService.getRole(classPK);
      if (role.isTeam()) {
        Team team=teamLocalService.getTeam(role.getClassPK());
        if (!GroupPermissionUtil.contains(permissionChecker,team.getGroupId(),ActionKeys.MANAGE_ANNOUNCEMENTS) || !RolePermissionUtil.contains(permissionChecker,team.getGroupId(),classPK,ActionKeys.MANAGE_ANNOUNCEMENTS)) {
          throw new PrincipalException.MustHavePermission(permissionChecker,Team.class.getName(),classPK,ActionKeys.MANAGE_ANNOUNCEMENTS);
        }
      }
 else       if (!RolePermissionUtil.contains(permissionChecker,classPK,ActionKeys.MANAGE_ANNOUNCEMENTS)) {
        throw new PrincipalException.MustHavePermission(permissionChecker,className,classPK,ActionKeys.MANAGE_ANNOUNCEMENTS);
      }
    }
    if (className.equals(UserGroup.class.getName()) && !UserGroupPermissionUtil.contains(permissionChecker,classPK,ActionKeys.MANAGE_ANNOUNCEMENTS)) {
      throw new PrincipalException.MustHavePermission(permissionChecker,className,classPK,ActionKeys.MANAGE_ANNOUNCEMENTS);
    }
  }
  return announcementsEntryLocalService.addEntry(getUserId(),classNameId,classPK,title,content,url,type,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,displayImmediately,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,priority,alert);
}
