{
  long pk=RandomTestUtil.nextLong();
  Ticket newTicket=_persistence.create(pk);
  newTicket.setMvccVersion(RandomTestUtil.nextLong());
  newTicket.setCompanyId(RandomTestUtil.nextLong());
  newTicket.setCreateDate(RandomTestUtil.nextDate());
  newTicket.setClassNameId(RandomTestUtil.nextLong());
  newTicket.setClassPK(RandomTestUtil.nextLong());
  newTicket.setKey(RandomTestUtil.randomString());
  newTicket.setType(RandomTestUtil.nextInt());
  newTicket.setExtraInfo(RandomTestUtil.randomString());
  newTicket.setExpirationDate(RandomTestUtil.nextDate());
  _persistence.update(newTicket);
  Ticket existingTicket=_persistence.findByPrimaryKey(newTicket.getPrimaryKey());
  Assert.assertEquals(existingTicket.getMvccVersion(),newTicket.getMvccVersion());
  Assert.assertEquals(existingTicket.getTicketId(),newTicket.getTicketId());
  Assert.assertEquals(existingTicket.getCompanyId(),newTicket.getCompanyId());
  Assert.assertEquals(Time.getShortTimestamp(existingTicket.getCreateDate()),Time.getShortTimestamp(newTicket.getCreateDate()));
  Assert.assertEquals(existingTicket.getClassNameId(),newTicket.getClassNameId());
  Assert.assertEquals(existingTicket.getClassPK(),newTicket.getClassPK());
  Assert.assertEquals(existingTicket.getKey(),newTicket.getKey());
  Assert.assertEquals(existingTicket.getType(),newTicket.getType());
  Assert.assertEquals(existingTicket.getExtraInfo(),newTicket.getExtraInfo());
  Assert.assertEquals(Time.getShortTimestamp(existingTicket.getExpirationDate()),Time.getShortTimestamp(newTicket.getExpirationDate()));
}
