{
  CMISCriterion cmisCriterion=null;
  boolean wildcard=CMISSimpleExpressionOperator.LIKE == cmisSimpleExpressionOperator;
  if (field.equals(Field.CONTENT)) {
    value=CMISParameterValueUtil.formatParameterValue(field,value);
    cmisCriterion=new CMISContainsExpression(value);
  }
 else   if (field.equals(Field.FOLDER_ID)) {
    long folderId=GetterUtil.getLong(value);
    try {
      RepositoryEntry repositoryEntry=RepositoryEntryLocalServiceUtil.fetchRepositoryEntry(folderId);
      if (repositoryEntry != null) {
        String objectId=repositoryEntry.getMappedId();
        objectId=CMISParameterValueUtil.formatParameterValue(field,objectId,wildcard);
        cmisCriterion=new CMISInFolderExpression(objectId);
      }
    }
 catch (    SystemException se) {
      _log.error(se,se);
    }
  }
 else   if (field.equals(Field.USER_ID)) {
    try {
      long userId=GetterUtil.getLong(value);
      User user=UserLocalServiceUtil.getUserById(userId);
      String screenName=CMISParameterValueUtil.formatParameterValue(field,user.getScreenName(),wildcard);
      cmisCriterion=new CMISSimpleExpression(PropertyIds.CREATED_BY,screenName,cmisSimpleExpressionOperator);
    }
 catch (    PortalException pe) {
      if (_log.isWarnEnabled()) {
        _log.warn(pe,pe);
      }
    }
catch (    SystemException se) {
      _log.error(se,se);
    }
  }
 else {
    value=CMISParameterValueUtil.formatParameterValue(field,value,wildcard);
    cmisCriterion=new CMISSimpleExpression(_fieldNameMap.get(field),value,cmisSimpleExpressionOperator);
  }
  return cmisCriterion;
}
