{
  File tempFile=new File("tempFile");
  Assert.assertTrue(tempFile.createNewFile());
  AutoDeleteFileInputStream autoRemoveFileInputStream=new AutoDeleteFileInputStream(tempFile);
  final AtomicInteger checkDeleteCount=new AtomicInteger();
  SecurityManager securityManager=new SecurityManager(){
    @Override public void checkDelete(    String file){
      if (file.contains("tempFile")) {
        checkDeleteCount.getAndIncrement();
      }
    }
    @Override public void checkPermission(    Permission permission){
    }
  }
;
  System.setSecurityManager(securityManager);
  try {
    autoRemoveFileInputStream.close();
  }
  finally {
    System.setSecurityManager(null);
  }
  Assert.assertFalse(tempFile.exists());
  Assert.assertEquals(1,checkDeleteCount.get());
  checkDeleteCount.set(0);
  Assert.assertTrue(tempFile.createNewFile());
  autoRemoveFileInputStream=new AutoDeleteFileInputStream(tempFile);
  Assert.assertTrue(tempFile.delete());
  System.setSecurityManager(securityManager);
  try {
    autoRemoveFileInputStream.close();
  }
  finally {
    System.setSecurityManager(null);
  }
  Assert.assertFalse(tempFile.exists());
  Assert.assertEquals(2,checkDeleteCount.get());
  Set<String> files=ReflectionTestUtil.getFieldValue(Class.forName("java.io.DeleteOnExitHook"),"files");
  Assert.assertTrue(files.contains(tempFile.getPath()));
}
