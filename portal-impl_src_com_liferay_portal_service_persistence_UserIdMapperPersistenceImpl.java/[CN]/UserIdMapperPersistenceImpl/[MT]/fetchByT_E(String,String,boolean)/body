{
  Object[] finderArgs=new Object[]{type,externalUserId};
  Object result=null;
  if (retrieveFromCache) {
    result=FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_T_E,finderArgs,this);
  }
  if (result == null) {
    Session session=null;
    try {
      session=openSession();
      StringBundler query=new StringBundler(11);
      query.append("SELECT userIdMapper FROM UserIdMapper userIdMapper WHERE ");
      if (type == null) {
        query.append("userIdMapper.type IS NULL");
      }
 else {
        if (type.equals(StringPool.BLANK)) {
          query.append("(userIdMapper.type IS NULL OR ");
        }
        query.append("userIdMapper.type = ?");
        if (type.equals(StringPool.BLANK)) {
          query.append(")");
        }
      }
      query.append(" AND ");
      if (externalUserId == null) {
        query.append("userIdMapper.externalUserId IS NULL");
      }
 else {
        if (externalUserId.equals(StringPool.BLANK)) {
          query.append("(userIdMapper.externalUserId IS NULL OR ");
        }
        query.append("userIdMapper.externalUserId = ?");
        if (externalUserId.equals(StringPool.BLANK)) {
          query.append(")");
        }
      }
      query.append(" ");
      Query q=session.createQuery(query.toString());
      QueryPos qPos=QueryPos.getInstance(q);
      if (type != null) {
        qPos.add(type);
      }
      if (externalUserId != null) {
        qPos.add(externalUserId);
      }
      List<UserIdMapper> list=q.list();
      result=list;
      UserIdMapper userIdMapper=null;
      if (list.isEmpty()) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_T_E,finderArgs,list);
      }
 else {
        userIdMapper=list.get(0);
        cacheResult(userIdMapper);
        if ((userIdMapper.getType() == null) || !userIdMapper.getType().equals(type) || (userIdMapper.getExternalUserId() == null)|| !userIdMapper.getExternalUserId().equals(externalUserId)) {
          FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_T_E,finderArgs,userIdMapper);
        }
      }
      return userIdMapper;
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (result == null) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_T_E,finderArgs,new ArrayList<UserIdMapper>());
      }
      closeSession(session);
    }
  }
 else {
    if (result instanceof List<?>) {
      return null;
    }
 else {
      return (UserIdMapper)result;
    }
  }
}
