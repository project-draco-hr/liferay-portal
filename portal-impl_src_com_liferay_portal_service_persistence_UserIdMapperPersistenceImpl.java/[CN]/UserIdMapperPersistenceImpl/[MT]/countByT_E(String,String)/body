{
  FinderPath finderPath=FINDER_PATH_COUNT_BY_T_E;
  Object[] finderArgs=new Object[]{type,externalUserId};
  Long count=(Long)FinderCacheUtil.getResult(finderPath,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler(3);
    query.append(_SQL_COUNT_USERIDMAPPER_WHERE);
    boolean bindType=false;
    if (type == null) {
      query.append(_FINDER_COLUMN_T_E_TYPE_1);
    }
 else     if (type.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_T_E_TYPE_3);
    }
 else {
      bindType=true;
      query.append(_FINDER_COLUMN_T_E_TYPE_2);
    }
    boolean bindExternalUserId=false;
    if (externalUserId == null) {
      query.append(_FINDER_COLUMN_T_E_EXTERNALUSERID_1);
    }
 else     if (externalUserId.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_T_E_EXTERNALUSERID_3);
    }
 else {
      bindExternalUserId=true;
      query.append(_FINDER_COLUMN_T_E_EXTERNALUSERID_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindType) {
        qPos.add(type);
      }
      if (bindExternalUserId) {
        qPos.add(externalUserId);
      }
      count=(Long)q.uniqueResult();
      FinderCacheUtil.putResult(finderPath,finderArgs,count);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(finderPath,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return count.intValue();
}
