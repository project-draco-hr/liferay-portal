{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long roleId=ParamUtil.getLong(actionRequest,"roleId");
  Role role=RoleLocalServiceUtil.getRole(roleId);
  if (role.getName().equals(RoleConstants.ADMINISTRATOR) || role.getName().equals(RoleConstants.OWNER) || role.getName().equals(RoleConstants.COMMUNITY_ADMINISTRATOR)|| role.getName().equals(RoleConstants.COMMUNITY_OWNER)|| role.getName().equals(RoleConstants.ORGANIZATION_ADMINISTRATOR)|| role.getName().equals(RoleConstants.ORGANIZATION_OWNER)) {
    throw new RolePermissionsException(role.getName());
  }
  String portletResource=ParamUtil.getString(actionRequest,"portletResource");
  String[] modelResources=StringUtil.split(ParamUtil.getString(actionRequest,"modelResources"));
  boolean showModelResources=ParamUtil.getBoolean(actionRequest,"showModelResources");
  Map<String,List<String>> resourceActionsMap=new HashMap<String,List<String>>();
  if (showModelResources) {
    for (    String modelResource : modelResources) {
      resourceActionsMap.put(modelResource,ResourceActionsUtil.getResourceActions(null,modelResource));
    }
  }
 else   if (Validator.isNotNull(portletResource)) {
    resourceActionsMap.put(portletResource,ResourceActionsUtil.getResourceActions(portletResource,null));
  }
  String[] selectedTargets=StringUtil.split(ParamUtil.getString(actionRequest,"selectedTargets"));
  for (  Map.Entry<String,List<String>> entry : resourceActionsMap.entrySet()) {
    String selResource=entry.getKey();
    List<String> actions=entry.getValue();
    actions=ListUtil.sort(actions,new ActionComparator(themeDisplay.getCompanyId(),themeDisplay.getLocale()));
    for (    String actionId : actions) {
      String target=selResource + actionId;
      boolean selected=ArrayUtil.contains(selectedTargets,target);
      String[] groupIds=StringUtil.split(ParamUtil.getString(actionRequest,"groupIds" + target));
      groupIds=ArrayUtil.distinct(groupIds);
      int scope=ResourceConstants.SCOPE_COMPANY;
      if ((role.getType() == RoleConstants.TYPE_COMMUNITY) || (role.getType() == RoleConstants.TYPE_ORGANIZATION)) {
        scope=ResourceConstants.SCOPE_GROUP_TEMPLATE;
      }
 else {
        if (groupIds.length > 0) {
          scope=ResourceConstants.SCOPE_GROUP;
        }
      }
      if (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6) {
        updateAction_6(role,themeDisplay.getScopeGroupId(),selResource,actionId,selected,scope,groupIds);
      }
 else {
        updateAction_1to5(role,themeDisplay.getScopeGroupId(),selResource,actionId,selected,scope,groupIds);
      }
    }
  }
  SessionMessages.add(actionRequest,"permissionsUpdated");
  String redirect=ParamUtil.getString(actionRequest,"redirect") + "&" + Constants.CMD+ "="+ Constants.VIEW;
  actionResponse.sendRedirect(redirect);
}
