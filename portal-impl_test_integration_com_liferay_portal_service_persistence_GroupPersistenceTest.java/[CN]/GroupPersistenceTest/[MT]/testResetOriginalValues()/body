{
  if (!PropsValues.HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE) {
    return;
  }
  Group newGroup=addGroup();
  _persistence.clearCache();
  Group existingGroup=_persistence.findByPrimaryKey(newGroup.getPrimaryKey());
  Assert.assertTrue(Validator.equals(existingGroup.getUuid(),ReflectionTestUtil.invoke(existingGroup,"getOriginalUuid",new Class<?>[0])));
  Assert.assertEquals(existingGroup.getGroupId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalGroupId",new Class<?>[0]));
  Assert.assertEquals(existingGroup.getLiveGroupId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalLiveGroupId",new Class<?>[0]));
  Assert.assertEquals(existingGroup.getCompanyId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingGroup.getGroupKey(),ReflectionTestUtil.invoke(existingGroup,"getOriginalGroupKey",new Class<?>[0])));
  Assert.assertEquals(existingGroup.getCompanyId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingGroup.getFriendlyURL(),ReflectionTestUtil.invoke(existingGroup,"getOriginalFriendlyURL",new Class<?>[0])));
  Assert.assertEquals(existingGroup.getCompanyId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertEquals(existingGroup.getClassNameId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalClassNameId",new Class<?>[0]));
  Assert.assertEquals(existingGroup.getClassPK(),ReflectionTestUtil.invoke(existingGroup,"getOriginalClassPK",new Class<?>[0]));
  Assert.assertEquals(existingGroup.getCompanyId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertEquals(existingGroup.getLiveGroupId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalLiveGroupId",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingGroup.getGroupKey(),ReflectionTestUtil.invoke(existingGroup,"getOriginalGroupKey",new Class<?>[0])));
  Assert.assertEquals(existingGroup.getCompanyId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalCompanyId",new Class<?>[0]));
  Assert.assertEquals(existingGroup.getClassNameId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalClassNameId",new Class<?>[0]));
  Assert.assertEquals(existingGroup.getLiveGroupId(),ReflectionTestUtil.invoke(existingGroup,"getOriginalLiveGroupId",new Class<?>[0]));
  Assert.assertTrue(Validator.equals(existingGroup.getGroupKey(),ReflectionTestUtil.invoke(existingGroup,"getOriginalGroupKey",new Class<?>[0])));
}
