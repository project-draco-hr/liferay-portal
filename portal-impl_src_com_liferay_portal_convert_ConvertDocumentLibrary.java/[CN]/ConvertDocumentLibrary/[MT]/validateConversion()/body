{
  String sourceStoreClassName=getSourceStoreClassName();
  if (!sourceStoreClassName.endsWith(_FILE_SYSTEM_STORE_SUFFIX)) {
    return;
  }
  String targetStoreClassName=getTargetStoreClassName();
  if (!targetStoreClassName.endsWith(_FILE_SYSTEM_STORE_SUFFIX)) {
    return;
  }
  String advancedFileSystemStoreRootDir=PropsValues.DL_STORE_ADVANCED_FILE_SYSTEM_ROOT_DIR;
  String fileSystemStoreRootDir=PropsValues.DL_STORE_FILE_SYSTEM_ROOT_DIR;
  if (Validator.isBlank(advancedFileSystemStoreRootDir) || Validator.isBlank(fileSystemStoreRootDir)) {
    if (_log.isWarnEnabled()) {
      StringBundler sb=new StringBundler(5);
      sb.append("Either ");
      sb.append(PropsKeys.DL_STORE_ADVANCED_FILE_SYSTEM_ROOT_DIR);
      sb.append(" or ");
      sb.append(PropsKeys.DL_STORE_FILE_SYSTEM_ROOT_DIR);
      sb.append(" is null; set both of them to a valid path and retry.");
      _log.warn(sb.toString());
    }
    throw new InvalidFileSystemStoreRootDirException();
  }
  boolean identicalRootDirs=true;
  if (OSDetector.isWindows()) {
    identicalRootDirs=StringUtil.equalsIgnoreCase(advancedFileSystemStoreRootDir,fileSystemStoreRootDir);
  }
 else {
    identicalRootDirs=advancedFileSystemStoreRootDir.equals(fileSystemStoreRootDir);
  }
  if (identicalRootDirs) {
    if (_log.isWarnEnabled()) {
      StringBundler sb=new StringBundler(5);
      sb.append("Both ");
      sb.append(PropsKeys.DL_STORE_ADVANCED_FILE_SYSTEM_ROOT_DIR);
      sb.append(" and ");
      sb.append(PropsKeys.DL_STORE_FILE_SYSTEM_ROOT_DIR);
      sb.append(" refer to the same path.");
      _log.warn(sb.toString());
    }
    throw new InvalidFileSystemStoreRootDirException();
  }
}
