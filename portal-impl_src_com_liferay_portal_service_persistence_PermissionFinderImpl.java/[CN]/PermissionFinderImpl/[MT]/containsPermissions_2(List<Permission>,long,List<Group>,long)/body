{
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    String sql=null;
    StringBuilder sb=new StringBuilder();
    if (groups.size() > 0) {
      sb.append("(");
      sb.append(CustomSQLUtil.get(COUNT_BY_GROUPS_ROLES));
      sb.append(") ");
      sql=sb.toString();
      sql=StringUtil.replace(sql,"[$PERMISSION_IDS$]",getPermissionIds(permissions,"Roles_Permissions"));
      sql=StringUtil.replace(sql,"[$GROUP_IDS$]",getGroupIds(groups,"Groups_Roles"));
      sb=new StringBuilder();
      sb.append(sql);
      sb.append("UNION ALL (");
      sb.append(CustomSQLUtil.get(COUNT_BY_GROUPS_PERMISSIONS));
      sb.append(") ");
      sql=sb.toString();
      sql=StringUtil.replace(sql,"[$PERMISSION_IDS$]",getPermissionIds(permissions,"Groups_Permissions"));
      sql=StringUtil.replace(sql,"[$GROUP_IDS$]",getGroupIds(groups,"Groups_Permissions"));
      sb=new StringBuilder();
      sb.append(sql);
      sb.append("UNION ALL ");
    }
    sb.append("(");
    sb.append(CustomSQLUtil.get(COUNT_BY_USERS_ROLES));
    sb.append(") ");
    sql=sb.toString();
    sql=StringUtil.replace(sql,"[$PERMISSION_IDS$]",getPermissionIds(permissions,"Roles_Permissions"));
    sb=new StringBuilder();
    sb.append(sql);
    sb.append("UNION ALL (");
    sb.append(CustomSQLUtil.get(COUNT_BY_USER_GROUP_ROLE));
    sb.append(") ");
    sql=sb.toString();
    sql=StringUtil.replace(sql,"[$PERMISSION_IDS$]",getPermissionIds(permissions,"Roles_Permissions"));
    sb=new StringBuilder();
    sb.append(sql);
    sb.append("UNION ALL (");
    sb.append(CustomSQLUtil.get(COUNT_BY_USERS_PERMISSIONS));
    sb.append(") ");
    sql=sb.toString();
    sql=StringUtil.replace(sql,"[$PERMISSION_IDS$]",getPermissionIds(permissions,"Users_Permissions"));
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(HibernateUtil.getCountColumnName(),Hibernate.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    if (groups.size() > 0) {
      setPermissionIds(qPos,permissions);
      setGroupIds(qPos,groups);
      setPermissionIds(qPos,permissions);
      setGroupIds(qPos,groups);
    }
    setPermissionIds(qPos,permissions);
    qPos.add(userId);
    qPos.add(groupId);
    setPermissionIds(qPos,permissions);
    qPos.add(userId);
    setPermissionIds(qPos,permissions);
    qPos.add(userId);
    Iterator<Long> itr=q.list().iterator();
    while (itr.hasNext()) {
      Long count=itr.next();
      if ((count != null) && (count.intValue() > 0)) {
        return true;
      }
    }
    return false;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
}
