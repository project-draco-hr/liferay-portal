{
  return new Generator(){
    int year, month, date;
    /** 
 * ndays in the last month encountered 
 */
    int nDays;
{
      DTBuilder dtStartMinus1B=new DTBuilder(dtStart);
      dtStartMinus1B.day-=interval;
      DateValue dtStartMinus1=dtStartMinus1B.toDate();
      year=dtStartMinus1.year();
      month=dtStartMinus1.month();
      date=dtStartMinus1.day();
      nDays=TimeUtils.monthLength(year,month);
    }
    @Override boolean generate(    DTBuilder builder){
      int ndate;
      if (year == builder.year && month == builder.month) {
        ndate=date + interval;
        if (ndate > nDays) {
          return false;
        }
      }
 else {
        nDays=TimeUtils.monthLength(builder.year,builder.month);
        if (interval != 1) {
          int daysBetween=TimeUtils.daysBetween(new DateValueImpl(builder.year,builder.month,1),new DateValueImpl(year,month,date));
          ndate=((interval - (daysBetween % interval)) % interval) + 1;
          if (ndate > nDays) {
            return false;
          }
        }
 else {
          ndate=1;
        }
        year=builder.year;
        month=builder.month;
      }
      date=builder.day=ndate;
      return true;
    }
    @Override public String toString(){
      return "serialDayGenerator:" + interval;
    }
  }
;
}
