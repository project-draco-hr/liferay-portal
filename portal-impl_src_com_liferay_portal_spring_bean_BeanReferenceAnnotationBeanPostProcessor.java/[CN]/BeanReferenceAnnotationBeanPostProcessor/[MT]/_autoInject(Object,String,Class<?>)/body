{
  if ((beanClass == null) || beanClass.isInterface()) {
    return;
  }
  String className=beanClass.getName();
  if (className.equals(_JAVA_LANG_OBJECT) || className.startsWith(_ORG_SPRINGFRAMEWORK)) {
    return;
  }
  Field[] fields=beanClass.getDeclaredFields();
  for (  Field field : fields) {
    BeanReference beanReference=field.getAnnotation(BeanReference.class);
    String referencedBeanName=null;
    Class<?> referencedBeanType=null;
    if (beanReference != null) {
      referencedBeanName=beanReference.name();
      referencedBeanType=beanReference.type();
    }
 else {
      continue;
    }
    if (!Object.class.equals(referencedBeanType)) {
      referencedBeanName=referencedBeanType.getName();
    }
    Object referencedBean=_beans.get(referencedBeanName);
    if (referencedBean == null) {
      try {
        referencedBean=_beanFactory.getBean(referencedBeanName);
      }
 catch (      NoSuchBeanDefinitionException nsbde) {
        try {
          referencedBean=PortalBeanLocatorUtil.locate(referencedBeanName);
        }
 catch (        BeanLocatorException ble) {
          StringWriter stringWriter=new StringWriter();
          PrintWriter printWriter=new PrintWriter(stringWriter);
          printWriter.print("BeanFactory could not find bean: ");
          nsbde.printStackTrace(printWriter);
          printWriter.print(" and PortalBeanLocator failed with: ");
          printWriter.append(ble.getMessage());
          printWriter.close();
          throw new BeanLocatorException(stringWriter.toString(),ble);
        }
      }
      _beans.put(referencedBeanName,referencedBean);
    }
    ReflectionUtils.makeAccessible(field);
    try {
      field.set(targetBean,referencedBean);
    }
 catch (    Throwable t) {
      throw new BeanCreationException(targetBeanName,"Could not inject BeanReference fields",t);
    }
  }
  _autoInject(targetBean,targetBeanName,beanClass.getSuperclass());
}
