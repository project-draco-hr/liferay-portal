{
  Assert.assertEquals(_VALUE_1,_ehcachePortalCache.get(_KEY_1));
  Assert.assertNull(_ehcachePortalCache.get(_KEY_2));
  int timeToLive=600;
  Ehcache ehcache=_ehcachePortalCache.ehcache;
  _ehcachePortalCache.put(_KEY_2,_VALUE_2,timeToLive);
  Element element=ehcache.get(_KEY_2);
  Assert.assertEquals(_KEY_2,element.getObjectKey());
  Assert.assertEquals(_VALUE_2,element.getObjectValue());
  Assert.assertEquals(timeToLive,element.getTimeToLive());
  _defaultCacheListener.assertPut(_KEY_2,_VALUE_2,timeToLive);
  _defaultCacheListener.reset();
  _defaultCacheReplicator.assertPut(_KEY_2,_VALUE_2,timeToLive);
  _defaultCacheReplicator.reset();
  ehcache.removeElement(element);
  _ehcachePortalCache.putIfAbsent(_KEY_2,_VALUE_2,timeToLive);
  element=ehcache.get(_KEY_2);
  Assert.assertEquals(_KEY_2,element.getObjectKey());
  Assert.assertEquals(_VALUE_2,element.getObjectValue());
  Assert.assertEquals(timeToLive,element.getTimeToLive());
  _defaultCacheListener.assertPut(_KEY_2,_VALUE_2,timeToLive);
  _defaultCacheListener.reset();
  _defaultCacheReplicator.assertPut(_KEY_2,_VALUE_2,timeToLive);
  _defaultCacheReplicator.reset();
  ehcache.removeElement(element);
  _ehcachePortalCache.replace(_KEY_1,_VALUE_2,timeToLive);
  element=ehcache.get(_KEY_1);
  Assert.assertEquals(_KEY_1,element.getObjectKey());
  Assert.assertEquals(_VALUE_2,element.getObjectValue());
  Assert.assertEquals(timeToLive,element.getTimeToLive());
  _defaultCacheListener.assertUpdated(_KEY_1,_VALUE_2,timeToLive);
  _defaultCacheListener.reset();
  _defaultCacheReplicator.assertUpdated(_KEY_1,_VALUE_2,timeToLive);
  _defaultCacheReplicator.reset();
  ehcache.removeElement(element);
  _ehcachePortalCache.put(_KEY_1,_VALUE_1);
  _ehcachePortalCache.replace(_KEY_1,_VALUE_1,_VALUE_2,timeToLive);
  element=ehcache.get(_KEY_1);
  Assert.assertEquals(_KEY_1,element.getObjectKey());
  Assert.assertEquals(_VALUE_2,element.getObjectValue());
  Assert.assertEquals(timeToLive,element.getTimeToLive());
  _defaultCacheListener.assertPut(_KEY_1,_VALUE_1);
  _defaultCacheListener.assertUpdated(_KEY_1,_VALUE_2,timeToLive);
  _defaultCacheListener.reset();
  _defaultCacheReplicator.assertPut(_KEY_1,_VALUE_1);
  _defaultCacheReplicator.assertUpdated(_KEY_1,_VALUE_2,timeToLive);
  _defaultCacheReplicator.reset();
}
