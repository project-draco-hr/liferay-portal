{
  if (isSkeletonClass) {
    if (methodName.equals("getOperationDescByName") || methodName.equals("getOperationDescs"))     return;
  }
  if (implClass == null)   return;
  if (completedNames == null || completedNames.contains(methodName))   return;
  if ((allowedMethods != null) && !allowedMethods.contains(methodName))   return;
  if ((disallowedMethods != null) && disallowedMethods.contains(methodName))   return;
  if (isSkeletonClass && !haveAllSkeletonMethods) {
    if (skelMethod == null) {
      try {
        skelMethod=implClass.getDeclaredMethod("getOperationDescByName",new Class[]{String.class});
      }
 catch (      NoSuchMethodException e) {
      }
catch (      SecurityException e) {
      }
      if (skelMethod == null) {
        return;
      }
    }
    try {
      List skelList=(List)skelMethod.invoke(implClass,new Object[]{methodName});
      if (skelList != null) {
        Iterator i=skelList.iterator();
        while (i.hasNext()) {
          addOperationDesc((OperationDesc)i.next());
        }
      }
    }
 catch (    IllegalAccessException e) {
      if (log.isDebugEnabled()) {
        log.debug(Messages.getMessage("exception00"),e);
      }
      return;
    }
catch (    IllegalArgumentException e) {
      if (log.isDebugEnabled()) {
        log.debug(Messages.getMessage("exception00"),e);
      }
      return;
    }
catch (    InvocationTargetException e) {
      if (log.isDebugEnabled()) {
        log.debug(Messages.getMessage("exception00"),e);
      }
      return;
    }
  }
  if (name2OperationsMap != null) {
    ArrayList currentOverloads=(ArrayList)name2OperationsMap.get(methodName);
    if (currentOverloads != null) {
      for (Iterator i=currentOverloads.iterator(); i.hasNext(); ) {
        OperationDesc oper=(OperationDesc)i.next();
        if (oper.getMethod() == null) {
          syncOperationToClass(oper,implClass);
        }
      }
    }
  }
  createOperationsForName(implClass,methodName);
  completedNames.add(methodName);
}
