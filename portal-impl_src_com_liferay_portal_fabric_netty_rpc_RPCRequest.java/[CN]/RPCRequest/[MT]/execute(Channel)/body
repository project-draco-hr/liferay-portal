{
  ChannelThreadLocal.setChannel(channel);
  try {
    NoticeableFuture<T> noticeableFuture=_rpcCallable.call();
    noticeableFuture.addFutureListener(new FutureListener<T>(){
      @Override public void complete(      Future<T> future){
        if (future.isCancelled()) {
          sendRPCResponse(channel,new RPCResponse<T>(id,true,null,null));
          return;
        }
        try {
          sendRPCResponse(channel,new RPCResponse<T>(id,false,future.get(),null));
        }
 catch (        Throwable throwable) {
          if (throwable instanceof ExecutionException) {
            throwable=throwable.getCause();
          }
          sendRPCResponse(channel,new RPCResponse<T>(id,false,null,throwable));
        }
      }
    }
);
  }
 catch (  Throwable t) {
    sendRPCResponse(channel,new RPCResponse<T>(id,false,null,t));
  }
 finally {
    ChannelThreadLocal.removeChannel();
  }
}
