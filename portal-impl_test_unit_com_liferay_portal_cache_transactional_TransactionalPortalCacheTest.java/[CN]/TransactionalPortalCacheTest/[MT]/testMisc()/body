{
  Assert.assertEquals(_CACHE_NAME,_transactionalPortalCache.getName());
  Field cacheListenersField=ReflectionUtil.getDeclaredField(MemoryPortalCache.class,"_cacheListeners");
  Set<MockCacheListener> cacheListeners=(Set<MockCacheListener>)cacheListenersField.get(_memoryPortalCache);
  Assert.assertTrue(cacheListeners.isEmpty());
  MockCacheListener mockCacheListener1=new MockCacheListener();
  _transactionalPortalCache.registerCacheListener(mockCacheListener1);
  Assert.assertEquals(1,cacheListeners.size());
  Assert.assertTrue(cacheListeners.contains(mockCacheListener1));
  MockCacheListener mockCacheListener2=new MockCacheListener();
  _transactionalPortalCache.registerCacheListener(mockCacheListener2,CacheListenerScope.ALL);
  Assert.assertEquals(2,cacheListeners.size());
  Assert.assertTrue(cacheListeners.contains(mockCacheListener1));
  Assert.assertTrue(cacheListeners.contains(mockCacheListener2));
  _transactionalPortalCache.unregisterCacheListener(mockCacheListener1);
  Assert.assertEquals(1,cacheListeners.size());
  Assert.assertTrue(cacheListeners.contains(mockCacheListener2));
  _transactionalPortalCache.unregisterCacheListeners();
  Assert.assertTrue(cacheListeners.isEmpty());
  List<String> values=(List<String>)_transactionalPortalCache.get(Arrays.asList(_KEY1,_KEY2));
  Assert.assertEquals(2,values.size());
  Assert.assertEquals(_VALUE1,values.get(0));
  Assert.assertNull(values.get(1));
  _transactionalPortalCache.destroy();
}
