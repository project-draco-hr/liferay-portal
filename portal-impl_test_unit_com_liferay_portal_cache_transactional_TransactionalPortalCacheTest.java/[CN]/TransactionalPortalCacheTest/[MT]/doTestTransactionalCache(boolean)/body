{
  TransactionalPortalCacheHelper.begin();
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY1,null,10);
  }
 else {
    _transactionalPortalCache.put(_KEY1,null);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY2,_VALUE2,10);
  }
 else {
    _transactionalPortalCache.put(_KEY2,_VALUE2);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertEquals(_VALUE2,_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  _transactionalPortalCache.remove(_KEY2);
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY1,_VALUE1,10);
  }
 else {
    _transactionalPortalCache.put(_KEY1,_VALUE1);
  }
  Assert.assertEquals(_VALUE1,_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  TransactionalPortalCacheHelper.rollback();
  Assert.assertEquals(_VALUE1,_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  TransactionalPortalCacheHelper.begin();
  Assert.assertEquals(_VALUE1,_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY1,null,10);
  }
 else {
    _transactionalPortalCache.put(_KEY1,null);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY2,_VALUE2,10);
  }
 else {
    _transactionalPortalCache.put(_KEY2,_VALUE2);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertEquals(_VALUE2,_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY1,_VALUE1,10);
  }
 else {
    _transactionalPortalCache.put(_KEY1,_VALUE1);
  }
  Assert.assertEquals(_VALUE1,_transactionalPortalCache.get(_KEY1));
  Assert.assertEquals(_VALUE2,_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  TransactionalPortalCacheHelper.commit();
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY2));
  Assert.assertNull(_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  _memoryPortalCache.put(_KEY1,_VALUE1);
  TransactionalPortalCacheHelper.begin();
  _transactionalPortalCache.remove(_KEY1);
  if (ttl) {
    _transactionalPortalCache.put(_KEY2,_VALUE2,10);
  }
 else {
    _transactionalPortalCache.put(_KEY2,_VALUE2);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertEquals(_VALUE2,_transactionalPortalCache.get(_KEY2));
  Assert.assertEquals(_VALUE1,_memoryPortalCache.get(_KEY1));
  Assert.assertNull(_memoryPortalCache.get(_KEY2));
  TransactionalPortalCacheHelper.commit();
  Assert.assertNull(_transactionalPortalCache.get(_KEY1));
  Assert.assertEquals(_VALUE2,_transactionalPortalCache.get(_KEY2));
  Assert.assertNull(_memoryPortalCache.get(_KEY1));
  Assert.assertEquals(_VALUE2,_memoryPortalCache.get(_KEY2));
}
