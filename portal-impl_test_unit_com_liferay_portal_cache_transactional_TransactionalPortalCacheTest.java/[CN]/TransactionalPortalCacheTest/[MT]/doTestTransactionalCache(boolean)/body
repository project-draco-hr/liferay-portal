{
  TransactionalPortalCacheHelper.begin();
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY_1,null,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_1,null);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _transactionalPortalCache.remove(_KEY_2);
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY_1,_VALUE_1,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_1,_VALUE_1);
  }
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  TransactionalPortalCacheHelper.rollback();
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  TransactionalPortalCacheHelper.begin();
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY_1,null,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_1,null);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY_1,_VALUE_1,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_1,_VALUE_1);
  }
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  TransactionalPortalCacheHelper.commit();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _portalCache.put(_KEY_1,_VALUE_1);
  TransactionalPortalCacheHelper.begin();
  _transactionalPortalCache.remove(_KEY_1);
  if (ttl) {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  TransactionalPortalCacheHelper.commit();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_2));
}
