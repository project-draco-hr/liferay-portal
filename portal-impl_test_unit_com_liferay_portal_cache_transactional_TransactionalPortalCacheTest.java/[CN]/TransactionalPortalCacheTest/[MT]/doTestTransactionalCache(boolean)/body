{
  TransactionalPortalCacheHelper.begin();
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _transactionalPortalCache.remove(_KEY_2);
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY_1,_VALUE_1,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_1,_VALUE_1);
  }
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _transactionalPortalCache.putQuiet(_KEY_1,_VALUE_1);
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _transactionalPortalCache.putQuiet(_KEY_1,_VALUE_2,10);
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _recordCacheListener.assertNothing();
  TransactionalPortalCacheHelper.rollback();
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _recordCacheListener.assertNothing();
  TransactionalPortalCacheHelper.begin();
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2);
  }
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.putQuiet(_KEY_1,_VALUE_2,10);
  }
 else {
    _transactionalPortalCache.putQuiet(_KEY_1,_VALUE_2);
  }
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.putQuiet(_KEY_2,_VALUE_1,10);
  }
 else {
    _transactionalPortalCache.putQuiet(_KEY_2,_VALUE_1);
  }
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _recordCacheListener.assertNothing();
  TransactionalPortalCacheHelper.commit();
  _recordCacheListener.assertRemoveAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _portalCache.put(_KEY_1,_VALUE_1);
  _recordCacheListener.assertPut(_KEY_1,_VALUE_1);
  TransactionalPortalCacheHelper.begin();
  _transactionalPortalCache.remove(_KEY_1);
  if (ttl) {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2,10);
  }
 else {
    _transactionalPortalCache.put(_KEY_2,_VALUE_2);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.putQuiet(_KEY_2,_VALUE_1,10);
  }
 else {
    _transactionalPortalCache.putQuiet(_KEY_2,_VALUE_1);
  }
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _recordCacheListener.assertNothing();
  TransactionalPortalCacheHelper.commit();
  Assert.assertTrue(_recordCacheListener._put);
  Assert.assertFalse(_recordCacheListener._removeAll);
  Assert.assertTrue(_recordCacheListener._removed);
  Assert.assertFalse(_recordCacheListener._updated);
  if (_KEY_1.equals(_recordCacheListener._key)) {
    Assert.assertEquals(_VALUE_1,_recordCacheListener._value);
  }
 else {
    Assert.assertEquals(_KEY_2,_recordCacheListener._key);
    Assert.assertEquals(_VALUE_1,_recordCacheListener._value);
  }
  _recordCacheListener.reset();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_2));
  _portalCache.removeAll();
  _recordCacheListener.reset();
  TransactionalPortalCacheHelper.begin();
  if (ttl) {
    _transactionalPortalCache.putQuiet(_KEY_1,_VALUE_2,10);
  }
 else {
    _transactionalPortalCache.putQuiet(_KEY_1,_VALUE_2);
  }
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  if (ttl) {
    _transactionalPortalCache.putQuiet(_KEY_2,_VALUE_1,10);
  }
 else {
    _transactionalPortalCache.putQuiet(_KEY_2,_VALUE_1);
  }
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _recordCacheListener.assertNothing();
  TransactionalPortalCacheHelper.commit();
  _recordCacheListener.assertNothing();
}
