{
  long pk=RandomTestUtil.nextLong();
  KaleoTimerInstanceToken newKaleoTimerInstanceToken=_persistence.create(pk);
  newKaleoTimerInstanceToken.setGroupId(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setCompanyId(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setUserId(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setUserName(RandomTestUtil.randomString());
  newKaleoTimerInstanceToken.setCreateDate(RandomTestUtil.nextDate());
  newKaleoTimerInstanceToken.setModifiedDate(RandomTestUtil.nextDate());
  newKaleoTimerInstanceToken.setKaleoClassName(RandomTestUtil.randomString());
  newKaleoTimerInstanceToken.setKaleoClassPK(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setKaleoDefinitionId(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setKaleoInstanceId(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setKaleoInstanceTokenId(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setKaleoTaskInstanceTokenId(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setKaleoTimerId(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setKaleoTimerName(RandomTestUtil.randomString());
  newKaleoTimerInstanceToken.setBlocking(RandomTestUtil.randomBoolean());
  newKaleoTimerInstanceToken.setCompletionUserId(RandomTestUtil.nextLong());
  newKaleoTimerInstanceToken.setCompleted(RandomTestUtil.randomBoolean());
  newKaleoTimerInstanceToken.setCompletionDate(RandomTestUtil.nextDate());
  newKaleoTimerInstanceToken.setWorkflowContext(RandomTestUtil.randomString());
  _kaleoTimerInstanceTokens.add(_persistence.update(newKaleoTimerInstanceToken));
  KaleoTimerInstanceToken existingKaleoTimerInstanceToken=_persistence.findByPrimaryKey(newKaleoTimerInstanceToken.getPrimaryKey());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getKaleoTimerInstanceTokenId(),newKaleoTimerInstanceToken.getKaleoTimerInstanceTokenId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getGroupId(),newKaleoTimerInstanceToken.getGroupId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getCompanyId(),newKaleoTimerInstanceToken.getCompanyId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getUserId(),newKaleoTimerInstanceToken.getUserId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getUserName(),newKaleoTimerInstanceToken.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoTimerInstanceToken.getCreateDate()),Time.getShortTimestamp(newKaleoTimerInstanceToken.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoTimerInstanceToken.getModifiedDate()),Time.getShortTimestamp(newKaleoTimerInstanceToken.getModifiedDate()));
  Assert.assertEquals(existingKaleoTimerInstanceToken.getKaleoClassName(),newKaleoTimerInstanceToken.getKaleoClassName());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getKaleoClassPK(),newKaleoTimerInstanceToken.getKaleoClassPK());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getKaleoDefinitionId(),newKaleoTimerInstanceToken.getKaleoDefinitionId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getKaleoInstanceId(),newKaleoTimerInstanceToken.getKaleoInstanceId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getKaleoInstanceTokenId(),newKaleoTimerInstanceToken.getKaleoInstanceTokenId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getKaleoTaskInstanceTokenId(),newKaleoTimerInstanceToken.getKaleoTaskInstanceTokenId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getKaleoTimerId(),newKaleoTimerInstanceToken.getKaleoTimerId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getKaleoTimerName(),newKaleoTimerInstanceToken.getKaleoTimerName());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getBlocking(),newKaleoTimerInstanceToken.getBlocking());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getCompletionUserId(),newKaleoTimerInstanceToken.getCompletionUserId());
  Assert.assertEquals(existingKaleoTimerInstanceToken.getCompleted(),newKaleoTimerInstanceToken.getCompleted());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoTimerInstanceToken.getCompletionDate()),Time.getShortTimestamp(newKaleoTimerInstanceToken.getCompletionDate()));
  Assert.assertEquals(existingKaleoTimerInstanceToken.getWorkflowContext(),newKaleoTimerInstanceToken.getWorkflowContext());
}
