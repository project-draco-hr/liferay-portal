{
  _tplBaseModeImpl=_getTplProperty("base_mode_impl",_tplBaseModeImpl);
  _tplBasePersistence=_getTplProperty("base_persistence",_tplBasePersistence);
  _tplBeanLocatorUtil=_getTplProperty("bean_locator_util",_tplBeanLocatorUtil);
  _tplDynamicDialect=_getTplProperty("dynamic_dialect",_tplDynamicDialect);
  _tplEjbPk=_getTplProperty("ejb_pk",_tplEjbPk);
  _tplException=_getTplProperty("exception",_tplException);
  _tplExtendedModel=_getTplProperty("extended_model",_tplExtendedModel);
  _tplExtendedModelImpl=_getTplProperty("extended_model_impl",_tplExtendedModelImpl);
  _tplFinder=_getTplProperty("finder",_tplFinder);
  _tplFinderCache=_getTplProperty("finder_cache",_tplFinderCache);
  _tplFinderUtil=_getTplProperty("finder_util",_tplFinderUtil);
  _tplHbmXml=_getTplProperty("hbm_xml",_tplHbmXml);
  _tplHibernateConfiguration=_getTplProperty("hibernate_configuration",_tplHibernateConfiguration);
  _tplHibernateUtil=_getTplProperty("hibernate_util",_tplHibernateUtil);
  _tplJsonJs=_getTplProperty("json_js",_tplJsonJs);
  _tplJsonJsMethod=_getTplProperty("json_js_method",_tplJsonJsMethod);
  _tplModel=_getTplProperty("model",_tplModel);
  _tplModelHintsXml=_getTplProperty("model_hints_xml",_tplModelHintsXml);
  _tplModelImpl=_getTplProperty("model_impl",_tplModelImpl);
  _tplModelSoap=_getTplProperty("model_soap",_tplModelSoap);
  _tplPersistence=_getTplProperty("persistence",_tplPersistence);
  _tplPersistenceImpl=_getTplProperty("persistence_impl",_tplPersistenceImpl);
  _tplPersistenceUtil=_getTplProperty("persistence_util",_tplPersistenceUtil);
  _tplPrincipalBean=_getTplProperty("principal_bean",_tplPrincipalBean);
  _tplProps=_getTplProperty("props",_tplProps);
  _tplPropsUtil=_getTplProperty("props_util",_tplPropsUtil);
  _tplRemotingXml=_getTplProperty("remoting_xml",_tplRemotingXml);
  _tplService=_getTplProperty("service",_tplService);
  _tplServiceBaseImpl=_getTplProperty("service_base_impl",_tplServiceBaseImpl);
  _tplServiceFactory=_getTplProperty("service_factory",_tplServiceFactory);
  _tplServiceHttp=_getTplProperty("service_http",_tplServiceHttp);
  _tplServiceImpl=_getTplProperty("service_impl",_tplServiceImpl);
  _tplServiceJson=_getTplProperty("service_json",_tplServiceJson);
  _tplServiceJsonSerializer=_getTplProperty("service_json_serializer",_tplServiceJsonSerializer);
  _tplServiceSoap=_getTplProperty("service_soap",_tplServiceSoap);
  _tplServiceUtil=_getTplProperty("service_util",_tplServiceUtil);
  _tplSpringDataSourceXml=_getTplProperty("spring_data_source_xml",_tplSpringDataSourceXml);
  _tplSpringUtil=_getTplProperty("spring_util",_tplSpringUtil);
  _tplSpringXml=_getTplProperty("spring_xml",_tplSpringXml);
  try {
    _badTableNames=ServiceBuilder.getBadTableNames();
    _badCmpFields=ServiceBuilder.getBadCmpFields();
    _hbmFileName=hbmFileName;
    _modelHintsFileName=modelHintsFileName;
    _springFileName=springFileName;
    _springDataSourceFileName=springDataSourceFileName;
    _apiDir=apiDir;
    _implDir=implDir;
    _jsonFileName=jsonFileName;
    _remotingFileName=remotingFileName;
    _sqlDir=sqlDir;
    _sqlFileName=sqlFileName;
    _autoNamespaceTables=autoNamespaceTables;
    _baseModelImplPackage=baseModelImplPackage;
    _basePersistencePackage=basePersistencePackage;
    _beanLocatorUtilPackage=beanLocatorUtilPackage;
    _principalBeanPackage=principalBeanPackage;
    _propsUtilPackage=propsUtilPackage;
    _springHibernatePackage=springHibernatePackage;
    _springUtilPackage=springUtilPackage;
    _testDir=testDir;
    Document doc=PortalUtil.readDocumentFromFile(new File(fileName),true);
    Element root=doc.getRootElement();
    String packagePath=root.attributeValue("package-path");
    _outputPath=_implDir + "/" + StringUtil.replace(packagePath,".","/");
    _serviceOutputPath=_apiDir + "/" + StringUtil.replace(packagePath,".","/");
    if (Validator.isNotNull(_testDir)) {
      _testOutputPath=_testDir + "/" + StringUtil.replace(packagePath,".","/");
    }
    _packagePath=packagePath;
    Element portlet=root.element("portlet");
    Element namespace=root.element("namespace");
    if (portlet != null) {
      _portletName=portlet.attributeValue("name");
      _portletShortName=portlet.attributeValue("short-name");
      _portletPackageName=TextFormatter.format(_portletName,TextFormatter.B);
      _outputPath+="/" + _portletPackageName;
      _serviceOutputPath+="/" + _portletPackageName;
      _testOutputPath+="/" + _portletPackageName;
      _packagePath+="." + _portletPackageName;
    }
 else {
      _portletShortName=namespace.getText();
    }
    _portletShortName=_portletShortName.trim();
    if (!Validator.isChar(_portletShortName)) {
      throw new RuntimeException("The namespace element must be a valid keyword");
    }
    _ejbList=new ArrayList<Entity>();
    List<Element> entities=root.elements("entity");
    Iterator<Element> itr1=entities.iterator();
    while (itr1.hasNext()) {
      Element entityEl=itr1.next();
      String ejbName=entityEl.attributeValue("name");
      String table=entityEl.attributeValue("table");
      if (Validator.isNull(table)) {
        table=ejbName;
        if (_badTableNames.contains(ejbName)) {
          table+="_";
        }
      }
      if (_autoNamespaceTables) {
        table=_portletShortName + "_" + table;
      }
      boolean uuid=GetterUtil.getBoolean(entityEl.attributeValue("uuid"),false);
      boolean localService=GetterUtil.getBoolean(entityEl.attributeValue("local-service"),false);
      boolean remoteService=GetterUtil.getBoolean(entityEl.attributeValue("remote-service"),true);
      String persistenceClass=GetterUtil.getString(entityEl.attributeValue("persistence-class"),_packagePath + ".service.persistence." + ejbName+ "PersistenceImpl");
      String finderClass="";
      if (FileUtil.exists(_outputPath + "/service/persistence/" + ejbName+ "FinderImpl.java")) {
        finderClass=_packagePath + ".service.persistence." + ejbName+ "FinderImpl";
      }
      String dataSource=entityEl.attributeValue("data-source");
      String sessionFactory=entityEl.attributeValue("session-factory");
      String txManager=entityEl.attributeValue("tx-manager");
      List<EntityColumn> pkList=new ArrayList<EntityColumn>();
      List<EntityColumn> regularColList=new ArrayList<EntityColumn>();
      List<EntityColumn> collectionList=new ArrayList<EntityColumn>();
      List<EntityColumn> columnList=new ArrayList<EntityColumn>();
      List<Element> columns=entityEl.elements("column");
      if (uuid) {
        Element column=DocumentHelper.createElement("column");
        column.addAttribute("name","uuid");
        column.addAttribute("type","String");
        columns.add(0,column);
      }
      Iterator<Element> itr2=columns.iterator();
      while (itr2.hasNext()) {
        Element column=itr2.next();
        String columnName=column.attributeValue("name");
        String columnDBName=column.attributeValue("db-name");
        if (Validator.isNull(columnDBName)) {
          columnDBName=columnName;
          if (_badCmpFields.contains(columnName)) {
            columnDBName+="_";
          }
        }
        String columnType=column.attributeValue("type");
        boolean primary=GetterUtil.getBoolean(column.attributeValue("primary"),false);
        String collectionEntity=column.attributeValue("entity");
        String mappingKey=column.attributeValue("mapping-key");
        String mappingTable=column.attributeValue("mapping-table");
        String idType=column.attributeValue("id-type");
        String idParam=column.attributeValue("id-param");
        boolean convertNull=GetterUtil.getBoolean(column.attributeValue("convert-null"),true);
        EntityColumn col=new EntityColumn(columnName,columnDBName,columnType,primary,collectionEntity,mappingKey,mappingTable,idType,idParam,convertNull);
        if (primary) {
          pkList.add(col);
        }
        if (columnType.equals("Collection")) {
          collectionList.add(col);
        }
 else {
          regularColList.add(col);
        }
        columnList.add(col);
      }
      EntityOrder order=null;
      Element orderEl=entityEl.element("order");
      if (orderEl != null) {
        boolean asc=true;
        if ((orderEl.attribute("by") != null) && (orderEl.attributeValue("by").equals("desc"))) {
          asc=false;
        }
        List<EntityColumn> orderColsList=new ArrayList<EntityColumn>();
        order=new EntityOrder(asc,orderColsList);
        List<Element> orderCols=orderEl.elements("order-column");
        Iterator<Element> itr3=orderCols.iterator();
        while (itr3.hasNext()) {
          Element orderColEl=itr3.next();
          String orderColName=orderColEl.attributeValue("name");
          boolean orderColCaseSensitive=GetterUtil.getBoolean(orderColEl.attributeValue("case-sensitive"),true);
          boolean orderColByAscending=asc;
          String orderColBy=GetterUtil.getString(orderColEl.attributeValue("order-by"));
          if (orderColBy.equals("asc")) {
            orderColByAscending=true;
          }
 else           if (orderColBy.equals("desc")) {
            orderColByAscending=false;
          }
          EntityColumn col=Entity.getColumn(orderColName,columnList);
          col=(EntityColumn)col.clone();
          col.setCaseSensitive(orderColCaseSensitive);
          col.setOrderByAscending(orderColByAscending);
          orderColsList.add(col);
        }
      }
      List<EntityFinder> finderList=new ArrayList<EntityFinder>();
      List<Element> finders=entityEl.elements("finder");
      if (uuid) {
        Element finderEl=DocumentHelper.createElement("finder");
        finderEl.addAttribute("name","Uuid");
        finderEl.addAttribute("return-type","Collection");
        Element finderColEl=finderEl.addElement("finder-column");
        finderColEl.addAttribute("name","uuid");
        finders.add(0,finderEl);
        if (columnList.contains(new EntityColumn("groupId"))) {
          finderEl=DocumentHelper.createElement("finder");
          finderEl.addAttribute("name","UUID_G");
          finderEl.addAttribute("return-type",ejbName);
          finderColEl=finderEl.addElement("finder-column");
          finderColEl.addAttribute("name","uuid");
          finderColEl=finderEl.addElement("finder-column");
          finderColEl.addAttribute("name","groupId");
          finders.add(1,finderEl);
        }
      }
      itr2=finders.iterator();
      while (itr2.hasNext()) {
        Element finderEl=itr2.next();
        String finderName=finderEl.attributeValue("name");
        String finderReturn=finderEl.attributeValue("return-type");
        String finderWhere=finderEl.attributeValue("where");
        boolean finderDBIndex=GetterUtil.getBoolean(finderEl.attributeValue("db-index"),true);
        List<EntityColumn> finderColsList=new ArrayList<EntityColumn>();
        List<Element> finderCols=finderEl.elements("finder-column");
        Iterator<Element> itr3=finderCols.iterator();
        while (itr3.hasNext()) {
          Element finderColEl=itr3.next();
          String finderColName=finderColEl.attributeValue("name");
          String finderColDBName=finderColEl.attributeValue("db-name");
          if (Validator.isNull(finderColDBName)) {
            finderColDBName=finderColName;
            if (_badCmpFields.contains(finderColName)) {
              finderColDBName+="_";
            }
          }
          boolean finderColCaseSensitive=GetterUtil.getBoolean(finderColEl.attributeValue("case-sensitive"),true);
          String finderColComparator=GetterUtil.getString(finderColEl.attributeValue("comparator"),"=");
          EntityColumn col=Entity.getColumn(finderColName,columnList);
          col=(EntityColumn)col.clone();
          col.setDBName(finderColDBName);
          col.setCaseSensitive(finderColCaseSensitive);
          col.setComparator(finderColComparator);
          finderColsList.add(col);
        }
        finderList.add(new EntityFinder(finderName,finderReturn,finderColsList,finderWhere,finderDBIndex));
      }
      List<Entity> referenceList=new ArrayList<Entity>();
      if (build) {
        List<Element> references=entityEl.elements("reference");
        itr2=references.iterator();
        while (itr2.hasNext()) {
          Element reference=itr2.next();
          String refPackage=reference.attributeValue("package-path");
          String refEntity=reference.attributeValue("entity");
          referenceList.add(getEntity(refPackage + "." + refEntity));
        }
      }
      List<String> txRequiredList=new ArrayList<String>();
      itr2=entityEl.elements("tx-required").iterator();
      while (itr2.hasNext()) {
        Element txRequiredEl=itr2.next();
        String txRequired=txRequiredEl.getText();
        txRequiredList.add(txRequired);
      }
      _ejbList.add(new Entity(_packagePath,_portletName,_portletShortName,ejbName,table,uuid,localService,remoteService,persistenceClass,finderClass,dataSource,sessionFactory,txManager,pkList,regularColList,collectionList,columnList,order,finderList,referenceList,txRequiredList));
    }
    List<String> exceptionList=new ArrayList<String>();
    if (root.element("exceptions") != null) {
      List<Element> exceptions=root.element("exceptions").elements("exception");
      itr1=exceptions.iterator();
      while (itr1.hasNext()) {
        Element exception=itr1.next();
        exceptionList.add(exception.getText());
      }
    }
    if (build) {
      for (int x=0; x < _ejbList.size(); x++) {
        Entity entity=_ejbList.get(x);
        System.out.println("Building " + entity.getName());
        if (true || entity.getName().equals("EmailAddress") || entity.getName().equals("User")) {
          if (entity.hasColumns()) {
            _createHBM(entity);
            _createHBMUtil(entity);
            _createPersistenceImpl(entity);
            _createPersistence(entity);
            _createPersistenceUtil(entity);
            if (Validator.isNotNull(_testDir)) {
              _createPersistenceTest(entity);
            }
            _createModelImpl(entity);
            _createExtendedModelImpl(entity);
            _createModel(entity);
            _createExtendedModel(entity);
            _createModelSoap(entity);
            _createPool(entity);
            if (entity.getPKList().size() > 1) {
              _createEJBPK(entity);
            }
          }
          _createFinder(entity);
          _createFinderUtil(entity);
          if (entity.hasLocalService()) {
            _createServiceBaseImpl(entity,_LOCAL);
            _createServiceImpl(entity,_LOCAL);
            _createService(entity,_LOCAL);
            _createServiceFactory(entity,_LOCAL);
            _createServiceUtil(entity,_LOCAL);
          }
          if (entity.hasRemoteService()) {
            _createServiceBaseImpl(entity,_REMOTE);
            _createServiceImpl(entity,_REMOTE);
            _createService(entity,_REMOTE);
            _createServiceFactory(entity,_REMOTE);
            _createServiceUtil(entity,_REMOTE);
            if (Validator.isNotNull(_jsonFileName)) {
              _createServiceHttp(entity);
              _createServiceJSON(entity);
              if (entity.hasColumns()) {
                _createServiceJSONSerializer(entity);
              }
              _createServiceSoap(entity);
            }
          }
        }
      }
      _createHBMXML();
      _createModelHintsXML();
      _createSpringXML();
      if (Validator.isNotNull(_jsonFileName)) {
        _createJSONJS();
      }
      if (Validator.isNotNull(_remotingFileName)) {
        _createRemotingXML();
      }
      _createSQLIndexes();
      _createSQLTables();
      _createSQLSequences();
      _createExceptions(exceptionList);
      _createBaseModelImpl();
      _createBasePersistence();
      _createBeanLocatorUtil();
      _createDynamicDialect();
      _createFinderCache();
      _createHibernateConfiguration();
      _createHibernateUtil();
      _createPrincipalBean();
      _createProps();
      _createPropsUtil();
      _createSpringDataSourceXML();
      _createSpringUtil();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
