{
  _tplBadAliasNames=_getTplProperty("bad_alias_names",_tplBadAliasNames);
  _tplBadColumnNames=_getTplProperty("bad_column_names",_tplBadColumnNames);
  _tplBadJsonTypes=_getTplProperty("bad_json_types",_tplBadJsonTypes);
  _tplBadTableNames=_getTplProperty("bad_table_names",_tplBadTableNames);
  _tplEjbPk=_getTplProperty("ejb_pk",_tplEjbPk);
  _tplException=_getTplProperty("exception",_tplException);
  _tplExtendedModel=_getTplProperty("extended_model",_tplExtendedModel);
  _tplExtendedModelImpl=_getTplProperty("extended_model_impl",_tplExtendedModelImpl);
  _tplFinder=_getTplProperty("finder",_tplFinder);
  _tplFinderUtil=_getTplProperty("finder_util",_tplFinderUtil);
  _tplHbmXml=_getTplProperty("hbm_xml",_tplHbmXml);
  _tplOrmXml=_getTplProperty("orm_xml",_tplOrmXml);
  _tplJsonJs=_getTplProperty("json_js",_tplJsonJs);
  _tplJsonJsMethod=_getTplProperty("json_js_method",_tplJsonJsMethod);
  _tplModel=_getTplProperty("model",_tplModel);
  _tplModelClp=_getTplProperty("model",_tplModelClp);
  _tplModelHintsXml=_getTplProperty("model_hints_xml",_tplModelHintsXml);
  _tplModelImpl=_getTplProperty("model_impl",_tplModelImpl);
  _tplModelSoap=_getTplProperty("model_soap",_tplModelSoap);
  _tplModelWrapper=_getTplProperty("model_wrapper",_tplModelWrapper);
  _tplPersistence=_getTplProperty("persistence",_tplPersistence);
  _tplPersistenceImpl=_getTplProperty("persistence_impl",_tplPersistenceImpl);
  _tplPersistenceUtil=_getTplProperty("persistence_util",_tplPersistenceUtil);
  _tplProps=_getTplProperty("props",_tplProps);
  _tplRemotingXml=_getTplProperty("remoting_xml",_tplRemotingXml);
  _tplService=_getTplProperty("service",_tplService);
  _tplServiceBaseImpl=_getTplProperty("service_base_impl",_tplServiceBaseImpl);
  _tplServiceClp=_getTplProperty("service_clp",_tplServiceClp);
  _tplServiceClpMessageListener=_getTplProperty("service_clp_message_listener",_tplServiceClpMessageListener);
  _tplServiceClpSerializer=_getTplProperty("service_clp_serializer",_tplServiceClpSerializer);
  _tplServiceHttp=_getTplProperty("service_http",_tplServiceHttp);
  _tplServiceImpl=_getTplProperty("service_impl",_tplServiceImpl);
  _tplServiceJsonSerializer=_getTplProperty("service_json_serializer",_tplServiceJsonSerializer);
  _tplServiceSoap=_getTplProperty("service_soap",_tplServiceSoap);
  _tplServiceUtil=_getTplProperty("service_util",_tplServiceUtil);
  _tplServiceWrapper=_getTplProperty("service_wrapper",_tplServiceWrapper);
  _tplSpringBaseXml=_getTplProperty("spring_base_xml",_tplSpringBaseXml);
  _tplSpringClusterXml=_getTplProperty("spring_cluster_xml",_tplSpringClusterXml);
  _tplSpringDynamicDataSourceXml=_getTplProperty("spring_dynamic_data_source_xml",_tplSpringDynamicDataSourceXml);
  _tplSpringHibernateXml=_getTplProperty("spring_hibernate_xml",_tplSpringHibernateXml);
  _tplSpringInfrastructureXml=_getTplProperty("spring_infrastructure_xml",_tplSpringInfrastructureXml);
  _tplSpringShardDataSourceXml=_getTplProperty("spring_shard_data_source_xml",_tplSpringShardDataSourceXml);
  _tplSpringXml=_getTplProperty("spring_xml",_tplSpringXml);
  try {
    _badTableNames=_readLines(_tplBadTableNames);
    _badAliasNames=_readLines(_tplBadAliasNames);
    _badColumnNames=_readLines(_tplBadColumnNames);
    _badJsonTypes=_readLines(_tplBadJsonTypes);
    _hbmFileName=hbmFileName;
    _ormFileName=ormFileName;
    _modelHintsFileName=modelHintsFileName;
    _springFileName=springFileName;
    _springBaseFileName=springBaseFileName;
    _springClusterFileName=springClusterFileName;
    _springDynamicDataSourceFileName=springDynamicDataSourceFileName;
    _springHibernateFileName=springHibernateFileName;
    _springInfrastructureFileName=springInfrastructureFileName;
    _springShardDataSourceFileName=springShardDataSourceFileName;
    _apiDir=apiDir;
    _implDir=implDir;
    _jsonFileName=jsonFileName;
    _remotingFileName=remotingFileName;
    _sqlDir=sqlDir;
    _sqlFileName=sqlFileName;
    _sqlIndexesFileName=sqlIndexesFileName;
    _sqlIndexesPropertiesFileName=sqlIndexesPropertiesFileName;
    _sqlSequencesFileName=sqlSequencesFileName;
    _autoNamespaceTables=autoNamespaceTables;
    _beanLocatorUtil=beanLocatorUtil;
    _beanLocatorUtilShortName=_beanLocatorUtil.substring(_beanLocatorUtil.lastIndexOf(".") + 1);
    _propsUtil=propsUtil;
    _pluginName=GetterUtil.getString(pluginName);
    _testDir=testDir;
    Document doc=SAXReaderUtil.read(new File(fileName),true);
    Element root=doc.getRootElement();
    String packagePath=root.attributeValue("package-path");
    _outputPath=_implDir + "/" + StringUtil.replace(packagePath,".","/");
    _serviceOutputPath=_apiDir + "/" + StringUtil.replace(packagePath,".","/");
    if (Validator.isNotNull(_testDir)) {
      _testOutputPath=_testDir + "/" + StringUtil.replace(packagePath,".","/");
    }
    _packagePath=packagePath;
    _autoNamespaceTables=GetterUtil.getBoolean(root.attributeValue("auto-namespace-tables"),_autoNamespaceTables);
    Element author=root.element("author");
    if (author != null) {
      _author=author.getText();
    }
 else {
      _author=AUTHOR;
    }
    Element portlet=root.element("portlet");
    Element namespace=root.element("namespace");
    if (portlet != null) {
      _portletName=portlet.attributeValue("name");
      _portletShortName=portlet.attributeValue("short-name");
      _portletPackageName=TextFormatter.format(_portletName,TextFormatter.B);
      _outputPath+="/" + _portletPackageName;
      _serviceOutputPath+="/" + _portletPackageName;
      _testOutputPath+="/" + _portletPackageName;
      _packagePath+="." + _portletPackageName;
    }
 else {
      _portletShortName=namespace.getText();
    }
    _portletShortName=_portletShortName.trim();
    if (!Validator.isChar(_portletShortName)) {
      throw new RuntimeException("The namespace element must be a valid keyword");
    }
    _ejbList=new ArrayList<Entity>();
    _entityMappings=new HashMap<String,EntityMapping>();
    List<Element> entities=root.elements("entity");
    Iterator<Element> itr1=entities.iterator();
    while (itr1.hasNext()) {
      Element entityEl=itr1.next();
      String ejbName=entityEl.attributeValue("name");
      String humanName=entityEl.attributeValue("human-name");
      String table=entityEl.attributeValue("table");
      if (Validator.isNull(table)) {
        table=ejbName;
        if (_badTableNames.contains(ejbName)) {
          table+=StringPool.UNDERLINE;
        }
        if (_autoNamespaceTables) {
          table=_portletShortName + StringPool.UNDERLINE + ejbName;
        }
      }
      boolean uuid=GetterUtil.getBoolean(entityEl.attributeValue("uuid"),false);
      boolean localService=GetterUtil.getBoolean(entityEl.attributeValue("local-service"),false);
      boolean remoteService=GetterUtil.getBoolean(entityEl.attributeValue("remote-service"),true);
      String persistenceClass=GetterUtil.getString(entityEl.attributeValue("persistence-class"),_packagePath + ".service.persistence." + ejbName+ "PersistenceImpl");
      String finderClass="";
      if (FileUtil.exists(_outputPath + "/service/persistence/" + ejbName+ "FinderImpl.java")) {
        finderClass=_packagePath + ".service.persistence." + ejbName+ "FinderImpl";
      }
      String dataSource=entityEl.attributeValue("data-source");
      String sessionFactory=entityEl.attributeValue("session-factory");
      String txManager=entityEl.attributeValue("tx-manager");
      boolean cacheEnabled=GetterUtil.getBoolean(entityEl.attributeValue("cache-enabled"),true);
      List<EntityColumn> pkList=new ArrayList<EntityColumn>();
      List<EntityColumn> regularColList=new ArrayList<EntityColumn>();
      List<EntityColumn> collectionList=new ArrayList<EntityColumn>();
      List<EntityColumn> columnList=new ArrayList<EntityColumn>();
      List<Element> columns=entityEl.elements("column");
      if (uuid) {
        Element column=SAXReaderUtil.createElement("column");
        column.addAttribute("name","uuid");
        column.addAttribute("type","String");
        columns.add(0,column);
      }
      Iterator<Element> itr2=columns.iterator();
      while (itr2.hasNext()) {
        Element column=itr2.next();
        String columnName=column.attributeValue("name");
        String columnDBName=column.attributeValue("db-name");
        if (Validator.isNull(columnDBName)) {
          columnDBName=columnName;
          if (_badColumnNames.contains(columnName)) {
            columnDBName+=StringPool.UNDERLINE;
          }
        }
        String columnType=column.attributeValue("type");
        boolean primary=GetterUtil.getBoolean(column.attributeValue("primary"));
        boolean filterPrimary=GetterUtil.getBoolean(column.attributeValue("filter-primary"));
        String collectionEntity=column.attributeValue("entity");
        String mappingKey=column.attributeValue("mapping-key");
        String mappingTable=column.attributeValue("mapping-table");
        if (Validator.isNotNull(mappingTable)) {
          if (_badTableNames.contains(mappingTable)) {
            mappingTable+=StringPool.UNDERLINE;
          }
          if (_autoNamespaceTables) {
            mappingTable=_portletShortName + StringPool.UNDERLINE + mappingTable;
          }
        }
        String idType=column.attributeValue("id-type");
        String idParam=column.attributeValue("id-param");
        boolean convertNull=GetterUtil.getBoolean(column.attributeValue("convert-null"),true);
        boolean localized=GetterUtil.getBoolean(column.attributeValue("localized"));
        EntityColumn col=new EntityColumn(columnName,columnDBName,columnType,primary,filterPrimary,collectionEntity,mappingKey,mappingTable,idType,idParam,convertNull,localized);
        if (primary) {
          pkList.add(col);
        }
        if (columnType.equals("Collection")) {
          collectionList.add(col);
        }
 else {
          regularColList.add(col);
        }
        columnList.add(col);
        if (Validator.isNotNull(collectionEntity) && Validator.isNotNull(mappingTable)) {
          EntityMapping entityMapping=new EntityMapping(mappingTable,ejbName,collectionEntity);
          int ejbNameWeight=StringUtil.startsWithWeight(mappingTable,ejbName);
          int collectionEntityWeight=StringUtil.startsWithWeight(mappingTable,collectionEntity);
          if ((ejbNameWeight > collectionEntityWeight) || ((ejbNameWeight == collectionEntityWeight) && (ejbName.compareTo(collectionEntity) > 0))) {
            _entityMappings.put(mappingTable,entityMapping);
          }
        }
      }
      EntityOrder order=null;
      Element orderEl=entityEl.element("order");
      if (orderEl != null) {
        boolean asc=true;
        if ((orderEl.attribute("by") != null) && (orderEl.attributeValue("by").equals("desc"))) {
          asc=false;
        }
        List<EntityColumn> orderColsList=new ArrayList<EntityColumn>();
        order=new EntityOrder(asc,orderColsList);
        List<Element> orderCols=orderEl.elements("order-column");
        Iterator<Element> itr3=orderCols.iterator();
        while (itr3.hasNext()) {
          Element orderColEl=itr3.next();
          String orderColName=orderColEl.attributeValue("name");
          boolean orderColCaseSensitive=GetterUtil.getBoolean(orderColEl.attributeValue("case-sensitive"),true);
          boolean orderColByAscending=asc;
          String orderColBy=GetterUtil.getString(orderColEl.attributeValue("order-by"));
          if (orderColBy.equals("asc")) {
            orderColByAscending=true;
          }
 else           if (orderColBy.equals("desc")) {
            orderColByAscending=false;
          }
          EntityColumn col=Entity.getColumn(orderColName,columnList);
          col=(EntityColumn)col.clone();
          col.setCaseSensitive(orderColCaseSensitive);
          col.setOrderByAscending(orderColByAscending);
          orderColsList.add(col);
        }
      }
      List<EntityFinder> finderList=new ArrayList<EntityFinder>();
      List<Element> finders=entityEl.elements("finder");
      if (uuid) {
        Element finderEl=SAXReaderUtil.createElement("finder");
        finderEl.addAttribute("name","Uuid");
        finderEl.addAttribute("return-type","Collection");
        Element finderColEl=finderEl.addElement("finder-column");
        finderColEl.addAttribute("name","uuid");
        finders.add(0,finderEl);
        if (columnList.contains(new EntityColumn("groupId"))) {
          finderEl=SAXReaderUtil.createElement("finder");
          finderEl.addAttribute("name","UUID_G");
          finderEl.addAttribute("return-type",ejbName);
          finderEl.addAttribute("unique","true");
          finderColEl=finderEl.addElement("finder-column");
          finderColEl.addAttribute("name","uuid");
          finderColEl=finderEl.addElement("finder-column");
          finderColEl.addAttribute("name","groupId");
          finders.add(1,finderEl);
        }
      }
      String alias=TextFormatter.format(ejbName,TextFormatter.I);
      if (_badAliasNames.contains(alias.toLowerCase())) {
        alias+=StringPool.UNDERLINE;
      }
      itr2=finders.iterator();
      while (itr2.hasNext()) {
        Element finderEl=itr2.next();
        String finderName=finderEl.attributeValue("name");
        String finderReturn=finderEl.attributeValue("return-type");
        boolean finderUnique=GetterUtil.getBoolean(finderEl.attributeValue("unique"),false);
        String finderWhere=finderEl.attributeValue("where");
        if (Validator.isNotNull(finderWhere)) {
          for (          EntityColumn column : columnList) {
            String name=column.getName();
            if (finderWhere.indexOf(name) != -1) {
              finderWhere=finderWhere.replaceAll("(?<!\\.)\\b" + name + "\\b",alias + "." + name);
            }
          }
        }
        boolean finderDBIndex=GetterUtil.getBoolean(finderEl.attributeValue("db-index"),true);
        List<EntityColumn> finderColsList=new ArrayList<EntityColumn>();
        List<Element> finderCols=finderEl.elements("finder-column");
        Iterator<Element> itr3=finderCols.iterator();
        while (itr3.hasNext()) {
          Element finderColEl=itr3.next();
          String finderColName=finderColEl.attributeValue("name");
          boolean finderColCaseSensitive=GetterUtil.getBoolean(finderColEl.attributeValue("case-sensitive"),true);
          String finderColComparator=GetterUtil.getString(finderColEl.attributeValue("comparator"),"=");
          String finderColArrayableOperator=GetterUtil.getString(finderColEl.attributeValue("arrayable-operator"));
          EntityColumn col=Entity.getColumn(finderColName,columnList);
          if (!col.isFetchFinderPath() && !finderReturn.equals("Collection")) {
            col.setFetchFinderPath(true);
          }
          col=(EntityColumn)col.clone();
          col.setCaseSensitive(finderColCaseSensitive);
          col.setComparator(finderColComparator);
          col.setArrayableOperator(finderColArrayableOperator);
          finderColsList.add(col);
        }
        finderList.add(new EntityFinder(finderName,finderReturn,finderUnique,finderWhere,finderDBIndex,finderColsList));
      }
      List<Entity> referenceList=new ArrayList<Entity>();
      if (build) {
        if (Validator.isNotNull(pluginName)) {
          for (          String config : PropsValues.RESOURCE_ACTIONS_CONFIGS) {
            File file=new File(implDir + "/" + config);
            if (file.exists()) {
              InputStream inputStream=new FileInputStream(file);
              ResourceActionsUtil.read(pluginName,inputStream);
            }
          }
        }
        List<Element> references=entityEl.elements("reference");
        itr2=references.iterator();
        Set<String> referenceSet=new TreeSet<String>();
        while (itr2.hasNext()) {
          Element reference=itr2.next();
          String referencePackage=reference.attributeValue("package-path");
          String referenceEntity=reference.attributeValue("entity");
          referenceSet.add(referencePackage + "." + referenceEntity);
        }
        if (!_packagePath.equals("com.liferay.counter")) {
          referenceSet.add("com.liferay.counter.Counter");
        }
        if (!_packagePath.equals("com.liferay.portal")) {
          referenceSet.add("com.liferay.portal.Resource");
          referenceSet.add("com.liferay.portal.User");
        }
        for (        String referenceName : referenceSet) {
          referenceList.add(getEntity(referenceName));
        }
      }
      List<String> txRequiredList=new ArrayList<String>();
      itr2=entityEl.elements("tx-required").iterator();
      while (itr2.hasNext()) {
        Element txRequiredEl=itr2.next();
        String txRequired=txRequiredEl.getText();
        txRequiredList.add(txRequired);
      }
      _ejbList.add(new Entity(_packagePath,_portletName,_portletShortName,ejbName,humanName,table,alias,uuid,localService,remoteService,persistenceClass,finderClass,dataSource,sessionFactory,txManager,cacheEnabled,pkList,regularColList,collectionList,columnList,order,finderList,referenceList,txRequiredList));
    }
    List<String> exceptionList=new ArrayList<String>();
    if (root.element("exceptions") != null) {
      List<Element> exceptions=root.element("exceptions").elements("exception");
      itr1=exceptions.iterator();
      while (itr1.hasNext()) {
        Element exception=itr1.next();
        exceptionList.add(exception.getText());
      }
    }
    if (build) {
      for (int x=0; x < _ejbList.size(); x++) {
        Entity entity=_ejbList.get(x);
        System.out.println("Building " + entity.getName());
        if (true) {
          if (entity.hasColumns()) {
            _createHbm(entity);
            _createHbmUtil(entity);
            _createPersistenceImpl(entity);
            _createPersistence(entity);
            _createPersistenceUtil(entity);
            if (Validator.isNotNull(_testDir)) {
              _createPersistenceTest(entity);
            }
            _createModelImpl(entity);
            _createExtendedModelImpl(entity);
            entity.setTransients(_getTransients(entity,false));
            entity.setParentTransients(_getTransients(entity,true));
            _createModel(entity);
            _createExtendedModel(entity);
            _createModelClp(entity);
            _createModelWrapper(entity);
            _createModelSoap(entity);
            _createPool(entity);
            if (entity.getPKList().size() > 1) {
              _createEJBPK(entity);
            }
          }
          _createFinder(entity);
          _createFinderUtil(entity);
          if (entity.hasLocalService()) {
            _createServiceImpl(entity,_SESSION_TYPE_LOCAL);
            _createServiceBaseImpl(entity,_SESSION_TYPE_LOCAL);
            _createService(entity,_SESSION_TYPE_LOCAL);
            _createServiceFactory(entity,_SESSION_TYPE_LOCAL);
            _createServiceUtil(entity,_SESSION_TYPE_LOCAL);
            _createServiceClp(entity,_SESSION_TYPE_LOCAL);
            _createServiceWrapper(entity,_SESSION_TYPE_LOCAL);
          }
          if (entity.hasRemoteService()) {
            _createServiceImpl(entity,_SESSION_TYPE_REMOTE);
            _createServiceBaseImpl(entity,_SESSION_TYPE_REMOTE);
            _createService(entity,_SESSION_TYPE_REMOTE);
            _createServiceFactory(entity,_SESSION_TYPE_REMOTE);
            _createServiceUtil(entity,_SESSION_TYPE_REMOTE);
            _createServiceClp(entity,_SESSION_TYPE_REMOTE);
            _createServiceWrapper(entity,_SESSION_TYPE_REMOTE);
            if (Validator.isNotNull(_remotingFileName)) {
              _createServiceHttp(entity);
            }
            _createServiceJson(entity);
            if (entity.hasColumns()) {
              _createServiceJsonSerializer(entity);
            }
            _createServiceSoap(entity);
          }
        }
      }
      _createHbmXml();
      _createOrmXml();
      _createModelHintsXml();
      _createSpringXml();
      _createServiceClpMessageListener();
      _createServiceClpSerializer();
      _createJsonJs();
      if (Validator.isNotNull(_remotingFileName)) {
        _createRemotingXml();
      }
      _createSQLIndexes();
      _createSQLTables();
      _createSQLSequences();
      _createExceptions(exceptionList);
      _createProps();
      _createSpringBaseXml();
      _createSpringClusterXml();
      _createSpringDynamicDataSourceXml();
      _createSpringHibernateXml();
      _createSpringInfrastructureXml();
      _createSpringShardDataSourceXml();
    }
  }
 catch (  FileNotFoundException fnfe) {
    System.out.println(fnfe.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}
