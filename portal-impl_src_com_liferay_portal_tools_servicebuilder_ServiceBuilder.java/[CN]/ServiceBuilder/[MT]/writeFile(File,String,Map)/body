{
  String packagePath=_getPackagePath(file);
  String className=file.getName();
  className=className.substring(0,className.length() - 5);
  content=SourceFormatter.stripImports(content,packagePath,className);
  File tempFile=new File("ServiceBuilder.temp");
  FileUtil.write(tempFile,content);
  StringBuffer sb=new StringBuffer();
  Jalopy jalopy=new Jalopy();
  jalopy.setFileFormat(FileFormat.UNIX);
  jalopy.setInput(tempFile);
  jalopy.setOutput(sb);
  try {
    Jalopy.setConvention("../tools/jalopy.xml");
  }
 catch (  FileNotFoundException fnne) {
  }
  try {
    Jalopy.setConvention("../../misc/jalopy.xml");
  }
 catch (  FileNotFoundException fnne) {
  }
  if (jalopySettings == null) {
    jalopySettings=new HashMap();
  }
  Environment env=Environment.getInstance();
  String author=GetterUtil.getString((String)jalopySettings.get("author"),"Brian Wing Shun Chan");
  env.set("author",author);
  env.set("fileName",file.getName());
  Convention convention=Convention.getInstance();
  String classMask="/**\n" + " * <a href=\"$fileName$.html\"><b><i>View Source</i></b></a>\n" + " *\n";
  String[] classCommentsArray=(String[])jalopySettings.get("classComments");
  if ((classCommentsArray != null) && (classCommentsArray.length > 0)) {
    for (int i=0; i < classCommentsArray.length; i++) {
      String classComments=classCommentsArray[i];
      classComments=StringUtil.wrap(classComments,76,"\n * ");
      if (classComments.startsWith("\n")) {
        classComments=classComments.substring(1,classComments.length());
      }
      classMask+=" * <p>\n" + classComments + "\n * </p>\n *\n";
    }
  }
  classMask+=" * @author $author$\n" + " *\n";
  String[] seeArray=(String[])jalopySettings.get("see");
  if ((classCommentsArray != null) && (classCommentsArray.length > 0)) {
    for (int i=0; i < seeArray.length; i++) {
      String see=seeArray[i];
      classMask+=" * @see " + see + "\n";
    }
    classMask+=" *\n";
  }
  classMask+=" */";
  convention.put(ConventionKeys.COMMENT_JAVADOC_TEMPLATE_CLASS,env.interpolate(classMask));
  convention.put(ConventionKeys.COMMENT_JAVADOC_TEMPLATE_INTERFACE,env.interpolate(classMask));
  if (jalopySettings.get("keepJavadoc") != null) {
    convention.put(ConventionKeys.COMMENT_JAVADOC_REMOVE,Boolean.FALSE.toString());
  }
  jalopy.format();
  String newContent=sb.toString();
  String oldContent=null;
  if (file.exists()) {
    oldContent=FileUtil.read(file);
    int x=oldContent.indexOf("@version $Revision:");
    if (x != -1) {
      int y=oldContent.indexOf("$",x);
      y=oldContent.indexOf("$",y + 1);
      String oldVersion=oldContent.substring(x,y + 1);
      newContent=StringUtil.replace(newContent,"@version $Rev: $",oldVersion);
    }
  }
 else {
    newContent=StringUtil.replace(newContent,"@version $Rev: $","@version $Revision: 1.183 $");
  }
  if (oldContent == null || !oldContent.equals(newContent)) {
    FileUtil.write(file,newContent);
    System.out.println("Writing " + file);
    file.setLastModified(System.currentTimeMillis() - (Time.SECOND * 5));
  }
  tempFile.deleteOnExit();
}
