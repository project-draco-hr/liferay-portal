{
  ClassLoader classLoader=ClassLoader.getSystemClassLoader();
  Log4JUtil.configureLog4J(classLoader.getResource("META-INF/portal-log4j.xml"));
  Log4JUtil.configureLog4J(classLoader.getResource("META-INF/portal-log4j-ext.xml"));
  ServiceBuilder serviceBuilder=null;
  if (args.length == 7) {
    String fileName=args[0];
    String hbmFileName=args[1];
    String modelHintsFileName=args[2];
    String springFileName=args[3];
    String springDataSourceFileName="";
    String apiDir=args[5];
    String implDir="src";
    String jsonFileName=args[6];
    String remotingFileName="../tunnel-web/docroot/WEB-INF/remoting-servlet.xml";
    String sqlDir="../sql";
    String sqlFileName="portal-tables.sql";
    String sqlIndexesFileName="indexes.sql";
    String sqlIndexesPropertiesFileName="indexes.properties";
    String sqlSequencesFileName="sequences.sql";
    boolean autoNamespaceTables=false;
    String baseModelImplPackage="com.liferay.portal.model.impl";
    String basePersistencePackage="com.liferay.portal.service.persistence";
    String beanLocatorUtilPackage="com.liferay.portal.kernel.bean";
    String principalBeanPackage="com.liferay.portal.service.impl";
    String propsUtilPackage="com.liferay.portal.util";
    String springContextPackage="com.liferay.portal.spring.context";
    String springHibernatePackage="com.liferay.portal.spring.hibernate";
    String springUtilPackage="com.liferay.portal.spring.util";
    String testDir="";
    serviceBuilder=new ServiceBuilder(fileName,hbmFileName,modelHintsFileName,springFileName,springDataSourceFileName,apiDir,implDir,jsonFileName,remotingFileName,sqlDir,sqlFileName,sqlIndexesFileName,sqlIndexesPropertiesFileName,sqlSequencesFileName,autoNamespaceTables,baseModelImplPackage,basePersistencePackage,beanLocatorUtilPackage,principalBeanPackage,propsUtilPackage,springContextPackage,springHibernatePackage,springUtilPackage,testDir);
  }
 else   if (args.length == 0) {
    String fileName=System.getProperty("service.input.file");
    String hbmFileName=System.getProperty("service.hbm.file");
    String modelHintsFileName=System.getProperty("service.model.hints.file");
    String springFileName=System.getProperty("service.spring.file");
    String springDataSourceFileName=System.getProperty("service.spring.data.source.file");
    String apiDir=System.getProperty("service.api.dir");
    String implDir=System.getProperty("service.impl.dir");
    String jsonFileName=System.getProperty("service.json.file");
    String remotingFileName=System.getProperty("service.remoting.file");
    String sqlDir=System.getProperty("service.sql.dir");
    String sqlFileName=System.getProperty("service.sql.file");
    String sqlIndexesFileName=System.getProperty("service.sql.indexes.file");
    String sqlIndexesPropertiesFileName=System.getProperty("service.sql.indexes.properties.file");
    String sqlSequencesFileName=System.getProperty("service.sql.sequences.file");
    boolean autoNamespaceTables=GetterUtil.getBoolean(System.getProperty("service.auto.namespace.tables"));
    String baseModelImplPackage=System.getProperty("service.base.model.impl.package");
    String basePersistencePackage=System.getProperty("service.base.persistence.package");
    String beanLocatorUtilPackage=System.getProperty("service.bean.locator.util.package");
    String principalBeanPackage=System.getProperty("service.principal.bean.package");
    String propsUtilPackage=System.getProperty("service.props.util.package");
    String springContextPackage=System.getProperty("service.spring.context.package");
    String springHibernatePackage=System.getProperty("service.spring.hibernate.package");
    String springUtilPackage=System.getProperty("service.spring.util.package");
    String testDir=System.getProperty("service.test.dir");
    serviceBuilder=new ServiceBuilder(fileName,hbmFileName,modelHintsFileName,springFileName,springDataSourceFileName,apiDir,implDir,jsonFileName,remotingFileName,sqlDir,sqlFileName,sqlIndexesFileName,sqlIndexesPropertiesFileName,sqlSequencesFileName,autoNamespaceTables,baseModelImplPackage,basePersistencePackage,beanLocatorUtilPackage,principalBeanPackage,propsUtilPackage,springContextPackage,springHibernatePackage,springUtilPackage,testDir);
  }
  if (serviceBuilder == null) {
    System.out.println("Please set these required system properties. Sample values are:\n" + "\n" + "\t-Dservice.input.file=${service.file}\n"+ "\t-Dservice.hbm.file=src/META-INF/portal-hbm.xml\n"+ "\t-Dservice.model.hints.file=src/META-INF/portal-model-hints.xml\n"+ "\t-Dservice.spring.file=src/META-INF/portal-spring.xml\n"+ "\t-Dservice.api.dir=${project.dir}/portal-service/src\n"+ "\t-Dservice.impl.dir=src\n"+ "\t-Dservice.json.file=${project.dir}/portal-web/docroot/html/js/liferay/service_unpacked.js\n"+ "\t-Dservice.remoting.file=${project.dir}/tunnel-web/docroot/WEB-INF/remoting-servlet.xml\n"+ "\t-Dservice.sql.dir=../sql\n"+ "\t-Dservice.sql.file=portal-tables.sql\n"+ "\t-Dservice.sql.indexes.file=indexes.sql\n"+ "\t-Dservice.sql.indexes.properties.file=indexes.properties\n"+ "\t-Dservice.sql.sequences.file=sequences.sql\n"+ "\t-Dservice.base.model.impl.package=com.liferay.portal.model.impl\n"+ "\t-Dservice.base.persistence.package=com.liferay.portal.service.persistence\n"+ "\t-Dservice.bean.locator.util.package=com.liferay.portal.kernel.bean\n"+ "\t-Dservice.principal.bean.package=com.liferay.portal.service.impl\n"+ "\t-Dservice.props.util.package=com.liferay.portal.util\n"+ "\t-Dservice.spring.context.package=com.liferay.portal.spring.context\n"+ "\t-Dservice.spring.hibernate.package=com.liferay.portal.spring.hibernate\n"+ "\t-Dservice.spring.util.package=com.liferay.portal.spring.util\n"+ "\n"+ "You can also customize the generated code by overriding the default templates with these optional properties:\n"+ "\n"+ "\t-Dservice.tpl.bad_column_names=" + _TPL_ROOT + "bad_column_names.txt\n"+ "\t-Dservice.tpl.bad_table_names="+ _TPL_ROOT+ "bad_table_names.txt\n"+ "\t-Dservice.tpl.base_mode_impl="+ _TPL_ROOT+ "base_mode_impl.ftl\n"+ "\t-Dservice.tpl.base_persistence="+ _TPL_ROOT+ "base_persistence.ftl\n"+ "\t-Dservice.tpl.bean_locator_util="+ _TPL_ROOT+ "bean_locator_util.ftl\n"+ "\t-Dservice.tpl.copyright.txt=copyright.txt\n"+ "\t-Dservice.tpl.custom_sql_util="+ _TPL_ROOT+ "custom_sql_util.ftl\n"+ "\t-Dservice.tpl.dynamic_dialect="+ _TPL_ROOT+ "dynamic_dialect.ftl\n"+ "\t-Dservice.tpl.ejb_pk="+ _TPL_ROOT+ "ejb_pk.ftl\n"+ "\t-Dservice.tpl.exception="+ _TPL_ROOT+ "exception.ftl\n"+ "\t-Dservice.tpl.extended_model="+ _TPL_ROOT+ "extended_model.ftl\n"+ "\t-Dservice.tpl.extended_model_impl="+ _TPL_ROOT+ "extended_model_impl.ftl\n"+ "\t-Dservice.tpl.finder="+ _TPL_ROOT+ "finder.ftl\n"+ "\t-Dservice.tpl.finder_cache="+ _TPL_ROOT+ "finder_cache.ftl\n"+ "\t-Dservice.tpl.finder_util="+ _TPL_ROOT+ "finder_util.ftl\n"+ "\t-Dservice.tpl.hbm_xml="+ _TPL_ROOT+ "hbm_xml.ftl\n"+ "\t-Dservice.tpl.hibernate_configuration="+ _TPL_ROOT+ "hibernate_configuration.ftl\n"+ "\t-Dservice.tpl.hibernate_util="+ _TPL_ROOT+ "hibernate_util.ftl\n"+ "\t-Dservice.tpl.json_js="+ _TPL_ROOT+ "json_js.ftl\n"+ "\t-Dservice.tpl.json_js_method="+ _TPL_ROOT+ "json_js_method.ftl\n"+ "\t-Dservice.tpl.lazy_class_path_application_context="+ _TPL_ROOT+ "lazy_class_path_application_context.ftl\n"+ "\t-Dservice.tpl.model="+ _TPL_ROOT+ "model.ftl\n"+ "\t-Dservice.tpl.model_hints_xml="+ _TPL_ROOT+ "model_hints_xml.ftl\n"+ "\t-Dservice.tpl.model_impl="+ _TPL_ROOT+ "model_impl.ftl\n"+ "\t-Dservice.tpl.model_soap="+ _TPL_ROOT+ "model_soap.ftl\n"+ "\t-Dservice.tpl.persistence="+ _TPL_ROOT+ "persistence.ftl\n"+ "\t-Dservice.tpl.persistence_impl="+ _TPL_ROOT+ "persistence_impl.ftl\n"+ "\t-Dservice.tpl.persistence_util="+ _TPL_ROOT+ "persistence_util.ftl\n"+ "\t-Dservice.tpl.portal_context_loader_listener="+ _TPL_ROOT+ "portal_context_loader_listener.ftl\n"+ "\t-Dservice.tpl.portlet_custom_sql_util="+ _TPL_ROOT+ "portlet_custom_sql_util.ftl\n"+ "\t-Dservice.tpl.principal_bean="+ _TPL_ROOT+ "principal_bean.ftl\n"+ "\t-Dservice.tpl.props="+ _TPL_ROOT+ "props.ftl\n"+ "\t-Dservice.tpl.props_util="+ _TPL_ROOT+ "props_util.ftl\n"+ "\t-Dservice.tpl.remoting_xml="+ _TPL_ROOT+ "remoting_xml.ftl\n"+ "\t-Dservice.tpl.service="+ _TPL_ROOT+ "service.ftl\n"+ "\t-Dservice.tpl.service_base_impl="+ _TPL_ROOT+ "service_base_impl.ftl\n"+ "\t-Dservice.tpl.service_factory="+ _TPL_ROOT+ "service_factory.ftl\n"+ "\t-Dservice.tpl.service_http="+ _TPL_ROOT+ "service_http.ftl\n"+ "\t-Dservice.tpl.service_impl="+ _TPL_ROOT+ "service_impl.ftl\n"+ "\t-Dservice.tpl.service_json="+ _TPL_ROOT+ "service_json.ftl\n"+ "\t-Dservice.tpl.service_json_serializer="+ _TPL_ROOT+ "service_json_serializer.ftl\n"+ "\t-Dservice.tpl.service_soap="+ _TPL_ROOT+ "service_soap.ftl\n"+ "\t-Dservice.tpl.service_util="+ _TPL_ROOT+ "service_util.ftl\n"+ "\t-Dservice.tpl.spring_data_source_xml="+ _TPL_ROOT+ "spring_data_source_xml.ftl\n"+ "\t-Dservice.tpl.spring_util="+ _TPL_ROOT+ "spring_util.ftl\n"+ "\t-Dservice.tpl.spring_xml="+ _TPL_ROOT+ "spring_xml.ftl\n"+ "\t-Dservice.tpl.spring_xml_session="+ _TPL_ROOT+ "spring_xml_session.ftl");
  }
}
