{
  Map<String,String> arguments=ArgumentsUtil.parseArguments(args);
  InitUtil.initWithSpring(true);
  String fileName=arguments.get("service.input.file");
  String hbmFileName=arguments.get("service.hbm.file");
  String ormFileName=arguments.get("service.orm.file");
  String modelHintsFileName=arguments.get("service.model.hints.file");
  String springFileName=arguments.get("service.spring.file");
  String springBaseFileName=arguments.get("service.spring.base.file");
  String springClusterFileName=arguments.get("service.spring.cluster.file");
  String springDynamicDataSourceFileName=arguments.get("service.spring.dynamic.data.source.file");
  String springHibernateFileName=arguments.get("service.spring.hibernate.file");
  String springInfrastructureFileName=arguments.get("service.spring.infrastructure.file");
  String springShardDataSourceFileName=arguments.get("service.spring.shard.data.source.file");
  String apiDir=arguments.get("service.api.dir");
  String implDir=arguments.get("service.impl.dir");
  String jsonFileName=arguments.get("service.json.file");
  String remotingFileName=arguments.get("service.remoting.file");
  String sqlDir=arguments.get("service.sql.dir");
  String sqlFileName=arguments.get("service.sql.file");
  String sqlIndexesFileName=arguments.get("service.sql.indexes.file");
  String sqlIndexesPropertiesFileName=arguments.get("service.sql.indexes.properties.file");
  String sqlSequencesFileName=arguments.get("service.sql.sequences.file");
  boolean autoNamespaceTables=GetterUtil.getBoolean(arguments.get("service.auto.namespace.tables"));
  String beanLocatorUtil=arguments.get("service.bean.locator.util");
  String propsUtil=arguments.get("service.props.util");
  String pluginName=arguments.get("service.plugin.name");
  String testDir=arguments.get("service.test.dir");
  try {
    new ServiceBuilder(fileName,hbmFileName,ormFileName,modelHintsFileName,springFileName,springBaseFileName,springClusterFileName,springDynamicDataSourceFileName,springHibernateFileName,springInfrastructureFileName,springShardDataSourceFileName,apiDir,implDir,jsonFileName,remotingFileName,sqlDir,sqlFileName,sqlIndexesFileName,sqlIndexesPropertiesFileName,sqlSequencesFileName,autoNamespaceTables,beanLocatorUtil,propsUtil,pluginName,testDir);
  }
 catch (  RuntimeException re) {
    System.out.println("Please set these required arguments. Sample values are:\n" + "\n" + "\tservice.input.file=${service.file}\n"+ "\tservice.hbm.file=src/META-INF/portal-hbm.xml\n"+ "\tservice.orm.file=src/META-INF/portal-orm.xml\n"+ "\tservice.model.hints.file=src/META-INF/portal-model-hints.xml\n"+ "\tservice.spring.file=src/META-INF/portal-spring.xml\n"+ "\tservice.api.dir=${project.dir}/portal-service/src\n"+ "\tservice.impl.dir=src\n"+ "\tservice.json.file=${project.dir}/portal-web/docroot/html/js/liferay/service_unpacked.js\n"+ "\tservice.remoting.file=${project.dir}/tunnel-web/docroot/WEB-INF/remoting-servlet.xml\n"+ "\tservice.sql.dir=../sql\n"+ "\tservice.sql.file=portal-tables.sql\n"+ "\tservice.sql.indexes.file=indexes.sql\n"+ "\tservice.sql.indexes.properties.file=indexes.properties\n"+ "\tservice.sql.sequences.file=sequences.sql\n"+ "\tservice.bean.locator.util.package=com.liferay.portal.kernel.bean\n"+ "\tservice.props.util.package=com.liferay.portal.util\n"+ "\n"+ "You can also customize the generated code by overriding the default templates with these optional system properties:\n"+ "\n"+ "\t-Dservice.tpl.bad_alias_names=" + _TPL_ROOT + "bad_alias_names.txt\n"+ "\t-Dservice.tpl.bad_column_names="+ _TPL_ROOT+ "bad_column_names.txt\n"+ "\t-Dservice.tpl.bad_json_types="+ _TPL_ROOT+ "bad_json_types.txt\n"+ "\t-Dservice.tpl.bad_table_names="+ _TPL_ROOT+ "bad_table_names.txt\n"+ "\t-Dservice.tpl.base_mode_impl="+ _TPL_ROOT+ "base_mode_impl.ftl\n"+ "\t-Dservice.tpl.blob_model="+ _TPL_ROOT+ "blob_model.ftl\n"+ "\t-Dservice.tpl.copyright.txt=copyright.txt\n"+ "\t-Dservice.tpl.ejb_pk="+ _TPL_ROOT+ "ejb_pk.ftl\n"+ "\t-Dservice.tpl.exception="+ _TPL_ROOT+ "exception.ftl\n"+ "\t-Dservice.tpl.extended_model="+ _TPL_ROOT+ "extended_model.ftl\n"+ "\t-Dservice.tpl.extended_model_impl="+ _TPL_ROOT+ "extended_model_impl.ftl\n"+ "\t-Dservice.tpl.finder="+ _TPL_ROOT+ "finder.ftl\n"+ "\t-Dservice.tpl.finder_util="+ _TPL_ROOT+ "finder_util.ftl\n"+ "\t-Dservice.tpl.hbm_xml="+ _TPL_ROOT+ "hbm_xml.ftl\n"+ "\t-Dservice.tpl.orm_xml="+ _TPL_ROOT+ "orm_xml.ftl\n"+ "\t-Dservice.tpl.json_js="+ _TPL_ROOT+ "json_js.ftl\n"+ "\t-Dservice.tpl.json_js_method="+ _TPL_ROOT+ "json_js_method.ftl\n"+ "\t-Dservice.tpl.model="+ _TPL_ROOT+ "model.ftl\n"+ "\t-Dservice.tpl.model_hints_xml="+ _TPL_ROOT+ "model_hints_xml.ftl\n"+ "\t-Dservice.tpl.model_impl="+ _TPL_ROOT+ "model_impl.ftl\n"+ "\t-Dservice.tpl.model_soap="+ _TPL_ROOT+ "model_soap.ftl\n"+ "\t-Dservice.tpl.model_wrapper="+ _TPL_ROOT+ "model_wrapper.ftl\n"+ "\t-Dservice.tpl.persistence="+ _TPL_ROOT+ "persistence.ftl\n"+ "\t-Dservice.tpl.persistence_impl="+ _TPL_ROOT+ "persistence_impl.ftl\n"+ "\t-Dservice.tpl.persistence_util="+ _TPL_ROOT+ "persistence_util.ftl\n"+ "\t-Dservice.tpl.props="+ _TPL_ROOT+ "props.ftl\n"+ "\t-Dservice.tpl.remoting_xml="+ _TPL_ROOT+ "remoting_xml.ftl\n"+ "\t-Dservice.tpl.service="+ _TPL_ROOT+ "service.ftl\n"+ "\t-Dservice.tpl.service_base_impl="+ _TPL_ROOT+ "service_base_impl.ftl\n"+ "\t-Dservice.tpl.service_clp="+ _TPL_ROOT+ "service_clp.ftl\n"+ "\t-Dservice.tpl.service_clp_message_listener="+ _TPL_ROOT+ "service_clp_message_listener.ftl\n"+ "\t-Dservice.tpl.service_clp_serializer="+ _TPL_ROOT+ "service_clp_serializer.ftl\n"+ "\t-Dservice.tpl.service_http="+ _TPL_ROOT+ "service_http.ftl\n"+ "\t-Dservice.tpl.service_impl="+ _TPL_ROOT+ "service_impl.ftl\n"+ "\t-Dservice.tpl.service_soap="+ _TPL_ROOT+ "service_soap.ftl\n"+ "\t-Dservice.tpl.service_util="+ _TPL_ROOT+ "service_util.ftl\n"+ "\t-Dservice.tpl.service_wrapper="+ _TPL_ROOT+ "service_wrapper.ftl\n"+ "\t-Dservice.tpl.spring_base_xml="+ _TPL_ROOT+ "spring_base_xml.ftl\n"+ "\t-Dservice.tpl.spring_dynamic_data_source_xml="+ _TPL_ROOT+ "spring_dynamic_data_source_xml.ftl\n"+ "\t-Dservice.tpl.spring_hibernate_xml="+ _TPL_ROOT+ "spring_hibernate_xml.ftl\n"+ "\t-Dservice.tpl.spring_infrastructure_xml="+ _TPL_ROOT+ "spring_infrastructure_xml.ftl\n"+ "\t-Dservice.tpl.spring_xml="+ _TPL_ROOT+ "spring_xml.ftl\n"+ "\t-Dservice.tpl.spring_xml_session="+ _TPL_ROOT+ "spring_xml_session.ftl");
    throw re;
  }
  try {
    ClearThreadLocalUtil.clearThreadLocal();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Introspector.flushCaches();
}
