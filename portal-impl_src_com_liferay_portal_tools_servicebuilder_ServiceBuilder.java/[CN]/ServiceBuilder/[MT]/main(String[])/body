{
  Map<String,String> arguments=ArgumentsUtil.parseArguments(args);
  ToolDependencies.wireServiceBuilder();
  String apiDir=arguments.get("service.api.dir");
  boolean autoImportDefaultReferences=GetterUtil.getBoolean(arguments.get("service.auto.import.default.references"),true);
  boolean autoNamespaceTables=GetterUtil.getBoolean(arguments.get("service.auto.namespace.tables"));
  String beanLocatorUtil=arguments.get("service.bean.locator.util");
  long buildNumber=GetterUtil.getLong(arguments.get("service.build.number"),1);
  boolean buildNumberIncrement=GetterUtil.getBoolean(arguments.get("service.build.number.increment"),true);
  String hbmFileName=arguments.get("service.hbm.file");
  String implDir=arguments.get("service.impl.dir");
  String inputFileName=arguments.get("service.input.file");
  String modelHintsFileName=arguments.get("service.model.hints.file");
  boolean osgiModule=GetterUtil.getBoolean(arguments.get("service.osgi.module"));
  String pluginName=arguments.get("service.plugin.name");
  String propsUtil=arguments.get("service.props.util");
  String remotingFileName=arguments.get("service.remoting.file");
  String resourcesDir=arguments.get("service.resources.dir");
  String springFileName=arguments.get("service.spring.file");
  String[] springNamespaces=StringUtil.split(arguments.get("service.spring.namespaces"));
  String sqlDir=arguments.get("service.sql.dir");
  String sqlFileName=arguments.get("service.sql.file");
  String sqlIndexesFileName=arguments.get("service.sql.indexes.file");
  String sqlSequencesFileName=arguments.get("service.sql.sequences.file");
  String targetEntityName=arguments.get("service.target.entity.name");
  String testDir=arguments.get("service.test.dir");
  try {
    new ServiceBuilder(apiDir,autoImportDefaultReferences,autoNamespaceTables,beanLocatorUtil,buildNumber,buildNumberIncrement,hbmFileName,implDir,inputFileName,modelHintsFileName,osgiModule,pluginName,propsUtil,remotingFileName,resourcesDir,springFileName,springNamespaces,sqlDir,sqlFileName,sqlIndexesFileName,sqlSequencesFileName,targetEntityName,testDir,true);
  }
 catch (  Exception e) {
    System.out.println("Please set these arguments. Sample values are:\n" + "\n" + "\tservice.api.dir=${basedir}/../portal-service/src\n"+ "\tservice.auto.import.default.references=true\n"+ "\tservice.auto.namespace.tables=false\n"+ "\tservice.bean.locator.util=com.liferay.portal.kernel.bean.PortalBeanLocatorUtil\n"+ "\tservice.build.number=1\n"+ "\tservice.build.number.increment=true\n"+ "\tservice.hbm.file=${basedir}/src/META-INF/portal-hbm.xml\n"+ "\tservice.impl.dir=${basedir}/src\n"+ "\tservice.input.file=${service.file}\n"+ "\tservice.model.hints.file=${basedir}/src/META-INF/portal-model-hints.xml\n"+ "\tservice.osgi.module=false\n"+ "\tservice.plugin.name=\n"+ "\tservice.props.util=com.liferay.portal.util.PropsUtil\n"+ "\tservice.remoting.file=${basedir}/../portal-web/docroot/WEB-INF/remoting-servlet.xml\n"+ "\tservice.resources.dir=${basedir}/src\n"+ "\tservice.spring.file=${basedir}/src/META-INF/portal-spring.xml\n"+ "\tservice.spring.namespaces=beans\n"+ "\tservice.sql.dir=${basedir}/../sql\n"+ "\tservice.sql.file=portal-tables.sql\n"+ "\tservice.sql.indexes.file=indexes.sql\n"+ "\tservice.sql.sequences.file=sequences.sql\n"+ "\tservice.target.entity.name=${service.target.entity.name}\n"+ "\tservice.test.dir=${basedir}/test/integration\n"+ "\n"+ "You can also customize the generated code by overriding the default templates with these optional system properties:\n"+ "\n"+ "\t-Dservice.tpl.bad_alias_names=" + _TPL_ROOT + "bad_alias_names.txt\n"+ "\t-Dservice.tpl.bad_column_names="+ _TPL_ROOT+ "bad_column_names.txt\n"+ "\t-Dservice.tpl.bad_json_types="+ _TPL_ROOT+ "bad_json_types.txt\n"+ "\t-Dservice.tpl.bad_table_names="+ _TPL_ROOT+ "bad_table_names.txt\n"+ "\t-Dservice.tpl.base_mode_impl="+ _TPL_ROOT+ "base_mode_impl.ftl\n"+ "\t-Dservice.tpl.blob_model="+ _TPL_ROOT+ "blob_model.ftl\n"+ "\t-Dservice.tpl.copyright.txt=copyright.txt\n"+ "\t-Dservice.tpl.ejb_pk="+ _TPL_ROOT+ "ejb_pk.ftl\n"+ "\t-Dservice.tpl.exception="+ _TPL_ROOT+ "exception.ftl\n"+ "\t-Dservice.tpl.export_actionable_dynamic_query="+ _TPL_ROOT+ "export_actionable_dynamic_query.ftl\n"+ "\t-Dservice.tpl.extended_model="+ _TPL_ROOT+ "extended_model.ftl\n"+ "\t-Dservice.tpl.extended_model_base_impl="+ _TPL_ROOT+ "extended_model_base_impl.ftl\n"+ "\t-Dservice.tpl.extended_model_impl="+ _TPL_ROOT+ "extended_model_impl.ftl\n"+ "\t-Dservice.tpl.finder="+ _TPL_ROOT+ "finder.ftl\n"+ "\t-Dservice.tpl.finder_util="+ _TPL_ROOT+ "finder_util.ftl\n"+ "\t-Dservice.tpl.hbm_xml="+ _TPL_ROOT+ "hbm_xml.ftl\n"+ "\t-Dservice.tpl.json_js="+ _TPL_ROOT+ "json_js.ftl\n"+ "\t-Dservice.tpl.json_js_method="+ _TPL_ROOT+ "json_js_method.ftl\n"+ "\t-Dservice.tpl.model="+ _TPL_ROOT+ "model.ftl\n"+ "\t-Dservice.tpl.model_cache="+ _TPL_ROOT+ "model_cache.ftl\n"+ "\t-Dservice.tpl.model_hints_xml="+ _TPL_ROOT+ "model_hints_xml.ftl\n"+ "\t-Dservice.tpl.model_impl="+ _TPL_ROOT+ "model_impl.ftl\n"+ "\t-Dservice.tpl.model_soap="+ _TPL_ROOT+ "model_soap.ftl\n"+ "\t-Dservice.tpl.model_wrapper="+ _TPL_ROOT+ "model_wrapper.ftl\n"+ "\t-Dservice.tpl.persistence="+ _TPL_ROOT+ "persistence.ftl\n"+ "\t-Dservice.tpl.persistence_impl="+ _TPL_ROOT+ "persistence_impl.ftl\n"+ "\t-Dservice.tpl.persistence_util="+ _TPL_ROOT+ "persistence_util.ftl\n"+ "\t-Dservice.tpl.props="+ _TPL_ROOT+ "props.ftl\n"+ "\t-Dservice.tpl.remoting_xml="+ _TPL_ROOT+ "remoting_xml.ftl\n"+ "\t-Dservice.tpl.service="+ _TPL_ROOT+ "service.ftl\n"+ "\t-Dservice.tpl.service_base_impl="+ _TPL_ROOT+ "service_base_impl.ftl\n"+ "\t-Dservice.tpl.service_clp="+ _TPL_ROOT+ "service_clp.ftl\n"+ "\t-Dservice.tpl.service_clp_invoker="+ _TPL_ROOT+ "service_clp_invoker.ftl\n"+ "\t-Dservice.tpl.service_clp_message_listener="+ _TPL_ROOT+ "service_clp_message_listener.ftl\n"+ "\t-Dservice.tpl.service_clp_serializer="+ _TPL_ROOT+ "service_clp_serializer.ftl\n"+ "\t-Dservice.tpl.service_http="+ _TPL_ROOT+ "service_http.ftl\n"+ "\t-Dservice.tpl.service_impl="+ _TPL_ROOT+ "service_impl.ftl\n"+ "\t-Dservice.tpl.service_props_util="+ _TPL_ROOT+ "service_props_util.ftl\n"+ "\t-Dservice.tpl.service_soap="+ _TPL_ROOT+ "service_soap.ftl\n"+ "\t-Dservice.tpl.service_util="+ _TPL_ROOT+ "service_util.ftl\n"+ "\t-Dservice.tpl.service_wrapper="+ _TPL_ROOT+ "service_wrapper.ftl\n"+ "\t-Dservice.tpl.spring_xml="+ _TPL_ROOT+ "spring_xml.ftl\n"+ "\t-Dservice.tpl.spring_xml_session="+ _TPL_ROOT+ "spring_xml_session.ftl");
    ArgumentsUtil.processMainException(arguments,e);
  }
  try {
    ClearThreadLocalUtil.clearThreadLocal();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Introspector.flushCaches();
}
