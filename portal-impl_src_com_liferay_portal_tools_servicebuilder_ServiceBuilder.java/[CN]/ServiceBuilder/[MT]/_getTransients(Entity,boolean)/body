{
  File modelFile;
  if (parent) {
    modelFile=new File(_outputPath + "/model/impl/" + entity.getName()+ "ModelImpl.java");
  }
 else {
    modelFile=new File(_outputPath + "/model/impl/" + entity.getName()+ "Impl.java");
  }
  String content=FileUtil.read(modelFile);
  Matcher matcher=_getterPattern.matcher(content);
  Set<String> getters=new HashSet<String>();
  while (!matcher.hitEnd()) {
    boolean found=matcher.find();
    if (found) {
      String property=matcher.group();
      if (property.indexOf("get") != -1) {
        property=property.substring(property.indexOf("get") + 3,property.length() - 1);
      }
 else {
        property=property.substring(property.indexOf("is") + 2,property.length() - 1);
      }
      if (!entity.hasColumn(property) && !entity.hasColumn(Introspector.decapitalize(property))) {
        property=Introspector.decapitalize(property);
        getters.add(property);
      }
    }
  }
  matcher=_setterPattern.matcher(content);
  Set<String> setters=new HashSet<String>();
  while (!matcher.hitEnd()) {
    boolean found=matcher.find();
    if (found) {
      String property=matcher.group();
      property=property.substring(property.indexOf("set") + 3,property.length() - 1);
      if (!entity.hasColumn(property) && !entity.hasColumn(Introspector.decapitalize(property))) {
        property=Introspector.decapitalize(property);
        setters.add(property);
      }
    }
  }
  getters.retainAll(setters);
  List<String> transients=new ArrayList<String>(getters);
  Collections.sort(transients);
  return transients;
}
