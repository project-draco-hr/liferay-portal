{
  if (Validator.isNull(scopeComparator)) {
    return null;
  }
  EntityColumn primaryColumn=_getFinderPrimaryColumn(columns);
  EntityColumn comparatorColumn=_getFinderComparatorColumn(scopeComparator,columns);
  if (Validator.equals(comparatorColumn,primaryColumn)) {
    throw new RuntimeException("The scope-primary column and scope-comparator column must " + "be different.");
  }
  String scopeAlias=null;
  if (scopeMax) {
    scopeAlias=alias.concat("Max");
  }
 else {
    scopeAlias=alias.concat("Min");
  }
  StringBundler sb=new StringBundler(19);
  sb.append(" LEFT JOIN ");
  sb.append(table);
  sb.append(StringPool.SPACE);
  sb.append(scopeAlias);
  sb.append(" ON ");
  sb.append(StringPool.OPEN_PARENTHESIS);
  sb.append(primaryColumn.getName());
  sb.append(" = ");
  sb.append(scopeAlias);
  sb.append(StringPool.PERIOD);
  sb.append(primaryColumn.getName());
  sb.append(" AND ");
  sb.append(comparatorColumn.getName());
  if (scopeMax) {
    sb.append(" < ");
  }
 else {
    sb.append(" > ");
  }
  sb.append(scopeAlias);
  sb.append(StringPool.PERIOD);
  sb.append(comparatorColumn.getName());
  sb.append(StringPool.CLOSE_PARENTHESIS);
  sb.append(StringPool.SPACE);
  return _getFinderSQL(sb.toString(),alias,columns);
}
