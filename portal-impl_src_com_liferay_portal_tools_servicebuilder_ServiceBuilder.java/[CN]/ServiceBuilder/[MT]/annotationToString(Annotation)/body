{
  StringBundler sb=new StringBundler();
  sb.append(StringPool.AT);
  Type type=annotation.getType();
  sb.append(type.getValue());
  Map<String,Object> namedParameters=annotation.getNamedParameterMap();
  if (namedParameters.isEmpty()) {
    return sb.toString();
  }
  sb.append(StringPool.OPEN_PARENTHESIS);
  for (  Map.Entry<String,Object> entry : namedParameters.entrySet()) {
    sb.append(entry.getKey());
    sb.append(StringPool.EQUAL);
    Object value=entry.getValue();
    if (value instanceof List) {
      List<String> stringValues=(List<String>)entry.getValue();
      sb.append(StringPool.OPEN_CURLY_BRACE);
      for (      String stringValue : stringValues) {
        sb.append(stringValue);
        sb.append(StringPool.COMMA_AND_SPACE);
      }
      if (!stringValues.isEmpty()) {
        sb.setIndex(sb.index() - 1);
      }
      sb.append(StringPool.CLOSE_CURLY_BRACE);
    }
 else {
      sb.append(value);
    }
    sb.append(StringPool.COMMA_AND_SPACE);
  }
  sb.setIndex(sb.index() - 1);
  sb.append(StringPool.CLOSE_PARENTHESIS);
  return sb.toString();
}
