{
  Properties properties=new Properties(System.getProperties());
  URL[] jvmClassPathURLs=ClassPathUtil.getClassPathURLs(ClassPathUtil.getJVMClassPath(true));
  Thread currentThread=Thread.currentThread();
  Set<URL> contextClassPathURLs=ClassPathUtil.getClassPathURLs(currentThread.getContextClassLoader());
  Class<ServiceBuilder> serviceBuilderClass=ServiceBuilder.class;
  Set<URL> literalClassPathURLs=ClassPathUtil.getClassPathURLs(serviceBuilderClass.getClassLoader());
  Set<URL> mergedURLs=new LinkedHashSet<URL>();
  mergedURLs.addAll(literalClassPathURLs);
  mergedURLs.addAll(contextClassPathURLs);
  mergedURLs.addAll(Arrays.asList(jvmClassPathURLs));
  ClassLoader classLoader=new URLClassLoader(mergedURLs.toArray(new URL[mergedURLs.size()]),null);
class ReenterableCallable implements Callable<Void> {
    public ReenterableCallable(    String[] args){
      _args=args;
    }
    public Void call() throws Exception {
      main(_args);
      BeanLocatorImpl beanLocatorImpl=(BeanLocatorImpl)PortalBeanLocatorUtil.getBeanLocator();
      AbstractApplicationContext abstractApplicationContext=(AbstractApplicationContext)beanLocatorImpl.getApplicationContext();
      abstractApplicationContext.close();
      return null;
    }
    private final String[] _args;
  }
  Class<? extends Callable<Void>> reenterableCallableClass=(Class<? extends Callable<Void>>)classLoader.loadClass(ReenterableCallable.class.getName());
  Constructor<? extends Callable<Void>> constructor=reenterableCallableClass.getConstructor(String[].class);
  constructor.setAccessible(true);
  FutureTask<Void> mainFutureTask=new FutureTask<Void>(constructor.newInstance(new Object[]{args}));
  Thread invokerThread=new Thread(mainFutureTask);
  invokerThread.setContextClassLoader(classLoader);
  invokerThread.setDaemon(true);
  invokerThread.start();
  mainFutureTask.get();
  invokerThread.join();
  System.setProperties(properties);
}
