{
  Properties properties=new Properties(System.getProperties());
  URL[] jvmUrls=ClassPathUtil.getClassPathURLs(ClassPathUtil.getJVMClassPath(true));
  URL[] parentUrls=((URLClassLoader)Thread.currentThread().getContextClassLoader()).getURLs();
  URL[] mergedUrls=new URL[jvmUrls.length + parentUrls.length];
  System.arraycopy(jvmUrls,0,mergedUrls,0,jvmUrls.length);
  System.arraycopy(parentUrls,0,mergedUrls,jvmUrls.length,parentUrls.length);
  ClassLoader classLoader=new URLClassLoader(mergedUrls,null);
class ReenterableCallable implements Callable<Void> {
    public ReenterableCallable(    String[] args){
      _args=args;
    }
    public Void call() throws Exception {
      main(_args);
      BeanLocatorImpl beanLocatorImpl=(BeanLocatorImpl)PortalBeanLocatorUtil.getBeanLocator();
      AbstractApplicationContext abstractApplicationContext=(AbstractApplicationContext)beanLocatorImpl.getApplicationContext();
      abstractApplicationContext.close();
      return null;
    }
    private final String[] _args;
  }
  Class<? extends Callable<Void>> reenterableCallableClass=(Class<? extends Callable<Void>>)classLoader.loadClass(ReenterableCallable.class.getName());
  Constructor<? extends Callable<Void>> constructor=reenterableCallableClass.getConstructor(String[].class);
  constructor.setAccessible(true);
  FutureTask<Void> mainFutureTask=new FutureTask<Void>(constructor.newInstance(new Object[]{args}));
  Thread invokerThread=new Thread(mainFutureTask);
  invokerThread.setContextClassLoader(classLoader);
  invokerThread.setDaemon(true);
  invokerThread.start();
  mainFutureTask.get();
  invokerThread.join();
  System.setProperties(properties);
}
