{
  Map<String,Object> context=_getContext();
  context.put("entities",_ejbList);
  String content=_processTemplate(_tplHbmXml,context);
  int lastImportStart=content.lastIndexOf("<import class=");
  int lastImportEnd=content.indexOf("/>",lastImportStart) + 3;
  String imports=content.substring(0,lastImportEnd);
  content=content.substring(lastImportEnd + 1);
  File xmlFile=new File(_hbmFileName);
  if (!xmlFile.exists()) {
    String xml="<?xml version=\"1.0\"?>\n" + "<!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\">\n" + "\n"+ "<hibernate-mapping default-lazy=\"false\" auto-import=\"false\">\n"+ "</hibernate-mapping>";
    FileUtils.write(xmlFile,xml);
  }
  String oldContent=FileUtils.readFileToString(xmlFile);
  String newContent=_fixHbmXml(oldContent);
  int firstImport=newContent.indexOf("<import class=\"" + _packagePath + ".model.");
  int lastImport=newContent.lastIndexOf("<import class=\"" + _packagePath + ".model.");
  if (firstImport == -1) {
    int x=newContent.indexOf("<class");
    if (x != -1) {
      newContent=newContent.substring(0,x) + imports + newContent.substring(x);
    }
 else {
      content=imports + content;
    }
  }
 else {
    firstImport=newContent.indexOf("<import",firstImport) - 1;
    lastImport=newContent.indexOf("/>",lastImport) + 3;
    newContent=newContent.substring(0,firstImport) + imports + newContent.substring(lastImport);
  }
  int firstClass=newContent.indexOf("<class name=\"" + _packagePath + ".model.");
  int lastClass=newContent.lastIndexOf("<class name=\"" + _packagePath + ".model.");
  if (firstClass == -1) {
    int x=newContent.indexOf("</hibernate-mapping>");
    if (x != -1) {
      newContent=newContent.substring(0,x) + content + newContent.substring(x);
    }
  }
 else {
    firstClass=newContent.lastIndexOf("<class",firstClass) - 1;
    lastClass=newContent.indexOf("</class>",lastClass) + 9;
    newContent=newContent.substring(0,firstClass) + content + newContent.substring(lastClass);
  }
  newContent=_formatXml(newContent);
  if (!oldContent.equals(newContent)) {
    writeFileRaw(xmlFile,newContent);
  }
}
