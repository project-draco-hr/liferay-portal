{
  Entity entity=_entityPool.get(name);
  if (entity != null) {
    return entity;
  }
  int pos=name.lastIndexOf(".");
  if (pos == -1) {
    pos=_ejbList.indexOf(new Entity(name));
    if (pos == -1) {
      throw new RuntimeException("Cannot find " + name + " in "+ ListUtil.toString(_ejbList,Entity.NAME_ACCESSOR));
    }
    entity=_ejbList.get(pos);
    _entityPool.put(name,entity);
    return entity;
  }
 else {
    String refPackage=name.substring(0,pos);
    String refEntity=name.substring(pos + 1);
    if (refPackage.equals(_packagePath)) {
      pos=_ejbList.indexOf(new Entity(refEntity));
      if (pos == -1) {
        throw new RuntimeException("Cannot find " + refEntity + " in "+ ListUtil.toString(_ejbList,Entity.NAME_ACCESSOR));
      }
      entity=_ejbList.get(pos);
      _entityPool.put(name,entity);
      return entity;
    }
    String refPackageDir=StringUtil.replace(refPackage,".","/");
    String refFileName=_implDir + "/" + refPackageDir+ "/service.xml";
    File refFile=new File(refFileName);
    boolean useTempFile=false;
    if (!refFile.exists()) {
      refFileName=Time.getTimestamp();
      refFile=new File(refFileName);
      ClassLoader classLoader=getClass().getClassLoader();
      FileUtil.write(refFileName,StringUtil.read(classLoader,refPackageDir + "/service.xml"));
      useTempFile=true;
    }
    ServiceBuilder serviceBuilder=new ServiceBuilder(refFileName,_hbmFileName,_ormFileName,_modelHintsFileName,_springFileName,_springBaseFileName,_springClusterFileName,_springDynamicDataSourceFileName,_springHibernateFileName,_springInfrastructureFileName,_springShardDataSourceFileName,_apiDir,_implDir,_jsonFileName,_remotingFileName,_sqlDir,_sqlFileName,_sqlIndexesFileName,_sqlIndexesPropertiesFileName,_sqlSequencesFileName,_autoNamespaceTables,_beanLocatorUtil,_propsUtil,_pluginName,_testDir,false);
    entity=serviceBuilder.getEntity(refEntity);
    entity.setPortalReference(useTempFile);
    _entityPool.put(name,entity);
    if (useTempFile) {
      refFile.deleteOnExit();
    }
    return entity;
  }
}
