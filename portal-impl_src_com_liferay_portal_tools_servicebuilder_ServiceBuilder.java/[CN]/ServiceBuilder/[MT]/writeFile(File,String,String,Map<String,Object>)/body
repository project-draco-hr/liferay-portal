{
  String packagePath=_getPackagePath(file);
  String className=file.getName();
  className=className.substring(0,className.length() - 5);
  content=SourceFormatter.stripImports(content,packagePath,className);
  File tempFile=new File("ServiceBuilder.temp");
  FileUtil.write(tempFile,content);
  StringBuffer sb=new StringBuffer();
  Jalopy jalopy=new Jalopy();
  jalopy.setFileFormat(FileFormat.UNIX);
  jalopy.setInput(tempFile);
  jalopy.setOutput(sb);
  try {
    Jalopy.setConvention("../tools/jalopy.xml");
  }
 catch (  FileNotFoundException fnne) {
  }
  try {
    Jalopy.setConvention("../../misc/jalopy.xml");
  }
 catch (  FileNotFoundException fnne) {
  }
  if (jalopySettings == null) {
    jalopySettings=new HashMap<String,Object>();
  }
  Environment env=Environment.getInstance();
  author=GetterUtil.getString((String)jalopySettings.get("author"),author);
  env.set("author",author);
  env.set("fileName",file.getName());
  Convention convention=Convention.getInstance();
  String classMask="/**\n";
  String viewSourceHREF=" * <a href=\"" + file.getName() + ".java.html\"><b><i>View Source</i></b></a>\n";
  if (viewSourceHREF.length() > 80) {
    int x=viewSourceHREF.lastIndexOf("<",80);
    int y=viewSourceHREF.lastIndexOf(" ",80);
    int start=x;
    int end=x;
    if (x < y) {
      start=y;
      end=y + 1;
    }
    viewSourceHREF=viewSourceHREF.substring(0,start) + "\n * " + viewSourceHREF.substring(end);
  }
  classMask+=viewSourceHREF;
  classMask+=" *\n" + " * @author $author$\n" + "*/";
  convention.put(ConventionKeys.COMMENT_JAVADOC_TEMPLATE_CLASS,env.interpolate(classMask));
  convention.put(ConventionKeys.COMMENT_JAVADOC_TEMPLATE_INTERFACE,env.interpolate(classMask));
  jalopy.format();
  String newContent=sb.toString();
  String oldContent=null;
  if (file.exists()) {
    oldContent=FileUtil.read(file);
  }
  if ((oldContent == null) || !oldContent.equals(newContent)) {
    FileUtil.write(file,newContent);
    System.out.println("Writing " + file);
  }
  tempFile.deleteOnExit();
}
