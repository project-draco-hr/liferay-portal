{
  if (!FileUtil.exists(_sqlDir)) {
    return;
  }
  File sqlFile=new File(_sqlDir + "/" + _sqlIndexesFileName);
  if (!sqlFile.exists()) {
    FileUtil.write(sqlFile,"");
  }
  Map<String,String> indexSQLs=new TreeMap<String,String>();
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new FileReader(sqlFile));
  while (true) {
    String indexSQL=unsyncBufferedReader.readLine();
    if (indexSQL == null) {
      break;
    }
    if (Validator.isNotNull(indexSQL.trim())) {
      int pos=indexSQL.indexOf(" on ");
      String indexSpec=indexSQL.substring(pos + 4);
      indexSQLs.put(indexSpec,indexSQL);
    }
  }
  unsyncBufferedReader.close();
  File propsFile=new File(_sqlDir + "/" + _sqlIndexesPropertiesFileName);
  if (!propsFile.exists()) {
    FileUtil.write(propsFile,"");
  }
  Map<String,String> indexProps=new TreeMap<String,String>();
  unsyncBufferedReader=new UnsyncBufferedReader(new FileReader(propsFile));
  while (true) {
    String indexMapping=unsyncBufferedReader.readLine();
    if (indexMapping == null) {
      break;
    }
    if (Validator.isNotNull(indexMapping.trim())) {
      String[] splitIndexMapping=indexMapping.split("\\=");
      indexProps.put(splitIndexMapping[1],splitIndexMapping[0]);
    }
  }
  unsyncBufferedReader.close();
  for (int i=0; i < _ejbList.size(); i++) {
    Entity entity=_ejbList.get(i);
    if (!_isTargetEntity(entity)) {
      continue;
    }
    if (!entity.isDefaultDataSource()) {
      continue;
    }
    List<EntityFinder> finderList=entity.getFinderList();
    for (int j=0; j < finderList.size(); j++) {
      EntityFinder finder=finderList.get(j);
      if (finder.isDBIndex()) {
        List<String> finderColsNames=new ArrayList<String>();
        List<EntityColumn> finderColsList=finder.getColumns();
        for (int k=0; k < finderColsList.size(); k++) {
          EntityColumn col=finderColsList.get(k);
          finderColsNames.add(col.getDBName());
        }
        IndexMetadata indexMetadata=IndexMetadataFactoryUtil.create(entity.getTable(),finderColsNames,finder.isUnique());
        indexSQLs.put(indexMetadata.getSpecification(),indexMetadata.getSQL());
        String finderName=entity.getTable() + StringPool.PERIOD + finder.getName();
        indexProps.put(finderName,indexMetadata.getIndexName());
      }
    }
  }
  for (  Map.Entry<String,EntityMapping> entry : _entityMappings.entrySet()) {
    EntityMapping entityMapping=entry.getValue();
    _getCreateMappingTableIndex(entityMapping,indexSQLs,indexProps);
  }
  StringBundler sb=new StringBundler();
  String prevEntityName=null;
  for (  String indexSQL : indexSQLs.values()) {
    int pos=indexSQL.indexOf(" on ");
    String indexSQLSuffix=indexSQL.substring(pos + 4);
    String entityName=indexSQLSuffix.split(" ")[0];
    if ((prevEntityName != null) && !prevEntityName.equals(entityName)) {
      sb.append("\n");
    }
    sb.append(indexSQL);
    sb.append("\n");
    prevEntityName=entityName;
  }
  if (!indexSQLs.isEmpty()) {
    sb.setIndex(sb.index() - 1);
  }
  FileUtil.write(sqlFile,sb.toString(),true);
  sb.setIndex(0);
  prevEntityName=null;
  for (  String finderName : indexProps.keySet()) {
    String indexName=indexProps.get(finderName);
    String entityName=finderName.split("\\.")[0];
    if ((prevEntityName != null) && !prevEntityName.equals(entityName)) {
      sb.append("\n");
    }
    sb.append(indexName + StringPool.EQUAL + finderName);
    sb.append("\n");
    prevEntityName=entityName;
  }
  if (!indexProps.isEmpty()) {
    sb.setIndex(sb.index() - 1);
  }
  FileUtil.write(propsFile,sb.toString(),true);
}
