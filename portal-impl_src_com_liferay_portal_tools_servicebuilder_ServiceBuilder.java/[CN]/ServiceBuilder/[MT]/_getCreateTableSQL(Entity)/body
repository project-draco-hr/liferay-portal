{
  List<EntityColumn> pkList=entity.getPKList();
  List<EntityColumn> regularColList=entity.getRegularColList();
  if (regularColList.size() == 0) {
    return null;
  }
  StringBundler sb=new StringBundler();
  sb.append(_SQL_CREATE_TABLE);
  sb.append(entity.getTable());
  sb.append(" (\n");
  for (int i=0; i < regularColList.size(); i++) {
    EntityColumn col=regularColList.get(i);
    String colName=col.getName();
    String colType=col.getType();
    String colIdType=col.getIdType();
    sb.append("\t" + col.getDBName());
    sb.append(" ");
    if (colType.equalsIgnoreCase("boolean")) {
      sb.append("BOOLEAN");
    }
 else     if (colType.equalsIgnoreCase("double") || colType.equalsIgnoreCase("float")) {
      sb.append("DOUBLE");
    }
 else     if (colType.equals("int") || colType.equals("Integer") || colType.equalsIgnoreCase("short")) {
      sb.append("INTEGER");
    }
 else     if (colType.equalsIgnoreCase("long")) {
      sb.append("LONG");
    }
 else     if (colType.equals("Blob")) {
      sb.append("BLOB");
    }
 else     if (colType.equals("Date")) {
      sb.append("DATE");
    }
 else     if (colType.equals("String")) {
      Map<String,String> hints=ModelHintsUtil.getHints(_packagePath + ".model." + entity.getName(),colName);
      int maxLength=75;
      if (hints != null) {
        maxLength=GetterUtil.getInteger(hints.get("max-length"),maxLength);
      }
      if (col.isLocalized()) {
        maxLength=4000;
      }
      if (maxLength < 4000) {
        sb.append("VARCHAR(" + maxLength + ")");
      }
 else       if (maxLength == 4000) {
        sb.append("STRING");
      }
 else       if (maxLength > 4000) {
        sb.append("TEXT");
      }
    }
 else {
      sb.append("invalid");
    }
    if (col.isPrimary()) {
      sb.append(" not null");
      if (!entity.hasCompoundPK()) {
        sb.append(" primary key");
      }
    }
 else     if (colType.equals("String") || colType.equals("Date")) {
      sb.append(" null");
    }
    if (Validator.isNotNull(colIdType) && colIdType.equals("identity")) {
      sb.append(" IDENTITY");
    }
    if (((i + 1) != regularColList.size()) || (entity.hasCompoundPK())) {
      sb.append(",");
    }
    sb.append("\n");
  }
  if (entity.hasCompoundPK()) {
    sb.append("\tprimary key (");
    for (int j=0; j < pkList.size(); j++) {
      EntityColumn pk=pkList.get(j);
      sb.append(pk.getDBName());
      if ((j + 1) != pkList.size()) {
        sb.append(", ");
      }
    }
    sb.append(")\n");
  }
  sb.append(");");
  return sb.toString();
}
