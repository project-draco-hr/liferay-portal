{
  long pk=RandomTestUtil.nextLong();
  TrashEntry newTrashEntry=_persistence.create(pk);
  newTrashEntry.setGroupId(RandomTestUtil.nextLong());
  newTrashEntry.setCompanyId(RandomTestUtil.nextLong());
  newTrashEntry.setUserId(RandomTestUtil.nextLong());
  newTrashEntry.setUserName(RandomTestUtil.randomString());
  newTrashEntry.setCreateDate(RandomTestUtil.nextDate());
  newTrashEntry.setClassNameId(RandomTestUtil.nextLong());
  newTrashEntry.setClassPK(RandomTestUtil.nextLong());
  newTrashEntry.setSystemEventSetKey(RandomTestUtil.nextLong());
  newTrashEntry.setTypeSettings(RandomTestUtil.randomString());
  newTrashEntry.setStatus(RandomTestUtil.nextInt());
  _trashEntries.add(_persistence.update(newTrashEntry));
  TrashEntry existingTrashEntry=_persistence.findByPrimaryKey(newTrashEntry.getPrimaryKey());
  Assert.assertEquals(existingTrashEntry.getEntryId(),newTrashEntry.getEntryId());
  Assert.assertEquals(existingTrashEntry.getGroupId(),newTrashEntry.getGroupId());
  Assert.assertEquals(existingTrashEntry.getCompanyId(),newTrashEntry.getCompanyId());
  Assert.assertEquals(existingTrashEntry.getUserId(),newTrashEntry.getUserId());
  Assert.assertEquals(existingTrashEntry.getUserName(),newTrashEntry.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingTrashEntry.getCreateDate()),Time.getShortTimestamp(newTrashEntry.getCreateDate()));
  Assert.assertEquals(existingTrashEntry.getClassNameId(),newTrashEntry.getClassNameId());
  Assert.assertEquals(existingTrashEntry.getClassPK(),newTrashEntry.getClassPK());
  Assert.assertEquals(existingTrashEntry.getSystemEventSetKey(),newTrashEntry.getSystemEventSetKey());
  Assert.assertEquals(existingTrashEntry.getTypeSettings(),newTrashEntry.getTypeSettings());
  Assert.assertEquals(existingTrashEntry.getStatus(),newTrashEntry.getStatus());
}
