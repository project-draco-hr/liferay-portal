{
  if (!mustCheckName(detailAST)) {
    return;
  }
  String message=null;
  String regex=null;
  DetailAST modifiersAST=detailAST.findFirstToken(TokenTypes.MODIFIERS);
  if (modifiersAST.branchContains(TokenTypes.LITERAL_PRIVATE)) {
    if (DetailASTUtil.isCollection(detailAST)) {
      message=MSG_PRIVATE_COLLECTION;
      regex="^_[a-z0-9][_a-zA-Z0-9]*$";
    }
 else {
      message=MSG_INVALID_PRIVATE_NAME;
      regex="^_[_a-zA-Z0-9]*$";
    }
  }
 else   if (modifiersAST.branchContains(TokenTypes.LITERAL_PROTECTED) || modifiersAST.branchContains(TokenTypes.LITERAL_PUBLIC)) {
    if (DetailASTUtil.isCollection(detailAST)) {
      message=MSG_PROTECTED_PUBLIC_COLLECTION;
      regex="^[a-z0-9][_a-zA-Z0-9]*$";
    }
 else {
      message=MSG_INVALID_PROTECTED_PUBLIC_NAME;
      regex="^[a-zA-Z0-9][_a-zA-Z0-9]*$";
    }
  }
 else {
    return;
  }
  DetailAST nameAST=detailAST.findFirstToken(TokenTypes.IDENT);
  Pattern pattern=Pattern.compile(regex);
  Matcher matcher=pattern.matcher(nameAST.getText());
  if (!matcher.find()) {
    log(nameAST.getLineNo(),message,nameAST.getText(),regex);
  }
}
