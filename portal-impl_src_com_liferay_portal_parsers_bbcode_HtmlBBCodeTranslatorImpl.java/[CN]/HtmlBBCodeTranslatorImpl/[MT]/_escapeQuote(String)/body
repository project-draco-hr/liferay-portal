{
  if (quote.isEmpty()) {
    return quote;
  }
  StringBuilder sb=new StringBuilder();
  int pointer=0;
  Matcher regexMatcher=_bbCodePattern.matcher(quote);
  Collection<String> entitiesValues=_bbCodeCharacters.values();
  while (regexMatcher.find()) {
    String match=regexMatcher.group();
    int matchStartIndex=regexMatcher.start();
    int nextSemicolonIndex=quote.indexOf(StringPool.SEMICOLON,matchStartIndex);
    sb.append(quote.substring(pointer,matchStartIndex));
    boolean entityFound=false;
    if (nextSemicolonIndex >= 0) {
      String entity=quote.substring(matchStartIndex,nextSemicolonIndex + 1);
      if (entitiesValues.contains(entity)) {
        sb.append(entity);
        pointer=matchStartIndex + entity.length();
        entityFound=true;
      }
    }
    if (!entityFound) {
      String escapedValue=_bbCodeCharacters.get(match);
      sb.append(escapedValue);
      pointer=matchStartIndex + match.length();
    }
  }
  if (pointer < quote.length()) {
    sb.append(quote.substring(pointer,quote.length()));
  }
  return sb.toString();
}
