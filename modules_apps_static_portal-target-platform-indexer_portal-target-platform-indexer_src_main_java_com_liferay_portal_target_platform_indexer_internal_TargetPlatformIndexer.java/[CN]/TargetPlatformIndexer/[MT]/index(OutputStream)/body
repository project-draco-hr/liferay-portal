{
  Path tempPath=Files.createTempDirectory(null);
  File tempDir=tempPath.toFile();
  _config.put("root.url",tempDir.getPath());
  Set<File> jarFiles=new LinkedHashSet<>();
  try {
    Object[] objects=_processSystemBundle(tempDir,jarFiles);
    String sha256sum=(String)objects[0];
    int size=(int)objects[1];
    for (    String dirName : _dirNames) {
      Path path=Paths.get(dirName);
      if (Files.notExists(path)) {
        continue;
      }
      try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(path,"*.jar")){
        Iterator<Path> iterator=directoryStream.iterator();
        while (iterator.hasNext()) {
          _addBundle(tempPath,iterator.next(),jarFiles);
        }
      }
     }
    for (    File additionalJarFile : _additionalJarFiles) {
      Path tempJarPath=tempPath.resolve(additionalJarFile.getName());
      Files.copy(additionalJarFile.toPath(),tempJarPath,StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING);
      jarFiles.add(tempJarPath.toFile());
    }
    ResourceIndexer resourceIndexer=new RepoIndex();
    ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    resourceIndexer.index(jarFiles,byteArrayOutputStream,_config);
    outputStream.write(_fixSystemBundleOSGiContent(byteArrayOutputStream.toString("UTF-8"),sha256sum,size));
  }
  finally {
    PathUtil.deltree(tempPath);
  }
}
