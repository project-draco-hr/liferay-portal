{
  try {
    String pathFileName=getPathJavaFileName(actionName);
    File file=new File("test-classes" + "/" + pathFileName);
    String pathFileURL="file:///" + file.getAbsolutePath();
    URL classUrl=new URL(pathFileURL);
    URL[] classUrls={classUrl};
    URLClassLoader urlClassLoader=new URLClassLoader(classUrls);
    String pathClassName=getPathClassName(actionName);
    Class pathClass=urlClassLoader.loadClass(pathClassName);
    Method method=pathClass.getMethod("getPaths",null);
    HashMap<String,String> paths=(HashMap<String,String>)method.invoke(pathClass,null);
    Set<String> pathLocatorKeys=paths.keySet();
    String[] partialKeys={};
    if (locatorKey.contains("${") && locatorKey.contains("}")) {
      caseComparator="partial";
      partialKeys=locatorKey.split("\\$\\{[^}]*?\\}");
    }
    for (    String pathLocatorKey : pathLocatorKeys) {
      if (caseComparator == null) {
        if (pathLocatorKey.equals(locatorKey)) {
          return true;
        }
      }
 else {
        if (caseComparator.equals("contains") && pathLocatorKey.contains(locatorKey)) {
          return true;
        }
 else         if (caseComparator.equals("endsWith") && pathLocatorKey.endsWith(locatorKey)) {
          return true;
        }
 else         if (caseComparator.equals("partial")) {
          boolean containsAll=true;
          for (          String s : partialKeys) {
            if (!pathLocatorKey.contains(s)) {
              containsAll=false;
            }
          }
          if (containsAll) {
            return true;
          }
        }
 else         if (caseComparator.equals("startsWith") && pathLocatorKey.startsWith(locatorKey)) {
          return true;
        }
      }
    }
    return false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}
