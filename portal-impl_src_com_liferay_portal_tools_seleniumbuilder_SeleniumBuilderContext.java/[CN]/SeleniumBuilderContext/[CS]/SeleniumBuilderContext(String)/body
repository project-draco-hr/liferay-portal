{
  _baseDir=baseDir;
  DirectoryScanner directoryScanner=new DirectoryScanner();
  directoryScanner.setBasedir(_baseDir);
  directoryScanner.setIncludes(new String[]{"**\\*.action","**\\*.function","**\\*.macro","**\\*.path","**\\*.testcase","**\\*.testsuite"});
  directoryScanner.scan();
  String[] fileNames=directoryScanner.getIncludedFiles();
  _seleniumBuilderFileUtil=new SeleniumBuilderFileUtil(_baseDir);
  for (  String fileName : fileNames) {
    fileName=_seleniumBuilderFileUtil.normalizeFileName(fileName);
    if (fileName.endsWith(".action")) {
      _actionFileNames.add(fileName);
      Element root=_seleniumBuilderFileUtil.getRootElementByFileName(fileName);
      _actionRootElements.put(fileName,root);
    }
 else     if (fileName.endsWith(".function")) {
      _functionFileNames.add(fileName);
      String className=StringUtil.replace(fileName,".functions","Function");
      className=StringUtil.replace(className,StringPool.SLASH,StringPool.PERIOD);
      _functionClassNames.add(className);
      Element root=_seleniumBuilderFileUtil.getRootElementByFileName(fileName);
      _functionRootElements.put(fileName,root);
      Set<String> functionCommands=new HashSet<String>();
      List<Element> functiondefs=root.elements("functiondef");
      for (      Element functiondef : functiondefs) {
        functionCommands.add(functiondef.attributeValue("command"));
      }
      _functionCommandSets.put(fileName,functionCommands);
      String functionParams=root.attributeValue("params");
      int functionParam=GetterUtil.getInteger(functionParams);
      if (functionParam == 0) {
        _functionParams.put(fileName,1);
      }
 else {
        _functionParams.put(fileName,functionParam);
      }
      String functionReturn=root.attributeValue("return");
      if (functionReturn == null) {
        _functionReturnTypes.put(fileName,"void");
      }
 else {
        _functionReturnTypes.put(fileName,functionReturn);
      }
    }
 else     if (fileName.endsWith(".macro")) {
      _macroFileNames.add(fileName);
      String className=StringUtil.replace(fileName,".macro","Macro");
      className=StringUtil.replace(className,StringPool.SLASH,StringPool.PERIOD);
      _macroClassNames.add(className);
      Element root=_seleniumBuilderFileUtil.getRootElementByFileName(fileName);
      _macroRootElements.put(fileName,root);
      Set<String> macroCommands=new HashSet<String>();
      List<Element> macrodefs=root.elements("macrodef");
      for (      Element macrodef : macrodefs) {
        macroCommands.add(macrodef.attributeValue("command"));
      }
      _macroCommandNames.put(fileName,macroCommands);
    }
 else     if (fileName.endsWith(".path")) {
      _pathFileNames.add(fileName);
      String actionClassName=StringUtil.replace(fileName,".path","Action");
      actionClassName=StringUtil.replace(actionClassName,StringPool.SLASH,StringPool.PERIOD);
      _actionClassNames.add(actionClassName);
      String pathClassName=StringUtil.replace(fileName,".path","Path");
      pathClassName=StringUtil.replace(pathClassName,StringPool.SLASH,StringPool.PERIOD);
      _pathClassNames.add(pathClassName);
      Element root=_seleniumBuilderFileUtil.getRootElementByFileName(fileName);
      _pathRootElements.put(fileName,root);
    }
 else     if (fileName.endsWith(".testcase")) {
      _testCaseFileNames.add(fileName);
      Element root=_seleniumBuilderFileUtil.getRootElementByFileName(fileName);
      _testCaseRootElements.put(fileName,root);
    }
 else     if (fileName.endsWith(".testsuite")) {
      _testSuiteFileNames.add(fileName);
      Element root=_seleniumBuilderFileUtil.getRootElementByFileName(fileName);
      _testSuiteRootElements.put(fileName,root);
    }
 else {
      throw new IllegalArgumentException("Invalid file " + fileName);
    }
  }
  _seleniumParams=_putSeleniumParams(_seleniumParams,"com/liferay/portalweb/portal/util/" + "liferayselenium/SeleniumWrapper.java");
  _seleniumParams=_putSeleniumParams(_seleniumParams,"com/liferay/portalweb/portal/util/" + "liferayselenium/LiferaySelenium.java");
  _seleniumParams.put("isNotChecked",1);
  _seleniumParams.put("isNotText",2);
  _seleniumParams.put("isNotVisible",1);
  _seleniumParams.put("open",1);
}
