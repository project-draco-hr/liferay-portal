{
  _baseDir=baseDir;
  _seleniumBuilderFileUtil=new SeleniumBuilderFileUtil(_baseDir);
  DirectoryScanner directoryScanner=new DirectoryScanner();
  directoryScanner.setBasedir(_baseDir);
  directoryScanner.setIncludes(new String[]{"**\\*.action","**\\*.function","**\\*.macro","**\\*.path","**\\*.testcase","**\\*.testsuite"});
  directoryScanner.scan();
  String[] fileNames=directoryScanner.getIncludedFiles();
  for (  String fileName : fileNames) {
    fileName=_normalizeFileName(fileName);
    if (fileName.endsWith(".action")) {
      String actionName=_getName(fileName);
      _actionFileNames.put(actionName,fileName);
      if (_actionNames.contains(actionName)) {
        throw new Exception("Duplicate name " + actionName + " at "+ fileName);
      }
      _actionRootElements.put(actionName,_getRootElement(fileName));
    }
 else     if (fileName.endsWith(".function")) {
      String functionName=_getName(fileName);
      _functionClassNames.put(functionName,_getClassName(fileName));
      _functionFileNames.put(functionName,fileName);
      _functionJavaFileNames.put(functionName,_getJavaFileName(fileName));
      if (_functionNames.contains(functionName)) {
        throw new Exception("Duplicate name " + functionName + " at "+ fileName);
      }
      _functionNames.add(functionName);
      _functionPackageNames.put(functionName,_getPackageName(fileName));
      _functionReturnTypes.put(functionName,_getReturnType(functionName));
      Element rootElement=_getRootElement(fileName);
      _functionRootElements.put(functionName,rootElement);
      _functionSimpleClassNames.put(functionName,_getSimpleClassName(fileName));
      _functionTargetCounts.put(functionName,_getTargetCount(rootElement));
    }
 else     if (fileName.endsWith(".macro")) {
      String macroName=_getName(fileName);
      _macroClassNames.put(macroName,_getClassName(fileName));
      _macroFileNames.put(macroName,fileName);
      _macroJavaFileNames.put(macroName,_getJavaFileName(fileName));
      if (_macroNames.contains(macroName)) {
        throw new Exception("Duplicate name " + macroName + " at "+ fileName);
      }
      _macroNames.add(macroName);
      _macroPackageNames.put(macroName,_getPackageName(fileName));
      _macroSimpleClassNames.put(macroName,_getSimpleClassName(fileName));
      _macroRootElements.put(macroName,_getRootElement(fileName));
    }
 else     if (fileName.endsWith(".path")) {
      String pathName=_getName(fileName);
      _actionClassNames.put(pathName,_getClassName(fileName,"Action"));
      _actionJavaFileNames.put(pathName,_getJavaFileName(fileName,"Action"));
      _actionNames.add(pathName);
      _actionPackageNames.put(pathName,_getPackageName(fileName));
      _actionSimpleClassNames.put(pathName,_getSimpleClassName(fileName,"Action"));
      _pathClassNames.put(pathName,_getClassName(fileName));
      _pathFileNames.put(pathName,fileName);
      _pathJavaFileNames.put(pathName,_getJavaFileName(fileName));
      if (_pathNames.contains(pathName)) {
        throw new Exception("Duplicate name " + pathName + " at "+ fileName);
      }
      _pathNames.add(pathName);
      _pathPackageNames.put(pathName,_getPackageName(fileName));
      _pathRootElements.put(pathName,_getRootElement(fileName));
      _pathSimpleClassNames.put(pathName,_getSimpleClassName(fileName));
    }
 else     if (fileName.endsWith(".testcase")) {
      String testCaseName=_getName(fileName);
      _testCaseClassNames.put(testCaseName,_getClassName(fileName));
      _testCaseFileNames.put(testCaseName,fileName);
      _testCaseJavaFileNames.put(testCaseName,_getJavaFileName(fileName));
      if (_testCaseNames.contains(testCaseName)) {
        throw new Exception("Duplicate name " + testCaseName + " at "+ fileName);
      }
      _testCaseNames.add(testCaseName);
      _testCasePackageNames.put(testCaseName,_getPackageName(fileName));
      _testCaseRootElements.put(testCaseName,_getRootElement(fileName));
      _testCaseSimpleClassNames.put(testCaseName,_getSimpleClassName(fileName));
    }
 else     if (fileName.endsWith(".testsuite")) {
      String testSuiteName=_getName(fileName);
      _testSuiteClassNames.put(testSuiteName,_getClassName(fileName));
      _testSuiteFileNames.put(testSuiteName,fileName);
      _testSuiteJavaFileNames.put(testSuiteName,_getJavaFileName(fileName));
      if (_testSuiteNames.contains(testSuiteName)) {
        throw new Exception("Duplicate name " + testSuiteName + " at "+ fileName);
      }
      _testSuiteNames.add(testSuiteName);
      _testSuitePackageNames.put(testSuiteName,_getPackageName(fileName));
      _testSuiteRootElements.put(testSuiteName,_getRootElement(fileName));
      _testSuiteSimpleClassNames.put(testSuiteName,_getSimpleClassName(fileName));
    }
 else {
      throw new IllegalArgumentException("Invalid file " + fileName);
    }
  }
  String[] seleniumFiles={"com/liferay/portalweb/portal/util/liferayselenium/" + "SeleniumWrapper.java","com/liferay/portalweb/portal/util/liferayselenium/" + "LiferaySelenium.java"};
  for (  String seleniumFile : seleniumFiles) {
    String content=_seleniumBuilderFileUtil.getNormalizedContent(seleniumFile);
    Pattern pattern=Pattern.compile("public [a-z]* [A-Za-z0-9_]*\\(.*?\\)");
    Matcher matcher=pattern.matcher(content);
    while (matcher.find()) {
      String methodDeclaraction=matcher.group();
      int x=methodDeclaraction.indexOf(" ",7);
      int y=methodDeclaraction.indexOf("(");
      String seleniumCommandName=methodDeclaraction.substring(x,y);
      int z=methodDeclaraction.indexOf(")");
      String seleniumParams=methodDeclaraction.substring(y + 1,z);
      int seleniumParamCount=0;
      if (!seleniumParams.equals("")) {
        seleniumParamCount=StringUtil.count(seleniumParams,",") + 1;
      }
      _seleniumParamCounts.put(seleniumCommandName,seleniumParamCount);
    }
  }
  _seleniumParamCounts.put("open",1);
}
