{
  _baseDir=baseDir;
  _seleniumBuilderFileUtil=new SeleniumBuilderFileUtil(_baseDir);
  DirectoryScanner directoryScanner=new DirectoryScanner();
  directoryScanner.setBasedir(_baseDir);
  directoryScanner.setIncludes(new String[]{"**\\*.action","**\\*.function","**\\*.macro","**\\*.path","**\\*.testcase","**\\*.testsuite"});
  directoryScanner.scan();
  String[] fileNames=directoryScanner.getIncludedFiles();
  for (  String fileName : fileNames) {
    fileName=_normalizeFileName(fileName);
    if (fileName.endsWith(".action")) {
      String actionName=_getName(fileName);
      _actionFileNames.put(actionName,fileName);
      if (_actionNames.contains(actionName)) {
        throw new Exception("Duplicate name " + actionName + " at "+ fileName);
      }
      _actionNames.add(actionName);
      _actionRootElements.put(actionName,_getRootElement(fileName));
    }
 else     if (fileName.endsWith(".function")) {
      String functionName=_getName(fileName);
      _functionClassNames.put(functionName,_getClassName(fileName));
      _functionFileNames.put(functionName,fileName);
      if (_functionNames.contains(functionName)) {
        throw new Exception("Duplicate name " + functionName + " at "+ fileName);
      }
      _functionNames.add(functionName);
      _functionReturnTypes.put(functionName,_getReturnType(functionName));
      Element rootElement=_getRootElement(fileName);
      _functionRootElements.put(functionName,rootElement);
      _functionTargetCounts.put(functionName,_getTargetCount(rootElement));
    }
 else     if (fileName.endsWith(".macro")) {
      String macroName=_getName(fileName);
      _macroClassNames.put(macroName,_getClassName(fileName));
      _macroFileNames.put(macroName,fileName);
      if (_macroNames.contains(macroName)) {
        throw new Exception("Duplicate name " + macroName + " at "+ fileName);
      }
      _macroNames.add(macroName);
      _macroRootElements.put(macroName,_getRootElement(fileName));
    }
 else     if (fileName.endsWith(".path")) {
      String pathName=_getName(fileName);
      _actionClassNames.put(pathName,_getClassName(fileName,"Action"));
      _pathClassNames.put(pathName,_getClassName(fileName));
      _pathFileNames.put(pathName,fileName);
      if (_pathNames.contains(pathName)) {
        throw new Exception("Duplicate name " + pathName + " at "+ fileName);
      }
      _pathNames.add(pathName);
      _pathRootElements.put(pathName,_getRootElement(fileName));
    }
 else     if (fileName.endsWith(".testcase")) {
      String testCaseName=_getName(fileName);
      _testCaseClassNames.put(testCaseName,_getClassName(fileName));
      _testCaseFileNames.put(testCaseName,fileName);
      if (_testCaseNames.contains(testCaseName)) {
        throw new Exception("Duplicate name " + testCaseName + " at "+ fileName);
      }
      _testCaseNames.add(testCaseName);
      _testCaseRootElements.put(testCaseName,_getRootElement(fileName));
    }
 else     if (fileName.endsWith(".testsuite")) {
      String testSuiteName=_getName(fileName);
      _testSuiteClassNames.put(testSuiteName,_getClassName(fileName));
      _testSuiteFileNames.put(testSuiteName,fileName);
      if (_testSuiteNames.contains(testSuiteName)) {
        throw new Exception("Duplicate name " + testSuiteName + " at "+ fileName);
      }
      _testSuiteNames.add(testSuiteName);
      _testSuiteRootElements.put(testSuiteName,_getRootElement(fileName));
    }
 else {
      throw new IllegalArgumentException("Invalid file " + fileName);
    }
  }
}
