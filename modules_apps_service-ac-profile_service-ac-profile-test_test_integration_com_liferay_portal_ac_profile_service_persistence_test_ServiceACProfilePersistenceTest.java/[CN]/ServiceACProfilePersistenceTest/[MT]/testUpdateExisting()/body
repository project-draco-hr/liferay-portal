{
  long pk=RandomTestUtil.nextLong();
  ServiceACProfile newServiceACProfile=_persistence.create(pk);
  newServiceACProfile.setUuid(RandomTestUtil.randomString());
  newServiceACProfile.setCompanyId(RandomTestUtil.nextLong());
  newServiceACProfile.setUserId(RandomTestUtil.nextLong());
  newServiceACProfile.setUserName(RandomTestUtil.randomString());
  newServiceACProfile.setCreateDate(RandomTestUtil.nextDate());
  newServiceACProfile.setModifiedDate(RandomTestUtil.nextDate());
  newServiceACProfile.setAllowedServices(RandomTestUtil.randomString());
  newServiceACProfile.setName(RandomTestUtil.randomString());
  newServiceACProfile.setTitle(RandomTestUtil.randomString());
  _serviceACProfiles.add(_persistence.update(newServiceACProfile));
  ServiceACProfile existingServiceACProfile=_persistence.findByPrimaryKey(newServiceACProfile.getPrimaryKey());
  Assert.assertEquals(existingServiceACProfile.getUuid(),newServiceACProfile.getUuid());
  Assert.assertEquals(existingServiceACProfile.getServiceACProfileId(),newServiceACProfile.getServiceACProfileId());
  Assert.assertEquals(existingServiceACProfile.getCompanyId(),newServiceACProfile.getCompanyId());
  Assert.assertEquals(existingServiceACProfile.getUserId(),newServiceACProfile.getUserId());
  Assert.assertEquals(existingServiceACProfile.getUserName(),newServiceACProfile.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingServiceACProfile.getCreateDate()),Time.getShortTimestamp(newServiceACProfile.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingServiceACProfile.getModifiedDate()),Time.getShortTimestamp(newServiceACProfile.getModifiedDate()));
  Assert.assertEquals(existingServiceACProfile.getAllowedServices(),newServiceACProfile.getAllowedServices());
  Assert.assertEquals(existingServiceACProfile.getName(),newServiceACProfile.getName());
  Assert.assertEquals(existingServiceACProfile.getTitle(),newServiceACProfile.getTitle());
}
