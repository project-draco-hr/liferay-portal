{
  jobMessageUtilTest.dependenciesDir=sampleDir;
  String content=JenkinsResultsParserUtil.toString(JenkinsResultsParserUtil.getLocalURL(progressiveTextURL));
  Matcher progressiveTextMatcher=_PROGRESSIVE_TEXT_JOB_URL_PATTERN.matcher(content);
  int jobCount=0;
  int passCount=0;
  StringBuilder reportFilesBuffer=new StringBuilder();
  while (progressiveTextMatcher.find()) {
    String urlString=progressiveTextMatcher.group("url");
    Matcher urlMatcher=_URL_JOB_NAME_PATTERN.matcher(urlString);
    urlMatcher.find();
    JSONObject jobJSONObject=JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(urlString + "/api/json"));
    Project project=getProject(null,urlString,sampleDir.getPath());
    GithubJobMessageUtil.getFailedJobMessage(project);
    String jobReportString=project.getProperty("report.html.content");
    File jobExpectedMessageFile=new File(sampleDir,jobCount + "-report.html");
    write(jobExpectedMessageFile,"<h5 job-result=\\\"" + jobJSONObject.getString("result") + "\\\"><a href=\""+ urlString+ "\">"+ urlMatcher.group("jobName")+ "</a></h5>"+ jobReportString);
    if (reportFilesBuffer.length() > 0) {
      reportFilesBuffer.append(" ");
    }
    reportFilesBuffer.append(jobExpectedMessageFile.getPath());
    if ("SUCCESS".equals(jobJSONObject.getString("result"))) {
      passCount++;
    }
    jobCount++;
  }
  properties.setProperty("top.level.fail.count",String.valueOf(jobCount - passCount));
  properties.setProperty("top.level.pass.count",String.valueOf(passCount));
  properties.setProperty("top.level.report.files",reportFilesBuffer.toString());
}
