{
  jobMessageUtilTest.dependenciesDir=sampleDir;
  String content=read(progressiveTextFile);
  Matcher progressiveTextMatcher=_PROGRESSIVE_TEXT_JOB_URL_PATTERN.matcher(content);
  StringBuffer progressiveTextBuffer=new StringBuffer();
  StringBuffer reportFilesBuffer=new StringBuffer();
  int passCount=0;
  int jobCount=0;
  while (progressiveTextMatcher.find()) {
    String urlString=progressiveTextMatcher.group("url");
    Matcher urlMatcher=_URL_JOB_NAME_PATTERN.matcher(urlString);
    urlMatcher.find();
    jobMessageUtilTest.downloadSample(String.valueOf(jobCount),urlMatcher.group("buildNumber"),urlMatcher.group("jobName"),urlMatcher.group("hostName"),false);
    File jobDir=new File(sampleDir,jobCount + "-" + urlMatcher.group("jobName"));
    JSONObject jobJSONObject=JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(toURLString(new File(jobDir,"/api/json"))));
    File jobExpectedMessageFile=new File(jobDir,"expected_message.html");
    write(jobExpectedMessageFile,"<h5 job-result=\\\"" + jobJSONObject.getString("result") + "\\\"><a href=\""+ toURLString(jobDir)+ "\">"+ urlMatcher.group("jobName")+ "</a></h5>"+ read(jobExpectedMessageFile));
    if (reportFilesBuffer.length() > 0) {
      reportFilesBuffer.append(" ");
    }
    reportFilesBuffer.append(sampleDir.getPath());
    reportFilesBuffer.append("/");
    reportFilesBuffer.append(jobCount);
    reportFilesBuffer.append("-");
    reportFilesBuffer.append(urlMatcher.group("jobName"));
    reportFilesBuffer.append("/");
    reportFilesBuffer.append("expected_message.html");
    if ("SUCCESS".equals(jobJSONObject.getString("result"))) {
      passCount++;
    }
    progressiveTextMatcher.appendReplacement(progressiveTextBuffer,Matcher.quoteReplacement(progressiveTextMatcher.group("prefix") + toURLString(new File(sampleDir,jobCount + "-" + urlMatcher.group("jobName"))) + progressiveTextMatcher.group("suffix")));
    jobCount++;
  }
  properties.setProperty("top.level.report.files",reportFilesBuffer.toString());
  properties.setProperty("top.level.pass.count",String.valueOf(passCount));
  properties.setProperty("top.level.fail.count",String.valueOf(jobCount - passCount));
  progressiveTextMatcher.appendTail(progressiveTextBuffer);
  write(progressiveTextFile,progressiveTextBuffer.toString());
}
