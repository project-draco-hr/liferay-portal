{
  jobMessageUtilTest.dependenciesDir=sampleDir;
  String content=JenkinsResultsParserUtil.toString(JenkinsResultsParserUtil.getLocalURL(progressiveTextURL));
  Matcher progressiveTextMatcher=_PROGRESSIVE_TEXT_JOB_URL_PATTERN.matcher(content);
  int jobCount=0;
  ExecutorService executor=Executors.newFixedThreadPool(_MAX_THREADS);
  List<FutureTask<FailedJobMessageResult>> taskList=new ArrayList<>();
  while (progressiveTextMatcher.find()) {
    FailedJobMessageCallable callable=new FailedJobMessageCallable(jobCount,sampleDir,progressiveTextMatcher.group("url"));
    FutureTask<FailedJobMessageResult> futureTask=new FutureTask<>(callable);
    executor.execute(futureTask);
    taskList.add(futureTask);
    jobCount++;
  }
  executor.shutdown();
  int passCount=0;
  StringBuilder reportFilesStringBuilder=new StringBuilder();
  for (  FutureTask<FailedJobMessageResult> task : taskList) {
    FailedJobMessageResult result=task.get();
    if ("SUCCESS".equals(result.getResult())) {
      passCount++;
    }
    if (reportFilesStringBuilder.length() > 0) {
      reportFilesStringBuilder.append(" ");
    }
    reportFilesStringBuilder.append(result.getJobReportFilePath());
  }
  properties.setProperty("top.level.report.files",reportFilesStringBuilder.toString());
  properties.setProperty("top.level.pass.count",String.valueOf(passCount));
  properties.setProperty("top.level.fail.count",String.valueOf(jobCount - passCount));
}
