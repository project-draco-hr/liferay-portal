{
  if (DDMImpl.TYPE_CHECKBOX.equals(fieldType)) {
    if (fieldValue.equals(Boolean.FALSE.toString())) {
      fieldValue=StringPool.BLANK;
    }
    dynamicContentElement.addCDATA(fieldValue);
  }
 else   if (DDMImpl.TYPE_DDM_DOCUMENTLIBRARY.equals(fieldType) && Validator.isNotNull(fieldValue)) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject(fieldValue);
    String uuid=jsonObject.getString("uuid");
    long groupId=jsonObject.getLong("groupId");
    FileEntry fileEntry=DLAppLocalServiceUtil.getFileEntryByUuidAndGroupId(uuid,groupId);
    fieldValue=DLUtil.getPreviewURL(fileEntry,fileEntry.getFileVersion(),null,StringPool.BLANK,false,true);
    dynamicContentElement.addCDATA(fieldValue);
  }
 else   if (DDMImpl.TYPE_DDM_LINK_TO_PAGE.equals(fieldType) && Validator.isNotNull(fieldValue)) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject(fieldValue);
    long groupId=jsonObject.getLong("groupId");
    String layoutId=jsonObject.getString("layoutId");
    boolean privateLayout=jsonObject.getBoolean("privateLayout");
    StringBundler sb=new StringBundler(5);
    sb.append(layoutId);
    sb.append(StringPool.AT);
    if (privateLayout) {
      sb.append("private");
    }
 else {
      sb.append("public");
    }
    sb.append(StringPool.AT);
    sb.append(groupId);
    dynamicContentElement.addCDATA(sb.toString());
  }
 else   if (DDMImpl.TYPE_SELECT.equals(fieldType) && Validator.isNotNull(fieldValue)) {
    JSONArray jsonArray=JSONFactoryUtil.createJSONArray(fieldValue);
    if (jsonArray.length() > 1) {
      for (int i=0; i < jsonArray.length(); i++) {
        Element optionElement=dynamicContentElement.addElement("option");
        optionElement.addCDATA(jsonArray.getString(i));
      }
    }
 else {
      dynamicContentElement.addCDATA(jsonArray.getString(0));
    }
  }
 else {
    dynamicContentElement.addCDATA(fieldValue);
  }
}
