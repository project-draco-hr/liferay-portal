{
  if (DDMImpl.TYPE_CHECKBOX.equals(fieldType)) {
    if (fieldValue.equals(Boolean.FALSE.toString())) {
      fieldValue=StringPool.BLANK;
    }
    dynamicContentElement.addCDATA(fieldValue);
  }
 else   if (DDMImpl.TYPE_DDM_IMAGE.equals(fieldType) && Validator.isNotNull(fieldValue)) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject(fieldValue);
    dynamicContentElement.addAttribute("alt",jsonObject.getString("alt"));
    dynamicContentElement.addAttribute("name",jsonObject.getString("name"));
    dynamicContentElement.addCDATA(fieldValue);
  }
 else   if (DDMImpl.TYPE_DDM_LINK_TO_PAGE.equals(fieldType) && Validator.isNotNull(fieldValue)) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject(fieldValue);
    long groupId=jsonObject.getLong("groupId");
    String layoutId=jsonObject.getString("layoutId");
    boolean privateLayout=jsonObject.getBoolean("privateLayout");
    StringBundler sb=new StringBundler((groupId > 0) ? 5 : 3);
    sb.append(layoutId);
    sb.append(StringPool.AT);
    if (privateLayout) {
      Group group=GroupLocalServiceUtil.fetchGroup(groupId);
      if (group == null) {
        sb.append("private");
      }
 else       if (group.isUser()) {
        sb.append("private-user");
      }
 else {
        sb.append("private-group");
      }
    }
 else {
      sb.append("public");
    }
    if (groupId > 0) {
      sb.append(StringPool.AT);
      sb.append(groupId);
    }
    dynamicContentElement.addCDATA(sb.toString());
  }
 else   if (DDMImpl.TYPE_SELECT.equals(fieldType) && Validator.isNotNull(fieldValue)) {
    JSONArray jsonArray=JSONFactoryUtil.createJSONArray(fieldValue);
    if (jsonArray.length() > 1) {
      for (int i=0; i < jsonArray.length(); i++) {
        Element optionElement=dynamicContentElement.addElement("option");
        optionElement.addCDATA(jsonArray.getString(i));
      }
    }
 else {
      dynamicContentElement.addCDATA(jsonArray.getString(0));
    }
  }
 else {
    dynamicContentElement.addCDATA(fieldValue);
  }
}
