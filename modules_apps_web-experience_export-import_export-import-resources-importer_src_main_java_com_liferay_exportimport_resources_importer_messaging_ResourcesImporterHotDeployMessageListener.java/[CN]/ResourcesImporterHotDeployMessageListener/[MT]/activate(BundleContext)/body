{
  _serviceTrackerMap=ServiceTrackerMapFactory.openSingleValueMap(bundleContext,ServletContext.class,null,new ServiceReferenceMapper<String,ServletContext>(){
    @Override public void map(    ServiceReference<ServletContext> serviceReference,    ServiceReferenceMapper.Emitter<String> emitter){
      try {
        ServletContext servletContext=bundleContext.getService(serviceReference);
        String servletContextName=GetterUtil.getString(servletContext.getServletContextName());
        emitter.emit(servletContextName);
      }
  finally {
        bundleContext.ungetService(serviceReference);
      }
    }
  }
);
  if (_destinationFactory != null) {
    DestinationConfiguration destinationConfiguration=new DestinationConfiguration(DestinationConfiguration.DESTINATION_TYPE_SERIAL,ResourcesImporterDestinationNames.RESOURCES_IMPORTER);
    _destination=_destinationFactory.createDestination(destinationConfiguration);
    Dictionary<String,Object> dictionary=new HashMapDictionary<>();
    dictionary.put("destination.name",_destination.getName());
    _serviceRegistration=bundleContext.registerService(Destination.class,_destination,dictionary);
  }
}
