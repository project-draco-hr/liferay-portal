{
  BaseRepository baseRepository=null;
  com.liferay.portal.model.Repository repository=null;
  try {
    repository=_repositoryLocalService.getRepository(repositoryId);
    ClassName className=_classNameLocalService.getClassName(classNameId);
    String repositoryImplClassName=className.getValue();
    baseRepository=ExternalRepositoryFactoryUtil.getInstance(repositoryImplClassName);
  }
 catch (  Exception e) {
    throw new RepositoryException("There is no valid repository class with class name id " + classNameId,e);
  }
  CMISRepositoryHandler cmisRepositoryHandler=null;
  if (baseRepository instanceof CMISRepositoryHandler) {
    cmisRepositoryHandler=(CMISRepositoryHandler)baseRepository;
  }
 else   if (baseRepository instanceof BaseRepositoryProxyBean) {
    BaseRepositoryProxyBean baseRepositoryProxyBean=(BaseRepositoryProxyBean)baseRepository;
    ClassLoaderBeanHandler classLoaderBeanHandler=(ClassLoaderBeanHandler)ProxyUtil.getInvocationHandler(baseRepositoryProxyBean.getProxyBean());
    Object bean=classLoaderBeanHandler.getBean();
    if (bean instanceof CMISRepositoryHandler) {
      cmisRepositoryHandler=(CMISRepositoryHandler)bean;
    }
  }
  if (cmisRepositoryHandler != null) {
    CMISRepository cmisRepository=new CMISRepository(cmisRepositoryHandler);
    cmisRepositoryHandler.setCmisRepository(cmisRepository);
    setupRepository(repositoryId,repository,cmisRepository);
  }
  setupRepository(repositoryId,repository,baseRepository);
  if (!ExportImportThreadLocal.isImportInProcess()) {
    baseRepository.initRepository();
  }
  return baseRepository;
}
