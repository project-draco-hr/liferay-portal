{
  if (_path == null) {
    throw new BuildException("Path attribute is required",getLocation());
  }
  File gitDir=PathUtil.getGitDir(_gitDir,getProject(),getLocation());
  String relativePath=PathUtil.toRelativePath(gitDir,_path);
  if (_useCache) {
    Boolean cleanFlag=_cleanFlags.get(relativePath);
    if (cleanFlag != null) {
      return cleanFlag;
    }
  }
  try (Repository repository=RepositoryCache.open(RepositoryCache.FileKey.exact(gitDir,FS.DETECTED))){
    Git git=new Git(new DirCacheCachedRepositoryWrapper(repository));
    StatusCommand statusCommand=git.status();
    statusCommand.addPath(relativePath);
    statusCommand.setIgnoreSubmodules(IgnoreSubmoduleMode.ALL);
    Status status=statusCommand.call();
    Boolean cleanFlag=status.isClean();
    if (_useCache) {
      _cleanFlags.put(relativePath,cleanFlag);
    }
    return cleanFlag;
  }
 catch (  Exception e) {
    throw new BuildException("Unable to check cleanness for path " + _path,e);
  }
}
