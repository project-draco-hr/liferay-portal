{
  StringBundler innerOrderBySB=new StringBundler();
  StringBundler outerOrderBySB=new StringBundler();
  String[] orderByColumns=StringUtil.split(orderBy,StringPool.COMMA);
  for (  String orderByColumn : orderByColumns) {
    orderByColumn=orderByColumn.trim();
    String orderByColumnName=orderByColumn;
    String orderByType="ASC";
    int spacePos=orderByColumn.lastIndexOf(CharPool.SPACE);
    if (spacePos != -1) {
      int parenPos=orderByColumn.indexOf(CharPool.OPEN_PARENTHESIS,spacePos);
      if (parenPos == -1) {
        orderByColumnName=orderByColumn.substring(0,spacePos);
        orderByType=orderByColumn.substring(spacePos + 1);
      }
    }
    String patternString="\\Q".concat(orderByColumnName).concat("\\E as (\\w+)");
    Pattern pattern=Pattern.compile(patternString,Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(selectFrom);
    if (matcher.find()) {
      orderByColumnName=matcher.group(1);
    }
    if (selectFrom.contains(orderByColumnName)) {
      if (outerOrderBySB.length() == 0) {
        outerOrderBySB.append(" order by ");
      }
 else {
        outerOrderBySB.append(StringPool.COMMA);
      }
      matcher=_qualifiedColumnPattern.matcher(orderByColumnName);
      orderByColumnName=matcher.replaceAll("$1");
      outerOrderBySB.append(orderByColumnName);
      outerOrderBySB.append(StringPool.SPACE);
      outerOrderBySB.append(orderByType);
    }
 else {
      if (innerOrderBySB.length() == 0) {
        innerOrderBySB.append(" order by ");
      }
 else {
        innerOrderBySB.append(StringPool.COMMA);
      }
      innerOrderBySB.append(orderByColumnName);
      innerOrderBySB.append(StringPool.SPACE);
      innerOrderBySB.append(orderByType);
    }
  }
  if (outerOrderBySB.length() == 0) {
    outerOrderBySB.append(" order by CURRENT_TIMESTAMP");
  }
  return new String[]{innerOrderBySB.toString(),outerOrderBySB.toString()};
}
