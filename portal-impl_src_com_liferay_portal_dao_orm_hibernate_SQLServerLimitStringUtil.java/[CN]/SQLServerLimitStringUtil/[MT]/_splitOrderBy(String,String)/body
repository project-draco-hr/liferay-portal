{
  StringBundler innerOrderBy=new StringBundler();
  StringBundler outerOrderBy=new StringBundler();
  String[] orderByColumns=StringUtil.split(orderBy,StringPool.COMMA);
  for (  String orderByColumn : orderByColumns) {
    orderByColumn=orderByColumn.trim();
    String orderByColumnName=orderByColumn;
    String orderByType="ASC";
    int spacePos=orderByColumn.lastIndexOf(CharPool.SPACE);
    if (spacePos != -1) {
      int parenPos=orderByColumn.indexOf(CharPool.OPEN_PARENTHESIS,spacePos);
      if (parenPos == -1) {
        orderByColumnName=orderByColumn.substring(0,spacePos);
        orderByType=orderByColumn.substring(spacePos + 1);
      }
    }
    String patternString="\\Q".concat(orderByColumnName).concat("\\E as (\\w+)");
    Pattern pattern=Pattern.compile(patternString,Pattern.CASE_INSENSITIVE);
    Matcher matcher=pattern.matcher(selectFrom);
    if (matcher.find()) {
      orderByColumnName=matcher.group(1);
    }
    if (selectFrom.contains(orderByColumnName)) {
      if (outerOrderBy.length() == 0) {
        outerOrderBy.append(" order by ");
      }
 else {
        outerOrderBy.append(StringPool.COMMA);
      }
      matcher=_QUALIFIED_COLUMN_PATTERN.matcher(orderByColumnName);
      orderByColumnName=matcher.replaceAll("$1");
      outerOrderBy.append(orderByColumnName);
      outerOrderBy.append(StringPool.SPACE);
      outerOrderBy.append(orderByType);
    }
 else {
      if (innerOrderBy.length() == 0) {
        innerOrderBy.append(" order by ");
      }
 else {
        innerOrderBy.append(StringPool.COMMA);
      }
      innerOrderBy.append(orderByColumnName);
      innerOrderBy.append(StringPool.SPACE);
      innerOrderBy.append(orderByType);
    }
  }
  if (outerOrderBy.length() == 0) {
    outerOrderBy.append(" order by CURRENT_TIMESTAMP");
  }
  return new String[]{innerOrderBy.toString(),outerOrderBy.toString()};
}
