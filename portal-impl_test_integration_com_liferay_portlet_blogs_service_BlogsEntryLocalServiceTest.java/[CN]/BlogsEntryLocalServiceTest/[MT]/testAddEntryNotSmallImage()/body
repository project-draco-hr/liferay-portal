{
  QueryDefinition queryDefinitionApproved=new QueryDefinition(WorkflowConstants.STATUS_APPROVED);
  queryDefinitionApproved.setStart(QueryUtil.ALL_POS);
  queryDefinitionApproved.setEnd(QueryUtil.ALL_POS);
  int initialCount=BlogsEntryLocalServiceUtil.getGroupEntriesCount(group.getGroupId(),queryDefinitionApproved);
  BlogsEntry blogsEntry=BlogsTestUtil.addEntry(TestPropsValues.getUserId(),group,true);
  int actualCount=BlogsEntryLocalServiceUtil.getGroupEntriesCount(group.getGroupId(),queryDefinitionApproved);
  Assert.assertEquals(initialCount + 1,actualCount);
  BlogsEntry blogsEntryRecovered=BlogsEntryLocalServiceUtil.getBlogsEntry(blogsEntry.getEntryId());
  Assert.assertEquals(blogsEntry.getUserId(),blogsEntryRecovered.getUserId());
  Assert.assertEquals(blogsEntry.getTitle(),blogsEntryRecovered.getTitle());
  Assert.assertEquals(blogsEntry.getDescription(),blogsEntryRecovered.getDescription());
  Assert.assertEquals(blogsEntry.getContent(),blogsEntryRecovered.getContent());
  Assert.assertEquals(blogsEntry.getDisplayDate(),blogsEntryRecovered.getDisplayDate());
  Assert.assertEquals(blogsEntry.isAllowPingbacks(),blogsEntryRecovered.isAllowPingbacks());
  Assert.assertEquals(blogsEntry.isAllowTrackbacks(),blogsEntryRecovered.isAllowTrackbacks());
  Assert.assertEquals(blogsEntry.isSmallImage(),blogsEntryRecovered.isSmallImage());
}
