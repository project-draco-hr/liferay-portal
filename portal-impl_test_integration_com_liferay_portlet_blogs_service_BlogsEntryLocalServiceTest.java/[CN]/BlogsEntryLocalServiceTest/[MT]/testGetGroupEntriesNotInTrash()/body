{
  User user=TestPropsValues.getUser();
  QueryDefinition queryDefinitionNotInTrash=new QueryDefinition(WorkflowConstants.STATUS_ANY);
  queryDefinitionNotInTrash.setStart(QueryUtil.ALL_POS);
  queryDefinitionNotInTrash.setEnd(QueryUtil.ALL_POS);
  List<BlogsEntry> groupEntries=BlogsEntryLocalServiceUtil.getGroupEntries(group.getGroupId(),new Date(),queryDefinitionNotInTrash);
  int initialCount=groupEntries.size();
  BlogsEntry entryInTrash=BlogsTestUtil.addEntry(TestPropsValues.getUserId(),group,true);
  BlogsEntryLocalServiceUtil.moveEntryToTrash(user.getUserId(),entryInTrash);
  BlogsTestUtil.addEntry(TestPropsValues.getUserId(),group,true);
  List<BlogsEntry> groupEntriesNotInTrash=BlogsEntryLocalServiceUtil.getGroupEntries(group.getGroupId(),new Date(),queryDefinitionNotInTrash);
  Assert.assertEquals(initialCount + 1,groupEntriesNotInTrash.size());
  for (  BlogsEntry groupEntry : groupEntriesNotInTrash) {
    if (WorkflowConstants.STATUS_IN_TRASH == groupEntry.getStatus()) {
      Assert.fail("The blogEntry " + groupEntry.getEntryId() + " is in trash");
    }
  }
}
