{
  int initialCount=BlogsEntryLocalServiceUtil.getGroupEntriesCount(group.getGroupId(),queryStatusApproved);
  BlogsEntry blogsEntry=BlogsTestUtil.addEntry(TestPropsValues.getUserId(),group,true);
  int actualCount=BlogsEntryLocalServiceUtil.getGroupEntriesCount(group.getGroupId(),queryStatusApproved);
  Assert.assertEquals(initialCount + 1,actualCount);
  BlogsEntry entry=BlogsEntryLocalServiceUtil.getBlogsEntry(blogsEntry.getEntryId());
  Assert.assertFalse(entry.isSmallImage());
  BlogsTestUtil.assertEqualEntry(blogsEntry,entry);
  Assert.assertFalse(entry.getSmallImage());
  try {
    MBMessageLocalServiceUtil.getDiscussionMessageDisplay(TestPropsValues.getUserId(),group.getGroupId(),BlogsEntry.class.getName(),entry.getEntryId(),WorkflowConstants.STATUS_ANY);
  }
 catch (  Exception e) {
    Assert.fail("The initial discussion has not been found for the blog " + entry.getEntryId());
  }
}
