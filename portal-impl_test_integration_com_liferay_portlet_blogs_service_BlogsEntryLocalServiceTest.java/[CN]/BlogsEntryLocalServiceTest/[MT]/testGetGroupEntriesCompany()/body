{
  List<BlogsEntry> groupEntries=BlogsEntryLocalServiceUtil.getGroupsEntries(_user.getCompanyId(),_group.getGroupId(),new Date(),_queryStatusInTrash);
  int initialCount=groupEntries.size();
  addEntryInTrashAndEntryNotInTrash();
  List<BlogsEntry> groupEntriesInTrash=BlogsEntryLocalServiceUtil.getGroupsEntries(_user.getCompanyId(),_group.getGroupId(),new Date(),_queryStatusInTrash);
  Assert.assertEquals(initialCount + 1,groupEntriesInTrash.size());
  for (  BlogsEntry groupEntry : groupEntriesInTrash) {
    if (WorkflowConstants.STATUS_IN_TRASH != groupEntry.getStatus()) {
      Assert.fail("The blogEntry " + groupEntry.getEntryId() + " is not in trash");
    }
    Assert.assertNotEquals(groupEntry.getCompanyId(),0);
    if (groupEntry.getCompanyId() != _user.getCompanyId()) {
      Assert.fail("The companyId of the BlogEntry" + groupEntry.getEntryId() + " should be "+ _user.getCompanyId()+ " bus is "+ groupEntry.getCompanyId()+ " instead");
    }
  }
}
