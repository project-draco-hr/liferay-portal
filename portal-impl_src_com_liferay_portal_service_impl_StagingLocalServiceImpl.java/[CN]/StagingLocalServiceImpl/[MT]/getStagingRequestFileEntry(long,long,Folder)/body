{
  FileEntry stagingRequestFileEntry=fetchStagingRequestFileEntry(stagingRequestId,folder);
  if (stagingRequestFileEntry != null) {
    return stagingRequestFileEntry;
  }
  FileOutputStream fileOutputStream=null;
  File tempFile=null;
  try {
    tempFile=FileUtil.createTempFile("lar");
    fileOutputStream=new FileOutputStream(tempFile);
    List<FileEntry> fileEntries=PortletFileRepositoryUtil.getPortletFileEntries(folder.getGroupId(),folder.getFolderId());
    for (    FileEntry fileEntry : fileEntries) {
      InputStream inputStream=fileEntry.getContentStream();
      try {
        StreamUtil.transfer(inputStream,fileOutputStream,false);
      }
  finally {
        StreamUtil.cleanUp(inputStream);
        PortletFileRepositoryUtil.deletePortletFileEntry(fileEntry.getFileEntryId());
      }
    }
    String checksum=FileUtil.getMD5Checksum(tempFile);
    if (!checksum.equals(folder.getName())) {
      throw new SystemException("Invalid checksum for LAR file");
    }
    PortletFileRepositoryUtil.addPortletFileEntry(folder.getGroupId(),userId,Group.class.getName(),folder.getGroupId(),PortletKeys.SITES_ADMIN,folder.getFolderId(),tempFile,getAssembledFileName(stagingRequestId),ContentTypes.APPLICATION_ZIP,false);
    stagingRequestFileEntry=fetchStagingRequestFileEntry(stagingRequestId,folder);
    if (stagingRequestFileEntry == null) {
      throw new SystemException("Unable to assemble LAR file");
    }
    return stagingRequestFileEntry;
  }
 catch (  IOException ioe) {
    throw new SystemException("Unable to reassemble LAR file",ioe);
  }
 finally {
    StreamUtil.cleanUp(fileOutputStream);
    FileUtil.delete(tempFile);
  }
}
