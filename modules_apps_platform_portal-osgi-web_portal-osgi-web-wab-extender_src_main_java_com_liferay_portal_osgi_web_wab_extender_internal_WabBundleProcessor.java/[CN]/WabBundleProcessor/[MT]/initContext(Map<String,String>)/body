{
  _serviceReference=_bundleContext.getServiceReference(ServletContextHelperRegistration.class);
  ServletContextHelperRegistration registration=_bundleContext.getService(_serviceReference);
  ServiceRegistration<ServletContextHelper> serviceRegistration=registration.getServiceRegistration();
  ServiceReference<ServletContextHelper> serviceReference=serviceRegistration.getReference();
  _contextName=GetterUtil.getString(serviceReference.getProperty(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME));
  if (!contextParameters.isEmpty()) {
    Dictionary<String,Object> properties=new Hashtable<>();
    for (    String key : serviceReference.getPropertyKeys()) {
      properties.put(key,serviceReference.getProperty(key));
    }
    for (    Entry<String,String> contextParametersEntry : contextParameters.entrySet()) {
      String key=contextParametersEntry.getKey();
      String value=contextParametersEntry.getValue();
      properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_INIT_PARAM_PREFIX + key,value);
    }
    serviceRegistration.setProperties(properties);
  }
  ServletContext servletContext=registration.getServletContext();
  servletContext.setAttribute("jsp.taglib.mappings",_jspTaglibMappings);
  servletContext.setAttribute("osgi-bundlecontext",_bundleContext);
  servletContext.setAttribute("osgi-runtime-vendor",_VENDOR);
  Dictionary<String,Object> properties=new HashMapDictionary<>();
  properties.put("osgi.web.symbolicname",_bundle.getSymbolicName());
  properties.put("osgi.web.version",_bundle.getVersion());
  properties.put("osgi.web.contextpath",servletContext.getContextPath());
  _servletContextRegistration=_bundleContext.registerService(ServletContext.class,servletContext,properties);
}
