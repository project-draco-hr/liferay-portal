{
  Map<String,Serializable> taskContextMap=backgroundTask.getTaskContextMap();
  long userId=MapUtil.getLong(taskContextMap,"userId");
  long targetGroupId=MapUtil.getLong(taskContextMap,"targetGroupId");
  StagingUtil.lockGroup(userId,targetGroupId);
  long sourceGroupId=MapUtil.getLong(taskContextMap,"sourceGroupId");
  boolean privateLayout=MapUtil.getBoolean(taskContextMap,"privateLayout");
  long[] layoutIds=GetterUtil.getLongValues(taskContextMap.get("layoutIds"));
  Map<String,String[]> parameterMap=(Map<String,String[]>)taskContextMap.get("parameterMap");
  Date startDate=(Date)taskContextMap.get("startDate");
  Date endDate=(Date)taskContextMap.get("endDate");
  BackgroundTaskStatus backgroundTaskStatus=BackgroundTaskStatusRegistryUtil.getBackgroundTaskStatus(backgroundTask.getBackgroundTaskId());
  backgroundTaskStatus.clearAttributes();
  File file=null;
  MissingReferences missingReferences=null;
  long stagingRequestId=0;
  File file=null;
  FileInputStream fileInputStream=null;
  try {
    file=exportLayoutsAsFile(sourceGroupId,privateLayout,layoutIdMap,parameterMap,remoteGroupId,startDate,endDate,httpPrincipal);
    String checksum=FileUtil.getMD5Checksum(file);
    fileInputStream=new FileInputStream(file);
    stagingRequestId=StagingServiceHttp.createStagingRequest(httpPrincipal,remoteGroupId,checksum);
    byte[] bytes=new byte[PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE];
    int i=0;
    while ((i=fileInputStream.read(bytes)) >= 0) {
      if (i < PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE) {
        byte[] tempBytes=new byte[i];
        System.arraycopy(bytes,0,tempBytes,0,i);
        StagingServiceHttp.updateStagingRequest(httpPrincipal,stagingRequestId,file.getName(),tempBytes);
      }
 else {
        StagingServiceHttp.updateStagingRequest(httpPrincipal,stagingRequestId,file.getName(),bytes);
      }
      bytes=new byte[PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE];
    }
    StagingServiceHttp.publishStagingRequest(httpPrincipal,stagingRequestId,privateLayout,parameterMap);
  }
  finally {
    StreamUtil.cleanUp(fileInputStream);
    FileUtil.delete(file);
    if (stagingRequestId > 0) {
      StagingServiceHttp.cleanUpStagingRequest(httpPrincipal,stagingRequestId);
    }
  }
  BackgroundTaskResult backgroundTaskResult=new BackgroundTaskResult(BackgroundTaskConstants.STATUS_SUCCESSFUL);
  Map<String,MissingReference> weakMissingReferences=missingReferences.getWeakMissingReferences();
  if ((weakMissingReferences != null) && !weakMissingReferences.isEmpty()) {
    JSONArray jsonArray=StagingUtil.getWarningMessagesJSONArray(getLocale(backgroundTask),weakMissingReferences,backgroundTask.getTaskContextMap());
    backgroundTaskResult.setStatusMessage(jsonArray.toString());
  }
  return backgroundTaskResult;
}
