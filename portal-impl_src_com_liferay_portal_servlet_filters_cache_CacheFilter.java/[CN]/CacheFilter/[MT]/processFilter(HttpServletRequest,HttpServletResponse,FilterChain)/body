{
  String requestURI=request.getRequestURI();
  CacheResponse cacheResponse=new CacheResponse(response,StringPool.UTF8);
  boolean retrieveFromCache=false;
  File tempDataFile=new File(_TEMP_DIR + requestURI + ".data");
  File tempEncodingFile=new File(_TEMP_DIR + requestURI + ".encoding");
  if (tempDataFile.exists() && tempEncodingFile.exists()) {
    FilterConfig filterConfig=getFilterConfig();
    ServletContext servletContext=filterConfig.getServletContext();
    String realPath=servletContext.getRealPath(requestURI);
    File realFile=new File(realPath);
    if (tempDataFile.lastModified() > realFile.lastModified()) {
      retrieveFromCache=true;
    }
  }
  byte[] bytes=null;
  String contentEncoding=null;
  if (_log.isDebugEnabled()) {
    if (retrieveFromCache) {
      _log.debug("Retrieve " + requestURI + " from the cache");
    }
 else {
      _log.debug("Store " + requestURI + " in the cache");
    }
  }
  if (retrieveFromCache) {
    bytes=FileUtil.getBytes(tempDataFile);
    contentEncoding=FileUtil.read(tempEncodingFile);
  }
 else {
    processFilter(CacheFilter.class,request,cacheResponse,filterChain);
    bytes=cacheResponse.getData();
    contentEncoding=GetterUtil.getString(cacheResponse.getHeader(HttpHeaders.CONTENT_ENCODING));
    FileUtil.write(tempDataFile,bytes);
    FileUtil.write(tempEncodingFile,contentEncoding);
  }
  if (Validator.isNotNull(contentEncoding)) {
    response.addHeader(HttpHeaders.CONTENT_ENCODING,contentEncoding);
  }
  ServletResponseUtil.write(response,bytes);
}
