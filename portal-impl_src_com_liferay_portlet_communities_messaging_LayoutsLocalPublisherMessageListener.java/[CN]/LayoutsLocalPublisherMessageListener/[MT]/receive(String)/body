{
  PermissionCheckerImpl permissionChecker=null;
  try {
    LayoutsLocalPublisherRequest publisherRequest=(LayoutsLocalPublisherRequest)JSONUtil.deserialize(message);
    String command=publisherRequest.getCommand();
    long userId=publisherRequest.getUserId();
    long sourceGroupId=publisherRequest.getSourceGroupId();
    long targetGroupId=publisherRequest.getTargetGroupId();
    boolean privateLayout=publisherRequest.isPrivateLayout();
    Map<Long,Boolean> layoutIdMap=publisherRequest.getLayoutIdMap();
    Map<String,String[]> parameterMap=publisherRequest.getParameterMap();
    Date startDate=publisherRequest.getStartDate();
    Date endDate=publisherRequest.getEndDate();
    String range=MapUtil.getString(parameterMap,"range");
    if (range.equals("last")) {
      int last=MapUtil.getInteger(parameterMap,"last");
      if (last > 0) {
        Date scheduledFireTime=publisherRequest.getScheduledFireTime();
        startDate=new Date(scheduledFireTime.getTime() - (last * Time.HOUR));
        endDate=scheduledFireTime;
      }
    }
    PrincipalThreadLocal.setName(userId);
    User user=UserLocalServiceUtil.getUserById(userId);
    permissionChecker=PermissionCheckerFactory.create(user,false);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    if (command.equals(LayoutsLocalPublisherRequest.COMMAND_ALL_PAGES)) {
      StagingUtil.publishLayouts(sourceGroupId,targetGroupId,privateLayout,parameterMap,startDate,endDate);
    }
 else     if (command.equals(LayoutsLocalPublisherRequest.COMMAND_SELECTED_PAGES)) {
      StagingUtil.publishLayouts(sourceGroupId,targetGroupId,privateLayout,layoutIdMap,parameterMap,startDate,endDate);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    try {
      PermissionCheckerFactory.recycle(permissionChecker);
    }
 catch (    Exception e) {
    }
  }
}
