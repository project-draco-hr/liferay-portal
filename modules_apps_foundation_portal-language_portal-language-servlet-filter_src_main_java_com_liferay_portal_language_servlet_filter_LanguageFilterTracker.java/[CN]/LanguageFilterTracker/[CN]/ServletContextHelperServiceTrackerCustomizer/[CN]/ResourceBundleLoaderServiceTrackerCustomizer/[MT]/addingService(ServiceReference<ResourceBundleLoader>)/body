{
  List<ServiceRegistration<?>> serviceRegistrations=new ArrayList<>();
  Dictionary<String,Object> properties=new Hashtable<>(_properties);
  properties.put("resource.bundle.base.name",serviceReference.getProperty("resource.bundle.base.name"));
  ResourceBundleLoader resourceBundleLoader=_bundleContext.getService(serviceReference);
  serviceRegistrations.add(_bundleContext.registerService(ResourceBundleLoader.class,resourceBundleLoader,properties));
  ServiceTracker<ResourceBundleLoader,ResourceBundleLoader> serviceTracker=ServiceTrackerFactory.open(_bundleContext,_filterString);
  Filter filter=new LanguageFilter(new ServiceTrackerResourceBundleLoader(serviceTracker));
  Dictionary<String,Object> filterProperties=new Hashtable<>();
  filterProperties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT,_contextName);
  filterProperties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER,new String[]{DispatcherType.ASYNC.toString(),DispatcherType.FORWARD.toString(),DispatcherType.INCLUDE.toString(),DispatcherType.REQUEST.toString()});
  filterProperties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_NAME,LanguageFilter.class.getName());
  filterProperties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN,new String[]{"*.css","*.js"});
  serviceRegistrations.add(_bundleContext.registerService(Filter.class,filter,filterProperties));
  return new TrackedServletContextHelper(serviceTracker,serviceRegistrations);
}
