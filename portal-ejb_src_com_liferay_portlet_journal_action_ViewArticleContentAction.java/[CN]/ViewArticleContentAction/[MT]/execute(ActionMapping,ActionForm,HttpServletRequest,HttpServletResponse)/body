{
  try {
    String cmd=ParamUtil.getString(req,Constants.CMD);
    ThemeDisplay themeDisplay=(ThemeDisplay)req.getAttribute(WebKeys.THEME_DISPLAY);
    String companyId=themeDisplay.getCompanyId();
    String groupId=ParamUtil.getString(req,"groupId");
    String articleId=ParamUtil.getString(req,"articleId");
    double version=ParamUtil.getDouble(req,"version",JournalArticleImpl.DEFAULT_VERSION);
    String languageId=LanguageUtil.getLanguageId(req);
    String output=null;
    if (cmd.equals(Constants.PREVIEW)) {
      String title=ParamUtil.getString(req,"title");
      String description=ParamUtil.getString(req,"description");
      Date now=new Date();
      Date createDate=now;
      Date modifiedDate=now;
      Date displayDate=now;
      User user=PortalUtil.getUser(req);
      String xml=ParamUtil.getString(req,"xml");
      SAXReader reader=new SAXReader();
      Document doc=reader.read(new StringReader(xml));
      Element root=doc.getRootElement();
      String previewArticleId="PREVIEW_" + PwdGenerator.getPassword(PwdGenerator.KEY3,10);
      format(articleId,version,previewArticleId,companyId,root,PortalUtil.getUploadServletRequest(req));
      Map tokens=JournalUtil.getTokens(groupId,themeDisplay);
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_ID,articleId);
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_VERSION,Double.toString(version));
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_TITLE,title);
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_DESCRIPTION,description);
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_CREATE_DATE,createDate.toString());
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_MODIFIED_DATE,modifiedDate.toString());
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_DISPLAY_DATE,displayDate.toString());
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_AUTHOR_ID,user.getUserId());
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_AUTHOR_NAME,user.getFullName());
      JournalUtil.addReservedEl(root,tokens,JournalStructureImpl.RESERVED_ARTICLE_AUTHOR_EMAIL_ADDRESS,user.getEmailAddress());
      xml=JournalUtil.formatXML(doc);
      String templateId=ParamUtil.getString(req,"templateId");
      JournalTemplate template=JournalTemplateLocalServiceUtil.getTemplate(companyId,groupId,templateId);
      String langType=template.getLangType();
      String script=template.getXsl();
      output=JournalUtil.transform(tokens,languageId,xml,script,langType);
    }
 else {
      output=JournalArticleServiceUtil.getArticleContent(companyId,groupId,articleId,version,languageId,themeDisplay);
    }
    req.setAttribute(WebKeys.JOURNAL_ARTICLE_CONTENT,output);
    return mapping.findForward("portlet.journal.view_article_content");
  }
 catch (  Exception e) {
    req.setAttribute(PageContext.EXCEPTION,e);
    return mapping.findForward(Constants.COMMON_ERROR);
  }
}
