{
  if (_log.isDebugEnabled()) {
    _log.debug("Sending file of type " + contentType);
  }
  if (Validator.isNotNull(contentType)) {
    response.setContentType(contentType);
  }
  response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_PRIVATE_VALUE);
  response.setHeader(HttpHeaders.PRAGMA,HttpHeaders.PRAGMA_NO_CACHE_VALUE);
  if (Validator.isNotNull(fileName)) {
    String contentDisposition="attachment; filename=\"" + fileName + "\"";
    boolean ascii=true;
    for (int i=0; i < fileName.length(); i++) {
      if (!Validator.isAscii(fileName.charAt(i))) {
        ascii=false;
        break;
      }
    }
    if (!ascii) {
      String encodedFileName=HttpUtil.encodeURL(fileName,true);
      if (BrowserSnifferUtil.isIe(request)) {
        contentDisposition="attachment; filename=\"" + encodedFileName + "\"";
      }
 else {
        contentDisposition="attachment; filename*=UTF-8''" + encodedFileName;
      }
    }
    String extension=GetterUtil.getString(FileUtil.getExtension(fileName)).toLowerCase();
    String[] mimeTypesContentDispositionInline=null;
    try {
      mimeTypesContentDispositionInline=PropsUtil.getArray(PropsKeys.MIME_TYPES_CONTENT_DISPOSITION_INLINE);
    }
 catch (    Exception e) {
      mimeTypesContentDispositionInline=new String[0];
    }
    if (ArrayUtil.contains(mimeTypesContentDispositionInline,extension)) {
      contentDisposition=StringUtil.replace(contentDisposition,"attachment; ","inline; ");
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Setting content disposition header " + contentDisposition);
    }
    response.setHeader(HttpHeaders.CONTENT_DISPOSITION,contentDisposition);
  }
}
