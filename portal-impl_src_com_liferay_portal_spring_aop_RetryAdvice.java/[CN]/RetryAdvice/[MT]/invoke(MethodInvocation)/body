{
  Retry retry=findAnnotation(methodInvocation);
  if (retry == _nullRetry) {
    return methodInvocation.proceed();
  }
  int retries=retry.retries();
  if (retries < 0) {
    retries=PropsValues.RETRY_ADVICE_MAX_RETRIES;
  }
  int totalRetries=retries;
  if (retries >= 0) {
    retries++;
  }
  Map<String,String> properties=new HashMap<>();
  for (  Property property : retry.properties()) {
    properties.put(property.name(),property.value());
  }
  Class<? extends RetryAcceptor> clazz=retry.acceptor();
  RetryAcceptor retryAcceptor=clazz.newInstance();
  ServiceBeanMethodInvocation serviceBeanMethodInvocation=(ServiceBeanMethodInvocation)methodInvocation;
  serviceBeanMethodInvocation.mark();
  Object returnValue=null;
  Throwable throwable=null;
  while ((retries < 0) || (retries-- > 0)) {
    try {
      returnValue=serviceBeanMethodInvocation.proceed();
      if (!retryAcceptor.acceptResult(returnValue,properties)) {
        return returnValue;
      }
      if (_log.isWarnEnabled() && (retries != 0)) {
        String number=String.valueOf(retries);
        if (retries < 0) {
          number="unlimited";
        }
        _log.warn("Retry on " + methodInvocation + " for "+ number+ " more times due to result "+ returnValue);
      }
    }
 catch (    Throwable t) {
      throwable=t;
      if (!retryAcceptor.acceptException(t,properties)) {
        throw t;
      }
      if (_log.isWarnEnabled() && (retries != 0)) {
        String number=String.valueOf(retries);
        if (retries < 0) {
          number="unlimited";
        }
        _log.warn("Retry on " + methodInvocation + " for "+ number+ " more times due to exception "+ throwable,throwable);
      }
    }
    serviceBeanMethodInvocation.reset();
  }
  if (throwable != null) {
    if (_log.isWarnEnabled()) {
      _log.warn("Give up retrying on " + methodInvocation + " after "+ totalRetries+ " retries and rethrow last retry's "+ "exception "+ throwable,throwable);
    }
    throw throwable;
  }
  if (_log.isWarnEnabled()) {
    _log.warn("Give up retrying on " + methodInvocation + " after "+ totalRetries+ " retries and returning the last retry's "+ "result "+ returnValue);
  }
  return returnValue;
}
