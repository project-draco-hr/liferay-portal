{
  Retry retry=findAnnotation(methodInvocation);
  if (retry == _nullRetry) {
    return methodInvocation.proceed();
  }
  int retries=retry.retries();
  if (retries < 0) {
    retries=GetterUtil.getInteger(PropsValues.RETRY_ADVICE_MAX_RETRIES,retries);
  }
  int totalRetries=retries;
  if (retries >= 0) {
    retries++;
  }
  Map<String,String> propertyMap=new HashMap<>();
  for (  Property property : retry.properties()) {
    propertyMap.put(property.name(),property.value());
  }
  Class<? extends RetryAcceptor> clazz=retry.acceptor();
  RetryAcceptor retryAcceptor=clazz.newInstance();
  ServiceBeanMethodInvocation serviceBeanMethodInvocation=(ServiceBeanMethodInvocation)methodInvocation;
  serviceBeanMethodInvocation.mark();
  Object returnValue=null;
  Throwable throwable=null;
  while ((retries < 0) || (retries-- > 0)) {
    try {
      returnValue=serviceBeanMethodInvocation.proceed();
      if (!retryAcceptor.accept(returnValue,null,propertyMap)) {
        return returnValue;
      }
      if (_log.isWarnEnabled()) {
        _log.warn("Unsatisfactory result from " + methodInvocation.getMethod() + ". Retrying "+ retries+ " more times.");
      }
    }
 catch (    Throwable t) {
      throwable=t;
      if (!retryAcceptor.accept(null,t,propertyMap)) {
        throw t;
      }
      if (_log.isWarnEnabled()) {
        _log.error("Exception thrown from " + methodInvocation.getMethod() + ". Retrying "+ retries+ " more times.");
      }
    }
    serviceBeanMethodInvocation.reset();
  }
  if (_log.isWarnEnabled()) {
    _log.warn("Unable to get a result after " + totalRetries + " retries.");
  }
  if (returnValue != null) {
    return returnValue;
  }
  throw throwable;
}
