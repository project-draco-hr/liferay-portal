{
  long userId=portletDataContext.getUserId(template.getUserUuid());
  Map<Long,Long> structureIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DDMStructure.class);
  String structurePath=ExportImportPathUtil.getModelPath(portletDataContext,DDMStructure.class.getName(),template.getClassPK());
  DDMStructure structure=(DDMStructure)portletDataContext.getZipEntryAsObject(structurePath);
  if (structure != null) {
    StagedModelDataHandlerUtil.importStagedModel(portletDataContext,structure);
  }
  long classPK=MapUtil.getLong(structureIds,template.getClassPK(),template.getClassPK());
  File smallFile=null;
  if (template.isSmallImage()) {
    Element element=portletDataContext.getImportDataStagedModelElement(template);
    String smallImagePath=element.attributeValue("small-image-path");
    if (Validator.isNotNull(template.getSmallImageURL())) {
      String smallImageURL=ExportImportUtil.replaceImportContentReferences(portletDataContext,element,template.getSmallImageURL(),true);
      template.setSmallImageURL(smallImageURL);
    }
 else     if (Validator.isNotNull(smallImagePath)) {
      byte[] bytes=portletDataContext.getZipEntryAsByteArray(smallImagePath);
      if (bytes != null) {
        smallFile=FileUtil.createTempFile(template.getSmallImageType());
        FileUtil.write(smallFile,bytes);
      }
    }
  }
  ServiceContext serviceContext=portletDataContext.createServiceContext(template,DDMPortletDataHandler.NAMESPACE);
  DDMTemplate importedTemplate=null;
  if (portletDataContext.isDataStrategyMirror()) {
    DDMTemplate existingTemplate=DDMTemplateUtil.fetchByUUID_G(template.getUuid(),portletDataContext.getScopeGroupId());
    if (existingTemplate == null) {
      serviceContext.setUuid(template.getUuid());
      importedTemplate=addTemplate(userId,portletDataContext.getScopeGroupId(),template,classPK,smallFile,serviceContext);
    }
 else {
      importedTemplate=DDMTemplateLocalServiceUtil.updateTemplate(existingTemplate.getTemplateId(),template.getNameMap(),template.getDescriptionMap(),template.getType(),template.getMode(),template.getLanguage(),template.getScript(),template.isCacheable(),template.isSmallImage(),template.getSmallImageURL(),smallFile,serviceContext);
    }
  }
 else {
    importedTemplate=addTemplate(userId,portletDataContext.getScopeGroupId(),template,classPK,smallFile,serviceContext);
  }
  portletDataContext.importClassedModel(template,importedTemplate,DDMPortletDataHandler.NAMESPACE);
  Map<String,String> ddmTemplateKeys=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(DDMTemplate.class + ".ddmTemplateKey");
  ddmTemplateKeys.put(template.getTemplateKey(),importedTemplate.getTemplateKey());
}
