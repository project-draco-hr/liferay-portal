{
  Script compiledScript=getCompiledScript(script);
  Map<String,Object> scriptOutputObjects=new HashMap<String,Object>();
  try {
    Context context=Context.enter();
    Scriptable scope=context.initStandardObjects();
    for (    String varName : inputObjects.keySet()) {
      if (Validator.isNotNull(accesibleIndividualClasses)) {
        accesibleIndividualClasses.add(inputObjects.get(varName).getClass().getCanonicalName());
      }
      ScriptableObject.putProperty(scope,varName,Context.javaToJS(inputObjects.get(varName),scope));
    }
    if (Validator.isNotNull(accessibleClassesGroups) || Validator.isNotNull(accesibleIndividualClasses)) {
      context.setClassShutter(new JavaScriptClassVisibilityChecker(accessibleClassesGroups,accesibleIndividualClasses));
    }
    compiledScript.exec(context,scope);
    for (    String outputObjectName : outputObjectNames) {
      scriptOutputObjects.put(outputObjectName,ScriptableObject.getProperty(scope,outputObjectName));
    }
  }
 catch (  Exception e) {
    StringBuilder sb=new StringBuilder();
    sb.append(e.getMessage());
    sb.append("\n\n");
    throw new ScriptExecutionException(sb.toString(),e);
  }
 finally {
    Context.exit();
  }
  return scriptOutputObjects;
}
