{
  JavaClass javaClass=_getJavaClass(parentDir,srcFile);
  JavaMethod[] methods=javaClass.getMethods();
  Arrays.sort(methods,new JavaMethodComparator());
  StringMaker sm=new StringMaker();
  sm.append("package " + javaClass.getPackage() + ";");
  sm.append("[$IMPORTS$]");
  sm.append("public class Copy" + javaClass.getName() + " implements "+ javaClass.getName()+ " {");
  Set imports=new TreeSet();
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (javaMethod.isPublic()) {
      sm.append("public " + javaMethod.getReturns().getJavaClass().getName() + _getDimensions(javaMethod.getReturns())+ " "+ methodName+ "(");
      imports.add(javaMethod.getReturns().getValue());
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sm.append(javaParameter.getType().getJavaClass().getName() + _getDimensions(javaParameter.getType()) + " "+ javaParameter.getName());
        imports.add(javaParameter.getType().getValue());
        if ((j + 1) != parameters.length) {
          sm.append(", ");
        }
      }
      sm.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      Set newExceptions=new LinkedHashSet();
      for (int j=0; j < thrownExceptions.length; j++) {
        Type thrownException=thrownExceptions[j];
        newExceptions.add(thrownException.getJavaClass().getName());
        imports.add(thrownException.getValue());
      }
      if (newExceptions.size() > 0) {
        sm.append(" throws ");
        Iterator itr=newExceptions.iterator();
        while (itr.hasNext()) {
          sm.append(itr.next());
          if (itr.hasNext()) {
            sm.append(", ");
          }
        }
      }
      sm.append("{");
      sm.append("throw new Exception();");
      sm.append("}");
    }
  }
  sm.append("}");
  String content=sm.toString();
  sm=new StringMaker();
  Iterator itr=imports.iterator();
  while (itr.hasNext()) {
    String importClass=(String)itr.next();
    if (!importClass.equals("boolean") && !importClass.equals("double") && !importClass.equals("int")&& !importClass.equals("long")&& !importClass.equals("short")&& !importClass.equals("void")) {
      sm.append("import " + importClass + ";");
    }
  }
  content=StringUtil.replace(content,"[$IMPORTS$]",sm.toString());
  File file=new File(parentDir + "/" + StringUtil.replace(javaClass.getPackage(),".","/")+ "/Copy"+ javaClass.getName()+ ".java");
  ServiceBuilder.writeFile(file,content);
}
