{
  long companyId=TestPropsValues.getCompanyId();
  Portlet portlet=PortletLocalServiceUtil.getPortletById(initialRootPortletId);
  Layout layout=getLayout();
  LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
  layoutTypePortlet.addPortletId(TestPropsValues.getUserId(),initialInstancePortletId);
  addPortletPreferences(layout,initialInstancePortletId);
  Map<Long,String[]> roleIdsToActionIds=new HashMap<Long,String[]>();
  Role role=RoleLocalServiceUtil.getRole(companyId,RoleConstants.GUEST);
  roleIdsToActionIds.put(role.getRoleId(),new String[]{ActionKeys.CONFIGURATION});
  ResourcePermissionServiceUtil.setIndividualResourcePermissions(layout.getGroupId(),companyId,initialRootPortletId,initialInstancePortletId,roleIdsToActionIds);
  PortletLocalServiceUtil.destroyPortlet(portlet);
  doUpgrade();
  portlet.setCompanyId(companyId);
  portlet.setPortletId(subsequentRootPortletId);
  List<String> portletActions=ResourceActionsUtil.getPortletResourceActions(portlet.getPortletId());
  ResourceActionLocalServiceUtil.checkResourceActions(portlet.getPortletId(),portletActions);
  PortletLocalServiceUtil.checkPortlet(portlet);
  layout=LayoutLocalServiceUtil.getLayout(layout.getPlid());
  layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
  Assert.assertTrue(layoutTypePortlet.hasPortletId(subsequentInstancePortletId));
  boolean hasViewPermission=ResourcePermissionLocalServiceUtil.hasResourcePermission(companyId,subsequentRootPortletId,ResourceConstants.SCOPE_INDIVIDUAL,subsequentInstancePortletId,role.getRoleId(),ActionKeys.VIEW);
  Assert.assertFalse(hasViewPermission);
  boolean hasConfigurationPermission=ResourcePermissionLocalServiceUtil.hasResourcePermission(companyId,subsequentRootPortletId,ResourceConstants.SCOPE_INDIVIDUAL,subsequentInstancePortletId,role.getRoleId(),ActionKeys.CONFIGURATION);
  Assert.assertTrue(hasConfigurationPermission);
}
