{
  String resourcePath=name.replace('.','/') + ".class";
  InputStream inputStream=getResourceAsStream(resourcePath);
  byte[] data=null;
  try {
    if (inputStream == null) {
      data=_urlWeavingAdapter.removeGeneratedClassDate(name);
    }
 else {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
      StreamUtil.transfer(inputStream,unsyncByteArrayOutputStream);
      data=unsyncByteArrayOutputStream.toByteArray();
    }
    if (data == null) {
      throw new ClassNotFoundException(name);
    }
    byte[] oldData=data;
    try {
      data=_urlWeavingAdapter.weaveClass(name,data,false);
    }
 catch (    AbortException ae) {
      if (_log.isWarnEnabled()) {
        _log.warn("Abort weaving class " + name,ae);
      }
    }
    if (Arrays.equals(oldData,data)) {
      return _generateClass(name,data);
    }
    if (_dumpDir != null) {
      File dumpFile=new File(_dumpDir,resourcePath);
      File dumpDir=dumpFile.getParentFile();
      dumpDir.mkdirs();
      FileOutputStream fileOutputStream=new FileOutputStream(dumpFile);
      fileOutputStream.write(data);
      fileOutputStream.close();
      if (_log.isInfoEnabled()) {
        _log.info("Woven class " + name + " result in "+ dumpFile.getCanonicalPath());
      }
    }
 else {
      if (_log.isInfoEnabled()) {
        _log.info("Woven class " + name);
      }
    }
    return _generateClass(name,data);
  }
 catch (  IOException ioe) {
    throw new ClassNotFoundException(name,ioe);
  }
}
