{
  final IOException ioException=new IOException("Unable to read");
  InputStream inputStream=new UnsyncFilterInputStream(new UnsyncByteArrayInputStream(new byte[0])){
    @Override public int read() throws IOException {
      throw ioException;
    }
    @Override public int read(    byte[] bytes) throws IOException {
      throw ioException;
    }
    @Override public int read(    byte[] bytes,    int offset,    int length) throws IOException {
      throw ioException;
    }
  }
;
  try {
    outputProcessor.processStdErr(inputStream);
    Assert.fail();
  }
 catch (  ProcessException pe) {
    Assert.assertSame(ioException,pe.getCause());
  }
  try {
    outputProcessor.processStdOut(inputStream);
    Assert.fail();
  }
 catch (  ProcessException pe) {
    Assert.assertSame(ioException,pe.getCause());
  }
  inputStream=new UnsyncFilterInputStream(new UnsyncByteArrayInputStream(new byte[0])){
    @Override public void close() throws IOException {
      throw ioException;
    }
  }
;
  try {
    outputProcessor.processStdErr(inputStream);
    Assert.fail();
  }
 catch (  ProcessException pe) {
    Assert.assertSame(ioException,pe.getCause());
  }
  try {
    outputProcessor.processStdOut(inputStream);
    Assert.fail();
  }
 catch (  ProcessException pe) {
    Assert.assertSame(ioException,pe.getCause());
  }
}
