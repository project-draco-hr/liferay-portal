{
  SocialActivityCounterLocalServiceUtil.addActivityCounters(createActivity(_userCreator,1));
  SocialActivityCounterLocalServiceUtil.addActivityCounters(createActivity(_userActor,2));
  SocialActivityCounter contribution=getActivityCounter(SocialActivityCounterConstants.NAME_CONTRIBUTION,_userCreator);
  Assert.assertNotNull(contribution);
  Assert.assertEquals(1,contribution.getCurrentValue());
  List<SocialActivityCounter> counters=SocialActivityCounterLocalServiceUtil.getPeriodActivityCounters(_group.getGroupId(),"asset.test.2",SocialCounterPeriodUtil.getStartPeriod(),-1);
  Assert.assertEquals(1,counters.size());
  SocialActivityCounterLocalServiceUtil.disableActivityCounters(_assetEntry.getClassName(),_assetEntry.getClassPK());
  contribution=getActivityCounter(SocialActivityCounterConstants.NAME_CONTRIBUTION,_userCreator);
  Assert.assertNotNull(contribution);
  Assert.assertEquals(0,contribution.getCurrentValue());
  SocialActivityCounter counter=getActivityCounter("asset.test.2",_assetEntry);
  Assert.assertNotNull(counter);
  Assert.assertEquals(false,counter.isActive());
  counters=SocialActivityCounterLocalServiceUtil.getPeriodActivityCounters(_group.getGroupId(),"asset.test.2",SocialCounterPeriodUtil.getStartPeriod(),-1);
  Assert.assertEquals(0,counters.size());
  SocialActivityCounterLocalServiceUtil.enableActivityCounters(_assetEntry.getClassName(),_assetEntry.getClassPK());
  contribution=getActivityCounter(SocialActivityCounterConstants.NAME_CONTRIBUTION,_userCreator);
  Assert.assertNotNull(contribution);
  Assert.assertEquals(1,contribution.getCurrentValue());
  counter=getActivityCounter("asset.test.2",_assetEntry);
  Assert.assertNotNull(counter);
  Assert.assertEquals(true,counter.isActive());
  counters=SocialActivityCounterLocalServiceUtil.getPeriodActivityCounters(_group.getGroupId(),"asset.test.2",SocialCounterPeriodUtil.getStartPeriod(),-1);
  Assert.assertEquals(1,counters.size());
}
