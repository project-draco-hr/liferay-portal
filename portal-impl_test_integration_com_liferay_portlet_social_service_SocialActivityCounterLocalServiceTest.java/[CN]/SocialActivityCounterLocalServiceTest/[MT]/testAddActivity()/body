{
  SocialActivityTestUtil.addActivity(_creatorUser,_group,_assetEntry,1);
  SocialActivityCounter contribution=SocialActivityTestUtil.getActivityCounter(_group.getGroupId(),SocialActivityCounterConstants.NAME_CONTRIBUTION,_creatorUser);
  Assert.assertNull(contribution);
  SocialActivityCounter participation=SocialActivityTestUtil.getActivityCounter(_group.getGroupId(),SocialActivityCounterConstants.NAME_PARTICIPATION,_creatorUser);
  Assert.assertEquals(2,participation.getCurrentValue());
  SocialActivityTestUtil.addActivity(_actorUser,_group,_assetEntry,2);
  contribution=SocialActivityTestUtil.getActivityCounter(_group.getGroupId(),SocialActivityCounterConstants.NAME_CONTRIBUTION,_creatorUser);
  Assert.assertNotNull(contribution);
  Assert.assertEquals(1,contribution.getCurrentValue());
  participation=SocialActivityTestUtil.getActivityCounter(_group.getGroupId(),SocialActivityCounterConstants.NAME_PARTICIPATION,_actorUser);
  Assert.assertNotNull(participation);
  Assert.assertEquals(1,participation.getCurrentValue());
  SocialActivityLimit activityLimit=SocialActivityTestUtil.getActivityLimit(_group.getGroupId(),_actorUser,_assetEntry,2,SocialActivityCounterConstants.NAME_PARTICIPATION);
  Assert.assertNotNull(activityLimit);
  Assert.assertEquals(1,activityLimit.getCount());
  SocialActivityTestUtil.addActivity(_actorUser,_group,_assetEntry,2);
  activityLimit=SocialActivityTestUtil.getActivityLimit(_group.getGroupId(),_actorUser,_assetEntry,2,SocialActivityCounterConstants.NAME_PARTICIPATION);
  Assert.assertNotNull(activityLimit);
  Assert.assertEquals(2,activityLimit.getCount());
}
