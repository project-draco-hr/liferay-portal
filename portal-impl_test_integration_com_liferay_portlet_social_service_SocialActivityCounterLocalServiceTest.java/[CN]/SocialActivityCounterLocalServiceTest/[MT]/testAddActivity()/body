{
  SocialActivityTestUtil.addActivity(creatorUser,group,assetEntry,1);
  SocialActivityCounter contribution=SocialActivityTestUtil.getActivityCounter(group.getGroupId(),SocialActivityCounterConstants.NAME_CONTRIBUTION,creatorUser);
  Assert.assertNull(contribution);
  SocialActivityCounter participation=SocialActivityTestUtil.getActivityCounter(group.getGroupId(),SocialActivityCounterConstants.NAME_PARTICIPATION,creatorUser);
  Assert.assertEquals(2,participation.getCurrentValue());
  SocialActivityTestUtil.addActivity(actorUser,group,assetEntry,2);
  contribution=SocialActivityTestUtil.getActivityCounter(group.getGroupId(),SocialActivityCounterConstants.NAME_CONTRIBUTION,creatorUser);
  Assert.assertNotNull(contribution);
  Assert.assertEquals(1,contribution.getCurrentValue());
  participation=SocialActivityTestUtil.getActivityCounter(group.getGroupId(),SocialActivityCounterConstants.NAME_PARTICIPATION,actorUser);
  Assert.assertNotNull(participation);
  Assert.assertEquals(1,participation.getCurrentValue());
  SocialActivityLimit activityLimit=SocialActivityTestUtil.getActivityLimit(group.getGroupId(),actorUser,assetEntry,2,SocialActivityCounterConstants.NAME_PARTICIPATION);
  Assert.assertNotNull(activityLimit);
  Assert.assertEquals(1,activityLimit.getCount());
  SocialActivityTestUtil.addActivity(actorUser,group,assetEntry,2);
  activityLimit=SocialActivityTestUtil.getActivityLimit(group.getGroupId(),actorUser,assetEntry,2,SocialActivityCounterConstants.NAME_PARTICIPATION);
  Assert.assertNotNull(activityLimit);
  Assert.assertEquals(2,activityLimit.getCount());
}
