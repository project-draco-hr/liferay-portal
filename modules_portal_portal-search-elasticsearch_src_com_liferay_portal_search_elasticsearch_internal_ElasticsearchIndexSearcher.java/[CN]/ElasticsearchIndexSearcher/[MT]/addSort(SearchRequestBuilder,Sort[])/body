{
  if (ArrayUtil.isEmpty(sorts)) {
    return;
  }
  Set<String> sortFieldNames=new HashSet<>(sorts.length);
  for (  Sort sort : sorts) {
    if (sort == null) {
      continue;
    }
    String sortFieldName=DocumentImpl.getSortFieldName(sort,"_score");
    if (sortFieldNames.contains(sortFieldName)) {
      continue;
    }
    sortFieldNames.add(sortFieldName);
    SortOrder sortOrder=SortOrder.ASC;
    if (sort.isReverse() || sortFieldName.equals("_score")) {
      sortOrder=SortOrder.DESC;
    }
    SortBuilder sortBuilder=null;
    if (sortFieldName.equals("_score")) {
      sortBuilder=SortBuilders.scoreSort();
    }
 else     if (sort.getType() == Sort.GEO_DISTANCE_TYPE) {
      GeoDistanceSort geoDistanceSort=(GeoDistanceSort)sort;
      GeoDistanceSortBuilder geoDistanceSortBuilder=SortBuilders.geoDistanceSort(sortFieldName);
      geoDistanceSortBuilder.geoDistance(GeoDistance.DEFAULT);
      for (      GeoLocationPoint geoLocationPoint : geoDistanceSort.getGeoLocationPoints()) {
        geoDistanceSortBuilder.point(geoLocationPoint.getLatitude(),geoLocationPoint.getLongitude());
      }
      Collection<String> geoHashes=geoDistanceSort.getGeoHashes();
      if (!geoHashes.isEmpty()) {
        geoDistanceSort.addGeoHash(geoHashes.toArray(new String[geoHashes.size()]));
      }
      sortBuilder=geoDistanceSortBuilder;
    }
 else {
      FieldSortBuilder fieldSortBuilder=SortBuilders.fieldSort(sortFieldName);
      fieldSortBuilder.unmappedType("string");
      sortBuilder=fieldSortBuilder;
    }
    sortBuilder.order(sortOrder);
    searchRequestBuilder.addSort(sortBuilder);
  }
}
