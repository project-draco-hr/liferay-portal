{
  final PortletApp portletApp=(PortletApp)ProxyUtil.newProxyInstance(PortletApp.class.getClassLoader(),new Class<?>[]{PortletApp.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      String methodName=method.getName();
      if (methodName.equals("getServletURLPatterns")) {
        Set<String> servletUrlPatterns=new HashSet<>();
        servletUrlPatterns.add("/testPath/*");
        return servletUrlPatterns;
      }
      return null;
    }
  }
);
  _portlet=(Portlet)ProxyUtil.newProxyInstance(Portlet.class.getClassLoader(),new Class<?>[]{Portlet.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      String methodName=method.getName();
      if (methodName.equals("getPortletApp")) {
        return portletApp;
      }
      return null;
    }
  }
);
  _portletContext=(LiferayPortletContext)ProxyUtil.newProxyInstance(LiferayPortletContext.class.getClassLoader(),new Class<?>[]{LiferayPortletContext.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      String methodName=method.getName();
      if (methodName.equals("getPortlet")) {
        return _portlet;
      }
      return null;
    }
  }
);
  PortalUtil portalUtil=new PortalUtil();
  portalUtil.setPortal(new PortalImpl());
}
