{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  validate(emailAddress,inServerName,inUserName,outEmailAddress,outCustom,outServerName,outUserName,active);
  long mailingListId=counterLocalService.increment();
  MBMailingList mailingList=mbMailingListPersistence.create(mailingListId);
  mailingList.setUuid(serviceContext.getUuid());
  mailingList.setGroupId(groupId);
  mailingList.setCompanyId(user.getCompanyId());
  mailingList.setUserId(user.getUserId());
  mailingList.setUserName(user.getFullName());
  mailingList.setCreateDate(serviceContext.getCreateDate(now));
  mailingList.setModifiedDate(serviceContext.getModifiedDate(now));
  mailingList.setCategoryId(categoryId);
  mailingList.setEmailAddress(emailAddress);
  mailingList.setInProtocol(inUseSSL ? inProtocol + "s" : inProtocol);
  mailingList.setInServerName(inServerName);
  mailingList.setInServerPort(inServerPort);
  mailingList.setInUseSSL(inUseSSL);
  mailingList.setInUserName(inUserName);
  mailingList.setInPassword(inPassword);
  mailingList.setInReadInterval(inReadInterval);
  mailingList.setOutEmailAddress(outEmailAddress);
  mailingList.setOutCustom(outCustom);
  mailingList.setOutServerName(outServerName);
  mailingList.setOutServerPort(outServerPort);
  mailingList.setOutUseSSL(outUseSSL);
  mailingList.setOutUserName(outUserName);
  mailingList.setOutPassword(outPassword);
  mailingList.setAllowAnonymous(allowAnonymous);
  mailingList.setActive(active);
  mbMailingListPersistence.update(mailingList);
  if (active) {
    scheduleMailingList(mailingList);
  }
  return mailingList;
}
