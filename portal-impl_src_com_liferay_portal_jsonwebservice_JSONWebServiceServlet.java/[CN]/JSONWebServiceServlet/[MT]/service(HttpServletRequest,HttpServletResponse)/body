{
  if (PortalUtil.isMultipartRequest(request)) {
    UploadServletRequest uploadServletRequest=new UploadServletRequestImpl(request);
    request=uploadServletRequest;
  }
  String path=GetterUtil.getString(request.getPathInfo());
  if (!path.equals(StringPool.SLASH) && !path.equals(StringPool.BLANK)) {
    super.service(request,response);
    return;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Servlet context " + request.getContextPath());
  }
  String apiPath=PortalUtil.getPathMain() + "/portal/api/jsonws";
  HttpSession session=request.getSession();
  ServletContext servletContext=session.getServletContext();
  boolean remoteAccess=AccessControlThreadLocal.isRemoteAccess();
  try {
    AccessControlThreadLocal.setRemoteAccess(true);
    if (servletContext.getContext(PropsValues.PORTAL_CTX) != null) {
      RequestDispatcher requestDispatcher=request.getRequestDispatcher(apiPath);
      requestDispatcher.forward(request,response);
    }
 else {
      String requestURI=request.getRequestURI();
      String requestURL=String.valueOf(request.getRequestURL());
      String serverURL=requestURL.substring(0,requestURL.length() - requestURI.length());
      String queryString=request.getQueryString();
      if (Validator.isNull(queryString)) {
        queryString=StringPool.BLANK;
      }
 else {
        queryString+=StringPool.AMPERSAND;
      }
      String servletContextPath=ContextPathUtil.getContextPath(servletContext);
      queryString+="contextPath=" + HttpUtil.encodeURL(servletContextPath);
      apiPath=serverURL + apiPath + StringPool.QUESTION+ queryString;
      URL url=new URL(apiPath);
      InputStream inputStream=null;
      try {
        inputStream=url.openStream();
        OutputStream outputStream=response.getOutputStream();
        StreamUtil.transfer(inputStream,outputStream);
      }
  finally {
        StreamUtil.cleanUp(inputStream);
        AccessControlThreadLocal.setRemoteAccess(remoteAccess);
      }
    }
  }
  finally {
    AccessControlThreadLocal.setRemoteAccess(remoteAccess);
  }
}
