{
  String versionLabel=String.valueOf(versionNumber);
  int pos=fileName.lastIndexOf(StringPool.PERIOD);
  if (pos != -1) {
    String fileNameExtension=fileName.substring(pos,fileName.length());
    pos=sourceFileName.lastIndexOf(StringPool.PERIOD);
    if (pos == -1) {
      throw new SourceFileNameException(sourceFileName);
    }
 else {
      String sourceFileNameExtension=sourceFileName.substring(pos,sourceFileName.length());
      if (!fileNameExtension.equalsIgnoreCase(sourceFileNameExtension)) {
        throw new SourceFileNameException(sourceFileName);
      }
    }
  }
  if (is == null) {
    throw new FileSizeException(fileName);
  }
  Session session=null;
  try {
    session=JCRFactoryUtil.createSession();
    Node rootNode=DLUtil.getRootNode(session,companyId);
    Node repositoryNode=DLUtil.getFolderNode(rootNode,repositoryId);
    Node fileNode=repositoryNode.getNode(fileName);
    Node contentNode=fileNode.getNode(JCRConstants.JCR_CONTENT);
    contentNode.checkout();
    contentNode.setProperty(JCRConstants.JCR_MIME_TYPE,"text/plain");
    contentNode.setProperty(JCRConstants.JCR_DATA,is);
    contentNode.setProperty(JCRConstants.JCR_LAST_MODIFIED,Calendar.getInstance());
    session.save();
    Version version=contentNode.checkin();
    contentNode.getVersionHistory().addVersionLabel(version.getName(),versionLabel,false);
    Indexer.updateFile(companyId,portletId,groupId,repositoryId,fileName);
  }
 catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
catch (  PathNotFoundException pnfe) {
    throw new NoSuchFileException(fileName);
  }
catch (  RepositoryException re) {
    throw new SystemException(re);
  }
 finally {
    if (session != null) {
      session.logout();
    }
  }
}
