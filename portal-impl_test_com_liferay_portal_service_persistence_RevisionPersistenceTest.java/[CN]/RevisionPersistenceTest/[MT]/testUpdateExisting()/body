{
  long pk=nextLong();
  Revision newRevision=_persistence.create(pk);
  newRevision.setGroupId(nextLong());
  newRevision.setCompanyId(nextLong());
  newRevision.setUserId(nextLong());
  newRevision.setUserName(randomString());
  newRevision.setCreateDate(nextDate());
  newRevision.setModifiedDate(nextDate());
  newRevision.setBranchId(nextLong());
  newRevision.setPlid(nextLong());
  newRevision.setParentRevisionId(nextLong());
  newRevision.setHead(randomBoolean());
  newRevision.setName(randomString());
  newRevision.setTitle(randomString());
  newRevision.setDescription(randomString());
  newRevision.setTypeSettings(randomString());
  newRevision.setIconImage(randomBoolean());
  newRevision.setIconImageId(nextLong());
  newRevision.setThemeId(randomString());
  newRevision.setColorSchemeId(randomString());
  newRevision.setWapThemeId(randomString());
  newRevision.setWapColorSchemeId(randomString());
  newRevision.setCss(randomString());
  newRevision.setStatus(nextInt());
  newRevision.setStatusByUserId(nextLong());
  newRevision.setStatusByUserName(randomString());
  newRevision.setStatusDate(nextDate());
  _persistence.update(newRevision,false);
  Revision existingRevision=_persistence.findByPrimaryKey(newRevision.getPrimaryKey());
  assertEquals(existingRevision.getRevisionId(),newRevision.getRevisionId());
  assertEquals(existingRevision.getGroupId(),newRevision.getGroupId());
  assertEquals(existingRevision.getCompanyId(),newRevision.getCompanyId());
  assertEquals(existingRevision.getUserId(),newRevision.getUserId());
  assertEquals(existingRevision.getUserName(),newRevision.getUserName());
  assertEquals(Time.getShortTimestamp(existingRevision.getCreateDate()),Time.getShortTimestamp(newRevision.getCreateDate()));
  assertEquals(Time.getShortTimestamp(existingRevision.getModifiedDate()),Time.getShortTimestamp(newRevision.getModifiedDate()));
  assertEquals(existingRevision.getBranchId(),newRevision.getBranchId());
  assertEquals(existingRevision.getPlid(),newRevision.getPlid());
  assertEquals(existingRevision.getParentRevisionId(),newRevision.getParentRevisionId());
  assertEquals(existingRevision.getHead(),newRevision.getHead());
  assertEquals(existingRevision.getName(),newRevision.getName());
  assertEquals(existingRevision.getTitle(),newRevision.getTitle());
  assertEquals(existingRevision.getDescription(),newRevision.getDescription());
  assertEquals(existingRevision.getTypeSettings(),newRevision.getTypeSettings());
  assertEquals(existingRevision.getIconImage(),newRevision.getIconImage());
  assertEquals(existingRevision.getIconImageId(),newRevision.getIconImageId());
  assertEquals(existingRevision.getThemeId(),newRevision.getThemeId());
  assertEquals(existingRevision.getColorSchemeId(),newRevision.getColorSchemeId());
  assertEquals(existingRevision.getWapThemeId(),newRevision.getWapThemeId());
  assertEquals(existingRevision.getWapColorSchemeId(),newRevision.getWapColorSchemeId());
  assertEquals(existingRevision.getCss(),newRevision.getCss());
  assertEquals(existingRevision.getStatus(),newRevision.getStatus());
  assertEquals(existingRevision.getStatusByUserId(),newRevision.getStatusByUserId());
  assertEquals(existingRevision.getStatusByUserName(),newRevision.getStatusByUserName());
  assertEquals(Time.getShortTimestamp(existingRevision.getStatusDate()),Time.getShortTimestamp(newRevision.getStatusDate()));
}
