{
  if (Validator.isNull(doAsUserIdString)) {
    return 0;
  }
  long doAsUserId=0;
  try {
    Company company=getCompany(req);
    doAsUserId=GetterUtil.getLong(Encryptor.decrypt(company.getKeyObj(),doAsUserIdString));
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to impersonate " + doAsUserIdString + " because the string cannot be decrypted",e);
    }
    return 0;
  }
  String path=GetterUtil.getString(req.getPathInfo());
  if (_log.isDebugEnabled()) {
    _log.debug("doAsUserId path " + path);
  }
  String strutsAction=getStrutsAction(req);
  if (_log.isDebugEnabled()) {
    _log.debug("Struts action " + strutsAction);
  }
  boolean alwaysAllowDoAsUser=false;
  if (path.equals("/portal/fckeditor") || strutsAction.equals("/document_library/edit_file_entry") || strutsAction.equals("/image_gallery/edit_image")) {
    alwaysAllowDoAsUser=true;
  }
  if (_log.isDebugEnabled()) {
    if (alwaysAllowDoAsUser) {
      _log.debug("doAsUserId path or Struts action is always allowed");
    }
 else {
      _log.debug("doAsUserId path is Struts action not always allowed");
    }
  }
  if (alwaysAllowDoAsUser) {
    req.setAttribute(WebKeys.USER_ID,new Long(doAsUserId));
    return doAsUserId;
  }
  HttpSession ses=req.getSession();
  Long realUserIdObj=(Long)ses.getAttribute(WebKeys.USER_ID);
  if (realUserIdObj == null) {
    return 0;
  }
  User doAsUser=UserLocalServiceUtil.getUserById(doAsUserId);
  long[] organizationIds=doAsUser.getOrganizationIds();
  User realUser=UserLocalServiceUtil.getUserById(realUserIdObj.longValue());
  boolean checkGuest=true;
  PermissionCheckerImpl permissionChecker=null;
  try {
    permissionChecker=PermissionCheckerFactory.create(realUser,checkGuest);
    if (doAsUser.isDefaultUser() || UserPermissionUtil.contains(permissionChecker,doAsUserId,organizationIds,ActionKeys.IMPERSONATE)) {
      req.setAttribute(WebKeys.USER_ID,new Long(doAsUserId));
      return doAsUserId;
    }
 else {
      _log.error("User " + realUserIdObj + " does not have the permission "+ "to impersonate "+ doAsUserId);
      return 0;
    }
  }
  finally {
    try {
      PermissionCheckerFactory.recycle(permissionChecker);
    }
 catch (    Exception e) {
    }
  }
}
