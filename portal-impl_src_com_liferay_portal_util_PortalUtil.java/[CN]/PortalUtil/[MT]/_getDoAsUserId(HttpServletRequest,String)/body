{
  if (Validator.isNull(doAsUserIdString)) {
    return 0;
  }
  HttpSession ses=req.getSession();
  Long realUserIdObj=(Long)ses.getAttribute(WebKeys.USER_ID);
  if (realUserIdObj == null) {
    return 0;
  }
  Company company=getCompany(req);
  long doAsUserId=GetterUtil.getLong(Encryptor.decrypt(company.getKeyObj(),doAsUserIdString));
  User doAsUser=UserLocalServiceUtil.getUserById(doAsUserId);
  long organizationId=doAsUser.getOrganization().getOrganizationId();
  long locationId=doAsUser.getLocation().getOrganizationId();
  User realUser=UserLocalServiceUtil.getUserById(realUserIdObj.longValue());
  boolean checkGuest=true;
  PermissionCheckerImpl permissionChecker=null;
  try {
    permissionChecker=PermissionCheckerFactory.create(realUser,checkGuest);
    if (doAsUser.isDefaultUser() || UserPermissionUtil.contains(permissionChecker,doAsUserId,organizationId,locationId,ActionKeys.IMPERSONATE)) {
      req.setAttribute(WebKeys.USER_ID,new Long(doAsUserId));
      return doAsUserId;
    }
 else {
      _log.error("User " + realUserIdObj + " does not have the permission "+ "to impersonate "+ doAsUserId);
      return 0;
    }
  }
  finally {
    try {
      PermissionCheckerFactory.recycle(permissionChecker);
    }
 catch (    Exception e) {
    }
  }
}
