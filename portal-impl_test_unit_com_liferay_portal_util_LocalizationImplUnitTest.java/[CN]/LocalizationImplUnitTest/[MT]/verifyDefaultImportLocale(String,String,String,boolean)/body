{
  LanguageUtil languageUtil=new LanguageUtil();
  languageUtil.setLanguage((Language)ProxyUtil.newProxyInstance(Language.class.getClassLoader(),new Class<?>[]{Language.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args){
      String methodName=method.getName();
      if (methodName.equals("getAvailableLocales")) {
        return getContentAvailableLocales(portalAvailableLocales);
      }
      if (methodName.equals("isAvailableLocale")) {
        Locale locale=(Locale)args[0];
        Locale[] portalLocales=getContentAvailableLocales(portalAvailableLocales);
        return ArrayUtil.contains(portalLocales,locale);
      }
      throw new UnsupportedOperationException();
    }
  }
));
  Locale locale=LocaleUtil.fromLanguageId(defaultContentLocale);
  LocaleUtil.setDefault(locale.getLanguage(),locale.getCountry(),locale.getVariant());
  LocalizationUtil localizationUtil=new LocalizationUtil();
  localizationUtil.setLocalization(new LocalizationImpl());
  Locale contentDefaultLocale=LocaleUtil.fromLanguageId("es_ES");
  Locale[] contentAvailableLocales=getContentAvailableLocales("es_ES,en_US,de_DE");
  Locale defaultImportLocale=LocalizationUtil.getDefaultImportLocale("com.liferay.portal.className",0L,contentDefaultLocale,contentAvailableLocales);
  if (expectedResult) {
    Assert.assertTrue(LocaleUtil.equals(LocaleUtil.fromLanguageId(expectedLocale),defaultImportLocale));
  }
 else {
    Assert.assertFalse(LocaleUtil.equals(LocaleUtil.fromLanguageId(expectedLocale),defaultImportLocale));
  }
}
