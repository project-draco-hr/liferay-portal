{
  rewriteFiles(srcFile);
  mergeDirectory(mergeDir,srcFile);
  processPluginPackageProperties(srcFile,displayName,pluginPackage);
  copyJars(srcFile,pluginPackage);
  copyProperties(srcFile,pluginPackage);
  copyTlds(srcFile,pluginPackage);
  copyXmls(srcFile,displayName,pluginPackage);
  copyPortalDependencies(srcFile);
  updateGeronimoWebXml(srcFile,displayName,pluginPackage);
  File webXml=new File(srcFile + "/WEB-INF/web.xml");
  updateWebXml(webXml,srcFile,displayName,pluginPackage);
  File extLibGlobalDir=new File(srcFile.getAbsolutePath() + "/WEB-INF/ext-lib/global");
  if (extLibGlobalDir.exists()) {
    File globalLibDir=new File(PortalUtil.getGlobalLibDir());
    CopyTask.copyDirectory(extLibGlobalDir,globalLibDir,"*.jar",StringPool.BLANK,overwrite,true);
  }
  File extLibPortalDir=new File(srcFile.getAbsolutePath() + "/WEB-INF/ext-lib/portal");
  if (extLibPortalDir.exists()) {
    File portalLibDir=new File(PortalUtil.getPortalLibDir());
    CopyTask.copyDirectory(extLibPortalDir,portalLibDir,"*.jar",StringPool.BLANK,overwrite,true);
  }
  if ((deployDir == null) || baseDir.equals(destDir)) {
    return;
  }
  updateDeployDirectory(srcFile);
  String excludes=StringPool.BLANK;
  if (appServerType.equals(ServerDetector.JBOSS_ID)) {
    excludes+="**/WEB-INF/lib/log4j.jar,";
  }
 else   if (appServerType.equals(ServerDetector.TOMCAT_ID)) {
    String[] libs=FileUtil.listFiles(tomcatLibDir);
    for (int i=0; i < libs.length; i++) {
      excludes+="**/WEB-INF/lib/" + libs[i] + ",";
    }
    File contextXml=new File(srcFile + "/META-INF/context.xml");
    if (contextXml.exists()) {
      String content=FileUtil.read(contextXml);
      if (content.indexOf(_PORTAL_CLASS_LOADER) != -1) {
        excludes+="**/WEB-INF/lib/util-bridges.jar,";
        excludes+="**/WEB-INF/lib/util-java.jar,";
        excludes+="**/WEB-INF/lib/util-taglib.jar,";
      }
    }
    try {
      Class.forName("javax.el.ELContext");
      excludes+="**/WEB-INF/lib/el-api.jar,";
    }
 catch (    ClassNotFoundException cnfe) {
    }
  }
  Properties properties=getPluginPackageProperties(srcFile);
  if (properties != null) {
    String deployExcludes=properties.getProperty("deploy-excludes");
    if (deployExcludes != null) {
      excludes+=deployExcludes.trim();
      if (!excludes.endsWith(",")) {
        excludes+=",";
      }
    }
    deployExcludes=properties.getProperty("deploy-excludes-" + appServerType);
    if (deployExcludes != null) {
      excludes+=deployExcludes.trim();
      if (!excludes.endsWith(",")) {
        excludes+=",";
      }
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Excludes " + excludes);
  }
  if (!unpackWar) {
    File tempDir=new File(SystemProperties.get(SystemProperties.TMP_DIR) + File.separator + Time.getTimestamp());
    excludes+="**/WEB-INF/web.xml";
    WarTask.war(srcFile,tempDir,excludes,webXml);
    if (isJEEDeploymentEnabled()) {
      File tempWarDir=new File(tempDir.getParent(),deployDir.getName());
      if (tempWarDir.exists()) {
        tempWarDir.delete();
      }
      if (!tempDir.renameTo(tempWarDir)) {
        tempWarDir=tempDir;
      }
      DeploymentHandler deploymentHandler=getDeploymentHandler();
      deploymentHandler.deploy(tempWarDir,displayName);
      deploymentHandler.releaseDeploymentManager();
      DeleteTask.deleteDirectory(tempWarDir);
    }
 else {
      if (!tempDir.renameTo(deployDir)) {
        WarTask.war(srcFile,deployDir,excludes,webXml);
      }
      DeleteTask.deleteDirectory(tempDir);
    }
  }
 else {
    excludes+="**/WEB-INF/web.xml";
    CopyTask.copyDirectory(srcFile,deployDir,StringPool.BLANK,excludes,overwrite,true);
    CopyTask.copyDirectory(srcFile,deployDir,"**/WEB-INF/web.xml",StringPool.BLANK,true,false);
    if (appServerType.equals(ServerDetector.TOMCAT_ID)) {
      File deployWebXml=new File(deployDir + "/WEB-INF/web.xml");
      deployWebXml.setLastModified(System.currentTimeMillis() + (Time.SECOND * 6));
    }
  }
  if (appServerType.equals(ServerDetector.JETTY_ID)) {
    DeployUtil.redeployJetty(displayName);
  }
}
