{
  final BatchablePipe<String,Integer> batchablePipe=new BatchablePipe<>();
  final BlockingQueue<IncreasableEntry<String,Integer>> resultBlockingQueue=new LinkedBlockingQueue<IncreasableEntry<String,Integer>>();
  ExecutorService putThreadPool=Executors.newFixedThreadPool(5);
  ExecutorService takeThreadPool=Executors.newFixedThreadPool(5);
  Runnable putRunnable=new Runnable(){
    @Override public void run(){
      for (int i=0; i < 100; i++) {
        batchablePipe.put(new IntegerIncreasableEntry(String.valueOf(i % 10),1));
      }
    }
  }
;
  Runnable takeRunnable=new Runnable(){
    @Override public void run(){
      while (true) {
        try {
          IncreasableEntry<String,Integer> increasableEntry=batchablePipe.take();
          if (increasableEntry != null) {
            String key=increasableEntry.getKey();
            if (key.equals("exit")) {
              int value=increasableEntry.getValue();
              if (value > 1) {
                Assert.assertTrue(batchablePipe.put(new IntegerIncreasableEntry("exit",value - 1)));
              }
              return;
            }
            resultBlockingQueue.put(increasableEntry);
          }
        }
 catch (        InterruptedException ie) {
        }
      }
    }
  }
;
  for (int i=0; i < 10; i++) {
    putThreadPool.submit(putRunnable);
    takeThreadPool.submit(takeRunnable);
  }
  putThreadPool.shutdown();
  putThreadPool.awaitTermination(240,TimeUnit.SECONDS);
  IncreasableEntry<String,Integer> poisonIncreasableEntry=new IntegerIncreasableEntry("exit",10);
  Assert.assertTrue(batchablePipe.put(poisonIncreasableEntry));
  takeThreadPool.shutdown();
  takeThreadPool.awaitTermination(240,TimeUnit.SECONDS);
  Map<String,Integer> verifyMap=new HashMap<>();
  for (  IncreasableEntry<String,Integer> increasableEntry : resultBlockingQueue) {
    String key=increasableEntry.getKey();
    Integer value=increasableEntry.getValue();
    Integer sum=verifyMap.get(key);
    if (sum == null) {
      verifyMap.put(key,value);
    }
 else {
      verifyMap.put(key,sum + value);
    }
  }
  for (int i=0; i < 10; i++) {
    Integer sum=verifyMap.get(String.valueOf(i));
    Assert.assertEquals(100,(int)sum);
  }
}
