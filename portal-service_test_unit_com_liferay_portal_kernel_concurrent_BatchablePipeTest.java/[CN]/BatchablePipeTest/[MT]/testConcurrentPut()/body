{
  BatchablePipe<String,Integer> batchablePipe=new BatchablePipe<>();
  final IncreasableEntry<String,Integer> increasbleEntry1=new IntegerIncreasableEntry("test",1);
  final IncreasableEntry<String,Integer> increasbleEntry2=new IntegerIncreasableEntry("test",2);
  IncreasableEntry<String,Integer> increasbleEntry3=new IntegerIncreasableEntry("test",3);
  ReflectionTestUtil.setFieldValue(batchablePipe,"concurrentMap",new ConcurrentHashMap<String,IncreasableEntryWrapper<String,Integer>>(){
    @Override public boolean replace(    String key,    IncreasableEntryWrapper<String,Integer> oldValue,    IncreasableEntryWrapper<String,Integer> newValue){
      if (oldValue.increasableEntry == increasbleEntry1) {
        put(key,new IncreasableEntryWrapper<String,Integer>(increasbleEntry2));
      }
      return super.replace(key,oldValue,newValue);
    }
  }
);
  Assert.assertTrue(batchablePipe.put(increasbleEntry1));
  Assert.assertFalse(batchablePipe.put(increasbleEntry3));
  IncreasableEntry<String,Integer> batchedIncreasableEntry=batchablePipe.take();
  Assert.assertEquals(5,(int)batchedIncreasableEntry.getValue());
  Assert.assertNull(batchablePipe.take());
}
