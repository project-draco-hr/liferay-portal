{
  Map<String,String[]> parameterMap=portletDataContext.getParameterMap();
  boolean exportIgnoreLastPublishDate=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.IGNORE_LAST_PUBLISH_DATE);
  boolean exportPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean exportLogo=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.LOGO);
  boolean exportLayoutSetSettings=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.LAYOUT_SET_SETTINGS);
  if (_log.isDebugEnabled()) {
    _log.debug("Export permissions " + exportPermissions);
  }
  LayoutSet layoutSet=_layoutSetLocalService.getLayoutSet(portletDataContext.getGroupId(),portletDataContext.isPrivateLayout());
  long companyId=layoutSet.getCompanyId();
  long defaultUserId=_userLocalService.getDefaultUserId(companyId);
  ServiceContext serviceContext=ServiceContextThreadLocal.popServiceContext();
  if (serviceContext == null) {
    serviceContext=new ServiceContext();
  }
  serviceContext.setCompanyId(companyId);
  serviceContext.setSignedIn(false);
  serviceContext.setUserId(defaultUserId);
  serviceContext.setAttribute("exporting",Boolean.TRUE);
  long layoutSetBranchId=MapUtil.getLong(parameterMap,"layoutSetBranchId");
  serviceContext.setAttribute("layoutSetBranchId",layoutSetBranchId);
  ServiceContextThreadLocal.pushServiceContext(serviceContext);
  if (exportIgnoreLastPublishDate) {
    portletDataContext.setEndDate(null);
    portletDataContext.setStartDate(null);
  }
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  Document document=SAXReaderUtil.createDocument();
  Element rootElement=document.addElement("root");
  portletDataContext.setExportDataRootElement(rootElement);
  Element headerElement=rootElement.addElement("header");
  headerElement.addAttribute("available-locales",StringUtil.merge(LanguageUtil.getAvailableLocales(portletDataContext.getScopeGroupId())));
  headerElement.addAttribute("build-number",String.valueOf(ReleaseInfo.getBuildNumber()));
  headerElement.addAttribute("export-date",Time.getRFC822());
  if (portletDataContext.hasDateRange()) {
    headerElement.addAttribute("start-date",String.valueOf(portletDataContext.getStartDate()));
    headerElement.addAttribute("end-date",String.valueOf(portletDataContext.getEndDate()));
  }
  headerElement.addAttribute("company-id",String.valueOf(portletDataContext.getCompanyId()));
  headerElement.addAttribute("company-group-id",String.valueOf(portletDataContext.getCompanyGroupId()));
  headerElement.addAttribute("group-id",String.valueOf(portletDataContext.getGroupId()));
  headerElement.addAttribute("user-personal-site-group-id",String.valueOf(portletDataContext.getUserPersonalSiteGroupId()));
  headerElement.addAttribute("private-layout",String.valueOf(portletDataContext.isPrivateLayout()));
  Group group=layoutSet.getGroup();
  String type="layout-set";
  if (group.isLayoutPrototype()) {
    type="layout-prototype";
    LayoutPrototype layoutPrototype=_layoutPrototypeLocalService.getLayoutPrototype(group.getClassPK());
    headerElement.addAttribute("type-uuid",layoutPrototype.getUuid());
  }
 else   if (group.isLayoutSetPrototype()) {
    type="layout-set-prototype";
    LayoutSetPrototype layoutSetPrototype=_layoutSetPrototypeLocalService.getLayoutSetPrototype(group.getClassPK());
    headerElement.addAttribute("type-uuid",layoutSetPrototype.getUuid());
  }
  headerElement.addAttribute("type",type);
  LayoutSetBranch layoutSetBranch=_layoutSetBranchLocalService.fetchLayoutSetBranch(layoutSetBranchId);
  if (exportLogo) {
    Image image=null;
    if (layoutSetBranch != null) {
      image=_imageLocalService.getImage(layoutSetBranch.getLogoId());
    }
 else {
      image=_imageLocalService.getImage(layoutSet.getLogoId());
    }
    if ((image != null) && (image.getTextObj() != null)) {
      String logoPath=ExportImportPathUtil.getRootPath(portletDataContext);
      logoPath+="/logo";
      headerElement.addAttribute("logo-path",logoPath);
      portletDataContext.addZipEntry(logoPath,image.getTextObj());
    }
  }
  Element missingReferencesElement=rootElement.addElement("missing-references");
  portletDataContext.setMissingReferencesElement(missingReferencesElement);
  if (layoutSetBranch != null) {
    _themeExporter.exportTheme(portletDataContext,layoutSetBranch);
  }
 else {
    _themeExporter.exportTheme(portletDataContext,layoutSet);
  }
  if (exportLayoutSetSettings) {
    Element settingsElement=headerElement.addElement("settings");
    if (layoutSetBranch != null) {
      settingsElement.addCDATA(layoutSetBranch.getSettings());
    }
 else {
      settingsElement.addCDATA(layoutSet.getSettings());
    }
  }
  Map<String,Object[]> portletIds=new LinkedHashMap<>();
  List<Layout> layouts=_layoutLocalService.getLayouts(portletDataContext.getGroupId(),portletDataContext.isPrivateLayout());
  if (group.isStagingGroup()) {
    group=group.getLiveGroup();
  }
  for (  Portlet portlet : ExportImportHelperUtil.getDataSiteLevelPortlets(companyId)) {
    String portletId=portlet.getRootPortletId();
    if (ExportImportThreadLocal.isStagingInProcess() && !group.isStagedPortlet(portletId)) {
      continue;
    }
    if (BackgroundTaskThreadLocal.hasBackgroundTask()) {
      PortletDataHandler portletDataHandler=portlet.getPortletDataHandlerInstance();
      portletDataHandler.prepareManifestSummary(portletDataContext);
    }
    portletIds.put(PortletPermissionUtil.getPrimaryKey(0,portletId),new Object[]{portletId,LayoutConstants.DEFAULT_PLID,portletDataContext.getGroupId(),StringPool.BLANK,StringPool.BLANK});
    if (!portlet.isScopeable()) {
      continue;
    }
    for (    Layout layout : layouts) {
      if (!ArrayUtil.contains(layoutIds,layout.getLayoutId()) || !layout.isTypePortlet() || !layout.hasScopeGroup()) {
        continue;
      }
      Group scopeGroup=layout.getScopeGroup();
      portletIds.put(PortletPermissionUtil.getPrimaryKey(layout.getPlid(),portlet.getPortletId()),new Object[]{portlet.getPortletId(),layout.getPlid(),scopeGroup.getGroupId(),StringPool.BLANK,layout.getUuid()});
    }
  }
  for (  Layout layout : layouts) {
    getLayoutPortlets(portletDataContext,layoutIds,portletIds,layout);
  }
  if (BackgroundTaskThreadLocal.hasBackgroundTask()) {
    ManifestSummary manifestSummary=portletDataContext.getManifestSummary();
    PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("layout",ArrayUtil.toStringArray(portletIds.keySet()),manifestSummary);
    manifestSummary.resetCounters();
  }
  portletDataContext.addDeletionSystemEventStagedModelTypes(new StagedModelType(Layout.class));
  Element layoutsElement=portletDataContext.getExportDataGroupElement(Layout.class);
  String layoutSetPrototypeUuid=layoutSet.getLayoutSetPrototypeUuid();
  if (Validator.isNotNull(layoutSetPrototypeUuid)) {
    LayoutSetPrototype layoutSetPrototype=_layoutSetPrototypeLocalService.getLayoutSetPrototypeByUuidAndCompanyId(layoutSetPrototypeUuid,companyId);
    layoutsElement.addAttribute("layout-set-prototype-uuid",layoutSetPrototypeUuid);
    layoutsElement.addAttribute("layout-set-prototype-name",layoutSetPrototype.getName(LocaleUtil.getDefault()));
  }
  for (  Layout layout : layouts) {
    exportLayout(portletDataContext,layoutIds,layout);
  }
  Element portletsElement=rootElement.addElement("portlets");
  Element servicesElement=rootElement.addElement("services");
  long previousScopeGroupId=portletDataContext.getScopeGroupId();
  for (  Map.Entry<String,Object[]> portletIdsEntry : portletIds.entrySet()) {
    Object[] portletObjects=portletIdsEntry.getValue();
    String portletId=null;
    long plid=LayoutConstants.DEFAULT_PLID;
    long scopeGroupId=0;
    String scopeType=StringPool.BLANK;
    String scopeLayoutUuid=null;
    if (portletObjects.length == 4) {
      portletId=(String)portletIdsEntry.getValue()[0];
      plid=(Long)portletIdsEntry.getValue()[1];
      scopeGroupId=(Long)portletIdsEntry.getValue()[2];
      scopeLayoutUuid=(String)portletIdsEntry.getValue()[3];
    }
 else {
      portletId=(String)portletIdsEntry.getValue()[0];
      plid=(Long)portletIdsEntry.getValue()[1];
      scopeGroupId=(Long)portletIdsEntry.getValue()[2];
      scopeType=(String)portletIdsEntry.getValue()[3];
      scopeLayoutUuid=(String)portletIdsEntry.getValue()[4];
    }
    Layout layout=_layoutLocalService.fetchLayout(plid);
    if (layout == null) {
      layout=new LayoutImpl();
      layout.setCompanyId(companyId);
      layout.setGroupId(portletDataContext.getGroupId());
    }
    portletDataContext.setPlid(plid);
    portletDataContext.setOldPlid(plid);
    portletDataContext.setPortletId(portletId);
    portletDataContext.setScopeGroupId(scopeGroupId);
    portletDataContext.setScopeType(scopeType);
    portletDataContext.setScopeLayoutUuid(scopeLayoutUuid);
    Map<String,Boolean> exportPortletControlsMap=ExportImportHelperUtil.getExportPortletControlsMap(companyId,portletId,parameterMap,type);
    try {
      _exportImportLifecycleManager.fireExportImportLifecycleEvent(EVENT_PORTLET_EXPORT_STARTED,getProcessFlag(),PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext));
      _portletExportController.exportPortlet(portletDataContext,layout,portletsElement,exportPermissions,exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS),exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_DATA),exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP),exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_USER_PREFERENCES));
      _portletExportController.exportService(portletDataContext,servicesElement,exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP));
      _exportImportLifecycleManager.fireExportImportLifecycleEvent(EVENT_PORTLET_EXPORT_SUCCEEDED,getProcessFlag(),PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext));
    }
 catch (    Throwable t) {
      _exportImportLifecycleManager.fireExportImportLifecycleEvent(EVENT_PORTLET_EXPORT_FAILED,getProcessFlag(),PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext),t);
      throw t;
    }
  }
  portletDataContext.setScopeGroupId(previousScopeGroupId);
  _portletExportController.exportAssetLinks(portletDataContext);
  _portletExportController.exportExpandoTables(portletDataContext);
  _portletExportController.exportLocks(portletDataContext);
  _deletionSystemEventExporter.exportDeletionSystemEvents(portletDataContext);
  if (exportPermissions) {
    _permissionExporter.exportPortletDataPermissions(portletDataContext);
  }
  ExportImportHelperUtil.writeManifestSummary(document,portletDataContext.getManifestSummary());
  if (_log.isInfoEnabled()) {
    _log.info("Exporting layouts takes " + stopWatch.getTime() + " ms");
  }
  boolean updateLastPublishDate=MapUtil.getBoolean(portletDataContext.getParameterMap(),PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE);
  if (ExportImportThreadLocal.isStagingInProcess() && updateLastPublishDate) {
    ExportImportProcessCallbackRegistryUtil.registerCallback(new UpdateLayoutSetLastPublishDateCallable(portletDataContext.getDateRange(),portletDataContext.getGroupId(),portletDataContext.isPrivateLayout()));
  }
  portletDataContext.addZipEntry("/manifest.xml",document.formattedString());
  ZipWriter zipWriter=portletDataContext.getZipWriter();
  return zipWriter.getFile();
}
