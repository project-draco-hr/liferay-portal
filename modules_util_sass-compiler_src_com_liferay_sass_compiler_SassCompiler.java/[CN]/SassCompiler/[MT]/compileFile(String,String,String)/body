{
  final byte sourceComments=(byte)0;
  final String includePaths=includePath + File.pathSeparator + new File(inputFile).getParent();
  Sass_File_Context sassFileContext=null;
  try {
    final Sass_Options opt=_libsass.sass_make_options();
    _libsass.sass_option_set_input_path(opt,inputFile);
    _libsass.sass_option_set_output_path(opt,"");
    _libsass.sass_option_set_image_path(opt,imgPath);
    _libsass.sass_option_set_output_style(opt,Sass_Output_Style.SASS_STYLE_COMPACT);
    _libsass.sass_option_set_source_comments(opt,sourceComments);
    _libsass.sass_option_set_include_path(opt,includePaths);
    sassFileContext=_libsass.sass_make_file_context(inputFile);
    _libsass.sass_file_context_set_options(sassFileContext,opt);
    _libsass.sass_compile_file_context(sassFileContext);
    final Sass_Context context=_libsass.sass_file_context_get_context(sassFileContext);
    final int errorStatus=_libsass.sass_context_get_error_status(context);
    if (errorStatus != 0) {
      String errorMsg=_libsass.sass_context_get_error_message(context);
      throw new SassCompilationException(errorMsg);
    }
    final String outputString=_libsass.sass_context_get_output_string(context);
    if ((outputString == null) || (outputString == null)) {
      throw new SassCompilationException("libsass returned null");
    }
    return outputString;
  }
  finally {
    try {
      if (sassFileContext != null) {
        _libsass.sass_delete_file_context(sassFileContext);
      }
    }
 catch (    Throwable t) {
      throw new SassCompilationException(t);
    }
  }
}
