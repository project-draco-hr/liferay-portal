{
  byte sourceComments=(byte)0;
  String includePaths=includePath + File.pathSeparator + new File(inputFile).getParent();
  Sass_File_Context sassFileContext=null;
  try {
    sassFileContext=_sassLibrary.sass_make_file_context(inputFile);
    Sass_Options sassOptions=_sassLibrary.sass_make_options();
    _sassLibrary.sass_option_set_image_path(sassOptions,imgPath);
    _sassLibrary.sass_option_set_include_path(sassOptions,includePaths);
    _sassLibrary.sass_option_set_input_path(sassOptions,inputFile);
    _sassLibrary.sass_option_set_output_path(sassOptions,"");
    _sassLibrary.sass_option_set_output_style(sassOptions,Sass_Output_Style.SASS_STYLE_COMPACT);
    _sassLibrary.sass_option_set_source_comments(sassOptions,sourceComments);
    _sassLibrary.sass_file_context_set_options(sassFileContext,sassOptions);
    _sassLibrary.sass_compile_file_context(sassFileContext);
    Sass_Context sassContext=_sassLibrary.sass_file_context_get_context(sassFileContext);
    int errorStatus=_sassLibrary.sass_context_get_error_status(sassContext);
    if (errorStatus != 0) {
      String errorMessage=_sassLibrary.sass_context_get_error_message(sassContext);
      throw new SassCompilerException(errorMessage);
    }
    String outputString=_sassLibrary.sass_context_get_output_string(sassContext);
    if ((outputString == null)) {
      throw new SassCompilerException("Null output");
    }
    return outputString;
  }
  finally {
    try {
      if (sassFileContext != null) {
        _sassLibrary.sass_delete_file_context(sassFileContext);
      }
    }
 catch (    Throwable t) {
      throw new SassCompilerException(t);
    }
  }
}
