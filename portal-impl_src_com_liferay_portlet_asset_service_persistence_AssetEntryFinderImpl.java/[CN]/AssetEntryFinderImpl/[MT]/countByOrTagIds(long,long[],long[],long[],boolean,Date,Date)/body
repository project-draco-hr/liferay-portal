{
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(COUNT_BY_OR_TAG_IDS);
    sql=StringUtil.replace(sql,"[$TAG_ID$]",getTagIds(tagIds,StringPool.EQUAL));
    if (notTagIds.length > 0) {
      StringBuilder sb=new StringBuilder();
      sb.append(" AND (");
      for (int i=0; i < notTagIds.length; i++) {
        sb.append("AssetEntry.entryId NOT IN (");
        sb.append(CustomSQLUtil.get(FIND_BY_AND_TAG_IDS));
        sb.append(StringPool.CLOSE_PARENTHESIS);
        if ((i + 1) < notTagIds.length) {
          sb.append(" AND ");
        }
      }
      sb.append(StringPool.CLOSE_PARENTHESIS);
      sql=StringUtil.replace(sql,"[$NOT_TAG_ID$]",sb.toString());
    }
 else {
      sql=StringUtil.replace(sql,"[$NOT_TAG_ID$]",StringPool.BLANK);
    }
    sql=getDates(sql,publishDate,expirationDate);
    sql+=" AND (visible = ?)";
    if (groupId > 0) {
      sql+=" AND (AssetEntry.groupId = ?)";
    }
    sql+=getClassNameIds(classNameIds);
    if (excludeZeroViewCount) {
      sql+=" AND (AssetEntry.viewCount > 0)";
    }
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setTagIds(qPos,tagIds);
    setTagIds(qPos,notTagIds);
    setDates(qPos,publishDate,expirationDate);
    qPos.add(true);
    if (groupId > 0) {
      setGroupId(qPos,groupId);
    }
    setClassNamedIds(qPos,classNameIds);
    Iterator<Long> itr=q.list().iterator();
    if (itr.hasNext()) {
      Long count=itr.next();
      if (count != null) {
        return count.intValue();
      }
    }
    return 0;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
