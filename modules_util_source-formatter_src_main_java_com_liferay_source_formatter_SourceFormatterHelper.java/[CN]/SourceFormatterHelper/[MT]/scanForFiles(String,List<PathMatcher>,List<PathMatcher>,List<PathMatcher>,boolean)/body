{
  final List<String> fileNames=new ArrayList<>();
  Files.walkFileTree(Paths.get(baseDir),new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dirPath,    BasicFileAttributes basicFileAttributes){
      if (Files.exists(dirPath.resolve("source_formatter.ignore"))) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      if (!includeSubrepositories) {
        Path gitRepoPath=dirPath.resolve(".gitrepo");
        if (Files.exists(gitRepoPath)) {
          try {
            String content=FileUtil.read(gitRepoPath.toFile());
            if (content.contains("mode = pull")) {
              return FileVisitResult.SKIP_SUBTREE;
            }
          }
 catch (          Exception e) {
          }
        }
      }
      dirPath=getCanonicalPath(dirPath);
      for (      PathMatcher pathMatcher : excludeDirPathMatchers) {
        if (pathMatcher.matches(dirPath)) {
          return FileVisitResult.SKIP_SUBTREE;
        }
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path filePath,    BasicFileAttributes basicFileAttributes){
      Path canonicalPath=getCanonicalPath(filePath);
      for (      PathMatcher pathMatcher : excludeFilePathMatchers) {
        if (pathMatcher.matches(canonicalPath)) {
          return FileVisitResult.CONTINUE;
        }
      }
      for (      PathMatcher pathMatcher : includeFilePathMatchers) {
        if (!pathMatcher.matches(canonicalPath)) {
          continue;
        }
        String fileName=filePath.toString();
        fileNames.add(fileName);
        updateProperties(fileName);
        return FileVisitResult.CONTINUE;
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
  return fileNames;
}
