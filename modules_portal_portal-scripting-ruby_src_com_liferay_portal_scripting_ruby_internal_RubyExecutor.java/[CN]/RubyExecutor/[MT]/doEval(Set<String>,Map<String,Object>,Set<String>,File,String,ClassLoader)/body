{
  if (allowedClasses != null) {
    throw new ExecutionException("Constrained execution not supported for Ruby");
  }
  org.jruby.embed.ScriptingContainer scriptingContainer=_scriptingContainer.getWrappedScriptingContainer();
  try {
    LocalContextProvider localContextProvider=scriptingContainer.getProvider();
    RubyInstanceConfig rubyInstanceConfig=localContextProvider.getRubyInstanceConfig();
    rubyInstanceConfig.setCurrentDirectory(_basePath);
    if (ArrayUtil.isNotEmpty(classLoaders)) {
      rubyInstanceConfig.setLoader(getAggregateClassLoader(classLoaders));
    }
    rubyInstanceConfig.setLoadPaths(_loadPaths);
    for (    Map.Entry<String,Object> entry : inputObjects.entrySet()) {
      String inputName=entry.getKey();
      Object inputObject=entry.getValue();
      if (!inputName.startsWith(StringPool.DOLLAR)) {
        inputName=StringPool.DOLLAR + inputName;
      }
      scriptingContainer.put(inputName,inputObject);
    }
    if (scriptFile != null) {
      scriptingContainer.runScriptlet(new FileInputStream(scriptFile),scriptFile.toString());
    }
 else {
      _scriptingContainer.runScriptlet(script);
    }
    if (outputNames == null) {
      return null;
    }
    Map<String,Object> outputObjects=new HashMap<>();
    for (    String outputName : outputNames) {
      outputObjects.put(outputName,scriptingContainer.get(outputName));
    }
    return outputObjects;
  }
 catch (  RaiseException re) {
    throw new ScriptingException(re.getException().message.asJavaString() + "\n\n",re);
  }
catch (  FileNotFoundException fnfe) {
    throw new ScriptingException(fnfe);
  }
 finally {
    try {
      _globalRuntimeField.set(null,null);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
}
