{
  dropNonunicodeTableIndexes();
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    con=DataAccess.getConnection();
    StringBundler sb=new StringBundler(11);
    sb.append("select sysobjects.name as table_name, syscolumns.name ");
    sb.append("AS column_name, systypes.name as data_type, ");
    sb.append("syscolumns.length, syscolumns.isnullable as ");
    sb.append("is_nullable FROM sysobjects inner join syscolumns on ");
    sb.append("sysobjects.id = syscolumns.id inner join systypes on ");
    sb.append("syscolumns.xtype = systypes.xtype where ");
    sb.append("(sysobjects.xtype = 'U') and ");
    sb.append(_FILTER_NONUNICODE_DATA_TYPES);
    sb.append(" and ");
    sb.append(_FILTER_EXCLUDED_TABLES);
    sb.append(" order by sysobjects.name, syscolumns.colid");
    String sql=sb.toString();
    ps=con.prepareStatement(sql);
    rs=ps.executeQuery();
    while (rs.next()) {
      String tableName=rs.getString("table_name");
      String columnName=rs.getString("column_name");
      String dataType=rs.getString("data_type");
      int length=rs.getInt("length");
      boolean nullable=rs.getBoolean("is_nullable");
      if (dataType.equals("varchar")) {
        convertVarcharColumn(tableName,columnName,length,nullable);
      }
 else       if (dataType.equals("text")) {
        convertTextColumn(tableName,columnName,length,nullable);
      }
    }
    for (int i=0; i < _PKStatements.size(); i++) {
      runSQL(_PKStatements.get(i));
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    DataAccess.cleanUp(con,ps,rs);
  }
}
