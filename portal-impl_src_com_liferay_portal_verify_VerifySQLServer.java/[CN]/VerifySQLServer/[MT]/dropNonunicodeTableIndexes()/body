{
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    con=DataAccess.getUpgradeOptimizedConnection();
    StringBundler sb=new StringBundler(15);
    sb.append("select distinct sysobjects.name as table_name, ");
    sb.append("sysindexes.name as index_name FROM sysobjects inner ");
    sb.append("join sysindexes on sysobjects.id = sysindexes.id ");
    sb.append("inner join syscolumns on sysobjects.id = ");
    sb.append("syscolumns.id inner join sysindexkeys on ");
    sb.append("((sysobjects.id = sysindexkeys.id) and ");
    sb.append("(syscolumns.colid = sysindexkeys.colid) and ");
    sb.append("(sysindexes.indid = sysindexkeys.indid)) inner join ");
    sb.append("systypes on syscolumns.xtype = systypes.xtype where ");
    sb.append("(sysobjects.type = 'U') and (sysobjects.category != ");
    sb.append("2) and ");
    sb.append(_FILTER_NONUNICODE_DATA_TYPES);
    sb.append(" and ");
    sb.append(_FILTER_EXCLUDED_TABLES);
    sb.append(" order by sysobjects.name, sysindexes.name");
    String sql=sb.toString();
    ps=con.prepareStatement(sql);
    rs=ps.executeQuery();
    Set<String> tableNames=getTableNames();
    while (rs.next()) {
      String tableName=rs.getString("table_name");
      if (!tableNames.contains(tableName.toLowerCase())) {
        continue;
      }
      String indexName=rs.getString("index_name");
      if (_log.isInfoEnabled()) {
        _log.info("Dropping index " + tableName + "."+ indexName);
      }
      String indexNameUpperCase=indexName.toUpperCase();
      if (indexNameUpperCase.startsWith("PK")) {
        String primaryKeyColumnNames=StringUtil.merge(getPrimaryKeyColumnNames(indexName));
        runSQL("alter table " + tableName + " drop constraint "+ indexName);
        _addPrimaryKeySQLs.add("alter table " + tableName + " add primary key ("+ primaryKeyColumnNames+ ")");
      }
 else {
        runSQL("drop index " + indexName + " on "+ tableName);
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    DataAccess.cleanUp(con,ps,rs);
  }
}
