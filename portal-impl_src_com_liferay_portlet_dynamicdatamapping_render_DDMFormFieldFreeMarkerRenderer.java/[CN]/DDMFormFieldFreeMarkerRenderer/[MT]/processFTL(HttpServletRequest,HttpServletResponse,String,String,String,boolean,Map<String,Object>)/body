{
  if (Validator.isNull(fieldNamespace)) {
    fieldNamespace=_DEFAULT_NAMESPACE;
  }
  TemplateResource templateResource=_defaultTemplateResource;
  Map<String,Object> fieldStructure=(Map<String,Object>)freeMarkerContext.get("fieldStructure");
  boolean fieldReadOnly=GetterUtil.getBoolean(fieldStructure.get("readOnly"));
  if ((fieldReadOnly && Validator.isNotNull(mode) && StringUtil.equalsIgnoreCase(mode,DDMTemplateConstants.TEMPLATE_MODE_EDIT)) || readOnly) {
    fieldNamespace=_DEFAULT_READ_ONLY_NAMESPACE;
    templateResource=_defaultReadOnlyTemplateResource;
  }
  String templateName=StringUtil.replaceFirst(type,fieldNamespace.concat(StringPool.DASH),StringPool.BLANK);
  StringBundler resourcePath=new StringBundler(5);
  resourcePath.append(_TPL_PATH);
  resourcePath.append(StringUtil.toLowerCase(fieldNamespace));
  resourcePath.append(CharPool.SLASH);
  resourcePath.append(templateName);
  resourcePath.append(_TPL_EXT);
  String resource=resourcePath.toString();
  URL url=getResource(resource);
  if (url != null) {
    templateResource=new URLTemplateResource(resource,url);
  }
  if (templateResource == null) {
    throw new Exception("Unable to load template resource " + resource);
  }
  Template template=TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL,templateResource,false);
  for (  Map.Entry<String,Object> entry : freeMarkerContext.entrySet()) {
    template.put(entry.getKey(),entry.getValue());
  }
  return processFTL(request,response,template);
}
