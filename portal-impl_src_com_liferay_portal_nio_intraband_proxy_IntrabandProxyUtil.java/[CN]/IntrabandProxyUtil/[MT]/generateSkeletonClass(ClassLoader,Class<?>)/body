{
  Type targetType=Type.getType(clazz);
  String internalName=targetType.getInternalName();
  ClassNode classNode=ASMUtil.loadAndRename(TemplateSkeleton.class,internalName.concat(SKELETON_POSTFIX));
  classNode.access&=~Opcodes.ACC_ABSTRACT;
  classNode.access|=Opcodes.ACC_PUBLIC;
  FieldNode proxyMethodsMappingFieldNode=ASMUtil.findFieldNode(classNode.fields,"_PROXY_METHODS_MAPPING");
  proxyMethodsMappingFieldNode.access|=Opcodes.ACC_FINAL;
  FieldNode targetLocatorFieldNode=ASMUtil.findFieldNode(classNode.fields,"_targetLocator");
  targetLocatorFieldNode.access|=Opcodes.ACC_FINAL;
  MethodNode doDispatchMethodNode=ASMUtil.findMethodNode(classNode.methods,"doDispatch",Type.VOID_TYPE,_REGISTRATION_REFERENCE_TYPE,_DATAGRAM_TYPE,_DESERIALIZER_TYPE);
  doDispatchMethodNode.access&=~Opcodes.ACC_ABSTRACT;
  MethodNodeGenerator methodNodeGenerator=new MethodNodeGenerator(doDispatchMethodNode);
  methodNodeGenerator.loadThis();
  methodNodeGenerator.getField(Type.getObjectType(classNode.name),"_targetLocator",_TARGET_LOCATOR_TYPE);
  methodNodeGenerator.loadArg(2);
  deserializerRead(methodNodeGenerator,_STRING_TYPE);
  methodNodeGenerator.invokeInterface(_TARGET_LOCATOR_TYPE.getInternalName(),"getTarget",_OBJECT_TYPE,_STRING_TYPE);
  methodNodeGenerator.checkCast(targetType);
  int typedTargetIndex=methodNodeGenerator.newLocal(targetType);
  methodNodeGenerator.storeLocal(typedTargetIndex);
  methodNodeGenerator.loadArg(2);
  deserializerRead(methodNodeGenerator,Type.INT_TYPE);
  methodNodeGenerator.dup();
  int indexIndex=methodNodeGenerator.newLocal(Type.INT_TYPE);
  methodNodeGenerator.storeLocal(indexIndex);
  MethodsBag methodsBag=extractMethods(clazz);
  List<Method> proxyMethods=methodsBag.proxyMethods;
  int[] keys=new int[proxyMethods.size()];
  for (int i=0; i < keys.length; i++) {
    keys[i]=i;
  }
  methodNodeGenerator.tableSwitch(keys,new SkeletonDispatchTableSwitchGenerator(methodNodeGenerator,proxyMethods,classNode.name,typedTargetIndex,indexIndex),true);
  methodNodeGenerator.returnValue();
  methodNodeGenerator.endMethod();
  rewriteGetProxyMethodSignaturesMethodNode(classNode,methodsBag.proxyMethodSignatures);
  return (Class<? extends IntrabandProxySkeleton>)toClass(classNode,classLoader);
}
