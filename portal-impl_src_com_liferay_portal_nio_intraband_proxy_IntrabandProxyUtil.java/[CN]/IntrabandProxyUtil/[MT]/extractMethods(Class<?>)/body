{
  List<Method> idMethods=new ArrayList<>();
  List<Method> proxyMethods=new ArrayList<>();
  List<Method> emptyMethods=new ArrayList<>();
  for (  Method method : ReflectionUtil.getVisibleMethods(clazz)) {
    Id id=method.getAnnotation(Id.class);
    if (id != null) {
      if (Modifier.isStatic(method.getModifiers())) {
        throw new IllegalArgumentException("The @Id annotated method " + method + " must not be static");
      }
      Class<?>[] parameterTypes=method.getParameterTypes();
      if (parameterTypes.length > 0) {
        throw new IllegalArgumentException("The @Id annotated method " + method + " must not have parameters");
      }
      if (method.getReturnType() != String.class) {
        throw new IllegalArgumentException("The @Id annotated method " + method + " must not return String");
      }
      idMethods.add(method);
      continue;
    }
    Proxy proxy=method.getAnnotation(Proxy.class);
    if (proxy != null) {
      if (Modifier.isStatic(method.getModifiers())) {
        throw new IllegalArgumentException("Static proxy method violation for " + method);
      }
      proxyMethods.add(method);
      continue;
    }
    if (Modifier.isAbstract(method.getModifiers())) {
      emptyMethods.add(method);
    }
  }
  return new MethodsBag(idMethods,proxyMethods,emptyMethods);
}
