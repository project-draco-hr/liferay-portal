{
  long pk=ServiceTestUtil.nextLong();
  Subscription newSubscription=_persistence.create(pk);
  newSubscription.setMvccVersion(ServiceTestUtil.nextLong());
  newSubscription.setCompanyId(ServiceTestUtil.nextLong());
  newSubscription.setUserId(ServiceTestUtil.nextLong());
  newSubscription.setUserName(ServiceTestUtil.randomString());
  newSubscription.setCreateDate(ServiceTestUtil.nextDate());
  newSubscription.setModifiedDate(ServiceTestUtil.nextDate());
  newSubscription.setClassNameId(ServiceTestUtil.nextLong());
  newSubscription.setClassPK(ServiceTestUtil.nextLong());
  newSubscription.setFrequency(ServiceTestUtil.randomString());
  _persistence.update(newSubscription);
  Subscription existingSubscription=_persistence.findByPrimaryKey(newSubscription.getPrimaryKey());
  Assert.assertEquals(existingSubscription.getMvccVersion(),newSubscription.getMvccVersion());
  Assert.assertEquals(existingSubscription.getSubscriptionId(),newSubscription.getSubscriptionId());
  Assert.assertEquals(existingSubscription.getCompanyId(),newSubscription.getCompanyId());
  Assert.assertEquals(existingSubscription.getUserId(),newSubscription.getUserId());
  Assert.assertEquals(existingSubscription.getUserName(),newSubscription.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingSubscription.getCreateDate()),Time.getShortTimestamp(newSubscription.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingSubscription.getModifiedDate()),Time.getShortTimestamp(newSubscription.getModifiedDate()));
  Assert.assertEquals(existingSubscription.getClassNameId(),newSubscription.getClassNameId());
  Assert.assertEquals(existingSubscription.getClassPK(),newSubscription.getClassPK());
  Assert.assertEquals(existingSubscription.getFrequency(),newSubscription.getFrequency());
}
