{
  T to=toClazz.newInstance();
  BeanInfo fromBean=Introspector.getBeanInfo(from.getClass());
  BeanInfo toBean=Introspector.getBeanInfo(toClazz);
  PropertyDescriptor[] fromProperties=fromBean.getPropertyDescriptors();
  PropertyDescriptor[] toProperties=toBean.getPropertyDescriptors();
  for (  PropertyDescriptor toProperty : toProperties) {
    Class<?> toPropertyType=toProperty.getPropertyType();
    for (    PropertyDescriptor fromProperty : fromProperties) {
      if (!toProperty.getName().equals("class") && toProperty.getName().equals(fromProperty.getName())) {
        Class<?> fromPropertyType=fromProperty.getPropertyType();
        if ((toPropertyType != null) && (fromPropertyType != null) && (toProperty.getWriteMethod() != null)&& (fromProperty.getReadMethod() != null)) {
          if (isCollectionType(toPropertyType,fromPropertyType)) {
            copyCollection(fromProperty,toProperty,from,to);
          }
 else           if (isMapType(toPropertyType,fromPropertyType)) {
            copyMap(fromProperty,toProperty,from,to);
          }
 else           if (isSimpleCopy(toPropertyType,fromPropertyType)) {
            toProperty.getWriteMethod().invoke(to,fromProperty.getReadMethod().invoke(from));
          }
 else {
            Object value=fromProperty.getReadMethod().invoke(from);
            Object newObject=deepCopyProperties(toPropertyType,value);
            toProperty.getWriteMethod().invoke(to,newObject);
          }
        }
        break;
      }
    }
  }
  return to;
}
