{
  PortletSession ses=req.getPortletSession();
  PortletPreferences prefs=req.getPreferences();
  com.liferay.portlet.mail.model.Message msgModel=new com.liferay.portlet.mail.model.Message(req,prefs);
  Message msg=(Message)req.getAttribute(WebKeys.MAIL_MESSAGE);
  Message newMsg=MailUtil.getNewMessage();
  Enumeration enu=msg.getAllHeaders();
  while (enu.hasMoreElements()) {
    Header header=(Header)enu.nextElement();
    String name=header.getName();
    String value=header.getValue();
    if (!name.equalsIgnoreCase("Delivered-To")) {
      newMsg.addHeader(name,value);
    }
  }
  newMsg.setFrom((msg.getFrom())[0]);
  String subject=msg.getSubject();
  if (Validator.isNull(subject)) {
    subject="";
  }
  String cmd=req.getParameter(Constants.CMD);
  if (cmd.equals("forward")) {
    newMsg.setSubject("FWD: " + subject);
  }
 else   if ((cmd.equals("reply")) || (cmd.equals("reply_all"))) {
    newMsg.setSubject("RE: " + subject);
  }
 else   if (cmd.equals("drafts")) {
    newMsg.setSubject(subject);
  }
  StringBuffer msgBody=new StringBuffer();
  String signature=prefs.getValue("signature",StringPool.BLANK);
  if ((Validator.isNotNull(signature)) && (!cmd.equals("drafts"))) {
    signature=JS.decodeURIComponent(signature);
    if (msgModel.isHTMLFormat()) {
      msgBody.append("<br><br>");
      msgBody.append(StringUtil.replace(signature,"\n","<br>"));
      msgBody.append("<br><br><br>");
    }
 else {
      msgBody.append("\n\n\n");
      msgBody.append(signature);
      msgBody.append("\n\n\n\n");
    }
  }
  boolean includeOriginal=GetterUtil.getBoolean(prefs.getValue("include-original",StringPool.BLANK));
  int originalTextIndicator=GetterUtil.getInteger(prefs.getValue("original-text-indicator",StringPool.BLANK));
  if (includeOriginal && (!cmd.equals("drafts"))) {
    if ((originalTextIndicator == 1) || (originalTextIndicator == 2)) {
      msgBody.append("-----Original Message-----");
      if (msgModel.isHTMLFormat()) {
        msgBody.append("<br>");
      }
 else {
        msgBody.append("\n");
      }
    }
    if (msg.getFrom() != null) {
      msgBody.append("From: ");
      msgBody.append(JavaMailUtil.toUnicodeString(msg.getFrom()));
      if (msgModel.isHTMLFormat()) {
        msgBody.append("<br>");
      }
 else {
        msgBody.append("\n");
      }
    }
    if (msg.getRecipients(Message.RecipientType.TO) != null) {
      msgBody.append("To: ");
      msgBody.append(InternetAddress.toString(msg.getRecipients(Message.RecipientType.TO)));
      if (msgModel.isHTMLFormat()) {
        msgBody.append("<br>");
      }
 else {
        msgBody.append("\n");
      }
    }
    if (msg.getRecipients(Message.RecipientType.CC) != null) {
      msgBody.append("CC: ");
      msgBody.append(InternetAddress.toString(msg.getRecipients(Message.RecipientType.CC)));
      if (msgModel.isHTMLFormat()) {
        msgBody.append("<br>");
      }
 else {
        msgBody.append("\n");
      }
    }
    msgBody.append("Subject: ");
    msgBody.append(subject);
    if (msgModel.isHTMLFormat()) {
      msgBody.append("<br>");
    }
 else {
      msgBody.append("\n");
    }
    if (msg.getSentDate() != null) {
      msgBody.append("Date: ");
      msgBody.append(msg.getSentDate());
      if (msgModel.isHTMLFormat()) {
        msgBody.append("<br><br>");
      }
 else {
        msgBody.append("\n\n");
      }
    }
  }
  if (includeOriginal || cmd.equals("forward") || cmd.equals("drafts")) {
    Content c=MailUtil.getContent(msg);
    String bodyText=null;
    String quotedBodyText=null;
    if (c != null) {
      bodyText=c.getText();
    }
    if (msgModel.isHTMLFormat()) {
      bodyText=StringUtil.replace(bodyText,"\n","<br>");
    }
    quotedBodyText=MailUtil.addQuote(bodyText,msgModel.isHTMLFormat());
    try {
      Object content=msg.getContent();
      if (content instanceof Multipart) {
        MimeBodyPart defaultBodyPart=new MimeBodyPart();
        defaultBodyPart.setText("");
        Multipart newMultipart=new MimeMultipart();
        newMultipart.addBodyPart(defaultBodyPart);
        if (!cmd.startsWith("reply")) {
          Multipart multipart=(Multipart)content;
          for (int i=0; i < multipart.getCount(); i++) {
            BodyPart part=multipart.getBodyPart(i);
            String fileName=part.getFileName();
            if (fileName != null) {
              newMultipart.addBodyPart(part);
            }
          }
        }
        newMsg.setContent(newMultipart);
        if (c.getType().equals(Constants.TEXT_PLAIN)) {
          if ((originalTextIndicator == 2) && (!cmd.equals("drafts"))) {
            msgBody.append(quotedBodyText);
          }
 else {
            msgBody.append(bodyText);
          }
        }
 else {
          msgBody.append(bodyText);
        }
      }
 else {
        Multipart multipart=new MimeMultipart();
        if (c.getType().equals(Constants.TEXT_PLAIN)) {
          if ((originalTextIndicator == 2) && (!cmd.equals("drafts"))) {
            msgBody.append(quotedBodyText);
          }
 else {
            msgBody.append(bodyText);
          }
        }
 else {
          msgBody.append(c.getText());
        }
        BodyPart bodyPart=new MimeBodyPart();
        bodyPart.setText(msgBody.toString());
        multipart.addBodyPart(bodyPart);
        newMsg.setContent(multipart);
      }
    }
 catch (    MessagingException me) {
      _log.error(me);
    }
  }
 else {
    Multipart multipart=new MimeMultipart();
    BodyPart bodyPart=new MimeBodyPart();
    bodyPart.setText(msgBody.toString());
    multipart.addBodyPart(bodyPart);
    newMsg.setContent(multipart);
  }
  msgModel.setMessageType(cmd);
  msgModel.setParentFolder(req.getParameter("folder_name"));
  msgModel.setParentNumber(req.getParameter("msg_num"));
  if (cmd.equals("reply")) {
    InternetAddress from=((InternetAddress[])newMsg.getFrom())[0];
    msgModel.setTo(from.toUnicodeString());
  }
 else   if (cmd.equals("reply_all")) {
    InternetAddress from=((InternetAddress[])newMsg.getFrom())[0];
    String to=InternetAddress.toString(msg.getRecipients(Message.RecipientType.TO));
    if (Validator.isNotNull(to)) {
      msgModel.setTo(from.toUnicodeString() + ", " + to);
    }
 else {
      msgModel.setTo(from.toUnicodeString());
    }
    String cc=InternetAddress.toString(msg.getRecipients(Message.RecipientType.CC));
    if (Validator.isNotNull(cc)) {
      msgModel.setCc(cc);
    }
  }
 else   if (cmd.equals("drafts")) {
    if (msg.getRecipients(Message.RecipientType.TO) != null) {
      msgModel.setTo(InternetAddress.toString(msg.getRecipients(Message.RecipientType.TO)));
    }
    if (msg.getRecipients(Message.RecipientType.CC) != null) {
      msgModel.setCc(InternetAddress.toString(msg.getRecipients(Message.RecipientType.CC)));
    }
    if (msg.getRecipients(Message.RecipientType.BCC) != null) {
      msgModel.setBcc(InternetAddress.toString(msg.getRecipients(Message.RecipientType.BCC)));
    }
    msgModel.setDraft(true);
    msgModel.setMessage(msg);
  }
  if (newMsg.getSubject() != null) {
    msgModel.setSubject(newMsg.getSubject());
  }
  msgModel.setBody(msgBody.toString());
  ses.setAttribute(WebKeys.MAIL_MESSAGE,newMsg,PortletSession.APPLICATION_SCOPE);
  ses.setAttribute(WebKeys.MAIL_MESSAGE_MODEL,msgModel,PortletSession.APPLICATION_SCOPE);
  req.setAttribute(WebKeys.MAIL_MESSAGE,null);
}
