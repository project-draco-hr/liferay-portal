{
  boolean[] marked={false};
  Retry:   while (true) {
    Entry<K,V> predecessorEntry=_headEntry;
    Entry<K,V> currentEntry=predecessorEntry._nextEntry.getReference();
    while (currentEntry != null) {
      Entry<K,V> successorEntry=currentEntry._nextEntry.get(marked);
      if (marked[0]) {
        if (!predecessorEntry._nextEntry.compareAndSet(currentEntry,successorEntry,false,false)) {
          continue Retry;
        }
        currentEntry=predecessorEntry._nextEntry.getReference();
        continue;
      }
      if (currentEntry._increasableEntry.getKey().equals(increasableEntry.getKey())) {
        return currentEntry._increasableEntry.increase(increasableEntry.getValue());
      }
      predecessorEntry=currentEntry;
      currentEntry=successorEntry;
    }
    _lastEntryReference.set(predecessorEntry);
    return false;
  }
}
