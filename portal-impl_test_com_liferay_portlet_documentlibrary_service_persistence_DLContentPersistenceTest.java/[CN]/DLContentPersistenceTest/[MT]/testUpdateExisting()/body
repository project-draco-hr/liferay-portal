{
  long pk=nextLong();
  DLContent newDLContent=_persistence.create(pk);
  newDLContent.setGroupId(nextLong());
  newDLContent.setCompanyId(nextLong());
  newDLContent.setPortletId(randomString());
  newDLContent.setRepositoryId(nextLong());
  newDLContent.setPath(randomString());
  newDLContent.setVersion(randomString());
  newDLContent.setData(randomBlob());
  newDLContent.setSize(nextLong());
  _persistence.update(newDLContent,false);
  DLContent existingDLContent=_persistence.findByPrimaryKey(newDLContent.getPrimaryKey());
  assertEquals(existingDLContent.getContentId(),newDLContent.getContentId());
  assertEquals(existingDLContent.getGroupId(),newDLContent.getGroupId());
  assertEquals(existingDLContent.getCompanyId(),newDLContent.getCompanyId());
  assertEquals(existingDLContent.getPortletId(),newDLContent.getPortletId());
  assertEquals(existingDLContent.getRepositoryId(),newDLContent.getRepositoryId());
  assertEquals(existingDLContent.getPath(),newDLContent.getPath());
  assertEquals(existingDLContent.getVersion(),newDLContent.getVersion());
  Blob existingData=existingDLContent.getData();
  Blob newData=newDLContent.getData();
  assertEquals(existingData.getBytes(0,(int)existingData.length()),newData.getBytes(0,(int)newData.length()));
  assertEquals(existingDLContent.getSize(),newDLContent.getSize());
}
