{
  PortalClassLoaderUtil.setClassLoader(getClass().getClassLoader());
  final Exception exception=new Exception("Execution error");
  MockIntraband mockIntraband=new MockIntraband(){
    @Override protected Datagram processDatagram(    Datagram datagram){
      try {
        Serializer serializer=new Serializer();
        serializer.writeObject(new RPCResponse(exception));
        return Datagram.createResponseDatagram(datagram,serializer.toByteBuffer());
      }
 catch (      Exception e) {
        throw new RuntimeException();
      }
    }
  }
;
  MockRegistrationReference mockRegistrationReference=new MockRegistrationReference(mockIntraband);
  Future<String> futureResult=IntrabandRPCUtil.execute(mockRegistrationReference,new TestProcessCallable());
  try {
    futureResult.get();
    Assert.fail();
  }
 catch (  ExecutionException ee) {
    Throwable t=ee.getCause();
    Assert.assertEquals(exception.getMessage(),t.getMessage());
  }
}
