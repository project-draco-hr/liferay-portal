{
  _serviceTracker=new ServiceTracker<>(bundleContext,ServletContextHelper.class,new ServiceTrackerCustomizer<ServletContextHelper,ServiceRegistration<Servlet>>(){
    @Override public ServiceRegistration<Servlet> addingService(    ServiceReference<ServletContextHelper> serviceReference){
      ServletContextHelper servletContextHelper=bundleContext.getService(serviceReference);
      Servlet servlet=new RTLServlet(serviceReference.getBundle(),servletContextHelper);
      Hashtable<String,Object> properties=new Hashtable<>();
      Object contextName=serviceReference.getProperty(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME);
      properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT,contextName);
      properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_NAME,"RTL Servlet");
      properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_PATTERN,"*.css");
      return bundleContext.registerService(Servlet.class,servlet,properties);
    }
    @Override public void modifiedService(    ServiceReference<ServletContextHelper> serviceReference,    ServiceRegistration<Servlet> serviceRegistration){
      removedService(serviceReference,serviceRegistration);
      addingService(serviceReference);
    }
    @Override public void removedService(    ServiceReference<ServletContextHelper> serviceReference,    ServiceRegistration<Servlet> serviceRegistration){
      serviceRegistration.unregister();
      bundleContext.ungetService(serviceReference);
    }
  }
);
  _serviceTracker.open();
}
