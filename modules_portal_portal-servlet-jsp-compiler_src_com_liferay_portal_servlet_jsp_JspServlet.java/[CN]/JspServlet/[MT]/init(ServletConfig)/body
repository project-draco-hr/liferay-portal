{
  final ServletContext servletContext=servletConfig.getServletContext();
  ClassLoader classLoader=servletContext.getClassLoader();
  if (!(classLoader instanceof BundleReference)) {
    throw new IllegalStateException();
  }
  BundleReference bundleReference=(BundleReference)classLoader;
  _bundle=bundleReference.getBundle();
  _jspBundleClassloader=new JspBundleClassloader(_bundle,_jspBundle);
  final Map<String,String> defaults=new HashMap<String,String>();
  defaults.put("compilerClassName","com.liferay.portal.servlet.jsp.compiler.compiler.JspCompiler");
  defaults.put("development","false");
  defaults.put("httpMethods","GET,POST,HEAD");
  defaults.put("keepgenerated","false");
  defaults.put("logVerbosityLevel","DEBUG");
  Enumeration<String> names=servletConfig.getInitParameterNames();
  Set<String> nameSet=new HashSet<String>(Collections.list(names));
  nameSet.addAll(defaults.keySet());
  final Enumeration<String> initParameterNames=Collections.enumeration(nameSet);
  _jspServlet.init(new ServletConfig(){
    @Override public String getServletName(){
      return servletConfig.getServletName();
    }
    @Override public ServletContext getServletContext(){
      return getServletContextWrapper(servletContext);
    }
    @Override public Enumeration<String> getInitParameterNames(){
      return initParameterNames;
    }
    @Override public String getInitParameter(    String name){
      String value=servletConfig.getInitParameter(name);
      if (value == null) {
        value=defaults.get(name);
      }
      return value;
    }
  }
);
}
