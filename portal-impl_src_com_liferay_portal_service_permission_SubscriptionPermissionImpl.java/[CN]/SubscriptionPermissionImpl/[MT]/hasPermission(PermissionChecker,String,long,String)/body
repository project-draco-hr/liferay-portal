{
  MBDiscussion mbDiscussion=MBDiscussionLocalServiceUtil.fetchDiscussion(className,classPK);
  if (mbDiscussion != null) {
    if (className.equals(Layout.class.getName())) {
      return LayoutPermissionUtil.contains(permissionChecker,classPK,ActionKeys.VIEW);
    }
    MBThread mbThread=MBThreadLocalServiceUtil.fetchThread(mbDiscussion.getThreadId());
    if (className.equals(WorkflowInstance.class.getName())) {
      return permissionChecker.hasPermission(mbThread.getGroupId(),PortletKeys.WORKFLOW_DEFINITIONS,mbThread.getGroupId(),ActionKeys.VIEW);
    }
    return MBDiscussionPermission.contains(permissionChecker,mbThread.getCompanyId(),mbThread.getGroupId(),className,classPK,mbThread.getUserId(),ActionKeys.VIEW);
  }
  if (className.equals(BlogsEntry.class.getName())) {
    Group group=GroupLocalServiceUtil.fetchGroup(classPK);
    if (group == null) {
      return BlogsEntryPermission.contains(permissionChecker,classPK,actionId);
    }
    return BlogsPermission.contains(permissionChecker,classPK,actionId);
  }
 else   if (className.equals(BookmarksEntry.class.getName())) {
    return BookmarksEntryPermission.contains(permissionChecker,classPK,actionId);
  }
 else   if (className.equals(BookmarksFolder.class.getName())) {
    Group group=GroupLocalServiceUtil.fetchGroup(classPK);
    if (group == null) {
      BookmarksFolder folder=BookmarksFolderLocalServiceUtil.getFolder(classPK);
      return BookmarksFolderPermission.contains(permissionChecker,folder,actionId);
    }
    return BookmarksPermission.contains(permissionChecker,classPK,actionId);
  }
 else   if (className.equals(DLFileEntry.class.getName())) {
    DLFileVersion fileVersion=DLFileVersionLocalServiceUtil.fetchDLFileVersion(classPK);
    if (fileVersion != null) {
      classPK=fileVersion.getFileEntryId();
    }
    return DLFileEntryPermission.contains(permissionChecker,classPK,actionId);
  }
 else   if (className.equals(DLFileEntryType.class.getName())) {
    Group group=GroupLocalServiceUtil.fetchGroup(classPK);
    if (group == null) {
      return DLFileEntryTypePermission.contains(permissionChecker,classPK,actionId);
    }
    return true;
  }
 else   if (className.equals(Folder.class.getName())) {
    Group group=GroupLocalServiceUtil.fetchGroup(classPK);
    if (group == null) {
      Folder folder=DLAppLocalServiceUtil.getFolder(classPK);
      return DLFolderPermission.contains(permissionChecker,folder,actionId);
    }
    return DLPermission.contains(permissionChecker,classPK,actionId);
  }
 else   if (className.equals(JournalArticle.class.getName())) {
    JournalArticle article=JournalArticleLocalServiceUtil.getArticle(classPK);
    return JournalArticlePermission.contains(permissionChecker,article,actionId);
  }
 else   if (className.equals(JournalFolder.class.getName())) {
    Group group=GroupLocalServiceUtil.fetchGroup(classPK);
    if (group == null) {
      JournalFolder folder=JournalFolderLocalServiceUtil.getFolder(classPK);
      return JournalFolderPermission.contains(permissionChecker,folder,actionId);
    }
    return JournalPermission.contains(permissionChecker,classPK,actionId);
  }
 else   if (className.equals(MBCategory.class.getName())) {
    Group group=GroupLocalServiceUtil.fetchGroup(classPK);
    if (group == null) {
      return MBCategoryPermission.contains(permissionChecker,classPK,actionId);
    }
    return MBPermission.contains(permissionChecker,classPK,actionId);
  }
 else   if (className.equals(MBMessage.class.getName())) {
    return MBMessagePermission.contains(permissionChecker,classPK,actionId);
  }
 else   if (className.equals(MBThread.class.getName())) {
    MBThread mbThread=MBThreadLocalServiceUtil.fetchThread(classPK);
    if (mbThread == null) {
      return false;
    }
    return MBMessagePermission.contains(permissionChecker,mbThread.getRootMessageId(),actionId);
  }
 else   if (className.equals(WikiNode.class.getName())) {
    return WikiNodePermission.contains(permissionChecker,classPK,actionId);
  }
 else   if (className.equals(WikiPage.class.getName())) {
    WikiPage page=WikiPageLocalServiceUtil.getPageByPageId(classPK);
    return WikiPagePermission.contains(permissionChecker,page,actionId);
  }
  return null;
}
