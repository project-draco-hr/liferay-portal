{
  Integer columnCount=(Integer)request.getAttribute(WebKeys.RENDER_PORTLET_COLUMN_COUNT);
  String columnId=(String)request.getAttribute(WebKeys.RENDER_PORTLET_COLUMN_ID);
  Integer columnPos=(Integer)request.getAttribute(WebKeys.RENDER_PORTLET_COLUMN_POS);
  String currentURL=PortalUtil.getCurrentURL(request);
  String doAsUserId=themeDisplay.getDoAsUserId();
  long plid=themeDisplay.getPlid();
  Portlet portlet=(Portlet)request.getAttribute(WebKeys.RENDER_PORTLET);
  String portletId=portlet.getPortletId();
  WindowState windowState=WindowState.NORMAL;
  if (themeDisplay.getLayoutTypePortlet().hasStateMaxPortletId(portletId)) {
    windowState=WindowState.MAXIMIZED;
  }
 else   if (themeDisplay.getLayoutTypePortlet().hasStateMinPortletId(portletId)) {
    windowState=WindowState.MINIMIZED;
  }
  StringBuilder url=new StringBuilder();
  url.append(themeDisplay.getPathMain());
  url.append("/portal/render_portlet");
  url.append("?p_l_id=");
  url.append(plid);
  url.append("&p_p_id=");
  url.append(portletId);
  url.append("&p_p_lifecycle=0&p_p_state=");
  url.append(windowState);
  url.append("&p_p_mode=view&p_p_col_id=");
  url.append(columnId);
  url.append("&p_p_col_pos=");
  url.append(columnPos);
  url.append("&p_p_col_count=");
  url.append(columnCount);
  if (portlet.isStatic()) {
    url.append("&p_p_static=1");
    if (portlet.isStaticStart()) {
      url.append("&p_p_static_start=1");
    }
  }
  if (Validator.isNotNull(doAsUserId)) {
    url.append("&doAsUserId=");
    url.append(HttpUtil.encodeURL(doAsUserId));
  }
  url.append("&currentURL=");
  url.append(HttpUtil.encodeURL(currentURL));
  String ppid=ParamUtil.getString(request,"p_p_id");
  if (ppid.equals(portletId)) {
    Enumeration enu=request.getParameterNames();
    while (enu.hasMoreElements()) {
      String name=(String)enu.nextElement();
      if (!PortalUtil.isReservedParameter(name)) {
        String[] values=request.getParameterValues(name);
        for (int i=0; i < values.length; i++) {
          url.append(StringPool.AMPERSAND);
          url.append(name);
          url.append(StringPool.EQUAL);
          url.append(HttpUtil.encodeURL(values[i]));
        }
      }
    }
    Map renderParameters=RenderParametersPool.get(request,plid,ppid);
    Iterator itr=renderParameters.keySet().iterator();
    while (itr.hasNext()) {
      String name=(String)itr.next();
      String[] values=(String[])renderParameters.get(name);
      for (int i=0; i < values.length; i++) {
        url.append(StringPool.AMPERSAND);
        url.append(name);
        url.append(StringPool.EQUAL);
        url.append(HttpUtil.encodeURL(values[i]));
      }
    }
  }
  return url.toString();
}
