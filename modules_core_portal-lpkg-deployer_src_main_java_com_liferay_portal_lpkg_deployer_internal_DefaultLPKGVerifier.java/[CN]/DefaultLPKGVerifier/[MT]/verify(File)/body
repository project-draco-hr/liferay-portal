{
  try {
    File targetPlatformDir=new File(PropsValues.MODULE_FRAMEWORK_BASE_DIR,Indexer.DIR_NAME_TARGET_PLATFORM);
    Indexer indexer=_indexerFactory.create(lpkgFile);
    File indexFile=indexer.index(targetPlatformDir);
    if (_log.isInfoEnabled()) {
      _log.info("Wrote index " + indexFile.getPath());
    }
    IndexValidator indexValidator=_indexValidatorFactory.create();
    long start=System.currentTimeMillis();
    try {
      List<String> messages=indexValidator.validate(Collections.singletonList(indexFile.toURI()));
      if (!messages.isEmpty()) {
        indexFile.delete();
        StringBundler sb=new StringBundler((messages.size() * 3) + 1);
        sb.append("LPKG validation failed with {");
        for (        String message : messages) {
          sb.append("[");
          sb.append(message);
          sb.append("],");
        }
        sb.setIndex(sb.index() - 1);
        sb.append("]}");
        throw new LPKGVerifyException(sb.toString());
      }
    }
  finally {
      if (_log.isInfoEnabled()) {
        long duration=System.currentTimeMillis() - start;
        _log.info(String.format("LPKG validation time %02d:%02ds",MILLISECONDS.toMinutes(duration),MILLISECONDS.toSeconds(duration % Time.MINUTE)));
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof LPKGVerifyException) {
      throw (LPKGVerifyException)e;
    }
    throw new LPKGVerifyException(e);
  }
  try (ZipFile zipFile=new ZipFile(lpkgFile)){
    ZipEntry zipEntry=zipFile.getEntry("liferay-marketplace.properties");
    if (zipEntry == null) {
      throw new LPKGVerifyException(lpkgFile + " does not have liferay-marketplace.properties");
    }
    Properties properties=new Properties();
    try (InputStream inputStream=zipFile.getInputStream(zipEntry)){
      properties.load(inputStream);
    }
     String symbolicName=properties.getProperty("title");
    if (Validator.isNull(symbolicName)) {
      throw new LPKGVerifyException(lpkgFile + " does not have a valid symbolic name");
    }
    Version version=null;
    String versionString=properties.getProperty("version");
    try {
      version=new Version(versionString);
    }
 catch (    IllegalArgumentException iae) {
      throw new LPKGVerifyException(lpkgFile + " does not have a valid version: " + versionString,iae);
    }
    List<Bundle> oldBundles=new ArrayList<>();
    for (    Bundle bundle : _bundleContext.getBundles()) {
      if (!symbolicName.equals(bundle.getSymbolicName())) {
        continue;
      }
      int value=version.compareTo(bundle.getVersion());
      if (value > 0) {
        oldBundles.add(bundle);
      }
 else       if (value == 0) {
        String path=lpkgFile.getCanonicalPath();
        if (path.equals(bundle.getLocation())) {
          continue;
        }
        throw new LPKGVerifyException("Existing LPKG bundle " + bundle + " has the same "+ "symbolic name and version as LPKG file "+ lpkgFile);
      }
 else {
        throw new LPKGVerifyException("Existing LPKG bundle " + bundle + " is a newer version of LPKG file "+ lpkgFile);
      }
    }
    return oldBundles;
  }
 catch (  IOException ioe) {
    throw new LPKGVerifyException(ioe);
  }
}
