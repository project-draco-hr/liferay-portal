{
  long pk=ServiceTestUtil.nextLong();
  MBMessage newMBMessage=_persistence.create(pk);
  newMBMessage.setUuid(ServiceTestUtil.randomString());
  newMBMessage.setGroupId(ServiceTestUtil.nextLong());
  newMBMessage.setCompanyId(ServiceTestUtil.nextLong());
  newMBMessage.setUserId(ServiceTestUtil.nextLong());
  newMBMessage.setUserName(ServiceTestUtil.randomString());
  newMBMessage.setCreateDate(ServiceTestUtil.nextDate());
  newMBMessage.setModifiedDate(ServiceTestUtil.nextDate());
  newMBMessage.setClassNameId(ServiceTestUtil.nextLong());
  newMBMessage.setClassPK(ServiceTestUtil.nextLong());
  newMBMessage.setCategoryId(ServiceTestUtil.nextLong());
  newMBMessage.setThreadId(ServiceTestUtil.nextLong());
  newMBMessage.setRootMessageId(ServiceTestUtil.nextLong());
  newMBMessage.setParentMessageId(ServiceTestUtil.nextLong());
  newMBMessage.setSubject(ServiceTestUtil.randomString());
  newMBMessage.setBody(ServiceTestUtil.randomString());
  newMBMessage.setFormat(ServiceTestUtil.randomString());
  newMBMessage.setAnonymous(ServiceTestUtil.randomBoolean());
  newMBMessage.setPriority(ServiceTestUtil.nextDouble());
  newMBMessage.setAllowPingbacks(ServiceTestUtil.randomBoolean());
  newMBMessage.setAnswer(ServiceTestUtil.randomBoolean());
  newMBMessage.setStatus(ServiceTestUtil.nextInt());
  newMBMessage.setStatusByUserId(ServiceTestUtil.nextLong());
  newMBMessage.setStatusByUserName(ServiceTestUtil.randomString());
  newMBMessage.setStatusDate(ServiceTestUtil.nextDate());
  _persistence.update(newMBMessage);
  MBMessage existingMBMessage=_persistence.findByPrimaryKey(newMBMessage.getPrimaryKey());
  Assert.assertEquals(existingMBMessage.getUuid(),newMBMessage.getUuid());
  Assert.assertEquals(existingMBMessage.getMessageId(),newMBMessage.getMessageId());
  Assert.assertEquals(existingMBMessage.getGroupId(),newMBMessage.getGroupId());
  Assert.assertEquals(existingMBMessage.getCompanyId(),newMBMessage.getCompanyId());
  Assert.assertEquals(existingMBMessage.getUserId(),newMBMessage.getUserId());
  Assert.assertEquals(existingMBMessage.getUserName(),newMBMessage.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMBMessage.getCreateDate()),Time.getShortTimestamp(newMBMessage.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingMBMessage.getModifiedDate()),Time.getShortTimestamp(newMBMessage.getModifiedDate()));
  Assert.assertEquals(existingMBMessage.getClassNameId(),newMBMessage.getClassNameId());
  Assert.assertEquals(existingMBMessage.getClassPK(),newMBMessage.getClassPK());
  Assert.assertEquals(existingMBMessage.getCategoryId(),newMBMessage.getCategoryId());
  Assert.assertEquals(existingMBMessage.getThreadId(),newMBMessage.getThreadId());
  Assert.assertEquals(existingMBMessage.getRootMessageId(),newMBMessage.getRootMessageId());
  Assert.assertEquals(existingMBMessage.getParentMessageId(),newMBMessage.getParentMessageId());
  Assert.assertEquals(existingMBMessage.getSubject(),newMBMessage.getSubject());
  Assert.assertEquals(existingMBMessage.getBody(),newMBMessage.getBody());
  Assert.assertEquals(existingMBMessage.getFormat(),newMBMessage.getFormat());
  Assert.assertEquals(existingMBMessage.getAnonymous(),newMBMessage.getAnonymous());
  AssertUtils.assertEquals(existingMBMessage.getPriority(),newMBMessage.getPriority());
  Assert.assertEquals(existingMBMessage.getAllowPingbacks(),newMBMessage.getAllowPingbacks());
  Assert.assertEquals(existingMBMessage.getAnswer(),newMBMessage.getAnswer());
  Assert.assertEquals(existingMBMessage.getStatus(),newMBMessage.getStatus());
  Assert.assertEquals(existingMBMessage.getStatusByUserId(),newMBMessage.getStatusByUserId());
  Assert.assertEquals(existingMBMessage.getStatusByUserName(),newMBMessage.getStatusByUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMBMessage.getStatusDate()),Time.getShortTimestamp(newMBMessage.getStatusDate()));
}
