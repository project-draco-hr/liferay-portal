{
  long pk=RandomTestUtil.nextLong();
  MBMessage newMBMessage=_persistence.create(pk);
  newMBMessage.setUuid(RandomTestUtil.randomString());
  newMBMessage.setGroupId(RandomTestUtil.nextLong());
  newMBMessage.setCompanyId(RandomTestUtil.nextLong());
  newMBMessage.setUserId(RandomTestUtil.nextLong());
  newMBMessage.setUserName(RandomTestUtil.randomString());
  newMBMessage.setCreateDate(RandomTestUtil.nextDate());
  newMBMessage.setModifiedDate(RandomTestUtil.nextDate());
  newMBMessage.setClassNameId(RandomTestUtil.nextLong());
  newMBMessage.setClassPK(RandomTestUtil.nextLong());
  newMBMessage.setCategoryId(RandomTestUtil.nextLong());
  newMBMessage.setThreadId(RandomTestUtil.nextLong());
  newMBMessage.setRootMessageId(RandomTestUtil.nextLong());
  newMBMessage.setParentMessageId(RandomTestUtil.nextLong());
  newMBMessage.setSubject(RandomTestUtil.randomString());
  newMBMessage.setBody(RandomTestUtil.randomString());
  newMBMessage.setFormat(RandomTestUtil.randomString());
  newMBMessage.setAnonymous(RandomTestUtil.randomBoolean());
  newMBMessage.setPriority(RandomTestUtil.nextDouble());
  newMBMessage.setAllowPingbacks(RandomTestUtil.randomBoolean());
  newMBMessage.setAnswer(RandomTestUtil.randomBoolean());
  newMBMessage.setStatus(RandomTestUtil.nextInt());
  newMBMessage.setStatusByUserId(RandomTestUtil.nextLong());
  newMBMessage.setStatusByUserName(RandomTestUtil.randomString());
  newMBMessage.setStatusDate(RandomTestUtil.nextDate());
  _models.add(_persistence.update(newMBMessage));
  MBMessage existingMBMessage=_persistence.findByPrimaryKey(newMBMessage.getPrimaryKey());
  Assert.assertEquals(existingMBMessage.getUuid(),newMBMessage.getUuid());
  Assert.assertEquals(existingMBMessage.getMessageId(),newMBMessage.getMessageId());
  Assert.assertEquals(existingMBMessage.getGroupId(),newMBMessage.getGroupId());
  Assert.assertEquals(existingMBMessage.getCompanyId(),newMBMessage.getCompanyId());
  Assert.assertEquals(existingMBMessage.getUserId(),newMBMessage.getUserId());
  Assert.assertEquals(existingMBMessage.getUserName(),newMBMessage.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMBMessage.getCreateDate()),Time.getShortTimestamp(newMBMessage.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingMBMessage.getModifiedDate()),Time.getShortTimestamp(newMBMessage.getModifiedDate()));
  Assert.assertEquals(existingMBMessage.getClassNameId(),newMBMessage.getClassNameId());
  Assert.assertEquals(existingMBMessage.getClassPK(),newMBMessage.getClassPK());
  Assert.assertEquals(existingMBMessage.getCategoryId(),newMBMessage.getCategoryId());
  Assert.assertEquals(existingMBMessage.getThreadId(),newMBMessage.getThreadId());
  Assert.assertEquals(existingMBMessage.getRootMessageId(),newMBMessage.getRootMessageId());
  Assert.assertEquals(existingMBMessage.getParentMessageId(),newMBMessage.getParentMessageId());
  Assert.assertEquals(existingMBMessage.getSubject(),newMBMessage.getSubject());
  Assert.assertEquals(existingMBMessage.getBody(),newMBMessage.getBody());
  Assert.assertEquals(existingMBMessage.getFormat(),newMBMessage.getFormat());
  Assert.assertEquals(existingMBMessage.getAnonymous(),newMBMessage.getAnonymous());
  AssertUtils.assertEquals(existingMBMessage.getPriority(),newMBMessage.getPriority());
  Assert.assertEquals(existingMBMessage.getAllowPingbacks(),newMBMessage.getAllowPingbacks());
  Assert.assertEquals(existingMBMessage.getAnswer(),newMBMessage.getAnswer());
  Assert.assertEquals(existingMBMessage.getStatus(),newMBMessage.getStatus());
  Assert.assertEquals(existingMBMessage.getStatusByUserId(),newMBMessage.getStatusByUserId());
  Assert.assertEquals(existingMBMessage.getStatusByUserName(),newMBMessage.getStatusByUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMBMessage.getStatusDate()),Time.getShortTimestamp(newMBMessage.getStatusDate()));
}
