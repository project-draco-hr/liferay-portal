{
  long pk=ServiceTestUtil.nextLong();
  MBMessage mbMessage=_persistence.create(pk);
  mbMessage.setUuid(ServiceTestUtil.randomString());
  mbMessage.setGroupId(ServiceTestUtil.nextLong());
  mbMessage.setCompanyId(ServiceTestUtil.nextLong());
  mbMessage.setUserId(ServiceTestUtil.nextLong());
  mbMessage.setUserName(ServiceTestUtil.randomString());
  mbMessage.setCreateDate(ServiceTestUtil.nextDate());
  mbMessage.setModifiedDate(ServiceTestUtil.nextDate());
  mbMessage.setClassNameId(ServiceTestUtil.nextLong());
  mbMessage.setClassPK(ServiceTestUtil.nextLong());
  mbMessage.setCategoryId(ServiceTestUtil.nextLong());
  mbMessage.setThreadId(ServiceTestUtil.nextLong());
  mbMessage.setRootMessageId(ServiceTestUtil.nextLong());
  mbMessage.setParentMessageId(ServiceTestUtil.nextLong());
  mbMessage.setSubject(ServiceTestUtil.randomString());
  mbMessage.setBody(ServiceTestUtil.randomString());
  mbMessage.setFormat(ServiceTestUtil.randomString());
  mbMessage.setAttachments(ServiceTestUtil.randomBoolean());
  mbMessage.setAnonymous(ServiceTestUtil.randomBoolean());
  mbMessage.setPriority(ServiceTestUtil.nextDouble());
  mbMessage.setAllowPingbacks(ServiceTestUtil.randomBoolean());
  mbMessage.setAnswer(ServiceTestUtil.randomBoolean());
  mbMessage.setStatus(ServiceTestUtil.nextInt());
  mbMessage.setStatusByUserId(ServiceTestUtil.nextLong());
  mbMessage.setStatusByUserName(ServiceTestUtil.randomString());
  mbMessage.setStatusDate(ServiceTestUtil.nextDate());
  _persistence.update(mbMessage,false);
  return mbMessage;
}
