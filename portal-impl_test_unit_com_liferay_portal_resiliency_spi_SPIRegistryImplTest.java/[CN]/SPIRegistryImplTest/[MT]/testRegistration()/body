{
  PortletLocalServiceUtilAdvice._portletIds=Arrays.asList("portlet3","portlet4");
  SPIConfiguration spiConfiguration=new SPIConfiguration("","",8081,"",new String[]{"portlet1","portlet2"},new String[]{"portletApp1","portletApp2"},null);
  final AtomicBoolean throwException=new AtomicBoolean();
  MockSPI mockSPI=new MockSPI(){
    @Override public boolean equals(    Object object){
      return super.equals(object);
    }
    @Override public int hashCode(){
      if (throwException.get()) {
        throw new RuntimeException();
      }
      return super.hashCode();
    }
  }
;
  mockSPI.spiConfiguration=spiConfiguration;
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(SPIRegistryImpl.class.getName(),Level.WARNING)){
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    _spiRegistryImpl.registerSPI(mockSPI);
    Assert.assertEquals(3,_portletSPIs.size());
    Assert.assertEquals(mockSPI,_portletSPIs.remove("portlet1"));
    Assert.assertEquals(mockSPI,_portletSPIs.remove("portlet3"));
    Assert.assertEquals(mockSPI,_portletSPIs.remove("portlet4"));
    Assert.assertSame(mockSPI,_spiRegistryImpl.getServletContextSPI("portletApp1"));
    Assert.assertSame(mockSPI,_spiRegistryImpl.getServletContextSPI("portletApp2"));
    Assert.assertNull(_spiRegistryImpl.getServletContextSPI("portletApp3"));
    _spiRegistryImpl.setSPIRegistryValidator(new MockSPIRegistryValidator());
    Assert.assertSame(_spiRegistryImpl.getErrorSPI(),_spiRegistryImpl.getServletContextSPI("portletApp1"));
    Assert.assertSame(_spiRegistryImpl.getErrorSPI(),_spiRegistryImpl.getServletContextSPI("portletApp2"));
    Assert.assertNull(_spiRegistryImpl.getServletContextSPI("portletApp3"));
    _spiRegistryImpl.setSPIRegistryValidator(null);
    List<String> portletIds=Arrays.asList(_portletIds.remove(mockSPI));
    Assert.assertTrue(portletIds.contains("portlet1"));
    Assert.assertTrue(portletIds.contains("portlet3"));
    Assert.assertTrue(portletIds.contains("portlet4"));
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord1=logRecords.get(0);
    Assert.assertEquals("Skip unknown portlet id portlet2",logRecord1.getMessage());
    LogRecord logRecord2=logRecords.get(1);
    Assert.assertEquals("Skip unknown servlet context name portletApp2",logRecord2.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    _spiRegistryImpl.registerSPI(mockSPI);
    Assert.assertEquals(3,_portletSPIs.size());
    Assert.assertEquals(mockSPI,_portletSPIs.remove("portlet1"));
    Assert.assertEquals(mockSPI,_portletSPIs.remove("portlet3"));
    Assert.assertEquals(mockSPI,_portletSPIs.remove("portlet4"));
    portletIds=Arrays.asList(_portletIds.remove(mockSPI));
    Assert.assertTrue(portletIds.contains("portlet1"));
    Assert.assertTrue(portletIds.contains("portlet3"));
    Assert.assertTrue(portletIds.contains("portlet4"));
    Assert.assertTrue(logRecords.isEmpty());
    logRecords=captureHandler.resetLogLevel(Level.WARNING);
    throwException.set(true);
    try {
      _spiRegistryImpl.registerSPI(mockSPI);
      Assert.fail();
    }
 catch (    RuntimeException re) {
    }
    Assert.assertEquals(2,logRecords.size());
    logRecord1=logRecords.get(0);
    Assert.assertEquals("Skip unknown portlet id portlet2",logRecord1.getMessage());
    logRecord2=logRecords.get(1);
    Assert.assertEquals("Skip unknown servlet context name portletApp2",logRecord2.getMessage());
    _portletSPIs.clear();
    logRecords=captureHandler.resetLogLevel(Level.WARNING);
    throwException.set(false);
    _spiRegistryImpl.registerSPI(mockSPI);
    Assert.assertEquals(2,logRecords.size());
    logRecord1=logRecords.get(0);
    Assert.assertEquals("Skip unknown portlet id portlet2",logRecord1.getMessage());
    logRecord2=logRecords.get(1);
    Assert.assertEquals("Skip unknown servlet context name portletApp2",logRecord2.getMessage());
  }
   _spiRegistryImpl.unregisterSPI(mockSPI);
  Assert.assertTrue(_portletIds.isEmpty());
  Assert.assertTrue(_portletSPIs.isEmpty());
  _spiRegistryImpl.unregisterSPI(mockSPI);
  Assert.assertTrue(_portletIds.isEmpty());
  Assert.assertTrue(_portletSPIs.isEmpty());
  throwException.set(true);
  try {
    _spiRegistryImpl.unregisterSPI(mockSPI);
    Assert.fail();
  }
 catch (  RuntimeException re) {
  }
}
