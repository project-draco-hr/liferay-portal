{
  Map<String,FilterDefinition> filters=webXML.getFilters();
  for (  Element filterMappingsEl : root.elements("filter-mapping")) {
    String filterName=filterMappingsEl.element("filter-name").getTextTrim();
    String urlPattern=filterMappingsEl.element("url-pattern").getTextTrim();
    Map<String,String> namespaces=new TreeMap<String,String>();
    namespaces.put("x",root.getNamespace().getText());
    XPath xPath=SAXReaderUtil.createXPath("//x:filter[x:filter-name/text() ='" + filterName + "']",namespaces);
    Element filterElement=(Element)xPath.selectSingleNode(root);
    if (filterElement == null) {
      continue;
    }
    if (urlPattern.endsWith(_SLASH_STAR) && (urlPattern.length() > 2)) {
      urlPattern=urlPattern.substring(0,urlPattern.length() - 2);
    }
    if (urlPattern.startsWith(StringPool.STAR)) {
      urlPattern=StringPool.SLASH.concat(urlPattern);
    }
    String filterClass=filterElement.element("filter-class").getTextTrim();
    FilterDefinition filterDefinition=null;
    try {
      Filter filterInstance=(Filter)bundle.loadClass(filterClass).newInstance();
      filterDefinition=new FilterDefinition();
      filterDefinition.setFilter(filterInstance);
      filterDefinition.setName(filterName);
    }
 catch (    Exception e) {
      _log.error("Omitted filter definition",e);
      continue;
    }
    for (    Element initParam : filterElement.elements("init-param")) {
      String initParamName=initParam.element("param-name").getTextTrim();
      String initParamValue=initParam.element("param-value").getTextTrim();
      filterDefinition.setInitParam(initParamName,initParamValue);
    }
    filters.put(urlPattern,filterDefinition);
  }
}
