{
  _dbType=properties.getProperty("sample.sql.db.type");
  _optimizeBufferSize=GetterUtil.getInteger(properties.getProperty("sample.sql.optimize.buffer.size"));
  _outputDir=properties.getProperty("sample.sql.output.dir");
  boolean outputMerge=GetterUtil.getBoolean(properties.getProperty("sample.sql.output.merge"));
  _dataFactory=new DataFactory(properties);
  CharPipe charPipe=generateSQL();
  String endSQLFileName="others.sql";
  File tempDir=new File(_outputDir,"temp");
  tempDir.mkdirs();
  try {
    compressSQL(charPipe.getReader(),tempDir,endSQLFileName);
    if (outputMerge) {
      File mergedSQLFile=new File(_outputDir,"sample-" + _dbType + ".sql");
      FileUtil.delete(mergedSQLFile);
      mergeSQL(mergedSQLFile,tempDir,endSQLFileName);
    }
 else {
      File dividedSQLDir=new File(_outputDir,"output");
      FileUtil.deltree(dividedSQLDir);
      if (!tempDir.renameTo(dividedSQLDir)) {
        FileUtil.copyDirectory(tempDir,dividedSQLDir);
      }
    }
  }
  finally {
    FileUtil.deltree(tempDir);
  }
  StringBundler sb=new StringBundler();
  for (  String key : properties.stringPropertyNames()) {
    if (!key.startsWith("sample.sql")) {
      continue;
    }
    String value=properties.getProperty(key);
    sb.append(key);
    sb.append(StringPool.EQUAL);
    sb.append(value);
    sb.append(StringPool.NEW_LINE);
  }
  FileUtil.write(new File(_outputDir,"benchmarks-actual.properties"),sb.toString());
}
