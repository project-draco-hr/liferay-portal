{
  _dbType=properties.getProperty("sample.sql.db.type");
  _csvFileNames=StringUtil.split(properties.getProperty("sample.sql.output.csv.file.names"));
  _optimizeBufferSize=GetterUtil.getInteger(properties.getProperty("sample.sql.optimize.buffer.size"));
  _outputDir=properties.getProperty("sample.sql.output.dir");
  _script=properties.getProperty("sample.sql.script");
  _dataFactory=new DataFactory(properties);
  Reader reader=generateSQL();
  File tempDir=new File(_outputDir,"temp");
  tempDir.mkdirs();
  try {
    compressSQL(reader,tempDir);
    boolean outputMerge=GetterUtil.getBoolean(properties.getProperty("sample.sql.output.merge"));
    if (outputMerge) {
      File sqlFile=new File(_outputDir,"sample-" + _dbType + ".sql");
      FileUtil.delete(sqlFile);
      mergeSQL(tempDir,sqlFile);
    }
 else {
      File outputDir=new File(_outputDir,"output");
      FileUtil.deltree(outputDir);
      if (!tempDir.renameTo(outputDir)) {
        FileUtil.copyDirectory(tempDir,outputDir);
      }
    }
  }
  finally {
    FileUtil.deltree(tempDir);
  }
  StringBundler sb=new StringBundler();
  for (  String key : properties.stringPropertyNames()) {
    if (!key.startsWith("sample.sql")) {
      continue;
    }
    String value=properties.getProperty(key);
    sb.append(key);
    sb.append(StringPool.EQUAL);
    sb.append(value);
    sb.append(StringPool.NEW_LINE);
  }
  FileUtil.write(new File(_outputDir,"benchmarks-actual.properties"),sb.toString());
}
