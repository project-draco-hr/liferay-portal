{
  _dbType=properties.getProperty("sample.sql.db.type");
  _optimizeBufferSize=GetterUtil.getInteger(properties.getProperty("sample.sql.optimize.buffer.size"));
  _outputDir=properties.getProperty("sample.sql.output.dir");
  _outputMerge=GetterUtil.getBoolean(properties.getProperty("sample.sql.output.merge"));
  _dataFactory=new DataFactory(properties);
  FileUtil.delete(_outputDir + "/sample-" + _dbType+ ".sql");
  FileUtil.deltree(_outputDir + "/output");
  _tempDir=new File(_outputDir,"temp");
  _endSQLFileName="others.sql";
  _tempDir.mkdirs();
  CharPipe charPipe=generateSQL();
  try {
    compressSQL(charPipe.getReader());
    mergeSQL();
  }
  finally {
    FileUtil.deltree(_tempDir);
  }
  StringBundler sb=new StringBundler();
  for (  String key : properties.stringPropertyNames()) {
    if (!key.startsWith("sample.sql")) {
      continue;
    }
    String value=properties.getProperty(key);
    sb.append(key);
    sb.append(StringPool.EQUAL);
    sb.append(value);
    sb.append(StringPool.NEW_LINE);
  }
  FileUtil.write(new File(_outputDir,"benchmarks-actual.properties"),sb.toString());
}
