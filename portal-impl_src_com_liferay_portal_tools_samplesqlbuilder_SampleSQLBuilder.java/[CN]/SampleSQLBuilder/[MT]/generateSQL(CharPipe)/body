{
  final Writer writer=charPipe.getWriter();
  Thread thread=new Thread(){
    @Override public void run(){
      try {
        _writer=new UnsyncTeeWriter(writer,new FileWriter(_outputDir + "/sample.sql"));
        createSample();
        _writer.close();
        charPipe.close();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    protected void createSample() throws Exception {
      Map<String,Object> context=getContext();
      Writer blogsEntriesCsvWriter=getWriter("blogs_entries.csv");
      Writer dlCsvWriter=getWriter("dl.csv");
      Writer mbMessagesCsvWriter=getWriter("mb_messages.csv");
      Writer usersCsvWriter=getWriter("users.csv");
      Writer wikiPagesCsvWriter=getWriter("wiki_pages.csv");
      put(context,"blogsEntriesCsvWriter",blogsEntriesCsvWriter);
      put(context,"dlCsvWriter",dlCsvWriter);
      put(context,"mbMessagesCsvWriter",mbMessagesCsvWriter);
      put(context,"usersCsvWriter",usersCsvWriter);
      put(context,"wikiPagesCsvWriter",wikiPagesCsvWriter);
      processTemplate(_tplSample,context);
      blogsEntriesCsvWriter.flush();
      dlCsvWriter.flush();
      mbMessagesCsvWriter.flush();
      usersCsvWriter.flush();
      wikiPagesCsvWriter.flush();
    }
    protected Writer getWriter(    String fileName) throws Exception {
      return new FileWriter(new File(_outputDir + "/" + fileName));
    }
  }
;
  thread.start();
}
