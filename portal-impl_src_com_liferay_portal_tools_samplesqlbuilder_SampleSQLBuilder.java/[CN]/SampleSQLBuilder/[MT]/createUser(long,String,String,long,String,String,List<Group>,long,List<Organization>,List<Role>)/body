{
  String userName=firstName + StringPool.SPACE + lastName;
  if (Validator.isNull(firstName) && Validator.isNull(lastName)) {
    userName=StringPool.BLANK;
  }
  String userUuid=PortalUUIDUtil.generate();
  Map<String,Object> context=getContext();
  put(context,"contactId",contactId);
  put(context,"emailAddress",emailAddress);
  put(context,"firstName",firstName);
  if (groupId > 0) {
    put(context,"groupId",groupId);
  }
  put(context,"lastName",lastName);
  put(context,"screenName",screenName);
  put(context,"userClassNameId",_userClassNameId);
  put(context,"userGroups",userGroups);
  put(context,"userId",userId);
  put(context,"userName",userName);
  put(context,"userOrganizations",userOrganizations);
  put(context,"userRoles",userRoles);
  put(context,"userUuid",userUuid);
  processTemplate(_tplUser,context);
  write(StringPool.NEW_LINE);
  long resourceId=_resourceCounter.get();
  createResource(_userIndividualResourceCodeId,String.valueOf(userId),resourceId);
  write(StringPool.NEW_LINE);
  createPermission(ActionKeys.DELETE,_permissionCounter.get(),resourceId);
  createPermission(ActionKeys.IMPERSONATE,_permissionCounter.get(),resourceId);
  createPermission(ActionKeys.PERMISSIONS,_permissionCounter.get(),resourceId);
  createPermission(ActionKeys.UPDATE,_permissionCounter.get(),resourceId);
  createPermission(ActionKeys.VIEW,_permissionCounter.get(),resourceId);
}
