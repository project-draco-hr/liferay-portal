{
  try {
    NewJournalContentCreationStrategy creationStrategy=PortletDataHandlerUtils.getContentCreationStrategy();
    SAXReader reader=SAXReaderFactory.getInstance();
    XStream xStream=new XStream();
    Document doc=reader.read(new StringReader(data));
    Element root=doc.getRootElement();
    Element el=root.element("articles").element("list");
    Document tempDoc=DocumentHelper.createDocument();
    tempDoc.content().add(el.createCopy());
    List articles=(List)xStream.fromXML(XMLFormatter.toString(tempDoc));
    Iterator itr=articles.iterator();
    while (itr.hasNext()) {
      JournalArticle article=(JournalArticle)itr.next();
      article.setGroupId(groupId);
      JournalArticlePK pk=article.getPrimaryKey();
      boolean exists=(JournalArticleUtil.fetchByPrimaryKey(pk) != null);
      if (!exists) {
        article.setNew(true);
        String authorId=creationStrategy.getAuthorUserId(companyId,groupId,article);
        if (authorId != null) {
          article.setUserId(authorId);
          article.setUserName(creationStrategy.getAuthorUserName(companyId,groupId,article));
        }
        String approvedById=creationStrategy.getApprovalUserId(companyId,groupId,article);
        if (approvedById != null) {
          article.setApprovedByUserId(approvedById);
          article.setApprovedByUserName(creationStrategy.getApprovalUserName(companyId,groupId,article));
          article.setApproved(true);
        }
 else {
          article.setApprovedByUserId(null);
          article.setApprovedByUserName(null);
          article.setApproved(false);
        }
        article=JournalArticleUtil.update(article,true);
        JournalArticleLocalServiceUtil.addArticleResources(article,creationStrategy.addCommunityPermissions(companyId,groupId,article),creationStrategy.addGuestPermissions(companyId,groupId,article));
      }
    }
    el=root.element("structures").element("list");
    tempDoc=DocumentHelper.createDocument();
    tempDoc.content().add(el.createCopy());
    List structures=(List)xStream.fromXML(XMLFormatter.toString(tempDoc));
    itr=structures.iterator();
    while (itr.hasNext()) {
      JournalStructure structure=(JournalStructure)itr.next();
      structure.setGroupId(groupId);
      JournalStructurePK pk=structure.getPrimaryKey();
      boolean exists=(JournalStructureUtil.fetchByPrimaryKey(pk) != null);
      if (!exists) {
        structure.setNew(true);
        String authorId=creationStrategy.getAuthorUserId(companyId,groupId,structure);
        if (authorId != null) {
          structure.setUserId(authorId);
          structure.setUserName(creationStrategy.getAuthorUserName(companyId,groupId,structure));
        }
        structure=JournalStructureUtil.update(structure,true);
        JournalStructureLocalServiceUtil.addStructureResources(structure,creationStrategy.addCommunityPermissions(companyId,groupId,structure),creationStrategy.addGuestPermissions(companyId,groupId,structure));
      }
    }
    el=root.element("templates").element("list");
    tempDoc=DocumentHelper.createDocument();
    tempDoc.content().add(el.createCopy());
    List templates=(List)xStream.fromXML(XMLFormatter.toString(tempDoc));
    itr=templates.iterator();
    while (itr.hasNext()) {
      JournalTemplate template=(JournalTemplate)itr.next();
      template.setGroupId(groupId);
      JournalTemplatePK pk=template.getPrimaryKey();
      boolean exists=(JournalTemplateUtil.fetchByPrimaryKey(pk) != null);
      if (!exists) {
        template.setNew(true);
        String authorId=creationStrategy.getAuthorUserId(companyId,groupId,template);
        if (authorId != null) {
          template.setUserId(authorId);
          template.setUserName(creationStrategy.getAuthorUserName(companyId,groupId,template));
        }
        template=JournalTemplateUtil.update(template,true);
        JournalTemplateLocalServiceUtil.addTemplateResources(template,creationStrategy.addCommunityPermissions(companyId,groupId,template),creationStrategy.addGuestPermissions(companyId,groupId,template));
      }
    }
    return null;
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
