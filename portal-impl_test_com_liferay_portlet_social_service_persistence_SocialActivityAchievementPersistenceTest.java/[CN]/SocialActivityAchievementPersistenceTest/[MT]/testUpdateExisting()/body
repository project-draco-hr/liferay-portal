{
  long pk=nextLong();
  SocialActivityAchievement newSocialActivityAchievement=_persistence.create(pk);
  newSocialActivityAchievement.setGroupId(nextLong());
  newSocialActivityAchievement.setCompanyId(nextLong());
  newSocialActivityAchievement.setUserId(nextLong());
  newSocialActivityAchievement.setCreateDate(nextLong());
  newSocialActivityAchievement.setName(randomString());
  newSocialActivityAchievement.setFirstInGroup(randomBoolean());
  _persistence.update(newSocialActivityAchievement,false);
  SocialActivityAchievement existingSocialActivityAchievement=_persistence.findByPrimaryKey(newSocialActivityAchievement.getPrimaryKey());
  assertEquals(existingSocialActivityAchievement.getActivityAchievementId(),newSocialActivityAchievement.getActivityAchievementId());
  assertEquals(existingSocialActivityAchievement.getGroupId(),newSocialActivityAchievement.getGroupId());
  assertEquals(existingSocialActivityAchievement.getCompanyId(),newSocialActivityAchievement.getCompanyId());
  assertEquals(existingSocialActivityAchievement.getUserId(),newSocialActivityAchievement.getUserId());
  assertEquals(existingSocialActivityAchievement.getCreateDate(),newSocialActivityAchievement.getCreateDate());
  assertEquals(existingSocialActivityAchievement.getName(),newSocialActivityAchievement.getName());
  assertEquals(existingSocialActivityAchievement.getFirstInGroup(),newSocialActivityAchievement.getFirstInGroup());
}
