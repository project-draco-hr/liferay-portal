{
  long userId=portletDataContext.getUserId(ruleGroupInstance.getUserUuid());
  StagedModelDataHandlerUtil.importReferenceStagedModel(portletDataContext,ruleGroupInstance,MDRRuleGroup.class,ruleGroupInstance.getRuleGroupId());
  Map<Long,Long> ruleGroupIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(MDRRuleGroup.class);
  Long ruleGroupId=MapUtil.getLong(ruleGroupIds,ruleGroupInstance.getRuleGroupId(),ruleGroupInstance.getRuleGroupId());
  long classPK=0;
  Element ruleGroupInstanceElement=portletDataContext.getImportDataStagedModelElement(ruleGroupInstance);
  String layoutUuid=ruleGroupInstanceElement.attributeValue("layout-uuid");
  try {
    if (Validator.isNotNull(layoutUuid)) {
      Layout layout=LayoutLocalServiceUtil.getLayoutByUuidAndGroupId(layoutUuid,portletDataContext.getScopeGroupId(),portletDataContext.isPrivateLayout());
      classPK=layout.getPrimaryKey();
    }
 else {
      LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(portletDataContext.getScopeGroupId(),portletDataContext.isPrivateLayout());
      classPK=layoutSet.getLayoutSetId();
    }
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      StringBundler sb=new StringBundler(5);
      sb.append("Layout ");
      sb.append(layoutUuid);
      sb.append(" is missing for rule group instance ");
      sb.append(ruleGroupInstance.getRuleGroupInstanceId());
      sb.append(", skipping this rule group instance.");
      _log.warn(sb.toString());
    }
    return;
  }
  ServiceContext serviceContext=portletDataContext.createServiceContext(ruleGroupInstance);
  serviceContext.setUserId(userId);
  MDRRuleGroupInstance importedRuleGroupInstance=null;
  if (portletDataContext.isDataStrategyMirror()) {
    MDRRuleGroupInstance existingMDRRuleGroupInstance=fetchStagedModelByUuidAndGroupId(ruleGroupInstance.getUuid(),portletDataContext.getScopeGroupId());
    if (existingMDRRuleGroupInstance == null) {
      serviceContext.setUuid(ruleGroupInstance.getUuid());
      importedRuleGroupInstance=MDRRuleGroupInstanceLocalServiceUtil.addRuleGroupInstance(portletDataContext.getScopeGroupId(),ruleGroupInstance.getClassName(),classPK,ruleGroupId,ruleGroupInstance.getPriority(),serviceContext);
    }
 else {
      importedRuleGroupInstance=MDRRuleGroupInstanceLocalServiceUtil.updateRuleGroupInstance(existingMDRRuleGroupInstance.getRuleGroupInstanceId(),ruleGroupInstance.getPriority());
    }
  }
 else {
    importedRuleGroupInstance=MDRRuleGroupInstanceLocalServiceUtil.addRuleGroupInstance(portletDataContext.getScopeGroupId(),ruleGroupInstance.getClassName(),classPK,ruleGroupId,ruleGroupInstance.getPriority(),serviceContext);
  }
  portletDataContext.importClassedModel(ruleGroupInstance,importedRuleGroupInstance);
}
