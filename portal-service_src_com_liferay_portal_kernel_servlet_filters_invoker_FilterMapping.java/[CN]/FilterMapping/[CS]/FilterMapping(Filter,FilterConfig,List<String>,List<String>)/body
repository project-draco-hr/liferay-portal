{
  _filter=filter;
  _urlPatterns=urlPatterns;
  String urlRegexPattern=GetterUtil.getString(filterConfig.getInitParameter("url-regex-pattern"));
  if (Validator.isNotNull(urlRegexPattern)) {
    _urlRegexPattern=Pattern.compile(urlRegexPattern);
  }
 else {
    _urlRegexPattern=null;
  }
  String urlRegexIgnorePattern=GetterUtil.getString(filterConfig.getInitParameter("url-regex-ignore-pattern"));
  if (Validator.isNotNull(urlRegexIgnorePattern)) {
    _urlRegexIgnorePattern=Pattern.compile(urlRegexIgnorePattern);
  }
 else {
    _urlRegexIgnorePattern=null;
  }
  boolean dispatcherError=false;
  boolean dispatcherForward=false;
  boolean dispatcherInclude=false;
  boolean dispatcherRequest=false;
  for (  String dispatcher : dispatchers) {
switch (dispatcher) {
case "ERROR":
      dispatcherError=true;
    break;
case "FORWARD":
  dispatcherForward=true;
break;
case "INCLUDE":
dispatcherInclude=true;
break;
case "REQUEST":
dispatcherRequest=true;
break;
default :
throw new IllegalArgumentException("Invalid dispatcher " + dispatcher);
}
}
_dispatcherError=dispatcherError;
_dispatcherForward=dispatcherForward;
_dispatcherInclude=dispatcherInclude;
if (!_dispatcherError && !_dispatcherForward && !_dispatcherInclude&& !dispatcherRequest) {
dispatcherRequest=true;
}
_dispatcherRequest=dispatcherRequest;
}
