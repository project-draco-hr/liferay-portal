{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long roleId=ParamUtil.getLong(actionRequest,"roleId");
  Role role=RoleLocalServiceUtil.getRole(roleId);
  String roleName=role.getName();
  if (roleName.equals(RoleConstants.ADMINISTRATOR) || roleName.equals(RoleConstants.ORGANIZATION_ADMINISTRATOR) || roleName.equals(RoleConstants.ORGANIZATION_OWNER)|| roleName.equals(RoleConstants.OWNER)|| roleName.equals(RoleConstants.SITE_ADMINISTRATOR)|| roleName.equals(RoleConstants.SITE_OWNER)) {
    throw new RolePermissionsException(roleName);
  }
  String portletResource=ParamUtil.getString(actionRequest,"portletResource");
  String[] relatedPortletResources=StringUtil.split(ParamUtil.getString(actionRequest,"relatedPortletResources"));
  String[] modelResources=StringUtil.split(ParamUtil.getString(actionRequest,"modelResources"));
  Map<String,List<String>> resourceActionsMap=new HashMap<String,List<String>>();
  if (Validator.isNotNull(portletResource)) {
    resourceActionsMap.put(portletResource,ResourceActionsUtil.getResourceActions(portletResource,null));
  }
  for (  String relatedPortletResource : relatedPortletResources) {
    resourceActionsMap.put(relatedPortletResource,ResourceActionsUtil.getResourceActions(relatedPortletResource,null));
  }
  for (  String modelResource : modelResources) {
    resourceActionsMap.put(modelResource,ResourceActionsUtil.getResourceActions(null,modelResource));
  }
  int rootResourceScope=ResourceConstants.SCOPE_COMPANY;
  String[] rootResourceGroupIds=null;
  String[] selectedTargets=StringUtil.split(ParamUtil.getString(actionRequest,"selectedTargets"));
  for (  Map.Entry<String,List<String>> entry : resourceActionsMap.entrySet()) {
    String selResource=entry.getKey();
    List<String> actions=entry.getValue();
    actions=ListUtil.sort(actions,new ActionComparator(themeDisplay.getLocale()));
    for (    String actionId : actions) {
      String target=selResource + actionId;
      boolean selected=ArrayUtil.contains(selectedTargets,target);
      String[] groupIds=StringUtil.split(ParamUtil.getString(actionRequest,"groupIds" + target));
      groupIds=ArrayUtil.distinct(groupIds);
      int scope=ResourceConstants.SCOPE_COMPANY;
      if ((role.getType() == RoleConstants.TYPE_ORGANIZATION) || (role.getType() == RoleConstants.TYPE_PROVIDER) || (role.getType() == RoleConstants.TYPE_SITE)) {
        scope=ResourceConstants.SCOPE_GROUP_TEMPLATE;
      }
 else {
        if (groupIds.length > 0) {
          scope=ResourceConstants.SCOPE_GROUP;
        }
      }
      if (ResourceBlockLocalServiceUtil.isSupported(selResource)) {
        updateActions_Blocks(role,themeDisplay.getScopeGroupId(),selResource,actionId,selected,scope,groupIds);
      }
 else {
        updateAction(role,themeDisplay.getScopeGroupId(),selResource,actionId,selected,scope,groupIds);
      }
      if (selected && actionId.equals(ActionKeys.ACCESS_IN_CONTROL_PANEL)) {
        updateViewControlPanelPermission(role,themeDisplay.getScopeGroupId(),selResource,scope,groupIds);
        rootResourceScope=scope;
        rootResourceGroupIds=groupIds;
      }
    }
  }
  if (rootResourceGroupIds != null) {
    updateViewRootResourcePermission(role,themeDisplay.getScopeGroupId(),portletResource,rootResourceScope,rootResourceGroupIds);
  }
  SessionMessages.add(actionRequest,"permissionsUpdated");
  String redirect=PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest,"redirect"));
  if (Validator.isNotNull(redirect)) {
    actionResponse.sendRedirect(redirect);
  }
}
