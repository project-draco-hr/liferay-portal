{
  User user=userPersistence.fetchByPrimaryKey(userId);
  if (user.isDefaultUser()) {
    return Collections.emptyList();
  }
  List<Group> userSiteGroups=new ArrayList<>();
  int start=QueryUtil.ALL_POS;
  int end=QueryUtil.ALL_POS;
  if (max != QueryUtil.ALL_POS) {
    start=0;
    end=max;
  }
  if ((classNames == null) || ArrayUtil.contains(classNames,Company.class.getName())) {
    userSiteGroups.addAll(groupLocalService.search(user.getCompanyId(),new long[]{classNameLocalService.getClassNameId(Company.class)},null,new LinkedHashMap<String,Object>(),start,end));
  }
  if ((classNames == null) || ArrayUtil.contains(classNames,Group.class.getName())) {
    LinkedHashMap<String,Object> groupParams=new LinkedHashMap<>();
    groupParams.put("active",true);
    groupParams.put("usersGroups",userId);
    userSiteGroups.addAll(groupLocalService.search(user.getCompanyId(),null,groupParams,start,end));
  }
  if ((classNames == null) || ArrayUtil.contains(classNames,Organization.class.getName())) {
    List<Organization> userOrgs=organizationLocalService.getOrganizations(userId,start,end,null);
    for (    Organization organization : userOrgs) {
      if (!organization.hasPrivateLayouts() && !organization.hasPublicLayouts()) {
        userSiteGroups.remove(organization.getGroup());
      }
 else {
        userSiteGroups.add(0,organization.getGroup());
      }
      if (!PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {
        for (        Organization ancestorOrganization : organization.getAncestors()) {
          if (!ancestorOrganization.hasPrivateLayouts() && !ancestorOrganization.hasPublicLayouts()) {
            continue;
          }
          userSiteGroups.add(0,ancestorOrganization.getGroup());
        }
      }
    }
  }
  if ((classNames == null) || ArrayUtil.contains(classNames,User.class.getName())) {
    if (PropsValues.LAYOUT_USER_PRIVATE_LAYOUTS_ENABLED || PropsValues.LAYOUT_USER_PUBLIC_LAYOUTS_ENABLED) {
      Group userGroup=user.getGroup();
      userSiteGroups.add(0,userGroup);
    }
  }
  PermissionChecker permissionChecker=getPermissionChecker();
  if (permissionChecker.getUserId() != userId) {
    try {
      permissionChecker=PermissionCheckerFactoryUtil.create(user);
    }
 catch (    Exception e) {
      throw new PrincipalException(e);
    }
  }
  if (includeControlPanel && PortalPermissionUtil.contains(permissionChecker,ActionKeys.VIEW_CONTROL_PANEL)) {
    Group controlPanelGroup=groupLocalService.getGroup(user.getCompanyId(),GroupConstants.CONTROL_PANEL);
    userSiteGroups.add(0,controlPanelGroup);
  }
  return Collections.unmodifiableList(ListUtil.subList(ListUtil.unique(userSiteGroups),start,end));
}
