{
  File classpathFile=new File(projectDirName + "/.classpath");
  if (!javaProject) {
    classpathFile.delete();
    return;
  }
  List<String> portalJars=ListUtil.toList(dependencyJars);
  portalJars.add("commons-logging.jar");
  portalJars.add("log4j.jar");
  String libDirPath=StringUtil.replace(libDir.getPath(),StringPool.BACK_SLASH,StringPool.SLASH);
  if (libDirPath.contains("/ext/")) {
    portalJars.add("struts.jar");
  }
  portalJars=ListUtil.sort(portalJars);
  String[] customJarsArray=libDir.list(new GlobFilenameFilter("*.jar"));
  List<String> customJars=null;
  if (customJarsArray != null) {
    customJars=ListUtil.toList(customJarsArray);
    for (    String jar : portalJars) {
      customJars.remove(jar);
    }
    customJars.remove(projectName + "-service.jar");
    customJars.remove("util-bridges.jar");
    customJars.remove("util-java.jar");
    customJars.remove("util-taglib.jar");
    Collections.sort(customJars);
  }
 else {
    customJars=new ArrayList<String>();
  }
  StringBundler sb=new StringBundler();
  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n");
  sb.append("<classpath>\n");
  for (  String sourceDirName : _SOURCE_DIR_NAMES) {
    if (_fileUtil.exists(projectDirName + "/" + sourceDirName)) {
      sb.append("\t<classpathentry excluding=\"**/.svn/**|.svn/\" ");
      sb.append("kind=\"src\" path=\"" + sourceDirName + "\" />\n");
    }
  }
  sb.append("\t<classpathentry kind=\"src\" path=\"/portal\" />\n");
  sb.append("\t<classpathentry kind=\"con\" ");
  sb.append("path=\"org.eclipse.jdt.launching.JRE_CONTAINER\" />\n");
  if (_fileUtil.exists(projectDirName + "/test")) {
    sb.append("\t<classpathentry excluding=\"**/.svn/**|.svn/\" ");
    sb.append("kind=\"src\" path=\"test\" />\n");
    addClasspathEntry(sb,"/portal/lib/development/junit.jar");
    addClasspathEntry(sb,"/portal/lib/portal/commons-io.jar");
  }
  addClasspathEntry(sb,"/portal/lib/development/activation.jar");
  addClasspathEntry(sb,"/portal/lib/development/annotations.jar");
  addClasspathEntry(sb,"/portal/lib/development/jsp-api.jar");
  addClasspathEntry(sb,"/portal/lib/development/mail.jar");
  addClasspathEntry(sb,"/portal/lib/development/servlet-api.jar");
  addClasspathEntry(sb,"/portal/lib/global/portlet.jar");
  for (  String jar : portalJars) {
    addClasspathEntry(sb,"/portal/lib/portal/" + jar);
  }
  addClasspathEntry(sb,"/portal/portal-service/portal-service.jar");
  addClasspathEntry(sb,"/portal/util-bridges/util-bridges.jar");
  addClasspathEntry(sb,"/portal/util-java/util-java.jar");
  addClasspathEntry(sb,"/portal/util-taglib/util-taglib.jar");
  if (libDirPath.contains("/ext/")) {
    for (    String dirName : new String[]{"global","portal"}) {
      File file=new File(libDirPath + "/../ext-lib/" + dirName);
      List<String> jars=ListUtil.toList(file.list(new GlobFilenameFilter("*.jar")));
      for (      String jar : jars) {
        addClasspathEntry(sb,"docroot/WEB-INF/ext-lib/" + dirName + "/"+ jar);
      }
    }
  }
  for (  String jar : customJars) {
    if (libDirPath.contains("/tmp/WEB-INF/lib")) {
      addClasspathEntry(sb,"tmp/WEB-INF/lib/" + jar);
    }
 else {
      addClasspathEntry(sb,"docroot/WEB-INF/lib/" + jar);
    }
  }
  sb.append("\t<classpathentry kind=\"output\" path=\"bin\" />\n");
  sb.append("</classpath>");
  System.out.println("Updating " + classpathFile);
  String content=StringUtil.replace(sb.toString(),"\"/portal","\"/portal-" + _BRANCH);
  _fileUtil.write(classpathFile,content);
}
