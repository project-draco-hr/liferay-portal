{
  String projectPath=projectDir.getCanonicalPath();
  String projectName=StringUtil.extractLast(projectPath,File.separator);
  StringBuilder sb=new StringBuilder();
  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n");
  sb.append("<projectDescription>\n");
  sb.append("\t<name>" + projectName + "</name>\n");
  sb.append("\t<comment></comment>\n");
  sb.append("\t<projects></projects>\n");
  sb.append("\t<buildSpec>\n");
  sb.append("\t\t<buildCommand>\n");
  sb.append("\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n");
  sb.append("\t\t\t<arguments></arguments>\n");
  sb.append("\t\t</buildCommand>\n");
  sb.append("\t</buildSpec>\n");
  sb.append("\t<natures>\n");
  sb.append("\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n");
  sb.append("\t</natures>\n");
  sb.append("</projectDescription>");
  File projectFile=new File(projectPath + "/.project");
  System.out.println("Updating " + projectFile);
  _fileUtil.write(projectFile,sb.toString());
  List<String> portalJars=new ArrayList<String>(dependencyJars);
  portalJars.add("commons-logging.jar");
  portalJars.add("log4j.jar");
  Collections.sort(portalJars);
  List<String> customJars=ListUtil.toList(libDir.list(new GlobFilenameFilter("*.jar")));
  Collections.sort(customJars);
  for (  String jar : portalJars) {
    customJars.remove(jar);
  }
  customJars.remove("util-bridges.jar");
  customJars.remove("util-java.jar");
  customJars.remove("util-taglib.jar");
  sb=new StringBuilder();
  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n");
  sb.append("<classpath>\n");
  sb.append("\t<classpathentry excluding=\"**/.svn/**|.svn/\" ");
  sb.append("kind=\"src\" path=\"docroot/WEB-INF/src\" />\n");
  sb.append("\t<classpathentry kind=\"src\" path=\"/portal\" />\n");
  sb.append("\t<classpathentry kind=\"con\" ");
  sb.append("path=\"org.eclipse.jdt.launching.JRE_CONTAINER\" />\n");
  _addClasspathEntry(sb,"/portal/lib/development/mail.jar");
  _addClasspathEntry(sb,"/portal/lib/development/servlet.jar");
  _addClasspathEntry(sb,"/portal/lib/global/container.jar");
  _addClasspathEntry(sb,"/portal/lib/global/portlet-container.jar");
  _addClasspathEntry(sb,"/portal/lib/global/portlet.jar");
  for (  String jar : portalJars) {
    _addClasspathEntry(sb,"/portal/lib/portal/" + jar);
  }
  _addClasspathEntry(sb,"/portal/portal-kernel/portal-kernel.jar");
  _addClasspathEntry(sb,"/portal/portal-service/portal-service.jar");
  _addClasspathEntry(sb,"/portal/util-bridges/util-bridges.jar");
  _addClasspathEntry(sb,"/portal/util-java/util-java.jar");
  _addClasspathEntry(sb,"/portal/util-taglib/util-taglib.jar");
  for (  String jar : customJars) {
    _addClasspathEntry(sb,"docroot/WEB-INF/lib/" + jar);
  }
  sb.append("\t<classpathentry kind=\"output\" path=\"bin\" />\n");
  sb.append("</classpath>");
  File classpathFile=new File(projectPath + "/.classpath");
  System.out.println("Updating " + classpathFile);
  _fileUtil.write(classpathFile,sb.toString());
  if (_svn) {
    try {
      _exec(_SVN_INFO + projectFile);
    }
 catch (    Exception e) {
      _exec(_SVN_ADD + projectFile);
    }
    try {
      _exec(_SVN_INFO + classpathFile);
    }
 catch (    Exception e) {
      _exec(_SVN_ADD + classpathFile);
    }
    _exec(_SVN_SET_IGNORES + "bin " + projectPath);
  }
}
