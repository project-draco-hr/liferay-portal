{
  File classpathFile=new File(projectDirName + "/.classpath");
  if (!javaProject) {
    classpathFile.delete();
    return;
  }
  Set<String> globalJars=new LinkedHashSet<String>();
  List<String> portalJars=new ArrayList<String>();
  Set<String> extGlobalJars=new LinkedHashSet<String>();
  Set<String> extPortalJars=new LinkedHashSet<String>();
  String libDirPath=StringUtil.replace(libDir.getPath(),StringPool.BACK_SLASH,StringPool.SLASH);
  if (libDirPath.contains("/ext/")) {
    FilenameFilter filenameFilter=new GlobFilenameFilter("*.jar");
    for (    String dirName : new String[]{"global","portal"}) {
      File file=new File(libDirPath + "/../ext-lib/" + dirName);
      List<String> jars=ListUtil.toList(file.list(filenameFilter));
      if (dirName.equals("global")) {
        extGlobalJars.addAll(ListUtil.sort(jars));
        File dir=new File(PropsValues.LIFERAY_LIB_GLOBAL_DIR);
        String[] fileNames=dir.list(filenameFilter);
        globalJars.addAll(ListUtil.sort(ListUtil.toList(fileNames)));
        globalJars.removeAll(extGlobalJars);
      }
 else       if (dirName.equals("portal")) {
        extPortalJars.addAll(ListUtil.sort(jars));
        File dir=new File(PropsValues.LIFERAY_LIB_PORTAL_DIR);
        String[] fileNames=dir.list(filenameFilter);
        portalJars.addAll(ListUtil.sort(ListUtil.toList(fileNames)));
        portalJars.removeAll(extPortalJars);
      }
    }
  }
 else {
    globalJars.add("portlet.jar");
    portalJars.addAll(dependencyJars);
    portalJars.add("bnd.jar");
    portalJars.add("commons-logging.jar");
    portalJars.add("log4j.jar");
    portalJars=ListUtil.unique(portalJars);
    Collections.sort(portalJars);
  }
  String[] customJarsArray=libDir.list(new GlobFilenameFilter("*.jar"));
  List<String> customJars=null;
  if (customJarsArray != null) {
    customJars=ListUtil.toList(customJarsArray);
    for (    String jar : portalJars) {
      customJars.remove(jar);
    }
    customJars.remove(projectName + "-service.jar");
    customJars.remove("util-bridges.jar");
    customJars.remove("util-java.jar");
    customJars.remove("util-taglib.jar");
    Collections.sort(customJars);
  }
 else {
    customJars=new ArrayList<String>();
  }
  StringBundler sb=new StringBundler();
  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n");
  sb.append("<classpath>\n");
  for (  String sourceDirName : _SOURCE_DIR_NAMES) {
    if (_fileUtil.exists(projectDirName + "/" + sourceDirName)) {
      sb.append("\t<classpathentry excluding=\"**/.svn/**|.svn/\" ");
      sb.append("kind=\"src\" path=\"");
      sb.append(sourceDirName);
      sb.append("\" />\n");
    }
  }
  sb.append("\t<classpathentry kind=\"src\" path=\"/portal\" />\n");
  sb.append("\t<classpathentry kind=\"con\" ");
  sb.append("path=\"org.eclipse.jdt.launching.JRE_CONTAINER\" />\n");
  boolean addJunitJars=false;
  for (  String testType : _TEST_TYPES) {
    String testFolder="test/" + testType;
    if (_fileUtil.exists(projectDirName + "/" + testFolder)) {
      addJunitJars=true;
      sb.append("\t<classpathentry excluding=\"**/.svn/**|.svn/\" ");
      sb.append("kind=\"src\" path=\"");
      sb.append(testFolder);
      sb.append("\" />\n");
    }
  }
  if (addJunitJars) {
    addClasspathEntry(sb,"/portal/lib/development/junit.jar");
    addClasspathEntry(sb,"/portal/lib/development/mockito.jar");
    addClasspathEntry(sb,"/portal/lib/development/powermock-mockito.jar");
    addClasspathEntry(sb,"/portal/lib/development/spring-test.jar");
    portalJars.add("commons-io.jar");
    portalJars.add("commons-lang.jar");
  }
  addClasspathEntry(sb,"/portal/lib/development/activation.jar");
  addClasspathEntry(sb,"/portal/lib/development/annotations.jar");
  addClasspathEntry(sb,"/portal/lib/development/jsp-api.jar");
  addClasspathEntry(sb,"/portal/lib/development/mail.jar");
  addClasspathEntry(sb,"/portal/lib/development/servlet-api.jar");
  Map<String,String> attributes=new HashMap<String,String>();
  if (libDirPath.contains("/ext/")) {
    attributes.put("optional","true");
  }
  for (  String jar : globalJars) {
    addClasspathEntry(sb,"/portal/lib/global/" + jar,attributes);
  }
  portalJars=ListUtil.unique(portalJars);
  Collections.sort(portalJars);
  for (  String jar : portalJars) {
    if (!jar.equals("util-slf4j.jar")) {
      addClasspathEntry(sb,"/portal/lib/portal/" + jar,attributes);
    }
  }
  addClasspathEntry(sb,"/portal/portal-service/portal-service.jar");
  addClasspathEntry(sb,"/portal/util-bridges/util-bridges.jar");
  addClasspathEntry(sb,"/portal/util-java/util-java.jar");
  if (portalJars.contains("util-slf4j.jar")) {
    addClasspathEntry(sb,"/portal/util-slf4j/util-slf4j.jar");
  }
  addClasspathEntry(sb,"/portal/util-taglib/util-taglib.jar");
  for (  String jar : extGlobalJars) {
    addClasspathEntry(sb,"docroot/WEB-INF/ext-lib/global/" + jar);
  }
  for (  String jar : extPortalJars) {
    addClasspathEntry(sb,"docroot/WEB-INF/ext-lib/portal/" + jar);
  }
  for (  String jar : customJars) {
    if (libDirPath.contains("/tmp/WEB-INF/lib")) {
      addClasspathEntry(sb,"tmp/WEB-INF/lib/" + jar);
    }
 else     if (libDirPath.contains("/docroot/WEB-INF/lib")) {
      addClasspathEntry(sb,"docroot/WEB-INF/lib/" + jar);
    }
 else {
      addClasspathEntry(sb,"lib/" + jar);
    }
  }
  File ivyXmlFile=new File(projectDirName,"ivy.xml");
  if (ivyXmlFile.exists()) {
    String content=_fileUtil.read(ivyXmlFile);
    if (content.contains("arquillian-junit-container")) {
      String ivyDirName=".ivy";
      for (int i=0; i < 10; i++) {
        if (_fileUtil.exists(ivyDirName)) {
          break;
        }
        ivyDirName="../" + ivyDirName;
      }
      addIvyCacheJar(sb,ivyDirName,"com.liferay.arquillian" + "/arquillian-deployment-generator-bnd");
      addIvyCacheJar(sb,ivyDirName,"org.apache.felix/org.apache.felix.framework");
      addIvyCacheJar(sb,ivyDirName,"org.jboss.arquillian.junit/arquillian-junit-core");
      addIvyCacheJar(sb,ivyDirName,"org.jboss.arquillian.test/arquillian-test-api");
    }
  }
  sb.append("\t<classpathentry kind=\"output\" path=\"bin\" />\n");
  sb.append("</classpath>");
  System.out.println("Updating " + classpathFile);
  String content=StringUtil.replace(sb.toString(),"\"/portal","\"/portal-" + _BRANCH);
  _fileUtil.write(classpathFile,content);
}
