{
  String libDirPath=libDir.getPath();
  libDirPath=StringUtil.replace(libDirPath,StringPool.BACK_SLASH,StringPool.SLASH);
  String projectDirName=projectDir.getCanonicalPath();
  String projectName=StringUtil.extractLast(projectDirName,File.separator);
  boolean javaProject=false;
  if (FileUtil.exists(projectDirName + "/docroot/WEB-INF/src")) {
    javaProject=true;
  }
 else {
    System.out.println("Eclipse Java project will not be used because " + projectDirName + "/docroot/WEB-INF/src does not exist");
  }
  StringBundler sb=new StringBundler(17);
  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n");
  sb.append("<projectDescription>\n");
  sb.append("\t<name>");
  sb.append(projectName);
  sb.append("</name>\n");
  sb.append("\t<comment></comment>\n");
  sb.append("\t<projects></projects>\n");
  sb.append("\t<buildSpec>\n");
  if (javaProject) {
    sb.append("\t\t<buildCommand>\n");
    sb.append("\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n");
    sb.append("\t\t\t<arguments></arguments>\n");
    sb.append("\t\t</buildCommand>\n");
  }
  sb.append("\t</buildSpec>\n");
  sb.append("\t<natures>\n");
  if (javaProject) {
    sb.append("\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n");
  }
  sb.append("\t</natures>\n");
  sb.append("</projectDescription>");
  File projectFile=new File(projectDirName + "/.project");
  System.out.println("Updating " + projectFile);
  FileUtil.write(projectFile,sb.toString());
  File classpathFile=new File(projectDirName + "/.classpath");
  if (javaProject) {
    List<String> portalJars=ListUtil.toList(dependencyJars);
    portalJars.add("commons-logging.jar");
    portalJars.add("log4j.jar");
    portalJars=ListUtil.sort(portalJars);
    String[] customJarsArray=libDir.list(new GlobFilenameFilter("*.jar"));
    List<String> customJars=null;
    if (customJarsArray != null) {
      customJars=ListUtil.toList(customJarsArray);
      customJars=ListUtil.sort(customJars);
      for (      String jar : portalJars) {
        customJars.remove(jar);
      }
      customJars.remove(projectName + "-service.jar");
      customJars.remove("util-bridges.jar");
      customJars.remove("util-java.jar");
      customJars.remove("util-taglib.jar");
    }
 else {
      customJars=new ArrayList<String>();
    }
    sb=new StringBundler();
    sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n");
    sb.append("<classpath>\n");
    if (FileUtil.exists(projectDirName + "/docroot/WEB-INF/service")) {
      sb.append("\t<classpathentry excluding=\"**/.svn/**|.svn/\" ");
      sb.append("kind=\"src\" path=\"docroot/WEB-INF/service\" />\n");
    }
    sb.append("\t<classpathentry excluding=\"**/.svn/**|.svn/\" ");
    sb.append("kind=\"src\" path=\"docroot/WEB-INF/src\" />\n");
    sb.append("\t<classpathentry kind=\"src\" path=\"/portal\" />\n");
    sb.append("\t<classpathentry kind=\"con\" ");
    sb.append("path=\"org.eclipse.jdt.launching.JRE_CONTAINER\" />\n");
    if (FileUtil.exists(projectDirName + "/test")) {
      sb.append("\t<classpathentry excluding=\"**/.svn/**|.svn/\" ");
      sb.append("kind=\"src\" path=\"test\" />\n");
      _addClasspathEntry(sb,"/portal/lib/development/junit.jar");
      _addClasspathEntry(sb,"/portal/lib/portal/commons-io.jar");
    }
    _addClasspathEntry(sb,"/portal/lib/development/activation.jar");
    _addClasspathEntry(sb,"/portal/lib/development/annotations.jar");
    _addClasspathEntry(sb,"/portal/lib/development/jsp-api.jar");
    _addClasspathEntry(sb,"/portal/lib/development/mail.jar");
    _addClasspathEntry(sb,"/portal/lib/development/servlet-api.jar");
    _addClasspathEntry(sb,"/portal/lib/global/portlet.jar");
    for (    String jar : portalJars) {
      _addClasspathEntry(sb,"/portal/lib/portal/" + jar);
    }
    _addClasspathEntry(sb,"/portal/portal-service/portal-service.jar");
    _addClasspathEntry(sb,"/portal/util-bridges/util-bridges.jar");
    _addClasspathEntry(sb,"/portal/util-java/util-java.jar");
    _addClasspathEntry(sb,"/portal/util-taglib/util-taglib.jar");
    for (    String jar : customJars) {
      if (libDirPath.contains("/tmp/WEB-INF/lib")) {
        _addClasspathEntry(sb,"tmp/WEB-INF/lib/" + jar);
      }
 else {
        _addClasspathEntry(sb,"docroot/WEB-INF/lib/" + jar);
      }
    }
    sb.append("\t<classpathentry kind=\"output\" path=\"bin\" />\n");
    sb.append("</classpath>");
    System.out.println("Updating " + classpathFile);
    String content=sb.toString();
    content=StringUtil.replace(content,"\"/portal","\"/portal-trunk");
    FileUtil.write(classpathFile,content);
  }
 else {
    classpathFile.delete();
  }
  if (_svn) {
    String projectFileName="\"" + projectFile + "\"";
    try {
      _exec(_SVN_INFO + projectFileName);
    }
 catch (    Exception e) {
      _exec(_SVN_ADD + projectFileName);
    }
    if (javaProject) {
      String classpathFileName="\"" + classpathFile + "\"";
      try {
        _exec(_SVN_INFO + classpathFileName);
      }
 catch (      Exception e) {
        _exec(_SVN_ADD + classpathFileName);
      }
    }
    File tempFile=File.createTempFile("svn-ignores-",null,null);
    try {
      if (FileUtil.exists(projectDirName + "/test")) {
        FileUtil.write(tempFile,"bin\ntest-classes\ntest-results\ntmp");
      }
 else {
        FileUtil.write(tempFile,"bin\ntmp");
      }
      _exec(_SVN_SET_IGNORES + "-F \"" + tempFile.getCanonicalPath()+ "\" \""+ projectDirName+ "\"");
    }
  finally {
      FileUtil.delete(tempFile);
    }
  }
}
