{
  File propertiesFile=new File(dirName + "/" + fileName);
  Properties properties=new Properties();
  properties.load(new FileInputStream(propertiesFile));
  List<String> jars=new SortedArrayList<String>();
  jars.addAll(getCommonJars());
  List<String> dependencyJars=getPortalDependencyJars(properties);
  jars.addAll(dependencyJars);
  File projectDir=new File(propertiesFile.getParent() + "/../..");
  jars.addAll(getImportSharedJars(projectDir));
  File libDir=new File(propertiesFile.getParent() + "/lib");
  jars.addAll(getRequiredDeploymentContextsJars(libDir,properties));
  writeEclipseFiles(libDir,projectDir,dependencyJars);
  String libDirPath=StringUtil.replace(libDir.getPath(),StringPool.BACK_SLASH,StringPool.SLASH);
  List<String> ignores=ListUtil.fromFile(libDir.getCanonicalPath() + "/../.gitignore");
  if (!libDirPath.contains("/ext/") && !ignores.contains("/lib")) {
    File gitignoreFile=new File(libDir.getCanonicalPath() + "/.gitignore");
    System.out.println("Updating " + gitignoreFile);
    String[] gitIgnores=jars.toArray(new String[jars.size()]);
    for (int i=0; i < gitIgnores.length; i++) {
      String gitIgnore=gitIgnores[i];
      if (Validator.isNotNull(gitIgnore) && !gitIgnore.startsWith("/")) {
        gitIgnores[i]="/" + gitIgnore;
      }
    }
    _fileUtil.write(gitignoreFile,StringUtil.merge(gitIgnores,"\n"));
  }
}
