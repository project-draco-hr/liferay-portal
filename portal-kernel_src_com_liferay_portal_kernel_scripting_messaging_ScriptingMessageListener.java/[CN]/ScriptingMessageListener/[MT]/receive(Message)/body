{
  Object payload=message.getPayload();
  if (payload == null) {
    _log.error("Receive a message has no payload!");
    return;
  }
  if (ScriptingRequest.class.isAssignableFrom(payload.getClass()) == false) {
    _log.error("Receive a message has a wrong payload type:" + payload.getClass() + " needs:"+ ScriptingRequest.class);
    return;
  }
  ScriptingRequest scriptingRequest=ScriptingRequest.class.cast(payload);
  ScriptingRequest.Command command=scriptingRequest.getCommand();
  if (command == null) {
    _log.error("Missing Command in payload!");
    return;
  }
  Set<String> allowedClasses=scriptingRequest.getAllowedClasses();
  Map<String,Object> inputObjects=scriptingRequest.getInputObjects();
  Set<String> outputNames=scriptingRequest.getOutputNames();
  String language=scriptingRequest.getLanguage();
  String script=scriptingRequest.getScript();
  PortletConfig portletConfig=scriptingRequest.getPortletConfig();
  PortletContext portletContext=scriptingRequest.getPortletContext();
  PortletRequest portletRequest=scriptingRequest.getPortletRequest();
  PortletResponse portletResponse=scriptingRequest.getPortletResponse();
  try {
switch (command) {
case CLEAR_CACHE:
      _scripting.clearCache(language);
    break;
case EXEC:
  _scripting.exec(allowedClasses,inputObjects,language,script);
break;
case EVAL:
Map<String,Object> evalResult=_scripting.eval(allowedClasses,inputObjects,outputNames,language,script);
MessageBusUtil.sendMessage(message.getResponseDestinationName(),evalResult);
break;
case GET_PORTLET_OBJECTS:
Map<String,Object> portletObjects=_scripting.getPortletObjects(portletConfig,portletContext,portletRequest,portletResponse);
MessageBusUtil.sendMessage(message.getResponseDestinationName(),portletObjects);
break;
case GET_SUPPORTED_LANGUAGES:
Set<String> supportedLauguages=_scripting.getSupportedLanguages();
Message responseMessage=MessageBusUtil.createResponseMessage(message,supportedLauguages);
MessageBusUtil.sendMessage(message.getResponseDestinationName(),responseMessage);
break;
}
}
 catch (ScriptingException se) {
_log.error("Failed to do local scripting command:" + command,se);
}
}
