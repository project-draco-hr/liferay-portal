{
  Set<String> portletIdList=new HashSet<>();
  for (  String portletId : portletIds) {
    removeModesPortletId(portletId);
    removeStatesPortletId(portletId);
    portletIdList.add(portletId);
    String rootPortletId=PortletConstants.getRootPortletId(portletId);
    if (rootPortletId.equals(PortletKeys.NESTED_PORTLETS)) {
      String portletNamespace=PortalUtil.getPortletNamespace(portletId);
      UnicodeProperties typeSettingsProperties=getTypeSettingsProperties();
      for (      Map.Entry<String,String> entry : typeSettingsProperties.entrySet()) {
        String key=entry.getKey();
        if (!key.startsWith(portletNamespace)) {
          continue;
        }
        String nestedPortletIds=entry.getValue();
        for (        String nestedPortletId : StringUtil.split(nestedPortletIds)) {
          removeModesPortletId(nestedPortletId);
          removeStatesPortletId(nestedPortletId);
          portletIdList.add(nestedPortletId);
        }
      }
      removeNestedColumns(portletNamespace);
    }
    Portlet portlet=PortletLocalServiceUtil.getPortletById(portletId);
    if (portlet == null) {
      continue;
    }
    PortletLayoutListener portletLayoutListener=portlet.getPortletLayoutListenerInstance();
    if (portletLayoutListener == null) {
      continue;
    }
    portletLayoutListener.updatePropertiesOnRemoveFromLayout(portletId,getTypeSettingsProperties());
  }
  try {
    PortletLocalServiceUtil.deletePortlets(getCompanyId(),portletIdList.toArray(new String[portletIdList.size()]),getPlid());
  }
 catch (  PortalException pe) {
    _log.error(pe,pe);
  }
}
