{
  List columns=getColumns();
  String nestedLayoutTemplateIds=GetterUtil.getString(getTypeSettingsProperties().getProperty(NESTED_LAYOUT_TEMPLATE_IDS));
  boolean nestedPortletId=nestedLayoutTemplateIds.indexOf(portletId + NESTED_LAYOUT_TEMPLATE_SEPARATOR) > -1;
  if (nestedPortletId) {
    nestedLayoutTemplateIds=StringUtils.replace(nestedLayoutTemplateIds,portletId + NESTED_LAYOUT_TEMPLATE_SEPARATOR + ".*?","");
    nestedLayoutTemplateIds=StringUtils.replace(nestedLayoutTemplateIds,",,",",");
    getTypeSettingsProperties().setProperty(NESTED_LAYOUT_TEMPLATE_IDS,nestedLayoutTemplateIds);
  }
  for (int i=0; i < columns.size(); i++) {
    String columnId=(String)columns.get(i);
    if (nestedPortletId && columnId.startsWith(portletId)) {
      getTypeSettingsProperties().remove(columnId);
      continue;
    }
    String columnValue=getTypeSettingsProperties().getProperty(columnId);
    columnValue=StringUtil.remove(columnValue,portletId);
    getTypeSettingsProperties().setProperty(columnId,columnValue);
  }
  if (modeAndState) {
    removeStatesPortletId(portletId);
    removeModesPortletId(portletId);
  }
  Layout layout=getLayout();
  try {
    onRemoveFromLayout(portletId,layout);
  }
 catch (  Exception e) {
    _log.error("Unable to fire portlet layout listener event",e);
  }
}
