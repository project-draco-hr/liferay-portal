{
  Object[] finderArgs=new Object[]{repositoryId,mappedId};
  Object result=null;
  if (retrieveFromCache) {
    result=finderCache.getResult(FINDER_PATH_FETCH_BY_R_M,finderArgs,this);
  }
  if (result instanceof RepositoryEntry) {
    RepositoryEntry repositoryEntry=(RepositoryEntry)result;
    if ((repositoryId != repositoryEntry.getRepositoryId()) || !Objects.equals(mappedId,repositoryEntry.getMappedId())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_REPOSITORYENTRY_WHERE);
    query.append(_FINDER_COLUMN_R_M_REPOSITORYID_2);
    boolean bindMappedId=false;
    if (mappedId == null) {
      query.append(_FINDER_COLUMN_R_M_MAPPEDID_1);
    }
 else     if (mappedId.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_R_M_MAPPEDID_3);
    }
 else {
      bindMappedId=true;
      query.append(_FINDER_COLUMN_R_M_MAPPEDID_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(repositoryId);
      if (bindMappedId) {
        qPos.add(mappedId);
      }
      List<RepositoryEntry> list=q.list();
      if (list.isEmpty()) {
        finderCache.putResult(FINDER_PATH_FETCH_BY_R_M,finderArgs,list);
      }
 else {
        RepositoryEntry repositoryEntry=list.get(0);
        result=repositoryEntry;
        cacheResult(repositoryEntry);
        if ((repositoryEntry.getRepositoryId() != repositoryId) || (repositoryEntry.getMappedId() == null) || !repositoryEntry.getMappedId().equals(mappedId)) {
          finderCache.putResult(FINDER_PATH_FETCH_BY_R_M,finderArgs,repositoryEntry);
        }
      }
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_FETCH_BY_R_M,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (RepositoryEntry)result;
  }
}
