{
  try {
    if (matches(className)) {
      InstrumentationAgent.recordInstrumentation(classLoader,className,classfileBuffer);
      ProjectData projectData=_projectDatas.get(classLoader);
      if (projectData == null) {
        projectData=new ProjectData();
        ProjectData previousProjectData=_projectDatas.putIfAbsent(classLoader,projectData);
        if (previousProjectData != null) {
          projectData=previousProjectData;
        }
      }
      ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
      String name=className.replace(CharPool.SLASH,CharPool.PERIOD);
      ClassVisitor classVisitor=new CoberturaClassVisitor(projectData.getOrCreateClassData(name),classWriter);
      ClassReader classReader=new ClassReader(classfileBuffer);
synchronized (projectData) {
        classReader.accept(classVisitor,0);
      }
      byte[] data=classWriter.toByteArray();
      dumpIntrumentedClass(classLoader,className,data);
      return data;
    }
    if (className.equals("net/sourceforge/cobertura/coveragedata/TouchCollector")) {
      ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
      ClassVisitor classVisitor=new TouchCollectorClassVisitor(classWriter);
      ClassReader classReader=new ClassReader(classfileBuffer);
      classReader.accept(classVisitor,0);
      byte[] data=classWriter.toByteArray();
      dumpIntrumentedClass(classLoader,className,data);
      return data;
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException(t);
  }
  return null;
}
