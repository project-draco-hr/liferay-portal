{
  TestPortlet adtPortlet=new TestPortlet(){
    @Override public void render(    RenderRequest renderRequest,    RenderResponse renderResponse) throws IOException, PortletException {
      super.render(renderRequest,renderResponse);
      PortletContext portletContext=getPortletContext();
      PortletRequestDispatcher portletRequestDispatcher=portletContext.getRequestDispatcher("/view.jsp");
      portletRequestDispatcher.include(renderRequest,renderResponse);
    }
  }
;
  Dictionary<String,Object> properties=new HashMapDictionary<>();
  properties.put("com.liferay.portlet.instanceable",Boolean.FALSE.toString());
  setUpPortlet(adtPortlet,properties,TEST_PORTLET_ID);
  properties.put("javax.portlet.name",TEST_PORTLET_ID);
  registerService(TemplateHandler.class,new TestEmbeddedPortletDisplayTemplateHandler(),properties);
  HttpServletRequest httpServletRequest=PortletContainerTestUtil.getHttpServletRequest(group,layout);
  PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.RENDER_PHASE);
  TestRuntimePortlet testRuntimePortlet=new TestRuntimePortlet();
  String testRuntimePortletId="testRuntimePortletId";
  setUpPortlet(testRuntimePortlet,properties,testRuntimePortletId,false);
  portletURL.setParameter("testRuntimePortletId",testRuntimePortletId);
  Response response=PortletContainerTestUtil.request(portletURL.toString());
  Assert.assertEquals(200,response.getCode());
  Assert.assertTrue(adtPortlet.isCalledRender());
  Assert.assertTrue(testRuntimePortlet.isCalledRuntime());
}
