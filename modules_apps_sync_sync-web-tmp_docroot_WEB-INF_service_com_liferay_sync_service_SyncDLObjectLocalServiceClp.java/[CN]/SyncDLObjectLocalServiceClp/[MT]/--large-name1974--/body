{
  Object returnObj=null;
  try {
    returnObj=_invokableLocalService.invokeMethod(_methodName6,_methodParameterTypes6,new Object[]{companyId,userId,ClpSerializer.translateInput(userName),modifiedTime,repositoryId,parentFolderId,ClpSerializer.translateInput(treePath),ClpSerializer.translateInput(name),ClpSerializer.translateInput(extension),ClpSerializer.translateInput(mimeType),ClpSerializer.translateInput(description),ClpSerializer.translateInput(changeLog),ClpSerializer.translateInput(extraSettings),ClpSerializer.translateInput(version),versionId,size,ClpSerializer.translateInput(checksum),ClpSerializer.translateInput(event),ClpSerializer.translateInput(lockExpirationDate),lockUserId,ClpSerializer.translateInput(lockUserName),ClpSerializer.translateInput(type),typePK,ClpSerializer.translateInput(typeUuid)});
  }
 catch (  Throwable t) {
    t=ClpSerializer.translateThrowable(t);
    if (t instanceof com.liferay.portal.kernel.exception.PortalException) {
      throw (com.liferay.portal.kernel.exception.PortalException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t.getClass().getName() + " is not a valid exception");
    }
  }
  return (com.liferay.sync.model.SyncDLObject)ClpSerializer.translateOutput(returnObj);
}
