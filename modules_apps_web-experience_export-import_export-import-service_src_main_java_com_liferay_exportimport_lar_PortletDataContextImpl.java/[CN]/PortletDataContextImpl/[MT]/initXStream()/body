{
  _xStream=new XStream(null,new XppDriver(),new ClassLoaderReference(XStreamConfiguratorRegistryUtil.getConfiguratorsClassLoader(XStream.class.getClassLoader())));
  _xStream.omitField(HashMap.class,"cache_bitmask");
  Set<XStreamConfigurator> xStreamConfigurators=XStreamConfiguratorRegistryUtil.getXStreamConfigurators();
  if (SetUtil.isEmpty(xStreamConfigurators)) {
    return;
  }
  List<String> allowedTypeNames=new ArrayList<>();
  for (  XStreamConfigurator xStreamConfigurator : xStreamConfigurators) {
    List<XStreamAlias> xStreamAliases=xStreamConfigurator.getXStreamAliases();
    if (ListUtil.isNotEmpty(xStreamAliases)) {
      for (      XStreamAlias xStreamAlias : xStreamAliases) {
        _xStream.alias(xStreamAlias.getName(),xStreamAlias.getClazz());
      }
    }
    List<XStreamConverter> xStreamConverters=xStreamConfigurator.getXStreamConverters();
    if (ListUtil.isNotEmpty(xStreamConverters)) {
      for (      XStreamConverter xStreamConverter : xStreamConverters) {
        _xStream.registerConverter(new ConverterAdapter(xStreamConverter),XStream.PRIORITY_VERY_HIGH);
      }
    }
    List<XStreamType> xStreamTypes=xStreamConfigurator.getAllowedXStreamTypes();
    if (ListUtil.isNotEmpty(xStreamTypes)) {
      for (      XStreamType xStreamType : xStreamTypes) {
        allowedTypeNames.add(xStreamType.getTypeExpression());
      }
    }
  }
  _xStream.addPermission(NoTypePermission.NONE);
  _xStream.addPermission(PrimitiveTypePermission.PRIMITIVES);
  _xStream.addPermission(XStreamStagedModelTypeHierarchyPermission.STAGED_MODELS);
  _xStream.allowTypeHierarchy(List.class);
  _xStream.allowTypeHierarchy(Map.class);
  _xStream.allowTypeHierarchy(Timestamp.class);
  _xStream.allowTypeHierarchy(Set.class);
  _xStream.allowTypes(_XSTREAM_DEFAULT_ALLOWED_TYPES);
  _xStream.allowTypes(allowedTypeNames.toArray(new String[0]));
  _xStream.allowTypesByWildcard(new String[]{"com.thoughtworks.xstream.mapper.DynamicProxyMapper*"});
}
