{
  if (_serverChannel != null) {
    throw new IllegalStateException("Netty fabric server was already started");
  }
  if (_log.isInfoEnabled()) {
    _log.info("Starting Netty fabric server using " + _nettyFabricServerConfig);
  }
  Files.createDirectories(_nettyFabricServerConfig.getRepositoryParentPath());
  ServerBootstrap serverBootstrap=new ServerBootstrap();
  serverBootstrap.channel(NioServerSocketChannel.class);
  serverBootstrap.handler(new LoggingHandler(LogLevel.INFO));
  serverBootstrap.childHandler(new ChildChannelInitializer());
  EventLoopGroup bossEventLoopGroup=new NioEventLoopGroup(_nettyFabricServerConfig.getBossGroupThreadCount(),new NamedThreadFactory("Netty Fabric Server/Boss Event Loop Group",Thread.NORM_PRIORITY,null));
  EventLoopGroup workerEventLoopGroup=new NioEventLoopGroup(_nettyFabricServerConfig.getWorkerGroupThreadCount(),new NamedThreadFactory("Netty Fabric Server/Worker Event Loop Group",Thread.NORM_PRIORITY,null));
  NettyUtil.bindShutdown(bossEventLoopGroup,workerEventLoopGroup,_nettyFabricServerConfig.getShutdownQuietPeriod(),_nettyFabricServerConfig.getShutdownTimeout());
  serverBootstrap.group(bossEventLoopGroup,workerEventLoopGroup);
  ChannelFuture channelFuture=serverBootstrap.bind(_nettyFabricServerConfig.getNettyFabricServerHost(),_nettyFabricServerConfig.getNettyFabricServerPort());
  _serverChannel=channelFuture.channel();
  channelFuture.addListener(new PostBindChannelFutureListener());
  channelFuture.sync();
}
