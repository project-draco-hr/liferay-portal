{
  String sharedSecret=PropsValues.TUNNELING_SERVLET_SHARED_SECRET;
  boolean sharedSecretHex=PropsValues.TUNNELING_SERVLET_SHARED_SECRET_HEX;
  if (Validator.isNull(sharedSecret)) {
    AuthException authException=new AuthException();
    authException.setType(AuthException.NO_SHARED_SECRET);
    throw authException;
  }
  byte[] key=null;
  if (sharedSecretHex) {
    try {
      key=Hex.decodeHex(sharedSecret.toCharArray());
    }
 catch (    DecoderException e) {
      if (_log.isWarnEnabled()) {
        _log.warn(e);
      }
      AuthException authException=new AuthException();
      authException.setType(AuthException.INVALID_SHARED_SECRET);
      throw authException;
    }
  }
 else {
    key=sharedSecret.getBytes();
  }
  if (key.length < 8) {
    AuthException authException=new AuthException();
    authException.setType(AuthException.INVALID_SHARED_SECRET);
    throw authException;
  }
  return new SecretKeySpec(key,PropsValues.TUNNELING_SERVLET_ENCRYPTION_ALGORITHM);
}
