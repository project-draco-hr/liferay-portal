{
  if (Validator.isNull(line)) {
    return;
  }
  Matcher matcher1=_methodDeclarationPattern.matcher(remainingContent);
  if (matcher1.find()) {
    String match=matcher1.group();
    Matcher matcher2=_throwsExceptionPattern.matcher(match);
    if (matcher2.find()) {
      addExtraTabs(lineCount,StringUtil.count(match,'\n') - 1);
    }
  }
  int lineTabLevel=calculateTabLevel(0,line);
  if (skipCalculateExtraTabs(line,lineTabLevel,forClause,ifClause)) {
    return;
  }
  String[] texts=new String[]{"{\n",";\n",",\n","\n)","\t)","\t}",")\n"};
  if (line.endsWith(":")) {
    if (line.startsWith("case ") || line.startsWith("default")) {
      texts=new String[]{":\n","\t}"};
    }
 else     if (!line.endsWith(" :")) {
      return;
    }
  }
  if (line.endsWith(",") && (line.startsWith("extends ") || line.startsWith("implements ") || line.startsWith("throws "))) {
    texts=new String[]{"{\n",";\n"};
  }
  if (forClause && (line.endsWith("=") || line.endsWith("("))) {
    texts=new String[]{"{\n",";\n"};
  }
  int x=-1;
  outerLoop:   while (true) {
    Tuple tuple=getFirstOccurenceTuple(remainingContent,texts,x + 1);
    x=(Integer)tuple.getObject(1);
    if (x == -1) {
      return;
    }
    String matchingText=(String)tuple.getObject(0);
    String s=StringUtil.trimLeading(remainingContent.substring(0,x));
    int level=calculateTabLevel(0,s);
    if ((line.startsWith("case ") || line.startsWith("default")) && line.endsWith(":")) {
      if (!s.contains("\n") || (level != 0)) {
        continue;
      }
    }
    if ((line.startsWith("for (") || line.startsWith("try (")) && matchingText.equals(";\n") && s.contains("\n")) {
      if (level > 1) {
        continue;
      }
    }
 else     if (level > 0) {
      continue;
    }
    if (matchingText.equals("{\n")) {
      int y=-1;
      while (true) {
        Tuple tuple2=getFirstOccurenceTuple(s,new String[]{"\tnew "," new "," ->"},y + 1);
        y=(Integer)tuple2.getObject(1);
        if (y == -1) {
          break;
        }
        if (calculateTabLevel(0,s.substring(y)) == 0) {
          continue outerLoop;
        }
      }
    }
    if (matchingText.equals(",\n") && (_javaSourceProcessor.getLevel(s,"<",">") > 0)) {
      continue;
    }
    int extra=StringUtil.count(s,'\n');
    if (matchingText.equals("\t)") || matchingText.equals("\t}") || matchingText.equals(":\n")) {
      extra=extra - 1;
    }
    if (StringUtil.trim(s).endsWith("Exception") && s.contains("\tthrows ")) {
      extra=extra - 1;
    }
    if (line.startsWith("extends ") && !line.endsWith(",")) {
      int pos=remainingContent.indexOf("\n");
      String remainingContentMinusFirstLine=StringUtil.trim(remainingContent.substring(pos));
      if (remainingContentMinusFirstLine.startsWith("implements ")) {
        continue;
      }
      extra=1;
    }
    if (!forClause && !ifClause && ((lineTabLevel > 1) || (line.startsWith("(") && !line.contains(")") && (lineTabLevel == 1)))) {
      addIgnoreTabChecks(lineCount,extra);
      return;
    }
    if (line.startsWith("-(") || line.endsWith("&") || line.endsWith("|")|| (line.endsWith("+") && (extra > 2))) {
      addIgnoreTabChecks(lineCount,extra);
      return;
    }
    if (line.endsWith("(") && forClause) {
      if (s.contains(";\n")) {
        addIgnoreTabChecks(lineCount,extra);
      }
      return;
    }
    if ((lineTabLevel == 0) && !line.startsWith(")") && line.endsWith("(")) {
      addIgnoreTabChecks(lineCount,extra);
      return;
    }
    addExtraTabs(lineCount,extra);
    String lineMinusLastChar=StringUtil.trim(line.substring(0,line.length() - 1));
    if (lineMinusLastChar.endsWith(")") && (lineTabLevel < 0)) {
      addExtraTabs(lineCount,extra);
    }
    if (line.endsWith(",") && (line.startsWith("extends ") || line.startsWith("implements "))) {
      addExtraTabs(lineCount,extra);
      addExtraTabs(lineCount,extra);
    }
    return;
  }
}
