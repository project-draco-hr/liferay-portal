{
  if (_log.isInfoEnabled()) {
    StringBundler sb=new StringBundler(2 * columns.length + 3);
    sb.append("Checking for duplicate data from ");
    sb.append(tableName);
    sb.append(" for unique index (");
    for (int i=0; i < columns.length; i++) {
      sb.append(columns[i][0]);
      if ((i + 1) < columns.length) {
        sb.append(", ");
      }
    }
    sb.append(")");
    _log.info(sb.toString());
  }
  if (dependencyManager != null) {
    dependencyManager.setTableName(tableName);
    dependencyManager.setPrimaryKeyName(primaryKeyName);
    dependencyManager.setColumns(columns);
    dependencyManager.setExtraColumns(extraColumns);
  }
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    con=DataAccess.getConnection();
    StringBundler sb=new StringBundler();
    sb.append("select ");
    sb.append(primaryKeyName);
    for (int i=0; i < columns.length; i++) {
      sb.append(", ");
      sb.append(columns[i][0]);
    }
    if (extraColumns != null) {
      for (int i=0; i < extraColumns.length; i++) {
        sb.append(", ");
        sb.append(extraColumns[i][0]);
      }
    }
    sb.append(" from ");
    sb.append(tableName);
    sb.append(" order by ");
    for (int i=0; i < columns.length; i++) {
      sb.append(columns[i][0]);
      sb.append(", ");
    }
    sb.append(primaryKeyName);
    String sql=sb.toString();
    if (_log.isDebugEnabled()) {
      _log.debug("Execute SQL " + sql);
    }
    ps=con.prepareStatement(sql);
    rs=ps.executeQuery();
    boolean supportsStringCaseSensitiveQuery=isSupportsStringCaseSensitiveQuery();
    long previousPrimaryKeyValue=0;
    Object[] previousColumnValues=new Object[columns.length];
    Object[] previousExtraColumnValues=null;
    if (extraColumns != null) {
      previousExtraColumnValues=new Object[extraColumns.length];
    }
    while (rs.next()) {
      long primaryKeyValue=rs.getLong(primaryKeyName);
      Object[] columnValues=getColumnValues(rs,columns);
      Object[] extraColumnValues=getColumnValues(rs,extraColumns);
      boolean duplicate=true;
      for (int i=0; i < columnValues.length; i++) {
        Object columnValue=columnValues[i];
        Object previousColumnValue=previousColumnValues[i];
        if ((columnValue == null) || (previousColumnValue == null)) {
          duplicate=false;
        }
 else         if (!supportsStringCaseSensitiveQuery && columns[i][1].equals(Types.VARCHAR)) {
          String columnValueString=(String)columnValue;
          String previousColumnValueString=(String)previousColumnValue;
          if (!columnValueString.equalsIgnoreCase(previousColumnValueString)) {
            duplicate=false;
          }
        }
 else {
          if (!columnValue.equals(previousColumnValue)) {
            duplicate=false;
          }
        }
        if (!duplicate) {
          break;
        }
      }
      if (duplicate) {
        runSQL("delete from " + tableName + " where "+ primaryKeyName+ " = "+ primaryKeyValue);
        if (dependencyManager != null) {
          if (_log.isInfoEnabled()) {
            sb.setIndex(0);
            sb.append("Resolving duplicate data from ");
            sb.append(tableName);
            sb.append(" with primary keys ");
            sb.append(primaryKeyValue);
            sb.append(" and ");
            sb.append(previousPrimaryKeyValue);
            _log.info(sb.toString());
          }
          dependencyManager.update(previousPrimaryKeyValue,previousColumnValues,previousExtraColumnValues,primaryKeyValue,columnValues,extraColumnValues);
        }
      }
 else {
        previousPrimaryKeyValue=primaryKeyValue;
        for (int i=0; i < columnValues.length; i++) {
          previousColumnValues[i]=columnValues[i];
        }
        if (extraColumnValues != null) {
          for (int i=0; i < extraColumnValues.length; i++) {
            previousExtraColumnValues[i]=extraColumnValues[i];
          }
        }
      }
    }
  }
  finally {
    DataAccess.cleanUp(con,ps,rs);
  }
}
