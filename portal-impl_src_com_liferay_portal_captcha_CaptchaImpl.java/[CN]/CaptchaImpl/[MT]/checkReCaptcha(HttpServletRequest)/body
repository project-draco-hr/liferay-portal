{
  String remoteIp=servletRequest.getRemoteAddr();
  String recaptchaChallenge=ParamUtil.getString(servletRequest,"recaptcha_challenge_field");
  String recaptchaResponse=ParamUtil.getString(servletRequest,"recaptcha_response_field");
  if (recaptchaResponse.equals(StringPool.BLANK)) {
    throw new CaptchaTextException("Captcha response cannot be empty");
  }
  Http.Options options=new Http.Options();
  options.setLocation(PropsValues.CAPTCHA_ENGINE_RECAPTCHA_URL_VERIFY);
  options.addPart("privatekey",PropsValues.CAPTCHA_ENGINE_RECAPTCHA_KEY_PRIVATE);
  options.addPart("remoteip",remoteIp);
  options.addPart("challenge",recaptchaChallenge);
  options.addPart("response",recaptchaResponse);
  options.setPost(true);
  String message=null;
  try {
    message=HttpUtil.URLtoString(options);
  }
 catch (  IOException e) {
    _log.error("Error requestion recaptcha message",e);
    throw new CaptchaTextException();
  }
  if (message == null) {
    _log.error("Answer from reCaptcha is null");
    throw new CaptchaTextException();
  }
  String[] messages=message.split("\r?\n");
  if (messages.length < 1) {
    _log.error("Invalid answer from reCaptcha : " + message);
    throw new CaptchaTextException();
  }
  if (!GetterUtil.getBoolean(messages[0])) {
    throw new CaptchaTextException();
  }
}
