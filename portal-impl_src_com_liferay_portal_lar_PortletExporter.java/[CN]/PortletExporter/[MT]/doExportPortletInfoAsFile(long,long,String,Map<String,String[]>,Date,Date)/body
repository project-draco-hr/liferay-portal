{
  boolean exportPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean exportPortletConfiguration=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_CONFIGURATION);
  boolean exportPortletConfigurationAll=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL);
  boolean exportPortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA);
  boolean exportPortletDataAll=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA_ALL);
  String rootPortletId=PortletConstants.getRootPortletId(portletId);
  if (exportPortletDataAll) {
    exportPortletData=true;
  }
 else   if (parameterMap.containsKey(PortletDataHandlerKeys.PORTLET_DATA + "_" + rootPortletId)) {
    exportPortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA + "_" + rootPortletId);
  }
  boolean exportPortletArchivedSetups=exportPortletConfiguration;
  boolean exportPortletSetup=exportPortletConfiguration;
  boolean exportPortletUserPreferences=exportPortletConfiguration;
  if (exportPortletConfigurationAll) {
    exportPortletArchivedSetups=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS_ALL);
    exportPortletSetup=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_SETUP_ALL);
    exportPortletUserPreferences=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES_ALL);
  }
 else   if (parameterMap.containsKey(PortletDataHandlerKeys.PORTLET_CONFIGURATION + "_" + rootPortletId)) {
    exportPortletConfiguration=exportPortletConfiguration && MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_CONFIGURATION + StringPool.UNDERLINE + rootPortletId);
    exportPortletArchivedSetups=exportPortletConfiguration && MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS + StringPool.UNDERLINE + rootPortletId);
    exportPortletSetup=exportPortletConfiguration && MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_SETUP + StringPool.UNDERLINE + rootPortletId);
    exportPortletUserPreferences=exportPortletConfiguration && MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES + StringPool.UNDERLINE + rootPortletId);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Export permissions " + exportPermissions);
    _log.debug("Export portlet archived setups " + exportPortletArchivedSetups);
    _log.debug("Export portlet data " + exportPortletData);
    _log.debug("Export all portlet data " + exportPortletDataAll);
    _log.debug("Export portlet configuration " + exportPortletConfiguration);
    _log.debug("Export portlet user preferences " + exportPortletUserPreferences);
  }
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  LayoutCache layoutCache=new LayoutCache();
  Layout layout=LayoutLocalServiceUtil.getLayout(plid);
  if (!layout.isTypeControlPanel() && !layout.isTypePanel() && !layout.isTypePortlet()) {
    throw new LayoutImportException("Layout type " + layout.getType() + " is not valid");
  }
  long defaultUserId=UserLocalServiceUtil.getDefaultUserId(layout.getCompanyId());
  ZipWriter zipWriter=ZipWriterFactoryUtil.getZipWriter();
  long scopeGroupId=groupId;
  javax.portlet.PortletPreferences jxPortletPreferences=PortletPreferencesFactoryUtil.getLayoutPortletSetup(layout,portletId);
  String scopeType=GetterUtil.getString(jxPortletPreferences.getValue("lfrScopeType",null));
  String scopeLayoutUuid=GetterUtil.getString(jxPortletPreferences.getValue("lfrScopeLayoutUuid",null));
  if (Validator.isNotNull(scopeType)) {
    Group scopeGroup=null;
    if (scopeType.equals("company")) {
      scopeGroup=GroupLocalServiceUtil.getCompanyGroup(layout.getCompanyId());
    }
 else     if (Validator.isNotNull(scopeLayoutUuid)) {
      scopeGroup=layout.getScopeGroup();
    }
    if (scopeGroup != null) {
      scopeGroupId=scopeGroup.getGroupId();
    }
  }
  PortletDataContext portletDataContext=PortletDataContextFactoryUtil.createExportPortletDataContext(layout.getCompanyId(),scopeGroupId,parameterMap,startDate,endDate,zipWriter);
  portletDataContext.setPortetDataContextListener(new PortletDataContextListenerImpl(portletDataContext));
  portletDataContext.setPlid(plid);
  portletDataContext.setOldPlid(plid);
  portletDataContext.setScopeType(scopeType);
  portletDataContext.setScopeLayoutUuid(scopeLayoutUuid);
  Document document=SAXReaderUtil.createDocument();
  Element rootElement=document.addElement("root");
  Element headerElement=rootElement.addElement("header");
  headerElement.addAttribute("available-locales",StringUtil.merge(LanguageUtil.getAvailableLocales(PortalUtil.getSiteGroupId(portletDataContext.getScopeGroupId()))));
  headerElement.addAttribute("build-number",String.valueOf(ReleaseInfo.getBuildNumber()));
  headerElement.addAttribute("export-date",Time.getRFC822());
  if (portletDataContext.hasDateRange()) {
    headerElement.addAttribute("start-date",String.valueOf(portletDataContext.getStartDate()));
    headerElement.addAttribute("end-date",String.valueOf(portletDataContext.getEndDate()));
  }
  headerElement.addAttribute("type","portlet");
  headerElement.addAttribute("company-id",String.valueOf(portletDataContext.getCompanyId()));
  headerElement.addAttribute("company-group-id",String.valueOf(portletDataContext.getCompanyGroupId()));
  headerElement.addAttribute("group-id",String.valueOf(scopeGroupId));
  headerElement.addAttribute("user-personal-site-group-id",String.valueOf(portletDataContext.getUserPersonalSiteGroupId()));
  headerElement.addAttribute("private-layout",String.valueOf(layout.isPrivateLayout()));
  headerElement.addAttribute("root-portlet-id",PortletConstants.getRootPortletId(portletId));
  Element missingReferencesElement=rootElement.addElement("missing-references");
  portletDataContext.setMissingReferencesElement(missingReferencesElement);
  exportPortlet(portletDataContext,layoutCache,portletId,layout,rootElement,defaultUserId,exportPermissions,exportPortletArchivedSetups,exportPortletData,exportPortletSetup,exportPortletUserPreferences);
  exportAssetCategories(portletDataContext);
  exportAssetLinks(portletDataContext);
  exportAssetTags(portletDataContext);
  exportComments(portletDataContext);
  exportExpandoTables(portletDataContext);
  exportLocks(portletDataContext);
  _deletionSystemEventExporter.export(portletDataContext);
  if (exportPermissions) {
    _permissionExporter.exportPortletDataPermissions(portletDataContext);
  }
  exportRatingsEntries(portletDataContext,rootElement);
  ExportImportHelperUtil.writeManifestSummary(document,portletDataContext.getManifestSummary());
  if (_log.isInfoEnabled()) {
    _log.info("Exporting portlet took " + stopWatch.getTime() + " ms");
  }
  portletDataContext.clearScopedPrimaryKeys();
  try {
    portletDataContext.addZipEntry("/manifest.xml",document.formattedString());
  }
 catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
  return zipWriter.getFile();
}
