{
  String rootPotletId=PortletConstants.getRootPortletId(portletId);
  if (!rootPotletId.equals(PortletKeys.ASSET_PUBLISHER)) {
    return xml;
  }
  PortletPreferencesImpl portletPreferences=(PortletPreferencesImpl)PortletPreferencesFactoryUtil.fromDefaultXML(xml);
  Enumeration<String> enu=portletPreferences.getNames();
  while (enu.hasMoreElements()) {
    String name=enu.nextElement();
    String value=GetterUtil.getString(portletPreferences.getValue(name,StringPool.BLANK));
    String prefix="queryName";
    if (value.equalsIgnoreCase("assetCategories") && name.startsWith(prefix)) {
      String index=name.substring(prefix.length(),name.length());
      String queryValuesName="queryValues" + index;
      replaceClassPKs(queryValuesName,AssetCategory.class.getName(),portletPreferences);
    }
 else     if (name.equals("anyClassTypeJournalArticleAssetRendererFactory") || name.equals("classTypeIdsJournalArticleAssetRendererFactory") || name.equals("classTypeIds")) {
      replaceClassPKs(name,JournalStructure.class.getName(),portletPreferences);
    }
 else     if (name.equals("scopeIds") || name.equals("defaultScope")) {
      replaceGlobalScopeId(name,portletPreferences,plid);
    }
  }
  return PortletPreferencesFactoryUtil.toXML(portletPreferences);
}
