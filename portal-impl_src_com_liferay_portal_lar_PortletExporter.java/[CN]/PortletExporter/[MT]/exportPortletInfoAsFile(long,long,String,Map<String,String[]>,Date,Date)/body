{
  boolean exportCategories=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.CATEGORIES);
  boolean exportPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean exportPortletArchivedSetups=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);
  boolean exportPortletData=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA + "_" + PortletConstants.getRootPortletId(portletId));
  boolean exportPortletDataAll=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_DATA_ALL);
  boolean exportPortletSetup=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_SETUP);
  boolean exportPortletUserPreferences=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);
  boolean exportUserPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.USER_PERMISSIONS);
  if (_log.isDebugEnabled()) {
    _log.debug("Export categories " + exportCategories);
    _log.debug("Export permissions " + exportPermissions);
    _log.debug("Export portlet archived setups " + exportPortletArchivedSetups);
    _log.debug("Export portlet data " + exportPortletData);
    _log.debug("Export all portlet data " + exportPortletDataAll);
    _log.debug("Export portlet setup " + exportPortletSetup);
    _log.debug("Export portlet user preferences " + exportPortletUserPreferences);
    _log.debug("Export user permissions " + exportUserPermissions);
  }
  if (exportPortletDataAll) {
    exportPortletData=true;
  }
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  LayoutCache layoutCache=new LayoutCache();
  Layout layout=LayoutLocalServiceUtil.getLayout(plid);
  if (!layout.isTypeControlPanel() && !layout.isTypePanel() && !layout.isTypePortlet()) {
    throw new LayoutImportException("Layout type " + layout.getType() + " is not valid");
  }
  long companyId=layout.getCompanyId();
  long defaultUserId=UserLocalServiceUtil.getDefaultUserId(companyId);
  ZipWriter zipWriter=ZipWriterFactoryUtil.getZipWriter();
  long scopeGroupId=groupId;
  javax.portlet.PortletPreferences jxPreferences=PortletPreferencesFactoryUtil.getLayoutPortletSetup(layout,portletId);
  String scopeType=GetterUtil.getString(jxPreferences.getValue("lfr-scope-type",null));
  String scopeLayoutUuid=GetterUtil.getString(jxPreferences.getValue("lfr-scope-layout-uuid",null));
  if (Validator.isNotNull(scopeType)) {
    Group scopeGroup=null;
    if (scopeType.equals("company")) {
      scopeGroup=GroupLocalServiceUtil.getCompanyGroup(companyId);
    }
 else     if (Validator.isNotNull(scopeLayoutUuid)) {
      scopeGroup=layout.getScopeGroup();
    }
    if (scopeGroup != null) {
      scopeGroupId=scopeGroup.getGroupId();
    }
  }
  PortletDataContext context=new PortletDataContextImpl(companyId,scopeGroupId,parameterMap,new HashSet<String>(),startDate,endDate,zipWriter);
  context.setPortetDataContextListener(new PortletDataContextListenerImpl(context));
  context.setPlid(plid);
  context.setOldPlid(plid);
  context.setScopeType(scopeType);
  context.setScopeLayoutUuid(scopeLayoutUuid);
  Document doc=SAXReaderUtil.createDocument();
  Element root=doc.addElement("root");
  Element header=root.addElement("header");
  header.addAttribute("build-number",String.valueOf(ReleaseInfo.getBuildNumber()));
  header.addAttribute("export-date",Time.getRFC822());
  if (context.hasDateRange()) {
    header.addAttribute("start-date",String.valueOf(context.getStartDate()));
    header.addAttribute("end-date",String.valueOf(context.getEndDate()));
  }
  header.addAttribute("type","portlet");
  header.addAttribute("group-id",String.valueOf(scopeGroupId));
  header.addAttribute("private-layout",String.valueOf(layout.isPrivateLayout()));
  header.addAttribute("root-portlet-id",PortletConstants.getRootPortletId(portletId));
  exportPortlet(context,layoutCache,portletId,layout,root,defaultUserId,exportPermissions,exportPortletArchivedSetups,exportPortletData,exportPortletSetup,exportPortletUserPreferences,exportUserPermissions);
  if (exportCategories) {
    exportCategories(context);
  }
  exportComments(context,root);
  exportExpandos(context);
  exportLocks(context,root);
  if (exportPermissions) {
    _permissionExporter.exportPortletDataPermissions(context);
  }
  exportRatings(context,root);
  exportTags(context,root);
  if (_log.isInfoEnabled()) {
    _log.info("Exporting portlet took " + stopWatch.getTime() + " ms");
  }
  try {
    context.addZipEntry("/manifest.xml",doc.formattedString());
  }
 catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
  return zipWriter.getFile();
}
