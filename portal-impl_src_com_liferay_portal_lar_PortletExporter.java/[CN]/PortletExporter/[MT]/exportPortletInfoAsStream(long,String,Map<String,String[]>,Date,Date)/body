{
  boolean exportPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean exportPortletArchivedSetups=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);
  boolean exportPortletData=true;
  boolean exportPortletSetup=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_SETUP);
  boolean exportPortletUserPreferences=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);
  boolean exportUserPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.USER_PERMISSIONS);
  if (_log.isDebugEnabled()) {
    _log.debug("Export permissions " + exportPermissions);
    _log.debug("Export portlet archived setups " + exportPortletArchivedSetups);
    _log.debug("Export portlet data " + exportPortletData);
    _log.debug("Export portlet setup " + exportPortletSetup);
    _log.debug("Export portlet user preferences " + exportPortletUserPreferences);
    _log.debug("Export user permissions " + exportUserPermissions);
  }
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  LayoutCache layoutCache=new LayoutCache();
  Layout layout=LayoutLocalServiceUtil.getLayout(plid);
  if (!layout.getType().equals(LayoutConstants.TYPE_PORTLET)) {
    throw new LayoutImportException("Layout type " + layout.getType() + " is not valid");
  }
  LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
  if (!layoutTypePortlet.hasPortletId(portletId)) {
    throw new LayoutImportException("The specified layout does not have portlet " + portletId);
  }
  long companyId=layout.getCompanyId();
  long defaultUserId=UserLocalServiceUtil.getDefaultUserId(companyId);
  ZipWriter zipWriter=null;
  try {
    zipWriter=new ZipWriter();
  }
 catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
  PortletDataContext context=new PortletDataContextImpl(companyId,layout.getGroupId(),parameterMap,new HashSet<String>(),startDate,endDate,zipWriter);
  context.setPlid(plid);
  context.setOldPlid(plid);
  Document doc=SAXReaderUtil.createDocument();
  Element root=doc.addElement("root");
  Element header=root.addElement("header");
  header.addAttribute("build-number",String.valueOf(ReleaseInfo.getBuildNumber()));
  header.addAttribute("export-date",Time.getRFC822());
  if (context.hasDateRange()) {
    header.addAttribute("start-date",String.valueOf(context.getStartDate()));
    header.addAttribute("end-date",String.valueOf(context.getEndDate()));
  }
  header.addAttribute("type","portlet");
  header.addAttribute("group-id",String.valueOf(layout.getGroupId()));
  header.addAttribute("private-layout",String.valueOf(layout.isPrivateLayout()));
  header.addAttribute("root-portlet-id",PortletConstants.getRootPortletId(portletId));
  exportPortlet(context,layoutCache,portletId,layout,root,defaultUserId,exportPermissions,exportPortletArchivedSetups,exportPortletData,exportPortletSetup,exportPortletUserPreferences,exportUserPermissions);
  exportComments(context,root);
  exportRatings(context,root);
  exportTags(context,root);
  if (_log.isInfoEnabled()) {
    _log.info("Exporting portlet took " + stopWatch.getTime() + " ms");
  }
  try {
    context.addZipEntry("/manifest.xml",doc.formattedString());
    return zipWriter.finishWithStream();
  }
 catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
}
