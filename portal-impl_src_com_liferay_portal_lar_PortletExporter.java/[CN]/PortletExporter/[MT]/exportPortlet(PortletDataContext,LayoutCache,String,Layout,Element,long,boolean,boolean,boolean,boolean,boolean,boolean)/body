{
  long companyId=context.getCompanyId();
  long groupId=context.getGroupId();
  Portlet portlet=PortletLocalServiceUtil.getPortletById(context.getCompanyId(),portletId);
  if (portlet == null) {
    if (_log.isDebugEnabled()) {
      _log.debug("Do not export portlet " + portletId + " because the portlet does not exist");
    }
    return;
  }
  if ((!portlet.isInstanceable()) && (!portlet.isPreferencesUniquePerLayout()) && (context.hasNotUniquePerLayout(portletId))) {
    return;
  }
  Document doc=SAXReaderUtil.createDocument();
  Element portletEl=doc.addElement("portlet");
  portletEl.addAttribute("portlet-id",portletId);
  portletEl.addAttribute("root-portlet-id",PortletConstants.getRootPortletId(portletId));
  portletEl.addAttribute("old-plid",String.valueOf(layout.getPlid()));
  portletEl.addAttribute("scope-layout-uuid",context.getScopeLayoutUuid());
  javax.portlet.PortletPreferences jxPreferences=PortletPreferencesFactoryUtil.getPortletSetup(layout,portletId,StringPool.BLANK);
  if (exportPortletData) {
    if (!portlet.isPreferencesUniquePerLayout()) {
      String dataKey=portletId + StringPool.AT + context.getScopeLayoutUuid();
      if (!context.hasNotUniquePerLayout(dataKey)) {
        context.putNotUniquePerLayout(dataKey);
        exportPortletData(context,portlet,layout,jxPreferences,portletEl);
      }
    }
 else {
      exportPortletData(context,portlet,layout,jxPreferences,portletEl);
    }
  }
  if (exportPortletSetup) {
    exportPortletPreferences(context,PortletKeys.PREFS_OWNER_ID_DEFAULT,PortletKeys.PREFS_OWNER_TYPE_LAYOUT,false,layout,portletId,portletEl);
    exportPortletPreferences(context,groupId,PortletKeys.PREFS_OWNER_TYPE_GROUP,false,layout,portletId,portletEl);
    exportPortletPreferences(context,companyId,PortletKeys.PREFS_OWNER_TYPE_COMPANY,false,layout,portletId,portletEl);
  }
  if (exportPortletUserPreferences) {
    exportPortletPreferences(context,defaultUserId,PortletKeys.PREFS_OWNER_TYPE_USER,true,layout,portletId,portletEl);
    try {
      PortletPreferences groupPortletPreferences=PortletPreferencesLocalServiceUtil.getPortletPreferences(groupId,PortletKeys.PREFS_OWNER_TYPE_GROUP,PortletKeys.PREFS_PLID_SHARED,portletId);
      exportPortletPreference(context,groupId,PortletKeys.PREFS_OWNER_TYPE_GROUP,false,groupPortletPreferences,portletId,PortletKeys.PREFS_PLID_SHARED,portletEl);
    }
 catch (    NoSuchPortletPreferencesException nsppe) {
    }
  }
  if (exportPortletArchivedSetups) {
    String rootPortletId=PortletConstants.getRootPortletId(portletId);
    List<PortletItem> portletItems=PortletItemLocalServiceUtil.getPortletItems(groupId,rootPortletId,PortletPreferences.class.getName());
    for (    PortletItem portletItem : portletItems) {
      long ownerId=portletItem.getPortletItemId();
      int ownerType=PortletKeys.PREFS_OWNER_TYPE_ARCHIVED;
      exportPortletPreferences(context,ownerId,ownerType,false,null,portletItem.getPortletId(),portletEl);
    }
  }
  if (exportPermissions) {
    _permissionExporter.exportPortletPermissions(context,layoutCache,portletId,layout,portletEl);
  }
  StringBundler sb=new StringBundler(4);
  sb.append(context.getPortletPath(portletId));
  sb.append(StringPool.SLASH);
  sb.append(layout.getPlid());
  sb.append("/portlet.xml");
  String path=sb.toString();
  Element el=parentEl.addElement("portlet");
  el.addAttribute("portlet-id",portletId);
  el.addAttribute("layout-id",String.valueOf(layout.getLayoutId()));
  el.addAttribute("path",path);
  if (context.isPathNotProcessed(path)) {
    try {
      context.addZipEntry(path,doc.formattedString());
    }
 catch (    IOException ioe) {
      if (_log.isWarnEnabled()) {
        _log.warn(ioe.getMessage());
      }
    }
    context.addPrimaryKey(String.class,path);
  }
}
