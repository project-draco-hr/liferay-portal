{
  long companyId=context.getCompanyId();
  long groupId=context.getGroupId();
  Portlet portlet=PortletLocalServiceUtil.getPortletById(context.getCompanyId(),portletId);
  if (portlet == null) {
    if (_log.isDebugEnabled()) {
      _log.debug("Do not export portlet " + portletId + " because the portlet does not exist");
    }
    return;
  }
  if ((!portlet.isInstanceable()) && (!portlet.isPreferencesUniquePerLayout()) && (context.hasNotUniquePerLayout(portletId))) {
    return;
  }
  Document doc=SAXReaderUtil.createDocument();
  Element portletEl=doc.addElement("portlet");
  portletEl.addAttribute("portlet-id",portletId);
  portletEl.addAttribute("root-portlet-id",PortletConstants.getRootPortletId(portletId));
  portletEl.addAttribute("old-plid",String.valueOf(layout.getPlid()));
  portletEl.addAttribute("scope-layout-id",String.valueOf(context.getScopeLayoutId()));
  javax.portlet.PortletPreferences jxPreferences=PortletPreferencesFactoryUtil.getPortletSetup(layout,portletId,StringPool.BLANK);
  if (exportPortletData) {
    if (!portlet.isPreferencesUniquePerLayout()) {
      String dataKey=portletId + StringPool.AT + context.getScopeLayoutId();
      if (!context.hasNotUniquePerLayout(dataKey)) {
        context.putNotUniquePerLayout(dataKey);
        exportPortletData(context,portlet,layout,jxPreferences,portletEl);
      }
    }
 else {
      exportPortletData(context,portlet,layout,jxPreferences,portletEl);
    }
  }
  if (exportPortletSetup) {
    exportPortletPreferences(context,PortletKeys.PREFS_OWNER_ID_DEFAULT,PortletKeys.PREFS_OWNER_TYPE_LAYOUT,false,layout,portletId,portletEl);
    exportPortletPreferences(context,groupId,PortletKeys.PREFS_OWNER_TYPE_GROUP,false,layout,portletId,portletEl);
    exportPortletPreferences(context,companyId,PortletKeys.PREFS_OWNER_TYPE_COMPANY,false,layout,portletId,portletEl);
  }
  if (exportPortletUserPreferences) {
    exportPortletPreferences(context,defaultUserId,PortletKeys.PREFS_OWNER_TYPE_USER,true,layout,portletId,portletEl);
    try {
      PortletPreferences groupPortletPreferences=PortletPreferencesLocalServiceUtil.getPortletPreferences(groupId,PortletKeys.PREFS_OWNER_TYPE_GROUP,PortletKeys.PREFS_PLID_SHARED,portletId);
      exportPortletPreference(context,groupId,PortletKeys.PREFS_OWNER_TYPE_GROUP,false,groupPortletPreferences,portletId,PortletKeys.PREFS_PLID_SHARED,portletEl);
    }
 catch (    NoSuchPortletPreferencesException nsppe) {
    }
  }
  if (exportPortletArchivedSetups) {
    String rootPortletId=PortletConstants.getRootPortletId(portletId);
    List<PortletItem> portletItems=PortletItemLocalServiceUtil.getPortletItems(groupId,rootPortletId,PortletPreferences.class.getName());
    for (    PortletItem portletItem : portletItems) {
      long ownerId=portletItem.getPortletItemId();
      int ownerType=PortletKeys.PREFS_OWNER_TYPE_ARCHIVED;
      exportPortletPreferences(context,ownerId,ownerType,false,null,portletItem.getPortletId(),portletEl);
    }
  }
  Group guestGroup=GroupLocalServiceUtil.getGroup(companyId,GroupConstants.GUEST);
  if (exportPermissions) {
    Element permissionsEl=portletEl.addElement("permissions");
    String resourceName=PortletConstants.getRootPortletId(portletId);
    String resourcePrimKey=PortletPermissionUtil.getPrimaryKey(layout.getPlid(),portletId);
    if (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 5) {
      exportPortletPermissions_5(layoutCache,companyId,groupId,resourceName,resourcePrimKey,permissionsEl);
    }
 else {
      exportPortletPermissions_4(layoutCache,companyId,groupId,guestGroup,resourceName,resourcePrimKey,permissionsEl,exportUserPermissions);
      Element rolesEl=portletEl.addElement("roles");
      exportPortletRoles(layoutCache,companyId,groupId,portletId,rolesEl);
    }
  }
  StringBuilder sb=new StringBuilder();
  sb.append(context.getPortletPath(portletId));
  if (portlet.isPreferencesUniquePerLayout()) {
    sb.append(StringPool.SLASH);
    sb.append(layout.getPlid());
  }
  sb.append("/portlet.xml");
  Element el=parentEl.addElement("portlet");
  el.addAttribute("portlet-id",portletId);
  el.addAttribute("layout-id",String.valueOf(layout.getLayoutId()));
  el.addAttribute("path",sb.toString());
  try {
    context.addZipEntry(sb.toString(),doc.formattedString());
  }
 catch (  IOException ioe) {
    if (_log.isWarnEnabled()) {
      _log.warn(ioe.getMessage());
    }
  }
}
