{
  if (DLAppHelperThreadLocal.isEnabled()) {
    updateAsset(userId,fileEntry,fileVersion,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
    if (PropsValues.DL_FILE_ENTRY_COMMENTS_ENABLED) {
      mbMessageLocalService.addDiscussionMessage(fileEntry.getUserId(),fileEntry.getUserName(),fileEntry.getGroupId(),DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId(),WorkflowConstants.ACTION_PUBLISH);
    }
  }
  boolean previousEnabled=WorkflowThreadLocal.isEnabled();
  if (!DLAppHelperThreadLocal.isEnabled()) {
    WorkflowThreadLocal.setEnabled(false);
  }
  try {
    if (fileVersion instanceof LiferayFileVersion) {
      DLFileVersion dlFileVersion=(DLFileVersion)fileVersion.getModel();
      Map<String,Serializable> workflowContext=new HashMap<String,Serializable>();
      workflowContext.put("event",DLSyncConstants.EVENT_ADD);
      WorkflowHandlerRegistryUtil.startWorkflowInstance(dlFileVersion.getCompanyId(),dlFileVersion.getGroupId(),userId,DLFileEntryConstants.getClassName(),dlFileVersion.getFileVersionId(),dlFileVersion,serviceContext,workflowContext);
      DLFileEntry dlFileEntry=(DLFileEntry)fileEntry.getModel();
      dlFileEntry.setFileVersion(null);
    }
  }
  finally {
    if (!DLAppHelperThreadLocal.isEnabled()) {
      WorkflowThreadLocal.setEnabled(previousEnabled);
    }
  }
  if (DLAppHelperThreadLocal.isEnabled()) {
    registerDLProcessorCallback(fileEntry,null);
  }
}
