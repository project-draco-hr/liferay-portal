{
  for (  Object object : dlFileEntriesAndDLFolders) {
    if (object instanceof DLFileEntry) {
      DLFileEntry dlFileEntry=(DLFileEntry)object;
      List<DLFileVersion> dlFileVersions=dlFileVersionLocalService.getFileVersions(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_ANY);
      dlFileVersions=ListUtil.copy(dlFileVersions);
      Collections.sort(dlFileVersions,new FileVersionVersionComparator());
      DLFileVersion latestDlFileVersion=dlFileVersions.get(0);
      if ((status == WorkflowConstants.STATUS_APPROVED) && (latestDlFileVersion.getStatus() == WorkflowConstants.STATUS_IN_TRASH)) {
        continue;
      }
      if (status == WorkflowConstants.STATUS_APPROVED) {
        dlFileShortcutLocalService.enableFileShortcuts(dlFileEntry.getFileEntryId());
      }
 else {
        dlFileShortcutLocalService.disableFileShortcuts(dlFileEntry.getFileEntryId());
      }
      if (status == WorkflowConstants.STATUS_APPROVED) {
        if (latestDlFileVersion.isApproved()) {
          assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),true);
        }
      }
 else {
        assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),false);
      }
      if (status == WorkflowConstants.STATUS_APPROVED) {
        socialActivityCounterLocalService.enableActivityCounters(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId());
      }
 else       if (latestDlFileVersion.getStatus() == WorkflowConstants.STATUS_APPROVED) {
        socialActivityCounterLocalService.disableActivityCounters(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId());
      }
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
      indexer.reindex(dlFileEntry);
      if (status != WorkflowConstants.STATUS_APPROVED) {
        for (        DLFileVersion dlFileVersion : dlFileVersions) {
          if (!dlFileVersion.isPending()) {
            continue;
          }
          dlFileVersion.setStatus(WorkflowConstants.STATUS_DRAFT);
          dlFileVersionPersistence.update(dlFileVersion);
          workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(dlFileVersion.getCompanyId(),dlFileVersion.getGroupId(),DLFileEntryConstants.getClassName(),dlFileVersion.getFileVersionId());
        }
      }
    }
 else     if (object instanceof DLFolder) {
      DLFolder dlFolder=(DLFolder)object;
      if (dlFolder.isInTrash()) {
        continue;
      }
      if (status == WorkflowConstants.STATUS_IN_TRASH) {
        assetEntryLocalService.updateVisible(DLFolderConstants.getClassName(),dlFolder.getFolderId(),false);
        socialActivityCounterLocalService.disableActivityCounters(DLFolderConstants.getClassName(),dlFolder.getFolderId());
      }
 else {
        assetEntryLocalService.updateVisible(DLFolderConstants.getClassName(),dlFolder.getFolderId(),true);
        socialActivityCounterLocalService.enableActivityCounters(DLFolderConstants.getClassName(),dlFolder.getFolderId());
      }
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFolder.class);
      indexer.reindex(dlFolder);
      QueryDefinition queryDefinition=new QueryDefinition(WorkflowConstants.STATUS_ANY);
      List<Object> foldersAndFileEntriesAndFileShortcuts=dlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(dlFolder.getGroupId(),dlFolder.getFolderId(),null,false,queryDefinition);
      updateDependentStatus(user,foldersAndFileEntriesAndFileShortcuts,status);
    }
  }
}
