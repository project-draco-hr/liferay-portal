{
  List<DLFileVersion> dlFileVersions=dlFileVersionLocalService.getFileVersions(fileEntry.getFileEntryId(),WorkflowConstants.STATUS_ANY);
  dlFileVersions=ListUtil.sort(dlFileVersions,new DLFileVersionVersionComparator());
  List<ObjectValuePair<Long,Integer>> dlFileVersionStatusOVPs=new ArrayList<>();
  if ((dlFileVersions != null) && !dlFileVersions.isEmpty()) {
    dlFileVersionStatusOVPs=getDlFileVersionStatuses(dlFileVersions);
  }
  FileVersion fileVersion=fileEntry.getFileVersion();
  int oldStatus=fileVersion.getStatus();
  dlFileEntryLocalService.updateStatus(userId,fileVersion.getFileVersionId(),WorkflowConstants.STATUS_IN_TRASH,new ServiceContext(),new HashMap<String,Serializable>());
  if (DLAppHelperThreadLocal.isEnabled()) {
    dlFileShortcutLocalService.disableFileShortcuts(fileEntry.getFileEntryId());
    dlFileRankLocalService.disableFileRanks(fileEntry.getFileEntryId());
    triggerRepositoryEvent(fileEntry.getRepositoryId(),TrashRepositoryEventType.EntryTrashed.class,FileEntry.class,fileEntry);
  }
  DLFileVersion oldDLFileVersion=(DLFileVersion)fileVersion.getModel();
  int oldDLFileVersionStatus=oldDLFileVersion.getStatus();
  for (  DLFileVersion curDLFileVersion : dlFileVersions) {
    curDLFileVersion.setStatus(WorkflowConstants.STATUS_IN_TRASH);
    dlFileVersionPersistence.update(curDLFileVersion);
  }
  DLFileEntry dlFileEntry=(DLFileEntry)fileEntry.getModel();
  UnicodeProperties typeSettingsProperties=new UnicodeProperties();
  typeSettingsProperties.put("fileName",dlFileEntry.getFileName());
  typeSettingsProperties.put("title",dlFileEntry.getTitle());
  TrashEntry trashEntry=trashEntryLocalService.addTrashEntry(userId,dlFileEntry.getGroupId(),DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),dlFileEntry.getUuid(),dlFileEntry.getClassName(),oldDLFileVersionStatus,dlFileVersionStatusOVPs,typeSettingsProperties);
  String trashTitle=TrashUtil.getTrashTitle(trashEntry.getEntryId());
  dlFileEntry.setFileName(trashTitle);
  dlFileEntry.setTitle(trashTitle);
  dlFileEntryPersistence.update(dlFileEntry);
  if (!DLAppHelperThreadLocal.isEnabled()) {
    return fileEntry;
  }
  JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
  extraDataJSONObject.put("title",TrashUtil.getOriginalTitle(fileEntry.getTitle()));
  SocialActivityHandlerUtil.addActivity(userId,fileEntry.getGroupId(),fileEntry,SocialActivityConstants.TYPE_MOVE_TO_TRASH,extraDataJSONObject.toString(),0);
  if (oldStatus == WorkflowConstants.STATUS_PENDING) {
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(fileVersion.getCompanyId(),fileVersion.getGroupId(),DLFileEntryConstants.getClassName(),fileVersion.getFileVersionId());
  }
  return fileEntry;
}
