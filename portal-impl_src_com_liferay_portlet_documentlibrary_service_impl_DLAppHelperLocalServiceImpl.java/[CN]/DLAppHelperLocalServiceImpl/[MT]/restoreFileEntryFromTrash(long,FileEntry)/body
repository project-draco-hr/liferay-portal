{
  DLFileEntry dlFileEntry=(DLFileEntry)fileEntry.getModel();
  FileVersion fileVersion=fileEntry.getFileVersion();
  if (!DLAppHelperThreadLocal.isEnabled()) {
    dlFileEntryLocalService.updateStatus(userId,fileVersion.getFileVersionId(),WorkflowConstants.STATUS_APPROVED,new ServiceContext(),new HashMap<String,Serializable>());
    return;
  }
  if (!dlFileEntry.isInTrash()) {
    throw new RestoreEntryException(RestoreEntryException.INVALID_STATUS);
  }
  dlFileEntry.setFileName(TrashUtil.getOriginalTitle(dlFileEntry.getTitle(),"fileName"));
  dlFileEntry.setTitle(TrashUtil.getOriginalTitle(dlFileEntry.getTitle()));
  dlFileEntryPersistence.update(dlFileEntry);
  TrashEntry trashEntry=trashEntryLocalService.getEntry(DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId());
  dlFileEntryLocalService.updateStatus(userId,fileVersion.getFileVersionId(),trashEntry.getStatus(),new ServiceContext(),new HashMap<String,Serializable>());
  dlFileRankLocalService.enableFileRanks(fileEntry.getFileEntryId());
  dlFileShortcutLocalService.enableFileShortcuts(fileEntry.getFileEntryId());
  triggerRepositoryEvent(fileEntry.getRepositoryId(),TrashRepositoryEventType.EntryRestored.class,FileEntry.class,fileEntry);
  List<TrashVersion> trashVersions=trashVersionLocalService.getVersions(trashEntry.getEntryId());
  for (  TrashVersion trashVersion : trashVersions) {
    DLFileVersion trashDLFileVersion=dlFileVersionPersistence.findByPrimaryKey(trashVersion.getClassPK());
    trashDLFileVersion.setStatus(trashVersion.getStatus());
    dlFileVersionPersistence.update(trashDLFileVersion);
  }
  trashEntryLocalService.deleteEntry(trashEntry.getEntryId());
  JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
  extraDataJSONObject.put("title",fileEntry.getTitle());
  SocialActivityManagerUtil.addActivity(userId,fileEntry,SocialActivityConstants.TYPE_RESTORE_FROM_TRASH,extraDataJSONObject.toString(),0);
}
