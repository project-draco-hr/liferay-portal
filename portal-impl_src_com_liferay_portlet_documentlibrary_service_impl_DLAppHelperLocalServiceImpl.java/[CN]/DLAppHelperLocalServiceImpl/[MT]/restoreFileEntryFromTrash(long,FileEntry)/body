{
  DLFileEntry dlFileEntry=(DLFileEntry)fileEntry.getModel();
  dlFileEntry.setFileName(TrashUtil.getOriginalTitle(dlFileEntry.getTitle(),"fileName"));
  dlFileEntry.setTitle(TrashUtil.getOriginalTitle(dlFileEntry.getTitle()));
  dlFileEntryPersistence.update(dlFileEntry);
  FileVersion fileVersion=fileEntry.getFileVersion();
  TrashEntry trashEntry=trashEntryLocalService.getEntry(DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId());
  dlFileEntryLocalService.updateStatus(userId,fileVersion.getFileVersionId(),trashEntry.getStatus(),new ServiceContext(),new HashMap<String,Serializable>());
  if (DLAppHelperThreadLocal.isEnabled()) {
    dlFileRankLocalService.enableFileRanks(fileEntry.getFileEntryId());
    dlFileShortcutLocalService.enableFileShortcuts(fileEntry.getFileEntryId());
    registerDLSyncEventCallback(DLSyncConstants.EVENT_RESTORE,fileEntry);
  }
  List<TrashVersion> trashVersions=trashVersionLocalService.getVersions(trashEntry.getEntryId());
  for (  TrashVersion trashVersion : trashVersions) {
    DLFileVersion trashDLFileVersion=dlFileVersionPersistence.findByPrimaryKey(trashVersion.getClassPK());
    trashDLFileVersion.setStatus(trashVersion.getStatus());
    dlFileVersionPersistence.update(trashDLFileVersion);
  }
  trashEntryLocalService.deleteEntry(trashEntry.getEntryId());
  if (!DLAppHelperThreadLocal.isEnabled()) {
    return;
  }
  JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
  extraDataJSONObject.put("title",fileEntry.getTitle());
  socialActivityLocalService.addActivity(userId,fileEntry.getGroupId(),DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId(),SocialActivityConstants.TYPE_RESTORE_FROM_TRASH,extraDataJSONObject.toString(),0);
}
