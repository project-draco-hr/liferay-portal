{
  List<DLFileEntry> dlFileEntries=dlFileEntryLocalService.getFileEntries(dlFolder.getGroupId(),dlFolder.getFolderId());
  for (  DLFileEntry dlFileEntry : dlFileEntries) {
    if (!dlFileEntry.isInTrashImplicitly()) {
      continue;
    }
    dlFileShortcutLocalService.enableFileShortcuts(dlFileEntry.getFileEntryId());
    List<DLFileVersion> dlFileVersions=dlFileVersionLocalService.getFileVersions(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_IN_TRASH);
    for (    DLFileVersion dlFileVersion : dlFileVersions) {
      TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFileVersion.class.getName(),dlFileVersion.getFileVersionId());
      int oldStatus=WorkflowConstants.STATUS_APPROVED;
      if (trashVersion != null) {
        oldStatus=trashVersion.getStatus();
      }
      dlFileVersion.setStatus(oldStatus);
      dlFileVersionPersistence.update(dlFileVersion);
      if (trashVersion != null) {
        trashVersionLocalService.deleteTrashVersion(trashVersion);
      }
    }
    DLFileVersion latestDlFileVersion=dlFileEntry.getLatestFileVersion(false);
    if (latestDlFileVersion.isApproved()) {
      assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),true);
    }
    Indexer<DLFileEntry> indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
    indexer.reindex(dlFileEntry);
  }
  List<DLFileShortcut> dlFileShortcuts=dlFileShortcutPersistence.findByG_F(dlFolder.getGroupId(),dlFolder.getFolderId());
  for (  DLFileShortcut dlFileShortcut : dlFileShortcuts) {
    if (!dlFileShortcut.isInTrashImplicitly()) {
      continue;
    }
    TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFileShortcutConstants.getClassName(),dlFileShortcut.getFileShortcutId());
    int oldStatus=WorkflowConstants.STATUS_APPROVED;
    if (trashVersion != null) {
      oldStatus=trashVersion.getStatus();
    }
    dlFileShortcut.setStatus(oldStatus);
    dlFileShortcutPersistence.update(dlFileShortcut);
    if (trashVersion != null) {
      trashVersionLocalService.deleteTrashVersion(trashVersion);
    }
  }
  List<DLFolder> dlFolders=dlFolderLocalService.getFolders(dlFolder.getGroupId(),dlFolder.getFolderId(),false);
  for (  DLFolder subFolder : dlFolders) {
    if (!subFolder.isInTrashImplicitly()) {
      continue;
    }
    TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFolder.class.getName(),subFolder.getFolderId());
    int oldStatus=WorkflowConstants.STATUS_APPROVED;
    if (trashVersion != null) {
      oldStatus=trashVersion.getStatus();
    }
    subFolder.setStatus(oldStatus);
    dlFolderPersistence.update(subFolder);
    restoreDependentsFromTrash(subFolder);
    if (trashVersion != null) {
      trashVersionLocalService.deleteTrashVersion(trashVersion);
    }
    assetEntryLocalService.updateVisible(DLFolderConstants.getClassName(),subFolder.getFolderId(),true);
    Indexer<DLFolder> indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFolder.class);
    indexer.reindex(subFolder);
  }
}
