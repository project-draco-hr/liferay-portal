{
  List<DLFolder> dlFolders=dlFolderPersistence.findByG_M_T_H(dlFolder.getGroupId(),false,CustomSQLUtil.keywords(dlFolder.getTreePath())[0],false);
  for (  DLFolder curFolder : dlFolders) {
    List<DLFileEntry> dlFileEntries=dlFileEntryLocalService.getFileEntries(curFolder.getGroupId(),curFolder.getFolderId());
    for (    DLFileEntry dlFileEntry : dlFileEntries) {
      if (!dlFileEntry.isInTrashImplicitly()) {
        continue;
      }
      dlFileShortcutLocalService.enableFileShortcuts(dlFileEntry.getFileEntryId());
      List<DLFileVersion> dlFileVersions=dlFileVersionLocalService.getFileVersions(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_IN_TRASH);
      for (      DLFileVersion dlFileVersion : dlFileVersions) {
        TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFileVersion.class.getName(),dlFileVersion.getFileVersionId());
        int oldStatus=WorkflowConstants.STATUS_APPROVED;
        if (trashVersion != null) {
          oldStatus=trashVersion.getStatus();
        }
        dlFileVersion.setStatus(oldStatus);
        dlFileVersionPersistence.update(dlFileVersion);
        if (trashVersion != null) {
          trashVersionLocalService.deleteTrashVersion(trashVersion);
        }
      }
      DLFileVersion latestDlFileVersion=dlFileEntry.getLatestFileVersion(false);
      if (latestDlFileVersion.isApproved()) {
        assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),true);
      }
      Indexer<DLFileEntry> indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
      indexer.reindex(dlFileEntry);
    }
    List<DLFileShortcut> dlFileShortcuts=dlFileShortcutPersistence.findByG_F(curFolder.getGroupId(),curFolder.getFolderId());
    for (    DLFileShortcut dlFileShortcut : dlFileShortcuts) {
      if (!dlFileShortcut.isInTrashImplicitly()) {
        continue;
      }
      TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFileShortcutConstants.getClassName(),dlFileShortcut.getFileShortcutId());
      int oldStatus=WorkflowConstants.STATUS_APPROVED;
      if (trashVersion != null) {
        oldStatus=trashVersion.getStatus();
      }
      dlFileShortcut.setStatus(oldStatus);
      dlFileShortcutPersistence.update(dlFileShortcut);
      if (trashVersion != null) {
        trashVersionLocalService.deleteTrashVersion(trashVersion);
      }
    }
    if (!curFolder.isInTrashImplicitly() || curFolder.equals(dlFolder)) {
      continue;
    }
    TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFolder.class.getName(),curFolder.getFolderId());
    int oldStatus=WorkflowConstants.STATUS_APPROVED;
    if (trashVersion != null) {
      oldStatus=trashVersion.getStatus();
    }
    curFolder.setStatus(oldStatus);
    dlFolderPersistence.update(curFolder);
    if (trashVersion != null) {
      trashVersionLocalService.deleteTrashVersion(trashVersion);
    }
    assetEntryLocalService.updateVisible(DLFolderConstants.getClassName(),curFolder.getFolderId(),true);
    Indexer<DLFolder> indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFolder.class);
    indexer.reindex(curFolder);
  }
}
