{
  DLFolder dlFolder=(DLFolder)folder.getModel();
  if (dlFolder.isInTrashExplicitly()) {
    restoreFolderFromTrash(userId,folder);
  }
 else {
    TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFolder.class.getName(),dlFolder.getFolderId());
    int status=WorkflowConstants.STATUS_APPROVED;
    if (trashVersion != null) {
      status=trashVersion.getStatus();
    }
    dlFolderLocalService.updateStatus(userId,folder.getFolderId(),status,new HashMap<String,Serializable>(),new ServiceContext());
    dlFileRankLocalService.enableFileRanksByFolderId(folder.getFolderId());
    if (trashVersion != null) {
      trashVersionLocalService.deleteTrashVersion(trashVersion);
    }
    QueryDefinition<?> queryDefinition=new QueryDefinition<>(WorkflowConstants.STATUS_IN_TRASH);
    List<Object> foldersAndFileEntriesAndFileShortcuts=dlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(dlFolder.getGroupId(),dlFolder.getFolderId(),null,false,queryDefinition);
    dlAppHelperLocalService.restoreDependentsFromTrash(foldersAndFileEntriesAndFileShortcuts);
    triggerRepositoryEvent(folder.getRepositoryId(),TrashRepositoryEventType.EntryRestored.class,Folder.class,folder);
    JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
    extraDataJSONObject.put("title",folder.getName());
    SocialActivityHandlerUtil.addActivity(userId,folder.getGroupId(),DLFolderConstants.class.getName(),folder.getFolderId(),SocialActivityConstants.TYPE_RESTORE_FROM_TRASH,extraDataJSONObject.toString(),0);
  }
  return dlAppLocalService.moveFolder(userId,folder.getFolderId(),parentFolderId,serviceContext);
}
