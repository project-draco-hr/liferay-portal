{
  List<DLFileEntry> dlFileEntries=dlFileEntryLocalService.getFileEntries(childDLFolder.getGroupId(),childDLFolder.getFolderId());
  for (  DLFileEntry dlFileEntry : dlFileEntries) {
    if (moveToTrash) {
      if (dlFileEntry.isInTrashExplicitly()) {
        continue;
      }
    }
 else     if (!dlFileEntry.isInTrashImplicitly()) {
      continue;
    }
    dlFileShortcutLocalService.updateFileShortcutsActive(dlFileEntry.getFileEntryId(),!moveToTrash);
    List<DLFileVersion> dlFileVersions=null;
    if (moveToTrash) {
      dlFileVersions=dlFileVersionLocalService.getFileVersions(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_ANY);
    }
 else {
      dlFileVersions=dlFileVersionLocalService.getFileVersions(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_IN_TRASH);
    }
    for (    DLFileVersion dlFileVersion : dlFileVersions) {
      if (moveToTrash) {
        int oldStatus=dlFileVersion.getStatus();
        dlFileVersion.setStatus(WorkflowConstants.STATUS_IN_TRASH);
        dlFileVersionPersistence.update(dlFileVersion);
        if (oldStatus != WorkflowConstants.STATUS_APPROVED) {
          int newStatus=oldStatus;
          if (oldStatus == WorkflowConstants.STATUS_PENDING) {
            newStatus=WorkflowConstants.STATUS_DRAFT;
          }
          trashVersionLocalService.addTrashVersion(trashEntry.getEntryId(),DLFileVersion.class.getName(),dlFileVersion.getFileVersionId(),newStatus,null);
        }
        if (oldStatus == WorkflowConstants.STATUS_PENDING) {
          workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(dlFileVersion.getCompanyId(),dlFileVersion.getGroupId(),DLFileEntryConstants.getClassName(),dlFileVersion.getFileVersionId());
        }
      }
 else {
        TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFileVersion.class.getName(),dlFileVersion.getFileVersionId());
        int oldStatus=WorkflowConstants.STATUS_APPROVED;
        if (trashVersion != null) {
          oldStatus=trashVersion.getStatus();
        }
        dlFileVersion.setStatus(oldStatus);
        dlFileVersionPersistence.update(dlFileVersion);
        if (trashVersion != null) {
          trashVersionLocalService.deleteTrashVersion(trashVersion);
        }
      }
    }
    assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),!moveToTrash);
    Indexer<DLFileEntry> indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
    indexer.reindex(dlFileEntry);
  }
  List<DLFileShortcut> dlFileShortcuts=dlFileShortcutPersistence.findByG_F(childDLFolder.getGroupId(),childDLFolder.getFolderId());
  for (  DLFileShortcut dlFileShortcut : dlFileShortcuts) {
    if (moveToTrash) {
      if (dlFileShortcut.isInTrashExplicitly()) {
        continue;
      }
      int oldStatus=dlFileShortcut.getStatus();
      dlFileShortcut.setStatus(WorkflowConstants.STATUS_IN_TRASH);
      dlFileShortcutPersistence.update(dlFileShortcut);
      if (oldStatus != WorkflowConstants.STATUS_APPROVED) {
        trashVersionLocalService.addTrashVersion(trashEntry.getEntryId(),DLFileShortcutConstants.getClassName(),dlFileShortcut.getFileShortcutId(),oldStatus,null);
      }
    }
 else {
      if (!dlFileShortcut.isInTrashImplicitly()) {
        continue;
      }
      TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFileShortcutConstants.getClassName(),dlFileShortcut.getFileShortcutId());
      int oldStatus=WorkflowConstants.STATUS_APPROVED;
      if (trashVersion != null) {
        oldStatus=trashVersion.getStatus();
      }
      dlFileShortcut.setStatus(oldStatus);
      dlFileShortcutPersistence.update(dlFileShortcut);
      if (trashVersion != null) {
        trashVersionLocalService.deleteTrashVersion(trashVersion);
      }
    }
  }
  if (childDLFolder.equals(dlFolder)) {
    return;
  }
  if (moveToTrash) {
    if (childDLFolder.isInTrashExplicitly()) {
      return;
    }
    int oldStatus=childDLFolder.getStatus();
    childDLFolder.setStatus(WorkflowConstants.STATUS_IN_TRASH);
    dlFolderPersistence.update(childDLFolder);
    if (oldStatus != WorkflowConstants.STATUS_APPROVED) {
      trashVersionLocalService.addTrashVersion(trashEntry.getEntryId(),DLFolder.class.getName(),childDLFolder.getFolderId(),oldStatus,null);
    }
  }
 else {
    if (!childDLFolder.isInTrashImplicitly()) {
      return;
    }
    TrashVersion trashVersion=trashVersionLocalService.fetchVersion(DLFolder.class.getName(),childDLFolder.getFolderId());
    int oldStatus=WorkflowConstants.STATUS_APPROVED;
    if (trashVersion != null) {
      oldStatus=trashVersion.getStatus();
    }
    childDLFolder.setStatus(oldStatus);
    dlFolderPersistence.update(childDLFolder);
    if (trashVersion != null) {
      trashVersionLocalService.deleteTrashVersion(trashVersion);
    }
  }
  assetEntryLocalService.updateVisible(DLFolderConstants.getClassName(),childDLFolder.getFolderId(),!moveToTrash);
  Indexer<DLFolder> indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFolder.class);
  indexer.reindex(childDLFolder);
}
