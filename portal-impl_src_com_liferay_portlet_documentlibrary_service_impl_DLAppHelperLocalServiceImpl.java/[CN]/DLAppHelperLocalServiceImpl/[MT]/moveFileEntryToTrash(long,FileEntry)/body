{
  List<DLFileVersion> dlFileVersions=dlFileVersionLocalService.getFileVersions(fileEntry.getFileEntryId(),WorkflowConstants.STATUS_ANY);
  dlFileVersions=ListUtil.copy(dlFileVersions);
  Collections.sort(dlFileVersions,new FileVersionVersionComparator());
  FileVersion fileVersion=new LiferayFileVersion(dlFileVersions.get(0));
  int oldStatus=fileVersion.getStatus();
  dlFileEntryLocalService.updateStatus(userId,fileVersion.getFileVersionId(),WorkflowConstants.STATUS_IN_TRASH,new HashMap<String,Serializable>(),new ServiceContext());
  socialActivityLocalService.addActivity(userId,fileEntry.getGroupId(),DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId(),SocialActivityConstants.TYPE_MOVE_TO_TRASH,StringPool.BLANK,0);
  List<ObjectValuePair<Long,Integer>> fileVersionStatuses=new ArrayList<ObjectValuePair<Long,Integer>>(dlFileVersions.size());
  for (  DLFileVersion dlFileVersion : dlFileVersions) {
    ObjectValuePair<Long,Integer> fileVersionStatus=new ObjectValuePair<Long,Integer>();
    fileVersionStatus.setKey(dlFileVersion.getFileVersionId());
    fileVersionStatus.setValue(dlFileVersion.getStatus());
    fileVersionStatuses.add(fileVersionStatus);
  }
  trashEntryLocalService.addTrashEntry(fileEntry.getCompanyId(),fileEntry.getGroupId(),DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId(),oldStatus,fileVersionStatuses,null);
  if (oldStatus == WorkflowConstants.STATUS_PENDING) {
    workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(fileVersion.getCompanyId(),fileVersion.getGroupId(),DLFileEntryConstants.getClassName(),fileVersion.getFileVersionId());
  }
  return fileEntry;
}
