{
  for (  Object object : dlFileEntriesAndDLFolders) {
    if (object instanceof DLFileEntry) {
      DLFileEntry dlFileEntry=(DLFileEntry)object;
      List<DLFileVersion> dlFileVersions=dlFileVersionLocalService.getFileVersions(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_ANY);
      dlFileVersions=ListUtil.copy(dlFileVersions);
      Collections.sort(dlFileVersions,new FileVersionVersionComparator());
      dlFileShortcutLocalService.disableFileShortcuts(dlFileEntry.getFileEntryId());
      assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),false);
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
      indexer.reindex(dlFileEntry);
      for (      DLFileVersion dlFileVersion : dlFileVersions) {
        if (!dlFileVersion.isPending()) {
          continue;
        }
        dlFileVersion.setStatus(WorkflowConstants.STATUS_DRAFT);
        dlFileVersionPersistence.update(dlFileVersion);
        workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(dlFileVersion.getCompanyId(),dlFileVersion.getGroupId(),DLFileEntryConstants.getClassName(),dlFileVersion.getFileVersionId());
      }
    }
 else     if (object instanceof DLFolder) {
      DLFolder dlFolder=(DLFolder)object;
      if (dlFolder.isInTrash()) {
        continue;
      }
      QueryDefinition queryDefinition=new QueryDefinition(WorkflowConstants.STATUS_ANY);
      List<Object> foldersAndFileEntriesAndFileShortcuts=dlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(dlFolder.getGroupId(),dlFolder.getFolderId(),null,false,queryDefinition);
      moveDependentsToTrash(foldersAndFileEntriesAndFileShortcuts);
      assetEntryLocalService.updateVisible(DLFolderConstants.getClassName(),dlFolder.getFolderId(),false);
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFolder.class);
      indexer.reindex(dlFolder);
    }
  }
}
