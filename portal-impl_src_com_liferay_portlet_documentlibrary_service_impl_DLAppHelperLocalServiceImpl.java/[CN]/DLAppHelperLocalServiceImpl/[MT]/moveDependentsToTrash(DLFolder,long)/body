{
  List<DLFolder> dlFolders=dlFolderPersistence.findByG_M_T_H(dlFolder.getGroupId(),false,CustomSQLUtil.keywords(dlFolder.getTreePath())[0],false);
  for (  DLFolder curFolder : dlFolders) {
    List<DLFileEntry> dlFileEntries=dlFileEntryLocalService.getFileEntries(curFolder.getGroupId(),curFolder.getFolderId());
    for (    DLFileEntry dlFileEntry : dlFileEntries) {
      if (dlFileEntry.isInTrashExplicitly()) {
        continue;
      }
      dlFileShortcutLocalService.disableFileShortcuts(dlFileEntry.getFileEntryId());
      List<DLFileVersion> dlFileVersions=dlFileVersionLocalService.getFileVersions(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_ANY);
      for (      DLFileVersion dlFileVersion : dlFileVersions) {
        int oldStatus=dlFileVersion.getStatus();
        dlFileVersion.setStatus(WorkflowConstants.STATUS_IN_TRASH);
        dlFileVersionPersistence.update(dlFileVersion);
        if (oldStatus != WorkflowConstants.STATUS_APPROVED) {
          int status=oldStatus;
          if (oldStatus == WorkflowConstants.STATUS_PENDING) {
            status=WorkflowConstants.STATUS_DRAFT;
          }
          trashVersionLocalService.addTrashVersion(trashEntryId,DLFileVersion.class.getName(),dlFileVersion.getFileVersionId(),status,null);
        }
        if (oldStatus == WorkflowConstants.STATUS_PENDING) {
          workflowInstanceLinkLocalService.deleteWorkflowInstanceLink(dlFileVersion.getCompanyId(),dlFileVersion.getGroupId(),DLFileEntryConstants.getClassName(),dlFileVersion.getFileVersionId());
        }
      }
      assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),false);
      Indexer<DLFileEntry> indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
      indexer.reindex(dlFileEntry);
    }
    List<DLFileShortcut> dlFileShortcuts=dlFileShortcutPersistence.findByG_F(curFolder.getGroupId(),curFolder.getFolderId());
    for (    DLFileShortcut dlFileShortcut : dlFileShortcuts) {
      if (dlFileShortcut.isInTrash()) {
        continue;
      }
      int oldStatus=dlFileShortcut.getStatus();
      dlFileShortcut.setStatus(WorkflowConstants.STATUS_IN_TRASH);
      dlFileShortcutPersistence.update(dlFileShortcut);
      if (oldStatus != WorkflowConstants.STATUS_APPROVED) {
        trashVersionLocalService.addTrashVersion(trashEntryId,DLFileShortcutConstants.getClassName(),dlFileShortcut.getFileShortcutId(),oldStatus,null);
      }
    }
    if (curFolder.isInTrashExplicitly() || curFolder.equals(dlFolder)) {
      continue;
    }
    int oldStatus=curFolder.getStatus();
    curFolder.setStatus(WorkflowConstants.STATUS_IN_TRASH);
    dlFolderPersistence.update(curFolder);
    if (oldStatus != WorkflowConstants.STATUS_APPROVED) {
      trashVersionLocalService.addTrashVersion(trashEntryId,DLFolder.class.getName(),curFolder.getFolderId(),oldStatus,null);
    }
    assetEntryLocalService.updateVisible(DLFolderConstants.getClassName(),curFolder.getFolderId(),false);
    Indexer<DLFolder> indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFolder.class);
    indexer.reindex(curFolder);
  }
}
