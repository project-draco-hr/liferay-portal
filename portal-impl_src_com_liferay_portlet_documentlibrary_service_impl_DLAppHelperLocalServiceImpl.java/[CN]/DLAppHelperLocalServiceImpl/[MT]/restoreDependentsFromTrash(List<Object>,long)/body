{
  for (  Object object : dlFileEntriesAndDLFolders) {
    if (object instanceof DLFileEntry) {
      DLFileEntry dlFileEntry=(DLFileEntry)object;
      TrashEntry trashEntry=trashEntryLocalService.fetchEntry(DLFileEntry.class.getName(),dlFileEntry.getFileEntryId());
      if (trashEntry != null) {
        continue;
      }
      List<DLFileVersion> dlFileVersions=dlFileVersionLocalService.getFileVersions(dlFileEntry.getFileEntryId(),WorkflowConstants.STATUS_IN_TRASH);
      for (      DLFileVersion dlFileVersion : dlFileVersions) {
        TrashVersion trashVersion=trashVersionLocalService.fetchVersion(trashEntryId,DLFileVersion.class.getName(),dlFileVersion.getFileVersionId());
        int oldStatus=WorkflowConstants.STATUS_APPROVED;
        if (trashVersion != null) {
          oldStatus=trashVersion.getStatus();
        }
        dlFileVersion.setStatus(oldStatus);
        dlFileVersionPersistence.update(dlFileVersion);
        if (trashVersion != null) {
          trashVersionLocalService.deleteTrashVersion(trashVersion);
        }
      }
      dlFileShortcutLocalService.enableFileShortcuts(dlFileEntry.getFileEntryId());
      DLFileVersion latestDlFileVersion=dlFileEntry.getLatestFileVersion(false);
      if (latestDlFileVersion.isApproved()) {
        assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),dlFileEntry.getFileEntryId(),true);
      }
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class);
      indexer.reindex(dlFileEntry);
    }
 else     if (object instanceof DLFolder) {
      DLFolder dlFolder=(DLFolder)object;
      TrashEntry trashEntry=trashEntryLocalService.fetchEntry(DLFolder.class.getName(),dlFolder.getFolderId());
      if (trashEntry != null) {
        continue;
      }
      TrashVersion trashVersion=trashVersionLocalService.fetchVersion(trashEntryId,DLFolder.class.getName(),dlFolder.getFolderId());
      int oldStatus=WorkflowConstants.STATUS_APPROVED;
      if (trashVersion != null) {
        oldStatus=trashVersion.getStatus();
      }
      dlFolder.setStatus(oldStatus);
      dlFolderPersistence.update(dlFolder);
      QueryDefinition queryDefinition=new QueryDefinition(WorkflowConstants.STATUS_ANY);
      List<Object> foldersAndFileEntriesAndFileShortcuts=dlFolderLocalService.getFoldersAndFileEntriesAndFileShortcuts(dlFolder.getGroupId(),dlFolder.getFolderId(),null,false,queryDefinition);
      restoreDependentsFromTrash(foldersAndFileEntriesAndFileShortcuts,trashEntryId);
      if (trashVersion != null) {
        trashVersionLocalService.deleteTrashVersion(trashVersion);
      }
      assetEntryLocalService.updateVisible(DLFolderConstants.getClassName(),dlFolder.getFolderId(),true);
      Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(DLFolder.class);
      indexer.reindex(dlFolder);
    }
  }
}
