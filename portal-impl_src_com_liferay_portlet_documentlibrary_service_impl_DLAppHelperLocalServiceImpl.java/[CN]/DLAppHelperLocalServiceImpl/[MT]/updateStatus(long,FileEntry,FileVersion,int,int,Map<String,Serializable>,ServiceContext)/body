{
  if (!DLAppHelperThreadLocal.isEnabled()) {
    return;
  }
  if (newStatus == WorkflowConstants.STATUS_APPROVED) {
    String latestFileVersionVersion=latestFileVersion.getVersion();
    if (latestFileVersionVersion.equals(fileEntry.getVersion())) {
      if (!latestFileVersionVersion.equals(DLFileEntryConstants.VERSION_DEFAULT)) {
        AssetEntry draftAssetEntry=assetEntryLocalService.fetchEntry(DLFileEntryConstants.getClassName(),latestFileVersion.getPrimaryKey());
        if (draftAssetEntry != null) {
          long fileEntryTypeId=getFileEntryTypeId(fileEntry);
          long[] assetCategoryIds=draftAssetEntry.getCategoryIds();
          String[] assetTagNames=draftAssetEntry.getTagNames();
          List<AssetLink> assetLinks=assetLinkLocalService.getDirectLinks(draftAssetEntry.getEntryId(),AssetLinkConstants.TYPE_RELATED);
          long[] assetLinkEntryIds=StringUtil.split(ListUtil.toString(assetLinks,AssetLink.ENTRY_ID2_ACCESSOR),0L);
          AssetEntry assetEntry=assetEntryLocalService.updateEntry(userId,fileEntry.getGroupId(),fileEntry.getCreateDate(),fileEntry.getModifiedDate(),DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId(),fileEntry.getUuid(),fileEntryTypeId,assetCategoryIds,assetTagNames,true,null,null,null,draftAssetEntry.getMimeType(),fileEntry.getTitle(),fileEntry.getDescription(),null,null,null,0,0,null,false);
          assetLinkLocalService.updateLinks(userId,assetEntry.getEntryId(),assetLinkEntryIds,AssetLinkConstants.TYPE_RELATED);
          assetEntryLocalService.deleteEntry(draftAssetEntry);
        }
      }
      assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId(),true);
    }
    String event=(String)workflowContext.get("event");
    if (!isStagingGroup(fileEntry.getGroupId()) && Validator.isNotNull(event)) {
      registerDLSyncEventCallback(event,DLSyncConstants.TYPE_FILE,fileEntry.getFileEntryId());
    }
    if ((oldStatus != WorkflowConstants.STATUS_IN_TRASH) && !latestFileVersion.isInTrashContainer()) {
      Date activityDate=latestFileVersion.getModifiedDate();
      int activityType=DLActivityKeys.UPDATE_FILE_ENTRY;
      if (event.equals(DLSyncConstants.EVENT_ADD)) {
        activityDate=latestFileVersion.getCreateDate();
        activityType=DLActivityKeys.ADD_FILE_ENTRY;
      }
      socialActivityLocalService.addUniqueActivity(latestFileVersion.getStatusByUserId(),fileEntry.getGroupId(),activityDate,DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId(),activityType,StringPool.BLANK,0);
      notifySubscribers(latestFileVersion,serviceContext);
    }
  }
 else {
    boolean visible=false;
    if (newStatus != WorkflowConstants.STATUS_IN_TRASH) {
      List<DLFileVersion> approvedFileVersions=dlFileVersionPersistence.findByF_S(fileEntry.getFileEntryId(),WorkflowConstants.STATUS_APPROVED);
      if (!approvedFileVersions.isEmpty()) {
        visible=true;
      }
    }
    assetEntryLocalService.updateVisible(DLFileEntryConstants.getClassName(),fileEntry.getFileEntryId(),visible);
  }
}
