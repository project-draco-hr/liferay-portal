{
  initExport();
  Map<String,List<StagedModel>> dependentStagedModelsMap=new HashMap<String,List<StagedModel>>();
  Layout linkedLayout=LayoutTestUtil.addLayout(stagingGroup);
  List<LayoutFriendlyURL> linkedLayoutFriendlyURLs=LayoutFriendlyURLLocalServiceUtil.getLayoutFriendlyURLs(linkedLayout.getPlid());
  addDependentStagedModel(dependentStagedModelsMap,Layout.class,linkedLayout);
  addDependentLayoutFriendlyURLs(dependentStagedModelsMap,linkedLayout);
  Layout layout=LayoutTestUtil.addTypeLinkToLayoutLayout(stagingGroup.getGroupId(),linkedLayout.getLayoutId());
  List<LayoutFriendlyURL> layoutFriendlyURLs=LayoutFriendlyURLLocalServiceUtil.getLayoutFriendlyURLs(layout.getPlid());
  addDependentLayoutFriendlyURLs(dependentStagedModelsMap,layout);
  StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,layout);
  validateExport(portletDataContext,layout,dependentStagedModelsMap);
  initImport();
  Layout exportedLayout=(Layout)readExportedStagedModel(layout);
  StagedModelDataHandlerUtil.importStagedModel(portletDataContext,exportedLayout);
  LayoutLocalServiceUtil.getLayoutByUuidAndGroupId(linkedLayout.getUuid(),liveGroup.getGroupId(),false);
  LayoutFriendlyURL linkedLayoutFriendlyURL=linkedLayoutFriendlyURLs.get(0);
  LayoutFriendlyURLLocalServiceUtil.getLayoutFriendlyURLByUuidAndGroupId(linkedLayoutFriendlyURL.getUuid(),liveGroup.getGroupId());
  LayoutLocalServiceUtil.getLayoutByUuidAndGroupId(layout.getUuid(),liveGroup.getGroupId(),false);
  LayoutFriendlyURL layoutFriendlyURL=layoutFriendlyURLs.get(0);
  LayoutFriendlyURLLocalServiceUtil.getLayoutFriendlyURLByUuidAndGroupId(layoutFriendlyURL.getUuid(),liveGroup.getGroupId());
}
