{
  templateIds=CustomSQLUtil.keywords(templateIds,false);
  names=CustomSQLUtil.keywords(names);
  descriptions=CustomSQLUtil.keywords(descriptions);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(COUNT_BY_C_G_T_S_N_D);
    sql=StringUtil.replace(sql,"[$GROUP_ID$]",getGroupIds(groupIds));
    sql=CustomSQLUtil.replaceKeywords(sql,"templateId",StringPool.LIKE,false,templateIds);
    if (structureIdComparator.equals(StringPool.NOT_LIKE)) {
      sql=replaceStructureIdComparator(sql);
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(name)",StringPool.LIKE,false,names);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(description)",StringPool.LIKE,true,descriptions);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    qPos.add(groupIds);
    qPos.add(templateIds,2);
    if (structureIdComparator.equals(StringPool.LIKE)) {
      qPos.add(structureId);
      qPos.add(structureId);
    }
    qPos.add(names,2);
    qPos.add(descriptions,2);
    if (structureIdComparator.equals(StringPool.NOT_LIKE)) {
      if (CustomSQLUtil.isVendorOracle()) {
      }
 else {
        qPos.add(structureId);
      }
    }
    Iterator<Long> itr=q.list().iterator();
    if (itr.hasNext()) {
      Long count=itr.next();
      if (count != null) {
        return count.intValue();
      }
    }
    return 0;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
