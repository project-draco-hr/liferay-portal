{
  long workflowInstanceId=1;
  boolean includeChildren=false;
  WorkflowInstanceHistory history1=context.mock(WorkflowInstanceHistory.class,"history1");
  WorkflowInstanceHistory history2=context.mock(WorkflowInstanceHistory.class,"history2");
  List<WorkflowInstanceHistory> histories=new ArrayList<WorkflowInstanceHistory>();
  histories.add(history1);
  histories.add(history2);
  ignored(4,0);
  final WorkflowInstanceRequest request=WorkflowInstanceRequest.createGetWorkflowInstanceHistoryRequest(workflowInstanceId,includeChildren);
  final WorkflowResultContainer<List<WorkflowInstanceHistory>> correctResult=new WorkflowResultContainer<List<WorkflowInstanceHistory>>(histories);
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(returnValue(correctResult));
    }
  }
);
  assertSame(histories,workflowInstanceManagerProxy.getWorkflowInstanceHistory(workflowInstanceId,includeChildren));
  final WorkflowResultContainer<List<WorkflowInstanceHistory>> errorResult=new WorkflowResultContainer<List<WorkflowInstanceHistory>>();
  errorResult.setException(new WorkflowException());
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(returnValue(errorResult));
    }
  }
);
  boolean errorFlag=false;
  try {
    workflowInstanceManagerProxy.getWorkflowInstanceHistory(workflowInstanceId,includeChildren);
  }
 catch (  WorkflowException ex) {
    errorFlag=true;
  }
  assertTrue(errorFlag);
  final MessageBusException exception=new MessageBusException();
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(throwException(exception));
    }
  }
);
  errorFlag=false;
  try {
    workflowInstanceManagerProxy.getWorkflowInstanceHistory(workflowInstanceId,includeChildren);
  }
 catch (  WorkflowException ex) {
    errorFlag=true;
  }
  assertTrue(errorFlag);
}
