{
  String relationType="relationType";
  long relationId=1;
  WorkflowInstanceInfo info1=context.mock(WorkflowInstanceInfo.class,"info1");
  WorkflowInstanceInfo info2=context.mock(WorkflowInstanceInfo.class,"info2");
  List<WorkflowInstanceInfo> infos=new ArrayList<WorkflowInstanceInfo>();
  infos.add(info1);
  infos.add(info2);
  ignored(4,0);
  final WorkflowInstanceRequest request=WorkflowInstanceRequest.createGetWorkflowInstanceInfosRequest(relationType,relationId,false);
  final WorkflowResultContainer<List<WorkflowInstanceInfo>> correctResult=new WorkflowResultContainer<List<WorkflowInstanceInfo>>(infos);
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(returnValue(correctResult));
    }
  }
);
  assertSame(infos,workflowInstanceManagerProxy.getWorkflowInstanceInfos(relationType,relationId,false));
  final WorkflowResultContainer<List<WorkflowInstanceInfo>> errorResult=new WorkflowResultContainer<List<WorkflowInstanceInfo>>();
  errorResult.setException(new WorkflowException());
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(returnValue(errorResult));
    }
  }
);
  boolean errorFlag=false;
  try {
    workflowInstanceManagerProxy.getWorkflowInstanceInfos(relationType,relationId,false);
  }
 catch (  WorkflowException ex) {
    errorFlag=true;
  }
  assertTrue(errorFlag);
  final MessageBusException exception=new MessageBusException();
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(throwException(exception));
    }
  }
);
  errorFlag=false;
  try {
    workflowInstanceManagerProxy.getWorkflowInstanceInfos(relationType,relationId,false);
  }
 catch (  WorkflowException ex) {
    errorFlag=true;
  }
  assertTrue(errorFlag);
}
