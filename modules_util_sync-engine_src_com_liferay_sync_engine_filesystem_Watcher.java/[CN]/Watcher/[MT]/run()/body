{
  while (true) {
    try {
      if (_watchService == null) {
        break;
      }
      WatchKey watchKey=_watchService.take();
      Path parentFilePath=_filePaths.get(watchKey);
      if (parentFilePath == null) {
        continue;
      }
      List<WatchEvent<?>> watchEvents=watchKey.pollEvents();
      for (int i=0; i < watchEvents.size(); i++) {
        WatchEvent<Path> watchEvent=(WatchEvent<Path>)watchEvents.get(i);
        PathImpl pathImpl=(PathImpl)watchEvent.context();
        if (pathImpl == null) {
          continue;
        }
        WatchEvent.Kind<?> kind=watchEvent.kind();
        Path childFilePath=parentFilePath.resolve(pathImpl.toString());
        if (kind == StandardWatchEventKind.ENTRY_CREATE) {
          if (isIgnoredFilePath(childFilePath)) {
            continue;
          }
          _createdFilePathNames.add(childFilePath.toString());
          if (_downloadedFilePathNames.remove(childFilePath.toString())) {
            continue;
          }
          fireWatchEventListener(childFilePath,watchEvent);
          if (_recursive && Files.isDirectory(childFilePath,LinkOption.NOFOLLOW_LINKS)) {
            registerFilePath(childFilePath,true);
          }
        }
 else         if (kind == StandardWatchEventKind.ENTRY_DELETE) {
          processMissingFilePath(childFilePath);
          fireWatchEventListener(childFilePath,watchEvent);
        }
 else         if (kind == StandardWatchEventKind.ENTRY_MODIFY) {
          if (_createdFilePathNames.remove(childFilePath.toString()) || Files.isDirectory(childFilePath)) {
            continue;
          }
          fireWatchEventListener(childFilePath,watchEvent);
        }
      }
      if (!watchKey.reset()) {
        Path filePath=_filePaths.remove(watchKey);
        if (_logger.isTraceEnabled()) {
          _logger.trace("Unregistered file path {}",filePath);
        }
        processMissingFilePath(filePath);
        if (_filePaths.isEmpty()) {
          break;
        }
      }
    }
 catch (    Exception e) {
      _logger.error(e.getMessage(),e);
    }
  }
}
