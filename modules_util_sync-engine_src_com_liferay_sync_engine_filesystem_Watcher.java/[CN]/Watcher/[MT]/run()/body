{
  while (true) {
    try {
      if (_watchService == null) {
        break;
      }
      WatchKey watchKey=null;
      try {
        watchKey=_watchService.take();
      }
 catch (      Exception e) {
        if (_logger.isTraceEnabled()) {
          _logger.trace(e.getMessage(),e);
        }
        continue;
      }
      Path parentFilePath=_filePaths.get(watchKey);
      if (parentFilePath == null) {
        continue;
      }
      List<WatchEvent<?>> watchEvents=watchKey.pollEvents();
      for (int i=0; i < watchEvents.size(); i++) {
        WatchEvent<Path> watchEvent=(WatchEvent<Path>)watchEvents.get(i);
        PathImpl pathImpl=(PathImpl)watchEvent.context();
        if (pathImpl == null) {
          continue;
        }
        WatchEvent.Kind<?> kind=watchEvent.kind();
        Path childFilePath=parentFilePath.resolve(pathImpl.toString());
        if (OSDetector.isWindows() && childFilePath.startsWith(_dataFilePath)) {
          continue;
        }
        if (kind == StandardWatchEventKind.ENTRY_CREATE) {
          if (isIgnoredFilePath(childFilePath)) {
            continue;
          }
          addCreatedFilePathName(childFilePath.toString());
          if (_downloadedFilePathNames.remove(childFilePath.toString())) {
            continue;
          }
          fireWatchEventListener(childFilePath,watchEvent);
          if (_recursive && Files.isDirectory(childFilePath,LinkOption.NOFOLLOW_LINKS)) {
            registerFilePath(childFilePath,true);
          }
        }
 else         if (kind == StandardWatchEventKind.ENTRY_DELETE) {
          processMissingFilePath(childFilePath);
          fireWatchEventListener(childFilePath,watchEvent);
        }
 else         if (kind == StandardWatchEventKind.ENTRY_MODIFY) {
          if ((removeCreatedFilePathName(childFilePath.toString()) && !FileUtil.isValidChecksum(childFilePath)) || Files.isDirectory(childFilePath)) {
            continue;
          }
          fireWatchEventListener(childFilePath,watchEvent);
        }
      }
      for (      Path failedFilePath : _failedFilePaths) {
        if (Files.notExists(failedFilePath)) {
          _failedFilePaths.remove(failedFilePath);
          continue;
        }
        if (!Files.isReadable(failedFilePath)) {
          continue;
        }
        _failedFilePaths.remove(failedFilePath);
        if (Files.isDirectory(failedFilePath)) {
          registerFilePath(failedFilePath,true);
        }
 else {
          SyncFile syncFile=SyncFileService.fetchSyncFile(failedFilePath.toString());
          if (syncFile == null) {
            fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_CREATE,failedFilePath);
          }
 else           if (FileUtil.hasFileChanged(syncFile,failedFilePath)) {
            fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_MODIFY,failedFilePath);
          }
        }
      }
      if (!watchKey.reset()) {
        Path filePath=_filePaths.remove(watchKey);
        if (_logger.isTraceEnabled()) {
          _logger.trace("Unregistered file path {}",filePath);
        }
        processMissingFilePath(filePath);
        if (_filePaths.isEmpty()) {
          break;
        }
      }
    }
 catch (    Exception e) {
      _logger.error(e.getMessage(),e);
    }
  }
}
