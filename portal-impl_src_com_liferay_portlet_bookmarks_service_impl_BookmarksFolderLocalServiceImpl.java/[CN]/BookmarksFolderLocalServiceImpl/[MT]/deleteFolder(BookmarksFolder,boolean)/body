{
  List<BookmarksFolder> folders=bookmarksFolderPersistence.findByG_P(folder.getGroupId(),folder.getFolderId());
  for (  BookmarksFolder curFolder : folders) {
    if (includeTrashedEntries || !curFolder.isInTrashExplicitly()) {
      deleteFolder(curFolder);
    }
  }
  bookmarksFolderPersistence.remove(folder);
  resourceLocalService.deleteResource(folder,ResourceConstants.SCOPE_INDIVIDUAL);
  bookmarksEntryLocalService.deleteEntries(folder.getGroupId(),folder.getFolderId(),includeTrashedEntries);
  assetEntryLocalService.deleteEntry(BookmarksFolder.class.getName(),folder.getFolderId());
  expandoRowLocalService.deleteRows(folder.getFolderId());
  subscriptionLocalService.deleteSubscriptions(folder.getCompanyId(),BookmarksFolder.class.getName(),folder.getFolderId());
  if (folder.isInTrashExplicitly()) {
    trashEntryLocalService.deleteEntry(BookmarksFolder.class.getName(),folder.getFolderId());
  }
 else {
    trashVersionLocalService.deleteTrashVersion(BookmarksFolder.class.getName(),folder.getFolderId());
  }
  return folder;
}
