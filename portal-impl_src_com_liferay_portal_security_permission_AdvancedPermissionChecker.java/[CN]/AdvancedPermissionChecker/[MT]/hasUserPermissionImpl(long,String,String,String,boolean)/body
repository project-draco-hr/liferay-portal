{
  StopWatch stopWatch=null;
  if (_log.isDebugEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  long companyId=user.getCompanyId();
  boolean hasLayoutManagerPermission=true;
  if (Validator.isNotNull(name) && Validator.isNotNull(primKey) && (primKey.indexOf(PortletConstants.LAYOUT_SEPARATOR) != -1)) {
    hasLayoutManagerPermission=PortletPermissionUtil.hasLayoutManagerPermission(name,actionId);
  }
  if (checkAdmin) {
    if (isCompanyAdminImpl(companyId)) {
      return true;
    }
 else     if (name.equals(Organization.class.getName())) {
      long organizationId=GetterUtil.getInteger(primKey);
      if (isOrganizationAdminImpl(organizationId)) {
        return true;
      }
    }
 else     if (isGroupAdminImpl(groupId) && hasLayoutManagerPermission) {
      return true;
    }
  }
  logHasUserPermission(groupId,name,primKey,actionId,stopWatch,1);
  if ((PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6) && ResourceBlockLocalServiceUtil.isSupported(name)) {
    ResourceBlockIdsBag resourceBlockIdsBag=getResourceBlockIdsBag(companyId,groupId,getUserId(),name);
    boolean value=ResourceBlockLocalServiceUtil.hasPermission(name,GetterUtil.getLong(primKey),actionId,resourceBlockIdsBag);
    logHasUserPermission(groupId,name,primKey,actionId,stopWatch,2);
    return value;
  }
  List<Resource> resources=getResources(companyId,groupId,name,primKey,actionId);
  logHasUserPermission(groupId,name,primKey,actionId,stopWatch,3);
  PermissionCheckerBag bag=getUserBag(user.getUserId(),groupId);
  boolean value=PermissionLocalServiceUtil.hasUserPermissions(user.getUserId(),groupId,resources,actionId,bag);
  logHasUserPermission(groupId,name,primKey,actionId,stopWatch,4);
  return value;
}
