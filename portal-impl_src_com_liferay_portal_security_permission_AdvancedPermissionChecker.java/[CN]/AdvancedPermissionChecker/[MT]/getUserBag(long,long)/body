{
  PermissionCheckerBag bag=PermissionCacheUtil.getBag(userId,groupId);
  if (bag != null) {
    return bag;
  }
  try {
    Group group=null;
    if (groupId > 0) {
      group=GroupLocalServiceUtil.getGroup(groupId);
    }
    List<Group> userGroups=new ArrayList<Group>();
    if ((group != null) && group.isCommunity() && GroupLocalServiceUtil.hasUserGroup(userId,groupId)) {
      userGroups.add(group);
    }
    List<Organization> userOrgs=getUserOrgs(userId);
    List<Group> userOrgGroups=GroupLocalServiceUtil.getOrganizationsGroups(userOrgs);
    List<UserGroup> userUserGroups=UserGroupLocalServiceUtil.getUserUserGroups(userId);
    List<Group> userUserGroupGroups=GroupLocalServiceUtil.getUserGroupsGroups(userUserGroups);
    List<Group> groups=new ArrayList<Group>(userGroups.size() + userOrgGroups.size() + userUserGroupGroups.size());
    groups.addAll(userGroups);
    groups.addAll(userOrgGroups);
    groups.addAll(userUserGroupGroups);
    List<Role> roles=new UniqueList<Role>();
    if ((PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 3) || (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 4) || (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 5)|| (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6)) {
      if (groups.size() > 0) {
        List<Role> userRelatedRoles=RoleLocalServiceUtil.getUserRelatedRoles(userId,groups);
        roles.addAll(userRelatedRoles);
      }
 else {
        roles.addAll(RoleLocalServiceUtil.getUserRoles(userId));
      }
      List<Role> userGroupRoles=RoleLocalServiceUtil.getUserGroupRoles(userId,groupId);
      roles.addAll(userGroupRoles);
      List<Role> userGroupGroupRoles=RoleLocalServiceUtil.getUserGroupGroupRoles(userId,groupId);
      roles.addAll(userGroupGroupRoles);
      if ((group != null) && ((group.isCommunity() && userGroups.contains(group)) || (group.isOrganization() && userOrgGroups.contains(group)))) {
        addRequiredMemberRole(group,roles);
        addTeamRoles(userId,group,roles);
      }
    }
 else {
      roles=new ArrayList<Role>();
    }
    bag=new PermissionCheckerBagImpl(userId,userGroups,userOrgs,userOrgGroups,userUserGroupGroups,groups,roles);
    return bag;
  }
  finally {
    if (bag == null) {
      bag=new PermissionCheckerBagImpl(userId,new ArrayList<Group>(),new ArrayList<Organization>(),new ArrayList<Group>(),new ArrayList<Group>(),new ArrayList<Group>(),new ArrayList<Role>());
    }
    PermissionCacheUtil.putBag(userId,groupId,bag);
  }
}
