{
  long[] roleIds=PermissionCacheUtil.getUserGroupRoleIds(userId,groupId);
  if (roleIds != null) {
    return roleIds;
  }
  try {
    Group group=null;
    long parentGroupId=0;
    if (groupId > 0) {
      group=GroupLocalServiceUtil.getGroup(groupId);
      if (group.isLayout()) {
        parentGroupId=group.getParentGroupId();
        if (parentGroupId > 0) {
          group=GroupLocalServiceUtil.getGroup(parentGroupId);
        }
      }
    }
    UserPermissionCheckerBag userPermissionCheckerBag=getUserBag();
    Set<Role> roles=new HashSet<>();
    roles.addAll(userPermissionCheckerBag.getRoles());
    List<Role> userGroupRoles=RoleLocalServiceUtil.getUserGroupRoles(userId,groupId);
    roles.addAll(userGroupRoles);
    if (parentGroupId > 0) {
      userGroupRoles=RoleLocalServiceUtil.getUserGroupRoles(userId,parentGroupId);
      roles.addAll(userGroupRoles);
    }
    List<Role> userGroupGroupRoles=RoleLocalServiceUtil.getUserGroupGroupRoles(userId,groupId);
    roles.addAll(userGroupGroupRoles);
    if (parentGroupId > 0) {
      userGroupGroupRoles=RoleLocalServiceUtil.getUserGroupGroupRoles(userId,parentGroupId);
      roles.addAll(userGroupGroupRoles);
    }
    if (group != null) {
      Set<Group> userOrgGroups=userPermissionCheckerBag.getUserOrgGroups();
      if (group.isOrganization() && userOrgGroups.contains(group)) {
        Role organizationUserRole=RoleLocalServiceUtil.getRole(group.getCompanyId(),RoleConstants.ORGANIZATION_USER);
        roles.add(organizationUserRole);
      }
      Set<Group> userGroups=userPermissionCheckerBag.getUserGroups();
      if ((group.isSite() && (userGroups.contains(group) || userOrgGroups.contains(group))) || group.isUserPersonalSite()) {
        Role siteMemberRole=RoleLocalServiceUtil.getRole(group.getCompanyId(),RoleConstants.SITE_MEMBER);
        roles.add(siteMemberRole);
      }
      if ((group.isOrganization() && userOrgGroups.contains(group)) || (group.isSite() && userGroups.contains(group))) {
        addTeamRoles(userId,group,roles);
      }
    }
    roleIds=ListUtil.toLongArray(new ArrayList<>(roles),Role.ROLE_ID_ACCESSOR);
    Arrays.sort(roleIds);
    PermissionCacheUtil.putUserGroupRoleIds(userId,groupId,roleIds);
    return roleIds;
  }
 catch (  Exception e) {
    PermissionCacheUtil.removeUserGroupRoleIds(userId,groupId);
    throw e;
  }
}
