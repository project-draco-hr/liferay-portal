{
  Class<?> currentClass=aspectClass;
  while (true) {
    Class<?>[] interfaceClasses=currentClass.getInterfaces();
    for (    Class<?> interfaceClass : interfaceClasses) {
      JavaClass javaClass=_classToJavaClass(interfaceClass);
      if (javaClass != null) {
        bcelWorld.addSourceObjectType(javaClass,false);
      }
    }
    currentClass=currentClass.getSuperclass();
    if (currentClass != null) {
      JavaClass javaClass=_classToJavaClass(currentClass);
      if (javaClass != null) {
        bcelWorld.addSourceObjectType(javaClass,false);
      }
    }
 else {
      break;
    }
  }
  JavaClass javaClass=_classToJavaClass(aspectClass);
  BcelObjectType bcelObjectType=bcelWorld.addSourceObjectType(javaClass,false);
  ResolvedType resolvedType=bcelObjectType.getResolvedTypeX();
  if (resolvedType.isAspect()) {
    CrosscuttingMembersSet crosscuttingMembersSet=bcelWorld.getCrosscuttingMembersSet();
    crosscuttingMembersSet.addOrReplaceAspect(resolvedType);
  }
 else {
    throw new IllegalArgumentException("Class object " + aspectClass + " is not an AspectJ aspect");
  }
}
