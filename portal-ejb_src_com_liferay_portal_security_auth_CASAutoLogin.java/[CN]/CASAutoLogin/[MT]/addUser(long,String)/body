{
  try {
    Properties env=new Properties();
    String baseProviderURL=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_BASE_PROVIDER_URL);
    String baseDN=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_BASE_DN);
    env.put(Context.INITIAL_CONTEXT_FACTORY,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_FACTORY_INITIAL));
    env.put(Context.PROVIDER_URL,LDAPUtil.getFullProviderURL(baseProviderURL,baseDN));
    env.put(Context.SECURITY_PRINCIPAL,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_SECURITY_PRINCIPAL));
    env.put(Context.SECURITY_CREDENTIALS,PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_SECURITY_CREDENTIALS));
    LdapContext ctx=null;
    try {
      ctx=new InitialLdapContext(env,null);
    }
 catch (    Exception e) {
      if (_log.isDebugEnabled()) {
        _log.debug("Failed to bind to the LDAP server",e);
      }
      throw new SystemException(e);
    }
    String filter=PrefsPropsUtil.getString(companyId,PropsUtil.LDAP_AUTH_SEARCH_FILTER);
    if (_log.isDebugEnabled()) {
      _log.debug("Search filter before transformation " + filter);
    }
    filter=StringUtil.replace(filter,new String[]{"@company_id@","@email_address@","@screen_name@"},new String[]{String.valueOf(companyId),StringPool.BLANK,screenName});
    if (_log.isDebugEnabled()) {
      _log.debug("Search filter after transformation " + filter);
    }
    SearchControls cons=new SearchControls(SearchControls.SUBTREE_SCOPE,1,0,null,false,false);
    NamingEnumeration enu=ctx.search(StringPool.BLANK,filter,cons);
    if (enu.hasMore()) {
      if (_log.isDebugEnabled()) {
        _log.debug("Search filter returned at least one result");
      }
      Binding binding=(Binding)enu.next();
      Attributes attrs=ctx.getAttributes(binding.getName());
      Properties userMappings=PortalLDAPUtil.getUserMappings(companyId);
      Attribute emailAddressAttr=attrs.get("mail");
      String emailAddress=StringPool.BLANK;
      if (emailAddressAttr != null) {
        emailAddress=emailAddressAttr.get().toString();
      }
      return addUser(attrs,userMappings,companyId,emailAddress,screenName,0);
    }
 else {
      throw new NoSuchUserException("User " + screenName + " was not found in the LDAP server");
    }
  }
 catch (  Exception e) {
    _log.error("Problem accessing LDAP server ",e);
    throw new SystemException("Problem accessign LDAP server " + e.getMessage());
  }
}
