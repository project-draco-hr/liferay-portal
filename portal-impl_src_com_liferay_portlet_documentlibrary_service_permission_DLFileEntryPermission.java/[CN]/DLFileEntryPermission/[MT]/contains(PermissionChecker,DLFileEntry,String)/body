{
  Boolean hasPermission=StagingPermissionUtil.hasPermission(permissionChecker,fileEntry.getGroupId(),DLFileEntry.class.getName(),fileEntry.getFileEntryId(),PortletKeys.DOCUMENT_LIBRARY,actionId);
  if (hasPermission != null) {
    return hasPermission.booleanValue();
  }
  DLFileVersion latestFileVersion=fileEntry.getLatestFileVersion();
  if (latestFileVersion.isPending()) {
    hasPermission=WorkflowPermissionUtil.hasPermission(permissionChecker,fileEntry.getGroupId(),DLFileEntry.class.getName(),fileEntry.getFileEntryId(),actionId);
    if (hasPermission != null) {
      return hasPermission.booleanValue();
    }
  }
  if (PropsValues.PERMISSIONS_VIEW_DYNAMIC_INHERITANCE) {
    if (fileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
      DLFolder folder=DLFolderLocalServiceUtil.getFolder(fileEntry.getFolderId());
      if (!DLFolderPermission.contains(permissionChecker,folder,ActionKeys.ACCESS) && !DLFolderPermission.contains(permissionChecker,folder,ActionKeys.VIEW)) {
        return false;
      }
    }
  }
  if (permissionChecker.hasOwnerPermission(fileEntry.getCompanyId(),DLFileEntry.class.getName(),fileEntry.getFileEntryId(),fileEntry.getUserId(),actionId)) {
    return true;
  }
  return permissionChecker.hasPermission(fileEntry.getGroupId(),DLFileEntry.class.getName(),fileEntry.getFileEntryId(),actionId);
}
