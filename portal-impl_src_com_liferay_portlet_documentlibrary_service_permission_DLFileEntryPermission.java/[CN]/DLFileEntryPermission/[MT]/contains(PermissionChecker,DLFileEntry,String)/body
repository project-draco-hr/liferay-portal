{
  Boolean hasPermission=StagingPermissionUtil.hasPermission(permissionChecker,dlFileEntry.getGroupId(),DLFileEntry.class.getName(),dlFileEntry.getFileEntryId(),PortletKeys.DOCUMENT_LIBRARY,actionId);
  if (hasPermission != null) {
    return hasPermission.booleanValue();
  }
  DLFileVersion latestDLFileVersion=dlFileEntry.getLatestFileVersion(true);
  if (latestDLFileVersion.isPending()) {
    hasPermission=WorkflowPermissionUtil.hasPermission(permissionChecker,dlFileEntry.getGroupId(),DLFileEntry.class.getName(),dlFileEntry.getFileEntryId(),actionId);
    if (hasPermission != null) {
      return hasPermission.booleanValue();
    }
  }
  if (PropsValues.PERMISSIONS_VIEW_DYNAMIC_INHERITANCE) {
    if (dlFileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
      try {
        DLFolder dlFolder=DLFolderLocalServiceUtil.getFolder(dlFileEntry.getFolderId());
        if (!DLFolderPermission.contains(permissionChecker,dlFolder,ActionKeys.ACCESS) && !DLFolderPermission.contains(permissionChecker,dlFolder,ActionKeys.VIEW)) {
          return false;
        }
      }
 catch (      NoSuchFolderException nsfe) {
        if (!latestDLFileVersion.isInTrash()) {
          throw nsfe;
        }
      }
    }
  }
  if (permissionChecker.hasOwnerPermission(dlFileEntry.getCompanyId(),DLFileEntry.class.getName(),dlFileEntry.getFileEntryId(),dlFileEntry.getUserId(),actionId)) {
    return true;
  }
  return permissionChecker.hasPermission(dlFileEntry.getGroupId(),DLFileEntry.class.getName(),dlFileEntry.getFileEntryId(),actionId);
}
