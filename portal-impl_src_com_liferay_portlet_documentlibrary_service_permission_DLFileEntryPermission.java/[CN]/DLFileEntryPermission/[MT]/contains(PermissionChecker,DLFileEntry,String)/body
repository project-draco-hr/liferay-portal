{
  Boolean hasPermission=StagingPermissionUtil.hasPermission(permissionChecker,dlFileEntry.getGroupId(),DLFileEntry.class.getName(),dlFileEntry.getFileEntryId(),PortletKeys.DOCUMENT_LIBRARY,actionId);
  if (hasPermission != null) {
    return hasPermission.booleanValue();
  }
  DLFileVersion latestDLFileVersion=dlFileEntry.getLatestFileVersion(true);
  if (latestDLFileVersion.isPending()) {
    hasPermission=WorkflowPermissionUtil.hasPermission(permissionChecker,dlFileEntry.getGroupId(),DLFileEntry.class.getName(),dlFileEntry.getFileEntryId(),actionId);
    if (hasPermission != null) {
      return hasPermission.booleanValue();
    }
  }
  if (dlFileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    try {
      DLFolder dlFolder=DLFolderLocalServiceUtil.getFolder(dlFileEntry.getFolderId());
      if (PropsValues.PERMISSIONS_VIEW_DYNAMIC_INHERITANCE && (!DLFolderPermission.contains(permissionChecker,dlFolder,ActionKeys.ACCESS) || !DLFolderPermission.contains(permissionChecker,dlFolder,ActionKeys.VIEW))) {
        return false;
      }
      if (!actionId.equals(ActionKeys.OVERRIDE_CHECKOUT) && DLFolderPermission.contains(permissionChecker,dlFolder,actionId)) {
        return true;
      }
    }
 catch (    NoSuchFolderException nsfe) {
      if (!latestDLFileVersion.isInTrash()) {
        throw nsfe;
      }
    }
  }
  if (permissionChecker.hasOwnerPermission(dlFileEntry.getCompanyId(),DLFileEntry.class.getName(),dlFileEntry.getFileEntryId(),dlFileEntry.getUserId(),actionId)) {
    return true;
  }
  return permissionChecker.hasPermission(dlFileEntry.getGroupId(),DLFileEntry.class.getName(),dlFileEntry.getFileEntryId(),actionId);
}
