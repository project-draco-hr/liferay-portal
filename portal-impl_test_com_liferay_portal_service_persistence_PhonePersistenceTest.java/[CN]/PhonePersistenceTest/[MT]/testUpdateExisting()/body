{
  long pk=nextLong();
  Phone newPhone=_persistence.create(pk);
  newPhone.setCompanyId(nextLong());
  newPhone.setUserId(nextLong());
  newPhone.setUserName(randomString());
  newPhone.setCreateDate(nextDate());
  newPhone.setModifiedDate(nextDate());
  newPhone.setClassNameId(nextLong());
  newPhone.setClassPK(nextLong());
  newPhone.setNumber(randomString());
  newPhone.setExtension(randomString());
  newPhone.setTypeId(nextInt());
  newPhone.setPrimary(randomBoolean());
  _persistence.update(newPhone,false);
  Phone existingPhone=_persistence.findByPrimaryKey(newPhone.getPrimaryKey());
  assertEquals(existingPhone.getPhoneId(),newPhone.getPhoneId());
  assertEquals(existingPhone.getCompanyId(),newPhone.getCompanyId());
  assertEquals(existingPhone.getUserId(),newPhone.getUserId());
  assertEquals(existingPhone.getUserName(),newPhone.getUserName());
  assertEquals(Time.getShortTimestamp(existingPhone.getCreateDate()),Time.getShortTimestamp(newPhone.getCreateDate()));
  assertEquals(Time.getShortTimestamp(existingPhone.getModifiedDate()),Time.getShortTimestamp(newPhone.getModifiedDate()));
  assertEquals(existingPhone.getClassNameId(),newPhone.getClassNameId());
  assertEquals(existingPhone.getClassPK(),newPhone.getClassPK());
  assertEquals(existingPhone.getNumber(),newPhone.getNumber());
  assertEquals(existingPhone.getExtension(),newPhone.getExtension());
  assertEquals(existingPhone.getTypeId(),newPhone.getTypeId());
  assertEquals(existingPhone.getPrimary(),newPhone.getPrimary());
}
