{
  if (_log.isDebugEnabled()) {
    _log.debug("Starting initial bundles");
  }
  List<Bundle> bundles=new ArrayList<>();
  for (  String initialBundle : PropsValues.MODULE_FRAMEWORK_INITIAL_BUNDLES) {
    Bundle bundle=_installInitialBundle(initialBundle);
    if (bundle != null) {
      bundles.add(bundle);
    }
  }
  FrameworkStartLevel frameworkStartLevel=_framework.adapt(FrameworkStartLevel.class);
  frameworkStartLevel.setStartLevel(PropsValues.MODULE_FRAMEWORK_BEGINNING_START_LEVEL);
  for (  final Bundle bundle : bundles) {
    if (_isFragmentBundle(bundle)) {
      continue;
    }
    final CountDownLatch countDownLatch=new CountDownLatch(1);
    BundleTracker<Void> bundleTracker=new BundleTracker<Void>(_framework.getBundleContext(),Bundle.ACTIVE,null){
      @Override public Void addingBundle(      Bundle trackedBundle,      BundleEvent bundleEvent){
        if (trackedBundle == bundle) {
          countDownLatch.countDown();
          close();
        }
        return null;
      }
    }
;
    bundleTracker.open();
    countDownLatch.await();
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Started initial bundles");
  }
  BundleContext bundleContext=_framework.getBundleContext();
  Bundle[] installedBundles=bundleContext.getBundles();
  List<String> hostBundleSymbolicNames=new ArrayList<>();
  for (  Bundle bundle : installedBundles) {
    BundleStartLevel bundleStartLevel=bundle.adapt(BundleStartLevel.class);
    if (bundleStartLevel.getStartLevel() != PropsValues.MODULE_FRAMEWORK_DYNAMIC_INSTALL_START_LEVEL) {
      continue;
    }
    Dictionary<String,String> headers=bundle.getHeaders();
    String fragmentHost=headers.get(Constants.FRAGMENT_HOST);
    if (fragmentHost == null) {
      continue;
    }
    hostBundleSymbolicNames.add(fragmentHost);
  }
  List<Bundle> hostBundles=new ArrayList<>();
  for (  Bundle bundle : installedBundles) {
    if (hostBundleSymbolicNames.contains(bundle.getSymbolicName())) {
      hostBundles.add(bundle);
    }
  }
  FrameworkWiring frameworkWiring=_framework.adapt(FrameworkWiring.class);
  frameworkWiring.refreshBundles(hostBundles);
}
