{
  if (_log.isDebugEnabled()) {
    _log.debug("Starting initial bundles");
  }
  BundleContext bundleContext=_framework.getBundleContext();
  ThrowableCollector throwableCollector=new ThrowableCollector();
  Dictionary<String,Object> dictionary=new HashMapDictionary<>();
  dictionary.put("throwable.collector","initial.bundles");
  bundleContext.registerService(ThrowableCollector.class,throwableCollector,dictionary);
  final List<Bundle> bundles=new ArrayList<>();
  final List<Path> jarPaths=new ArrayList<>();
  Files.walkFileTree(Paths.get(PropsValues.MODULE_FRAMEWORK_BASE_DIR,"static"),new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult visitFile(    Path filePath,    BasicFileAttributes basicFileAttributes) throws IOException {
      Path fileNamePath=filePath.getFileName();
      String fileName=StringUtil.toLowerCase(fileNamePath.toString());
      if (fileName.endsWith(".jar")) {
        jarPaths.add(filePath.toAbsolutePath());
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
  File utilTaglibFile=new File(PropsValues.LIFERAY_LIB_PORTAL_DIR,"util-taglib.jar");
  if (utilTaglibFile.exists()) {
    jarPaths.add(utilTaglibFile.toPath());
  }
 else {
    _log.error("Missing " + utilTaglibFile);
  }
  Collections.sort(jarPaths);
  Set<String> overwrittenFileNames=new HashSet<>();
  for (  Path jarPath : jarPaths) {
    try (InputStream inputStream=Files.newInputStream(jarPath)){
      String path=jarPath.toString();
      Bundle bundle=_installInitialBundle(path,inputStream);
      if (bundle != null) {
        bundles.add(bundle);
        overwrittenFileNames.add(path.substring(path.lastIndexOf(StringPool.SLASH) + 1));
      }
    }
   }
  File file=new File(bundleContext.getProperty("lpkg.deployer.dir") + StringPool.SLASH + StaticLPKGResolver.getStaticLPKGFileName());
  if (file.exists()) {
    try (ZipFile zipFile=new ZipFile(file)){
      Enumeration<? extends ZipEntry> enumeration=zipFile.entries();
      List<ZipEntry> zipEntries=new ArrayList<>();
      while (enumeration.hasMoreElements()) {
        ZipEntry zipEntry=enumeration.nextElement();
        String name=StringUtil.toLowerCase(zipEntry.getName());
        if (!name.endsWith(".jar")) {
          continue;
        }
        zipEntries.add(zipEntry);
      }
      Collections.sort(zipEntries,new Comparator<ZipEntry>(){
        @Override public int compare(        ZipEntry zipEntry1,        ZipEntry zipEntry2){
          String name1=zipEntry1.getName();
          String name2=zipEntry2.getName();
          return name1.compareTo(name2);
        }
      }
);
      for (      ZipEntry zipEntry : zipEntries) {
        try (InputStream inputStream=zipFile.getInputStream(zipEntry)){
          String zipEntryName=zipEntry.getName();
          Matcher matcher=_pattern.matcher(zipEntryName);
          if (matcher.matches()) {
            String fileName=matcher.group(1) + matcher.group(4);
            if (overwrittenFileNames.contains(fileName)) {
              if (_log.isInfoEnabled()) {
                StringBundler sb=new StringBundler(7);
                sb.append(zipFile);
                sb.append(":");
                sb.append(zipEntry);
                sb.append(" is overwritten by ");
                sb.append(PropsValues.MODULE_FRAMEWORK_BASE_DIR);
                sb.append("/static/");
                sb.append(fileName);
                _log.info(sb.toString());
              }
              continue;
            }
          }
          Bundle bundle=_installInitialBundle(StringPool.SLASH.concat(zipEntryName),inputStream);
          if (bundle != null) {
            bundles.add(bundle);
          }
        }
       }
    }
   }
  Bundle[] initialBundles=bundleContext.getBundles();
  FrameworkStartLevel frameworkStartLevel=_framework.adapt(FrameworkStartLevel.class);
  frameworkStartLevel.setStartLevel(PropsValues.MODULE_FRAMEWORK_BEGINNING_START_LEVEL);
  for (  final Bundle bundle : bundles) {
    if (_isFragmentBundle(bundle)) {
      continue;
    }
    final CountDownLatch countDownLatch=new CountDownLatch(1);
    BundleTracker<Void> bundleTracker=new BundleTracker<Void>(_framework.getBundleContext(),Bundle.ACTIVE,null){
      @Override public Void addingBundle(      Bundle trackedBundle,      BundleEvent bundleEvent){
        if (trackedBundle == bundle) {
          countDownLatch.countDown();
          close();
        }
        return null;
      }
    }
;
    bundleTracker.open();
    countDownLatch.await();
  }
  throwableCollector.rethrow();
  if (_log.isDebugEnabled()) {
    _log.debug("Started initial bundles");
  }
  Bundle[] installedBundles=bundleContext.getBundles();
  List<String> hostBundleSymbolicNames=new ArrayList<>();
  for (  Bundle bundle : installedBundles) {
    BundleStartLevel bundleStartLevel=bundle.adapt(BundleStartLevel.class);
    if (bundleStartLevel.getStartLevel() != PropsValues.MODULE_FRAMEWORK_DYNAMIC_INSTALL_START_LEVEL) {
      continue;
    }
    Dictionary<String,String> headers=bundle.getHeaders();
    String fragmentHost=headers.get(Constants.FRAGMENT_HOST);
    if (fragmentHost == null) {
      continue;
    }
    int index=fragmentHost.indexOf(CharPool.SEMICOLON);
    if (index != -1) {
      fragmentHost=fragmentHost.substring(0,index);
    }
    hostBundleSymbolicNames.add(fragmentHost);
  }
  List<Bundle> hostBundles=new ArrayList<>();
  for (  Bundle bundle : installedBundles) {
    if (hostBundleSymbolicNames.contains(bundle.getSymbolicName())) {
      hostBundles.add(bundle);
    }
  }
  FrameworkWiring frameworkWiring=_framework.adapt(FrameworkWiring.class);
  frameworkWiring.refreshBundles(hostBundles);
  return new HashSet<>(Arrays.asList(initialBundles));
}
