{
  boolean start=false;
  int startLevel=PropsValues.MODULE_FRAMEWORK_BEGINNING_START_LEVEL;
  if (_log.isDebugEnabled()) {
    _log.debug("Install initial bundle " + location + " at start level "+ startLevel);
  }
  int index=location.lastIndexOf(StringPool.AT);
  if (index != -1) {
    String[] parts=StringUtil.split(location.substring(index + 1),StringPool.COLON);
    for (    String part : parts) {
      if (part.equals("start")) {
        start=true;
      }
 else {
        startLevel=GetterUtil.getInteger(part);
      }
    }
    location=location.substring(0,index);
  }
  InputStream inputStream=null;
  try {
    if (!location.startsWith("file:")) {
      location="file:" + PropsValues.MODULE_FRAMEWORK_BASE_DIR + "/static/"+ location;
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Attempting to start initial bundle " + location);
    }
    URL initialBundleURL=new URL(location);
    try {
      inputStream=new BufferedInputStream(initialBundleURL.openStream());
    }
 catch (    IOException ioe) {
      if (_log.isDebugEnabled()) {
        _log.debug("Unable to locate initial bundle " + location);
      }
      if (_log.isWarnEnabled()) {
        _log.warn(ioe.getMessage());
      }
      return;
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Adding initial bundle " + initialBundleURL.toString());
    }
    final Bundle bundle=_addBundle(initialBundleURL.toString(),inputStream,false);
    if (_log.isDebugEnabled()) {
      _log.debug("Added initial bundle " + bundle);
    }
    if ((bundle == null) || _isFragmentBundle(bundle)) {
      return;
    }
    if (!start && _hasLazyActivationPolicy(bundle)) {
      bundle.start(Bundle.START_ACTIVATION_POLICY);
      return;
    }
    if (start) {
      if (_log.isDebugEnabled()) {
        _log.debug("Starting initial bundle " + bundle);
      }
      bundle.start();
      final CountDownLatch countDownLatch=new CountDownLatch(1);
      BundleTracker<Void> bundleTracker=new BundleTracker<Void>(_framework.getBundleContext(),Bundle.ACTIVE,null){
        @Override public Void addingBundle(        Bundle trackedBundle,        BundleEvent bundleEvent){
          if (trackedBundle == bundle) {
            countDownLatch.countDown();
            close();
          }
          return null;
        }
      }
;
      bundleTracker.open();
      countDownLatch.await();
    }
    if (((bundle.getState() & Bundle.UNINSTALLED) == 0) && (startLevel > 0)) {
      if (_log.isDebugEnabled()) {
        _log.debug("Setting bundle " + bundle + " at start level "+ startLevel);
      }
      BundleStartLevel bundleStartLevel=bundle.adapt(BundleStartLevel.class);
      bundleStartLevel.setStartLevel(startLevel);
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Started bundle " + bundle);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    StreamUtil.cleanUp(inputStream);
  }
}
