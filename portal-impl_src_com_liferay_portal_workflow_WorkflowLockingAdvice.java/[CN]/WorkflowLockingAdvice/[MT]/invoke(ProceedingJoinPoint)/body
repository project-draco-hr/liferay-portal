{
  String methodName=proceedingJoinPoint.getSignature().getName();
  Object[] arguments=proceedingJoinPoint.getArgs();
  if (methodName.equals(_START_WORKFLOW_INSTANCE_METHOD_NAME)) {
    String workflowDefinitionName=(String)arguments[0];
    Integer workflowDefinitionVersion=(Integer)arguments[1];
    String className=WorkflowDefinition.class.getName();
    String key=_encodeKey(workflowDefinitionName,workflowDefinitionVersion);
    if (LockLocalServiceUtil.isLocked(className,key)) {
      throw new WorkflowException("Workflow definition name " + workflowDefinitionName + " and version "+ workflowDefinitionVersion+ " is being undeployed");
    }
    return proceedingJoinPoint.proceed();
  }
 else   if (!methodName.equals(_UNDEPLOY_WORKFLOW_DEFINITION_METHOD_NAME)) {
    return proceedingJoinPoint.proceed();
  }
  long userId=(Long)arguments[0];
  String workflowDefinitionName=(String)arguments[1];
  Integer workflowDefinitionVersion=(Integer)arguments[2];
  String className=WorkflowDefinition.class.getName();
  String key=_encodeKey(workflowDefinitionName,workflowDefinitionVersion);
  if (LockLocalServiceUtil.isLocked(className,key)) {
    throw new WorkflowException("Workflow definition name " + workflowDefinitionName + " and version "+ workflowDefinitionVersion+ " is being undeployed");
  }
  try {
    LockLocalServiceUtil.lock(userId,className,key,String.valueOf(userId),false,Time.HOUR);
    return proceedingJoinPoint.proceed();
  }
  finally {
    LockLocalServiceUtil.unlock(className,key);
  }
}
