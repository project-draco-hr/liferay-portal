{
  Builder builder=new Builder();
  List<String> arguments=Arrays.asList("x","y","z");
  builder.setArguments(arguments);
  String bootstrapClassPath="bootstrapClassPath";
  builder.setBootstrapClassPath(bootstrapClassPath);
  String javaExecutable="java";
  builder.setJavaExecutable(javaExecutable);
  builder.setReactClassLoader(NettyFabricWorkerConfigTest.class.getClassLoader());
  String runtimeClassPath="runtimeClassPath";
  builder.setRuntimeClassPath(runtimeClassPath);
  long id=10;
  ProcessCallable<String> processCallable=new ReturnProcessCallable<String>("Test ProcessCallable");
  NettyFabricWorkerConfig<String> copyNettyFabricWorkerConfig=(NettyFabricWorkerConfig<String>)SerializableUtil.deserialize(SerializableUtil.serialize(new NettyFabricWorkerConfig<String>(id,builder.build(),processCallable)));
  Assert.assertEquals(id,copyNettyFabricWorkerConfig.getId());
  ProcessConfig copyProcessConfig=copyNettyFabricWorkerConfig.getProcessConfig();
  Assert.assertEquals(arguments,copyProcessConfig.getArguments());
  Assert.assertEquals(bootstrapClassPath,copyProcessConfig.getBootstrapClassPath());
  Assert.assertEquals(javaExecutable,copyProcessConfig.getJavaExecutable());
  Assert.assertNull(copyProcessConfig.getReactClassLoader());
  Assert.assertEquals(runtimeClassPath,copyProcessConfig.getRuntimeClassPath());
  ProcessCallable<String> copyProcessCallable=copyNettyFabricWorkerConfig.getProcessCallable();
  Assert.assertEquals(processCallable.call(),copyProcessCallable.call());
}
