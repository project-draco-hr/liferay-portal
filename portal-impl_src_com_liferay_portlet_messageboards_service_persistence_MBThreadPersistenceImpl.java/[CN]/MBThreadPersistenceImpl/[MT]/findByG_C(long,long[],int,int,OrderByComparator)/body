{
  Object[] finderArgs=new Object[]{groupId,StringUtil.merge(categoryIds),String.valueOf(start),String.valueOf(end),String.valueOf(orderByComparator)};
  List<MBThread> list=(List<MBThread>)FinderCacheUtil.getResult(FINDER_PATH_FIND_BY_G_C,finderArgs,this);
  if (list == null) {
    Session session=null;
    try {
      session=openSession();
      StringBundler query=new StringBundler();
      query.append(_SQL_SELECT_MBTHREAD_WHERE);
      boolean conjunctionable=false;
      if (conjunctionable) {
        query.append(WHERE_AND);
      }
      query.append(_FINDER_COLUMN_G_C_GROUPID_5);
      conjunctionable=true;
      if ((categoryIds == null) || (categoryIds.length > 0)) {
        if (conjunctionable) {
          query.append(WHERE_AND);
        }
        query.append(StringPool.OPEN_PARENTHESIS);
        for (int i=0; i < categoryIds.length; i++) {
          query.append(_FINDER_COLUMN_G_C_CATEGORYID_5);
          if ((i + 1) < categoryIds.length) {
            query.append(WHERE_OR);
          }
        }
        query.append(StringPool.CLOSE_PARENTHESIS);
        conjunctionable=true;
      }
      if (orderByComparator != null) {
        appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
      }
 else {
        query.append(MBThreadModelImpl.ORDER_BY_JPQL);
      }
      String sql=query.toString();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      if (categoryIds != null) {
        qPos.add(categoryIds);
      }
      list=(List<MBThread>)QueryUtil.list(q,getDialect(),start,end);
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        list=new ArrayList<MBThread>();
      }
      cacheResult(list);
      FinderCacheUtil.putResult(FINDER_PATH_FIND_BY_G_C,finderArgs,list);
      closeSession(session);
    }
  }
  return list;
}
