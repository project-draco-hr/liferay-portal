{
  if (!SPIUtil.isSPI()) {
    return portalCacheManager;
  }
  SPI spi=SPIUtil.getSPI();
  RegistrationReference registrationReference=spi.getRegistrationReference();
  Future<String[]> future=IntrabandProxyInstallationUtil.installSkeleton(registrationReference,PortalCache.class,new IntrabandPortalCacheTargetLocator(portalCacheManager.getPortalCacheManagerName(),false));
  String[] skeletonProxyMethodSignatures=future.get();
  String[] stubProxyMethodSignatures=IntrabandProxyUtil.getProxyMethodSignatures(BaseIntrabandPortalCacheManager.getPortalCacheStubClass());
  IntrabandProxyInstallationUtil.checkProxyMethodSignatures(skeletonProxyMethodSignatures,stubProxyMethodSignatures);
  future=IntrabandProxyInstallationUtil.installSkeleton(registrationReference,PortalCacheManager.class,new IntrabandPortalCacheTargetLocator(portalCacheManager.getPortalCacheManagerName(),true));
  skeletonProxyMethodSignatures=future.get();
  Class<? extends PortalCacheManager<? extends Serializable,? extends Serializable>> stubClass=(Class<? extends PortalCacheManager<? extends Serializable,? extends Serializable>>)IntrabandProxyUtil.getStubClass(BaseIntrabandPortalCacheManager.class,PortalCacheManager.class.getName());
  stubProxyMethodSignatures=IntrabandProxyUtil.getProxyMethodSignatures(stubClass);
  IntrabandProxyInstallationUtil.checkProxyMethodSignatures(skeletonProxyMethodSignatures,stubProxyMethodSignatures);
  return IntrabandProxyUtil.newStubInstance(stubClass,StringPool.BLANK,registrationReference,WarnLogExceptionHandler.INSTANCE);
}
