{
  long parentMBMessageId=MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID;
  List<User> recipients=null;
  if (mbThreadId != 0) {
    if (Validator.isNull(fetchUserThread(userId,mbThreadId))) {
      if (_log.isWarnEnabled()) {
        StringBundler sb=new StringBundler(5);
        sb.append("User ");
        sb.append(userId);
        sb.append(" attempted to add a message to MBThread ");
        sb.append(mbThreadId);
        sb.append(" through the private messaging portlet");
        _log.warn(sb.toString());
      }
      throw new PrincipalException("User " + userId + " cannot access MBThread "+ mbThreadId+ " through the private messaging portlet");
    }
    List<MBMessage> mbMessages=mbMessageLocalService.getThreadMessages(mbThreadId,WorkflowConstants.STATUS_ANY);
    MBMessage lastMBMessage=mbMessages.get(mbMessages.size() - 1);
    parentMBMessageId=lastMBMessage.getMessageId();
    subject=lastMBMessage.getSubject();
  }
 else {
    recipients=parseRecipients(userId,to);
    if (recipients.isEmpty()) {
      return null;
    }
  }
  return addPrivateMessage(userId,mbThreadId,parentMBMessageId,recipients,subject,body,inputStreamOVPs,themeDisplay);
}
