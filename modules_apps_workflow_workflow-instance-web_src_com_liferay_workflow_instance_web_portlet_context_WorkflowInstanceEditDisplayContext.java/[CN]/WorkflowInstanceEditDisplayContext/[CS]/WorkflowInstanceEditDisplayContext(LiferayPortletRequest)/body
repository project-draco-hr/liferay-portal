{
  _liferayPortletRequest=liferayPortletRequest;
  ThemeDisplay themeDisplay=(ThemeDisplay)_liferayPortletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  _locale=themeDisplay.getLocale();
  Company company=themeDisplay.getCompany();
  long userId=themeDisplay.getUserId();
  String portletName=themeDisplay.getPortletDisplay().getPortletName();
  _dateFormatDateTime=FastDateFormatFactoryUtil.getDateTime(_locale,themeDisplay.getTimeZone());
  _workflowInstance=(WorkflowInstance)_liferayPortletRequest.getAttribute(WebKeys.WORKFLOW_INSTANCE);
  Map<String,Serializable> workflowContext=_workflowInstance.getWorkflowContext();
  String className=(String)workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_NAME);
  long classPK=GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_PK));
  WorkflowHandler<?> workflowHandler=WorkflowHandlerRegistryUtil.getWorkflowHandler(className);
  _assetRenderer=workflowHandler.getAssetRenderer(classPK);
  _assetRendererFactory=workflowHandler.getAssetRendererFactory();
  if (_assetRenderer != null) {
    _assetEntry=_assetRendererFactory.getAssetEntry(_assetRendererFactory.getClassName(),_assetRenderer.getClassPK());
  }
  _headerTitle=LanguageUtil.get(_liferayPortletRequest.getHttpServletRequest(),_workflowInstance.getWorkflowDefinitionName());
  if (_assetEntry != null) {
    _headerTitle=_headerTitle.concat(StringPool.COLON + StringPool.SPACE + _assetRenderer.getTitle(themeDisplay.getLocale()));
    _assetEntryVersionId=String.valueOf(classPK);
  }
  if (portletName.equals(PortletKeys.WORKFLOW_DEFINITIONS)) {
    _workflowTasks=WorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(company.getCompanyId(),null,_workflowInstance.getWorkflowInstanceId(),null,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  }
 else {
    _workflowTasks=WorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(company.getCompanyId(),userId,_workflowInstance.getWorkflowInstanceId(),false,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  }
  List<Integer> logTypes=new ArrayList<Integer>();
  logTypes.add(WorkflowLog.TASK_ASSIGN);
  logTypes.add(WorkflowLog.TASK_COMPLETION);
  logTypes.add(WorkflowLog.TASK_UPDATE);
  logTypes.add(WorkflowLog.TRANSITION);
  _workflowLogs=WorkflowLogManagerUtil.getWorkflowLogsByWorkflowInstance(company.getCompanyId(),_workflowInstance.getWorkflowInstanceId(),logTypes,QueryUtil.ALL_POS,QueryUtil.ALL_POS,WorkflowComparatorFactoryUtil.getLogCreateDateComparator(true));
  if (!_workflowLogs.isEmpty()) {
    _roleMap=new HashMap<Long,Role>();
    _userMap=new HashMap<Long,User>();
    for (    WorkflowLog workflowLog : _workflowLogs) {
      if (workflowLog.getRoleId() != 0) {
        if (!_roleMap.containsKey(workflowLog.getRoleId())) {
          Role curRole=RoleLocalServiceUtil.getRole(workflowLog.getRoleId());
          _roleMap.put(workflowLog.getRoleId(),curRole);
        }
      }
 else       if (workflowLog.getUserId() != 0) {
        if (_userMap.containsKey(workflowLog.getUserId())) {
          User curUser=UserLocalServiceUtil.getUser(workflowLog.getUserId());
          _userMap.put(workflowLog.getUserId(),curUser);
        }
      }
    }
  }
  _panelTitle=LanguageUtil.format(_liferayPortletRequest.getHttpServletRequest(),"preview-of-x",ResourceActionsUtil.getModelResource(_locale,className),false);
  _taskContentTitleMessage=HtmlUtil.escape(workflowHandler.getTitle(classPK,_locale));
  _iconCssClass=workflowHandler.getIconCssClass();
}
