{
  LinkedHashMap<Long,long[]> scopes=new LinkedHashMap<Long,long[]>();
  scopes.put(new Long(0),new long[]{0});
  scopes.put(_USER_CLASS_NAME_ID,new long[]{userId});
  List<Group> groupsList=new ArrayList<Group>();
  List<Organization> organizations=OrganizationLocalServiceUtil.getUserOrganizations(userId);
  if (!organizations.isEmpty()) {
    List<Organization> organizationsList=new ArrayList<Organization>();
    organizationsList.addAll(organizations);
    for (    Organization organization : organizations) {
      groupsList.add(organization.getGroup());
      List<Organization> parentOrganizations=OrganizationLocalServiceUtil.getParentOrganizations(organization.getOrganizationId());
      for (      Organization parentOrganization : parentOrganizations) {
        organizationsList.add(parentOrganization);
        groupsList.add(parentOrganization.getGroup());
      }
    }
    scopes.put(_ORGANIZATION_CLASS_NAME_ID,_getOrganizationIds(organizationsList));
  }
  List<Group> groups=GroupLocalServiceUtil.getUserGroups(userId,true);
  if (!groups.isEmpty()) {
    scopes.put(_GROUP_CLASS_NAME_ID,_getGroupIds(groups));
    groupsList.addAll(groups);
  }
  List<UserGroup> userGroups=UserGroupLocalServiceUtil.getUserUserGroups(userId);
  if (!userGroups.isEmpty()) {
    scopes.put(_USER_GROUP_CLASS_NAME_ID,_getUserGroupIds(userGroups));
    for (    UserGroup userGroup : userGroups) {
      groupsList.add(userGroup.getGroup());
    }
  }
  List<Role> roles=new UniqueList<Role>();
  if (!groupsList.isEmpty()) {
    roles=RoleLocalServiceUtil.getUserRelatedRoles(userId,groupsList);
    roles=ListUtil.copy(roles);
    for (    Group group : groupsList) {
      roles.addAll(RoleLocalServiceUtil.getUserGroupRoles(userId,group.getGroupId()));
      roles.addAll(RoleLocalServiceUtil.getUserGroupGroupRoles(userId,group.getGroupId()));
    }
  }
 else {
    roles=RoleLocalServiceUtil.getUserRoles(userId);
    roles=ListUtil.copy(roles);
  }
  if (PropsValues.PERMISSIONS_CHECK_GUEST_ENABLED) {
    User user=UserLocalServiceUtil.getUserById(userId);
    Role guestRole=RoleLocalServiceUtil.getRole(user.getCompanyId(),RoleConstants.GUEST);
    roles.add(guestRole);
  }
  if (roles.size() > 0) {
    scopes.put(_ROLE_CLASS_NAME_ID,_getRoleIds(roles));
  }
  return scopes;
}
