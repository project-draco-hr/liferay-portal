{
  LinkedHashMap<Long,Long[]> scopes=new LinkedHashMap<Long,Long[]>();
  scopes.put(new Long(0),new Long[]{new Long(0)});
  scopes.put(_userClassNameId,new Long[]{new Long(userId)});
  List<UserGroup> usersUserGroups=UserGroupLocalServiceUtil.getUserUserGroups(userId);
  Long[] usersUserGroupsIds=getUserGroupIds(usersUserGroups);
  if (usersUserGroupsIds.length > 0) {
    scopes.put(_userGroupClassNameId,usersUserGroupsIds);
  }
  List<Group> usersGroups=GroupLocalServiceUtil.getUserGroups(userId);
  List<Group> groupList=new ArrayList<Group>();
  Long[] usersGroupsIds=getGroupIds(usersGroups);
  if (usersGroupsIds.length > 0) {
    scopes.put(_communityClassNameId,usersGroupsIds);
    groupList.addAll(usersGroups);
  }
  List<Organization> usersOrgs=OrganizationLocalServiceUtil.getUserOrganizations(userId);
  Long[] usersOrganizationsIds=getOrganizationIds(usersOrgs);
  if (usersOrganizationsIds.length > 0) {
    scopes.put(_organizationClassNameId,usersOrganizationsIds);
    for (    Organization org : usersOrgs) {
      groupList.add(org.getGroup());
    }
  }
  if (groupList.size() > 0) {
    List<Role> usersRoles=RoleLocalServiceUtil.getUserRelatedRoles(userId,groupList);
    for (    Group group : groupList) {
      usersRoles.addAll(RoleLocalServiceUtil.getUserGroupRoles(userId,group.getGroupId()));
    }
    Long[] usersRolesIds=getRoleIds(usersRoles);
    if (usersRolesIds.length > 0) {
      scopes.put(_roleClassNameId,usersRolesIds);
    }
  }
  return scopes;
}
