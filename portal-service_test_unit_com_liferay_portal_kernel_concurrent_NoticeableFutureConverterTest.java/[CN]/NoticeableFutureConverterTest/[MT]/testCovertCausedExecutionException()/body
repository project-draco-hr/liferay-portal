{
  final Exception exception=new Exception();
  NoticeableFuture<Object> noticeableFutureConverter=new NoticeableFutureConverter<Object,Object>(_defaultNoticeableFuture){
    @Override protected Object convert(    Object v) throws Exception {
      throw exception;
    }
  }
;
  RecordedFutureListener<Object> recordedFutureListener=new RecordedFutureListener<>();
  Assert.assertTrue(noticeableFutureConverter.addFutureListener(recordedFutureListener));
  _defaultNoticeableFuture.set(new Object());
  Assert.assertEquals(1,recordedFutureListener.getCount());
  Assert.assertSame(ReflectionTestUtil.getFieldValue(noticeableFutureConverter,"_defaultNoticeableFuture"),recordedFutureListener.getFuture());
  try {
    noticeableFutureConverter.get();
    Assert.fail();
  }
 catch (  ExecutionException ee) {
    Assert.assertSame(exception,ee.getCause());
  }
  try {
    noticeableFutureConverter.get(1,TimeUnit.SECONDS);
    Assert.fail();
  }
 catch (  ExecutionException ee) {
    Assert.assertSame(exception,ee.getCause());
  }
}
