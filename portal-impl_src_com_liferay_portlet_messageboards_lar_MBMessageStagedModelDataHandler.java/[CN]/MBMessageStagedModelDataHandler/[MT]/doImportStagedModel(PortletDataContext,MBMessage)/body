{
  long userId=portletDataContext.getUserId(message.getUserUuid());
  if (message.isDiscussion()) {
    StagedModelDataHandlerUtil.importReferenceStagedModels(portletDataContext,message,MBDiscussion.class);
  }
 else   if (message.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) {
    StagedModelDataHandlerUtil.importReferenceStagedModel(portletDataContext,message,MBCategory.class,message.getCategoryId());
  }
  Map<Long,Long> categoryIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(MBCategory.class);
  long parentCategoryId=MapUtil.getLong(categoryIds,message.getCategoryId(),message.getCategoryId());
  Map<Long,Long> threadIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(MBThread.class);
  long threadId=MapUtil.getLong(threadIds,message.getThreadId(),0);
  if (!message.isRoot()) {
    StagedModelDataHandlerUtil.importReferenceStagedModel(portletDataContext,message,MBMessage.class,message.getParentMessageId());
  }
  Map<Long,Long> messageIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(MBMessage.class);
  long parentMessageId=MapUtil.getLong(messageIds,message.getParentMessageId(),message.getParentMessageId());
  Element element=portletDataContext.getImportDataStagedModelElement(message);
  List<ObjectValuePair<String,InputStream>> inputStreamOVPs=getAttachments(portletDataContext,element,message);
  try {
    ServiceContext serviceContext=portletDataContext.createServiceContext(message);
    MBMessage importedMessage=null;
    if (portletDataContext.isDataStrategyMirror()) {
      MBMessage existingMessage=MBMessageLocalServiceUtil.fetchMBMessageByUuidAndGroupId(message.getUuid(),portletDataContext.getScopeGroupId());
      if (existingMessage == null) {
        serviceContext.setUuid(message.getUuid());
        if (message.isDiscussion()) {
          importedMessage=addDiscussionMessage(portletDataContext,userId,threadId,parentMessageId,message,serviceContext);
        }
 else {
          importedMessage=MBMessageLocalServiceUtil.addMessage(userId,message.getUserName(),portletDataContext.getScopeGroupId(),parentCategoryId,threadId,parentMessageId,message.getSubject(),message.getBody(),message.getFormat(),inputStreamOVPs,message.getAnonymous(),message.getPriority(),message.getAllowPingbacks(),serviceContext);
        }
      }
 else {
        if (!message.isRoot() && message.isDiscussion()) {
          MBDiscussion discussion=MBDiscussionLocalServiceUtil.getThreadDiscussion(threadId);
          importedMessage=MBMessageLocalServiceUtil.updateDiscussionMessage(userId,existingMessage.getMessageId(),discussion.getClassName(),discussion.getClassPK(),message.getSubject(),message.getBody(),serviceContext);
        }
 else {
          importedMessage=MBMessageLocalServiceUtil.updateMessage(userId,existingMessage.getMessageId(),message.getSubject(),message.getBody(),inputStreamOVPs,new ArrayList<String>(),message.getPriority(),message.getAllowPingbacks(),serviceContext);
        }
      }
    }
 else {
      if (message.isDiscussion()) {
        importedMessage=addDiscussionMessage(portletDataContext,userId,threadId,parentMessageId,message,serviceContext);
      }
 else {
        importedMessage=MBMessageLocalServiceUtil.addMessage(userId,message.getUserName(),portletDataContext.getScopeGroupId(),parentCategoryId,threadId,parentMessageId,message.getSubject(),message.getBody(),message.getFormat(),inputStreamOVPs,message.getAnonymous(),message.getPriority(),message.getAllowPingbacks(),serviceContext);
      }
    }
    importedMessage.setAnswer(message.getAnswer());
    if (importedMessage.isRoot() && !importedMessage.isDiscussion()) {
      MBThreadLocalServiceUtil.updateQuestion(importedMessage.getThreadId(),GetterUtil.getBoolean(element.attributeValue("question")));
    }
    if (message.isDiscussion()) {
      Map<Long,Long> discussionIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(MBDiscussion.class);
      discussionIds.put(message.getMessageId(),importedMessage.getMessageId());
    }
    threadIds.put(message.getThreadId(),importedMessage.getThreadId());
    portletDataContext.importClassedModel(message,importedMessage);
  }
  finally {
    for (    ObjectValuePair<String,InputStream> inputStreamOVP : inputStreamOVPs) {
      InputStream inputStream=inputStreamOVP.getValue();
      StreamUtil.cleanUp(inputStream);
    }
  }
}
