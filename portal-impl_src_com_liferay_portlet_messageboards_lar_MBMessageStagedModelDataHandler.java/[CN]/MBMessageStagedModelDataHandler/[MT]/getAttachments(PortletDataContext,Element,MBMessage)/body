{
  boolean hasAttachmentsFileEntries=GetterUtil.getBoolean(messageElement.attributeValue("hasAttachmentsFileEntries"));
  if (!hasAttachmentsFileEntries) {
    return Collections.emptyList();
  }
  List<ObjectValuePair<String,InputStream>> inputStreamOVPs=new ArrayList<ObjectValuePair<String,InputStream>>();
  List<Element> attachmentElements=portletDataContext.getReferenceDataElements(messageElement,FileEntry.class,PortletDataContext.REFERENCE_TYPE_WEAK);
  for (  Element attachmentElement : attachmentElements) {
    String path=attachmentElement.attributeValue("path");
    String binPath=attachmentElement.attributeValue("bin-path");
    FileEntry fileEntry=(FileEntry)portletDataContext.getZipEntryAsObject(path);
    InputStream inputStream=null;
    if (Validator.isNull(binPath) && portletDataContext.isPerformDirectBinaryImport()) {
      try {
        inputStream=FileEntryUtil.getContentStream(fileEntry);
      }
 catch (      Exception e) {
      }
    }
 else {
      inputStream=portletDataContext.getZipEntryAsInputStream(binPath);
    }
    if (inputStream == null) {
      continue;
    }
    ObjectValuePair<String,InputStream> inputStreamOVP=new ObjectValuePair<String,InputStream>(fileEntry.getTitle(),inputStream);
    inputStreamOVPs.add(inputStreamOVP);
  }
  if (inputStreamOVPs.isEmpty()) {
    _log.error("Could not find attachments for message " + message.getMessageId());
  }
  return inputStreamOVPs;
}
