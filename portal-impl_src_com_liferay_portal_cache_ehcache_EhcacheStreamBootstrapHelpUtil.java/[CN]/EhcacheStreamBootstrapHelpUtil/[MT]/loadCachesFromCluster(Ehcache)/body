{
  ClusterRequest clusterRequest=ClusterRequest.createMulticastRequest(new MethodHandler(_createServerSocketFromClusterMethodKey,ehcache.getName()),true);
  FutureClusterResponses futureClusterResponses=ClusterExecutorUtil.execute(clusterRequest);
  BlockingQueue<ClusterNodeResponse> clusterNodeResponses=futureClusterResponses.getPartialResults();
  ClusterNodeResponse clusterNodeResponse=null;
  try {
    clusterNodeResponse=clusterNodeResponses.poll(_CLUSTER_LINK_NODE_BOOTUP_RESPONSE_TIMEOUT,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException ie) {
    return;
  }
  if (clusterNodeResponse == null) {
    return;
  }
  ObjectInputStream objectInputStream=null;
  Socket socket=null;
  try {
    SocketAddress remoteSocketAddress=(SocketAddress)clusterNodeResponse.getResult();
    if (remoteSocketAddress == null) {
      return;
    }
    socket=new Socket();
    socket.connect(remoteSocketAddress);
    socket.shutdownOutput();
    objectInputStream=new AnnotatedObjectInputStream(socket.getInputStream());
    while (true) {
      Object object=objectInputStream.readObject();
      if (object instanceof EhcacheElement) {
        EhcacheElement ehcacheElement=(EhcacheElement)object;
        Element element=ehcacheElement.toElement();
        ehcache.put(element,true);
      }
 else       if (object instanceof String) {
        String command=(String)object;
        if (command.equals(_SOCKET_CLOSE)) {
          break;
        }
 else         if (command.equals(_CACHE_TX_START)) {
          String cacheName=(String)objectInputStream.readObject();
          if (!cacheName.equals(ehcache.getName())) {
            break;
          }
        }
      }
 else {
        throw new SystemException("Socket transaction failed");
      }
    }
  }
  finally {
    if (objectInputStream != null) {
      objectInputStream.close();
    }
    if (socket != null) {
      socket.close();
    }
  }
}
