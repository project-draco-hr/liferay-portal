{
  List<Address> clusterNodeAddresses=ClusterExecutorUtil.getClusterNodeAddresses();
  if (_log.isInfoEnabled()) {
    _log.info("Cluster node addresses " + clusterNodeAddresses);
  }
  if (clusterNodeAddresses.size() <= 1) {
    if (_log.isDebugEnabled()) {
      _log.debug("Not loading cache from cluster because a cluster peer " + "was not found");
    }
    return;
  }
  EhcachePortalCacheManager<?,?> ehcachePortalCacheManager=(EhcachePortalCacheManager<?,?>)PortalBeanLocatorUtil.locate(_BEAN_NAME_MULTI_VM_PORTAL_CACHE_MANAGER);
  CacheManager cacheManager=ehcachePortalCacheManager.getEhcacheManager();
  List<String> cacheNames=new ArrayList<String>();
  for (  Ehcache ehcache : ehcaches) {
    if (cacheManager == ehcache.getCacheManager()) {
      cacheNames.add(ehcache.getName());
    }
  }
  ClusterRequest clusterRequest=ClusterRequest.createMulticastRequest(new MethodHandler(_createServerSocketFromClusterMethodKey,cacheNames),true);
  FutureClusterResponses futureClusterResponses=ClusterExecutorUtil.execute(clusterRequest);
  BlockingQueue<ClusterNodeResponse> clusterNodeResponses=futureClusterResponses.getPartialResults();
  ClusterNodeResponse clusterNodeResponse=null;
  try {
    clusterNodeResponse=clusterNodeResponses.poll(PropsValues.CLUSTER_LINK_NODE_BOOTUP_RESPONSE_TIMEOUT,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException ie) {
    return;
  }
  if (clusterNodeResponse == null) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to load cache from the cluster because there " + "was no peer response");
    }
    return;
  }
  if (_log.isInfoEnabled()) {
    _log.info("Load cache data from cluster node " + clusterNodeResponse.getClusterNode());
  }
  Socket socket=null;
  ObjectInputStream objectInputStream=null;
  try {
    SocketAddress remoteSocketAddress=(SocketAddress)clusterNodeResponse.getResult();
    if (remoteSocketAddress == null) {
      _log.error("Cluster peer " + clusterNodeResponse.getClusterNode() + " responded with a null socket address");
      return;
    }
    socket=new Socket();
    socket.connect(remoteSocketAddress);
    socket.shutdownOutput();
    objectInputStream=new AnnotatedObjectInputStream(socket.getInputStream());
    Ehcache ehcache=null;
    while (true) {
      Object object=objectInputStream.readObject();
      if (object instanceof EhcacheElement) {
        EhcacheElement ehcacheElement=(EhcacheElement)object;
        Element element=ehcacheElement.toElement();
        ehcache.put(element,true);
      }
 else       if (object instanceof String) {
        if (_COMMAND_SOCKET_CLOSE.equals(object)) {
          break;
        }
        EhcacheStreamBootstrapCacheLoader.setSkip();
        try {
          ehcache=cacheManager.addCacheIfAbsent((String)object);
        }
  finally {
          EhcacheStreamBootstrapCacheLoader.resetSkip();
        }
      }
 else {
        throw new SystemException("Socket input stream returned invalid object " + object);
      }
    }
  }
 catch (  Exception e) {
    throw new Exception("Unable to load cache data from cluster node " + clusterNodeResponse.getClusterNode(),e);
  }
 finally {
    if (objectInputStream != null) {
      objectInputStream.close();
    }
    if (socket != null) {
      socket.close();
    }
  }
}
