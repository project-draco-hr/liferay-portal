{
  Socket socket=null;
  try {
    try {
      socket=_serverSocket.accept();
    }
 catch (    SocketTimeoutException ste) {
      if (_log.isDebugEnabled()) {
        _log.debug("Terminating the socket thread " + getName() + " that the client requested but never used");
      }
      return;
    }
    _serverSocket.close();
    socket.shutdownInput();
    ObjectOutputStream objectOutputStream=new AnnotatedObjectOutputStream(socket.getOutputStream());
    for (    String cacheName : _ehcacheNames) {
      objectOutputStream.writeObject(_COMMAND_CACHE_TX_START);
      Ehcache ehcache=_portalCacheManager.getCache(cacheName);
      if (ehcache == null) {
        EhcacheStreamBootstrapCacheLoader.setSkip();
        try {
          _portalCacheManager.addCache(cacheName);
        }
  finally {
          EhcacheStreamBootstrapCacheLoader.resetSkip();
        }
      }
 else {
        objectOutputStream.writeObject(cacheName);
        List<Object> keys=ehcache.getKeys();
        for (        Object key : keys) {
          if (!(key instanceof Serializable)) {
            if (_log.isWarnEnabled()) {
              _log.warn("Key " + key + " is not serializable");
            }
            continue;
          }
          Element element=ehcache.get(key);
          if (element == null) {
            continue;
          }
          Object value=element.getObjectValue();
          if (!(value instanceof Serializable)) {
            if (_log.isWarnEnabled() && (value != null)) {
              _log.warn("Value " + value + " is not serializable");
            }
            continue;
          }
          EhcacheElement ehcacheElement=new EhcacheElement((Serializable)key,(Serializable)value);
          objectOutputStream.writeObject(ehcacheElement);
        }
      }
    }
    objectOutputStream.writeObject(_COMMAND_SOCKET_CLOSE);
    objectOutputStream.close();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
  }
}
