{
  LinkedHashMap<String,Object> groupParams=new LinkedHashMap<String,Object>();
  groupParams.put("usersGroups",new Long(argument.getUserId()));
  List<Group> groups=GroupLocalServiceUtil.search(argument.getCompanyId(),null,null,groupParams,QueryUtil.ALL_POS,QueryUtil.ALL_POS);
  List<Organization> userOrgs=OrganizationLocalServiceUtil.getUserOrganizations(argument.getUserId(),true);
  for (  Organization organization : userOrgs) {
    groups.add(0,organization.getGroup());
  }
  if (PropsValues.LAYOUT_USER_PRIVATE_LAYOUTS_ENABLED || PropsValues.LAYOUT_USER_PUBLIC_LAYOUTS_ENABLED) {
    Group userGroup=GroupLocalServiceUtil.getUserGroup(argument.getCompanyId(),argument.getUserId());
    groups.add(0,userGroup);
  }
  for (  Group group : groups) {
    Element folderEl=doc.createElement("Folder");
    foldersEl.appendChild(folderEl);
    long scopeGroupId=argument.getThemeDisplay().getScopeGroupId();
    if (group.hasStagingGroup() && (group.getStagingGroup().getGroupId() == scopeGroupId)) {
      Group stagingGroup=group.getStagingGroup();
      folderEl.setAttribute("name",stagingGroup.getGroupId() + " - " + HtmlUtil.escape(stagingGroup.getDescriptiveName()));
    }
 else {
      folderEl.setAttribute("name",group.getGroupId() + " - " + HtmlUtil.escape(group.getDescriptiveName()));
    }
  }
}
