{
  LinkedHashMap<String,Object> groupParams=new LinkedHashMap<String,Object>();
  groupParams.put("usersGroups",new Long(argument.getUserId()));
  List<Group> groups=GroupLocalServiceUtil.search(argument.getCompanyId(),null,null,groupParams,QueryUtil.ALL_POS,QueryUtil.ALL_POS);
  List<Organization> userOrgs=OrganizationLocalServiceUtil.getUserOrganizations(argument.getUserId(),true);
  for (  Organization organization : userOrgs) {
    groups.add(0,organization.getGroup());
  }
  if (PropsValues.LAYOUT_USER_PRIVATE_LAYOUTS_ENABLED || PropsValues.LAYOUT_USER_PUBLIC_LAYOUTS_ENABLED) {
    Group userGroup=GroupLocalServiceUtil.getUserGroup(argument.getCompanyId(),argument.getUserId());
    groups.add(0,userGroup);
  }
  ThemeDisplay themeDisplay=argument.getThemeDisplay();
  long scopeGroupId=themeDisplay.getScopeGroupId();
  HttpServletRequest request=argument.getHttpServletRequest();
  String portletId=ParamUtil.getString(request,"p_p_id");
  for (  Group group : groups) {
    Element folderEl=doc.createElement("Folder");
    foldersEl.appendChild(folderEl);
    boolean setNameAttribute=false;
    if (group.hasStagingGroup()) {
      Group stagingGroup=group.getStagingGroup();
      if ((stagingGroup.getGroupId() == scopeGroupId) && group.isStagedPortlet(portletId) && !group.isStagedRemotely()&& isStagedData(group)) {
        folderEl.setAttribute("name",stagingGroup.getGroupId() + " - " + HtmlUtil.escape(stagingGroup.getDescriptiveName()));
        setNameAttribute=true;
      }
    }
    if (!setNameAttribute) {
      folderEl.setAttribute("name",group.getGroupId() + " - " + HtmlUtil.escape(group.getDescriptiveName()));
    }
  }
}
