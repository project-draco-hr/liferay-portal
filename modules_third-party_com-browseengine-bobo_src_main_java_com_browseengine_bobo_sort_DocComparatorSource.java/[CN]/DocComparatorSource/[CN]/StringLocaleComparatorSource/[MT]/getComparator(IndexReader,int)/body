{
  final String[] values=FieldCache.DEFAULT.getStrings(reader,field);
  return new DocComparator(){
    public int compare(    ScoreDoc doc1,    ScoreDoc doc2){
      if (values[doc1.doc] == null) {
        if (values[doc2.doc] == null) {
          return 0;
        }
        return -1;
      }
 else       if (values[doc2.doc] == null) {
        return 1;
      }
      return _collator.compare(values[doc1.doc],values[doc2.doc]);
    }
    public StringLocaleComparable value(    ScoreDoc doc){
      return new StringLocaleComparable(values[doc.doc],_collator);
    }
class StringLocaleComparable implements Comparable, Serializable {
      private final String _value;
      private final Collator _collator;
      private static final long serialVersionUID=1L;
      public StringLocaleComparable(      String value,      Collator collator){
        _value=value;
        _collator=collator;
      }
      @Override public int compareTo(      Object o){
        if (o instanceof StringLocaleComparable) {
          StringLocaleComparable other=(StringLocaleComparable)o;
          if (_value == null) {
            if (other._value == null) {
              return 0;
            }
            return -1;
          }
 else           if (other._value == null) {
            return 1;
          }
          return _collator.compare(_value,other._value);
        }
 else {
          throw new IllegalStateException("expected instance of " + StringLocaleComparable.class);
        }
      }
    }
  }
;
}
