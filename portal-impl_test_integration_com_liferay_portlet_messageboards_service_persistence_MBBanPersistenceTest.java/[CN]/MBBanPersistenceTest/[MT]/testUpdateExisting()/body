{
  long pk=ServiceTestUtil.nextLong();
  MBBan newMBBan=_persistence.create(pk);
  newMBBan.setUuid(ServiceTestUtil.randomString());
  newMBBan.setGroupId(ServiceTestUtil.nextLong());
  newMBBan.setCompanyId(ServiceTestUtil.nextLong());
  newMBBan.setUserId(ServiceTestUtil.nextLong());
  newMBBan.setUserName(ServiceTestUtil.randomString());
  newMBBan.setCreateDate(ServiceTestUtil.nextDate());
  newMBBan.setModifiedDate(ServiceTestUtil.nextDate());
  newMBBan.setBanUserId(ServiceTestUtil.nextLong());
  _persistence.update(newMBBan);
  MBBan existingMBBan=_persistence.findByPrimaryKey(newMBBan.getPrimaryKey());
  Assert.assertEquals(existingMBBan.getUuid(),newMBBan.getUuid());
  Assert.assertEquals(existingMBBan.getBanId(),newMBBan.getBanId());
  Assert.assertEquals(existingMBBan.getGroupId(),newMBBan.getGroupId());
  Assert.assertEquals(existingMBBan.getCompanyId(),newMBBan.getCompanyId());
  Assert.assertEquals(existingMBBan.getUserId(),newMBBan.getUserId());
  Assert.assertEquals(existingMBBan.getUserName(),newMBBan.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMBBan.getCreateDate()),Time.getShortTimestamp(newMBBan.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingMBBan.getModifiedDate()),Time.getShortTimestamp(newMBBan.getModifiedDate()));
  Assert.assertEquals(existingMBBan.getBanUserId(),newMBBan.getBanUserId());
}
