{
  long pk=nextLong();
  MBBan newMBBan=_persistence.create(pk);
  newMBBan.setGroupId(nextLong());
  newMBBan.setCompanyId(nextLong());
  newMBBan.setUserId(nextLong());
  newMBBan.setUserName(randomString());
  newMBBan.setCreateDate(nextDate());
  newMBBan.setModifiedDate(nextDate());
  newMBBan.setBanUserId(nextLong());
  _persistence.update(newMBBan,false);
  MBBan existingMBBan=_persistence.findByPrimaryKey(newMBBan.getPrimaryKey());
  assertEquals(existingMBBan.getBanId(),newMBBan.getBanId());
  assertEquals(existingMBBan.getGroupId(),newMBBan.getGroupId());
  assertEquals(existingMBBan.getCompanyId(),newMBBan.getCompanyId());
  assertEquals(existingMBBan.getUserId(),newMBBan.getUserId());
  assertEquals(existingMBBan.getUserName(),newMBBan.getUserName());
  assertEquals(Time.getShortTimestamp(existingMBBan.getCreateDate()),Time.getShortTimestamp(newMBBan.getCreateDate()));
  assertEquals(Time.getShortTimestamp(existingMBBan.getModifiedDate()),Time.getShortTimestamp(newMBBan.getModifiedDate()));
  assertEquals(existingMBBan.getBanUserId(),newMBBan.getBanUserId());
}
