{
  long pk=RandomTestUtil.nextLong();
  SocialActivityCounter newSocialActivityCounter=_persistence.create(pk);
  newSocialActivityCounter.setGroupId(RandomTestUtil.nextLong());
  newSocialActivityCounter.setCompanyId(RandomTestUtil.nextLong());
  newSocialActivityCounter.setClassNameId(RandomTestUtil.nextLong());
  newSocialActivityCounter.setClassPK(RandomTestUtil.nextLong());
  newSocialActivityCounter.setName(RandomTestUtil.randomString());
  newSocialActivityCounter.setOwnerType(RandomTestUtil.nextInt());
  newSocialActivityCounter.setCurrentValue(RandomTestUtil.nextInt());
  newSocialActivityCounter.setTotalValue(RandomTestUtil.nextInt());
  newSocialActivityCounter.setGraceValue(RandomTestUtil.nextInt());
  newSocialActivityCounter.setStartPeriod(RandomTestUtil.nextInt());
  newSocialActivityCounter.setEndPeriod(RandomTestUtil.nextInt());
  newSocialActivityCounter.setActive(RandomTestUtil.randomBoolean());
  _socialActivityCounters.add(_persistence.update(newSocialActivityCounter));
  SocialActivityCounter existingSocialActivityCounter=_persistence.findByPrimaryKey(newSocialActivityCounter.getPrimaryKey());
  Assert.assertEquals(existingSocialActivityCounter.getActivityCounterId(),newSocialActivityCounter.getActivityCounterId());
  Assert.assertEquals(existingSocialActivityCounter.getGroupId(),newSocialActivityCounter.getGroupId());
  Assert.assertEquals(existingSocialActivityCounter.getCompanyId(),newSocialActivityCounter.getCompanyId());
  Assert.assertEquals(existingSocialActivityCounter.getClassNameId(),newSocialActivityCounter.getClassNameId());
  Assert.assertEquals(existingSocialActivityCounter.getClassPK(),newSocialActivityCounter.getClassPK());
  Assert.assertEquals(existingSocialActivityCounter.getName(),newSocialActivityCounter.getName());
  Assert.assertEquals(existingSocialActivityCounter.getOwnerType(),newSocialActivityCounter.getOwnerType());
  Assert.assertEquals(existingSocialActivityCounter.getCurrentValue(),newSocialActivityCounter.getCurrentValue());
  Assert.assertEquals(existingSocialActivityCounter.getTotalValue(),newSocialActivityCounter.getTotalValue());
  Assert.assertEquals(existingSocialActivityCounter.getGraceValue(),newSocialActivityCounter.getGraceValue());
  Assert.assertEquals(existingSocialActivityCounter.getStartPeriod(),newSocialActivityCounter.getStartPeriod());
  Assert.assertEquals(existingSocialActivityCounter.getEndPeriod(),newSocialActivityCounter.getEndPeriod());
  Assert.assertEquals(existingSocialActivityCounter.getActive(),newSocialActivityCounter.getActive());
}
