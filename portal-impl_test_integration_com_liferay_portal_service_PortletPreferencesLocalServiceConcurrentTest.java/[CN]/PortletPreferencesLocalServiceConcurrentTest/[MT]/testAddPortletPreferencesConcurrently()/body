{
  SynchronousInvocationHandler.enable();
  try {
    final long ownerId=RandomTestUtil.randomLong();
    final int ownerType=RandomTestUtil.randomInt();
    final long plid=RandomTestUtil.randomLong();
    final String portletId=RandomTestUtil.randomString(UniqueStringRandomizerBumper.INSTANCE);
    Callable<PortletPreferences> callable=new Callable<PortletPreferences>(){
      @Override public PortletPreferences call() throws PortalException {
        return PortletPreferencesLocalServiceUtil.getPreferences(TestPropsValues.getCompanyId(),ownerId,ownerType,plid,portletId);
      }
    }
;
    List<FutureTask<PortletPreferences>> futureTasks=new ArrayList<>();
    for (int i=0; i < _threadCount; i++) {
      FutureTask<PortletPreferences> futureTask=new FutureTask<>(callable);
      Thread thread=new Thread(futureTask,PortletPreferencesLocalServiceConcurrentTest.class.getName() + "-concurrent-getPreferences-" + i);
      thread.start();
      futureTasks.add(futureTask);
    }
    Set<PortletPreferences> portletPreferencesSet=new HashSet<>();
    for (    FutureTask<PortletPreferences> futureTask : futureTasks) {
      portletPreferencesSet.add(futureTask.get());
    }
    Assert.assertEquals(portletPreferencesSet.toString(),1,portletPreferencesSet.size());
    _portletPreferences=PortletPreferencesLocalServiceUtil.getPortletPreferences(ownerId,ownerType,plid,portletId);
  }
  finally {
    SynchronousInvocationHandler.disable();
  }
}
