{
  StringBundler sb=new StringBundler();
  sb.append("select KaleoNode.type_, ");
  sb.append("KaleoInstanceToken.kaleoInstanceTokenId from KaleoNode ");
  sb.append("inner join KaleoInstanceToken on (KaleoNode.kaleoNodeId ");
  sb.append("= KaleoInstanceToken.currentKaleoNodeId) where ");
  sb.append("KaleoInstanceToken.kaleoInstanceTokenId = (select ");
  sb.append("parentKaleoInstanceTokenId from KaleoInstanceToken where ");
  sb.append("KaleoInstanceTokenId = ?)");
  String sql=sb.toString();
  try (PreparedStatement ps=connection.prepareStatement(sql)){
    ps.setLong(1,kaleoInstanceTokenId);
    try (ResultSet rs=ps.executeQuery()){
      if (rs.next()) {
        String type=rs.getString("type_");
        if (!type.equals(NodeType.TASK.toString())) {
          return kaleoInstanceTokenId;
        }
        long parentKaleoInstanceTokenId=rs.getLong("kaleoInstanceTokenId");
        _kaleoInstanceTokenIds.add(kaleoInstanceTokenId);
        return getKaleoInstanceTokenId(parentKaleoInstanceTokenId);
      }
 else {
        return kaleoInstanceTokenId;
      }
    }
   }
 }
