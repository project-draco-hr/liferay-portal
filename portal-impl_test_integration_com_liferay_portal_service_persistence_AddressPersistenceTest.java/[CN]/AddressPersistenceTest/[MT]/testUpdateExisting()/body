{
  long pk=RandomTestUtil.nextLong();
  Address newAddress=_persistence.create(pk);
  newAddress.setMvccVersion(RandomTestUtil.nextLong());
  newAddress.setUuid(RandomTestUtil.randomString());
  newAddress.setCompanyId(RandomTestUtil.nextLong());
  newAddress.setUserId(RandomTestUtil.nextLong());
  newAddress.setUserName(RandomTestUtil.randomString());
  newAddress.setCreateDate(RandomTestUtil.nextDate());
  newAddress.setModifiedDate(RandomTestUtil.nextDate());
  newAddress.setClassNameId(RandomTestUtil.nextLong());
  newAddress.setClassPK(RandomTestUtil.nextLong());
  newAddress.setStreet1(RandomTestUtil.randomString());
  newAddress.setStreet2(RandomTestUtil.randomString());
  newAddress.setStreet3(RandomTestUtil.randomString());
  newAddress.setCity(RandomTestUtil.randomString());
  newAddress.setZip(RandomTestUtil.randomString());
  newAddress.setRegionId(RandomTestUtil.nextLong());
  newAddress.setCountryId(RandomTestUtil.nextLong());
  newAddress.setTypeId(RandomTestUtil.nextInt());
  newAddress.setMailing(RandomTestUtil.randomBoolean());
  newAddress.setPrimary(RandomTestUtil.randomBoolean());
  _models.add(_persistence.update(newAddress));
  Address existingAddress=_persistence.findByPrimaryKey(newAddress.getPrimaryKey());
  Assert.assertEquals(existingAddress.getMvccVersion(),newAddress.getMvccVersion());
  Assert.assertEquals(existingAddress.getUuid(),newAddress.getUuid());
  Assert.assertEquals(existingAddress.getAddressId(),newAddress.getAddressId());
  Assert.assertEquals(existingAddress.getCompanyId(),newAddress.getCompanyId());
  Assert.assertEquals(existingAddress.getUserId(),newAddress.getUserId());
  Assert.assertEquals(existingAddress.getUserName(),newAddress.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingAddress.getCreateDate()),Time.getShortTimestamp(newAddress.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingAddress.getModifiedDate()),Time.getShortTimestamp(newAddress.getModifiedDate()));
  Assert.assertEquals(existingAddress.getClassNameId(),newAddress.getClassNameId());
  Assert.assertEquals(existingAddress.getClassPK(),newAddress.getClassPK());
  Assert.assertEquals(existingAddress.getStreet1(),newAddress.getStreet1());
  Assert.assertEquals(existingAddress.getStreet2(),newAddress.getStreet2());
  Assert.assertEquals(existingAddress.getStreet3(),newAddress.getStreet3());
  Assert.assertEquals(existingAddress.getCity(),newAddress.getCity());
  Assert.assertEquals(existingAddress.getZip(),newAddress.getZip());
  Assert.assertEquals(existingAddress.getRegionId(),newAddress.getRegionId());
  Assert.assertEquals(existingAddress.getCountryId(),newAddress.getCountryId());
  Assert.assertEquals(existingAddress.getTypeId(),newAddress.getTypeId());
  Assert.assertEquals(existingAddress.getMailing(),newAddress.getMailing());
  Assert.assertEquals(existingAddress.getPrimary(),newAddress.getPrimary());
}
