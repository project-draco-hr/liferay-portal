{
  Company company=companyPersistence.findByPrimaryKey(entry.getCompanyId());
  String className=entry.getClassName();
  long classPK=entry.getClassPK();
  String toName=PropsValues.ANNOUNCEMENTS_EMAIL_TO_NAME;
  String toAddress=PropsValues.ANNOUNCEMENTS_EMAIL_TO_ADDRESS;
  LinkedHashMap<String,Object> params=new LinkedHashMap<String,Object>();
  params.put("announcementsDeliveryEmailOrSms",entry.getType());
  if (classPK > 0) {
    if (className.equals(Group.class.getName())) {
      Group group=groupPersistence.findByPrimaryKey(classPK);
      toName=group.getName();
      params.put("inherit",Boolean.TRUE);
      params.put("usersGroups",classPK);
    }
 else     if (className.equals(Organization.class.getName())) {
      Organization organization=organizationPersistence.findByPrimaryKey(classPK);
      toName=organization.getName();
      params.put("usersOrgsTree",ListUtil.fromArray(new Organization[]{organization}));
    }
 else     if (className.equals(Role.class.getName())) {
      Role role=rolePersistence.findByPrimaryKey(classPK);
      toName=role.getName();
      if (role.getType() == RoleConstants.TYPE_REGULAR) {
        params.put("inherit",Boolean.TRUE);
        params.put("usersRoles",classPK);
      }
 else {
        params.put("userGroupRole",new Long[]{Long.valueOf(0),classPK});
      }
    }
 else     if (className.equals(UserGroup.class.getName())) {
      UserGroup userGroup=userGroupPersistence.findByPrimaryKey(classPK);
      toName=userGroup.getName();
      params.put("usersUserGroups",classPK);
    }
  }
  List<User> users=new ArrayList<User>();
  if (className.equals(User.class.getName())) {
    User user=userPersistence.findByPrimaryKey(classPK);
    toName=user.getFullName();
    toAddress=user.getEmailAddress();
    if (Validator.isNull(toAddress)) {
      return;
    }
    users.add(user);
    notifyUsers(users,entry,company.getLocale(),toAddress,toName);
  }
 else {
    int count=userLocalService.searchCount(company.getCompanyId(),null,WorkflowConstants.STATUS_APPROVED,params);
    int pages=count / Indexer.DEFAULT_INTERVAL;
    for (int i=0; i <= pages; i++) {
      int start=(i * Indexer.DEFAULT_INTERVAL);
      int end=start + Indexer.DEFAULT_INTERVAL;
      users=userLocalService.search(company.getCompanyId(),null,WorkflowConstants.STATUS_APPROVED,params,start,end,(OrderByComparator)null);
      notifyUsers(users,entry,company.getLocale(),toAddress,toName);
    }
  }
}
