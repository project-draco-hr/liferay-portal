{
  Class<?> returnType=method.getReturnType();
  if (returnType.equals(boolean.class)) {
    String value=_getMapValue(method.getName());
    if (value == null) {
      return null;
    }
    return Boolean.valueOf(value);
  }
 else   if (returnType.equals(double.class)) {
    String value=_getMapValue(method.getName());
    if (value == null) {
      return null;
    }
    return Double.valueOf(_getMapValue(method.getName()));
  }
 else   if (returnType.equals(float.class)) {
    String value=_getMapValue(method.getName());
    if (value == null) {
      return null;
    }
    return Float.valueOf(_getMapValue(method.getName()));
  }
 else   if (returnType.equals(int.class)) {
    String value=_getMapValue(method.getName());
    if (value == null) {
      return null;
    }
    return Integer.valueOf(_getMapValue(method.getName()));
  }
 else   if (returnType.equals(LocalizedValuesMap.class)) {
    return _getMapValue(method.getName());
  }
 else   if (returnType.equals(long.class)) {
    String value=_getMapValue(method.getName());
    if (value == null) {
      return null;
    }
    return Long.valueOf(_getMapValue(method.getName()));
  }
 else   if (returnType.equals(String.class)) {
    return _getMapValue(method.getName());
  }
 else   if (returnType.equals(String[].class)) {
    return _getMapValueArray(method.getName());
  }
 else   if (returnType.isEnum()) {
    Method valueOfMethod=returnType.getDeclaredMethod("valueOf",String.class);
    return valueOfMethod.invoke(returnType,_parameterMap.get(method.getName()));
  }
  Constructor<?> constructor=returnType.getConstructor(String.class);
  return constructor.newInstance(_parameterMap.get(method.getName()));
}
