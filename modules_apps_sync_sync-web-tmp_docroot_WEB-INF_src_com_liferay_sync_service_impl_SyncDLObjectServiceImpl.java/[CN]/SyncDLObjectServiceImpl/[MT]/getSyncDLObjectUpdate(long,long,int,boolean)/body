{
  try {
    SyncUtil.checkSyncEnabled(repositoryId);
    repositoryService.checkRepository(repositoryId);
    String[] events=null;
    if (retrieveFromCache) {
      events=new String[0];
    }
 else {
      events=new String[]{SyncDLObjectConstants.EVENT_DELETE,SyncDLObjectConstants.EVENT_TRASH};
    }
    int count=syncDLObjectPersistence.countByM_R_NotE(lastAccessTime,repositoryId,events);
    if (count == 0) {
      SyncDLObjectUpdate syncDLObjectUpdate=new SyncDLObjectUpdate(Collections.<SyncDLObject>emptyList(),0,lastAccessTime);
      return syncDLObjectUpdate.toString();
    }
    int start=0;
    int end=0;
    if (max == QueryUtil.ALL_POS) {
      start=QueryUtil.ALL_POS;
      end=QueryUtil.ALL_POS;
    }
 else     if (max == 0) {
      end=PortletPropsValues.SYNC_PAGINATION_DELTA;
    }
 else {
      end=max;
    }
    List<SyncDLObject> syncDLObjects=null;
    if (retrieveFromCache) {
      syncDLObjects=syncDLObjectPersistence.findByM_R_NotE(lastAccessTime,repositoryId,events,start,end,new SyncDLObjectModifiedTimeComparator());
    }
 else {
      syncDLObjects=syncDLObjectFinder.findByModifiedTime(lastAccessTime,repositoryId,0,null,start,end);
    }
    SyncDLObject syncDLObject=syncDLObjects.get(syncDLObjects.size() - 1);
    SyncDLObjectUpdate syncDLObjectUpdate=new SyncDLObjectUpdate(checkSyncDLObjects(syncDLObjects,repositoryId,lastAccessTime),count,syncDLObject.getModifiedTime());
    return syncDLObjectUpdate.toString();
  }
 catch (  PortalException pe) {
    throw new PortalException(SyncUtil.buildExceptionMessage(pe),pe);
  }
}
