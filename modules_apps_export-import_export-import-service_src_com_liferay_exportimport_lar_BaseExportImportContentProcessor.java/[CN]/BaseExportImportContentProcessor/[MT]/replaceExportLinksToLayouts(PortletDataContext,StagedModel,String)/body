{
  List<String> oldLinksToLayout=new ArrayList<>();
  List<String> newLinksToLayout=new ArrayList<>();
  Matcher matcher=exportLinksToLayoutPattern.matcher(content);
  while (matcher.find()) {
    long layoutId=GetterUtil.getLong(matcher.group(1));
    String type=matcher.group(2);
    boolean privateLayout=type.startsWith("private");
    try {
      Layout layout=LayoutLocalServiceUtil.getLayout(portletDataContext.getScopeGroupId(),privateLayout,layoutId);
      String oldLinkToLayout=matcher.group(0);
      StringBundler sb=new StringBundler(5);
      sb.append(type);
      sb.append(StringPool.AT);
      sb.append(layout.getPlid());
      String newLinkToLayout=StringUtil.replace(oldLinkToLayout,type,sb.toString());
      oldLinksToLayout.add(oldLinkToLayout);
      newLinksToLayout.add(newLinkToLayout);
      Element entityElement=portletDataContext.getExportDataElement(stagedModel);
      portletDataContext.addReferenceElement(stagedModel,entityElement,layout,PortletDataContext.REFERENCE_TYPE_DEPENDENCY,true);
    }
 catch (    Exception e) {
      if (_log.isDebugEnabled() || _log.isWarnEnabled()) {
        String message="Unable to get layout with ID " + layoutId + " in group "+ portletDataContext.getScopeGroupId();
        if (_log.isDebugEnabled()) {
          _log.debug(message,e);
        }
 else {
          _log.warn(message);
        }
      }
    }
  }
  content=StringUtil.replace(content,ArrayUtil.toStringArray(oldLinksToLayout.toArray()),ArrayUtil.toStringArray(newLinksToLayout.toArray()));
  return content;
}
