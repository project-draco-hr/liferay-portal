{
  HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
  HttpServletResponse response=PortalUtil.getHttpServletResponse(actionResponse);
  HttpSession session=request.getSession();
  LiferayPortletResponse liferayPortletResponse=PortalUtil.getLiferayPortletResponse(actionResponse);
  String openId=ParamUtil.getString(actionRequest,"openId");
  PortletURL portletURL=liferayPortletResponse.createActionURL();
  portletURL.setParameter("saveLastPath",Boolean.FALSE.toString());
  portletURL.setParameter(Constants.CMD,Constants.READ);
  portletURL.setParameter("mvcRenderCommandName","/login/openid");
  portletURL.setParameter(ActionRequest.ACTION_NAME,"/login/openid");
  try {
    List<DiscoveryInformation> discoveryInformationList=_consumerManager.discover(openId);
    DiscoveryInformation discoveryInformation=_consumerManager.associate(discoveryInformationList);
    session.setAttribute(OpenIdWebKeys.OPEN_ID_DISCO,discoveryInformation);
    AuthRequest authRequest=_consumerManager.authenticate(discoveryInformation,portletURL.toString(),themeDisplay.getPortalURL());
    if (_userLocalService.fetchUserByOpenId(themeDisplay.getCompanyId(),openId) != null) {
      response.sendRedirect(authRequest.getDestinationUrl(true));
      return;
    }
    String screenName=getScreenName(openId);
    User user=_userLocalService.fetchUserByScreenName(themeDisplay.getCompanyId(),screenName);
    if (user != null) {
      _userLocalService.updateOpenId(user.getUserId(),openId);
      response.sendRedirect(authRequest.getDestinationUrl(true));
      return;
    }
    FetchRequest fetchRequest=FetchRequest.createFetchRequest();
    OpenIdProvider openIdProvider=_openIdProviderRegistry.getOpenIdProvider(discoveryInformation.getOPEndpoint());
    Map<String,String> openIdAXTypes=openIdProvider.getAxTypes();
    for (    String openIdAXType : openIdAXTypes.keySet()) {
      fetchRequest.addAttribute(openIdAXType,openIdAXTypes.get(openIdAXType),true);
    }
    authRequest.addExtension(fetchRequest);
    SRegRequest sRegRequest=SRegRequest.createFetchRequest();
    sRegRequest.addAttribute(_OPEN_ID_SREG_ATTR_EMAIL,true);
    sRegRequest.addAttribute(_OPEN_ID_SREG_ATTR_FULLNAME,true);
    authRequest.addExtension(sRegRequest);
    response.sendRedirect(authRequest.getDestinationUrl(true));
  }
 catch (  ConsumerException ce) {
    throw new OpenIdServiceException.ConsumerException(ce.getMessage(),ce);
  }
catch (  DiscoveryException de) {
    throw new OpenIdServiceException.DiscoveryException(de.getMessage(),de);
  }
catch (  MessageException me) {
    throw new OpenIdServiceException.MessageException(me.getMessage(),me);
  }
catch (  IOException e) {
    throw new SystemException("Error communicating with open id provider",e);
  }
}
