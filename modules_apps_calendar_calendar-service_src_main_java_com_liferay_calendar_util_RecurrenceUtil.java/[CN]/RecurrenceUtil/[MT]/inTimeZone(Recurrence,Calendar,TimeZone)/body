{
  recurrence=recurrence.clone();
  Calendar untilJCalendar=recurrence.getUntilJCalendar();
  if (untilJCalendar != null) {
    untilJCalendar=JCalendarUtil.getJCalendar(recurrence.getUntilJCalendar(),timeZone);
    recurrence.setUntilJCalendar(untilJCalendar);
  }
  List<Calendar> exceptionJCalendars=recurrence.getExceptionJCalendars();
  List<Calendar> newExceptionJCalendars=new ArrayList<>();
  for (  Calendar exceptionJCalendar : exceptionJCalendars) {
    exceptionJCalendar=JCalendarUtil.getJCalendar(exceptionJCalendar,timeZone);
    newExceptionJCalendars.add(exceptionJCalendar);
  }
  recurrence.setExceptionJCalendars(newExceptionJCalendars);
  List<PositionalWeekday> positionalWeekdays=recurrence.getPositionalWeekdays();
  List<PositionalWeekday> newPositionalWeekdays=new ArrayList<>();
  for (  PositionalWeekday positionalWeekday : positionalWeekdays) {
    Calendar jCalendar=JCalendarUtil.getJCalendar(startTimeJCalendar,recurrence.getTimeZone());
    Weekday weekday=positionalWeekday.getWeekday();
    jCalendar.set(Calendar.DAY_OF_WEEK,weekday.getCalendarWeekday());
    jCalendar=JCalendarUtil.getJCalendar(jCalendar,timeZone);
    weekday=Weekday.getWeekday(jCalendar);
    positionalWeekday=new PositionalWeekday(weekday,positionalWeekday.getPosition());
    newPositionalWeekdays.add(positionalWeekday);
  }
  recurrence.setPositionalWeekdays(newPositionalWeekdays);
  recurrence.setTimeZone(timeZone);
  return recurrence;
}
