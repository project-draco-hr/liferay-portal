{
  if (buildURL == null) {
    Matcher invocationURLMatcher=invocationURLPattern.matcher(this.invocationURL);
    if (!invocationURLMatcher.find()) {
      throw new IllegalArgumentException("Invalid invocation URL");
    }
    String queryString=invocationURLMatcher.group("queryString");
    Set<String> jobParameterNames=getJobParameterNames();
    for (    String parameter : queryString.split("&")) {
      String[] nameValueArray=parameter.split("=");
      if ((nameValueArray.length == 2) && jobParameterNames.contains(nameValueArray[0])) {
        parameters.put(nameValueArray[0],nameValueArray[1]);
      }
    }
    return;
  }
  JSONObject buildJSONObject=getBuildJSONObject();
  JSONArray actionsJSONArray=buildJSONObject.getJSONArray("actions");
  if (actionsJSONArray.length() == 0) {
    parameters=new HashMap<>(0);
    return;
  }
  JSONObject actionJSONObject=actionsJSONArray.getJSONObject(0);
  if (actionJSONObject.has("parameters")) {
    JSONArray parametersJSONArray=actionJSONObject.getJSONArray("parameters");
    parameters=new HashMap<>(parametersJSONArray.length());
    for (int i=0; i < parametersJSONArray.length(); i++) {
      JSONObject parameterJSONObject=parametersJSONArray.getJSONObject(i);
      Object value=parameterJSONObject.opt("value");
      if (value instanceof String) {
        if (!value.toString().isEmpty()) {
          parameters.put(parameterJSONObject.getString("name"),value.toString());
        }
      }
    }
    return;
  }
  parameters=Collections.emptyMap();
}
