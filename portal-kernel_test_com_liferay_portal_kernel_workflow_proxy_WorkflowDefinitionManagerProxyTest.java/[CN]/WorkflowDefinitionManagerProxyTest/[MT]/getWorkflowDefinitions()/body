{
  WorkflowDefinition definition1=context.mock(WorkflowDefinition.class,"definition1");
  WorkflowDefinition definition2=context.mock(WorkflowDefinition.class,"definition2");
  List<WorkflowDefinition> definitionList=new ArrayList<WorkflowDefinition>();
  definitionList.add(definition1);
  definitionList.add(definition2);
  ignored(4,0);
  final WorkflowDefinitionRequest request=WorkflowDefinitionRequest.createGetWorkflowDefinitionsRequest();
  final WorkflowResultContainer<List<WorkflowDefinition>> correctResult=new WorkflowResultContainer<List<WorkflowDefinition>>(definitionList);
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(returnValue(correctResult));
    }
  }
);
  List<WorkflowDefinition> definitions=workflowDefinitionManagerProxy.getWorkflowDefinitions();
  assertEquals(2,definitions.size());
  assertEquals(definition1,definitions.get(0));
  assertEquals(definition2,definitions.get(1));
  final WorkflowResultContainer<List<WorkflowDefinition>> errorResult=new WorkflowResultContainer<List<WorkflowDefinition>>();
  errorResult.setException(new WorkflowException());
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(returnValue(errorResult));
    }
  }
);
  assertEquals(0,workflowDefinitionManagerProxy.getWorkflowDefinitions().size());
  final MessageBusException exception=new MessageBusException();
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(throwException(exception));
    }
  }
);
  assertEquals(0,workflowDefinitionManagerProxy.getWorkflowDefinitions().size());
}
