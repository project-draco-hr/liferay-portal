{
  long callingUserId=1;
  WorkflowDefinition definition=context.mock(WorkflowDefinition.class);
  ignored(4,callingUserId);
  final WorkflowDefinitionRequest request=WorkflowDefinitionRequest.createDeployWorkflowDefinitionRequest(definition,callingUserId);
  final WorkflowResultContainer<Object> correctResult=new WorkflowResultContainer<Object>(true);
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(returnValue(correctResult));
    }
  }
);
  workflowDefinitionManagerProxy.deployWorkflowDefinition(definition,callingUserId);
  final WorkflowResultContainer<Boolean> errorResult=new WorkflowResultContainer<Boolean>();
  errorResult.setException(new WorkflowException());
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(returnValue(errorResult));
    }
  }
);
  boolean errorFlag=false;
  try {
    workflowDefinitionManagerProxy.deployWorkflowDefinition(definition,callingUserId);
  }
 catch (  WorkflowException ex) {
    errorFlag=true;
  }
  assertTrue(errorFlag);
  final MessageBusException exception=new MessageBusException();
  context.checking(new Expectations(){
{
      oneOf(synchronousMessageSender).send(with(equal(request)));
      will(throwException(exception));
    }
  }
);
  errorFlag=false;
  try {
    workflowDefinitionManagerProxy.deployWorkflowDefinition(definition,callingUserId);
  }
 catch (  WorkflowException ex) {
    errorFlag=true;
  }
  assertTrue(errorFlag);
}
