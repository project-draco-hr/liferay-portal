{
  try {
    SearchContext searchContext=new SearchContext();
    searchContext.setSearchEngineId(SearchEngineUtil.SYSTEM_ENGINE_ID);
    BooleanQuery contextQuery=BooleanQueryFactoryUtil.create(searchContext);
    contextQuery.addRequiredTerm(Field.PORTLET_ID,portletId);
    if (groupId > 0) {
      Group group=groupLocalService.getGroup(groupId);
      if (group.isLayout()) {
        contextQuery.addRequiredTerm(Field.SCOPE_GROUP_ID,groupId);
        groupId=group.getParentGroupId();
      }
      contextQuery.addRequiredTerm(Field.GROUP_ID,groupId);
    }
    if ((repositoryIds != null) && (repositoryIds.length > 0)) {
      BooleanQuery repositoryIdsQuery=BooleanQueryFactoryUtil.create(searchContext);
      for (      long repositoryId : repositoryIds) {
        try {
          if (userId > 0) {
            PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
            DLFolderPermission.check(permissionChecker,groupId,repositoryId,ActionKeys.VIEW);
          }
          if (repositoryId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
            repositoryId=groupId;
          }
          TermQuery termQuery=TermQueryFactoryUtil.create(searchContext,"repositoryId",repositoryId);
          repositoryIdsQuery.add(termQuery,BooleanClauseOccur.SHOULD);
        }
 catch (        Exception e) {
        }
      }
      contextQuery.add(repositoryIdsQuery,BooleanClauseOccur.MUST);
    }
    BooleanQuery searchQuery=BooleanQueryFactoryUtil.create(searchContext);
    searchQuery.addTerms(_KEYWORDS_FIELDS,keywords);
    BooleanQuery fullQuery=BooleanQueryFactoryUtil.create(searchContext);
    fullQuery.add(contextQuery,BooleanClauseOccur.MUST);
    if (searchQuery.clauses().size() > 0) {
      fullQuery.add(searchQuery,BooleanClauseOccur.MUST);
    }
    return SearchEngineUtil.search(companyId,new long[]{groupId},userId,DLFileEntry.class.getName(),fullQuery,start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
}
