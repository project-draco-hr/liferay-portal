{
  User user=userPersistence.findByPrimaryKey(serviceContext.getGuestOrUserId());
  Date now=new Date();
  long kaleoNotificationId=counterLocalService.increment();
  KaleoNotification kaleoNotification=kaleoNotificationPersistence.create(kaleoNotificationId);
  kaleoNotification.setCompanyId(user.getCompanyId());
  kaleoNotification.setUserId(user.getUserId());
  kaleoNotification.setUserName(user.getFullName());
  kaleoNotification.setCreateDate(now);
  kaleoNotification.setModifiedDate(now);
  kaleoNotification.setKaleoClassName(kaleoClassName);
  kaleoNotification.setKaleoClassPK(kaleoClassPK);
  kaleoNotification.setKaleoDefinitionId(kaleoDefinitionId);
  kaleoNotification.setKaleoNodeName(kaleoNodeName);
  kaleoNotification.setName(notification.getName());
  kaleoNotification.setDescription(notification.getDescription());
  kaleoNotification.setExecutionType(notification.getExecutionType().getValue());
  kaleoNotification.setTemplate(notification.getTemplate());
  kaleoNotification.setTemplateLanguage(notification.getTemplateLanguage().getValue());
  Set<NotificationType> notificationTypes=notification.getNotificationTypes();
  if (!notificationTypes.isEmpty()) {
    StringBundler sb=new StringBundler(notificationTypes.size() * 2);
    for (    NotificationType notificationType : notificationTypes) {
      sb.append(notificationType.getValue());
      sb.append(StringPool.COMMA);
    }
    sb.setIndex(sb.index() - 1);
    kaleoNotification.setNotificationTypes(sb.toString());
  }
  kaleoNotificationPersistence.update(kaleoNotification);
  Map<NotificationReceptionType,Set<Recipient>> recipientsMap=notification.getRecipientsMap();
  for (  Set<Recipient> recipients : recipientsMap.values()) {
    for (    Recipient recipient : recipients) {
      kaleoNotificationRecipientLocalService.addKaleoNotificationRecipient(kaleoDefinitionId,kaleoNotificationId,recipient,serviceContext);
    }
  }
  return kaleoNotification;
}
