{
  Registry registry=Mockito.mock(Registry.class);
  Mockito.when(registry.getRegistry()).thenReturn(registry);
  Mockito.when(registry.setRegistry(registry)).thenReturn(registry);
  ServiceTracker<Object,Object> serviceTracker=Mockito.mock(ServiceTracker.class);
  Mockito.when(registry.trackServices((Class<Object>)Matchers.any(),(ServiceTrackerCustomizer<Object,Object>)Matchers.any())).thenReturn(serviceTracker);
  RegistryUtil.setRegistry(null);
  RegistryUtil.setRegistry(registry);
  EntityCacheUtil entityCacheUtil=new EntityCacheUtil();
  entityCacheUtil.setEntityCache(Mockito.mock(EntityCache.class));
  FinderCacheUtil finderCacheUtil=new FinderCacheUtil();
  finderCacheUtil.setFinderCache(Mockito.mock(FinderCache.class));
  _messageBus=new DefaultMessageBus();
  SynchronousDestination synchronousDestination=new SynchronousDestination();
  synchronousDestination.setName(DestinationNames.MESSAGE_BUS_DEFAULT_RESPONSE);
  _messageBus.addDestination(synchronousDestination);
  _defaultSynchronousMessageSender=new DefaultSynchronousMessageSender();
  _defaultSynchronousMessageSender.setMessageBus(_messageBus);
  _defaultSynchronousMessageSender.setTimeout(10000);
  _portalExecutorManager=Mockito.mock(PortalExecutorManager.class);
  Mockito.when(_portalExecutorManager.getPortalExecutor(Mockito.anyString())).thenReturn(new ThreadPoolExecutor(1,1));
  Mockito.when(serviceTracker.getService()).thenReturn(_portalExecutorManager);
  synchronousDestination.open();
}
