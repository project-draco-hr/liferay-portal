{
  StringBundler sb=new StringBundler();
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content));
  int lineCount=0;
  String line=null;
  String previousLine=StringPool.BLANK;
  String currentAttributeAndValue=null;
  String previousAttribute=null;
  String previousAttributeAndValue=null;
  boolean readAttributes=false;
  String currentException=null;
  String previousException=null;
  boolean hasUnsortedExceptions=false;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    lineCount++;
    if (!fileName.contains("jsonw") || !fileName.endsWith("action.jsp")) {
      line=_trimLine(line,false);
    }
    if (line.contains("<aui:button ") && line.contains("type=\"button\"")) {
      _processErrorMessage(fileName,"aui:button " + fileName + " "+ lineCount);
    }
    String trimmedLine=StringUtil.trimLeading(line);
    String trimmedPreviousLine=StringUtil.trimLeading(previousLine);
    if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>")&& !line.contains(" %>")) {
      line=StringUtil.replace(line,"%>"," %>");
    }
    if (line.contains("<%=") && !line.contains("<%= ")) {
      line=StringUtil.replace(line,"<%=","<%= ");
    }
    if (trimmedPreviousLine.equals("%>") && Validator.isNotNull(line) && !trimmedLine.equals("-->")) {
      sb.append("\n");
    }
 else     if (Validator.isNotNull(previousLine) && !trimmedPreviousLine.equals("<!--") && trimmedLine.equals("<%")) {
      sb.append("\n");
    }
 else     if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) {
      continue;
    }
 else     if (trimmedPreviousLine.equals("<%") && trimmedLine.startsWith("//")) {
      sb.append("\n");
    }
 else     if (Validator.isNull(previousLine) && trimmedLine.equals("%>") && (sb.index() > 2)) {
      String lineBeforePreviousLine=sb.stringAt(sb.index() - 3);
      if (!lineBeforePreviousLine.startsWith("//")) {
        sb.setIndex(sb.index() - 1);
      }
    }
    if ((trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")) && trimmedLine.endsWith(") {")) {
      _checkIfClauseParentheses(trimmedLine,fileName,lineCount);
    }
    if (readAttributes) {
      if (!trimmedLine.startsWith(StringPool.FORWARD_SLASH) && !trimmedLine.startsWith(StringPool.GREATER_THAN)) {
        int pos=trimmedLine.indexOf(StringPool.EQUAL);
        if (pos != -1) {
          String attribute=trimmedLine.substring(0,pos);
          if (!trimmedLine.endsWith(StringPool.QUOTE) && !trimmedLine.endsWith(StringPool.APOSTROPHE)) {
            _processErrorMessage(fileName,"attribute: " + fileName + " "+ lineCount);
            readAttributes=false;
          }
 else           if (trimmedLine.endsWith(StringPool.APOSTROPHE) && !trimmedLine.contains(StringPool.QUOTE)) {
            line=StringUtil.replace(line,StringPool.APOSTROPHE,StringPool.QUOTE);
            readAttributes=false;
          }
 else           if (Validator.isNotNull(previousAttribute)) {
            if (!_isJSPAttributName(attribute)) {
              _processErrorMessage(fileName,"attribute: " + fileName + " "+ lineCount);
              readAttributes=false;
            }
 else             if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareTo(attribute) > 0)) {
              previousAttributeAndValue=previousLine;
              currentAttributeAndValue=line;
            }
          }
          if (!readAttributes) {
            previousAttribute=null;
            previousAttributeAndValue=null;
          }
 else {
            previousAttribute=attribute;
          }
        }
      }
 else {
        previousAttribute=null;
        readAttributes=false;
      }
    }
    if (!hasUnsortedExceptions) {
      int i=line.indexOf("<liferay-ui:error exception=\"<%=");
      if (i != -1) {
        currentException=line.substring(i + 33);
        if (Validator.isNotNull(previousException) && (previousException.compareTo(currentException) > 0)) {
          hasUnsortedExceptions=true;
        }
      }
      if (!hasUnsortedExceptions) {
        previousException=currentException;
        currentException=null;
      }
    }
    if (trimmedLine.startsWith(StringPool.LESS_THAN) && !trimmedLine.startsWith("<%") && !trimmedLine.startsWith("<!")) {
      if (!trimmedLine.contains(StringPool.GREATER_THAN) && !trimmedLine.contains(StringPool.SPACE)) {
        readAttributes=true;
      }
 else {
        line=_sortJSPAttributes(fileName,line,lineCount);
      }
    }
    if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
      while (trimmedLine.contains(StringPool.TAB)) {
        line=StringUtil.replaceLast(line,StringPool.TAB,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.TAB,StringPool.SPACE);
      }
      while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) {
        line=StringUtil.replaceLast(line,StringPool.DOUBLE_SPACE,StringPool.SPACE);
        trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.DOUBLE_SPACE,StringPool.SPACE);
      }
    }
    if (!fileName.endsWith("/touch.jsp")) {
      int x=line.indexOf("<%@ include file");
      if (x != -1) {
        x=line.indexOf(StringPool.QUOTE,x);
        int y=line.indexOf(StringPool.QUOTE,x + 1);
        if (y != -1) {
          String includeFileName=line.substring(x + 1,y);
          Matcher matcher=_jspIncludeFilePattern.matcher(includeFileName);
          if (!matcher.find()) {
            _processErrorMessage(fileName,"include: " + fileName + " "+ lineCount);
          }
        }
      }
    }
    line=_replacePrimitiveWrapperInstantiation(fileName,line,lineCount);
    previousLine=line;
    sb.append(line);
    sb.append("\n");
  }
  unsyncBufferedReader.close();
  content=sb.toString();
  if (content.endsWith("\n")) {
    content=content.substring(0,content.length() - 1);
  }
  content=_formatTaglibQuotes(fileName,content,StringPool.QUOTE);
  content=_formatTaglibQuotes(fileName,content,StringPool.APOSTROPHE);
  if (Validator.isNotNull(previousAttributeAndValue)) {
    content=StringUtil.replaceFirst(content,previousAttributeAndValue + "\n" + currentAttributeAndValue,currentAttributeAndValue + "\n" + previousAttributeAndValue);
  }
  if (hasUnsortedExceptions) {
    if ((StringUtil.count(content,currentException) > 1) || (StringUtil.count(content,previousException) > 1)) {
      _processErrorMessage(fileName,"unsorted exceptions: " + fileName);
    }
 else {
      content=StringUtil.replaceFirst(content,previousException,currentException);
      content=StringUtil.replaceLast(content,currentException,previousException);
    }
  }
  return content;
}
