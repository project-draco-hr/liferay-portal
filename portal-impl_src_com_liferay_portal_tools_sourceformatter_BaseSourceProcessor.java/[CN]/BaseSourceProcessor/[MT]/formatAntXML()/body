{
  String basedir="./";
  DirectoryScanner directoryScanner=new DirectoryScanner();
  directoryScanner.setBasedir(basedir);
  String[] excludes={"**\\tools\\**"};
  excludes=ArrayUtil.append(excludes,_excludes);
  directoryScanner.setExcludes(excludes);
  directoryScanner.setIncludes(new String[]{"**\\b*.xml"});
  List<String> fileNames=_sourceFormatterHelper.scanForFiles(directoryScanner);
  for (  String fileName : fileNames) {
    File file=new File(basedir + fileName);
    fileName=StringUtil.replace(fileName,StringPool.BACK_SLASH,StringPool.SLASH);
    String content=_fileUtil.read(file);
    String newContent=_trimContent(content,true);
    newContent=_fixAntXMLProjectName(basedir,fileName,newContent);
    Document document=_saxReaderUtil.read(newContent);
    Element rootElement=document.getRootElement();
    String previousName=StringPool.BLANK;
    List<Element> targetElements=rootElement.elements("target");
    for (    Element targetElement : targetElements) {
      String name=targetElement.attributeValue("name");
      if (name.equals("Test")) {
        name=name.toLowerCase();
      }
      if (name.compareTo(previousName) < -1) {
        _processErrorMessage(fileName,fileName + " has an unordered target " + name);
        break;
      }
      previousName=name;
    }
    if ((newContent != null) && !content.equals(newContent)) {
      _fileUtil.write(file,newContent);
      _sourceFormatterHelper.printError(fileName,file);
    }
  }
}
