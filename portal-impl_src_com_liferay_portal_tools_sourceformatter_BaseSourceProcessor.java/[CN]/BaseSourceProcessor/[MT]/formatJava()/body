{
  String copyright=_getCopyright();
  String oldCopyright=_getOldCopyright();
  boolean portalJavaFiles=true;
  Collection<String> fileNames=null;
  Properties staticLogVariableExclusions=null;
  Properties upgradeServiceUtilExclusions=null;
  if (_portalSource) {
    fileNames=_getPortalJavaFiles();
    _javaTermSortExclusions=_getPortalExclusionsProperties("source_formatter_javaterm_sort_exclusions.properties");
    _lineLengthExclusions=_getPortalExclusionsProperties("source_formatter_line_length_exclusions.properties");
    staticLogVariableExclusions=_getPortalExclusionsProperties("source_formatter_static_log_exclusions.properties");
    upgradeServiceUtilExclusions=_getPortalExclusionsProperties("source_formatter_upgrade_service_util_exclusions.properties");
  }
 else {
    portalJavaFiles=false;
    fileNames=_getPluginJavaFiles();
    _javaTermSortExclusions=_getPluginExclusionsProperties("source_formatter_javaterm_sort_exclusions.properties");
    _lineLengthExclusions=_getPluginExclusionsProperties("source_formatter_line_length_exclusions.properties");
    staticLogVariableExclusions=_getPluginExclusionsProperties("source_formatter_static_log_exclusions.properties");
  }
  for (  String fileName : fileNames) {
    File file=new File(fileName);
    fileName=StringUtil.replace(fileName,StringPool.BACK_SLASH,StringPool.SLASH);
    String content=_fileUtil.read(file);
    if (_isGenerated(content) && !fileName.endsWith("JavadocFormatter.java")) {
      continue;
    }
    String className=file.getName();
    className=className.substring(0,className.length() - 5);
    String packagePath=fileName;
    int packagePathX=packagePath.indexOf("/src/");
    int packagePathY=packagePath.lastIndexOf(StringPool.SLASH);
    if ((packagePathX + 5) >= packagePathY) {
      packagePath=StringPool.BLANK;
    }
 else {
      packagePath=packagePath.substring(packagePathX + 5,packagePathY);
    }
    packagePath=StringUtil.replace(packagePath,StringPool.SLASH,StringPool.PERIOD);
    if (packagePath.endsWith(".model")) {
      if (content.contains("extends " + className + "Model")) {
        continue;
      }
    }
    String newContent=content;
    if (newContent.contains("$\n */")) {
      _processErrorMessage(fileName,"*: " + fileName);
      newContent=StringUtil.replace(newContent,"$\n */","$\n *\n */");
    }
    newContent=_fixCopyright(newContent,copyright,oldCopyright,file,fileName);
    if (newContent.contains(className + ".java.html")) {
      _processErrorMessage(fileName,"Java2HTML: " + fileName);
    }
    if (newContent.contains(" * @author Raymond Aug") && !newContent.contains(" * @author Raymond Aug\u00e9")) {
      newContent=newContent.replaceFirst("Raymond Aug.++","Raymond Aug\u00e9");
      _processErrorMessage(fileName,"UTF-8: " + fileName);
    }
    newContent=_fixDataAccessConnection(className,newContent);
    newContent=_fixSessionKey(fileName,newContent,_sessionKeyPattern);
    newContent=StringUtil.replace(newContent,new String[]{"com.liferay.portal.PortalException","com.liferay.portal.SystemException","com.liferay.util.LocalizationUtil","private static final Log _log"},new String[]{"com.liferay.portal.kernel.exception.PortalException","com.liferay.portal.kernel.exception.SystemException","com.liferay.portal.kernel.util.LocalizationUtil","private static Log _log"});
    newContent=stripJavaImports(newContent,packagePath,className);
    newContent=StringUtil.replace(newContent,new String[]{";\n/**","\t/*\n\t *","catch(","else{","if(","for(","while(","List <","){\n","]{\n"},new String[]{";\n\n/**","\t/**\n\t *","catch (","else {","if (","for (","while (","List<",") {\n","] {\n"});
    Pattern pattern=Pattern.compile("\t(catch |else |finally |for |if |try |while ).*\\{\n\n" + "\t+\\w");
    for (; ; ) {
      Matcher matcher=pattern.matcher(newContent);
      if (!matcher.find()) {
        break;
      }
      String match=matcher.group();
      String replacement=StringUtil.replaceFirst(match,StringPool.NEW_LINE,StringPool.BLANK);
      newContent=StringUtil.replaceFirst(newContent,match,replacement);
    }
    pattern=Pattern.compile("Log _log = LogFactoryUtil.getLog\\(\n*\t*(.+)\\.class\\)");
    Matcher matcher=pattern.matcher(newContent);
    if (matcher.find()) {
      String logClassName=matcher.group(1);
      if (!logClassName.equals(className)) {
        newContent=StringUtil.replaceLast(newContent,logClassName + ".class)",className + ".class)");
      }
    }
    String excluded=null;
    if (staticLogVariableExclusions != null) {
      excluded=staticLogVariableExclusions.getProperty(fileName);
    }
    if (excluded == null) {
      newContent=StringUtil.replace(newContent,"private Log _log","private static Log _log");
    }
    if (newContent.contains("*/\npackage ")) {
      _processErrorMessage(fileName,"package: " + fileName);
    }
    if (!newContent.endsWith("\n\n}") && !newContent.endsWith("{\n}")) {
      _processErrorMessage(fileName,"}: " + fileName);
    }
    if (portalJavaFiles && !className.equals("BaseServiceImpl") && className.endsWith("ServiceImpl")&& newContent.contains("ServiceUtil.")) {
      _processErrorMessage(fileName,"ServiceUtil: " + fileName);
    }
    excluded=null;
    if (upgradeServiceUtilExclusions != null) {
      excluded=upgradeServiceUtilExclusions.getProperty(fileName);
    }
    if ((excluded == null) && portalJavaFiles && fileName.contains("/portal/upgrade/")&& !fileName.contains("/test/")&& newContent.contains("ServiceUtil.")) {
      _processErrorMessage(fileName,"ServiceUtil: " + fileName);
    }
    if (!className.equals("DeepNamedValueScanner") && !className.equals("ProxyUtil") && newContent.contains("import java.lang.reflect.Proxy;")) {
      _processErrorMessage(fileName,"Proxy: " + fileName);
    }
    if (newContent.contains("import edu.emory.mathcs.backport.java")) {
      _processErrorMessage(fileName,"edu.emory.mathcs.backport.java: " + fileName);
    }
    for (int pos1=-1; ; ) {
      pos1=newContent.indexOf(StringPool.TAB + "try {",pos1 + 1);
      if (pos1 == -1) {
        break;
      }
      int pos2=newContent.indexOf(StringPool.TAB + "try {",pos1 + 1);
      int pos3=newContent.indexOf("\"select count(",pos1);
      if ((pos2 != -1) && (pos3 != -1) && (pos2 < pos3)) {
        continue;
      }
      int pos4=newContent.indexOf("rs.getLong(1)",pos1);
      int pos5=newContent.indexOf(StringPool.TAB + "finally {",pos1);
      if ((pos3 == -1) || (pos4 == -1) || (pos5 == -1)) {
        break;
      }
      if ((pos3 < pos4) && (pos4 < pos5)) {
        _processErrorMessage(fileName,"Use getInt(1) for count: " + fileName);
      }
    }
    if (content.contains("implements ProcessCallable") && !content.contains("private static final long serialVersionUID")) {
      _processErrorMessage(fileName,"Assign ProcessCallable implementation a " + "serialVersionUID: " + fileName);
    }
    _checkLanguageKeys(fileName,newContent,_languageKeyPattern);
    if (_checkUnprocessedExceptions && !fileName.contains("/test/")) {
      _checkUnprocessedExceptions(newContent,file,packagePath,fileName);
    }
    String oldContent=newContent;
    for (; ; ) {
      newContent=_formatJava(fileName,oldContent);
      newContent=StringUtil.replace(newContent,"\n\n\n","\n\n");
      if (oldContent.equals(newContent)) {
        break;
      }
      oldContent=newContent;
    }
    if ((newContent != null) && !content.equals(newContent)) {
      _fileUtil.write(file,newContent);
      _sourceFormatterHelper.printError(fileName,file);
    }
  }
}
