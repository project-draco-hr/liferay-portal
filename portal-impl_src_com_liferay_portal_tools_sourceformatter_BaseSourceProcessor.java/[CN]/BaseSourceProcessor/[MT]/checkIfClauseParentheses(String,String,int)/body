{
  int quoteCount=StringUtil.count(ifClause,StringPool.QUOTE);
  if ((quoteCount % 2) == 1) {
    return;
  }
  ifClause=stripQuotes(ifClause,StringPool.QUOTE);
  ifClause=stripQuotes(ifClause,StringPool.APOSTROPHE);
  if (ifClause.contains(StringPool.DOUBLE_SLASH) || ifClause.contains("/*") || ifClause.contains("*/")) {
    return;
  }
  ifClause=stripRedundantParentheses(ifClause);
  int level=0;
  int max=StringUtil.count(ifClause,StringPool.OPEN_PARENTHESIS);
  int previousParenthesisPos=-1;
  int[] levels=new int[max];
  for (int i=0; i < ifClause.length(); i++) {
    char c=ifClause.charAt(i);
    if ((c == CharPool.OPEN_PARENTHESIS) || (c == CharPool.CLOSE_PARENTHESIS)) {
      if (previousParenthesisPos != -1) {
        String s=ifClause.substring(previousParenthesisPos + 1,i);
        if (hasMissingParentheses(s)) {
          processErrorMessage(fileName,"missing parentheses: " + fileName + " "+ lineCount);
        }
      }
      previousParenthesisPos=i;
      if (c == CharPool.OPEN_PARENTHESIS) {
        levels[level]=i;
        level+=1;
      }
 else {
        int posOpenParenthesis=levels[level - 1];
        if (level > 1) {
          char nextChar=ifClause.charAt(i + 1);
          char previousChar=ifClause.charAt(posOpenParenthesis - 1);
          if (!Character.isLetterOrDigit(nextChar) && (nextChar != CharPool.PERIOD) && !Character.isLetterOrDigit(previousChar)) {
            String s=ifClause.substring(posOpenParenthesis + 1,i);
            if (hasRedundantParentheses(s)) {
              processErrorMessage(fileName,"redundant parentheses: " + fileName + " "+ lineCount);
            }
          }
          if ((previousChar == CharPool.OPEN_PARENTHESIS) && (nextChar == CharPool.CLOSE_PARENTHESIS)) {
            processErrorMessage(fileName,"redundant parentheses: " + fileName + " "+ lineCount);
          }
        }
        level-=1;
      }
    }
  }
}
