{
  UploadPortletRequest uploadRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long itemId=ParamUtil.getLong(uploadRequest,"itemId");
  long groupId=themeDisplay.getScopeGroupId();
  long categoryId=ParamUtil.getLong(uploadRequest,"categoryId");
  String sku=ParamUtil.getString(uploadRequest,"sku");
  String name=ParamUtil.getString(uploadRequest,"name");
  String description=ParamUtil.getString(uploadRequest,"description");
  String properties=ParamUtil.getString(uploadRequest,"properties");
  int fieldsCount=ParamUtil.getInteger(uploadRequest,"fieldsCount",1);
  List<ShoppingItemField> itemFields=new ArrayList<ShoppingItemField>();
  for (int i=0; i < fieldsCount; i++) {
    String fieldName=ParamUtil.getString(uploadRequest,"fieldName" + i);
    String fieldValues=ParamUtil.getString(uploadRequest,"fieldValues" + i);
    String fieldDescription=ParamUtil.getString(uploadRequest,"fieldDescription" + i);
    ShoppingItemField itemField=ShoppingItemFieldUtil.create(0);
    itemField.setName(fieldName);
    itemField.setValues(fieldValues);
    itemField.setDescription(fieldDescription);
    itemFields.add(itemField);
  }
  String fieldsQuantities=ParamUtil.getString(uploadRequest,"fieldsQuantities");
  int pricesCount=ParamUtil.getInteger(uploadRequest,"pricesCount",1);
  List<ShoppingItemPrice> itemPrices=new ArrayList<ShoppingItemPrice>();
  for (int i=0; i < pricesCount; i++) {
    int minQuantity=ParamUtil.getInteger(uploadRequest,"minQuantity" + i);
    int maxQuantity=ParamUtil.getInteger(uploadRequest,"maxQuantity" + i);
    double price=ParamUtil.getDouble(uploadRequest,"price" + i);
    double discount=ParamUtil.getDouble(uploadRequest,"discount" + i) / 100;
    boolean taxable=ParamUtil.getBoolean(uploadRequest,"taxable" + i);
    double shipping=ParamUtil.getDouble(uploadRequest,"shipping" + i);
    boolean useShippingFormula=ParamUtil.getBoolean(uploadRequest,"useShippingFormula" + i);
    boolean active=ParamUtil.getBoolean(uploadRequest,"active" + i);
    int defaultPrice=ParamUtil.getInteger(uploadRequest,"defaultPrice");
    int status=ShoppingItemPriceConstants.STATUS_ACTIVE_DEFAULT;
    if ((defaultPrice != i) && active) {
      status=ShoppingItemPriceConstants.STATUS_ACTIVE;
    }
 else     if ((defaultPrice != i) && !active) {
      status=ShoppingItemPriceConstants.STATUS_INACTIVE;
    }
    ShoppingItemPrice itemPrice=ShoppingItemPriceUtil.create(0);
    itemPrice.setMinQuantity(minQuantity);
    itemPrice.setMaxQuantity(maxQuantity);
    itemPrice.setPrice(price);
    itemPrice.setDiscount(discount);
    itemPrice.setTaxable(taxable);
    itemPrice.setShipping(shipping);
    itemPrice.setUseShippingFormula(useShippingFormula);
    itemPrice.setStatus(status);
    itemPrices.add(itemPrice);
  }
  boolean requiresShipping=ParamUtil.getBoolean(uploadRequest,"requiresShipping");
  int stockQuantity=ParamUtil.getInteger(uploadRequest,"stockQuantity");
  boolean featured=ParamUtil.getBoolean(uploadRequest,"featured");
  Boolean sale=null;
  boolean smallImage=ParamUtil.getBoolean(uploadRequest,"smallImage");
  String smallImageURL=ParamUtil.getString(uploadRequest,"smallImageURL");
  File smallFile=uploadRequest.getFile("smallFile");
  boolean mediumImage=ParamUtil.getBoolean(uploadRequest,"mediumImage");
  String mediumImageURL=ParamUtil.getString(uploadRequest,"mediumImageURL");
  File mediumFile=uploadRequest.getFile("mediumFile");
  boolean largeImage=ParamUtil.getBoolean(uploadRequest,"largeImage");
  String largeImageURL=ParamUtil.getString(uploadRequest,"largeImageURL");
  File largeFile=uploadRequest.getFile("largeFile");
  ServiceContext serviceContext=ServiceContextFactory.getInstance(ShoppingItem.class.getName(),actionRequest);
  if (itemId <= 0) {
    ShoppingItemServiceUtil.addItem(groupId,categoryId,sku,name,description,properties,fieldsQuantities,requiresShipping,stockQuantity,featured,sale,smallImage,smallImageURL,smallFile,mediumImage,mediumImageURL,mediumFile,largeImage,largeImageURL,largeFile,itemFields,itemPrices,serviceContext);
  }
 else {
    ShoppingItemServiceUtil.updateItem(itemId,groupId,categoryId,sku,name,description,properties,fieldsQuantities,requiresShipping,stockQuantity,featured,sale,smallImage,smallImageURL,smallFile,mediumImage,mediumImageURL,mediumFile,largeImage,largeImageURL,largeFile,itemFields,itemPrices,serviceContext);
  }
}
