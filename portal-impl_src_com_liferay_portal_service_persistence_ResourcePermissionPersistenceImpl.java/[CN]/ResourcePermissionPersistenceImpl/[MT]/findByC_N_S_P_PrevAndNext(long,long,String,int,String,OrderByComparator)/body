{
  ResourcePermission resourcePermission=findByPrimaryKey(resourcePermissionId);
  int count=countByC_N_S_P(companyId,name,scope,primKey);
  Session session=null;
  try {
    session=openSession();
    StringBundler query=null;
    if (obc != null) {
      query=new StringBundler(6 + (obc.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(5);
    }
    query.append(_SQL_SELECT_RESOURCEPERMISSION_WHERE);
    query.append(_FINDER_COLUMN_C_N_S_P_COMPANYID_2);
    if (name == null) {
      query.append(_FINDER_COLUMN_C_N_S_P_NAME_1);
    }
 else {
      if (name.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_C_N_S_P_NAME_3);
      }
 else {
        query.append(_FINDER_COLUMN_C_N_S_P_NAME_2);
      }
    }
    query.append(_FINDER_COLUMN_C_N_S_P_SCOPE_2);
    if (primKey == null) {
      query.append(_FINDER_COLUMN_C_N_S_P_PRIMKEY_1);
    }
 else {
      if (primKey.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_C_N_S_P_PRIMKEY_3);
      }
 else {
        query.append(_FINDER_COLUMN_C_N_S_P_PRIMKEY_2);
      }
    }
    if (obc != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,obc);
    }
    String sql=query.toString();
    Query q=session.createQuery(sql);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    if (name != null) {
      qPos.add(name);
    }
    qPos.add(scope);
    if (primKey != null) {
      qPos.add(primKey);
    }
    Object[] objArray=QueryUtil.getPrevAndNext(q,count,obc,resourcePermission);
    ResourcePermission[] array=new ResourcePermissionImpl[3];
    array[0]=(ResourcePermission)objArray[0];
    array[1]=(ResourcePermission)objArray[1];
    array[2]=(ResourcePermission)objArray[2];
    return array;
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
