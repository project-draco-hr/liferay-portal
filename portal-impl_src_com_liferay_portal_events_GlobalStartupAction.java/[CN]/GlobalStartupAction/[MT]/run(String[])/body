{
  try {
    if (PrefsPropsUtil.getBoolean(PropsKeys.AUTO_DEPLOY_ENABLED,PropsValues.AUTO_DEPLOY_ENABLED)) {
      if (_log.isInfoEnabled()) {
        _log.info("Registering auto deploy directories");
      }
      File deployDir=new File(PrefsPropsUtil.getString(PropsKeys.AUTO_DEPLOY_DEPLOY_DIR,PropsValues.AUTO_DEPLOY_DEPLOY_DIR));
      File destDir=new File(DeployUtil.getAutoDeployDestDir());
      long interval=PrefsPropsUtil.getLong(PropsKeys.AUTO_DEPLOY_INTERVAL,PropsValues.AUTO_DEPLOY_INTERVAL);
      List<AutoDeployListener> autoDeployListeners=getAutoDeployListeners(false);
      AutoDeployDir autoDeployDir=new AutoDeployDir(AutoDeployDir.DEFAULT_NAME,deployDir,destDir,interval,autoDeployListeners);
      AutoDeployUtil.registerDir(autoDeployDir);
    }
 else {
      if (_log.isInfoEnabled()) {
        _log.info("Not registering auto deploy directories");
      }
    }
  }
 catch (  Exception e) {
    _log.error(e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Registering hot deploy listeners");
  }
  for (  HotDeployListener hotDeployListener : getHotDeployListeners()) {
    HotDeployUtil.registerListener(hotDeployListener);
  }
  try {
    if (PrefsPropsUtil.getBoolean(PropsKeys.SANDBOX_DEPLOY_ENABLED,PropsValues.SANDBOX_DEPLOY_ENABLED)) {
      if (_log.isInfoEnabled()) {
        _log.info("Registering sandbox deploy directories");
      }
      File deployDir=new File(PrefsPropsUtil.getString(PropsKeys.SANDBOX_DEPLOY_DIR,PropsValues.SANDBOX_DEPLOY_DIR));
      long interval=PrefsPropsUtil.getLong(PropsKeys.SANDBOX_DEPLOY_INTERVAL,PropsValues.SANDBOX_DEPLOY_INTERVAL);
      List<SandboxDeployListener> sandboxDeployListeners=getSandboxDeployListeners();
      SandboxDeployDir sandboxDeployDir=new SandboxDeployDir(SandboxDeployDir.DEFAULT_NAME,deployDir,interval,sandboxDeployListeners);
      SandboxDeployUtil.registerDir(sandboxDeployDir);
    }
 else {
      if (_log.isInfoEnabled()) {
        _log.info("Not registering sandbox deploy directories");
      }
    }
  }
 catch (  Exception e) {
    _log.error(e);
  }
  AuthPublicPathRegistry.register(PropsValues.AUTH_PUBLIC_PATHS);
  try {
    String tmpDir=SystemProperties.get(SystemProperties.TMP_DIR);
    Environment.setValue(Environment.PROP_BASE_FILE_DIR,tmpDir);
  }
 catch (  Throwable t) {
    _log.error(t);
  }
  ClassLoader contextClassLoader=ClassLoaderUtil.getContextClassLoader();
  JavadocManagerUtil.load(StringPool.BLANK,contextClassLoader);
  try {
    JCRFactoryUtil.prepare();
    if (GetterUtil.getBoolean(PropsUtil.get(PropsKeys.JCR_INITIALIZE_ON_STARTUP))) {
      JCRFactoryUtil.initialize();
    }
  }
 catch (  Exception e) {
    _log.error(e);
  }
  try {
    InfrastructureUtil.getDataSource();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  try {
    if (!ServerDetector.isJOnAS()) {
      InfrastructureUtil.getMailSession();
    }
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e.getMessage());
    }
  }
  if (PropsValues.POP_SERVER_NOTIFICATIONS_ENABLED) {
    POPServerUtil.start();
  }
  if (Validator.isNotNull(PropsValues.BROWSER_LAUNCHER_URL)) {
    Thread browserLauncherThread=new Thread(new BrowserLauncher());
    browserLauncherThread.start();
  }
}
