{
  int retryCount=0;
  while (true) {
    String baseInvocationURL=project.getProperty("base.invocation.url");
    String hostNamePrefix=getHostNamePrefix(baseInvocationURL);
    if (hostNamePrefix.equals(baseInvocationURL)) {
      return baseInvocationURL;
    }
    int hostNameCount=getHostNameCount(project,hostNamePrefix);
    if (hostNameCount == 1) {
      return "http://" + hostNamePrefix + "-1";
    }
    File baseDir=new File(project.getProperty("jenkins.shared.dir") + "/" + hostNamePrefix);
    File semaphoreFile=new File(baseDir,hostNamePrefix + ".semaphore");
    waitForTurn(semaphoreFile,hostNameCount);
    JenkinsResultsParserUtil.write(semaphoreFile,_MY_HOST_NAME);
    Map<String,Integer> recentJobMap=getRecentJobCountMap(new File(baseDir,"recentJob"));
    List<String> hostNames=new ArrayList<>(hostNameCount);
    int maxAvailableSlaveCount=Integer.MIN_VALUE;
    int x=-1;
    try {
      List<FutureTask<Integer>> futureTasks=new ArrayList<>(hostNameCount);
      startParallelTasks(recentJobMap,hostNames,hostNamePrefix,hostNameCount,project,futureTasks);
      List<Integer> badIndices=new ArrayList<>(futureTasks.size());
      List<Integer> maxIndices=new ArrayList<>(futureTasks.size());
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < futureTasks.size(); i++) {
        FutureTask<Integer> futureTask=futureTasks.get(i);
        Integer availableSlaveCount=futureTask.get();
        if (availableSlaveCount == null) {
          badIndices.add(i);
          continue;
        }
        sb.append(hostNames.get(i));
        sb.append(" : ");
        sb.append(availableSlaveCount);
        sb.append("\n");
        if (availableSlaveCount > maxAvailableSlaveCount) {
          maxAvailableSlaveCount=availableSlaveCount;
          maxIndices.clear();
        }
        if (availableSlaveCount >= maxAvailableSlaveCount) {
          maxIndices.add(i);
        }
      }
      if (maxAvailableSlaveCount == Integer.MIN_VALUE) {
        if (retryCount == 3) {
          throw new RuntimeException("Retry limit exceeded. Unable to communicate " + " with masters.");
        }
        retryCount++;
        continue;
      }
      if (maxIndices.size() > 0) {
        x=maxIndices.get(getRandomValue(0,maxIndices.size() - 1));
      }
 else {
        while (true) {
          x=getRandomValue(0,hostNameCount - 1);
          if (badIndices.contains(x)) {
            continue;
          }
          break;
        }
      }
      sb.append("\nMost available master ");
      sb.append(hostNames.get(x));
      sb.append(" has ");
      sb.append(maxAvailableSlaveCount);
      sb.append(" available slaves.");
      System.out.println(sb);
      return "http://" + hostNames.get(x);
    }
  finally {
      JenkinsResultsParserUtil.write(semaphoreFile,"");
      if (recentJobPeriod > 0) {
        StringBuilder sb=new StringBuilder();
        File recentJobFile=new File(baseDir,"recentJob/" + hostNames.get(x));
        if (recentJobFile.exists()) {
          sb.append(JenkinsResultsParserUtil.read(recentJobFile));
          if (sb.length() > 0) {
            sb.append("|");
          }
        }
        String invokedJobBatchSize=project.getProperty("invoked.job.batch.size");
        if ((invokedJobBatchSize == null) || (invokedJobBatchSize.length() == 0)) {
          invokedJobBatchSize="1";
        }
        sb.append(invokedJobBatchSize);
        sb.append("-");
        sb.append(System.currentTimeMillis());
        JenkinsResultsParserUtil.write(recentJobFile,sb.toString());
      }
    }
  }
}
