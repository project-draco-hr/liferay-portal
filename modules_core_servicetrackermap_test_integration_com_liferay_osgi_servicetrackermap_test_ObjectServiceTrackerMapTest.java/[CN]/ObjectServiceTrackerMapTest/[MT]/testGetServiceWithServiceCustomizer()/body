{
  ServiceTrackerMap<String,TrackedTwo> serviceTrackerMap=ServiceTrackerMapFactory.singleValueMap(_bundleContext,TrackedOne.class,"target",new ServiceTrackerCustomizer<TrackedOne,TrackedTwo>(){
    @Override public TrackedTwo addingService(    ServiceReference<TrackedOne> serviceReference){
      return new TrackedTwo(_bundleContext.getService(serviceReference));
    }
    @Override public void modifiedService(    ServiceReference<TrackedOne> serviceReference,    TrackedTwo service){
      removedService(serviceReference,service);
    }
    @Override public void removedService(    ServiceReference<TrackedOne> serviceReference,    TrackedTwo service){
      _bundleContext.ungetService(serviceReference);
    }
  }
);
  serviceTrackerMap.open();
  TrackedOne one=new TrackedOne();
  registerService(one,"one");
  TrackedOne two=new TrackedOne();
  registerService(two,"two");
  TrackedTwo twoOne=serviceTrackerMap.getService("one");
  Assert.assertEquals(one,twoOne.getTrackedOne());
  TrackedTwo twoTwo=serviceTrackerMap.getService("two");
  Assert.assertEquals(two,twoTwo.getTrackedOne());
  serviceTrackerMap.close();
}
