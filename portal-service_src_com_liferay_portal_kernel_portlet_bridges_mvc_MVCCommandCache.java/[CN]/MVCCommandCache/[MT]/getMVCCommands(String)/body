{
  List<MVCCommand> mvcCommands=_mvcCommands.get(key);
  String[] mvcCommandNames=StringUtil.split(key);
  if ((mvcCommands != null) && (mvcCommands.size() == mvcCommandNames.length)) {
    return mvcCommands;
  }
  mvcCommands=new ArrayList<>();
  for (  String mvcCommandName : mvcCommandNames) {
    MVCCommand mvcCommand=getMVCCommand(mvcCommandName);
    if (mvcCommand != _emptyMVCCommand) {
      mvcCommands.add(mvcCommand);
    }
 else {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to find MVCCommand " + key);
      }
    }
  }
  _mvcCommands.put(key,mvcCommands);
  for (  MVCCommand mvcCommand : mvcCommands) {
    String mvcCommandClassName=ClassUtil.getClassName(mvcCommand);
    List<String> keys=_mvcCommandCompositeIds.get(mvcCommandClassName);
    if (keys == null) {
      keys=new ArrayList<>();
      _mvcCommandCompositeIds.put(mvcCommandClassName,keys);
    }
    keys.add(key);
  }
  return mvcCommands;
}
