{
  int actionDate=getEquityDate();
  double k=calculateK(equitySetting.getValue(),equitySetting.getValidity());
  double b=calculateB(actionDate,equitySetting.getValue(),equitySetting.getValidity());
  if (equitySetting.getType() == SocialEquitySettingConstants.TYPE_INFORMATION) {
    int count=socialEquityAssetEntryPersistence.countByAssetEntryId(assetEntry.getEntryId());
    if (count == 0) {
      addSocialEquityAssetEntry(assetEntry);
    }
    getSocialEquityLogLocalService().incrementSocialEquityAssetEntry_IQ(assetEntry.getEntryId(),k,b);
    if ((assetEntryUser != null) && !assetEntryUser.isDefaultUser()) {
      getSocialEquityLogLocalService().incrementSocialEquityUser_CQ(assetEntry.getGroupId() + StringPool.POUND + assetEntryUser.getUserId(),k,b);
      getSocialEquityLogLocalService().incrementUser_CQ(assetEntryUser.getUserId(),k,b);
    }
  }
 else   if (equitySetting.getType() == SocialEquitySettingConstants.TYPE_PARTICIPATION) {
    if (!user.isDefaultUser()) {
      getSocialEquityLogLocalService().incrementSocialEquityUser_PQ(assetEntry.getGroupId() + StringPool.POUND + user.getUserId(),k,b);
      getSocialEquityLogLocalService().incrementUser_PQ(user.getUserId(),k,b);
    }
  }
  long equityLogId=counterLocalService.increment();
  SocialEquityLog equityLog=socialEquityLogPersistence.create(equityLogId);
  equityLog.setGroupId(assetEntry.getGroupId());
  equityLog.setCompanyId(user.getCompanyId());
  equityLog.setUserId(user.getUserId());
  equityLog.setAssetEntryId(assetEntry.getEntryId());
  equityLog.setActionId(equitySetting.getActionId());
  equityLog.setActionDate(actionDate);
  equityLog.setType(equitySetting.getType());
  equityLog.setValue(equitySetting.getValue());
  equityLog.setValidity(actionDate + equitySetting.getValidity());
  equityLog.setActive(true);
  socialEquityLogPersistence.update(equityLog,false);
}
