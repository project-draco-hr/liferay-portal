{
  int actionDate=getEquityDate();
  double k=getK(equitySetting.getValue(),equitySetting.getValidity());
  double b=getB(actionDate,equitySetting.getValue(),equitySetting.getValidity());
  if (equitySetting.getType() == SocialEquitySettingConstants.TYPE_INFORMATION) {
    int count=socialEquityAssetEntryPersistence.countByAssetEntryId(assetEntry.getEntryId());
    if (count == 0) {
      addSocialEquityAssetEntry(assetEntry);
    }
    updateSocialEquityAssetEntry_IQ(assetEntry.getEntryId(),actionDate,k,b);
    double informationEquity=calculateEquity(k,actionDate,b);
    updateAssetEntry(assetEntry,informationEquity);
    if ((assetEntryUser != null) && !assetEntryUser.isDefaultUser()) {
      updateSocialEquityUser_CQ(assetEntry.getGroupId(),assetEntryUser.getUserId(),informationEquity);
      updateUser_CQ(assetEntryUser,informationEquity);
    }
  }
 else   if (equitySetting.getType() == SocialEquitySettingConstants.TYPE_PARTICIPATION) {
    int count=socialEquityUserPersistence.countByG_U(assetEntry.getGroupId(),user.getUserId());
    if (count == 0) {
      addSocialEquityUser(assetEntry.getGroupId(),user);
    }
    if (!user.isDefaultUser()) {
      updateSocialEquityUser_PQ(assetEntry.getGroupId(),user.getUserId(),actionDate,k,b);
      double participationEquity=calculateEquity(k,actionDate,b);
      updateUser_PQ(user,participationEquity);
    }
  }
  long equityLogId=counterLocalService.increment();
  SocialEquityLog equityLog=socialEquityLogPersistence.create(equityLogId);
  equityLog.setGroupId(assetEntry.getGroupId());
  equityLog.setCompanyId(user.getCompanyId());
  equityLog.setUserId(user.getUserId());
  equityLog.setAssetEntryId(assetEntry.getEntryId());
  equityLog.setActionId(equitySetting.getActionId());
  equityLog.setActionDate(actionDate);
  equityLog.setType(equitySetting.getType());
  equityLog.setValue(equitySetting.getValue());
  equityLog.setValidity(actionDate + equitySetting.getValidity());
  equityLog.setActive(true);
  socialEquityLogPersistence.update(equityLog,false);
}
