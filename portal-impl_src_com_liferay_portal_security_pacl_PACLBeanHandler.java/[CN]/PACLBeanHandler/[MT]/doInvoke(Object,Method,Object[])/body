{
  if (method.getDeclaringClass() == Object.class) {
    String methodName=method.getName();
    if (methodName.equals("equals")) {
      if (proxy == arguments[0]) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  if (!PACLPolicyManager.isActive()) {
    return method.invoke(_bean,arguments);
  }
  boolean debug=false;
  if (_log.isDebugEnabled()) {
    Class<?> clazz=_bean.getClass();
    String className=clazz.getName();
    if (className.equals(GroupPersistenceImpl.class.getName()) || className.equals(UserPersistenceImpl.class.getName())) {
      debug=true;
      _log.debug("Intercepting " + className + "#"+ method.getName());
    }
  }
  PACLPolicy paclPolicy=PACLClassUtil.getPACLPolicyByReflection(debug);
  if (debug) {
    if (paclPolicy != null) {
      _log.debug("Retrieved PACL policy for " + paclPolicy.getServletContextName());
    }
  }
  if (paclPolicy != null) {
    if (!paclPolicy.hasAccess(_bean,method)) {
      throw new SecurityException("Attempted to invoke " + method);
    }
  }
  return method.invoke(_bean,arguments);
}
