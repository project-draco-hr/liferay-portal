{
  boolean debug=false;
  if (_log.isDebugEnabled()) {
    Class<?> clazz=_bean.getClass();
    String className=clazz.getName();
    if (className.equals(GroupPersistenceImpl.class.getName()) || className.equals(UserPersistenceImpl.class.getName())) {
      debug=true;
      _log.debug("Intercepting " + className + "#"+ method.getName());
    }
  }
  if (method.getDeclaringClass() == Object.class) {
    String methodName=method.getName();
    if (methodName.equals("equals")) {
      if (proxy == arguments[0]) {
        return true;
      }
 else {
        return false;
      }
    }
 else     if (methodName.equals("toString")) {
      return method.invoke(_bean,arguments);
    }
  }
  if (!PACLPolicyManager.isActive()) {
    return method.invoke(_bean,arguments);
  }
  PACLPolicy paclPolicy=PACLClassUtil.getPACLPolicy(false,debug);
  if (debug) {
    if (paclPolicy != null) {
      _log.debug("Retrieved PACL policy for " + paclPolicy.getServletContextName());
    }
  }
  if (paclPolicy == null) {
    return method.invoke(_bean,arguments);
  }
  if (!paclPolicy.hasPortalService(_bean,method,arguments)) {
    throw new SecurityException("Attempted to invoke " + method);
  }
  boolean checkSQL=PortalSecurityManagerThreadLocal.isCheckSQL();
  try {
    Class<?> beanClass=_bean.getClass();
    if (paclPolicy.getClassLoader() != PACLClassLoaderUtil.getClassLoader(beanClass)) {
      PortalSecurityManagerThreadLocal.setCheckSQL(false);
    }
    return method.invoke(_bean,arguments);
  }
  finally {
    PortalSecurityManagerThreadLocal.setCheckSQL(checkSQL);
  }
}
