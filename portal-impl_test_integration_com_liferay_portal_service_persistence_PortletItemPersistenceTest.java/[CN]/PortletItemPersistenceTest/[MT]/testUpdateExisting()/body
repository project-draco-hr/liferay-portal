{
  long pk=RandomTestUtil.nextLong();
  PortletItem newPortletItem=_persistence.create(pk);
  newPortletItem.setMvccVersion(RandomTestUtil.nextLong());
  newPortletItem.setGroupId(RandomTestUtil.nextLong());
  newPortletItem.setCompanyId(RandomTestUtil.nextLong());
  newPortletItem.setUserId(RandomTestUtil.nextLong());
  newPortletItem.setUserName(RandomTestUtil.randomString());
  newPortletItem.setCreateDate(RandomTestUtil.nextDate());
  newPortletItem.setModifiedDate(RandomTestUtil.nextDate());
  newPortletItem.setName(RandomTestUtil.randomString());
  newPortletItem.setPortletId(RandomTestUtil.randomString());
  newPortletItem.setClassNameId(RandomTestUtil.nextLong());
  _portletItems.add(_persistence.update(newPortletItem));
  PortletItem existingPortletItem=_persistence.findByPrimaryKey(newPortletItem.getPrimaryKey());
  Assert.assertEquals(existingPortletItem.getMvccVersion(),newPortletItem.getMvccVersion());
  Assert.assertEquals(existingPortletItem.getPortletItemId(),newPortletItem.getPortletItemId());
  Assert.assertEquals(existingPortletItem.getGroupId(),newPortletItem.getGroupId());
  Assert.assertEquals(existingPortletItem.getCompanyId(),newPortletItem.getCompanyId());
  Assert.assertEquals(existingPortletItem.getUserId(),newPortletItem.getUserId());
  Assert.assertEquals(existingPortletItem.getUserName(),newPortletItem.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingPortletItem.getCreateDate()),Time.getShortTimestamp(newPortletItem.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingPortletItem.getModifiedDate()),Time.getShortTimestamp(newPortletItem.getModifiedDate()));
  Assert.assertEquals(existingPortletItem.getName(),newPortletItem.getName());
  Assert.assertEquals(existingPortletItem.getPortletId(),newPortletItem.getPortletId());
  Assert.assertEquals(existingPortletItem.getClassNameId(),newPortletItem.getClassNameId());
}
