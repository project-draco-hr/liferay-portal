{
  try {
    List list=_sessionImpl.list(_queryString,_parameterMap,_firstResult,_maxResults,_flushMode,_sqlQuery,_entityClass);
    if (_entityClass == null && !list.isEmpty()) {
      if (!_scalars.isEmpty()) {
        int nScalars=_scalars.size();
        if (nScalars > 1) {
          Collections.sort(_scalars);
        }
        if (list.get(0) instanceof Collection) {
          List<Object> newList=new ArrayList<Object>();
          for (          Collection collection : (List<Collection>)list) {
            Object[] listedValues=collection.toArray();
            if (nScalars > 1) {
              Object[] values=new Object[nScalars];
              for (int i=0; i < nScalars; i++) {
                values[i]=listedValues[_scalars.get(i)];
              }
              newList.add(values);
            }
 else {
              newList.add(listedValues[_scalars.get(0)]);
            }
          }
          list=newList;
        }
 else         if (list.get(0) instanceof Object[]) {
          List<Object> newList=new ArrayList<Object>();
          for (          Object[] listedValues : (List<Object[]>)list) {
            if (nScalars > 1) {
              Object[] values=new Object[nScalars];
              for (int i=0; i < nScalars; i++) {
                values[i]=listedValues[_scalars.get(i)];
              }
              newList.add(values);
            }
 else {
              newList.add(listedValues[_scalars.get(0)]);
            }
          }
          list=newList;
        }
      }
 else       if (list.get(0) instanceof Collection) {
        List<Object> newList=new ArrayList<Object>();
        for (        Collection collection : (List<Collection>)list) {
          if (collection.size() == 1) {
            newList.add(collection.iterator().next());
          }
 else {
            newList.add(collection.toArray());
          }
        }
        list=newList;
      }
    }
    if (unmodifiable) {
      return new UnmodifiableList(list);
    }
 else {
      return ListUtil.copy(list);
    }
  }
 catch (  Exception e) {
    throw ExceptionTranslator.translate(e);
  }
}
