{
  Map<Long,Long> messagePKs=new HashMap<Long,Long>();
  Map<Long,Long> threadPKs=new HashMap<Long,Long>();
  List<MBMessage> messages=_commentsMap.get(getPrimaryKeyString(clazz,classPK));
  if (messages == null) {
    return;
  }
  MBMessage firstMessage=messages.get(0);
  if ((messages.size() == 1) && firstMessage.isRoot()) {
    return;
  }
  long classNameId=PortalUtil.getClassNameId(clazz);
  MBDiscussion discussion=MBDiscussionUtil.fetchByC_C(classNameId,newClassPK);
  for (  MBMessage message : messages) {
    long userId=getUserId(message.getUserUuid());
    long parentMessageId=MapUtil.getLong(messagePKs,message.getParentMessageId(),message.getParentMessageId());
    long threadId=MapUtil.getLong(threadPKs,message.getThreadId(),message.getThreadId());
    if (message.isRoot() && (discussion != null)) {
      MBThread thread=MBThreadLocalServiceUtil.getThread(discussion.getThreadId());
      long rootMessageId=thread.getRootMessageId();
      messagePKs.put(message.getMessageId(),rootMessageId);
      threadPKs.put(message.getThreadId(),thread.getThreadId());
    }
 else {
      ServiceContext serviceContext=new ServiceContext();
      serviceContext.setCreateDate(message.getCreateDate());
      serviceContext.setModifiedDate(message.getModifiedDate());
      serviceContext.setScopeGroupId(groupId);
      MBMessage importedMessage=null;
      if (_dataStrategy.equals(PortletDataHandlerKeys.DATA_STRATEGY_MIRROR) || _dataStrategy.equals(PortletDataHandlerKeys.DATA_STRATEGY_MIRROR_OVERWRITE)) {
        MBMessage existingMessage=MBMessageUtil.fetchByUUID_G(message.getUuid(),groupId);
        if (existingMessage == null) {
          serviceContext.setUuid(message.getUuid());
          importedMessage=MBMessageLocalServiceUtil.addDiscussionMessage(userId,message.getUserName(),groupId,clazz.getName(),newClassPK,threadId,parentMessageId,message.getSubject(),message.getBody(),serviceContext);
        }
 else {
          serviceContext.setWorkflowAction(WorkflowConstants.ACTION_PUBLISH);
          importedMessage=MBMessageLocalServiceUtil.updateDiscussionMessage(userId,existingMessage.getMessageId(),clazz.getName(),newClassPK,message.getSubject(),message.getBody(),serviceContext);
        }
      }
 else {
        importedMessage=MBMessageLocalServiceUtil.addDiscussionMessage(userId,message.getUserName(),groupId,clazz.getName(),newClassPK,threadId,parentMessageId,message.getSubject(),message.getBody(),serviceContext);
      }
      messagePKs.put(message.getMessageId(),importedMessage.getMessageId());
      threadPKs.put(message.getThreadId(),importedMessage.getThreadId());
    }
    importRatingsEntries(MBDiscussion.class,message.getPrimaryKey(),messagePKs.get(message.getPrimaryKey()));
  }
}
