{
  if (((PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM != 5) && (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM != 6)) || (!MapUtil.getBoolean(_parameterMap,PortletDataHandlerKeys.PERMISSIONS))) {
    return;
  }
  List<KeyValuePair> permissions=new ArrayList<KeyValuePair>();
  Group group=GroupLocalServiceUtil.getGroup(_groupId);
  List<Role> roles=RoleLocalServiceUtil.getRoles(_companyId);
  Map<Long,String> roleIdsToNames=new HashMap<Long,String>();
  for (  Role role : roles) {
    int type=role.getType();
    if ((type == RoleConstants.TYPE_REGULAR) || ((type == RoleConstants.TYPE_ORGANIZATION) && group.isOrganization()) || ((type == RoleConstants.TYPE_SITE) && (group.isLayoutSetPrototype() || group.isSite()))) {
      String name=role.getName();
      roleIdsToNames.put(role.getRoleId(),name);
    }
 else     if ((type == RoleConstants.TYPE_PROVIDER) && role.isTeam()) {
      Team team=TeamLocalServiceUtil.getTeam(role.getClassPK());
      if (team.getGroupId() == _groupId) {
        String name=PermissionExporter.ROLE_TEAM_PREFIX + team.getName();
        roleIdsToNames.put(role.getRoleId(),name);
      }
    }
  }
  List<String> actionIds=ResourceActionsUtil.getModelResourceActions(resourceName);
  if (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 5) {
    for (    Map.Entry<Long,String> entry : roleIdsToNames.entrySet()) {
      long roleId=entry.getKey();
      String name=entry.getValue();
      String availableActionIds=getActionIds_5(_companyId,roleId,resourceName,String.valueOf(resourcePK),actionIds);
      KeyValuePair permission=new KeyValuePair(name,availableActionIds);
      permissions.add(permission);
    }
  }
 else   if (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 6) {
    Set<Long> roleIdsSet=roleIdsToNames.keySet();
    long[] roleIds=ArrayUtil.toArray(roleIdsSet.toArray(new Long[roleIdsSet.size()]));
    Map<Long,Set<String>> roleIdsToActionIds=getActionIds_6(_companyId,roleIds,resourceName,String.valueOf(resourcePK),actionIds);
    for (    Map.Entry<Long,String> entry : roleIdsToNames.entrySet()) {
      long roleId=entry.getKey();
      String name=entry.getValue();
      Set<String> availableActionIds=roleIdsToActionIds.get(roleId);
      if ((availableActionIds == null) || availableActionIds.isEmpty()) {
        continue;
      }
      KeyValuePair permission=new KeyValuePair(name,StringUtil.merge(availableActionIds));
      permissions.add(permission);
    }
  }
  _permissionsMap.put(getPrimaryKeyString(resourceName,resourcePK),permissions);
}
