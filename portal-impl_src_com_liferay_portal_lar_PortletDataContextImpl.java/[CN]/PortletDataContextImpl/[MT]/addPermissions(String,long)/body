{
  if (((PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM != 5) && (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM != 6)) || (!MapUtil.getBoolean(_parameterMap,PortletDataHandlerKeys.PERMISSIONS))) {
    return;
  }
  List<KeyValuePair> permissions=new ArrayList<KeyValuePair>();
  Group group=GroupLocalServiceUtil.getGroup(_groupId);
  List<Role> roles=RoleLocalServiceUtil.getRoles(_companyId);
  for (  Role role : roles) {
    int type=role.getType();
    if ((type == RoleConstants.TYPE_REGULAR) || ((type == RoleConstants.TYPE_ORGANIZATION) && (group.isOrganization())) || ((type == RoleConstants.TYPE_SITE) && (group.isCommunity()))) {
      String name=role.getName();
      String actionIds=getActionIds(role,resourceName,String.valueOf(resourcePK));
      KeyValuePair permission=new KeyValuePair(name,actionIds);
      permissions.add(permission);
    }
 else     if ((type == RoleConstants.TYPE_PROVIDER) && role.isTeam()) {
      Team team=TeamLocalServiceUtil.getTeam(role.getClassPK());
      if (team.getGroupId() == _groupId) {
        String name=PermissionExporter.ROLE_TEAM_PREFIX + team.getName();
        String actionIds=getActionIds(role,resourceName,String.valueOf(resourcePK));
        KeyValuePair permission=new KeyValuePair(name,actionIds);
        permissions.add(permission);
      }
    }
  }
  _permissionsMap.put(getPrimaryKeyString(resourceName,resourcePK),permissions);
}
