{
  if (!MapUtil.getBoolean(_parameterMap,PortletDataHandlerKeys.PERMISSIONS)) {
    return;
  }
  List<KeyValuePair> permissions=new ArrayList<KeyValuePair>();
  long groupId=_groupId;
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  if (group.isStagingGroup() && !group.isStagedRemotely()) {
    groupId=group.getLiveGroupId();
  }
  List<Role> roles=RoleLocalServiceUtil.getGroupRelatedRoles(groupId);
  PrimitiveLongList roleIds=new PrimitiveLongList(roles.size());
  Map<Long,String> roleIdsToNames=new HashMap<Long,String>();
  for (  Role role : roles) {
    String roleName=role.getName();
    int roleType=role.getType();
    if ((roleType == RoleConstants.TYPE_PROVIDER) && role.isTeam()) {
      Team team=TeamLocalServiceUtil.getTeam(role.getClassPK());
      roleName=PermissionExporter.ROLE_TEAM_PREFIX + team.getName();
    }
    roleIds.add(role.getRoleId());
    roleIdsToNames.put(role.getRoleId(),roleName);
  }
  List<String> actionIds=ResourceActionsUtil.getModelResourceActions(resourceName);
  Map<Long,Set<String>> roleIdsToActionIds=getActionIds(_companyId,roleIds.getArray(),resourceName,resourcePK,actionIds);
  for (  Map.Entry<Long,String> entry : roleIdsToNames.entrySet()) {
    long roleId=entry.getKey();
    String name=entry.getValue();
    Set<String> availableActionIds=roleIdsToActionIds.get(roleId);
    if (availableActionIds == null) {
      availableActionIds=Collections.emptySet();
    }
    KeyValuePair permission=new KeyValuePair(name,StringUtil.merge(availableActionIds));
    permissions.add(permission);
  }
  _permissionsMap.put(getPrimaryKeyString(resourceName,resourcePK),permissions);
}
