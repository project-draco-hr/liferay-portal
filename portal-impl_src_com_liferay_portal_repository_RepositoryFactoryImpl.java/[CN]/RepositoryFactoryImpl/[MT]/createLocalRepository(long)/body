{
  long classNameId=getRepositoryClassNameId(repositoryId);
  RepositoryClassDefinition repositoryClassDefinition=getRepositoryClassDefinition(classNameId);
  RepositoryFactory repositoryFactory=repositoryClassDefinition.getRepositoryFactory();
  LocalRepository localRepository=repositoryFactory.createLocalRepository(repositoryId);
  RepositoryInstanceDefinition repositoryInstanceDefinition=repositoryClassDefinition.createRepositoryInstanceDefinition(localRepository);
  Map<Class<? extends Capability>,Capability> externalSupportedCapabilities=repositoryInstanceDefinition.getSupportedCapabilities();
  Set<Class<? extends Capability>> externalExportedCapabilityClasses=repositoryInstanceDefinition.getExportedCapabilities();
  if (!externalSupportedCapabilities.containsKey(RepositoryEventTriggerCapability.class)) {
    externalExportedCapabilityClasses.add(RepositoryEventTriggerCapability.class);
    externalSupportedCapabilities.put(RepositoryEventTriggerCapability.class,new LiferayRepositoryEventTriggerCapability(repositoryClassDefinition.getRepositoryEventTrigger()));
  }
  return new CapabilityLocalRepository(localRepository,externalSupportedCapabilities,externalExportedCapabilityClasses,repositoryClassDefinition.getRepositoryEventTrigger());
}
