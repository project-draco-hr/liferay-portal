{
  if (sslFactory == null) {
    initFactory();
  }
  if (port == -1) {
    port=443;
  }
  TransportClientProperties tcp=TransportClientPropertiesFactory.create("https");
  boolean hostInNonProxyList=isHostInNonProxyList(host,tcp.getNonProxyHosts());
  Socket sslSocket=null;
  if (tcp.getProxyHost().length() == 0 || hostInNonProxyList) {
    sslSocket=sslFactory.createSocket(host,port);
  }
 else {
    int tunnelPort=(tcp.getProxyPort().length() != 0) ? Integer.parseInt(tcp.getProxyPort()) : 80;
    if (tunnelPort < 0)     tunnelPort=80;
    Socket tunnel=new Socket(tcp.getProxyHost(),tunnelPort);
    OutputStream tunnelOutputStream=tunnel.getOutputStream();
    PrintWriter out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(tunnelOutputStream)));
    out.print("CONNECT " + host + ":"+ port+ " HTTP/1.0\r\n"+ "User-Agent: AxisClient");
    if (tcp.getProxyUser().length() != 0 && tcp.getProxyPassword().length() != 0) {
      String encodedPassword=XMLUtils.base64encode((tcp.getProxyUser() + ":" + tcp.getProxyPassword()).getBytes());
      out.print("\nProxy-Authorization: Basic " + encodedPassword);
    }
    out.print("\nContent-Length: 0");
    out.print("\nPragma: no-cache");
    out.print("\r\n\r\n");
    out.flush();
    InputStream tunnelInputStream=tunnel.getInputStream();
    if (log.isDebugEnabled()) {
      log.debug(Messages.getMessage("isNull00","tunnelInputStream","" + (tunnelInputStream == null)));
    }
    String replyStr="";
    int newlinesSeen=0;
    boolean headerDone=false;
    while (newlinesSeen < 2) {
      int i=tunnelInputStream.read();
      if (i < 0) {
        throw new IOException("Unexpected EOF from proxy");
      }
      if (i == '\n') {
        headerDone=true;
        ++newlinesSeen;
      }
 else       if (i != '\r') {
        newlinesSeen=0;
        if (!headerDone) {
          replyStr+=String.valueOf((char)i);
        }
      }
    }
    if (StringUtils.startsWithIgnoreWhitespaces("HTTP/1.0 200",replyStr) && StringUtils.startsWithIgnoreWhitespaces("HTTP/1.1 200",replyStr)) {
      throw new IOException(Messages.getMessage("cantTunnel00",new String[]{tcp.getProxyHost(),"" + tunnelPort,replyStr}));
    }
    sslSocket=sslFactory.createSocket(tunnel,host,port,true);
    if (log.isDebugEnabled()) {
      log.debug(Messages.getMessage("setupTunnel00",tcp.getProxyHost(),"" + tunnelPort));
    }
  }
  ((SSLSocket)sslSocket).startHandshake();
  if (log.isDebugEnabled()) {
    log.debug(Messages.getMessage("createdSSL00"));
  }
  verifyHostName(host,(SSLSocket)sslSocket);
  return sslSocket;
}
