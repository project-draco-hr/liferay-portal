{
  String companyMx=companyId;
  Date now=new Date();
  Company company=null;
  try {
    company=CompanyUtil.findByPrimaryKey(companyId);
  }
 catch (  NoSuchCompanyException nsce) {
    String portalURL="localhost";
    String homeURL="localhost";
    String name=companyId;
    String legalName=null;
    String legalId=null;
    String legalType=null;
    String sicCode=null;
    String tickerSymbol=null;
    String industry=null;
    String type=null;
    String size=null;
    company=CompanyUtil.create(companyId);
    try {
      company.setKeyObj(Encryptor.generateKey());
    }
 catch (    EncryptorException ee) {
      throw new SystemException(ee);
    }
    company.setPortalURL(portalURL);
    company.setHomeURL(homeURL);
    company.setMx(companyMx);
    CompanyUtil.update(company);
    updateCompany(companyId,portalURL,homeURL,companyMx,name,legalName,legalId,legalType,sicCode,tickerSymbol,industry,type,size);
    if (companyId.equals("liferay.net")) {
      company=CompanyUtil.findByPrimaryKey(companyId);
      company.setPortalURL("demo.liferay.net");
      company.setHomeURL("demo.liferay.net");
      CompanyUtil.update(company);
      updateSecurity(companyId,CompanyImpl.AUTH_TYPE_EA,true,true,true);
      PortletPreferences prefs=PrefsPropsUtil.getPreferences(companyId);
      try {
        prefs.setValue(PropsUtil.ADMIN_EMAIL_FROM_NAME,"Liferay Demo");
        prefs.setValue(PropsUtil.ADMIN_EMAIL_FROM_ADDRESS,"test@liferay.net");
        prefs.store();
      }
 catch (      IOException ioe) {
        throw new SystemException(ioe);
      }
catch (      PortletException pe) {
        throw new SystemException(pe);
      }
    }
  }
  checkCompanyKey(companyId);
  User defaultUser=null;
  try {
    defaultUser=UserLocalServiceUtil.getDefaultUser(companyId);
    if (!defaultUser.isAgreedToTermsOfUse()) {
      defaultUser.setAgreedToTermsOfUse(true);
      UserUtil.update(defaultUser);
    }
  }
 catch (  NoSuchUserException nsue) {
    defaultUser=UserUtil.create(UserImpl.getDefaultUserId(companyId));
    defaultUser.setCompanyId(UserImpl.DEFAULT);
    defaultUser.setCreateDate(now);
    defaultUser.setModifiedDate(now);
    defaultUser.setPassword("password");
    defaultUser.setEmailAddress(UserImpl.DEFAULT + "@" + companyMx);
    defaultUser.setLanguageId(null);
    defaultUser.setTimeZoneId(null);
    defaultUser.setGreeting("Welcome!");
    defaultUser.setResolution(PropsUtil.get(PropsUtil.DEFAULT_GUEST_LAYOUT_RESOLUTION));
    defaultUser.setLoginDate(now);
    defaultUser.setFailedLoginAttempts(0);
    defaultUser.setAgreedToTermsOfUse(true);
    defaultUser.setActive(true);
    UserUtil.update(defaultUser);
    Contact defaultContact=ContactUtil.create(defaultUser.getUserId());
    defaultContact.setCompanyId(defaultUser.getCompanyId());
    defaultContact.setUserId(defaultUser.getUserId());
    defaultContact.setUserName(StringPool.BLANK);
    defaultContact.setCreateDate(now);
    defaultContact.setModifiedDate(now);
    defaultContact.setAccountId(defaultUser.getCompanyId());
    defaultContact.setParentContactId(ContactImpl.DEFAULT_PARENT_CONTACT_ID);
    defaultContact.setFirstName(StringPool.BLANK);
    defaultContact.setMiddleName(StringPool.BLANK);
    defaultContact.setLastName(StringPool.BLANK);
    defaultContact.setMale(true);
    defaultContact.setBirthday(now);
    ContactUtil.update(defaultContact);
  }
  GroupLocalServiceUtil.checkSystemGroups(companyId);
  RoleLocalServiceUtil.checkSystemRoles(companyId);
  if (UserUtil.countByCompanyId(companyId) == 0) {
    String creatorUserId=null;
    boolean autoUserId=true;
    String userId=StringPool.BLANK;
    boolean autoPassword=false;
    String password1=PropsUtil.get(PropsUtil.DEFAULT_ADMIN_PASSWORD);
    String password2=password1;
    boolean passwordReset=false;
    String emailAddress=PropsUtil.get(PropsUtil.DEFAULT_ADMIN_EMAIL_ADDRESS_PREFIX) + "@" + companyMx;
    Locale locale=defaultUser.getLocale();
    String firstName=PropsUtil.get(PropsUtil.DEFAULT_ADMIN_FIRST_NAME);
    String middleName=PropsUtil.get(PropsUtil.DEFAULT_ADMIN_MIDDLE_NAME);
    String lastName=PropsUtil.get(PropsUtil.DEFAULT_ADMIN_LAST_NAME);
    String nickName=StringPool.BLANK;
    int prefixId=0;
    int suffixId=0;
    boolean male=true;
    int birthdayMonth=Calendar.JANUARY;
    int birthdayDay=1;
    int birthdayYear=1970;
    String jobTitle=StringPool.BLANK;
    String organizationId=null;
    String locationId=null;
    User user=UserLocalServiceUtil.addUser(creatorUserId,companyId,autoUserId,userId,autoPassword,password1,password2,passwordReset,emailAddress,locale,firstName,middleName,lastName,nickName,prefixId,suffixId,male,birthdayMonth,birthdayDay,birthdayYear,jobTitle,organizationId,locationId,false);
    Role adminRole=RoleLocalServiceUtil.getRole(companyId,RoleImpl.ADMINISTRATOR);
    Role powerUserRole=RoleLocalServiceUtil.getRole(companyId,RoleImpl.POWER_USER);
    String[] roleIds=new String[]{adminRole.getRoleId(),powerUserRole.getRoleId()};
    RoleLocalServiceUtil.setUserRoles(user.getUserId(),roleIds);
  }
}
