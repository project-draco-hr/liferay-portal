{
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  String tempFileId=DLUtil.getTempFileId(fileVersion.getFileEntryId(),fileVersion.getVersion());
  File thumbnailTempFile=getThumbnailTempFile(tempFileId);
  try {
    try {
      if (PropsValues.DL_FILE_ENTRY_PREVIEW_FORK_PROCESS_ENABLED) {
        ProcessCallable<String> processCallable=new LiferayVideoThumbnailProcessCallable(ServerDetector.getServerId(),PropsUtil.get(PropsKeys.LIFERAY_HOME),Log4JUtil.getCustomLogSettings(),file.getCanonicalPath(),thumbnailTempFile,THUMBNAIL_TYPE,height,width,PropsValues.DL_FILE_ENTRY_THUMBNAIL_VIDEO_FRAME_PERCENTAGE);
        Future<String> future=ProcessExecutor.execute(ClassPathUtil.getGlobalClassPath(),ClassPathUtil.getPortalClassPath(),processCallable);
        String processIdentity=String.valueOf(fileVersion.getFileVersionId());
        futures.put(processIdentity,future);
        future.get();
      }
 else {
        LiferayConverter liferayConverter=new LiferayVideoThumbnailConverter(file.getCanonicalPath(),thumbnailTempFile,THUMBNAIL_TYPE,height,width,PropsValues.DL_FILE_ENTRY_THUMBNAIL_VIDEO_FRAME_PERCENTAGE);
        liferayConverter.convert();
      }
    }
 catch (    CancellationException ce) {
      if (_log.isInfoEnabled()) {
        _log.info("Cancellation received for " + fileVersion.getFileVersionId() + " "+ fileVersion.getTitle());
      }
    }
catch (    Exception e) {
      _log.error(e,e);
    }
    storeThumbnailImages(fileVersion,thumbnailTempFile);
    if (_log.isInfoEnabled()) {
      _log.info("Xuggler generated a thumbnail for " + fileVersion.getTitle() + " in "+ stopWatch.getTime()+ " ms");
    }
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    FileUtil.delete(thumbnailTempFile);
  }
}
