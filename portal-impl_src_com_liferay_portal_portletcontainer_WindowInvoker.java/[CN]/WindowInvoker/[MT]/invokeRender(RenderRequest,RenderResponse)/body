{
  String title=null;
  if (isPortletExternal()) {
    RenderRequestImpl renderReqImpl=(RenderRequestImpl)req;
    RenderResponseImpl renderResImpl=(RenderResponseImpl)res;
    try {
      HttpServletRequest request=renderReqImpl.getOriginalHttpServletRequest();
      HttpServletResponse response=renderResImpl.getHttpServletResponse();
      GetMarkupRequest getMarkupRequest=ContainerRequestFactory.createGetMarkUpRequest(request,_portletModel,renderReqImpl.getWindowState(),renderReqImpl.getPortletMode(),renderResImpl.getLifecycle(),getPlid(req),_isRemotePortlet);
      populateContainerRequest(request,response,getMarkupRequest,renderReqImpl);
      GetMarkupResponse getMarkupResponse=ContainerResponseFactory.createGetMarkUpResponse(response);
      List allowableContentTypes=getMarkupRequest.getAllowableContentTypes();
      if (LiferayWindowState.EXCLUSIVE.equals(req.getWindowState())) {
        allowableContentTypes.add("*/*");
      }
      getMarkupRequest.setAllowableContentTypes(allowableContentTypes);
      _container.getMarkup(getMarkupRequest,getMarkupResponse);
      title=getMarkupResponse.getTitle();
      StringBuffer buffer=getMarkupResponse.getMarkup();
      PrintWriter out=response.getWriter();
      out.print(buffer);
    }
 catch (    ContentException ce) {
      logError(ce);
      throw new PortletException(ce);
    }
catch (    ContainerException ce) {
      logError(ce);
      throw new PortletException(ce);
    }
catch (    PortalException pe) {
      logError(pe);
      throw new PortletException(pe);
    }
catch (    SystemException se) {
      logError(se);
      throw new PortletException(se);
    }
 finally {
      setPortletAttributes(req,res);
    }
  }
 else {
    invoke(req,res,PortletRequest.RENDER_PHASE);
  }
  return title;
}
