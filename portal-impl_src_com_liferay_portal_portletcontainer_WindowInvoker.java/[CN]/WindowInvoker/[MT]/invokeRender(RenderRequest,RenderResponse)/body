{
  if (!_isWARFile()) {
    return super.invokeRender(renderRequest,renderResponse);
  }
  try {
    RenderRequestImpl renderRequestImpl=(RenderRequestImpl)renderRequest;
    RenderResponseImpl renderResponseImpl=(RenderResponseImpl)renderResponse;
    HttpServletRequest request=renderRequestImpl.getOriginalHttpServletRequest();
    HttpServletResponse response=renderResponseImpl.getHttpServletResponse();
    _initUser(request,_portletModel);
    GetMarkupRequest getMarkupRequest=ContainerRequestFactory.createGetMarkUpRequest(request,_portletModel,renderRequestImpl.getWindowState(),renderRequestImpl.getPortletMode(),_getPlid(renderRequest),isFacesPortlet(),_remotePortlet);
    _populateContainerRequest(request,response,getMarkupRequest,renderRequest);
    if (_portletModel.getPublishingEvents().size() > 0) {
      getMarkupRequest.setPortletNamespaces(_getPortletNamespaces(getMarkupRequest.getPortletWindowContext()));
    }
    GetMarkupResponse getMarkupResponse=ContainerResponseFactory.createGetMarkUpResponse(response);
    List<String> allowableContentTypes=getMarkupRequest.getAllowableContentTypes();
    if (renderRequest.getWindowState().equals(LiferayWindowState.EXCLUSIVE)) {
      allowableContentTypes.add("*/*");
    }
    getMarkupRequest.setAllowableContentTypes(allowableContentTypes);
    _container.getMarkup(getMarkupRequest,getMarkupResponse);
    Map<String,List<String>> properties=getMarkupResponse.getStringProperties();
    if ((properties != null) && (properties.containsKey("clear-request-parameters"))) {
      getMarkupRequest.getRenderParameters().clear();
    }
    StringBuffer sb=getMarkupResponse.getMarkup();
    PrintWriter pw=response.getWriter();
    pw.print(sb);
    return getMarkupResponse.getTitle();
  }
 catch (  Exception e) {
    throw new PortletException(e);
  }
 finally {
    _setPortletAttributes(renderRequest,renderResponse);
  }
}
