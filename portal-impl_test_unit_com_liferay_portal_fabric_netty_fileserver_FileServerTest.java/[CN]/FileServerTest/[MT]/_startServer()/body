{
  ServerBootstrap serverBootstrap=new ServerBootstrap();
  serverBootstrap.group(_nioEventLoopGroup);
  serverBootstrap.channel(NioServerSocketChannel.class);
  serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>(){
    @Override protected void initChannel(    SocketChannel socketChannel){
      ChannelPipeline channelPipeline=socketChannel.pipeline();
      channelPipeline.addLast(AnnotatedObjectEncoder.NAME,AnnotatedObjectEncoder.INSTANCE);
      channelPipeline.addLast(new AnnotatedObjectDecoder());
      channelPipeline.addLast(_fileServerEventExecutorGroup,FileRequestChannelHandler.NAME,new FileRequestChannelHandler(CompressionLevel.BEST_SPEED));
    }
  }
);
  int port=_START_PORT;
  while (port < 65536) {
    try {
      ChannelFuture channelFuture=serverBootstrap.bind("127.0.0.1",port);
      channelFuture.sync();
      _serverChannel=channelFuture.channel();
      return port;
    }
 catch (    Exception e) {
      if (!(e instanceof BindException)) {
        throw e;
      }
      System.err.println("Unable to bind to " + (port++) + ", trying "+ port);
    }
  }
  throw new IllegalStateException("Unable to start server");
}
