{
  String className=PoshiRunnerGetterUtil.getClassNameFromFilePath(filePath);
  String rootElementName=element.getName();
  if (!Validator.equals(rootElementName,"html")) {
    _exceptions.add(new Exception("Invalid " + rootElementName + " element\n"+ filePath+ ":"+ element.attributeValue("line-number")));
  }
  _validateHasChildElements(element,filePath);
  _validateNumberOfChildElements(element,2,filePath);
  _validateRequiredChildElementNames(element,Arrays.asList("body","head"),filePath);
  Element bodyElement=element.element("body");
  _validateHasChildElements(bodyElement,filePath);
  _validateNumberOfChildElements(bodyElement,1,filePath);
  _validateRequiredChildElementName(bodyElement,"table",filePath);
  Element tableElement=bodyElement.element("table");
  List<String> requiredTableAttributeNames=Arrays.asList("border","cellpadding","cellspacing","line-number");
  _validateHasChildElements(tableElement,filePath);
  _validateNumberOfChildElements(tableElement,2,filePath);
  _validateRequiredAttributeNames(tableElement,requiredTableAttributeNames,filePath);
  _validateRequiredChildElementNames(tableElement,Arrays.asList("tbody","thead"),filePath);
  Element tBodyElement=tableElement.element("tbody");
  if (!Validator.equals(className,"BaseLiferay")) {
    _validateHasChildElements(tBodyElement,filePath);
    _validateRequiredChildElementName(tBodyElement,"tr",filePath);
    List<Element> trElements=tBodyElement.elements();
    for (    Element trElement : trElements) {
      _validateHasChildElements(trElement,filePath);
      _validateNumberOfChildElements(trElement,3,filePath);
      _validateRequiredChildElementName(trElement,"td",filePath);
      List<Element> tdElements=trElement.elements();
      Element locatorElement=tdElements.get(1);
      String locator=locatorElement.getText();
      Element locatorKeyElement=tdElements.get(0);
      String locatorKey=locatorKeyElement.getText();
      if (Validator.isNull(locator) && Validator.isNull(locatorKey)) {
        continue;
      }
 else       if (Validator.isNotNull(locator) && Validator.isNotNull(locatorKey)) {
        continue;
      }
      _exceptions.add(new Exception("Missing locator\n" + filePath + ":"+ trElement.attributeValue("line-number")));
    }
  }
  Element theadElement=tableElement.element("thead");
  _validateHasChildElements(theadElement,filePath);
  _validateNumberOfChildElements(theadElement,1,filePath);
  _validateRequiredChildElementName(theadElement,"tr",filePath);
  Element trElement=theadElement.element("tr");
  _validateHasChildElements(trElement,filePath);
  _validateNumberOfChildElements(trElement,1,filePath);
  _validateRequiredChildElementName(trElement,"td",filePath);
  Element tdElement=trElement.element("td");
  _validateRequiredAttributeNames(tdElement,Arrays.asList("colspan","rowspan"),filePath);
  String theadClassName=tdElement.getText();
  if (Validator.isNull(theadClassName)) {
    _exceptions.add(new Exception("Missing thead class name\n" + filePath + ":"+ trElement.attributeValue("line-number")));
  }
 else   if (!Validator.equals(theadClassName,className)) {
    _exceptions.add(new Exception("Thead class name does not match file name\n" + filePath + ":"+ trElement.attributeValue("line-number")));
  }
  Element headElement=element.element("head");
  _validateHasChildElements(headElement,filePath);
  _validateNumberOfChildElements(headElement,1,filePath);
  _validateRequiredChildElementName(headElement,"title",filePath);
  Element titleElement=headElement.element("title");
  if (!Validator.equals(titleElement.getText(),className)) {
    _exceptions.add(new Exception("File name and title are different\n" + filePath + ":"+ titleElement.attributeValue("line-number")));
  }
}
