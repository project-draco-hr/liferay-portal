{
  _validateDefinitionElement(element,filePath);
  List<Element> childElements=element.elements();
  if (Validator.isNull(element.attributeValue("extends"))) {
    _validateHasChildElements(element,filePath);
    _validateRequiredChildElementNames(element,Arrays.asList("command"),filePath);
  }
  List<String> possibleTagElementNames=Arrays.asList("command","property","set-up","tear-down","var");
  for (  Element childElement : childElements) {
    String childElementName=childElement.getName();
    if (!possibleTagElementNames.contains(childElementName)) {
      throw new Exception("Invalid " + childElementName + " element\n"+ filePath+ ":"+ childElement.attributeValue("line-number"));
    }
    if (childElementName.equals("command")) {
      if (Validator.isNull(childElement.attributeValue("name"))) {
        throw new Exception("Missing name attribute\n" + filePath + ":"+ childElement.attributeValue("line-number"));
      }
      List<String> possibleAttributeNames=Arrays.asList("description","known-issues","line-number","name","priority");
      _validateHasChildElements(childElement,filePath);
      _validatePossibleAttributeNames(childElement,possibleAttributeNames,filePath);
      _validateRequiredAttributeNames(childElement,Arrays.asList("name"),filePath);
      _parseElements(childElement,filePath);
    }
 else     if (childElementName.equals("property")) {
      List<String> attributeNames=Arrays.asList("line-number","name","value");
      _validatePossibleAttributeNames(childElement,attributeNames,filePath);
      _validateRequiredAttributeNames(childElement,attributeNames,filePath);
    }
 else     if (childElementName.equals("set-up") || childElementName.equals("tear-down")) {
      _validateHasChildElements(childElement,filePath);
      _validateHasNoAttributes(childElement,filePath);
      _parseElements(childElement,filePath);
    }
 else     if (childElementName.equals("var")) {
      _validateVarElement(childElement,filePath);
    }
  }
}
