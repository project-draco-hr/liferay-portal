{
  validateDefinitionElement(element,filePath);
  List<Element> childElements=element.elements();
  if (Validator.isNull(element.attributeValue("extends"))) {
    validateHasChildElements(element,filePath);
    validateRequiredChildElementName(element,"command",filePath);
  }
  List<String> possibleTagElementNames=Arrays.asList("command","property","set-up","tear-down","var");
  List<String> propertyNames=new ArrayList<>();
  for (  Element childElement : childElements) {
    String childElementName=childElement.getName();
    if (!possibleTagElementNames.contains(childElementName)) {
      _exceptions.add(new Exception("Invalid " + childElementName + " element\n"+ filePath+ ":"+ childElement.attributeValue("line-number")));
    }
    if (childElementName.equals("command")) {
      List<String> possibleAttributeNames=Arrays.asList("description","known-issues","line-number","name","priority");
      validateHasChildElements(childElement,filePath);
      validatePossibleAttributeNames(childElement,possibleAttributeNames,filePath);
      validateRequiredAttributeNames(childElement,Arrays.asList("name"),filePath);
      parseElements(childElement,filePath);
    }
 else     if (childElementName.equals("property")) {
      validatePropertyElement(childElement,filePath);
      String propertyName=childElement.attributeValue("name");
      if (!propertyNames.contains(propertyName)) {
        propertyNames.add(propertyName);
      }
 else {
        _exceptions.add(new Exception("Duplicate property name " + propertyName + "\n"+ filePath+ ":"+ childElement.attributeValue("line-number")));
      }
    }
 else     if (childElementName.equals("set-up") || childElementName.equals("tear-down")) {
      validateHasChildElements(childElement,filePath);
      validateHasNoAttributes(childElement,filePath);
      parseElements(childElement,filePath);
    }
 else     if (childElementName.equals("var")) {
      validateVarElement(childElement,filePath);
    }
  }
}
