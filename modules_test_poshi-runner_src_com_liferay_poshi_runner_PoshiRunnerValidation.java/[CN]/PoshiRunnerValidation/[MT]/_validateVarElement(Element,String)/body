{
  _validateHasNoChildElements(element,filePath);
  _validateRequiredAttributeNames(element,Arrays.asList("name"),filePath);
  List<Attribute> attributes=element.attributes();
  if (attributes.size() <= 2) {
    if (Validator.isNull(element.getText())) {
      _exceptions.add(new Exception("Missing value attribute\n" + filePath + ":"+ element.attributeValue("line-number")));
    }
  }
  List<String> possibleAttributeNames=Arrays.asList("attribute","group","input","line-number","locator","method","name","pattern","property-value","value");
  _validatePossibleAttributeNames(element,possibleAttributeNames,filePath);
  if (Validator.isNotNull(element.attributeValue("attribute"))) {
    List<String> attributeNames=Arrays.asList("attribute","line-number","locator","name");
    _validatePossibleAttributeNames(element,attributeNames,filePath);
    _validateRequiredAttributeNames(element,attributeNames,filePath);
  }
 else   if (Validator.isNotNull(element.attributeValue("group")) || Validator.isNotNull(element.attributeValue("input")) || Validator.isNotNull(element.attributeValue("pattern"))) {
    List<String> attributeNames=Arrays.asList("group","line-number","input","name","pattern");
    _validatePossibleAttributeNames(element,attributeNames,filePath);
    _validateRequiredAttributeNames(element,attributeNames,filePath);
  }
 else   if (Validator.isNotNull(element.attributeValue("locator")) || Validator.isNotNull(element.attributeValue("method")) || Validator.isNotNull(element.attributeValue("property-value"))|| Validator.isNotNull(element.attributeValue("var"))) {
    _validateNumberofAttributes(element,3,filePath);
  }
}
