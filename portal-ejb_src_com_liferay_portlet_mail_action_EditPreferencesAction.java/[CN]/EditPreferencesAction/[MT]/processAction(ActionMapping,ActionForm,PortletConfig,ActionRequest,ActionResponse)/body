{
  String cmd=ParamUtil.getString(req,Constants.CMD);
  if (!cmd.equals(Constants.UPDATE)) {
    return;
  }
  PortletPreferences prefs=req.getPreferences();
  String tabs1=ParamUtil.getString(req,"tabs1");
  if (tabs1.equals("filters")) {
    List filters=new ArrayList();
    List filterObjects=new ArrayList();
    for (int i=0; i < 10; i++) {
      String emailAddress=ParamUtil.getString(req,"filterEmailAddress" + i);
      String folder=ParamUtil.getString(req,"filterFolder" + i);
      filters.add(emailAddress + "[$FILTER_SEPARATOR$]" + folder);
      filterObjects.add(new Filter(emailAddress,folder));
    }
    prefs.setValues("filters",(String[])filters.toArray(new String[0]));
    String forwardAddress=GetterUtil.getString(prefs.getValue("forward-address",StringPool.BLANK));
    List emailAddresses=getEmailAddresses(forwardAddress,StringPool.SPACE);
    boolean leaveCopy=GetterUtil.getBoolean(prefs.getValue("leave-copy",StringPool.BLANK));
    try {
      MailServiceUtil.addForward(req.getRemoteUser(),filterObjects,emailAddresses,leaveCopy);
    }
 catch (    SystemException se) {
      throw new PortletException(se);
    }
  }
 else   if (tabs1.equals("forward-address")) {
    String forwardAddress=ParamUtil.getString(req,"forwardAddress");
    List emailAddresses=getEmailAddresses(forwardAddress,"\n");
    if (emailAddresses.size() > 0) {
      forwardAddress=StringUtil.merge(emailAddresses,StringPool.SPACE);
    }
 else {
      forwardAddress=StringPool.BLANK;
    }
    boolean leaveCopy=ParamUtil.getBoolean(req,"leaveCopy");
    prefs.setValue("forward-address",forwardAddress);
    prefs.setValue("leave-copy",Boolean.toString(leaveCopy));
    List filterObjects=new ArrayList();
    String[] filters=prefs.getValues("filters",new String[0]);
    for (int i=0; i < filters.length; i++) {
      String[] kvp=StringUtil.split(filters[i],"[$FILTER_SEPARATOR$]");
      if (kvp.length == 2) {
        String emailAddress=kvp[0];
        String folder=kvp[1];
        filterObjects.add(new Filter(emailAddress,folder));
      }
    }
    try {
      MailServiceUtil.addForward(req.getRemoteUser(),filterObjects,emailAddresses,leaveCopy);
    }
 catch (    SystemException se) {
      throw new PortletException(se);
    }
    res.setRenderParameter("forwardAddress",forwardAddress);
  }
 else   if (tabs1.equals("signature")) {
    String signature=ParamUtil.getString(req,"signature");
    prefs.setValue("signature",signature);
  }
 else   if (tabs1.equals("vacation-message")) {
    String vacationMessage=ParamUtil.getString(req,"vacationMessage");
    prefs.setValue("vacation-message",vacationMessage);
    try {
      User user=PortalUtil.getUser(req);
      MailServiceUtil.addVacationMessage(user.getUserId(),user.getEmailAddress(),vacationMessage);
    }
 catch (    RemoteException re) {
      throw new SystemException(re);
    }
catch (    SystemException se) {
      throw new PortletException(se);
    }
  }
  prefs.store();
  SessionMessages.add(req,config.getPortletName() + ".doEdit");
}
