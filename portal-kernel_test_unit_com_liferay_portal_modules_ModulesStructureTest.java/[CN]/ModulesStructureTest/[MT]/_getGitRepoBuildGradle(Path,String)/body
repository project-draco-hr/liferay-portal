{
  if (Files.notExists(dirPath.resolve("app.bnd"))) {
    buildGradleTemplate=StringUtil.removeSubstring(buildGradleTemplate,_APP_BUILD_GRADLE + StringPool.NEW_LINE + StringPool.NEW_LINE);
  }
  final Set<String> pluginNames=new TreeSet<>();
  pluginNames.add("com.liferay.gradle.plugins.defaults");
  Files.walkFileTree(dirPath,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dirPath,    BasicFileAttributes basicFileAttributes) throws IOException {
      Path buildGradlePath=dirPath.resolve("build.gradle");
      if (Files.exists(buildGradlePath) && Files.notExists(dirPath.resolve(".gitrepo"))) {
        _addGradlePluginNames(pluginNames,"com.liferay.gradle.plugins.",buildGradlePath,"com.liferay.",new String[]{"lang.merger","maven.plugin.builder"});
        return FileVisitResult.SKIP_SUBTREE;
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
  StringBundler sb=new StringBundler(pluginNames.size() * 5 - 1);
  int i=0;
  for (  String pluginName : pluginNames) {
    if (i > 0) {
      sb.append(CharPool.NEW_LINE);
    }
    sb.append("\t\t");
    sb.append("classpath group: \"com.liferay\", name: \"");
    sb.append(pluginName);
    sb.append("\", version: \"latest.release\"");
    i++;
  }
  return StringUtil.replace(buildGradleTemplate,"[$BUILDSCRIPT_DEPENDENCIES$]",sb.toString());
}
