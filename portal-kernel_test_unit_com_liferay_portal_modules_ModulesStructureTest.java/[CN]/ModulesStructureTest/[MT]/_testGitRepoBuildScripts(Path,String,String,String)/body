{
  Path buildGradlePath=dirPath.resolve("build.gradle");
  Path gradlePropertiesPath=dirPath.resolve("gradle.properties");
  Path settingsGradlePath=dirPath.resolve("settings.gradle");
  boolean buildGradleExists=Files.exists(buildGradlePath);
  boolean gradlePropertiesExists=Files.exists(gradlePropertiesPath);
  boolean settingsGradleExists=Files.exists(settingsGradlePath);
  Assert.assertTrue("Missing " + buildGradlePath,buildGradleExists);
  String buildGradle=_read(buildGradlePath);
  Assert.assertEquals("Incorrect " + buildGradlePath,_getGitRepoBuildGradle(dirPath,buildGradleTemplate),buildGradle);
  Assert.assertTrue("Missing " + gradlePropertiesPath,gradlePropertiesExists);
  String gradleProperties=_read(gradlePropertiesPath);
  Assert.assertEquals("Incorrect " + gradlePropertiesPath,_getGitRepoGradleProperties(dirPath,gradlePropertiesTemplate),gradleProperties);
  Assert.assertTrue("Missing " + settingsGradlePath,settingsGradleExists);
  String settingsGradle=_read(settingsGradlePath);
  Assert.assertEquals("Incorrect " + settingsGradlePath,settingsGradleTemplate,settingsGradle);
  Path gitAttributesPath=dirPath.resolve(".gitattributes");
  boolean gitAttributesExists=Files.exists(gitAttributesPath);
  if (_containsFile(dirPath,"**/src/main/resources/**/*.soy")) {
    Assert.assertTrue("Missing " + gitAttributesPath,gitAttributesExists);
    Assert.assertEquals("*.soy\ttext eol=lf",_read(gitAttributesPath));
  }
 else {
    Assert.assertFalse("Forbidden " + gitAttributesPath,gitAttributesExists);
  }
}
