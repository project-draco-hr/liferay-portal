{
  final Path modulesDirPath=Paths.get("modules");
  ClassLoader classLoader=ModulesStructureTest.class.getClassLoader();
  final String gitRepoBuildGradleTemplate=StringUtil.read(classLoader,"com/liferay/portal/modules/dependencies/" + "git_repo_build_gradle.tmpl");
  final String gitRepoSettingsGradleTemplate=StringUtil.read(classLoader,"com/liferay/portal/modules/dependencies/" + "git_repo_settings_gradle.tmpl");
  Files.walkFileTree(modulesDirPath,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dirPath,    BasicFileAttributes basicFileAttributes) throws IOException {
      if (dirPath.equals(modulesDirPath)) {
        return FileVisitResult.CONTINUE;
      }
      Path dirNamePath=dirPath.getFileName();
      String dirName=dirNamePath.toString();
      if (dirName.charAt(0) == '.') {
        return FileVisitResult.SKIP_SUBTREE;
      }
      Path buildGradlePath=dirPath.resolve("build.gradle");
      Path buildXMLPath=dirPath.resolve("build.xml");
      if (Files.exists(dirPath.resolve(".gitrepo"))) {
        _testGitRepoBuildScripts(dirPath,gitRepoBuildGradleTemplate,gitRepoSettingsGradleTemplate);
      }
 else       if (Files.exists(dirPath.resolve("bnd.bnd"))) {
        if (Files.notExists(buildGradlePath)) {
          Assert.fail("Missing " + buildGradlePath);
        }
        if (Files.exists(buildXMLPath)) {
          Assert.fail("Forbidden " + buildXMLPath);
        }
        Path ivyXmlPath=dirPath.resolve("ivy.xml");
        if (Files.exists(ivyXmlPath)) {
          Assert.fail("Forbidden " + ivyXmlPath);
        }
        return FileVisitResult.SKIP_SUBTREE;
      }
 else       if (Files.exists(buildXMLPath)) {
        if (Files.exists(buildGradlePath)) {
          Assert.fail("Forbidden " + buildGradlePath);
        }
        return FileVisitResult.SKIP_SUBTREE;
      }
 else       if (Files.exists(dirPath.resolve("package.json"))) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
}
