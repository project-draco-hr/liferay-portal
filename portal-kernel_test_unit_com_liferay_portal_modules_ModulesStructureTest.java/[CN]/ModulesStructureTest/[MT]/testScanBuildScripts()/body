{
  ClassLoader classLoader=ModulesStructureTest.class.getClassLoader();
  final String gitRepoBuildGradleTemplate=StringUtil.read(classLoader,"com/liferay/portal/modules/dependencies" + "/git_repo_build_gradle.tmpl");
  final String gitRepoGitAttributesTemplate=StringUtil.read(classLoader,"com/liferay/portal/modules/dependencies" + "/git_repo_gitattributes.tmpl");
  final String gitRepoGradlePropertiesTemplate=StringUtil.read(classLoader,"com/liferay/portal/modules/dependencies" + "/git_repo_gradle_properties.tmpl");
  final String gitRepoSettingsGradleTemplate=StringUtil.read(classLoader,"com/liferay/portal/modules/dependencies" + "/git_repo_settings_gradle.tmpl");
  Files.walkFileTree(_modulesDirPath,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dirPath,    BasicFileAttributes basicFileAttributes) throws IOException {
      if (dirPath.equals(_modulesDirPath)) {
        return FileVisitResult.CONTINUE;
      }
      Path dirNamePath=dirPath.getFileName();
      String dirName=dirNamePath.toString();
      if (dirName.charAt(0) == '.') {
        return FileVisitResult.SKIP_SUBTREE;
      }
      Path buildGradlePath=dirPath.resolve("build.gradle");
      Path buildXMLPath=dirPath.resolve("build.xml");
      if (Files.exists(dirPath.resolve(".gitrepo"))) {
        _testGitRepoBuildScripts(dirPath,gitRepoBuildGradleTemplate,gitRepoGitAttributesTemplate,gitRepoGradlePropertiesTemplate,gitRepoSettingsGradleTemplate);
      }
 else       if (Files.exists(dirPath.resolve("app.bnd"))) {
        _testAppBuildScripts(dirPath);
      }
 else       if (Files.exists(dirPath.resolve("bnd.bnd"))) {
        Assert.assertTrue("Missing " + buildGradlePath,Files.exists(buildGradlePath));
        Assert.assertFalse("Forbidden " + buildXMLPath,Files.exists(buildXMLPath));
        Path ivyXmlPath=dirPath.resolve("ivy.xml");
        Assert.assertFalse("Forbidden " + ivyXmlPath,Files.exists(ivyXmlPath));
        return FileVisitResult.SKIP_SUBTREE;
      }
 else       if (Files.exists(buildXMLPath)) {
        Assert.assertFalse("Forbidden " + buildGradlePath,Files.exists(buildGradlePath));
        return FileVisitResult.SKIP_SUBTREE;
      }
 else       if (Files.exists(dirPath.resolve("package.json"))) {
        _testThemeBuildScripts(dirPath);
        return FileVisitResult.SKIP_SUBTREE;
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
}
