{
  long pk=nextLong();
  SocialEquityAssetEntry newSocialEquityAssetEntry=_persistence.create(pk);
  newSocialEquityAssetEntry.setCompanyId(nextLong());
  newSocialEquityAssetEntry.setUserId(nextLong());
  newSocialEquityAssetEntry.setAssetEntryId(nextLong());
  newSocialEquityAssetEntry.setInformationK(nextDouble());
  newSocialEquityAssetEntry.setInformationB(nextDouble());
  newSocialEquityAssetEntry.setInformationEquity(nextDouble());
  _persistence.update(newSocialEquityAssetEntry,false);
  SocialEquityAssetEntry existingSocialEquityAssetEntry=_persistence.findByPrimaryKey(newSocialEquityAssetEntry.getPrimaryKey());
  assertEquals(existingSocialEquityAssetEntry.getEquityAssetEntryId(),newSocialEquityAssetEntry.getEquityAssetEntryId());
  assertEquals(existingSocialEquityAssetEntry.getCompanyId(),newSocialEquityAssetEntry.getCompanyId());
  assertEquals(existingSocialEquityAssetEntry.getUserId(),newSocialEquityAssetEntry.getUserId());
  assertEquals(existingSocialEquityAssetEntry.getAssetEntryId(),newSocialEquityAssetEntry.getAssetEntryId());
  assertEquals(existingSocialEquityAssetEntry.getInformationK(),newSocialEquityAssetEntry.getInformationK());
  assertEquals(existingSocialEquityAssetEntry.getInformationB(),newSocialEquityAssetEntry.getInformationB());
  assertEquals(existingSocialEquityAssetEntry.getInformationEquity(),newSocialEquityAssetEntry.getInformationEquity());
}
