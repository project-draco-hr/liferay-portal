{
  LdapContext ldapContext=_portalLDAP.getContext(ldapServerId,companyId);
  if (ldapContext == null) {
    if (_log.isDebugEnabled()) {
      _log.debug("No LDAP server configuration available for " + "LDAP server " + ldapServerId + " and company "+ companyId);
    }
    return FAILURE;
  }
  NamingEnumeration<SearchResult> enu=null;
  try {
    LDAPServerConfiguration ldapServerConfiguration=_ldapServerConfigurationProvider.getConfiguration(companyId,ldapServerId);
    String baseDN=ldapServerConfiguration.baseDN();
    String filter=_ldapSettings.getAuthSearchFilter(ldapServerId,companyId,emailAddress,screenName,String.valueOf(userId));
    Properties userMappings=_ldapSettings.getUserMappings(ldapServerId,companyId);
    String userMappingsScreenName=GetterUtil.getString(userMappings.getProperty("screenName"));
    userMappingsScreenName=StringUtil.toLowerCase(userMappingsScreenName);
    SearchControls searchControls=new SearchControls(SearchControls.SUBTREE_SCOPE,1,0,new String[]{userMappingsScreenName},false,false);
    enu=ldapContext.search(baseDN,filter,searchControls);
    if (!enu.hasMoreElements()) {
      if (_log.isDebugEnabled()) {
        _log.debug("No results found with search filter: " + filter);
      }
      return DNE;
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Found results with search filter: " + filter);
    }
    SearchResult result=enu.nextElement();
    String fullUserDN=_portalLDAP.getNameInNamespace(ldapServerId,companyId,result);
    Attributes attributes=_portalLDAP.getUserAttributes(ldapServerId,companyId,ldapContext,fullUserDN);
    LDAPAuthResult ldapAuthResult=authenticate(ldapContext,companyId,attributes,fullUserDN,password);
    if (!ldapAuthResult.isAuthenticated()) {
      password=StringPool.BLANK;
    }
    User user=_ldapUserImporter.importUser(ldapServerId,companyId,ldapContext,attributes,password);
    String errorMessage=ldapAuthResult.getErrorMessage();
    if (errorMessage != null) {
      SystemLDAPConfiguration systemLDAPConfiguration=_systemLDAPConfigurationProvider.getConfiguration(companyId);
      for (      String errorUserLockoutKeyword : systemLDAPConfiguration.errorUserLockoutKeywords()) {
        if (errorMessage.contains(errorUserLockoutKeyword)) {
          throw new UserLockoutException.LDAPLockout(fullUserDN,errorMessage);
        }
      }
      for (      String errorPasswordExpiredKeyword : systemLDAPConfiguration.errorPasswordExpiredKeywords()) {
        if (errorMessage.contains(errorPasswordExpiredKeyword)) {
          throw new PasswordExpiredException();
        }
      }
    }
    if (!ldapAuthResult.isAuthenticated()) {
      if (_log.isDebugEnabled()) {
        StringBundler sb=new StringBundler(10);
        sb.append("Uanble to authenticate with ");
        sb.append(fullUserDN);
        sb.append(" on LDAP server ");
        sb.append(ldapServerId);
        sb.append(", company ");
        sb.append(companyId);
        sb.append(", and LDAP context ");
        sb.append(ldapContext);
        sb.append(": ");
        sb.append(errorMessage);
        _log.debug(sb.toString());
      }
      return FAILURE;
    }
    String resultCode=ldapAuthResult.getResponseControl();
    if (resultCode.equals(LDAPAuth.RESULT_PASSWORD_RESET)) {
      _userLocalService.updatePasswordReset(user.getUserId(),true);
    }
  }
 catch (  Exception e) {
    if (e instanceof PasswordExpiredException || e instanceof UserLockoutException) {
      throw e;
    }
    _log.error("Problem accessing LDAP server",e);
    return FAILURE;
  }
 finally {
    if (enu != null) {
      enu.close();
    }
    ldapContext.close();
  }
  return SUCCESS;
}
