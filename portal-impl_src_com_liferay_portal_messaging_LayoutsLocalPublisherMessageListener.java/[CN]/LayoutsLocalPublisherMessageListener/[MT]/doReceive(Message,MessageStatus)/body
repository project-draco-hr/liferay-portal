{
  long exportImportConfigurationId=GetterUtil.getLong(message.getPayload());
  ExportImportConfiguration exportImportConfiguration=ExportImportConfigurationLocalServiceUtil.getExportImportConfiguration(exportImportConfigurationId);
  messageStatus.setPayload(exportImportConfiguration);
  Map<String,Serializable> configurationContextMap=exportImportConfiguration.getSettingsMap();
  long userId=MapUtil.getLong(configurationContextMap,"userId");
  long sourceGroupId=MapUtil.getLong(configurationContextMap,"sourceGroupId");
  long targetGroupId=MapUtil.getLong(configurationContextMap,"targetGroupId");
  boolean privateLayout=MapUtil.getBoolean(configurationContextMap,"privateLayout");
  Map<Long,Boolean> layoutIdMap=(Map<Long,Boolean>)configurationContextMap.get("layoutIdMap");
  Map<String,String[]> parameterMap=(Map<String,String[]>)configurationContextMap.get("parameterMap");
  Date startDate=(Date)configurationContextMap.get("startDate");
  Date endDate=(Date)configurationContextMap.get("endDate");
  String range=MapUtil.getString(parameterMap,"range");
  if (range.equals(ExportImportDateUtil.RANGE_FROM_LAST_PUBLISH_DATE)) {
    LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(sourceGroupId,privateLayout);
    long lastPublishDate=GetterUtil.getLong(layoutSet.getSettingsProperty("last-publish-date"));
    if (lastPublishDate > 0) {
      endDate=new Date();
      startDate=new Date(lastPublishDate);
    }
  }
 else   if (range.equals(ExportImportDateUtil.RANGE_LAST)) {
    int last=MapUtil.getInteger(parameterMap,"last");
    if (last > 0) {
      Date scheduledFireTime=new Date();
      startDate=new Date(scheduledFireTime.getTime() - (last * Time.HOUR));
      endDate=scheduledFireTime;
    }
  }
  PrincipalThreadLocal.setName(userId);
  User user=UserLocalServiceUtil.getUserById(userId);
  PermissionChecker permissionChecker=PermissionCheckerFactoryUtil.create(user);
  PermissionThreadLocal.setPermissionChecker(permissionChecker);
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setCompanyId(user.getCompanyId());
  serviceContext.setPathMain(PortalUtil.getPathMain());
  serviceContext.setSignedIn(!user.isDefaultUser());
  serviceContext.setUserId(user.getUserId());
  Map<String,Serializable> attributes=new HashMap<String,Serializable>();
  for (  Map.Entry<String,String[]> entry : parameterMap.entrySet()) {
    String param=entry.getKey();
    String[] values=entry.getValue();
    if (ArrayUtil.isNotEmpty(values)) {
      if (values.length == 1) {
        attributes.put(param,values[0]);
      }
 else {
        attributes.put(param,values);
      }
    }
  }
  serviceContext.setAttributes(attributes);
  ServiceContextThreadLocal.pushServiceContext(serviceContext);
  try {
    if (layoutIdMap == null) {
      StagingUtil.publishLayouts(userId,sourceGroupId,targetGroupId,privateLayout,parameterMap,startDate,endDate);
    }
 else {
      StagingUtil.publishLayouts(userId,sourceGroupId,targetGroupId,privateLayout,layoutIdMap,parameterMap,startDate,endDate);
    }
  }
  finally {
    PrincipalThreadLocal.setName(null);
    PermissionThreadLocal.setPermissionChecker(null);
  }
}
