{
  LayoutsLocalPublisherRequest publisherRequest=(LayoutsLocalPublisherRequest)message.getPayload();
  messageStatus.setPayload(publisherRequest);
  String command=publisherRequest.getCommand();
  long userId=publisherRequest.getUserId();
  long sourceGroupId=publisherRequest.getSourceGroupId();
  long targetGroupId=publisherRequest.getTargetGroupId();
  boolean privateLayout=publisherRequest.isPrivateLayout();
  Map<Long,Boolean> layoutIdMap=publisherRequest.getLayoutIdMap();
  Map<String,String[]> parameterMap=publisherRequest.getParameterMap();
  Date startDate=publisherRequest.getStartDate();
  Date endDate=publisherRequest.getEndDate();
  String range=MapUtil.getString(parameterMap,"range");
  if (range.equals("fromLastPublishDate")) {
    LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(sourceGroupId,privateLayout);
    long lastPublishDate=GetterUtil.getLong(layoutSet.getSettingsProperty("last-publish-date"));
    if (lastPublishDate > 0) {
      endDate=new Date();
      startDate=new Date(lastPublishDate);
    }
  }
 else   if (range.equals("last")) {
    int last=MapUtil.getInteger(parameterMap,"last");
    if (last > 0) {
      Date scheduledFireTime=publisherRequest.getScheduledFireTime();
      startDate=new Date(scheduledFireTime.getTime() - (last * Time.HOUR));
      endDate=scheduledFireTime;
    }
  }
  PrincipalThreadLocal.setName(userId);
  User user=UserLocalServiceUtil.getUserById(userId);
  PermissionChecker permissionChecker=PermissionCheckerFactoryUtil.create(user);
  PermissionThreadLocal.setPermissionChecker(permissionChecker);
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setCompanyId(user.getCompanyId());
  serviceContext.setPathMain(PortalUtil.getPathMain());
  serviceContext.setSignedIn(!user.isDefaultUser());
  serviceContext.setUserId(user.getUserId());
  Map<String,Serializable> attributes=new HashMap<String,Serializable>();
  for (  Map.Entry<String,String[]> entry : parameterMap.entrySet()) {
    String param=entry.getKey();
    String[] values=entry.getValue();
    if ((values != null) && (values.length > 0)) {
      if (values.length == 1) {
        attributes.put(param,values[0]);
      }
 else {
        attributes.put(param,values);
      }
    }
  }
  serviceContext.setAttributes(attributes);
  ServiceContextThreadLocal.pushServiceContext(serviceContext);
  try {
    if (command.equals(LayoutsLocalPublisherRequest.COMMAND_ALL_PAGES)) {
      StagingUtil.publishLayouts(userId,sourceGroupId,targetGroupId,privateLayout,parameterMap,startDate,endDate);
    }
 else     if (command.equals(LayoutsLocalPublisherRequest.COMMAND_SELECTED_PAGES)) {
      StagingUtil.publishLayouts(userId,sourceGroupId,targetGroupId,privateLayout,layoutIdMap,parameterMap,startDate,endDate);
    }
  }
  finally {
    PrincipalThreadLocal.setName(null);
    PermissionThreadLocal.setPermissionChecker(null);
  }
}
