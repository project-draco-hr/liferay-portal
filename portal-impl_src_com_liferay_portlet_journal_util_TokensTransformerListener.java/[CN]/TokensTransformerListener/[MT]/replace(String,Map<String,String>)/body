{
  if (tokens.isEmpty()) {
    return s;
  }
  List<String> escapedKeysList=null;
  List<String> escapedValuesList=null;
  List<String> keysList=null;
  List<String> valuesList=null;
  List<String> tempEscapedKeysList=null;
  List<String> tempEscapedValuesList=null;
  boolean hasKey=false;
  for (  Map.Entry<String,String> entry : tokens.entrySet()) {
    String key=entry.getKey();
    if (Validator.isNotNull(key) && s.contains(key)) {
      if (!hasKey) {
        escapedKeysList=new ArrayList<String>();
        escapedValuesList=new ArrayList<String>();
        keysList=new ArrayList<String>();
        valuesList=new ArrayList<String>();
        tempEscapedKeysList=new ArrayList<String>();
        tempEscapedValuesList=new ArrayList<String>();
        hasKey=true;
      }
      String actualKey=StringPool.AT.concat(key).concat(StringPool.AT);
      String escapedKey=StringPool.AT.concat(actualKey).concat(StringPool.AT);
      String tempEscapedKey=TEMP_ESCAPED_AT_OPEN.concat(key).concat(TEMP_ESCAPED_AT_CLOSE);
      escapedKeysList.add(escapedKey);
      escapedValuesList.add(tempEscapedKey);
      keysList.add(actualKey);
      valuesList.add(GetterUtil.getString(entry.getValue()));
      tempEscapedKeysList.add(tempEscapedKey);
      tempEscapedValuesList.add(actualKey);
    }
  }
  if (!hasKey) {
    return s;
  }
  s=StringUtil.replace(s,escapedKeysList.toArray(new String[escapedKeysList.size()]),escapedValuesList.toArray(new String[escapedValuesList.size()]));
  s=StringUtil.replace(s,keysList.toArray(new String[keysList.size()]),valuesList.toArray(new String[valuesList.size()]));
  s=StringUtil.replace(s,tempEscapedKeysList.toArray(new String[tempEscapedKeysList.size()]),tempEscapedValuesList.toArray(new String[tempEscapedValuesList.size()]));
  return s;
}
