{
  long pk=nextLong();
  ShoppingItemPrice newShoppingItemPrice=_persistence.create(pk);
  newShoppingItemPrice.setItemId(nextLong());
  newShoppingItemPrice.setMinQuantity(nextInt());
  newShoppingItemPrice.setMaxQuantity(nextInt());
  newShoppingItemPrice.setPrice(nextDouble());
  newShoppingItemPrice.setDiscount(nextDouble());
  newShoppingItemPrice.setTaxable(randomBoolean());
  newShoppingItemPrice.setShipping(nextDouble());
  newShoppingItemPrice.setUseShippingFormula(randomBoolean());
  newShoppingItemPrice.setStatus(nextInt());
  _persistence.update(newShoppingItemPrice,false);
  ShoppingItemPrice existingShoppingItemPrice=_persistence.findByPrimaryKey(newShoppingItemPrice.getPrimaryKey());
  assertEquals(existingShoppingItemPrice.getItemPriceId(),newShoppingItemPrice.getItemPriceId());
  assertEquals(existingShoppingItemPrice.getItemId(),newShoppingItemPrice.getItemId());
  assertEquals(existingShoppingItemPrice.getMinQuantity(),newShoppingItemPrice.getMinQuantity());
  assertEquals(existingShoppingItemPrice.getMaxQuantity(),newShoppingItemPrice.getMaxQuantity());
  assertEquals(existingShoppingItemPrice.getPrice(),newShoppingItemPrice.getPrice());
  assertEquals(existingShoppingItemPrice.getDiscount(),newShoppingItemPrice.getDiscount());
  assertEquals(existingShoppingItemPrice.getTaxable(),newShoppingItemPrice.getTaxable());
  assertEquals(existingShoppingItemPrice.getShipping(),newShoppingItemPrice.getShipping());
  assertEquals(existingShoppingItemPrice.getUseShippingFormula(),newShoppingItemPrice.getUseShippingFormula());
  assertEquals(existingShoppingItemPrice.getStatus(),newShoppingItemPrice.getStatus());
}
