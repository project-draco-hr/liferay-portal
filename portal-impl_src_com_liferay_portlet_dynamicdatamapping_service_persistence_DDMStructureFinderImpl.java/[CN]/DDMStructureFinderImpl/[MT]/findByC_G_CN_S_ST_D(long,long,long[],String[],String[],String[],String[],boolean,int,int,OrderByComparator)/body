{
  String[] classNameIdsValues=null;
  if (classNameIds == null) {
    classNameIdsValues=new String[]{null};
  }
 else {
    classNameIdsValues=StringUtil.split(StringUtil.merge(classNameIds));
  }
  structureKeys=CustomSQLUtil.keywords(structureKeys,false);
  names=CustomSQLUtil.keywords(names);
  descriptions=CustomSQLUtil.keywords(descriptions,false);
  storageTypes=CustomSQLUtil.keywords(storageTypes,false);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_G_CN_S_ST_D);
    if (groupId <= 0) {
      sql=StringUtil.replace(sql,"(groupId = ?) AND","");
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"classNameId",StringPool.EQUAL,false,classNameIdsValues);
    sql=CustomSQLUtil.replaceKeywords(sql,"structureKey",StringPool.LIKE,false,structureKeys);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(name)",StringPool.LIKE,false,names);
    sql=CustomSQLUtil.replaceKeywords(sql,"description",StringPool.LIKE,false,descriptions);
    sql=CustomSQLUtil.replaceKeywords(sql,"storageType",StringPool.LIKE,true,storageTypes);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    if (orderByComparator != null) {
      String orderByFields=StringUtil.merge(orderByComparator.getOrderByFields(),StringPool.COMMA);
      sql=StringUtil.replace(sql,"structureId DESC",orderByFields.concat(" DESC"));
    }
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("DDMStructure",DDMStructureImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    qPos.add(groupId);
    qPos.add(classNameIdsValues,2);
    qPos.add(structureKeys,2);
    qPos.add(names,2);
    qPos.add(descriptions,2);
    qPos.add(storageTypes,2);
    return (List<DDMStructure>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
