{
  if (primaryKeys.isEmpty()) {
    return Collections.emptyMap();
  }
  Map<Serializable,UserIdMapper> map=new HashMap<Serializable,UserIdMapper>();
  if (primaryKeys.size() == 1) {
    Iterator<Serializable> iterator=primaryKeys.iterator();
    Serializable primaryKey=iterator.next();
    UserIdMapper userIdMapper=fetchByPrimaryKey(primaryKey);
    if (userIdMapper != null) {
      map.put(primaryKey,userIdMapper);
    }
    return map;
  }
  Set<Serializable> uncachedPrimaryKeys=null;
  for (  Serializable primaryKey : primaryKeys) {
    UserIdMapper userIdMapper=(UserIdMapper)entityCache.getResult(UserIdMapperModelImpl.ENTITY_CACHE_ENABLED,UserIdMapperImpl.class,primaryKey);
    if (userIdMapper == null) {
      if (uncachedPrimaryKeys == null) {
        uncachedPrimaryKeys=new HashSet<Serializable>();
      }
      uncachedPrimaryKeys.add(primaryKey);
    }
 else {
      map.put(primaryKey,userIdMapper);
    }
  }
  if (uncachedPrimaryKeys == null) {
    return map;
  }
  StringBundler query=new StringBundler((uncachedPrimaryKeys.size() * 2) + 1);
  query.append(_SQL_SELECT_USERIDMAPPER_WHERE_PKS_IN);
  for (  Serializable primaryKey : uncachedPrimaryKeys) {
    query.append(String.valueOf(primaryKey));
    query.append(StringPool.COMMA);
  }
  query.setIndex(query.index() - 1);
  query.append(StringPool.CLOSE_PARENTHESIS);
  String sql=query.toString();
  Session session=null;
  try {
    session=openSession();
    Query q=session.createQuery(sql);
    for (    UserIdMapper userIdMapper : (List<UserIdMapper>)q.list()) {
      map.put(userIdMapper.getPrimaryKeyObj(),userIdMapper);
      cacheResult(userIdMapper);
      uncachedPrimaryKeys.remove(userIdMapper.getPrimaryKeyObj());
    }
    for (    Serializable primaryKey : uncachedPrimaryKeys) {
      entityCache.putResult(UserIdMapperModelImpl.ENTITY_CACHE_ENABLED,UserIdMapperImpl.class,primaryKey,_nullUserIdMapper);
    }
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
  return map;
}
