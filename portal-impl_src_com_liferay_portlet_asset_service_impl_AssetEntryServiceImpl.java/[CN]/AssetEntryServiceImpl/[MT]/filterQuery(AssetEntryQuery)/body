{
  ThreadLocalCache<Object[]> threadLocalCache=ThreadLocalCacheManager.getThreadLocalCache(Lifecycle.REQUEST,AssetEntryServiceImpl.class.getName());
  String key=entryQuery.toString();
  Object[] results=threadLocalCache.get(key);
  if (results != null) {
    return results;
  }
  int end=entryQuery.getEnd();
  int start=entryQuery.getStart();
  if (entryQuery.isEnablePermissions()) {
    entryQuery.setEnd(end + PropsValues.ASSET_FILTER_SEARCH_LIMIT);
    entryQuery.setStart(0);
  }
  List<AssetEntry> entries=assetEntryLocalService.getEntries(entryQuery);
  List<AssetEntry> filteredEntries=null;
  int length=0;
  if (entryQuery.isEnablePermissions()) {
    PermissionChecker permissionChecker=getPermissionChecker();
    filteredEntries=new ArrayList<AssetEntry>();
    for (    AssetEntry entry : entries) {
      String className=entry.getClassName();
      long classPK=entry.getClassPK();
      AssetRendererFactory assetRendererFactory=AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);
      try {
        if (assetRendererFactory.hasPermission(permissionChecker,classPK,ActionKeys.VIEW)) {
          filteredEntries.add(entry);
        }
      }
 catch (      Exception e) {
      }
      if (filteredEntries.size() > end) {
        break;
      }
    }
    length=filteredEntries.size();
    if ((end != QueryUtil.ALL_POS) && (start != QueryUtil.ALL_POS)) {
      if (end > length) {
        end=length;
      }
      if (start > length) {
        start=length;
      }
      filteredEntries=filteredEntries.subList(start,end);
    }
    entryQuery.setEnd(end);
    entryQuery.setStart(start);
  }
 else {
    filteredEntries=entries;
    length=entries.size();
  }
  results=new Object[]{filteredEntries,length};
  threadLocalCache.put(key,results);
  return results;
}
