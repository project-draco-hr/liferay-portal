{
  ObjectInputStream objectInputStream=null;
  ObjectOutputStream objectOutputStream=null;
  try {
    objectInputStream=new BackwardCompatibleObjectInputStream(jobData.getBinaryStream());
    Map<Object,Object> jobDataMap=(Map<Object,Object>)objectInputStream.readObject();
    Object object=jobDataMap.get(SchedulerEngine.MESSAGE);
    if ((object == null) || (object instanceof String)) {
      return false;
    }
    Message message=null;
    if (object instanceof Message) {
      message=(Message)object;
    }
 else {
      message=new Message();
      message.setPayload(object);
    }
    String messageJSON=JSONFactoryUtil.serialize(message);
    jobDataMap.put(SchedulerEngine.MESSAGE,messageJSON);
    objectOutputStream=new ObjectOutputStream(jobData.setBinaryStream(1));
    objectOutputStream.writeObject(jobDataMap);
    return true;
  }
  finally {
    if (objectInputStream != null) {
      objectInputStream.close();
    }
    if (objectOutputStream != null) {
      objectOutputStream.close();
    }
  }
}
