{
  if (trigger == null) {
    return null;
  }
  Date endDate=trigger.getEndDate();
  String jobName=fixMaxLength(trigger.getJobName(),_jobNameMaxLength,storageType);
  String groupName=fixMaxLength(trigger.getGroupName(),_groupNameMaxLength,storageType);
  Date startDate=trigger.getStartDate();
  if (startDate == null) {
    startDate=new Date(System.currentTimeMillis());
  }
  Trigger quartzTrigger=null;
  TriggerType triggerType=trigger.getTriggerType();
  if (triggerType.equals(TriggerType.CRON)) {
    TriggerBuilder<Trigger> triggerBuilder=TriggerBuilder.newTrigger();
    triggerBuilder.endAt(endDate);
    triggerBuilder.forJob(jobName,groupName);
    triggerBuilder.startAt(startDate);
    triggerBuilder.withIdentity(jobName,groupName);
    CronScheduleBuilder cronScheduleBuilder=CronScheduleBuilder.cronSchedule((String)trigger.getTriggerContent());
    triggerBuilder.withSchedule(cronScheduleBuilder);
    quartzTrigger=triggerBuilder.build();
  }
 else   if (triggerType.equals(TriggerType.SIMPLE)) {
    ObjectValuePair<Long,TimeUnit> triggerContent=(ObjectValuePair<Long,TimeUnit>)trigger.getTriggerContent();
    long interval=triggerContent.getKey();
    TimeUnit timeUnit=triggerContent.getValue();
    if (interval < 0) {
      if (_log.isWarnEnabled()) {
        _log.warn("Not scheduling " + trigger.getJobName() + " because interval is less than 0");
      }
      return null;
    }
    TriggerBuilder<Trigger> triggerBuilder=TriggerBuilder.newTrigger();
    triggerBuilder.endAt(endDate);
    triggerBuilder.forJob(jobName,groupName);
    triggerBuilder.startAt(startDate);
    triggerBuilder.withIdentity(jobName,groupName);
    if (interval > 0) {
      CalendarIntervalScheduleBuilder calendarIntervalScheduleBuilder=CalendarIntervalScheduleBuilder.calendarIntervalSchedule();
switch (timeUnit) {
case SECOND:
        calendarIntervalScheduleBuilder.withIntervalInSeconds((int)interval);
      break;
case MINUTE:
    calendarIntervalScheduleBuilder.withIntervalInMinutes((int)interval);
  break;
case HOUR:
calendarIntervalScheduleBuilder.withIntervalInHours((int)interval);
break;
case DAY:
calendarIntervalScheduleBuilder.withIntervalInDays((int)interval);
break;
case WEEK:
calendarIntervalScheduleBuilder.withIntervalInWeeks((int)interval);
break;
case MONTH:
calendarIntervalScheduleBuilder.withIntervalInMonths((int)interval);
break;
case YEAR:
calendarIntervalScheduleBuilder.withIntervalInYears((int)interval);
break;
}
triggerBuilder.withSchedule(calendarIntervalScheduleBuilder);
}
quartzTrigger=triggerBuilder.build();
}
 else {
throw new SchedulerException("Unknown trigger type " + trigger.getTriggerType());
}
return quartzTrigger;
}
