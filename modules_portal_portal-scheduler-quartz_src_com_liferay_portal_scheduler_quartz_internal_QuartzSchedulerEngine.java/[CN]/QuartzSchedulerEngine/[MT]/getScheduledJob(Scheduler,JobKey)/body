{
  JobDetail jobDetail=scheduler.getJobDetail(jobKey);
  if (jobDetail == null) {
    return null;
  }
  JobDataMap jobDataMap=jobDetail.getJobDataMap();
  String description=jobDataMap.getString(SchedulerEngine.DESCRIPTION);
  String destinationName=jobDataMap.getString(SchedulerEngine.DESTINATION_NAME);
  Message message=getMessage(jobDataMap);
  JobState jobState=getJobState(jobDataMap);
  StorageType storageType=StorageType.valueOf(jobDataMap.getString(SchedulerEngine.STORAGE_TYPE));
  message.put(SchedulerEngine.JOB_STATE,jobState);
  SchedulerResponse schedulerResponse=new SchedulerResponse();
  schedulerResponse.setDescription(description);
  schedulerResponse.setDestinationName(destinationName);
  schedulerResponse.setMessage(message);
  schedulerResponse.setStorageType(storageType);
  String jobName=jobKey.getName();
  String groupName=jobKey.getGroup();
  TriggerKey triggerKey=new TriggerKey(jobName,groupName);
  Trigger trigger=scheduler.getTrigger(triggerKey);
  if (trigger == null) {
    schedulerResponse.setGroupName(groupName);
    schedulerResponse.setJobName(jobName);
    return schedulerResponse;
  }
  message.put(SchedulerEngine.END_TIME,trigger.getEndTime());
  message.put(SchedulerEngine.FINAL_FIRE_TIME,trigger.getFinalFireTime());
  message.put(SchedulerEngine.NEXT_FIRE_TIME,trigger.getNextFireTime());
  message.put(SchedulerEngine.PREVIOUS_FIRE_TIME,trigger.getPreviousFireTime());
  message.put(SchedulerEngine.START_TIME,trigger.getStartTime());
  if (trigger instanceof CalendarIntervalTrigger) {
    CalendarIntervalTrigger calendarIntervalTrigger=CalendarIntervalTrigger.class.cast(trigger);
    IntervalUnit intervalUnit=calendarIntervalTrigger.getRepeatIntervalUnit();
    schedulerResponse.setTrigger(new IntervalTrigger(jobName,groupName,calendarIntervalTrigger.getStartTime(),calendarIntervalTrigger.getEndTime(),calendarIntervalTrigger.getRepeatInterval(),TimeUnit.valueOf(intervalUnit.name())));
  }
 else   if (trigger instanceof CronTrigger) {
    CronTrigger cronTrigger=CronTrigger.class.cast(trigger);
    schedulerResponse.setTrigger(new com.liferay.portal.kernel.scheduler.CronTrigger(jobName,groupName,cronTrigger.getStartTime(),cronTrigger.getEndTime(),cronTrigger.getCronExpression()));
  }
 else   if (trigger instanceof SimpleTrigger) {
    SimpleTrigger simpleTrigger=SimpleTrigger.class.cast(trigger);
    schedulerResponse.setTrigger(new IntervalTrigger(jobName,groupName,simpleTrigger.getStartTime(),simpleTrigger.getEndTime(),(int)simpleTrigger.getRepeatInterval(),TimeUnit.MILLISECOND));
  }
  return schedulerResponse;
}
