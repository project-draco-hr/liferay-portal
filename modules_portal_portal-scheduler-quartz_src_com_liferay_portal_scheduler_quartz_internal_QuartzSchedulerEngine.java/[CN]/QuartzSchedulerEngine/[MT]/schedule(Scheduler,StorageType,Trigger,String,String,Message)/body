{
  if (_jsonFactory == null) {
    throw new IllegalStateException("JSON Factory not initialized");
  }
  try {
    JobBuilder jobBuilder=JobBuilder.newJob(MessageSenderJob.class);
    jobBuilder.withIdentity(trigger.getJobKey());
    jobBuilder.storeDurably();
    JobDetail jobDetail=jobBuilder.build();
    JobDataMap jobDataMap=jobDetail.getJobDataMap();
    jobDataMap.put(SchedulerEngine.DESCRIPTION,description);
    jobDataMap.put(SchedulerEngine.DESTINATION_NAME,destinationName);
    jobDataMap.put(SchedulerEngine.MESSAGE,_jsonFactory.serialize(message));
    jobDataMap.put(SchedulerEngine.STORAGE_TYPE,storageType.toString());
    JobState jobState=new JobState(TriggerState.NORMAL,message.getInteger(SchedulerEngine.EXCEPTIONS_MAX_SIZE));
    jobDataMap.put(SchedulerEngine.JOB_STATE,JobStateSerializeUtil.serialize(jobState));
    unregisterMessageListener(scheduler,trigger.getJobKey());
synchronized (this) {
      scheduler.deleteJob(trigger.getJobKey());
      scheduler.scheduleJob(jobDetail,trigger);
    }
  }
 catch (  ObjectAlreadyExistsException oaee) {
    if (_log.isInfoEnabled()) {
      _log.info("Message is already scheduled");
    }
  }
}
