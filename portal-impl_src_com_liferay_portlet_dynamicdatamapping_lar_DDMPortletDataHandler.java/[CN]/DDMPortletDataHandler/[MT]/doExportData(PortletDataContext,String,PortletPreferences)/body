{
  portletDataContext.addPermissions("com.liferay.portlet.dynamicdatamapping",portletDataContext.getScopeGroupId());
  Element rootElement=addExportRootElement();
  rootElement.addAttribute("group-id",String.valueOf(portletDataContext.getScopeGroupId()));
  final Element structuresElement=rootElement.addElement("structures");
  ActionableDynamicQuery structuresActionableDynamicQuery=new DDLRecordSetActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
    }
    @Override protected void performAction(    Object object) throws PortalException {
      DDMStructure structure=(DDMStructure)object;
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,structuresElement,structure);
    }
  }
;
  structuresActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  structuresActionableDynamicQuery.performActions();
  final Element templatesElement=rootElement.addElement("templates");
  ActionableDynamicQuery templatesActionableDynamicQuery=new DDLRecordSetActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      portletDataContext.addDateRangeCriteria(dynamicQuery,"modifiedDate");
    }
    @Override protected void performAction(    Object object) throws PortalException {
      DDMTemplate template=(DDMTemplate)object;
      StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,templatesElement,template);
    }
  }
;
  templatesActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());
  templatesActionableDynamicQuery.performActions();
  return rootElement.formattedString();
}
