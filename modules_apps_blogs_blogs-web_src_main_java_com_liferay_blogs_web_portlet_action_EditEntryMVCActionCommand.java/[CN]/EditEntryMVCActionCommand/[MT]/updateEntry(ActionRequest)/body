{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long entryId=ParamUtil.getLong(actionRequest,"entryId");
  String title=ParamUtil.getString(actionRequest,"title");
  String subtitle=ParamUtil.getString(actionRequest,"subtitle");
  String description=StringPool.BLANK;
  boolean customAbstract=ParamUtil.getBoolean(actionRequest,"customAbstract");
  if (customAbstract) {
    description=ParamUtil.getString(actionRequest,"description");
    if (Validator.isNull(description)) {
      throw new EntryDescriptionException();
    }
  }
  String content=ParamUtil.getString(actionRequest,"content");
  int displayDateMonth=ParamUtil.getInteger(actionRequest,"displayDateMonth");
  int displayDateDay=ParamUtil.getInteger(actionRequest,"displayDateDay");
  int displayDateYear=ParamUtil.getInteger(actionRequest,"displayDateYear");
  int displayDateHour=ParamUtil.getInteger(actionRequest,"displayDateHour");
  int displayDateMinute=ParamUtil.getInteger(actionRequest,"displayDateMinute");
  int displayDateAmPm=ParamUtil.getInteger(actionRequest,"displayDateAmPm");
  if (displayDateAmPm == Calendar.PM) {
    displayDateHour+=12;
  }
  boolean allowPingbacks=ParamUtil.getBoolean(actionRequest,"allowPingbacks");
  boolean allowTrackbacks=ParamUtil.getBoolean(actionRequest,"allowTrackbacks");
  String[] trackbacks=StringUtil.split(ParamUtil.getString(actionRequest,"trackbacks"));
  long coverImageFileEntryId=ParamUtil.getLong(actionRequest,"coverImageFileEntryId");
  String coverImageURL=ParamUtil.getString(actionRequest,"coverImageURL");
  String coverImageFileEntryCropRegion=ParamUtil.getString(actionRequest,"coverImageFileEntryCropRegion");
  String coverImageCaption=ParamUtil.getString(actionRequest,"coverImageCaption");
  long oldCoverImageId=0;
  String oldCoverImageURL=StringPool.BLANK;
  long oldSmallImageId=0;
  String oldSmallImageURL=StringPool.BLANK;
  if (entryId != 0) {
    BlogsEntry entry=_blogsEntryLocalService.getBlogsEntry(entryId);
    oldCoverImageId=entry.getCoverImageFileEntryId();
    oldCoverImageURL=entry.getCoverImageURL();
    oldSmallImageId=entry.getSmallImageId();
    oldSmallImageURL=entry.getSmallImageURL();
  }
  ImageSelector coverImageImageSelector=null;
  boolean coverImageTempFile=false;
  if (coverImageFileEntryId != oldCoverImageId) {
    if (coverImageFileEntryId != 0) {
      FileEntry coverImageFileEntry=PortletFileRepositoryUtil.getPortletFileEntry(coverImageFileEntryId);
      coverImageTempFile=coverImageFileEntry.isRepositoryCapabilityProvided(TemporaryFileEntriesCapability.class);
      coverImageImageSelector=new ImageSelector(FileUtil.getBytes(coverImageFileEntry.getContentStream()),coverImageFileEntry.getTitle(),coverImageFileEntry.getMimeType(),coverImageFileEntryCropRegion);
    }
 else {
      coverImageImageSelector=new ImageSelector();
    }
  }
 else   if (!coverImageURL.equals(oldCoverImageURL)) {
    coverImageImageSelector=new ImageSelector(coverImageURL);
  }
  long smallImageFileEntryId=ParamUtil.getLong(actionRequest,"smallImageFileEntryId");
  String smallImageURL=ParamUtil.getString(actionRequest,"smallImageURL");
  ImageSelector smallImageImageSelector=null;
  boolean smallImageTempFile=false;
  if (smallImageFileEntryId != oldSmallImageId) {
    if (smallImageFileEntryId != 0) {
      FileEntry smallImageFileEntry=PortletFileRepositoryUtil.getPortletFileEntry(smallImageFileEntryId);
      smallImageTempFile=smallImageFileEntry.isRepositoryCapabilityProvided(TemporaryFileEntriesCapability.class);
      smallImageImageSelector=new ImageSelector(FileUtil.getBytes(smallImageFileEntry.getContentStream()),smallImageFileEntry.getTitle(),smallImageFileEntry.getMimeType(),StringPool.BLANK);
    }
 else {
      smallImageImageSelector=new ImageSelector();
    }
  }
 else   if (!smallImageURL.equals(oldSmallImageURL)) {
    smallImageImageSelector=new ImageSelector(smallImageURL);
  }
  ServiceContext serviceContext=ServiceContextFactory.getInstance(BlogsEntry.class.getName(),actionRequest);
  BlogsEntry entry=null;
  String oldUrlTitle=StringPool.BLANK;
  List<BlogsEntryAttachmentFileEntryReference> blogsEntryAttachmentFileEntryReferences=new ArrayList<>();
  if (entryId <= 0) {
    entry=_blogsEntryService.addEntry(title,subtitle,description,content,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,coverImageCaption,coverImageImageSelector,smallImageImageSelector,serviceContext);
    BlogsEntryAttachmentFileEntryHelper blogsEntryAttachmentFileEntryHelper=new BlogsEntryAttachmentFileEntryHelper();
    List<FileEntry> tempBlogsEntryAttachments=blogsEntryAttachmentFileEntryHelper.getTempBlogsEntryAttachmentFileEntries(content);
    if (!tempBlogsEntryAttachments.isEmpty()) {
      Folder folder=_blogsEntryLocalService.addAttachmentsFolder(themeDisplay.getUserId(),entry.getGroupId());
      blogsEntryAttachmentFileEntryReferences=blogsEntryAttachmentFileEntryHelper.addBlogsEntryAttachmentFileEntries(entry.getGroupId(),themeDisplay.getUserId(),entry.getEntryId(),folder.getFolderId(),tempBlogsEntryAttachments);
      content=blogsEntryAttachmentFileEntryHelper.updateContent(content,blogsEntryAttachmentFileEntryReferences);
      entry.setContent(content);
      _blogsEntryLocalService.updateBlogsEntry(entry);
    }
    for (    FileEntry tempBlogsEntryAttachment : tempBlogsEntryAttachments) {
      PortletFileRepositoryUtil.deletePortletFileEntry(tempBlogsEntryAttachment.getFileEntryId());
    }
  }
 else {
    boolean sendEmailEntryUpdated=ParamUtil.getBoolean(actionRequest,"sendEmailEntryUpdated");
    serviceContext.setAttribute("sendEmailEntryUpdated",sendEmailEntryUpdated);
    String emailEntryUpdatedComment=ParamUtil.getString(actionRequest,"emailEntryUpdatedComment");
    serviceContext.setAttribute("emailEntryUpdatedComment",emailEntryUpdatedComment);
    entry=_blogsEntryLocalService.getEntry(entryId);
    String tempOldUrlTitle=entry.getUrlTitle();
    BlogsEntryAttachmentFileEntryHelper blogsEntryAttachmentHelper=new BlogsEntryAttachmentFileEntryHelper();
    List<FileEntry> tempBlogsEntryAttachmentFileEntries=blogsEntryAttachmentHelper.getTempBlogsEntryAttachmentFileEntries(content);
    if (!tempBlogsEntryAttachmentFileEntries.isEmpty()) {
      Folder folder=_blogsEntryLocalService.addAttachmentsFolder(themeDisplay.getUserId(),entry.getGroupId());
      blogsEntryAttachmentFileEntryReferences=blogsEntryAttachmentHelper.addBlogsEntryAttachmentFileEntries(entry.getGroupId(),themeDisplay.getUserId(),entry.getEntryId(),folder.getFolderId(),tempBlogsEntryAttachmentFileEntries);
      content=blogsEntryAttachmentHelper.updateContent(content,blogsEntryAttachmentFileEntryReferences);
    }
    entry=_blogsEntryService.updateEntry(entryId,title,subtitle,description,content,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,coverImageCaption,coverImageImageSelector,smallImageImageSelector,serviceContext);
    for (    FileEntry tempBlogsEntryAttachmentFileEntry : tempBlogsEntryAttachmentFileEntries) {
      PortletFileRepositoryUtil.deletePortletFileEntry(tempBlogsEntryAttachmentFileEntry.getFileEntryId());
    }
    if (!tempOldUrlTitle.equals(entry.getUrlTitle())) {
      oldUrlTitle=tempOldUrlTitle;
    }
  }
  if (coverImageTempFile) {
    _blogsEntryLocalService.addOriginalImageFileEntry(themeDisplay.getUserId(),entry.getGroupId(),entry.getEntryId(),coverImageImageSelector);
    PortletFileRepositoryUtil.deletePortletFileEntry(coverImageFileEntryId);
  }
  if (smallImageTempFile) {
    _blogsEntryLocalService.addOriginalImageFileEntry(themeDisplay.getUserId(),entry.getGroupId(),entry.getEntryId(),smallImageImageSelector);
    PortletFileRepositoryUtil.deletePortletFileEntry(smallImageFileEntryId);
  }
  return new Object[]{entry,oldUrlTitle,blogsEntryAttachmentFileEntryReferences};
}
