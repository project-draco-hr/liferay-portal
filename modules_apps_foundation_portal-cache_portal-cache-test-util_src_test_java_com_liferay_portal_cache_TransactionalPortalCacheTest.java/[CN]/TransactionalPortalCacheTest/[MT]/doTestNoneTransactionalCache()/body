{
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _transactionalPortalCache.put(_KEY_2,_VALUE_2);
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(1);
  _testCacheListener.assertPut(_KEY_2,_VALUE_2);
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(1);
  _testCacheReplicator.assertPut(_KEY_2,_VALUE_2);
  _testCacheReplicator.reset();
  _transactionalPortalCache.put(_KEY_1,_VALUE_2,10);
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(1);
  _testCacheListener.assertUpdated(_KEY_1,_VALUE_2,10);
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(1);
  _testCacheReplicator.assertUpdated(_KEY_1,_VALUE_2,10);
  _testCacheReplicator.reset();
  try {
    _transactionalPortalCache.put(_KEY_1,_VALUE_2,-1);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Time to live is negative",iae.getMessage());
  }
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(0);
  _testCacheReplicator.assertActionsCount(0);
  PortalCacheHelperUtil.putWithoutReplicator(_transactionalPortalCache,_KEY_1,_VALUE_1);
  Assert.assertEquals(_VALUE_1,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_1,_portalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(1);
  _testCacheListener.assertUpdated(_KEY_1,_VALUE_1);
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(0);
  PortalCacheHelperUtil.putWithoutReplicator(_transactionalPortalCache,_KEY_1,_VALUE_2,10);
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(1);
  _testCacheListener.assertUpdated(_KEY_1,_VALUE_2,10);
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(0);
  _transactionalPortalCache.remove(_KEY_1);
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertEquals(_VALUE_2,_portalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(1);
  _testCacheListener.assertRemoved(_KEY_1,_VALUE_2);
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(1);
  _testCacheReplicator.assertRemoved(_KEY_1,_VALUE_2);
  _testCacheReplicator.reset();
  PortalCacheHelperUtil.removeWithoutReplicator(_transactionalPortalCache,_KEY_2);
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(1);
  _testCacheListener.assertRemoved(_KEY_2,_VALUE_2);
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(0);
  _transactionalPortalCache.put(_KEY_1,_VALUE_1);
  _transactionalPortalCache.put(_KEY_2,_VALUE_2);
  _transactionalPortalCache.removeAll();
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(3);
  _testCacheListener.assertPut(_KEY_1,_VALUE_1);
  _testCacheListener.assertPut(_KEY_2,_VALUE_2);
  _testCacheListener.assertRemoveAll();
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(3);
  _testCacheReplicator.assertPut(_KEY_1,_VALUE_1);
  _testCacheReplicator.assertPut(_KEY_2,_VALUE_2);
  _testCacheReplicator.assertRemoveAll();
  _testCacheReplicator.reset();
  _transactionalPortalCache.put(_KEY_1,_VALUE_1);
  _transactionalPortalCache.put(_KEY_2,_VALUE_2);
  PortalCacheHelperUtil.removeAllWithoutReplicator(_transactionalPortalCache);
  Assert.assertNull(_transactionalPortalCache.get(_KEY_1));
  Assert.assertNull(_transactionalPortalCache.get(_KEY_2));
  Assert.assertNull(_portalCache.get(_KEY_1));
  Assert.assertNull(_portalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(3);
  _testCacheListener.assertPut(_KEY_1,_VALUE_1);
  _testCacheListener.assertPut(_KEY_2,_VALUE_2);
  _testCacheListener.assertRemoveAll();
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(2);
  _testCacheReplicator.assertPut(_KEY_1,_VALUE_1);
  _testCacheReplicator.assertPut(_KEY_2,_VALUE_2);
  _testCacheReplicator.reset();
}
