{
  RepositoryEntryCacheModel repositoryEntryCacheModel=new RepositoryEntryCacheModel();
  repositoryEntryCacheModel.mvccVersion=getMvccVersion();
  repositoryEntryCacheModel.uuid=getUuid();
  String uuid=repositoryEntryCacheModel.uuid;
  if ((uuid != null) && (uuid.length() == 0)) {
    repositoryEntryCacheModel.uuid=null;
  }
  repositoryEntryCacheModel.repositoryEntryId=getRepositoryEntryId();
  repositoryEntryCacheModel.groupId=getGroupId();
  repositoryEntryCacheModel.companyId=getCompanyId();
  repositoryEntryCacheModel.userId=getUserId();
  repositoryEntryCacheModel.userName=getUserName();
  String userName=repositoryEntryCacheModel.userName;
  if ((userName != null) && (userName.length() == 0)) {
    repositoryEntryCacheModel.userName=null;
  }
  Date createDate=getCreateDate();
  if (createDate != null) {
    repositoryEntryCacheModel.createDate=createDate.getTime();
  }
 else {
    repositoryEntryCacheModel.createDate=Long.MIN_VALUE;
  }
  Date modifiedDate=getModifiedDate();
  if (modifiedDate != null) {
    repositoryEntryCacheModel.modifiedDate=modifiedDate.getTime();
  }
 else {
    repositoryEntryCacheModel.modifiedDate=Long.MIN_VALUE;
  }
  repositoryEntryCacheModel.repositoryId=getRepositoryId();
  repositoryEntryCacheModel.mappedId=getMappedId();
  String mappedId=repositoryEntryCacheModel.mappedId;
  if ((mappedId != null) && (mappedId.length() == 0)) {
    repositoryEntryCacheModel.mappedId=null;
  }
  repositoryEntryCacheModel.manualCheckInRequired=getManualCheckInRequired();
  Date lastPublishDate=getLastPublishDate();
  if (lastPublishDate != null) {
    repositoryEntryCacheModel.lastPublishDate=lastPublishDate.getTime();
  }
 else {
    repositoryEntryCacheModel.lastPublishDate=Long.MIN_VALUE;
  }
  return repositoryEntryCacheModel;
}
