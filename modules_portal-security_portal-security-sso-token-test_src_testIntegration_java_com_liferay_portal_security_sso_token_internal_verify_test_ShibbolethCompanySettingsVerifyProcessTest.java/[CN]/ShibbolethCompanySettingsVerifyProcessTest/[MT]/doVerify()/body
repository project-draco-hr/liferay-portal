{
  super.doVerify();
  List<Company> companies=_companyLocalService.getCompanies(false);
  for (  Company company : companies) {
    long companyId=company.getCompanyId();
    PortletPreferences portletPreferences=_prefsProps.getPreferences(companyId,true);
    Assert.assertTrue(Validator.isNull(portletPreferences.getValue(LegacyTokenPropsKeys.SHIBBOLETH_AUTH_ENABLED,StringPool.BLANK)));
    Assert.assertTrue(Validator.isNull(portletPreferences.getValue(LegacyTokenPropsKeys.SHIBBOLETH_IMPORT_FROM_LDAP,StringPool.BLANK)));
    Assert.assertTrue(Validator.isNull(portletPreferences.getValue(LegacyTokenPropsKeys.SHIBBOLETH_LOGOUT_URL,StringPool.BLANK)));
    Assert.assertTrue(Validator.isNull(portletPreferences.getValue(LegacyTokenPropsKeys.SHIBBOLETH_USER_HEADER,StringPool.BLANK)));
    Settings settings;
    try {
      settings=getSettings(companyId);
    }
 catch (    SettingsException e) {
      throw new VerifyException(e);
    }
    Assert.assertNotNull(settings);
    Assert.assertTrue(GetterUtil.getBoolean(settings.getValue(TokenConstants.AUTH_ENABLED,StringPool.FALSE)));
    Assert.assertTrue(GetterUtil.getBoolean(settings.getValue(TokenConstants.IMPORT_FROM_LDAP,StringPool.FALSE)));
    Assert.assertEquals("/test/shibboleth/url",settings.getValue(TokenConstants.LOGOUT_REDIRECT_URL,StringPool.BLANK));
    Assert.assertEquals("testShibboleth",settings.getValue(TokenConstants.USER_HEADER,StringPool.BLANK));
  }
}
