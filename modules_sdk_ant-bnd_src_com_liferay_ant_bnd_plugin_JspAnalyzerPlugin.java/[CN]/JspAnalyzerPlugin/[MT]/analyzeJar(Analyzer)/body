{
  Parameters parameters=OSGiHeader.parseHeader(analyzer.getProperty("-jsp"));
  if (parameters.isEmpty()) {
    return false;
  }
  Instructions instructions=new Instructions(parameters);
  Jar jar=analyzer.getJar();
  Map<String,Resource> resources=jar.getResources();
  Set<String> keys=new HashSet<String>(resources.keySet());
  boolean matches=false;
  for (  String key : keys) {
    for (    Instruction instruction : instructions.keySet()) {
      if (instruction.matches(key)) {
        if (instruction.isNegated()) {
          break;
        }
        Resource resource=jar.getResource(key);
        String jsp=IO.collect(resource.openInputStream(),"UTF-8");
        addPackageImports(analyzer,jsp);
        addTaglibRequirements(analyzer,jsp);
        matches=true;
      }
    }
  }
  if (matches) {
    Packages packages=analyzer.getReferred();
    for (    String packageName : _REQUIRED_PACKAGES) {
      PackageRef packageRef=analyzer.getPackageRef(packageName);
      Matcher matcher=_packagePattern.matcher(packageRef.getFQN());
      if (matcher.matches() && !packages.containsKey(packageRef)) {
        packages.put(packageRef,new Attrs());
      }
    }
  }
  return false;
}
