{
  long leftPrimaryKey=1;
  long[] rightPrimaryKeys=_tableMapperImpl.getRightPrimaryKeys(leftPrimaryKey);
  Assert.assertEquals(0,rightPrimaryKeys.length);
  Assert.assertSame(rightPrimaryKeys,_tableMapperImpl.getRightPrimaryKeys(leftPrimaryKey));
  long rightPrimaryKey1=3;
  long rightPrimaryKey2=2;
  PortalCache<Long,long[]> leftToRightPortalCache=_tableMapperImpl.leftToRightPortalCache;
  leftToRightPortalCache.remove(leftPrimaryKey);
  _mappingStore.put(leftPrimaryKey,new long[]{rightPrimaryKey1,rightPrimaryKey2});
  rightPrimaryKeys=_tableMapperImpl.getRightPrimaryKeys(leftPrimaryKey);
  Assert.assertArrayEquals(new long[]{rightPrimaryKey2,rightPrimaryKey1},rightPrimaryKeys);
  leftToRightPortalCache.remove(leftPrimaryKey);
  MockGetRightPrimaryKeysSqlQuery mockGetRightPrimaryKeysByLeftPrimaryKeyMappingSqlQuery=(MockGetRightPrimaryKeysSqlQuery)_tableMapperImpl.getRightPrimaryKeysSqlQuery;
  mockGetRightPrimaryKeysByLeftPrimaryKeyMappingSqlQuery.setDatabaseError(true);
  try {
    _tableMapperImpl.getRightPrimaryKeys(leftPrimaryKey);
  }
 catch (  SystemException se) {
    Throwable cause=se.getCause();
    Assert.assertSame(RuntimeException.class,cause.getClass());
    Assert.assertEquals("Database error",cause.getMessage());
  }
 finally {
    mockGetRightPrimaryKeysByLeftPrimaryKeyMappingSqlQuery.setDatabaseError(false);
  }
}
