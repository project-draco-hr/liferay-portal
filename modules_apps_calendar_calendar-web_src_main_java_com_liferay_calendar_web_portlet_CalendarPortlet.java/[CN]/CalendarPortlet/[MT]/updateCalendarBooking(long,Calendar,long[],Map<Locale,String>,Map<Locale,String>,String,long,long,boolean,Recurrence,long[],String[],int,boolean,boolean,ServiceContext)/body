{
  CalendarBooking calendarBooking=null;
  TimeZone timeZone=TimeZoneUtil.getTimeZone(StringPool.UTC);
  if (!allDay) {
    timeZone=calendar.getTimeZone();
  }
  if (recurrence != null) {
    java.util.Calendar startTimeJCalendar=JCalendarUtil.getJCalendar(startTime,timeZone);
    recurrence=RecurrenceUtil.inTimeZone(recurrence,startTimeJCalendar,timeZone);
  }
  if (calendarBookingId <= 0) {
    calendarBooking=_calendarBookingService.addCalendarBooking(calendar.getCalendarId(),childCalendarIds,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,titleMap,descriptionMap,location,startTime,endTime,allDay,RecurrenceSerializer.serialize(recurrence),reminders[0],remindersType[0],reminders[1],remindersType[1],serviceContext);
  }
 else {
    if (updateInstance) {
      calendarBooking=_calendarBookingService.updateCalendarBookingInstance(calendarBookingId,instanceIndex,calendar.getCalendarId(),childCalendarIds,titleMap,descriptionMap,location,startTime,endTime,allDay,RecurrenceSerializer.serialize(recurrence),allFollowing,reminders[0],remindersType[0],reminders[1],remindersType[1],serviceContext);
    }
 else {
      calendarBooking=_calendarBookingService.getCalendarBookingInstance(calendarBookingId,instanceIndex);
      long duration=endTime - startTime;
      long offset=startTime - calendarBooking.getStartTime();
      calendarBooking=_calendarBookingService.getNewStartTimeAndDurationCalendarBooking(calendarBookingId,offset,duration);
      calendarBooking=getFirstCalendarBookingInstance(calendarBooking,recurrence,timeZone);
      calendarBooking=_calendarBookingService.updateCalendarBooking(calendarBookingId,calendar.getCalendarId(),childCalendarIds,titleMap,descriptionMap,location,calendarBooking.getStartTime(),calendarBooking.getEndTime(),allDay,RecurrenceSerializer.serialize(recurrence),reminders[0],remindersType[0],reminders[1],remindersType[1],serviceContext);
    }
  }
  return calendarBooking;
}
