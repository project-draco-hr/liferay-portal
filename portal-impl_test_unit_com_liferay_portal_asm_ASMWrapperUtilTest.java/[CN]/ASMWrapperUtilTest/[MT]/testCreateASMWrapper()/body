{
  Object asmWrapper=ASMWrapperUtil.createASMWrapper(ASMWrapperUtilTestInterface.class,new ASMWrapperUtilTestDefault(),new ASMWrapperUtilTestWrapper());
  Class<?> asmWrapperClass=asmWrapper.getClass();
  Assert.assertEquals(Modifier.PUBLIC,asmWrapperClass.getModifiers());
  Assert.assertEquals(ASMWrapperUtilTestInterface.class.getName() + "ASMWrapper",asmWrapperClass.getName());
  Assert.assertSame(Object.class,asmWrapperClass.getSuperclass());
  Method[] methods=asmWrapperClass.getDeclaredMethods();
  Assert.assertEquals(10,methods.length);
  Arrays.sort(methods,new Comparator<Method>(){
    @Override public int compare(    Method method1,    Method method2){
      String name1=method1.getName();
      String name2=method2.getName();
      return name1.compareTo(name2);
    }
  }
);
  Method method=methods[0];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Boolean.TYPE,method.getReturnType());
  Assert.assertEquals("booleanMethod",method.getName());
  Class<?>[] parameterTypes=method.getParameterTypes();
  Assert.assertEquals(1,parameterTypes.length);
  Assert.assertEquals(Boolean.TYPE,parameterTypes[0]);
  method=methods[1];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Byte.TYPE,method.getReturnType());
  Assert.assertEquals("byteMethod",method.getName());
  parameterTypes=method.getParameterTypes();
  Assert.assertEquals(1,parameterTypes.length);
  Assert.assertEquals(Byte.TYPE,parameterTypes[0]);
  method=methods[2];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Character.TYPE,method.getReturnType());
  Assert.assertEquals("charMethod",method.getName());
  parameterTypes=method.getParameterTypes();
  Assert.assertEquals(1,parameterTypes.length);
  Assert.assertEquals(Character.TYPE,parameterTypes[0]);
  method=methods[3];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Double.TYPE,method.getReturnType());
  Assert.assertEquals("doubleMethod",method.getName());
  parameterTypes=method.getParameterTypes();
  Assert.assertEquals(1,parameterTypes.length);
  Assert.assertEquals(Double.TYPE,parameterTypes[0]);
  method=methods[4];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Float.TYPE,method.getReturnType());
  Assert.assertEquals("floatMethod",method.getName());
  parameterTypes=method.getParameterTypes();
  Assert.assertEquals(1,parameterTypes.length);
  Assert.assertEquals(Float.TYPE,parameterTypes[0]);
  method=methods[5];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Integer.TYPE,method.getReturnType());
  Assert.assertEquals("intMethod",method.getName());
  parameterTypes=method.getParameterTypes();
  Assert.assertEquals(1,parameterTypes.length);
  Assert.assertEquals(Integer.TYPE,parameterTypes[0]);
  method=methods[6];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Long.TYPE,method.getReturnType());
  Assert.assertEquals("longMethod",method.getName());
  parameterTypes=method.getParameterTypes();
  Assert.assertEquals(1,parameterTypes.length);
  Assert.assertEquals(Long.TYPE,parameterTypes[0]);
  method=methods[7];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Object.class,method.getReturnType());
  Assert.assertEquals("objectMethod",method.getName());
  parameterTypes=method.getParameterTypes();
  Assert.assertEquals(1,parameterTypes.length);
  Assert.assertEquals(Object.class,parameterTypes[0]);
  method=methods[8];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Short.TYPE,method.getReturnType());
  Assert.assertEquals("shortMethod",method.getName());
  parameterTypes=method.getParameterTypes();
  Assert.assertEquals(1,parameterTypes.length);
  Assert.assertEquals(Short.TYPE,parameterTypes[0]);
  method=methods[9];
  Assert.assertEquals(Modifier.PUBLIC,method.getModifiers());
  Assert.assertSame(Void.TYPE,method.getReturnType());
  Assert.assertEquals("voidWithExceptionMethod",method.getName());
  parameterTypes=method.getParameterTypes();
  Assert.assertEquals(0,parameterTypes.length);
  Class<?>[] exceptionTypes=method.getExceptionTypes();
  Assert.assertEquals(1,exceptionTypes.length);
  Assert.assertEquals(Exception.class,exceptionTypes[0]);
}
