{
  PortletPreferences portletPreferences=portletRequest.getPreferences();
  String selectionStyle=portletPreferences.getValue("selectionStyle","dynamic");
  if (!selectionStyle.equals("dynamic")) {
    return new byte[0];
  }
  String assetLinkBehavior=portletPreferences.getValue("assetLinkBehavior","showFullContent");
  String rssDisplayStyle=portletPreferences.getValue("rssDisplayStyle",RSSUtil.DISPLAY_STYLE_ABSTRACT);
  String rssFeedType=portletPreferences.getValue("rssFeedType",RSSUtil.FEED_TYPE_DEFAULT);
  String rssName=portletPreferences.getValue("rssName",null);
  String format=RSSUtil.getFeedTypeFormat(rssFeedType);
  double version=RSSUtil.getFeedTypeVersion(rssFeedType);
  List<AssetEntry> assetEntries=new ArrayList<>();
  if (selectionStyle.equals("dynamic")) {
    AssetPublisherDisplayContext displayContext=new AssetPublisherDisplayContext(PortalUtil.getHttpServletRequest(portletRequest),portletPreferences);
    List<AssetEntryResult> assetEntryResults=displayContext.getAssetEntryResults(0,displayContext.getRSSDelta(),null);
    for (    AssetEntryResult assetEntryResult : assetEntryResults) {
      assetEntries.addAll(assetEntryResult.getAssetEntries());
    }
  }
 else {
    assetEntries=getAssetEntries(portletRequest,portletPreferences);
  }
  String rss=exportToRSS(portletRequest,portletResponse,rssName,null,format,version,rssDisplayStyle,assetLinkBehavior,assetEntries);
  return rss.getBytes(StringPool.UTF8);
}
