{
  Map<Long,Long> questionPKs=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(PollsQuestion.class);
  long questionId=MapUtil.getLong(questionPKs,choice.getQuestionId(),choice.getQuestionId());
  PollsChoice importedChoice=null;
  if (portletDataContext.isDataStrategyMirror()) {
    PollsChoice existingChoice=PollsChoiceFinderUtil.fetchByUUID_G(choice.getUuid(),portletDataContext.getScopeGroupId());
    if (existingChoice == null) {
      ServiceContext serviceContext=new ServiceContext();
      serviceContext.setUuid(choice.getUuid());
      importedChoice=PollsChoiceLocalServiceUtil.addChoice(questionId,choice.getName(),choice.getDescription(),serviceContext);
    }
 else {
      importedChoice=PollsChoiceLocalServiceUtil.updateChoice(existingChoice.getChoiceId(),questionId,choice.getName(),choice.getDescription());
    }
  }
 else {
    importedChoice=PollsChoiceLocalServiceUtil.addChoice(questionId,choice.getName(),choice.getDescription(),new ServiceContext());
  }
  Map<Long,Long> choicePKs=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(PollsChoice.class);
  choicePKs.put(choice.getChoiceId(),importedChoice.getChoiceId());
  portletDataContext.importPermissions(PollsChoice.class,choice.getChoiceId(),importedChoice.getChoiceId());
}
