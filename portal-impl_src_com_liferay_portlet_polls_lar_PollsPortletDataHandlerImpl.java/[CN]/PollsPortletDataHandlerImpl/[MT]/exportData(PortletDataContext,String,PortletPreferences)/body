{
  Map parameterMap=context.getParameterMap();
  boolean exportData=MapUtil.getBoolean(parameterMap,_EXPORT_POLLS_DATA);
  if (_log.isDebugEnabled()) {
    if (exportData) {
      _log.debug("Exporting data is enabled");
    }
 else {
      _log.debug("Exporting data is disabled");
    }
  }
  if (!exportData) {
    return null;
  }
  boolean exportVotes=MapUtil.getBoolean(parameterMap,_EXPORT_POLLS_VOTES);
  try {
    XStream xStream=new XStream();
    Document doc=DocumentHelper.createDocument();
    Element root=doc.addElement("polls-data");
    root.addAttribute("group-id",String.valueOf(context.getGroupId()));
    List questions=PollsQuestionUtil.findByGroupId(context.getGroupId());
    List choices=new ArrayList();
    List votes=new ArrayList();
    Iterator itr=questions.iterator();
    while (itr.hasNext()) {
      PollsQuestion question=(PollsQuestion)itr.next();
      if (context.addPrimaryKey(PollsQuestion.class,question.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        List questionChoices=PollsChoiceUtil.findByQuestionId(question.getQuestionId());
        choices.addAll(questionChoices);
        if (exportVotes) {
          question.setUserUuid(question.getUserUuid());
          List questionVotes=PollsVoteUtil.findByQuestionId(question.getQuestionId());
          votes.addAll(questionVotes);
        }
      }
    }
    String xml=xStream.toXML(questions);
    Element el=root.addElement("poll-questions");
    Document tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    itr=choices.iterator();
    while (itr.hasNext()) {
      PollsChoice choice=(PollsChoice)itr.next();
      if (context.addPrimaryKey(PollsChoice.class,choice.getPrimaryKeyObj())) {
        itr.remove();
      }
    }
    xml=xStream.toXML(choices);
    el=root.addElement("poll-choices");
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    itr=votes.iterator();
    while (itr.hasNext()) {
      PollsVote vote=(PollsVote)itr.next();
      if (context.addPrimaryKey(PollsVote.class,vote.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        vote.setUserUuid(vote.getUserUuid());
      }
    }
    xml=xStream.toXML(votes);
    el=root.addElement("poll-votes");
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    return XMLFormatter.toString(doc);
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
