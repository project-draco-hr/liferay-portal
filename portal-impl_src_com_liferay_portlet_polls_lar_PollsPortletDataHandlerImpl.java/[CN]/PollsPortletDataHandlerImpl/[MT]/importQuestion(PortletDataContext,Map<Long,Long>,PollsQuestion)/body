{
  long userId=context.getUserId(question.getUserUuid());
  Date expirationDate=question.getExpirationDate();
  int expirationMonth=0;
  int expirationDay=0;
  int expirationYear=0;
  int expirationHour=0;
  int expirationMinute=0;
  boolean neverExpire=true;
  if (expirationDate != null) {
    Calendar expirationCal=CalendarFactoryUtil.getCalendar();
    expirationCal.setTime(expirationDate);
    expirationMonth=expirationCal.get(Calendar.MONTH);
    expirationDay=expirationCal.get(Calendar.DATE);
    expirationYear=expirationCal.get(Calendar.YEAR);
    expirationHour=expirationCal.get(Calendar.HOUR);
    expirationMinute=expirationCal.get(Calendar.MINUTE);
    neverExpire=false;
    if (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {
      expirationHour+=12;
    }
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setScopeGroupId(context.getScopeGroupId());
  PollsQuestion existingQuestion=null;
  if (context.getDataStrategy().equals(PortletDataHandlerKeys.DATA_STRATEGY_MIRROR)) {
    existingQuestion=PollsQuestionUtil.fetchByUUID_G(question.getUuid(),context.getGroupId());
    if (existingQuestion == null) {
      existingQuestion=PollsQuestionLocalServiceUtil.addQuestion(question.getUuid(),userId,question.getTitleMap(),question.getDescriptionMap(),expirationMonth,expirationDay,expirationYear,expirationHour,expirationMinute,neverExpire,null,serviceContext);
    }
 else {
      existingQuestion=PollsQuestionLocalServiceUtil.updateQuestion(userId,existingQuestion.getQuestionId(),question.getTitleMap(),question.getDescriptionMap(),expirationMonth,expirationDay,expirationYear,expirationHour,expirationMinute,neverExpire);
    }
  }
 else {
    existingQuestion=PollsQuestionLocalServiceUtil.addQuestion(null,userId,question.getTitleMap(),question.getDescriptionMap(),expirationMonth,expirationDay,expirationYear,expirationHour,expirationMinute,neverExpire,null,serviceContext);
  }
  questionPKs.put(question.getQuestionId(),existingQuestion.getQuestionId());
  context.importPermissions(PollsQuestion.class,question.getQuestionId(),existingQuestion.getQuestionId());
}
