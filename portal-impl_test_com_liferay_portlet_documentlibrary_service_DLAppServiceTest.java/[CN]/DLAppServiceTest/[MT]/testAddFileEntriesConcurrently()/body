{
  int threadCount=25;
  DoAsUserThread[] doAsUserThreads=new DoAsUserThread[threadCount];
  _fileEntryIds=new long[threadCount];
  for (int i=0; i < 2; i++) {
    for (int j=0; j < doAsUserThreads.length; j++) {
      if (i == 0) {
        doAsUserThreads[j]=new AddFileEntryThread(_userId,j);
      }
 else {
        doAsUserThreads[j]=new GetFileEntryThread(_userId,j);
      }
    }
    for (    DoAsUserThread doAsUserThread : doAsUserThreads) {
      doAsUserThread.start();
    }
    for (    DoAsUserThread doAsUserThread : doAsUserThreads) {
      doAsUserThread.join();
    }
    int successCount=0;
    for (    DoAsUserThread doAsUserThread : doAsUserThreads) {
      if (doAsUserThread.isSuccess()) {
        successCount++;
      }
    }
    String message="Only " + successCount + " out of "+ threadCount;
    if (i == 0) {
      message+=" threads added file entries successfully";
    }
 else {
      message+=" threads retrieved file entries successfully";
    }
    assertTrue(message,successCount == threadCount);
  }
}
