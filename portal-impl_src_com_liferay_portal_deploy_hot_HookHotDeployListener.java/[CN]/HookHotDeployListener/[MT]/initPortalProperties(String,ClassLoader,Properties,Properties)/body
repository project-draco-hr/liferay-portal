{
  List<Company> companies=CompanyLocalServiceUtil.getCompanies();
  for (  Company company : companies) {
    PropsUtil.addProperties(company,portalProperties);
  }
  if (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) {
    _log.debug("Portlet locales " + portalProperties.getProperty(LOCALES));
    _log.debug("Merged locales " + PropsUtil.get(LOCALES));
    _log.debug("Merged locales array length " + PropsUtil.getArray(LOCALES).length);
  }
  for (  String key : _PROPS_VALUES_OBSOLETE) {
    if (_log.isInfoEnabled() && portalProperties.contains(key)) {
      _log.info("Portal property \"" + key + "\" is obsolete");
    }
  }
  resetPortalProperties(servletContextName,portalProperties,true);
  if (portalProperties.containsKey(PropsKeys.AUTH_PUBLIC_PATHS)) {
    initAuthPublicPaths(servletContextName,portalProperties);
  }
  if (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) {
    String authTokenClassName=portalProperties.getProperty(PropsKeys.AUTH_TOKEN_IMPL);
    AuthToken authToken=(AuthToken)newInstance(portletClassLoader,AuthToken.class,authTokenClassName);
    registerService(servletContextName,authTokenClassName,AuthToken.class,authToken);
  }
  if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) {
    String captchaClassName=portalProperties.getProperty(PropsKeys.CAPTCHA_ENGINE_IMPL);
    Captcha captcha=(Captcha)newInstance(portletClassLoader,Captcha.class,captchaClassName);
    CaptchaImpl captchaImpl=null;
    Captcha currentCaptcha=CaptchaUtil.getCaptcha();
    if (currentCaptcha instanceof DoPrivilegedBean) {
      DoPrivilegedBean doPrivilegedBean=(DoPrivilegedBean)currentCaptcha;
      captchaImpl=(CaptchaImpl)doPrivilegedBean.getActualBean();
    }
 else {
      captchaImpl=(CaptchaImpl)currentCaptcha;
    }
    captchaImpl.setCaptcha(captcha);
  }
  if (portalProperties.containsKey(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) {
    String controlPanelEntryClassName=portalProperties.getProperty(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS);
    ControlPanelEntry controlPanelEntry=(ControlPanelEntry)newInstance(portletClassLoader,ControlPanelEntry.class,controlPanelEntryClassName);
    registerService(servletContextName,controlPanelEntryClassName,ControlPanelEntry.class,controlPanelEntry);
  }
  if (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) {
    String[] dlProcessorClassNames=StringUtil.split(portalProperties.getProperty(PropsKeys.DL_FILE_ENTRY_PROCESSORS));
    DLFileEntryProcessorContainer dlFileEntryProcessorContainer=new DLFileEntryProcessorContainer();
    _dlFileEntryProcessorContainerMap.put(servletContextName,dlFileEntryProcessorContainer);
    for (    String dlProcessorClassName : dlProcessorClassNames) {
      DLProcessor dlProcessor=(DLProcessor)InstanceFactory.newInstance(portletClassLoader,dlProcessorClassName);
      dlProcessor=(DLProcessor)newInstance(portletClassLoader,ReflectionUtil.getInterfaces(dlProcessor,portletClassLoader),dlProcessorClassName);
      dlFileEntryProcessorContainer.registerDLProcessor(dlProcessor);
    }
  }
  if (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) {
    String[] dlRepositoryClassNames=StringUtil.split(portalProperties.getProperty(PropsKeys.DL_REPOSITORY_IMPL));
    DLRepositoryContainer dlRepositoryContainer=new DLRepositoryContainer();
    _dlRepositoryContainerMap.put(servletContextName,dlRepositoryContainer);
    for (    String dlRepositoryClassName : dlRepositoryClassNames) {
      ExternalRepositoryFactory externalRepositoryFactory=new ExternalRepositoryFactoryImpl(dlRepositoryClassName,portletClassLoader);
      ResourceBundleLoader resourceBundleLoader=new CacheResourceBundleLoader(new ClassResourceBundleLoader("content.Language",portletClassLoader));
      dlRepositoryContainer.registerRepositoryFactory(dlRepositoryClassName,externalRepositoryFactory,resourceBundleLoader);
    }
  }
  if (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) {
    String antivirusScannerClassName=portalProperties.getProperty(PropsKeys.DL_STORE_ANTIVIRUS_IMPL);
    AntivirusScanner antivirusScanner=(AntivirusScanner)newInstance(portletClassLoader,AntivirusScanner.class,antivirusScannerClassName);
    AntivirusScannerWrapper antivirusScannerWrapper=(AntivirusScannerWrapper)AntivirusScannerUtil.getAntivirusScanner();
    antivirusScannerWrapper.setAntivirusScanner(antivirusScanner);
  }
  if (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) {
    StoreFactory storeFactory=StoreFactory.getInstance();
    String storeClassName=portalProperties.getProperty(PropsKeys.DL_STORE_IMPL);
    storeFactory.setStore(storeClassName);
  }
  if (portalProperties.containsKey(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) {
    String attributesTransformerClassName=portalProperties.getProperty(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL);
    AttributesTransformer attributesTransformer=(AttributesTransformer)newInstance(portletClassLoader,AttributesTransformer.class,attributesTransformerClassName);
    registerService(servletContextName,attributesTransformerClassName,AttributesTransformer.class,attributesTransformer);
  }
  if (portalProperties.containsKey(LOCK_LISTENERS)) {
    String[] lockListenerClassNames=StringUtil.split(portalProperties.getProperty(LOCK_LISTENERS));
    for (    String lockListenerClassName : lockListenerClassNames) {
      LockListener lockListener=(LockListener)newInstance(portletClassLoader,LockListener.class,lockListenerClassName);
      registerService(servletContextName,lockListenerClassName,LockListener.class,lockListener);
    }
  }
  if (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) {
    String mailHookClassName=portalProperties.getProperty(PropsKeys.MAIL_HOOK_IMPL);
    com.liferay.mail.kernel.util.Hook mailHook=(com.liferay.mail.kernel.util.Hook)newInstance(portletClassLoader,com.liferay.mail.kernel.util.Hook.class,mailHookClassName);
    registerService(servletContextName,mailHookClassName,com.liferay.mail.kernel.util.Hook.class,mailHook);
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) {
    String organizationMembershipPolicyClassName=portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS);
    OrganizationMembershipPolicy organizationMembershipPolicy=(OrganizationMembershipPolicy)newInstance(portletClassLoader,OrganizationMembershipPolicy.class,organizationMembershipPolicyClassName);
    registerService(servletContextName,organizationMembershipPolicyClassName,OrganizationMembershipPolicy.class,organizationMembershipPolicy);
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) {
    String roleMembershipPolicyClassName=portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ROLES);
    RoleMembershipPolicy roleMembershipPolicy=(RoleMembershipPolicy)newInstance(portletClassLoader,RoleMembershipPolicy.class,roleMembershipPolicyClassName);
    registerService(servletContextName,roleMembershipPolicyClassName,RoleMembershipPolicy.class,roleMembershipPolicy);
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) {
    String siteMembershipPolicyClassName=portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_SITES);
    SiteMembershipPolicy siteMembershipPolicy=(SiteMembershipPolicy)newInstance(portletClassLoader,SiteMembershipPolicy.class,siteMembershipPolicyClassName);
    registerService(servletContextName,siteMembershipPolicyClassName,SiteMembershipPolicy.class,siteMembershipPolicy);
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) {
    String userGroupMembershipPolicyClassName=portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS);
    UserGroupMembershipPolicy userGroupMembershipPolicy=(UserGroupMembershipPolicy)newInstance(portletClassLoader,UserGroupMembershipPolicy.class,userGroupMembershipPolicyClassName);
    registerService(servletContextName,userGroupMembershipPolicyClassName,UserGroupMembershipPolicy.class,userGroupMembershipPolicy);
  }
  if (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) {
    String toolkitClassName=portalProperties.getProperty(PropsKeys.PASSWORDS_TOOLKIT);
    Toolkit toolkit=(Toolkit)newInstance(portletClassLoader,Toolkit.class,toolkitClassName);
    registerService(servletContextName,toolkitClassName,Toolkit.class,toolkit);
  }
  if (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) {
    String phoneNumberFormatClassName=portalProperties.getProperty(PropsKeys.PHONE_NUMBER_FORMAT_IMPL);
    PhoneNumberFormat phoneNumberFormat=(PhoneNumberFormat)newInstance(portletClassLoader,PhoneNumberFormat.class,phoneNumberFormatClassName);
    registerService(servletContextName,phoneNumberFormatClassName,PhoneNumberFormat.class,phoneNumberFormat);
  }
  if (portalProperties.containsKey(PropsKeys.SANITIZER_IMPL)) {
    String[] sanitizerClassNames=StringUtil.split(portalProperties.getProperty(PropsKeys.SANITIZER_IMPL));
    for (    String sanitizerClassName : sanitizerClassNames) {
      Sanitizer sanitizer=(Sanitizer)newInstance(portletClassLoader,Sanitizer.class,sanitizerClassName);
      registerService(servletContextName,sanitizerClassName,Sanitizer.class,sanitizer);
    }
  }
  if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) {
    String emailAddressGeneratorClassName=portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR);
    EmailAddressGenerator emailAddressGenerator=(EmailAddressGenerator)newInstance(portletClassLoader,EmailAddressGenerator.class,emailAddressGeneratorClassName);
    registerService(servletContextName,emailAddressGeneratorClassName,EmailAddressGenerator.class,emailAddressGenerator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) {
    String emailAddressValidatorClassName=portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR);
    EmailAddressValidator emailAddressValidator=(EmailAddressValidator)newInstance(portletClassLoader,EmailAddressValidator.class,emailAddressValidatorClassName);
    registerService(servletContextName,emailAddressValidatorClassName,EmailAddressValidator.class,emailAddressValidator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) {
    String fullNameGeneratorClassName=portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_GENERATOR);
    FullNameGenerator fullNameGenerator=(FullNameGenerator)newInstance(portletClassLoader,FullNameGenerator.class,fullNameGeneratorClassName);
    registerService(servletContextName,fullNameGeneratorClassName,FullNameGenerator.class,fullNameGenerator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) {
    String fullNameValidatorClassName=portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_VALIDATOR);
    FullNameValidator fullNameValidator=(FullNameValidator)newInstance(portletClassLoader,FullNameValidator.class,fullNameValidatorClassName);
    registerService(servletContextName,fullNameValidatorClassName,FullNameValidator.class,fullNameValidator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_GENERATOR)) {
    String screenNameGeneratorClassName=portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_GENERATOR);
    ScreenNameGenerator screenNameGenerator=(ScreenNameGenerator)newInstance(portletClassLoader,ScreenNameGenerator.class,screenNameGeneratorClassName);
    registerService(servletContextName,screenNameGeneratorClassName,ScreenNameGenerator.class,screenNameGenerator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)) {
    String screenNameValidatorClassName=portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_VALIDATOR);
    ScreenNameValidator screenNameValidator=(ScreenNameValidator)newInstance(portletClassLoader,ScreenNameValidator.class,screenNameValidatorClassName);
    registerService(servletContextName,screenNameValidatorClassName,ScreenNameValidator.class,screenNameValidator);
  }
  for (  String tokenWhitelistName : _TOKEN_WHITELIST_NAMES) {
    if (containsKey(portalProperties,tokenWhitelistName)) {
      initTokensWhitelists(servletContextName,portalProperties);
      break;
    }
  }
  Set<String> liferayFilterClassNames=LiferayFilterTracker.getClassNames();
  for (  String liferayFilterClassName : liferayFilterClassNames) {
    if (!portalProperties.containsKey(liferayFilterClassName)) {
      continue;
    }
    boolean filterEnabled=GetterUtil.getBoolean(portalProperties.getProperty(liferayFilterClassName));
    Set<LiferayFilter> liferayFilters=LiferayFilterTracker.getLiferayFilters(liferayFilterClassName);
    for (    LiferayFilter liferayFilter : liferayFilters) {
      liferayFilter.setFilterEnabled(filterEnabled);
    }
  }
  if (unfilteredPortalProperties.containsKey(PropsKeys.RELEASE_INFO_BUILD_NUMBER) || unfilteredPortalProperties.containsKey(PropsKeys.UPGRADE_PROCESSES)) {
    String[] upgradeProcessClassNames=StringUtil.split(unfilteredPortalProperties.getProperty(PropsKeys.UPGRADE_PROCESSES));
    List<UpgradeProcess> upgradeProcesses=UpgradeProcessUtil.initUpgradeProcesses(portletClassLoader,upgradeProcessClassNames);
    ReleaseLocalServiceUtil.updateRelease(servletContextName,upgradeProcesses,unfilteredPortalProperties);
  }
}
