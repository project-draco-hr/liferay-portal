{
  PropsUtil.addProperties(portalProperties);
  if (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) {
    _log.debug("Portlet locales " + portalProperties.getProperty(LOCALES));
    _log.debug("Merged locales " + PropsUtil.get(LOCALES));
    _log.debug("Merged locales array length " + PropsUtil.getArray(LOCALES).length);
  }
  for (  String key : _PROPS_VALUES_OBSOLETE) {
    if (_log.isInfoEnabled() && portalProperties.contains(key)) {
      _log.info("Portal property \"" + key + "\" is obsolete");
    }
  }
  resetPortalProperties(servletContextName,portalProperties,true);
  if (portalProperties.containsKey(PropsKeys.ASSET_PUBLISHER_ASSET_ENTRY_QUERY_PROCESSORS)) {
    String[] assetQueryProcessorClassNames=StringUtil.split(portalProperties.getProperty(PropsKeys.ASSET_PUBLISHER_ASSET_ENTRY_QUERY_PROCESSORS));
    for (    String assetQueryProcessorClassName : assetQueryProcessorClassNames) {
      AssetEntryQueryProcessor assetQueryProcessor=(AssetEntryQueryProcessor)newInstance(portletClassLoader,AssetEntryQueryProcessor.class,assetQueryProcessorClassName);
      AssetPublisherUtil.registerAssetQueryProcessor(assetQueryProcessorClassName,assetQueryProcessor);
      if (_log.isDebugEnabled()) {
        _log.debug("Registered asset query processor " + assetQueryProcessorClassName);
      }
    }
  }
  if (portalProperties.containsKey(PropsKeys.AUTH_PUBLIC_PATHS)) {
    initAuthPublicPaths(servletContextName,portalProperties);
  }
  if (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) {
    String authTokenClassName=portalProperties.getProperty(PropsKeys.AUTH_TOKEN_IMPL);
    AuthToken authToken=(AuthToken)newInstance(portletClassLoader,AuthToken.class,authTokenClassName);
    AuthTokenWrapper authTokenWrapper=(AuthTokenWrapper)AuthTokenUtil.getAuthToken();
    authTokenWrapper.setAuthToken(authToken);
  }
  if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) {
    String captchaClassName=portalProperties.getProperty(PropsKeys.CAPTCHA_ENGINE_IMPL);
    Captcha captcha=(Captcha)newInstance(portletClassLoader,Captcha.class,captchaClassName);
    CaptchaImpl captchaImpl=null;
    Captcha currentCaptcha=CaptchaUtil.getCaptcha();
    if (currentCaptcha instanceof DoPrivilegedBean) {
      DoPrivilegedBean doPrivilegedBean=(DoPrivilegedBean)currentCaptcha;
      captchaImpl=(CaptchaImpl)doPrivilegedBean.getActualBean();
    }
 else {
      captchaImpl=(CaptchaImpl)currentCaptcha;
    }
    captchaImpl.setCaptcha(captcha);
  }
  if (portalProperties.containsKey(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) {
    String controlPanelEntryClassName=portalProperties.getProperty(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS);
    ControlPanelEntry controlPanelEntry=(ControlPanelEntry)newInstance(portletClassLoader,ControlPanelEntry.class,controlPanelEntryClassName);
    DefaultControlPanelEntryFactory.setInstance(controlPanelEntry);
  }
  if (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) {
    String[] dlProcessorClassNames=StringUtil.split(portalProperties.getProperty(PropsKeys.DL_FILE_ENTRY_PROCESSORS));
    DLFileEntryProcessorContainer dlFileEntryProcessorContainer=new DLFileEntryProcessorContainer();
    _dlFileEntryProcessorContainerMap.put(servletContextName,dlFileEntryProcessorContainer);
    for (    String dlProcessorClassName : dlProcessorClassNames) {
      DLProcessor dlProcessor=(DLProcessor)newInstance(portletClassLoader,DLProcessor.class,dlProcessorClassName);
      dlFileEntryProcessorContainer.registerDLProcessor(dlProcessor);
    }
  }
  if (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) {
    String[] dlRepositoryClassNames=StringUtil.split(portalProperties.getProperty(PropsKeys.DL_REPOSITORY_IMPL));
    DLRepositoryContainer dlRepositoryContainer=new DLRepositoryContainer();
    _dlRepositoryContainerMap.put(servletContextName,dlRepositoryContainer);
    for (    String dlRepositoryClassName : dlRepositoryClassNames) {
      RepositoryFactory repositoryFactory=new RepositoryFactoryImpl(dlRepositoryClassName,portletClassLoader);
      dlRepositoryContainer.registerRepositoryFactory(dlRepositoryClassName,repositoryFactory);
    }
  }
  if (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) {
    String antivirusScannerClassName=portalProperties.getProperty(PropsKeys.DL_STORE_ANTIVIRUS_IMPL);
    AntivirusScanner antivirusScanner=(AntivirusScanner)newInstance(portletClassLoader,AntivirusScanner.class,antivirusScannerClassName);
    AntivirusScannerWrapper antivirusScannerWrapper=(AntivirusScannerWrapper)AntivirusScannerUtil.getAntivirusScanner();
    antivirusScannerWrapper.setAntivirusScanner(antivirusScanner);
  }
  if (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) {
    String storeClassName=portalProperties.getProperty(PropsKeys.DL_STORE_IMPL);
    Store store=(Store)newInstance(portletClassLoader,Store.class,storeClassName);
    StoreFactory.setInstance(store);
  }
  if (portalProperties.containsKey(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) {
    String attributesTransformerClassName=portalProperties.getProperty(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL);
    AttributesTransformer attributesTransformer=(AttributesTransformer)newInstance(portletClassLoader,AttributesTransformer.class,attributesTransformerClassName);
    AttributesTransformerFactory.setInstance(attributesTransformer);
  }
  if (portalProperties.containsKey(LOCK_LISTENERS)) {
    LockListenerContainer lockListenerContainer=_lockListenerContainerMap.get(servletContextName);
    if (lockListenerContainer == null) {
      lockListenerContainer=new LockListenerContainer();
      _lockListenerContainerMap.put(servletContextName,lockListenerContainer);
    }
    String[] lockListenerClassNames=StringUtil.split(portalProperties.getProperty(LOCK_LISTENERS));
    for (    String lockListenerClassName : lockListenerClassNames) {
      LockListener lockListener=(LockListener)newInstance(portletClassLoader,LockListener.class,lockListenerClassName);
      lockListenerContainer.registerLockListener(lockListener);
    }
  }
  if (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) {
    String mailHookClassName=portalProperties.getProperty(PropsKeys.MAIL_HOOK_IMPL);
    com.liferay.mail.util.Hook mailHook=(com.liferay.mail.util.Hook)newInstance(portletClassLoader,com.liferay.mail.util.Hook.class,mailHookClassName);
    com.liferay.mail.util.HookFactory.setInstance(mailHook);
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) {
    String organizationMembershipPolicyClassName=portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS);
    OrganizationMembershipPolicyFactoryImpl organizationMembershipPolicyFactoryImpl=(OrganizationMembershipPolicyFactoryImpl)OrganizationMembershipPolicyFactoryUtil.getOrganizationMembershipPolicyFactory();
    OrganizationMembershipPolicy organizationMembershipPolicy=(OrganizationMembershipPolicy)newInstance(portletClassLoader,OrganizationMembershipPolicy.class,organizationMembershipPolicyClassName);
    organizationMembershipPolicyFactoryImpl.setOrganizationMembershipPolicy(organizationMembershipPolicy);
    if (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {
      organizationMembershipPolicy.verifyPolicy();
    }
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) {
    String roleMembershipPolicyClassName=portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ROLES);
    RoleMembershipPolicyFactoryImpl roleMembershipPolicyFactoryImpl=(RoleMembershipPolicyFactoryImpl)RoleMembershipPolicyFactoryUtil.getRoleMembershipPolicyFactory();
    RoleMembershipPolicy roleMembershipPolicy=(RoleMembershipPolicy)newInstance(portletClassLoader,RoleMembershipPolicy.class,roleMembershipPolicyClassName);
    roleMembershipPolicyFactoryImpl.setRoleMembershipPolicy(roleMembershipPolicy);
    if (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {
      roleMembershipPolicy.verifyPolicy();
    }
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) {
    String siteMembershipPolicyClassName=portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_SITES);
    SiteMembershipPolicyFactoryImpl siteMembershipPolicyFactoryImpl=(SiteMembershipPolicyFactoryImpl)SiteMembershipPolicyFactoryUtil.getSiteMembershipPolicyFactory();
    SiteMembershipPolicy siteMembershipPolicy=(SiteMembershipPolicy)newInstance(portletClassLoader,SiteMembershipPolicy.class,siteMembershipPolicyClassName);
    siteMembershipPolicyFactoryImpl.setSiteMembershipPolicy(siteMembershipPolicy);
    if (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {
      siteMembershipPolicy.verifyPolicy();
    }
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) {
    String userGroupMembershipPolicyClassName=portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS);
    UserGroupMembershipPolicyFactoryImpl userGroupMembershipPolicyFactoryImpl=(UserGroupMembershipPolicyFactoryImpl)UserGroupMembershipPolicyFactoryUtil.getUserGroupMembershipPolicyFactory();
    UserGroupMembershipPolicy userGroupMembershipPolicy=(UserGroupMembershipPolicy)newInstance(portletClassLoader,UserGroupMembershipPolicy.class,userGroupMembershipPolicyClassName);
    userGroupMembershipPolicyFactoryImpl.setUserGroupMembershipPolicy(userGroupMembershipPolicy);
    if (PropsValues.MEMBERSHIP_POLICY_AUTO_VERIFY) {
      userGroupMembershipPolicy.verifyPolicy();
    }
  }
  if (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) {
    String toolkitClassName=portalProperties.getProperty(PropsKeys.PASSWORDS_TOOLKIT);
    Toolkit toolkit=(Toolkit)newInstance(portletClassLoader,Sanitizer.class,toolkitClassName);
    ToolkitWrapper toolkitWrapper=(ToolkitWrapper)PwdToolkitUtil.getToolkit();
    toolkitWrapper.setToolkit(toolkit);
  }
  if (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) {
    String phoneNumberFormatClassName=portalProperties.getProperty(PropsKeys.PHONE_NUMBER_FORMAT_IMPL);
    PhoneNumberFormat phoneNumberFormat=(PhoneNumberFormat)newInstance(portletClassLoader,PhoneNumberFormat.class,phoneNumberFormatClassName);
    PhoneNumberFormatWrapper phoneNumberFormatWrapper=(PhoneNumberFormatWrapper)PhoneNumberFormatUtil.getPhoneNumberFormat();
    phoneNumberFormatWrapper.setPhoneNumberFormat(phoneNumberFormat);
  }
  if (portalProperties.containsKey(PropsKeys.SANITIZER_IMPL)) {
    String[] sanitizerClassNames=StringUtil.split(portalProperties.getProperty(PropsKeys.SANITIZER_IMPL));
    SanitizerContainer sanitizerContainer=new SanitizerContainer();
    _sanitizerContainerMap.put(servletContextName,sanitizerContainer);
    for (    String sanitizerClassName : sanitizerClassNames) {
      Sanitizer sanitizer=(Sanitizer)newInstance(portletClassLoader,Sanitizer.class,sanitizerClassName);
      sanitizerContainer.registerSanitizer(sanitizer);
    }
  }
  if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) {
    String emailAddressGeneratorClassName=portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR);
    EmailAddressGenerator emailAddressGenerator=(EmailAddressGenerator)newInstance(portletClassLoader,EmailAddressGenerator.class,emailAddressGeneratorClassName);
    EmailAddressGeneratorFactory.setInstance(emailAddressGenerator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) {
    String emailAddressValidatorClassName=portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR);
    EmailAddressValidator emailAddressValidator=(EmailAddressValidator)newInstance(portletClassLoader,EmailAddressValidator.class,emailAddressValidatorClassName);
    EmailAddressValidatorFactory.setInstance(emailAddressValidator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) {
    String fullNameGeneratorClassName=portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_GENERATOR);
    FullNameGenerator fullNameGenerator=(FullNameGenerator)newInstance(portletClassLoader,FullNameGenerator.class,fullNameGeneratorClassName);
    FullNameGeneratorFactory.setInstance(fullNameGenerator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) {
    String fullNameValidatorClassName=portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_VALIDATOR);
    FullNameValidator fullNameValidator=(FullNameValidator)newInstance(portletClassLoader,FullNameValidator.class,fullNameValidatorClassName);
    FullNameValidatorFactory.setInstance(fullNameValidator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_GENERATOR)) {
    String screenNameGeneratorClassName=portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_GENERATOR);
    ScreenNameGenerator screenNameGenerator=(ScreenNameGenerator)newInstance(portletClassLoader,ScreenNameGenerator.class,screenNameGeneratorClassName);
    ScreenNameGeneratorFactory.setInstance(screenNameGenerator);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)) {
    String screenNameValidatorClassName=portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_VALIDATOR);
    ScreenNameValidator screenNameValidator=(ScreenNameValidator)newInstance(portletClassLoader,ScreenNameValidator.class,screenNameValidatorClassName);
    ScreenNameValidatorFactory.setInstance(screenNameValidator);
  }
  Set<String> liferayFilterClassNames=LiferayFilterTracker.getClassNames();
  for (  String liferayFilterClassName : liferayFilterClassNames) {
    if (!portalProperties.containsKey(liferayFilterClassName)) {
      continue;
    }
    boolean filterEnabled=GetterUtil.getBoolean(portalProperties.getProperty(liferayFilterClassName));
    Set<LiferayFilter> liferayFilters=LiferayFilterTracker.getLiferayFilters(liferayFilterClassName);
    for (    LiferayFilter liferayFilter : liferayFilters) {
      liferayFilter.setFilterEnabled(filterEnabled);
    }
  }
  if (unfilteredPortalProperties.containsKey(PropsKeys.RELEASE_INFO_BUILD_NUMBER) || unfilteredPortalProperties.containsKey(PropsKeys.UPGRADE_PROCESSES)) {
    updateRelease(servletContextName,portletClassLoader,unfilteredPortalProperties);
  }
}
