{
  ServletContext servletContext=hotDeployEvent.getServletContext();
  String servletContextName=servletContext.getServletContextName();
  if (_log.isDebugEnabled()) {
    _log.debug("Invoking undeploy for " + servletContextName);
  }
  if (!_servletContextNames.remove(servletContextName)) {
    return;
  }
  AuthenticatorsContainer authenticatorsContainer=_authenticatorsContainerMap.remove(servletContextName);
  if (authenticatorsContainer != null) {
    authenticatorsContainer.unregisterAuthenticators();
  }
  AuthPublicPathsContainer authPublicPathsContainer=_authPublicPathsContainerMap.remove(servletContextName);
  if (authPublicPathsContainer != null) {
    authPublicPathsContainer.unregisterPaths();
  }
  AuthVerifierConfigurationContainer authVerifierConfigurationContainer=_authVerifierConfigurationContainerMap.remove(servletContextName);
  if (authVerifierConfigurationContainer != null) {
    authVerifierConfigurationContainer.unregisterConfigurations();
  }
  AutoDeployListenersContainer autoDeployListenersContainer=_autoDeployListenersContainerMap.remove(servletContextName);
  if (autoDeployListenersContainer != null) {
    autoDeployListenersContainer.unregisterAutoDeployListeners();
  }
  CustomJspBag customJspBag=_customJspBagsMap.remove(servletContextName);
  if (customJspBag != null) {
    destroyCustomJspBag(servletContextName,customJspBag);
  }
  EventsContainer eventsContainer=_eventsContainerMap.remove(servletContextName);
  if (eventsContainer != null) {
    eventsContainer.unregisterEvents();
  }
  HotDeployListenersContainer hotDeployListenersContainer=_hotDeployListenersContainerMap.remove(servletContextName);
  if (hotDeployListenersContainer != null) {
    hotDeployListenersContainer.unregisterHotDeployListeners();
  }
  IndexerPostProcessorContainer indexerPostProcessorContainer=_indexerPostProcessorContainerMap.remove(servletContextName);
  if (indexerPostProcessorContainer != null) {
    indexerPostProcessorContainer.unregisterIndexerPostProcessor();
  }
  LanguagesContainer languagesContainer=_languagesContainerMap.remove(servletContextName);
  if (languagesContainer != null) {
    languagesContainer.unregisterLanguages();
  }
  ModelListenersContainer modelListenersContainer=_modelListenersContainerMap.remove(servletContextName);
  if (modelListenersContainer != null) {
    modelListenersContainer.unregisterModelListeners(servletContextName);
  }
  Properties portalProperties=_portalPropertiesMap.remove(servletContextName);
  if (portalProperties != null) {
    destroyPortalProperties(servletContextName,portalProperties);
  }
  destroyServices(servletContextName);
  ServletFiltersContainer servletFiltersContainer=_servletFiltersContainerMap.remove(servletContextName);
  if (servletFiltersContainer != null) {
    servletFiltersContainer.unregisterFilterMappings();
  }
  StrutsActionsContainer strutsActionContainer=_strutsActionsContainerMap.remove(servletContextName);
  if (strutsActionContainer != null) {
    strutsActionContainer.unregisterStrutsActions();
  }
  unregisterClpMessageListeners(servletContext);
  Map<Object,ServiceRegistration<?>> serviceRegistrations=_serviceRegistrations.remove(servletContextName);
  if (serviceRegistrations != null) {
    for (    ServiceRegistration<?> serviceRegistration : serviceRegistrations.values()) {
      serviceRegistration.unregister();
    }
    serviceRegistrations.clear();
  }
  if (_log.isInfoEnabled()) {
    _log.info("Hook for " + servletContextName + " was unregistered");
  }
}
