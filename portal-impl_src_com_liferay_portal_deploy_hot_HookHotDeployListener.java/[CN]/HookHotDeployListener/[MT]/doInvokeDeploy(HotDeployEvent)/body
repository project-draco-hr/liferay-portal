{
  ServletContext servletContext=hotDeployEvent.getServletContext();
  String servletContextName=servletContext.getServletContextName();
  if (_log.isDebugEnabled()) {
    _log.debug("Invoking deploy for " + servletContextName);
  }
  String xml=HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-hook.xml"));
  if (xml == null) {
    return;
  }
  if (_log.isInfoEnabled()) {
    _log.info("Registering hook for " + servletContextName);
  }
  _servletContextNames.add(servletContextName);
  Document document=SAXReaderUtil.read(xml,true);
  Element rootElement=document.getRootElement();
  ClassLoader portletClassLoader=hotDeployEvent.getContextClassLoader();
  initPortalProperties(servletContextName,portletClassLoader,rootElement);
  initLanguageProperties(servletContextName,portletClassLoader,rootElement);
  initCustomJspDir(servletContext,servletContextName,portletClassLoader,hotDeployEvent.getPluginPackage(),rootElement);
  initIndexerPostProcessors(servletContextName,portletClassLoader,rootElement);
  List<Element> serviceElements=rootElement.elements("service");
  for (  Element serviceElement : serviceElements) {
    String serviceType=serviceElement.elementText("service-type");
    String serviceImpl=serviceElement.elementText("service-impl");
    if (!checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_SERVICE,portletClassLoader,serviceType,"Rejecting service " + serviceImpl)) {
      continue;
    }
    Class<?> serviceTypeClass=portletClassLoader.loadClass(serviceType);
    Class<?> serviceImplClass=portletClassLoader.loadClass(serviceImpl);
    Constructor<?> serviceImplConstructor=serviceImplClass.getConstructor(new Class<?>[]{serviceTypeClass});
    Object serviceProxy=PortalBeanLocatorUtil.locate(serviceType);
    if (ProxyUtil.isProxyClass(serviceProxy.getClass())) {
      initServices(servletContextName,portletClassLoader,serviceType,serviceTypeClass,serviceImplConstructor,serviceProxy);
    }
 else {
      _log.error("Service hooks require Spring to be configured to use " + "JdkDynamicProxy and will not work with CGLIB");
    }
  }
  initServletFilters(servletContext,servletContextName,portletClassLoader,rootElement);
  initStrutsActions(servletContextName,portletClassLoader,rootElement);
  ModelListenersContainer modelListenersContainer=_modelListenersContainerMap.get(servletContextName);
  if (modelListenersContainer == null) {
    modelListenersContainer=new ModelListenersContainer();
    _modelListenersContainerMap.put(servletContextName,modelListenersContainer);
  }
  List<Element> modelListenerElements=rootElement.elements("model-listener");
  for (  Element modelListenerElement : modelListenerElements) {
    String modelName=modelListenerElement.elementText("model-name");
    String modelListenerClassName=modelListenerElement.elementText("model-listener-class");
    ModelListener<BaseModel<?>> modelListener=initModelListener(servletContextName,portletClassLoader,modelName,modelListenerClassName);
    if (modelListener != null) {
      modelListenersContainer.registerModelListener(modelName,modelListener);
    }
  }
  EventsContainer eventsContainer=_eventsContainerMap.get(servletContextName);
  if (eventsContainer == null) {
    eventsContainer=new EventsContainer();
    _eventsContainerMap.put(servletContextName,eventsContainer);
  }
  List<Element> eventElements=rootElement.elements("event");
  for (  Element eventElement : eventElements) {
    String eventName=eventElement.elementText("event-type");
    String eventClassName=eventElement.elementText("event-class");
    Object obj=initEvent(eventName,eventClassName,portletClassLoader);
    if (obj != null) {
      eventsContainer.registerEvent(eventName,obj);
    }
  }
  registerClpMessageListeners(servletContext,portletClassLoader);
  DirectServletRegistryUtil.clearServlets();
  FileAvailabilityUtil.reset();
  if (_log.isInfoEnabled()) {
    _log.info("Hook for " + servletContextName + " is available for use");
  }
}
