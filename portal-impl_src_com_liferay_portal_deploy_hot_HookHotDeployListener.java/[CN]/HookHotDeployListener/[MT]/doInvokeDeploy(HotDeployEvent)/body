{
  ServletContext servletContext=event.getServletContext();
  String servletContextName=servletContext.getServletContextName();
  if (_log.isDebugEnabled()) {
    _log.debug("Invoking deploy for " + servletContextName);
  }
  String xml=HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-hook.xml"));
  if (xml == null) {
    return;
  }
  if (_log.isInfoEnabled()) {
    _log.info("Registering hook for " + servletContextName);
  }
  ClassLoader portletClassLoader=event.getContextClassLoader();
  Document doc=SAXReaderUtil.read(xml,true);
  Element root=doc.getRootElement();
  List<Element> eventEls=root.elements("event");
  for (  Element eventEl : eventEls) {
    String eventClass=eventEl.elementText("event-class");
    String eventType=eventEl.elementText("event-type");
    Object obj=initEvent(eventClass,eventType,portletClassLoader);
    if (obj != null) {
      List<Object> events=_eventsMap.get(eventType);
      if (events == null) {
        events=new ArrayList<Object>();
        _eventsMap.put(eventType,events);
      }
      events.add(obj);
    }
  }
  List<Element> modelListenerEls=root.elements("model-listener");
  for (  Element modelListenerEl : modelListenerEls) {
    String modelListenerClass=modelListenerEl.elementText("model-listener-class");
    String modelName=modelListenerEl.elementText("model-name");
    ModelListener modelListener=initModelListener(modelListenerClass,modelName,portletClassLoader);
    if (modelListener != null) {
      List<ModelListener> modelListeners=_modelListenersMap.get(modelName);
      if (modelListeners == null) {
        modelListeners=new ArrayList<ModelListener>();
        _modelListenersMap.put(modelName,modelListeners);
      }
      modelListeners.add(modelListener);
    }
  }
  String portalPropertiesLocation=root.elementText("portal-properties");
  if (Validator.isNotNull(portalPropertiesLocation)) {
    Configuration portalPropertiesConfiguration=null;
    try {
      String name=portalPropertiesLocation;
      int pos=name.lastIndexOf(".properties");
      if (pos != -1) {
        name=name.substring(0,pos);
      }
      portalPropertiesConfiguration=ConfigurationFactoryUtil.getConfiguration(portletClassLoader,name);
    }
 catch (    Exception e) {
      _log.error("Unable to read " + portalPropertiesLocation,e);
    }
    if (portalPropertiesConfiguration != null) {
      Properties portalProperties=portalPropertiesConfiguration.getProperties();
      if (portalProperties.size() > 0) {
        _portalPropertiesMap.put(servletContextName,portalProperties);
        initPortalProperties(portalProperties);
      }
    }
  }
  String customJspDir=root.elementText("custom-jsp-dir");
  if (Validator.isNotNull(customJspDir)) {
    if (_log.isDebugEnabled()) {
      _log.debug("Custom JSP directory: " + customJspDir);
    }
    List<String> customJsps=new ArrayList<String>();
    String webDir=WebDirDetector.getRootDir(portletClassLoader);
    getCustomJsps(servletContext,webDir,customJspDir,customJsps);
    if (customJsps.size() > 0) {
      CustomJspBag customJspBag=new CustomJspBag(customJspDir,customJsps);
      if (_log.isDebugEnabled()) {
        StringBuilder sb=new StringBuilder();
        sb.append("Custom JSP files:\n");
        Iterator<String> itr=customJsps.iterator();
        while (itr.hasNext()) {
          String customJsp=itr.next();
          sb.append(customJsp);
          if (itr.hasNext()) {
            sb.append(StringPool.NEW_LINE);
          }
        }
        _log.debug(sb.toString());
      }
      _customJspBagsMap.put(servletContextName,customJspBag);
      initCustomJspBag(customJspBag);
    }
  }
  if (_log.isInfoEnabled()) {
    _log.info("Hook for " + servletContextName + " registered successfully");
  }
}
