{
  ServletContext servletContext=hotDeployEvent.getServletContext();
  String servletContextName=servletContext.getServletContextName();
  if (_log.isDebugEnabled()) {
    _log.debug("Invoking deploy for " + servletContextName);
  }
  String xml=HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/liferay-hook.xml"));
  if (xml == null) {
    return;
  }
  if (_log.isInfoEnabled()) {
    _log.info("Registering hook for " + servletContextName);
  }
  _servletContextNames.add(servletContextName);
  ClassLoader portletClassLoader=hotDeployEvent.getContextClassLoader();
  PACLPolicy paclPolicy=PACLPolicyManager.getPACLPolicy(portletClassLoader);
  if (paclPolicy == null) {
    paclPolicy=PACLPolicyManager.getDefaultPACLPolicy();
  }
  initLogger(portletClassLoader);
  Document document=SAXReaderUtil.read(xml,true);
  Element rootElement=document.getRootElement();
  initPortalProperties(paclPolicy,servletContextName,portletClassLoader,rootElement);
  initLanguageProperties(paclPolicy,servletContextName,portletClassLoader,rootElement);
  initCustomJspDir(paclPolicy,servletContext,servletContextName,hotDeployEvent.getPluginPackage(),rootElement);
  IndexerPostProcessorContainer indexerPostProcessorContainer=_indexerPostProcessorContainerMap.get(servletContextName);
  if (indexerPostProcessorContainer == null) {
    indexerPostProcessorContainer=new IndexerPostProcessorContainer();
    _indexerPostProcessorContainerMap.put(servletContextName,indexerPostProcessorContainer);
  }
  List<Element> indexerPostProcessorElements=rootElement.elements("indexer-post-processor");
  for (  Element indexerPostProcessorElement : indexerPostProcessorElements) {
    String indexerClassName=indexerPostProcessorElement.elementText("indexer-class-name");
    String indexerPostProcessorImpl=indexerPostProcessorElement.elementText("indexer-post-processor-impl");
    Indexer indexer=IndexerRegistryUtil.getIndexer(indexerClassName);
    if (indexer == null) {
      _log.error("No indexer for " + indexerClassName + " was found");
      continue;
    }
    IndexerPostProcessor indexerPostProcessor=(IndexerPostProcessor)InstanceFactory.newInstance(portletClassLoader,indexerPostProcessorImpl);
    indexer.registerIndexerPostProcessor(indexerPostProcessor);
    indexerPostProcessorContainer.registerIndexerPostProcessor(indexerClassName,indexerPostProcessor);
  }
  List<Element> serviceElements=rootElement.elements("service");
  for (  Element serviceElement : serviceElements) {
    String serviceType=serviceElement.elementText("service-type");
    String serviceImpl=serviceElement.elementText("service-impl");
    if (!paclPolicy.hasHookService(serviceType)) {
      if (_log.isInfoEnabled()) {
        _log.info("Rejecting service " + serviceImpl);
      }
      continue;
    }
    Class<?> serviceTypeClass=portletClassLoader.loadClass(serviceType);
    Class<?> serviceImplClass=portletClassLoader.loadClass(serviceImpl);
    Constructor<?> serviceImplConstructor=serviceImplClass.getConstructor(new Class<?>[]{serviceTypeClass});
    Object serviceProxy=PortalBeanLocatorUtil.locate(serviceType);
    if (ProxyUtil.isProxyClass(serviceProxy.getClass())) {
      initServices(servletContextName,portletClassLoader,serviceType,serviceTypeClass,serviceImplConstructor,serviceProxy);
    }
 else {
      _log.error("Service hooks require Spring to be configured to use " + "JdkDynamicProxy and will not work with CGLIB");
    }
  }
  ServletFiltersContainer servletFiltersContainer=_servletFiltersContainerMap.get(servletContextName);
  if (servletFiltersContainer == null) {
    servletFiltersContainer=new ServletFiltersContainer();
    _servletFiltersContainerMap.put(servletContextName,servletFiltersContainer);
  }
  List<Element> servletFilterElements=rootElement.elements("servlet-filter");
  for (  Element servletFilterElement : servletFilterElements) {
    String servletFilterName=servletFilterElement.elementText("servlet-filter-name");
    String servletFilterImpl=servletFilterElement.elementText("servlet-filter-impl");
    List<Element> initParamElements=servletFilterElement.elements("init-param");
    Map<String,String> initParameterMap=new HashMap<String,String>();
    for (    Element initParamElement : initParamElements) {
      String paramName=initParamElement.elementText("param-name");
      String paramValue=initParamElement.elementText("param-value");
      initParameterMap.put(paramName,paramValue);
    }
    Filter filter=initServletFilter(servletFilterImpl,portletClassLoader);
    FilterConfig filterConfig=new InvokerFilterConfig(servletContext,servletFilterName,initParameterMap);
    filter.init(filterConfig);
    servletFiltersContainer.registerFilter(servletFilterName,filter,filterConfig);
  }
  List<Element> servletFilterMappingElements=rootElement.elements("servlet-filter-mapping");
  for (  Element servletFilterMappingElement : servletFilterMappingElements) {
    String servletFilterName=servletFilterMappingElement.elementText("servlet-filter-name");
    String afterFilter=servletFilterMappingElement.elementText("after-filter");
    String beforeFilter=servletFilterMappingElement.elementText("before-filter");
    String positionFilterName=beforeFilter;
    boolean after=false;
    if (Validator.isNotNull(afterFilter)) {
      positionFilterName=afterFilter;
      after=true;
    }
    List<Element> urlPatternElements=servletFilterMappingElement.elements("url-pattern");
    List<String> urlPatterns=new ArrayList<String>();
    for (    Element urlPatternElement : urlPatternElements) {
      String urlPattern=urlPatternElement.getTextTrim();
      urlPatterns.add(urlPattern);
    }
    List<Element> dispatcherElements=servletFilterMappingElement.elements("dispatcher");
    List<String> dispatchers=new ArrayList<String>();
    for (    Element dispatcherElement : dispatcherElements) {
      String dispatcher=dispatcherElement.getTextTrim();
      dispatcher=dispatcher.toUpperCase();
      dispatchers.add(dispatcher);
    }
    servletFiltersContainer.registerFilterMapping(servletFilterName,urlPatterns,dispatchers,positionFilterName,after);
  }
  StrutsActionsContainer strutsActionContainer=_strutsActionsContainerMap.get(servletContextName);
  if (strutsActionContainer == null) {
    strutsActionContainer=new StrutsActionsContainer();
    _strutsActionsContainerMap.put(servletContextName,strutsActionContainer);
  }
  List<Element> strutsActionElements=rootElement.elements("struts-action");
  for (  Element strutsActionElement : strutsActionElements) {
    String strutsActionPath=strutsActionElement.elementText("struts-action-path");
    String strutsActionImpl=strutsActionElement.elementText("struts-action-impl");
    Object strutsAction=initStrutsAction(strutsActionPath,strutsActionImpl,portletClassLoader);
    strutsActionContainer.registerStrutsAction(strutsActionPath,strutsAction);
  }
  ModelListenersContainer modelListenersContainer=_modelListenersContainerMap.get(servletContextName);
  if (modelListenersContainer == null) {
    modelListenersContainer=new ModelListenersContainer();
    _modelListenersContainerMap.put(servletContextName,modelListenersContainer);
  }
  List<Element> modelListenerElements=rootElement.elements("model-listener");
  for (  Element modelListenerElement : modelListenerElements) {
    String modelName=modelListenerElement.elementText("model-name");
    String modelListenerClassName=modelListenerElement.elementText("model-listener-class");
    ModelListener<BaseModel<?>> modelListener=initModelListener(modelName,modelListenerClassName,portletClassLoader);
    if (modelListener != null) {
      modelListenersContainer.registerModelListener(modelName,modelListener);
    }
  }
  EventsContainer eventsContainer=_eventsContainerMap.get(servletContextName);
  if (eventsContainer == null) {
    eventsContainer=new EventsContainer();
    _eventsContainerMap.put(servletContextName,eventsContainer);
  }
  List<Element> eventElements=rootElement.elements("event");
  for (  Element eventElement : eventElements) {
    String eventName=eventElement.elementText("event-type");
    String eventClassName=eventElement.elementText("event-class");
    Object obj=initEvent(eventName,eventClassName,portletClassLoader);
    if (obj != null) {
      eventsContainer.registerEvent(eventName,obj);
    }
  }
  registerClpMessageListeners(servletContext,portletClassLoader);
  DirectServletRegistryUtil.clearServlets();
  FileAvailabilityUtil.reset();
  if (_log.isInfoEnabled()) {
    _log.info("Hook for " + servletContextName + " is available for use");
  }
}
