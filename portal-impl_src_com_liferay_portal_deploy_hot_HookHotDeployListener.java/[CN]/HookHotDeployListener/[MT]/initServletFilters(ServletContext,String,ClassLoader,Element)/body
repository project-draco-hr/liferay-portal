{
  List<Element> servletFilterElements=parentElement.elements("servlet-filter");
  if (!servletFilterElements.isEmpty() && !checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_SERVLET_FILTERS,portletClassLoader,null,"Rejecting servlet filters")) {
    return;
  }
  Map<String,Tuple> filterMappings=new HashMap<String,Tuple>();
  List<Element> servletFilterMappingElements=parentElement.elements("servlet-filter-mapping");
  for (  Element servletFilterMappingElement : servletFilterMappingElements) {
    String servletFilterName=servletFilterMappingElement.elementText("servlet-filter-name");
    String afterFilter=servletFilterMappingElement.elementText("after-filter");
    String beforeFilter=servletFilterMappingElement.elementText("before-filter");
    List<Element> urlPatternElements=servletFilterMappingElement.elements("url-pattern");
    List<String> urlPatterns=new ArrayList<String>();
    for (    Element urlPatternElement : urlPatternElements) {
      String urlPattern=urlPatternElement.getTextTrim();
      urlPatterns.add(urlPattern);
    }
    List<Element> dispatcherElements=servletFilterMappingElement.elements("dispatcher");
    List<String> dispatchers=new ArrayList<String>();
    for (    Element dispatcherElement : dispatcherElements) {
      String dispatcher=dispatcherElement.getTextTrim();
      dispatcher=StringUtil.toUpperCase(dispatcher);
      dispatchers.add(dispatcher);
    }
    filterMappings.put(servletFilterName,new Tuple(afterFilter,beforeFilter,dispatchers,urlPatterns));
  }
  for (  Element servletFilterElement : servletFilterElements) {
    String servletFilterName=servletFilterElement.elementText("servlet-filter-name");
    String servletFilterImpl=servletFilterElement.elementText("servlet-filter-impl");
    List<Element> initParamElements=servletFilterElement.elements("init-param");
    Map<String,Object> properties=new HashMap<String,Object>();
    for (    Element initParamElement : initParamElements) {
      String paramName=initParamElement.elementText("param-name");
      String paramValue=initParamElement.elementText("param-value");
      properties.put("init.param." + paramName,paramValue);
    }
    Tuple tuple=filterMappings.get(servletFilterName);
    properties.put("after-filter",tuple.getObject(0));
    properties.put("before-filter",tuple.getObject(1));
    properties.put("dispatcher",tuple.getObject(2));
    properties.put("servlet-context-name",PortalContextLoaderListener.getPortalServletContextName());
    properties.put("servlet-filter-name",servletFilterName);
    properties.put("url-pattern",tuple.getObject(3));
    Filter filter=initServletFilter(servletFilterImpl,portletClassLoader);
    registerService(servletContextName,servletFilterName,Filter.class,filter,properties);
  }
}
