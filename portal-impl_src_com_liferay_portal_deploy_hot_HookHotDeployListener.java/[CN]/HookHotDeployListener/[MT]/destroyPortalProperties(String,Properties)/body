{
  PropsUtil.removeProperties(portalProperties);
  if (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) {
    _log.debug("Portlet locales " + portalProperties.getProperty(LOCALES));
    _log.debug("Original locales " + PropsUtil.get(LOCALES));
    _log.debug("Original locales array length " + PropsUtil.getArray(LOCALES).length);
  }
  resetPortalProperties(servletContextName,portalProperties,false);
  if (portalProperties.containsKey(PropsKeys.ASSET_PUBLISHER_ASSET_ENTRY_QUERY_PROCESSORS)) {
    String[] assetQueryProcessors=StringUtil.split(portalProperties.getProperty(PropsKeys.ASSET_PUBLISHER_ASSET_ENTRY_QUERY_PROCESSORS));
    for (    String assetQueryProcessorClassName : assetQueryProcessors) {
      AssetPublisherUtil.unregisterAssetQueryProcessor(assetQueryProcessorClassName);
      if (_log.isDebugEnabled()) {
        _log.debug("Unregistered asset query processor " + assetQueryProcessorClassName);
      }
    }
  }
  if (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) {
    AuthTokenWrapper authTokenWrapper=(AuthTokenWrapper)AuthTokenUtil.getAuthToken();
    authTokenWrapper.setAuthToken(null);
  }
  if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) {
    CaptchaImpl captchaImpl=null;
    Captcha captcha=CaptchaUtil.getCaptcha();
    if (captcha instanceof DoPrivilegedBean) {
      DoPrivilegedBean doPrivilegedBean=(DoPrivilegedBean)captcha;
      captchaImpl=(CaptchaImpl)doPrivilegedBean.getActualBean();
    }
 else {
      captchaImpl=(CaptchaImpl)captcha;
    }
    captchaImpl.setCaptcha(null);
  }
  if (portalProperties.containsKey(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) {
    DefaultControlPanelEntryFactory.setInstance(null);
  }
  if (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) {
    DLFileEntryProcessorContainer dlFileEntryProcessorContainer=_dlFileEntryProcessorContainerMap.remove(servletContextName);
    dlFileEntryProcessorContainer.unregisterDLProcessors();
  }
  if (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) {
    DLRepositoryContainer dlRepositoryContainer=_dlRepositoryContainerMap.remove(servletContextName);
    dlRepositoryContainer.unregisterRepositoryFactories();
  }
  if (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) {
    AntivirusScannerWrapper antivirusScannerWrapper=(AntivirusScannerWrapper)AntivirusScannerUtil.getAntivirusScanner();
    antivirusScannerWrapper.setAntivirusScanner(null);
  }
  if (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) {
    StoreFactory.setInstance(null);
  }
  if (portalProperties.containsKey(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) {
    AttributesTransformerFactory.setInstance(null);
  }
  if (portalProperties.containsKey(LOCK_LISTENERS)) {
    LockListenerContainer lockListenerContainer=_lockListenerContainerMap.remove(servletContextName);
    if (lockListenerContainer != null) {
      lockListenerContainer.unregisterLockListeners();
    }
  }
  if (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) {
    com.liferay.mail.util.HookFactory.setInstance(null);
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) {
    OrganizationMembershipPolicyFactoryImpl organizationMembershipPolicyFactoryImpl=(OrganizationMembershipPolicyFactoryImpl)OrganizationMembershipPolicyFactoryUtil.getOrganizationMembershipPolicyFactory();
    organizationMembershipPolicyFactoryImpl.setOrganizationMembershipPolicy(null);
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) {
    RoleMembershipPolicyFactoryImpl roleMembershipPolicyFactoryImpl=(RoleMembershipPolicyFactoryImpl)RoleMembershipPolicyFactoryUtil.getRoleMembershipPolicyFactory();
    roleMembershipPolicyFactoryImpl.setRoleMembershipPolicy(null);
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) {
    SiteMembershipPolicyFactoryImpl siteMembershipPolicyFactoryImpl=(SiteMembershipPolicyFactoryImpl)SiteMembershipPolicyFactoryUtil.getSiteMembershipPolicyFactory();
    siteMembershipPolicyFactoryImpl.setSiteMembershipPolicy(null);
  }
  if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) {
    UserGroupMembershipPolicyFactoryImpl userGroupMembershipPolicyFactoryImpl=(UserGroupMembershipPolicyFactoryImpl)UserGroupMembershipPolicyFactoryUtil.getUserGroupMembershipPolicyFactory();
    userGroupMembershipPolicyFactoryImpl.setUserGroupMembershipPolicy(null);
  }
  if (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) {
    ToolkitWrapper toolkitWrapper=(ToolkitWrapper)PwdToolkitUtil.getToolkit();
    toolkitWrapper.setToolkit(null);
  }
  if (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) {
    PhoneNumberFormatWrapper phoneNumberFormatWrapper=(PhoneNumberFormatWrapper)PhoneNumberFormatUtil.getPhoneNumberFormat();
    phoneNumberFormatWrapper.setPhoneNumberFormat(null);
  }
  if (portalProperties.containsKey(PropsKeys.SANITIZER_IMPL)) {
    SanitizerContainer sanitizerContainer=_sanitizerContainerMap.remove(servletContextName);
    if (sanitizerContainer != null) {
      sanitizerContainer.unregisterSanitizers();
    }
  }
  if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) {
    EmailAddressGeneratorFactory.setInstance(null);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) {
    EmailAddressValidatorFactory.setInstance(null);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) {
    FullNameGeneratorFactory.setInstance(null);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) {
    FullNameValidatorFactory.setInstance(null);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_GENERATOR)) {
    ScreenNameGeneratorFactory.setInstance(null);
  }
  if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)) {
    ScreenNameValidatorFactory.setInstance(null);
  }
  Set<String> liferayFilterClassNames=LiferayFilterTracker.getClassNames();
  for (  String liferayFilterClassName : liferayFilterClassNames) {
    if (!portalProperties.containsKey(liferayFilterClassName)) {
      continue;
    }
    boolean filterEnabled=GetterUtil.getBoolean(PropsUtil.get(liferayFilterClassName));
    Set<LiferayFilter> liferayFilters=LiferayFilterTracker.getLiferayFilters(liferayFilterClassName);
    for (    LiferayFilter liferayFilter : liferayFilters) {
      liferayFilter.setFilterEnabled(filterEnabled);
    }
  }
}
