{
  List<Element> languagePropertiesElements=parentElement.elements("language-properties");
  for (  Element languagePropertiesElement : languagePropertiesElements) {
    String languagePropertiesLocation=languagePropertiesElement.getText();
    Locale locale=null;
    try {
      locale=getLocale(languagePropertiesLocation);
    }
 catch (    Exception e) {
      if (_log.isInfoEnabled()) {
        _log.info("Ignoring " + languagePropertiesLocation,e);
      }
      continue;
    }
    if (locale != null) {
      if (!checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_LANGUAGE_PROPERTIES_LOCALE,portletClassLoader,locale,"Rejecting locale " + locale)) {
        continue;
      }
    }
 else {
      locale=new Locale(StringPool.BLANK);
    }
    URL url=portletClassLoader.getResource(languagePropertiesLocation);
    if (url == null) {
      continue;
    }
    String languageId=LocaleUtil.toLanguageId(locale);
    try (InputStream inputStream=url.openStream()){
      ResourceBundle resourceBundle=new LiferayResourceBundle(inputStream,StringPool.UTF8);
      Map<String,Object> properties=new HashMap<>();
      properties.put("language.id",languageId);
      registerService(servletContextName,languagePropertiesLocation,ResourceBundle.class,resourceBundle,properties);
    }
   }
}
