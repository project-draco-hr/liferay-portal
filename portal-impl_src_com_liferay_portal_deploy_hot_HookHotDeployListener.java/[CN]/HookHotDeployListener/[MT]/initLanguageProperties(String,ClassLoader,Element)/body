{
  List<Element> languagePropertiesElements=parentElement.elements("language-properties");
  ResourceBundle parentResourceBundle=null;
  for (  Element languagePropertiesElement : languagePropertiesElements) {
    String languagePropertiesLocation=languagePropertiesElement.getText();
    Locale locale=getLocale(languagePropertiesLocation);
    if (locale != null) {
      if (!checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_LANGUAGE_PROPERTIES_LOCALE,portletClassLoader,locale,"Rejecting locale " + locale)) {
        continue;
      }
    }
    ResourceBundle languageResourceBundle;
    URL url;
    try {
      url=portletClassLoader.getResource(languagePropertiesLocation);
      if (url == null) {
        continue;
      }
    }
 catch (    Exception e) {
      _log.error("Unable to read " + languagePropertiesLocation,e);
      continue;
    }
    if (parentResourceBundle != null) {
      languageResourceBundle=new LiferayResourceBundle(parentResourceBundle,url.openStream(),StringPool.UTF8);
    }
 else {
      languageResourceBundle=new LiferayResourceBundle(url.openStream(),StringPool.UTF8);
    }
    if (locale != null) {
      String languageId=LocaleUtil.toLanguageId(locale);
      Properties serviceProperties=new Properties();
      serviceProperties.put("language.id",languageId);
      registerService(servletContextName,languagePropertiesLocation,ResourceBundle.class,languageResourceBundle,serviceProperties);
    }
 else     if (languageResourceBundle != null) {
      parentResourceBundle=languageResourceBundle;
    }
  }
}
