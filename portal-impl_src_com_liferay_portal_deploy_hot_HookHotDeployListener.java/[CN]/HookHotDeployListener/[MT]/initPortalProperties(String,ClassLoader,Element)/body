{
  String portalPropertiesLocation=parentElement.elementText("portal-properties");
  if (Validator.isNull(portalPropertiesLocation)) {
    return;
  }
  Configuration portalPropertiesConfiguration=null;
  try {
    String name=portalPropertiesLocation;
    int pos=name.lastIndexOf(".properties");
    if (pos != -1) {
      name=name.substring(0,pos);
    }
    portalPropertiesConfiguration=ConfigurationFactoryUtil.getConfiguration(portletClassLoader,name);
  }
 catch (  Exception e) {
    _log.error("Unable to read " + portalPropertiesLocation,e);
  }
  if (portalPropertiesConfiguration == null) {
    return;
  }
  Properties portalProperties=portalPropertiesConfiguration.getProperties();
  if (portalProperties.isEmpty()) {
    return;
  }
  Set<Object> set=portalProperties.keySet();
  Iterator<Object> iterator=set.iterator();
  while (iterator.hasNext()) {
    String key=(String)iterator.next();
    SecurityManager securityManager=System.getSecurityManager();
    if (securityManager != null) {
      Permission permission=new PortalHookPermission(PACLConstants.PORTAL_HOOK_PERMISSION_PORTAL_PROPERTIES_KEY,portletClassLoader,key);
      try {
        securityManager.checkPermission(permission);
      }
 catch (      SecurityException se) {
        if (_log.isInfoEnabled()) {
          _log.info("Rejecting portal.properties key " + key);
        }
        iterator.remove();
      }
    }
  }
  Properties unfilteredPortalProperties=(Properties)portalProperties.clone();
  portalProperties.remove(PropsKeys.RELEASE_INFO_BUILD_NUMBER);
  portalProperties.remove(PropsKeys.RELEASE_INFO_PREVIOUS_BUILD_NUMBER);
  portalProperties.remove(PropsKeys.UPGRADE_PROCESSES);
  _portalPropertiesMap.put(servletContextName,portalProperties);
  initPortalProperties(servletContextName,portletClassLoader,portalProperties,unfilteredPortalProperties);
  initAuthFailures(servletContextName,portletClassLoader,portalProperties);
  initAutoDeployListeners(servletContextName,portletClassLoader,portalProperties);
  initAutoLogins(servletContextName,portletClassLoader,portalProperties);
  initAuthenticators(servletContextName,portletClassLoader,portalProperties);
  initHotDeployListeners(servletContextName,portletClassLoader,portalProperties);
  initModelListeners(servletContextName,portletClassLoader,portalProperties);
  initEvents(servletContextName,portletClassLoader,portalProperties);
}
