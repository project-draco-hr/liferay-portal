{
  for (  String key : _PROPS_VALUES_BOOLEAN) {
    String fieldName=StringUtil.replace(StringUtil.toUpperCase(key),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      Boolean value=Boolean.valueOf(GetterUtil.getBoolean(PropsUtil.get(key)));
      field.setBoolean(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  for (  String key : _PROPS_VALUES_INTEGER) {
    String fieldName=StringUtil.replace(StringUtil.toUpperCase(key),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      Integer value=Integer.valueOf(GetterUtil.getInteger(PropsUtil.get(key)));
      field.setInt(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  for (  String key : _PROPS_VALUES_LONG) {
    String fieldName=StringUtil.replace(StringUtil.toUpperCase(key),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      Long value=Long.valueOf(GetterUtil.getLong(PropsUtil.get(key)));
      field.setLong(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  for (  String key : _PROPS_VALUES_STRING) {
    String fieldName=StringUtil.replace(StringUtil.toUpperCase(key),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      String value=GetterUtil.getString(PropsUtil.get(key));
      field.set(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  resetPortalPropertiesStringArray(servletContextName,portalProperties,initPhase,_PROPS_VALUES_MERGE_STRING_ARRAY,_mergeStringArraysContainerMap);
  resetPortalPropertiesStringArray(servletContextName,portalProperties,initPhase,_PROPS_VALUES_OVERRIDE_STRING_ARRAY,_overrideStringArraysContainerMap);
  if (containsKey(portalProperties,LOCALES) || containsKey(portalProperties,LOCALES_BETA)) {
    PropsValues.LOCALES=PropsUtil.getArray(LOCALES);
    LanguageUtil.init();
  }
  if (containsKey(portalProperties,LOCALES_ENABLED)) {
    PropsValues.LOCALES_ENABLED=PropsUtil.getArray(LOCALES_ENABLED);
    LanguageUtil.init();
  }
  if (containsKey(portalProperties,AUTH_TOKEN_IGNORE_ACTIONS)) {
    AuthTokenWhitelistUtil.resetPortletCSRFWhitelistActions();
  }
  if (containsKey(portalProperties,AUTH_TOKEN_IGNORE_ORIGINS)) {
    AuthTokenWhitelistUtil.resetOriginCSRFWhitelist();
  }
  if (containsKey(portalProperties,AUTH_TOKEN_IGNORE_PORTLETS)) {
    AuthTokenWhitelistUtil.resetPortletCSRFWhitelist();
  }
  if (containsKey(portalProperties,PORTLET_ADD_DEFAULT_RESOURCE_CHECK_WHITELIST)) {
    AuthTokenWhitelistUtil.resetPortletInvocationWhitelist();
  }
  if (containsKey(portalProperties,PORTLET_ADD_DEFAULT_RESOURCE_CHECK_WHITELIST_ACTIONS)) {
    AuthTokenWhitelistUtil.resetPortletInvocationWhitelistActions();
  }
  if (containsKey(portalProperties,PORTLET_INTERRUPTED_REQUEST_WHITELIST)) {
    InterruptedPortletRequestWhitelistUtil.resetPortletInvocationWhitelist();
  }
  if (containsKey(portalProperties,PORTLET_INTERRUPTED_REQUEST_WHITELIST_ACTIONS)) {
    InterruptedPortletRequestWhitelistUtil.resetPortletInvocationWhitelistActions();
  }
  CacheUtil.clearCache();
  JavaScriptBundleUtil.clearCache();
}
