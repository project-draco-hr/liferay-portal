{
  for (  String key : _PROPS_VALUES_BOOLEAN) {
    String fieldName=StringUtil.replace(key.toUpperCase(),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      Boolean value=Boolean.valueOf(GetterUtil.getBoolean(PropsUtil.get(key)));
      field.setBoolean(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  for (  String key : _PROPS_VALUES_INTEGER) {
    String fieldName=StringUtil.replace(key.toUpperCase(),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      Integer value=Integer.valueOf(GetterUtil.getInteger(PropsUtil.get(key)));
      field.setInt(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  for (  String key : _PROPS_VALUES_LONG) {
    String fieldName=StringUtil.replace(key.toUpperCase(),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      Long value=Long.valueOf(GetterUtil.getLong(PropsUtil.get(key)));
      field.setLong(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  for (  String key : _PROPS_VALUES_STRING) {
    String fieldName=StringUtil.replace(key.toUpperCase(),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      String value=GetterUtil.getString(PropsUtil.get(key));
      field.set(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  for (  String key : _PROPS_VALUES_STRING_MERGED_ARRAY) {
    String fieldName=StringUtil.replace(key.toUpperCase(),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      StringMergedArraysContainer stringMergedArraysContainer=_stringMergedArraysContainerMap.get(key);
      String[] value=null;
      if (initPhase) {
        value=PropsUtil.getArray(key);
      }
      stringMergedArraysContainer.setPluginStringArray(servletContextName,value);
      value=stringMergedArraysContainer.getMergedStringArray();
      field.set(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  for (  String key : _PROPS_VALUES_STRING_OVERRIDE_ARRAY) {
    String fieldName=StringUtil.replace(key.toUpperCase(),CharPool.PERIOD,CharPool.UNDERLINE);
    if (!containsKey(portalProperties,key)) {
      continue;
    }
    try {
      Field field=PropsValues.class.getField(fieldName);
      StringOverrideArraysContainer stringOverrideArraysContainer=_stringOverrideArraysContainerMap.get(key);
      String[] value=null;
      if (initPhase) {
        if (stringOverrideArraysContainer.isOverridden()) {
          _log.error("Error setting field " + fieldName + ": Already overridden");
          continue;
        }
        value=StringUtil.split(portalProperties.getProperty(key));
      }
      stringOverrideArraysContainer.setPluginStringArray(servletContextName,value);
      value=stringOverrideArraysContainer.getOverrideStringArray();
      field.set(null,value);
    }
 catch (    Exception e) {
      _log.error("Error setting field " + fieldName + ": "+ e.getMessage());
    }
  }
  if (containsKey(portalProperties,LOCALES) || containsKey(portalProperties,LOCALES_BETA)) {
    PropsValues.LOCALES=PropsUtil.getArray(LOCALES);
    LanguageUtil.init();
  }
  CacheUtil.clearCache();
  JavaScriptBundleUtil.clearCache();
}
