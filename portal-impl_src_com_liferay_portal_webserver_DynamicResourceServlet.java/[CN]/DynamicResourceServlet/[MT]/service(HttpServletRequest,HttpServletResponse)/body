{
  String servletPath=request.getServletPath();
  String pathInfo=URLDecoder.decode(request.getPathInfo(),StringPool.UTF8);
  String path=servletPath.concat(pathInfo);
  if (!isAllowedPath(path)) {
    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  File rootDir=_tempDir;
  File file=new File(rootDir,path);
  if (servletPath.equals(SpriteProcessor.PATH)) {
    String spriteRootDir=PropsValues.SPRITE_ROOT_DIR;
    if (Validator.isNotNull(spriteRootDir)) {
      rootDir=new File(spriteRootDir);
      file=new File(rootDir,pathInfo);
    }
  }
  String canonicalPath=file.getCanonicalPath();
  if (!file.exists() || file.isDirectory() || !file.canRead()|| file.isHidden()|| !canonicalPath.startsWith(rootDir.getCanonicalPath())) {
    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  long lastModified=file.lastModified();
  if (lastModified > 0) {
    long ifModifiedSince=request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);
    if ((ifModifiedSince > 0) && (ifModifiedSince == lastModified)) {
      response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
      return;
    }
  }
  if (lastModified > 0) {
    response.setDateHeader(HttpHeaders.LAST_MODIFIED,lastModified);
  }
  String fileName=file.getName();
  String contentType=MimeTypesUtil.getContentType(fileName);
  if (isSupportsRangeHeader(contentType)) {
    sendFileWithRangeHeader(request,response,fileName,new FileInputStream(file),file.length(),contentType);
  }
 else {
    ServletResponseUtil.sendFile(request,response,fileName,new FileInputStream(file),file.length(),contentType);
  }
}
