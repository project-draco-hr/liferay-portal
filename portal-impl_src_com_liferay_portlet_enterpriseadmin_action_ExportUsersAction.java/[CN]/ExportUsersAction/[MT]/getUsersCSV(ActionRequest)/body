{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  PermissionChecker permissionChecker=themeDisplay.getPermissionChecker();
  if (!PortalPermissionUtil.contains(permissionChecker,ActionKeys.EXPORT_USER)) {
    return StringPool.BLANK;
  }
  long companyId=themeDisplay.getCompanyId();
  String exportProgressId=ParamUtil.getString(actionRequest,"exportProgressId");
  ProgressTracker progressTracker=new ProgressTracker(actionRequest,exportProgressId);
  progressTracker.start();
  HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
  PortletURLFactory portletURLFactory=PortletURLFactoryUtil.getPortletURLFactory();
  PortletURL portletURL=portletURLFactory.create(request,PortletKeys.ENTERPRISE_ADMIN_USERS,themeDisplay.getPlid(),PortletRequest.RENDER_PHASE);
  UserSearch userSearch=new UserSearch(actionRequest,portletURL);
  UserSearchTerms searchTerms=(UserSearchTerms)userSearch.getSearchTerms();
  if (!searchTerms.isAdvancedSearch() && !searchTerms.hasActive()) {
    searchTerms.setActive(Boolean.TRUE);
  }
  long organizationId=searchTerms.getOrganizationId();
  long roleId=searchTerms.getRoleId();
  long userGroupId=searchTerms.getUserGroupId();
  LinkedHashMap<String,Object> userParams=new LinkedHashMap<String,Object>();
  if (organizationId > 0) {
    userParams.put("usersOrgs",new Long(organizationId));
  }
  if (roleId > 0) {
    userParams.put("usersRoles",new Long(roleId));
  }
  if (userGroupId > 0) {
    userParams.put("usersUserGroups",new Long(userGroupId));
  }
  List<User> users=null;
  if (searchTerms.isAdvancedSearch()) {
    users=UserLocalServiceUtil.search(companyId,searchTerms.getFirstName(),searchTerms.getMiddleName(),searchTerms.getLastName(),searchTerms.getScreenName(),searchTerms.getEmailAddress(),searchTerms.getActive(),userParams,searchTerms.isAndOperator(),QueryUtil.ALL_POS,QueryUtil.ALL_POS,(OrderByComparator)null);
  }
 else {
    users=UserLocalServiceUtil.search(companyId,searchTerms.getKeywords(),searchTerms.getActive(),userParams,QueryUtil.ALL_POS,QueryUtil.ALL_POS,(OrderByComparator)null);
  }
  int percentage=10;
  int total=users.size();
  progressTracker.updateProgress(percentage);
  if (total == 0) {
    return StringPool.BLANK;
  }
  StringBundler sb=new StringBundler(users.size() * 4);
  Iterator<User> itr=users.iterator();
  for (int i=0; itr.hasNext(); i++) {
    User user=itr.next();
    exportUser(user,sb);
    percentage=Math.min(10 + (i * 90) / total,99);
    progressTracker.updateProgress(percentage);
  }
  progressTracker.finish();
  return sb.toString();
}
