{
  List<String> contents=new ArrayList<>();
  Iterator<Node> iterator=getIvyXmlDependenciesIterator();
  if (iterator != null) {
    while (iterator.hasNext()) {
      Node dependencyNode=iterator.next();
      String conf=(String)dependencyNode.attribute("conf");
      if (Validator.isNotNull(conf) && !conf.startsWith("default") && !conf.startsWith("internal")) {
        continue;
      }
      String group=(String)dependencyNode.attribute("org");
      String name=(String)dependencyNode.attribute("name");
      String version=(String)dependencyNode.attribute("rev");
      boolean optional=false;
      boolean transitive=true;
      if (Validator.isNotNull(conf)) {
        if (conf.equals("default->master")) {
          transitive=false;
        }
 else         if (conf.equals("internal->master")) {
          optional=true;
        }
      }
      contents.add(wrapDependency(JavaPlugin.COMPILE_CONFIGURATION_NAME,group,name,version,transitive,optional));
    }
  }
  String requiredDeploymentContexts=_pluginPackageProperties.getProperty("required-deployment-contexts");
  if (Validator.isNotNull(requiredDeploymentContexts)) {
    String[] requiredDeploymentContextsArray=requiredDeploymentContexts.split(",");
    for (    String deploymentContext : requiredDeploymentContextsArray) {
      String serviceJarFileName=getServiceJarFileName(deploymentContext);
      if (FileUtil.exists(_project,serviceJarFileName)) {
        contents.add(wrapServiceJarDependency(JavaPlugin.COMPILE_CONFIGURATION_NAME,serviceJarFileName));
      }
    }
  }
  String importShared=getBuildXmlProperty("import.shared");
  if (Validator.isNotNull(importShared)) {
    Map<String,String> projectFileNamePathMap=new HashMap<>();
    Project rootProject=_project.getRootProject();
    File projectDir=_project.getProjectDir();
    File parentDir=projectDir.getParentFile();
    for (    Project project : rootProject.getSubprojects()) {
      File dir=project.getProjectDir();
      projectFileNamePathMap.put(dir.getName(),project.getPath());
      String projectFileName=FileUtil.relativize(project.getProjectDir(),parentDir);
      projectFileName=projectFileName.replace('\\','/');
      projectFileNamePathMap.put(projectFileName,project.getPath());
    }
    String[] importSharedArray=importShared.split(",");
    for (    String projectFileName : importSharedArray) {
      String projectPath=projectFileNamePathMap.get(projectFileName);
      if (Validator.isNull(projectPath)) {
        throw new GradleException("Unable to find project dependency " + projectFileName);
      }
      contents.add(wrapProjectDependency(JavaPlugin.COMPILE_CONFIGURATION_NAME,projectPath));
    }
  }
  Collections.sort(contents);
  return contents;
}
