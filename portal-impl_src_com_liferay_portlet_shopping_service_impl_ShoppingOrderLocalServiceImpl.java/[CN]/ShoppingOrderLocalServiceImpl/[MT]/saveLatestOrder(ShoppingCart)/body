{
  Map<ShoppingCartItem,Integer> items=cart.getItems();
  Date now=new Date();
  ShoppingPreferences shoppingPrefs=ShoppingPreferences.getInstance(cart.getCompanyId(),cart.getGroupId());
  if (!ShoppingUtil.meetsMinOrder(shoppingPrefs,items)) {
    throw new CartMinOrderException();
  }
  ShoppingOrder order=getLatestOrder(cart.getUserId(),cart.getGroupId());
  order.setCreateDate(now);
  order.setModifiedDate(now);
  order.setPpPaymentStatus(ShoppingOrderConstants.STATUS_CHECKOUT);
  shoppingOrderPersistence.update(order,false);
  boolean requiresShipping=false;
  Iterator<Map.Entry<ShoppingCartItem,Integer>> itr=items.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry<ShoppingCartItem,Integer> entry=itr.next();
    ShoppingCartItem cartItem=entry.getKey();
    Integer count=entry.getValue();
    ShoppingItem item=cartItem.getItem();
    if (item.isRequiresShipping()) {
      requiresShipping=true;
    }
    long orderItemId=counterLocalService.increment();
    ShoppingOrderItem orderItem=shoppingOrderItemPersistence.create(orderItemId);
    orderItem.setOrderId(order.getOrderId());
    orderItem.setItemId(cartItem.getCartItemId());
    orderItem.setSku(item.getSku());
    orderItem.setName(item.getName());
    orderItem.setDescription(item.getDescription());
    orderItem.setProperties(item.getProperties());
    orderItem.setPrice(ShoppingUtil.calculateActualPrice(item,count.intValue()) / count.intValue());
    orderItem.setQuantity(count.intValue());
    shoppingOrderItemPersistence.update(orderItem,false);
  }
  order.setModifiedDate(new Date());
  order.setTax(ShoppingUtil.calculateTax(items,order.getBillingState()));
  order.setShipping(ShoppingUtil.calculateAlternativeShipping(items,cart.getAltShipping()));
  order.setAltShipping(shoppingPrefs.getAlternativeShippingName(cart.getAltShipping()));
  order.setRequiresShipping(requiresShipping);
  order.setInsure(cart.isInsure());
  order.setInsurance(ShoppingUtil.calculateInsurance(items));
  order.setCouponCodes(cart.getCouponCodes());
  order.setCouponDiscount(ShoppingUtil.calculateCouponDiscount(items,order.getBillingState(),cart.getCoupon()));
  order.setSendOrderEmail(true);
  order.setSendShippingEmail(true);
  shoppingOrderPersistence.update(order,false);
  return order;
}
