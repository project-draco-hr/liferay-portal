{
  PermissionCheckerImpl permissionChecker=null;
  try {
    LayoutsPublisherRequest layoutsPublisherRequest=(LayoutsPublisherRequest)JSONUtil.deserialize(message);
    long userId=layoutsPublisherRequest.getUserId();
    long stagingGroupId=layoutsPublisherRequest.getStagingGroupId();
    long liveGroupId=layoutsPublisherRequest.getLiveGroupId();
    boolean privateLayout=layoutsPublisherRequest.isPrivateLayout();
    Map<Long,Boolean> layoutIdMap=layoutsPublisherRequest.getLayoutIdMap();
    boolean remotePrivateLayout=layoutsPublisherRequest.isRemotePrivateLayout();
    Map<String,String[]> parameterMap=layoutsPublisherRequest.getParameterMap();
    String remoteAddress=layoutsPublisherRequest.getRemoteAddress();
    int remotePort=layoutsPublisherRequest.getRemotePort();
    boolean secureConnection=layoutsPublisherRequest.isSecureConnection();
    Date startDate=layoutsPublisherRequest.getStartDate();
    Date endDate=layoutsPublisherRequest.getEndDate();
    PrincipalThreadLocal.setName(userId);
    User user=UserLocalServiceUtil.getUserById(userId);
    permissionChecker=PermissionCheckerFactory.create(user,false);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    StagingUtil.copyRemoteLayouts(stagingGroupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,secureConnection,liveGroupId,remotePrivateLayout,parameterMap,startDate,endDate);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    try {
      PermissionCheckerFactory.recycle(permissionChecker);
    }
 catch (    Exception e) {
    }
  }
}
