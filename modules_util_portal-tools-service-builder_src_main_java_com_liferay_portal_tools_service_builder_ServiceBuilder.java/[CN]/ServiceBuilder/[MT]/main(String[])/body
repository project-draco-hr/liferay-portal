{
  Map<String,String> arguments=ArgumentsUtil.parseArguments(args);
  String apiDirName=arguments.get("service.api.dir");
  boolean autoImportDefaultReferences=GetterUtil.getBoolean(arguments.get("service.auto.import.default.references"),true);
  boolean autoNamespaceTables=GetterUtil.getBoolean(arguments.get("service.auto.namespace.tables"));
  String beanLocatorUtil=arguments.get("service.bean.locator.util");
  long buildNumber=GetterUtil.getLong(arguments.get("service.build.number"),1);
  boolean buildNumberIncrement=GetterUtil.getBoolean(arguments.get("service.build.number.increment"),true);
  String hbmFileName=arguments.get("service.hbm.file");
  String implDirName=arguments.get("service.impl.dir");
  String inputFileName=arguments.get("service.input.file");
  String[] modelHintsConfigs=StringUtil.split(GetterUtil.getString(arguments.get("service.model.hints.configs"),StringUtil.merge(ServiceBuilderArgs.MODEL_HINTS_CONFIGS)));
  String modelHintsFileName=arguments.get("service.model.hints.file");
  boolean osgiModule=GetterUtil.getBoolean(arguments.get("service.osgi.module"));
  String pluginName=arguments.get("service.plugin.name");
  String propsUtil=arguments.get("service.props.util");
  String[] readOnlyPrefixes=StringUtil.split(GetterUtil.getString(arguments.get("service.read.only.prefixes"),StringUtil.merge(ServiceBuilderArgs.READ_ONLY_PREFIXES)));
  String[] resourceActionsConfigs=StringUtil.split(GetterUtil.getString(arguments.get("service.resource.actions.configs"),StringUtil.merge(ServiceBuilderArgs.RESOURCE_ACTION_CONFIGS)));
  String resourcesDirName=arguments.get("service.resources.dir");
  String springFileName=arguments.get("service.spring.file");
  String[] springNamespaces=StringUtil.split(arguments.get("service.spring.namespaces"));
  String sqlDirName=arguments.get("service.sql.dir");
  String sqlFileName=arguments.get("service.sql.file");
  String sqlIndexesFileName=arguments.get("service.sql.indexes.file");
  String sqlSequencesFileName=arguments.get("service.sql.sequences.file");
  String targetEntityName=arguments.get("service.target.entity.name");
  String testDirName=arguments.get("service.test.dir");
  Set<String> resourceActionModels=readResourceActionModels(implDirName,resourcesDirName,resourceActionsConfigs);
  ModelHintsUtil modelHintsUtil=new ModelHintsUtil();
  ModelHintsImpl modelHintsImpl=new ModelHintsImpl();
  modelHintsImpl.setModelHintsConfigs(modelHintsConfigs);
  modelHintsImpl.afterPropertiesSet();
  modelHintsUtil.setModelHints(modelHintsImpl);
  try {
    ServiceBuilder serviceBuilder=new ServiceBuilder(apiDirName,autoImportDefaultReferences,autoNamespaceTables,beanLocatorUtil,buildNumber,buildNumberIncrement,hbmFileName,implDirName,inputFileName,modelHintsFileName,osgiModule,pluginName,propsUtil,readOnlyPrefixes,resourceActionModels,resourcesDirName,springFileName,springNamespaces,sqlDirName,sqlFileName,sqlIndexesFileName,sqlSequencesFileName,targetEntityName,testDirName,true);
    String modifiedFileNames=StringUtil.merge(serviceBuilder.getModifiedFileNames());
    System.setProperty(ServiceBuilderArgs.OUTPUT_KEY_MODIFIED_FILES,modifiedFileNames);
  }
 catch (  Exception e) {
    if (e instanceof ServiceBuilderException) {
      System.err.println(e.getMessage());
    }
 else {
      StringBundler sb=new StringBundler(160);
      sb.append("Please set these arguments. Sample values are:\n");
      sb.append("\n");
      sb.append("\tservice.api.dir=${basedir}/../portal-kernel/src\n");
      sb.append("\tservice.auto.import.default.references=true\n");
      sb.append("\tservice.auto.namespace.tables=false\n");
      sb.append("\tservice.bean.locator.util=com.liferay.portal.kernel.bean.PortalBeanLocatorUtil\n");
      sb.append("\tservice.build.number=1\n");
      sb.append("\tservice.build.number.increment=true\n");
      sb.append("\tservice.hbm.file=${basedir}/src/META-INF/portal-hbm.xml\n");
      sb.append("\tservice.impl.dir=${basedir}/src\n");
      sb.append("\tservice.input.file=${service.file}\n");
      sb.append("\tservice.model.hints.configs=");
      sb.append(StringUtil.merge(ServiceBuilderArgs.MODEL_HINTS_CONFIGS));
      sb.append("\n");
      sb.append("\tservice.model.hints.file=${basedir}/src/META-INF/portal-model-hints.xml\n");
      sb.append("\tservice.osgi.module=false\n");
      sb.append("\tservice.plugin.name=\n");
      sb.append("\tservice.props.util=com.liferay.portal.util.PropsUtil\n");
      sb.append("\tservice.read.only.prefixes=");
      sb.append(StringUtil.merge(ServiceBuilderArgs.READ_ONLY_PREFIXES));
      sb.append("\n");
      sb.append("\tservice.resource.actions.configs=");
      sb.append(StringUtil.merge(ServiceBuilderArgs.RESOURCE_ACTION_CONFIGS));
      sb.append("\n");
      sb.append("\tservice.resources.dir=${basedir}/src\n");
      sb.append("\tservice.spring.file=${basedir}/src/META-INF/portal-spring.xml\n");
      sb.append("\tservice.spring.namespaces=beans\n");
      sb.append("\tservice.sql.dir=${basedir}/../sql\n");
      sb.append("\tservice.sql.file=portal-tables.sql\n");
      sb.append("\tservice.sql.indexes.file=indexes.sql\n");
      sb.append("\tservice.sql.sequences.file=sequences.sql\n");
      sb.append("\tservice.target.entity.name=${service.target.entity.name}\n");
      sb.append("\tservice.test.dir=${basedir}/test/integration\n");
      sb.append("\n");
      sb.append("You can also customize the generated code by overriding the default templates with these optional system properties:\n");
      sb.append("\n");
      sb.append("\t-Dservice.tpl.bad_alias_names=");
      sb.append(_TPL_ROOT);
      sb.append("bad_alias_names.txt\n");
      sb.append("\t-Dservice.tpl.bad_column_names=");
      sb.append(_TPL_ROOT);
      sb.append("bad_column_names.txt\n");
      sb.append("\t-Dservice.tpl.bad_json_types=");
      sb.append(_TPL_ROOT);
      sb.append("bad_json_types.txt\n");
      sb.append("\t-Dservice.tpl.bad_table_names=");
      sb.append(_TPL_ROOT);
      sb.append("bad_table_names.txt\n");
      sb.append("\t-Dservice.tpl.base_mode_impl=");
      sb.append(_TPL_ROOT);
      sb.append("base_mode_impl.ftl\n");
      sb.append("\t-Dservice.tpl.blob_model=");
      sb.append(_TPL_ROOT);
      sb.append("blob_model.ftl\n");
      sb.append("\t-Dservice.tpl.copyright.txt=copyright.txt\n");
      sb.append("\t-Dservice.tpl.ejb_pk=");
      sb.append(_TPL_ROOT);
      sb.append("ejb_pk.ftl\n");
      sb.append("\t-Dservice.tpl.exception=");
      sb.append(_TPL_ROOT);
      sb.append("exception.ftl\n");
      sb.append("\t-Dservice.tpl.extended_model=");
      sb.append(_TPL_ROOT);
      sb.append("extended_model.ftl\n");
      sb.append("\t-Dservice.tpl.extended_model_base_impl=");
      sb.append(_TPL_ROOT);
      sb.append("extended_model_base_impl.ftl\n");
      sb.append("\t-Dservice.tpl.extended_model_impl=");
      sb.append(_TPL_ROOT);
      sb.append("extended_model_impl.ftl\n");
      sb.append("\t-Dservice.tpl.finder=");
      sb.append(_TPL_ROOT);
      sb.append("finder.ftl\n");
      sb.append("\t-Dservice.tpl.finder_base_impl=");
      sb.append(_TPL_ROOT);
      sb.append("finder_base_impl.ftl\n");
      sb.append("\t-Dservice.tpl.finder_util=");
      sb.append(_TPL_ROOT);
      sb.append("finder_util.ftl\n");
      sb.append("\t-Dservice.tpl.hbm_xml=");
      sb.append(_TPL_ROOT);
      sb.append("hbm_xml.ftl\n");
      sb.append("\t-Dservice.tpl.json_js=");
      sb.append(_TPL_ROOT);
      sb.append("json_js.ftl\n");
      sb.append("\t-Dservice.tpl.json_js_method=");
      sb.append(_TPL_ROOT);
      sb.append("json_js_method.ftl\n");
      sb.append("\t-Dservice.tpl.model=");
      sb.append(_TPL_ROOT);
      sb.append("model.ftl\n");
      sb.append("\t-Dservice.tpl.model_cache=");
      sb.append(_TPL_ROOT);
      sb.append("model_cache.ftl\n");
      sb.append("\t-Dservice.tpl.model_hints_xml=");
      sb.append(_TPL_ROOT);
      sb.append("model_hints_xml.ftl\n");
      sb.append("\t-Dservice.tpl.model_impl=");
      sb.append(_TPL_ROOT);
      sb.append("model_impl.ftl\n");
      sb.append("\t-Dservice.tpl.model_soap=");
      sb.append(_TPL_ROOT);
      sb.append("model_soap.ftl\n");
      sb.append("\t-Dservice.tpl.model_wrapper=");
      sb.append(_TPL_ROOT);
      sb.append("model_wrapper.ftl\n");
      sb.append("\t-Dservice.tpl.persistence=");
      sb.append(_TPL_ROOT);
      sb.append("persistence.ftl\n");
      sb.append("\t-Dservice.tpl.persistence_impl=");
      sb.append(_TPL_ROOT);
      sb.append("persistence_impl.ftl\n");
      sb.append("\t-Dservice.tpl.persistence_util=");
      sb.append(_TPL_ROOT);
      sb.append("persistence_util.ftl\n");
      sb.append("\t-Dservice.tpl.props=");
      sb.append(_TPL_ROOT);
      sb.append("props.ftl\n");
      sb.append("\t-Dservice.tpl.service=");
      sb.append(_TPL_ROOT);
      sb.append("service.ftl\n");
      sb.append("\t-Dservice.tpl.service_base_impl=");
      sb.append(_TPL_ROOT);
      sb.append("service_base_impl.ftl\n");
      sb.append("\t-Dservice.tpl.service_clp=");
      sb.append(_TPL_ROOT);
      sb.append("service_clp.ftl\n");
      sb.append("\t-Dservice.tpl.service_clp_invoker=");
      sb.append(_TPL_ROOT);
      sb.append("service_clp_invoker.ftl\n");
      sb.append("\t-Dservice.tpl.service_clp_message_listener=");
      sb.append(_TPL_ROOT);
      sb.append("service_clp_message_listener.ftl\n");
      sb.append("\t-Dservice.tpl.service_clp_serializer=");
      sb.append(_TPL_ROOT);
      sb.append("service_clp_serializer.ftl\n");
      sb.append("\t-Dservice.tpl.service_http=");
      sb.append(_TPL_ROOT);
      sb.append("service_http.ftl\n");
      sb.append("\t-Dservice.tpl.service_impl=");
      sb.append(_TPL_ROOT);
      sb.append("service_impl.ftl\n");
      sb.append("\t-Dservice.tpl.service_props_util=");
      sb.append(_TPL_ROOT);
      sb.append("service_props_util.ftl\n");
      sb.append("\t-Dservice.tpl.service_soap=");
      sb.append(_TPL_ROOT);
      sb.append("service_soap.ftl\n");
      sb.append("\t-Dservice.tpl.service_util=");
      sb.append(_TPL_ROOT);
      sb.append("service_util.ftl\n");
      sb.append("\t-Dservice.tpl.service_wrapper=");
      sb.append(_TPL_ROOT);
      sb.append("service_wrapper.ftl\n");
      sb.append("\t-Dservice.tpl.spring_xml=");
      sb.append(_TPL_ROOT);
      sb.append("spring_xml.ftl\n");
      sb.append("\t-Dservice.tpl.spring_xml_session=");
      sb.append(_TPL_ROOT);
      sb.append("spring_xml_session.ftl");
      System.out.println(sb.toString());
    }
    ArgumentsUtil.processMainException(arguments,e);
  }
  try {
    ClearThreadLocalUtil.clearThreadLocal();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  Introspector.flushCaches();
}
