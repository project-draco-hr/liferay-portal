{
  List<String> cacheFieldMethods=new ArrayList<>();
  for (  JavaField javaField : javaClass.getFields()) {
    Annotation[] annotations=javaField.getAnnotations();
    for (    Annotation annotation : annotations) {
      Type type=annotation.getType();
      String className=type.getFullyQualifiedName();
      if (!className.equals(CacheField.class.getName())) {
        continue;
      }
      if (!GetterUtil.getBoolean(annotation.getNamedParameter("propagateToInterface"))) {
        String methodName=null;
        Object namedParameter=annotation.getNamedParameter("methodName");
        if (namedParameter != null) {
          methodName=StringUtil.unquote(StringUtil.trim(namedParameter.toString()));
        }
        if (Validator.isNull(methodName)) {
          methodName=TextFormatter.format(getVariableName(javaField),TextFormatter.G);
        }
        cacheFieldMethods.add("get".concat(methodName));
        cacheFieldMethods.add("set".concat(methodName));
      }
      break;
    }
  }
  List<JavaMethod> methods=new ArrayList<>();
  for (  JavaMethod javaMethod : javaClass.getMethods(superclasses)) {
    if (!cacheFieldMethods.contains(javaMethod.getName())) {
      methods.add(javaMethod);
    }
  }
  for (  JavaMethod method : methods) {
    Arrays.sort(method.getExceptions());
  }
  return methods.toArray(new JavaMethod[methods.size()]);
}
