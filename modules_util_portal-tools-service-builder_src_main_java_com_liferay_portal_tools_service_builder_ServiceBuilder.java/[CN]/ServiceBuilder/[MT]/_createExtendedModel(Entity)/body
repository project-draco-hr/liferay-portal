{
  JavaClass modelImplJavaClass=_getJavaClass(_outputPath + "/model/impl/" + entity.getName()+ "Impl.java");
  Map<String,JavaMethod> methods=new LinkedHashMap<>();
  for (  JavaMethod method : _getMethods(modelImplJavaClass)) {
    String declarationSignature=_fixDeclarationSignature(method.getDeclarationSignature(false),modelImplJavaClass.getPackageName());
    methods.put(declarationSignature,method);
  }
  Set<Map.Entry<String,JavaMethod>> entrySet=methods.entrySet();
  Iterator<Map.Entry<String,JavaMethod>> itr=entrySet.iterator();
  while (itr.hasNext()) {
    Map.Entry<String,JavaMethod> entry=itr.next();
    JavaMethod method=entry.getValue();
    String methodName=method.getName();
    if (methodName.equals("getStagedModelType")) {
      itr.remove();
    }
  }
  JavaClass modelJavaClass=_getJavaClass(_serviceOutputPath + "/model/" + entity.getName()+ "Model.java");
  for (  JavaMethod method : _getMethods(modelJavaClass)) {
    String declarationSignature=_fixDeclarationSignature(method.getDeclarationSignature(false),modelJavaClass.getPackageName());
    methods.remove(declarationSignature);
  }
  Map<String,Object> context=_getContext();
  context.put("entity",entity);
  context.put("methods",methods.values());
  context=_putDeprecatedKeys(context,modelJavaClass);
  String content=_processTemplate(_tplExtendedModel,context);
  File modelFile=new File(_serviceOutputPath + "/model/" + entity.getName()+ ".java");
  ToolsUtil.writeFile(modelFile,content,_author,_modifiedFileNames);
}
