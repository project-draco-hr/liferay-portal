{
  Map<String,JavaMethod> javaMethodMap=new HashMap<>();
  for (  JavaMethod javaMethod : javaMethods2) {
    javaMethodMap.put(_getMethodKey(javaMethod),javaMethod);
  }
  for (  JavaMethod javaMethod : javaMethods1) {
    String javaMethodKey=_getMethodKey(javaMethod);
    JavaMethod existingJavaMethod=javaMethodMap.get(javaMethodKey);
    if (existingJavaMethod == null) {
      javaMethodMap.put(javaMethodKey,javaMethod);
    }
 else     if (mergeAnnotations) {
      Annotation[] annotations=_mergeAnnotations(javaMethod.getAnnotations(),existingJavaMethod.getAnnotations());
      existingJavaMethod.setAnnotations(annotations);
    }
  }
  List<JavaMethod> javaMethods=new ArrayList<>(javaMethodMap.values());
  Comparator<JavaMethod> comparator=new Comparator<JavaMethod>(){
    @Override public int compare(    JavaMethod javaMethod1,    JavaMethod javaMethod2){
      String declarationSignature=javaMethod1.getDeclarationSignature(false);
      return declarationSignature.compareTo(javaMethod2.getDeclarationSignature(false));
    }
  }
;
  Collections.sort(javaMethods,comparator);
  return javaMethods.toArray(new JavaMethod[javaMethods.size()]);
}
