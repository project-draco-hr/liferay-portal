{
  _tplBadAliasNames=_getTplProperty("bad_alias_names",_tplBadAliasNames);
  _tplBadColumnNames=_getTplProperty("bad_column_names",_tplBadColumnNames);
  _tplBadTableNames=_getTplProperty("bad_table_names",_tplBadTableNames);
  _tplBlobModel=_getTplProperty("blob_model",_tplBlobModel);
  _tplEjbPk=_getTplProperty("ejb_pk",_tplEjbPk);
  _tplException=_getTplProperty("exception",_tplException);
  _tplExtendedModel=_getTplProperty("extended_model",_tplExtendedModel);
  _tplExtendedModelBaseImpl=_getTplProperty("extended_model_base_impl",_tplExtendedModelBaseImpl);
  _tplExtendedModelImpl=_getTplProperty("extended_model_impl",_tplExtendedModelImpl);
  _tplFinder=_getTplProperty("finder",_tplFinder);
  _tplFinderBaseImpl=_getTplProperty("finder_base_impl",_tplFinderBaseImpl);
  _tplFinderUtil=_getTplProperty("finder_util",_tplFinderUtil);
  _tplHbmXml=_getTplProperty("hbm_xml",_tplHbmXml);
  _tplJsonJs=_getTplProperty("json_js",_tplJsonJs);
  _tplJsonJsMethod=_getTplProperty("json_js_method",_tplJsonJsMethod);
  _tplModel=_getTplProperty("model",_tplModel);
  _tplModelCache=_getTplProperty("model_cache",_tplModelCache);
  _tplModelClp=_getTplProperty("model",_tplModelClp);
  _tplModelHintsXml=_getTplProperty("model_hints_xml",_tplModelHintsXml);
  _tplModelImpl=_getTplProperty("model_impl",_tplModelImpl);
  _tplModelSoap=_getTplProperty("model_soap",_tplModelSoap);
  _tplModelWrapper=_getTplProperty("model_wrapper",_tplModelWrapper);
  _tplPersistence=_getTplProperty("persistence",_tplPersistence);
  _tplPersistenceImpl=_getTplProperty("persistence_impl",_tplPersistenceImpl);
  _tplPersistenceUtil=_getTplProperty("persistence_util",_tplPersistenceUtil);
  _tplProps=_getTplProperty("props",_tplProps);
  _tplService=_getTplProperty("service",_tplService);
  _tplServiceBaseImpl=_getTplProperty("service_base_impl",_tplServiceBaseImpl);
  _tplServiceClp=_getTplProperty("service_clp",_tplServiceClp);
  _tplServiceClpInvoker=_getTplProperty("service_clp_invoker",_tplServiceClpInvoker);
  _tplServiceClpMessageListener=_getTplProperty("service_clp_message_listener",_tplServiceClpMessageListener);
  _tplServiceClpSerializer=_getTplProperty("service_clp_serializer",_tplServiceClpSerializer);
  _tplServiceHttp=_getTplProperty("service_http",_tplServiceHttp);
  _tplServiceImpl=_getTplProperty("service_impl",_tplServiceImpl);
  _tplServicePropsUtil=_getTplProperty("service_props_util",_tplServicePropsUtil);
  _tplServiceSoap=_getTplProperty("service_soap",_tplServiceSoap);
  _tplServiceUtil=_getTplProperty("service_util",_tplServiceUtil);
  _tplServiceWrapper=_getTplProperty("service_wrapper",_tplServiceWrapper);
  _tplSpringXml=_getTplProperty("spring_xml",_tplSpringXml);
  try {
    _apiDirName=_normalize(apiDirName);
    _autoImportDefaultReferences=autoImportDefaultReferences;
    _autoNamespaceTables=autoNamespaceTables;
    _beanLocatorUtil=beanLocatorUtil;
    _buildNumber=buildNumber;
    _buildNumberIncrement=buildNumberIncrement;
    _hbmFileName=_normalize(hbmFileName);
    _implDirName=_normalize(implDirName);
    _modelHintsFileName=_normalize(modelHintsFileName);
    _osgiModule=osgiModule;
    _pluginName=GetterUtil.getString(pluginName);
    _propsUtil=propsUtil;
    _readOnlyPrefixes=readOnlyPrefixes;
    _resourceActionModels=resourceActionModels;
    _resourcesDirName=_normalize(resourcesDirName);
    _springFileName=_normalize(springFileName);
    _springNamespaces=springNamespaces;
    if (!ArrayUtil.contains(_springNamespaces,_SPRING_NAMESPACE_BEANS)) {
      _springNamespaces=ArrayUtil.append(_springNamespaces,_SPRING_NAMESPACE_BEANS);
    }
    _sqlDirName=_normalize(sqlDirName);
    _sqlFileName=sqlFileName;
    _sqlIndexesFileName=sqlIndexesFileName;
    _sqlSequencesFileName=sqlSequencesFileName;
    _targetEntityName=targetEntityName;
    _testDirName=_normalize(testDirName);
    _build=build;
    _badTableNames=_readLines(_tplBadTableNames);
    _badAliasNames=_readLines(_tplBadAliasNames);
    _badColumnNames=_readLines(_tplBadColumnNames);
    _beanLocatorUtilShortName=_beanLocatorUtil.substring(_beanLocatorUtil.lastIndexOf(".") + 1);
    SAXReader saxReader=_getSAXReader();
    Document document=saxReader.read(new XMLSafeReader(ToolsUtil.getContent(_normalize(inputFileName))));
    Element rootElement=document.getRootElement();
    String packagePath=rootElement.attributeValue("package-path");
    if (Validator.isNull(packagePath)) {
      throw new IllegalArgumentException("The package-path attribute is required");
    }
    _apiPackagePath=GetterUtil.getString(rootElement.attributeValue("api-package-path"),packagePath);
    _oldServiceOutputPath=_apiDirName + "/" + StringUtil.replace(packagePath,".","/");
    _outputPath=_implDirName + "/" + StringUtil.replace(packagePath,".","/");
    if (Validator.isNotNull(_testDirName)) {
      _testOutputPath=_testDirName + "/" + StringUtil.replace(packagePath,".","/");
    }
    _serviceOutputPath=_apiDirName + "/" + StringUtil.replace(_apiPackagePath,".","/");
    _packagePath=packagePath;
    _autoImportDefaultReferences=GetterUtil.getBoolean(rootElement.attributeValue("auto-import-default-references"),_autoImportDefaultReferences);
    _autoNamespaceTables=GetterUtil.getBoolean(rootElement.attributeValue("auto-namespace-tables"),_autoNamespaceTables);
    _mvccEnabled=GetterUtil.getBoolean(rootElement.attributeValue("mvcc-enabled"));
    Element authorElement=rootElement.element("author");
    if (authorElement != null) {
      _author=authorElement.getText();
    }
 else {
      _author=AUTHOR;
    }
    Element portletElement=rootElement.element("portlet");
    Element namespaceElement=rootElement.element("namespace");
    if (portletElement != null) {
      _portletName=portletElement.attributeValue("name");
      _portletShortName=portletElement.attributeValue("short-name");
      _portletPackageName=TextFormatter.format(_portletName,TextFormatter.B);
      _apiPackagePath+="." + _portletPackageName;
      _outputPath+="/" + _portletPackageName;
      _packagePath+="." + _portletPackageName;
      _serviceOutputPath+="/" + _portletPackageName;
      _testOutputPath+="/" + _portletPackageName;
    }
 else {
      _portletShortName=namespaceElement.getText();
    }
    _portletShortName=_portletShortName.trim();
    for (    char c : _portletShortName.toCharArray()) {
      if (!Validator.isChar(c) && (c != CharPool.UNDERLINE)) {
        throw new RuntimeException("The namespace element must be a valid keyword");
      }
    }
    _ejbList=new ArrayList<>();
    _entityMappings=new HashMap<>();
    List<Element> entityElements=rootElement.elements("entity");
    for (    Element entityElement : entityElements) {
      _parseEntity(entityElement);
    }
    List<String> exceptionList=new ArrayList<>();
    Element exceptionsElement=rootElement.element("exceptions");
    if (exceptionsElement != null) {
      List<Element> exceptionElements=exceptionsElement.elements("exception");
      for (      Element exceptionElement : exceptionElements) {
        exceptionList.add(exceptionElement.getText());
      }
    }
    if (build) {
      for (int x=0; x < _ejbList.size(); x++) {
        Entity entity=_ejbList.get(x);
        if (_isTargetEntity(entity)) {
          System.out.println("Building " + entity.getName());
          _resolveEntity(entity);
          _removeOldServices(entity);
          if (entity.hasActionableDynamicQuery()) {
            _removeActionableDynamicQuery(entity);
            if (entity.isStagedModel()) {
              _removeExportActionableDynamicQuery(entity);
            }
 else {
              _removeExportActionableDynamicQuery(entity);
            }
          }
 else {
            _removeActionableDynamicQuery(entity,_serviceOutputPath);
            _removeExportActionableDynamicQuery(entity);
          }
          if (entity.hasColumns()) {
            _createHbm(entity);
            _createHbmUtil(entity);
            _createPersistenceImpl(entity);
            _createPersistence(entity);
            _createPersistenceUtil(entity);
            if (Validator.isNotNull(_testDirName)) {
              _createPersistenceTest(entity);
            }
            _createModelImpl(entity);
            _createExtendedModelBaseImpl(entity);
            _createExtendedModelImpl(entity);
            entity.setTransients(_getTransients(entity,false));
            entity.setParentTransients(_getTransients(entity,true));
            _createModel(entity);
            _createExtendedModel(entity);
            _createModelCache(entity);
            _createModelClp(entity);
            _createModelWrapper(entity);
            _createModelSoap(entity);
            _createBlobModels(entity);
            _createPool(entity);
            _createEJBPK(entity);
          }
          _createFinder(entity);
          _createFinderBaseImpl(entity);
          _createFinderUtil(entity);
          if (entity.hasLocalService()) {
            _createServiceImpl(entity,_SESSION_TYPE_LOCAL);
            _createServiceBaseImpl(entity,_SESSION_TYPE_LOCAL);
            _createService(entity,_SESSION_TYPE_LOCAL);
            _createServiceFactory(entity,_SESSION_TYPE_LOCAL);
            _createServiceUtil(entity,_SESSION_TYPE_LOCAL);
            _createServiceClp(entity,_SESSION_TYPE_LOCAL);
            _createServiceClpInvoker(entity,_SESSION_TYPE_LOCAL);
            _createServiceWrapper(entity,_SESSION_TYPE_LOCAL);
          }
 else {
            _removeServiceImpl(entity,_SESSION_TYPE_LOCAL);
            _removeServiceBaseImpl(entity,_SESSION_TYPE_LOCAL);
            _removeService(entity,_SESSION_TYPE_LOCAL,_serviceOutputPath);
            _removeServiceUtil(entity,_SESSION_TYPE_LOCAL,_serviceOutputPath);
            _removeServiceClp(entity,_SESSION_TYPE_LOCAL,_serviceOutputPath);
            _removeServiceClpInvoker(entity,_SESSION_TYPE_LOCAL);
            _removeServiceWrapper(entity,_SESSION_TYPE_LOCAL,_serviceOutputPath);
          }
          if (entity.hasRemoteService()) {
            _createServiceImpl(entity,_SESSION_TYPE_REMOTE);
            _createServiceBaseImpl(entity,_SESSION_TYPE_REMOTE);
            _createService(entity,_SESSION_TYPE_REMOTE);
            _createServiceFactory(entity,_SESSION_TYPE_REMOTE);
            _createServiceUtil(entity,_SESSION_TYPE_REMOTE);
            _createServiceClp(entity,_SESSION_TYPE_REMOTE);
            _createServiceClpInvoker(entity,_SESSION_TYPE_REMOTE);
            _createServiceWrapper(entity,_SESSION_TYPE_REMOTE);
            _createServiceHttp(entity);
            _removeServiceJson(entity);
            if (entity.hasColumns()) {
              _removeServiceJsonSerializer(entity);
            }
            _createServiceSoap(entity);
          }
 else {
            _removeServiceImpl(entity,_SESSION_TYPE_REMOTE);
            _removeServiceBaseImpl(entity,_SESSION_TYPE_REMOTE);
            _removeService(entity,_SESSION_TYPE_REMOTE,_serviceOutputPath);
            _removeServiceUtil(entity,_SESSION_TYPE_REMOTE,_serviceOutputPath);
            _removeServiceClp(entity,_SESSION_TYPE_REMOTE,_serviceOutputPath);
            _removeServiceClpInvoker(entity,_SESSION_TYPE_REMOTE);
            _removeServiceWrapper(entity,_SESSION_TYPE_REMOTE,_serviceOutputPath);
            _removeServiceHttp(entity);
            _removeServiceSoap(entity);
          }
        }
 else {
          if (entity.hasColumns()) {
            entity.setTransients(_getTransients(entity,false));
            entity.setParentTransients(_getTransients(entity,true));
          }
        }
      }
      _createHbmXml();
      _createModelHintsXml();
      _createSpringXml();
      _createExceptions(exceptionList);
      _createServiceClpMessageListener();
      _createServiceClpSerializer(exceptionList);
      _createServicePropsUtil();
      _createSQLIndexes();
      _createSQLTables();
      _createSQLSequences();
      _createProps();
      _deleteOrmXml();
      _deleteSpringLegacyXml();
    }
  }
 catch (  FileNotFoundException fnfe) {
    System.out.println(fnfe.getMessage());
  }
}
