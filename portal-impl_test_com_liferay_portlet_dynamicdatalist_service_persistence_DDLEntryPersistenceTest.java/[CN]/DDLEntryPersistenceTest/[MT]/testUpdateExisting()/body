{
  long pk=nextLong();
  DDLEntry newDDLEntry=_persistence.create(pk);
  newDDLEntry.setUuid(randomString());
  newDDLEntry.setGroupId(nextLong());
  newDDLEntry.setCompanyId(nextLong());
  newDDLEntry.setUserId(nextLong());
  newDDLEntry.setUserName(randomString());
  newDDLEntry.setCreateDate(nextDate());
  newDDLEntry.setModifiedDate(nextDate());
  newDDLEntry.setName(randomString());
  newDDLEntry.setDescription(randomString());
  newDDLEntry.setStructureId(nextLong());
  _persistence.update(newDDLEntry,false);
  DDLEntry existingDDLEntry=_persistence.findByPrimaryKey(newDDLEntry.getPrimaryKey());
  assertEquals(existingDDLEntry.getUuid(),newDDLEntry.getUuid());
  assertEquals(existingDDLEntry.getEntryId(),newDDLEntry.getEntryId());
  assertEquals(existingDDLEntry.getGroupId(),newDDLEntry.getGroupId());
  assertEquals(existingDDLEntry.getCompanyId(),newDDLEntry.getCompanyId());
  assertEquals(existingDDLEntry.getUserId(),newDDLEntry.getUserId());
  assertEquals(existingDDLEntry.getUserName(),newDDLEntry.getUserName());
  assertEquals(Time.getShortTimestamp(existingDDLEntry.getCreateDate()),Time.getShortTimestamp(newDDLEntry.getCreateDate()));
  assertEquals(Time.getShortTimestamp(existingDDLEntry.getModifiedDate()),Time.getShortTimestamp(newDDLEntry.getModifiedDate()));
  assertEquals(existingDDLEntry.getName(),newDDLEntry.getName());
  assertEquals(existingDDLEntry.getDescription(),newDDLEntry.getDescription());
  assertEquals(existingDDLEntry.getStructureId(),newDDLEntry.getStructureId());
}
