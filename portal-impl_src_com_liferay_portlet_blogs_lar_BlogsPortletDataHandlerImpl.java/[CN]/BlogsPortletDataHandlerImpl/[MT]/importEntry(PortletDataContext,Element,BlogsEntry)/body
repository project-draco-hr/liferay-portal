{
  long userId=portletDataContext.getUserId(entry.getUserUuid());
  String content=JournalPortletDataHandlerImpl.importReferencedContent(portletDataContext,entryElement,entry.getContent());
  entry.setContent(content);
  Calendar displayDateCal=CalendarFactoryUtil.getCalendar();
  displayDateCal.setTime(entry.getDisplayDate());
  int displayDateMonth=displayDateCal.get(Calendar.MONTH);
  int displayDateDay=displayDateCal.get(Calendar.DATE);
  int displayDateYear=displayDateCal.get(Calendar.YEAR);
  int displayDateHour=displayDateCal.get(Calendar.HOUR);
  int displayDateMinute=displayDateCal.get(Calendar.MINUTE);
  if (displayDateCal.get(Calendar.AM_PM) == Calendar.PM) {
    displayDateHour+=12;
  }
  boolean allowPingbacks=entry.isAllowPingbacks();
  boolean allowTrackbacks=entry.isAllowTrackbacks();
  String[] trackbacks=StringUtil.split(entry.getTrackbacks());
  int status=entry.getStatus();
  ServiceContext serviceContext=portletDataContext.createServiceContext(entryElement,entry,_NAMESPACE);
  if (status != WorkflowConstants.STATUS_APPROVED) {
    serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
  }
  String smallImagePath=entryElement.attributeValue("small-image-path");
  InputStream smallImageFileInputStream=null;
  String smallImageFileName=null;
  try {
    if (entry.isSmallImage() && Validator.isNotNull(smallImagePath)) {
      smallImageFileInputStream=portletDataContext.getZipEntryAsInputStream(smallImagePath);
      smallImageFileName=String.valueOf(entry.getSmallImageId()).concat(StringPool.PERIOD).concat(entry.getSmallImageType());
    }
    BlogsEntry importedEntry=null;
    if (portletDataContext.isDataStrategyMirror()) {
      BlogsEntry existingEntry=BlogsEntryUtil.fetchByUUID_G(entry.getUuid(),portletDataContext.getScopeGroupId());
      if (existingEntry == null) {
        serviceContext.setUuid(entry.getUuid());
        importedEntry=BlogsEntryLocalServiceUtil.addEntry(userId,entry.getTitle(),entry.getDescription(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,entry.isSmallImage(),entry.getSmallImageURL(),smallImageFileInputStream,smallImageFileName,serviceContext);
      }
 else {
        importedEntry=BlogsEntryLocalServiceUtil.updateEntry(userId,existingEntry.getEntryId(),entry.getTitle(),entry.getDescription(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,entry.getSmallImage(),entry.getSmallImageURL(),smallImageFileInputStream,smallImageFileName,serviceContext);
      }
    }
 else {
      importedEntry=BlogsEntryLocalServiceUtil.addEntry(userId,entry.getTitle(),entry.getDescription(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,entry.getSmallImage(),entry.getSmallImageURL(),smallImageFileInputStream,smallImageFileName,serviceContext);
    }
    portletDataContext.importClassedModel(entry,importedEntry,_NAMESPACE);
  }
  finally {
    StreamUtil.cleanUp(smallImageFileInputStream);
  }
}
