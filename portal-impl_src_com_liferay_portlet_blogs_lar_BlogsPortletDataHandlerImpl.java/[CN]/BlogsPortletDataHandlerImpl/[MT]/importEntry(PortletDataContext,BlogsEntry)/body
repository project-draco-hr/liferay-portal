{
  long userId=context.getUserId(entry.getUserUuid());
  Calendar displayDateCal=CalendarFactoryUtil.getCalendar();
  displayDateCal.setTime(entry.getDisplayDate());
  int displayDateMonth=displayDateCal.get(Calendar.MONTH);
  int displayDateDay=displayDateCal.get(Calendar.DATE);
  int displayDateYear=displayDateCal.get(Calendar.YEAR);
  int displayDateHour=displayDateCal.get(Calendar.HOUR);
  int displayDateMinute=displayDateCal.get(Calendar.MINUTE);
  if (displayDateCal.get(Calendar.AM_PM) == Calendar.PM) {
    displayDateHour+=12;
  }
  boolean allowPingbacks=entry.isAllowPingbacks();
  boolean allowTrackbacks=entry.isAllowTrackbacks();
  String[] trackbacks=StringUtil.split(entry.getTrackbacks());
  int status=entry.getStatus();
  long[] assetCategoryIds=null;
  String[] assetTagNames=null;
  if (context.getBooleanParameter(_NAMESPACE,"categories")) {
    assetCategoryIds=context.getAssetCategoryIds(BlogsEntry.class,entry.getEntryId());
  }
  if (context.getBooleanParameter(_NAMESPACE,"tags")) {
    assetTagNames=context.getAssetTagNames(BlogsEntry.class,entry.getEntryId());
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setAssetCategoryIds(assetCategoryIds);
  serviceContext.setAssetTagNames(assetTagNames);
  serviceContext.setCreateDate(entry.getCreateDate());
  serviceContext.setModifiedDate(entry.getModifiedDate());
  serviceContext.setScopeGroupId(context.getScopeGroupId());
  if (status != WorkflowConstants.STATUS_APPROVED) {
    serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
  }
  BlogsEntry importedEntry=null;
  if (context.isDataStrategyMirror()) {
    BlogsEntry existingEntry=BlogsEntryUtil.fetchByUUID_G(entry.getUuid(),context.getScopeGroupId());
    if (existingEntry == null) {
      serviceContext.setUuid(entry.getUuid());
      importedEntry=BlogsEntryLocalServiceUtil.addEntry(userId,entry.getTitle(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,serviceContext);
    }
 else {
      importedEntry=BlogsEntryLocalServiceUtil.updateEntry(userId,existingEntry.getEntryId(),entry.getTitle(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,serviceContext);
    }
  }
 else {
    importedEntry=BlogsEntryLocalServiceUtil.addEntry(userId,entry.getTitle(),entry.getContent(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,allowPingbacks,allowTrackbacks,trackbacks,serviceContext);
  }
  context.importPermissions(BlogsEntry.class,entry.getEntryId(),importedEntry.getEntryId());
  if (context.getBooleanParameter(_NAMESPACE,"comments")) {
    context.importComments(BlogsEntry.class,entry.getEntryId(),importedEntry.getEntryId(),context.getScopeGroupId());
  }
  if (context.getBooleanParameter(_NAMESPACE,"ratings")) {
    context.importRatingsEntries(BlogsEntry.class,entry.getEntryId(),importedEntry.getEntryId());
  }
}
