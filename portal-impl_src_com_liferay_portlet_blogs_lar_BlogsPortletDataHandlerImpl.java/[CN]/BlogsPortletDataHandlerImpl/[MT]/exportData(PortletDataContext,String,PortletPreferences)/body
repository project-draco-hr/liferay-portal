{
  Map parameterMap=context.getParameterMap();
  boolean exportData=MapUtil.getBoolean(parameterMap,_EXPORT_BLOGS_DATA);
  boolean staging=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.STAGING);
  if (_log.isDebugEnabled()) {
    if (exportData) {
      _log.debug("Exporting data is enabled");
    }
 else {
      _log.debug("Exporting data is disabled");
    }
  }
  if (!exportData && !staging) {
    return null;
  }
  try {
    XStream xStream=new XStream();
    Document doc=DocumentHelper.createDocument();
    Element root=doc.addElement("blogs-data");
    root.addAttribute("group-id",String.valueOf(context.getGroupId()));
    List entries=BlogsEntryUtil.findByGroupId(context.getGroupId());
    Iterator itr=entries.iterator();
    while (itr.hasNext()) {
      BlogsEntry entry=(BlogsEntry)itr.next();
      if (context.addPrimaryKey(BlogsEntry.class,entry.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        entry.setUserUuid(entry.getUserUuid());
        context.addComments(BlogsEntry.class,entry.getPrimaryKeyObj());
        context.addRatingsEntries(BlogsEntry.class,entry.getPrimaryKeyObj());
        context.addTagsEntries(BlogsEntry.class,entry.getPrimaryKeyObj());
      }
    }
    String xml=xStream.toXML(entries);
    Element el=root.addElement("blog-entries");
    Document tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    return XMLFormatter.toString(doc);
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
