{
  Map<String,Long> userMap=getWordpressUserMap(context);
  String path=getWordpressPath(context,"wordpress.xml");
  String fileData=context.getZipEntryAsString(path);
  if (Validator.isNull(fileData)) {
    return;
  }
  Document wordpressDoc=null;
  try {
    wordpressDoc=SAXReaderUtil.read(fileData);
  }
 catch (  DocumentException de) {
    _log.error("Processing " + path + ": "+ de.getMessage());
    return;
  }
  User defaultUser=UserLocalServiceUtil.getDefaultUser(context.getCompanyId());
  Element root=wordpressDoc.getRootElement();
  List<Element> itemEls=root.element("channel").elements("item");
  DateFormat dateFormater=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  dateFormater.setTimeZone(TimeZone.getTimeZone("UTC"));
  Calendar cal=Calendar.getInstance();
  for (  Element itemEl : itemEls) {
    long userId=context.getUserId(null);
    String creator=itemEl.elementText(SAXReaderUtil.createQName("creator",_dcNs));
    if (userMap.containsKey(creator)) {
      userId=userMap.get(creator);
    }
    long plid=context.getPlid();
    String title=itemEl.elementTextTrim("title");
    if (Validator.isNull(title)) {
      title=itemEl.elementTextTrim(SAXReaderUtil.createQName("post_name",_wpNs));
    }
    String content=itemEl.elementText(SAXReaderUtil.createQName("encoded",_contentNs));
    content=content.replaceAll("\\n","\n<br/>");
    String dateText=itemEl.elementTextTrim(SAXReaderUtil.createQName("post_date_gmt",_wpNs));
    Date postDate=new Date();
    try {
      postDate=dateFormater.parse(dateText);
    }
 catch (    ParseException pe) {
      _log.warn("Parse " + dateText + ": "+ pe.getMessage());
    }
    cal.setTime(postDate);
    int displayDateMonth=cal.get(Calendar.MONTH);
    int displayDateDay=cal.get(Calendar.DAY_OF_MONTH);
    int displayDateYear=cal.get(Calendar.YEAR);
    int displayDateHour=cal.get(Calendar.HOUR_OF_DAY);
    int displayDateMinute=cal.get(Calendar.MINUTE);
    String statusText=itemEl.elementTextTrim(SAXReaderUtil.createQName("status",_wpNs));
    boolean draft=statusText.equalsIgnoreCase("draft");
    String pingStatusText=itemEl.elementTextTrim(SAXReaderUtil.createQName("ping_status",_wpNs));
    boolean allowTrackbacks=pingStatusText.equalsIgnoreCase("open");
    String[] tagsEntries=null;
    String categoryText=itemEl.elementTextTrim("category");
    if (Validator.isNotNull(categoryText)) {
      tagsEntries=new String[]{categoryText};
    }
    BlogsEntry entry=null;
    try {
      entry=BlogsEntryLocalServiceUtil.addEntry(userId,plid,title,content.toString(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,draft,allowTrackbacks,null,tagsEntries,true,true,null);
    }
 catch (    Exception e) {
      _log.error("Entry " + title + ": "+ e.getMessage());
      continue;
    }
    MBMessageDisplay messageDisplay=MBMessageLocalServiceUtil.getDiscussionMessageDisplay(userId,BlogsEntry.class.getName(),entry.getEntryId());
    Map<Long,Long> messageIdMap=new HashMap<Long,Long>();
    List<Node> commentNodes=itemEl.selectNodes("wp:comment","wp:comment_parent/text()");
    long groupId=context.getGroupId();
    for (    Node commentNode : commentNodes) {
      Element commentEl=(Element)commentNode;
      long commentId=GetterUtil.getLong(commentEl.elementTextTrim(SAXReaderUtil.createQName("comment_id",_wpNs)));
      String commentContent=commentEl.elementTextTrim(SAXReaderUtil.createQName("comment_content",_wpNs));
      if (Validator.isNull(commentContent)) {
        continue;
      }
      String commentAuthor=commentEl.elementTextTrim(SAXReaderUtil.createQName("comment_author",_wpNs));
      commentAuthor=commentAuthor.substring(0,Math.min(75,commentAuthor.length()));
      long commentParentId=GetterUtil.getLong(commentEl.elementTextTrim(SAXReaderUtil.createQName("comment_parent",_wpNs)));
      if (commentParentId == 0) {
        commentParentId=messageDisplay.getMessage().getMessageId();
      }
 else {
        commentParentId=messageIdMap.get(commentParentId);
      }
      MBMessage message=MBMessageLocalServiceUtil.addDiscussionMessage(defaultUser.getUserId(),commentAuthor,groupId,BlogsEntry.class.getName(),entry.getEntryId(),messageDisplay.getThread().getThreadId(),commentParentId,null,commentContent);
      messageIdMap.put(commentId,message.getMessageId());
    }
  }
}
