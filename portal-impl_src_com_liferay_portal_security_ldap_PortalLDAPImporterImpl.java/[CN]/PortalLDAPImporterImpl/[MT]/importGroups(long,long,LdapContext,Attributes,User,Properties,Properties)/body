{
  String userMappingsGroup=userMappings.getProperty("group");
  if (Validator.isNotNull(userMappingsGroup) && (attributes.get(userMappingsGroup) == null)) {
    return;
  }
  String postfix=LDAPSettingsUtil.getPropertyPostfix(ldapServerId);
  String baseDN=PrefsPropsUtil.getString(companyId,PropsKeys.LDAP_BASE_DN + postfix);
  Binding binding=PortalLDAPUtil.getUser(ldapServerId,companyId,user.getScreenName());
  String fullUserDN=PortalLDAPUtil.getNameInNamespace(ldapServerId,companyId,binding);
  StringBundler sb=new StringBundler(9);
  sb.append(StringPool.OPEN_PARENTHESIS);
  sb.append(StringPool.AMPERSAND);
  sb.append(PrefsPropsUtil.getString(companyId,PropsKeys.LDAP_IMPORT_GROUP_SEARCH_FILTER + postfix));
  sb.append(StringPool.OPEN_PARENTHESIS);
  sb.append(groupMappings.getProperty("user"));
  sb.append(StringPool.EQUAL);
  sb.append(fullUserDN);
  sb.append(StringPool.CLOSE_PARENTHESIS);
  sb.append(StringPool.CLOSE_PARENTHESIS);
  byte[] cookie=new byte[0];
  List<Long> newUserGroupIds=new ArrayList<Long>();
  while (cookie != null) {
    List<SearchResult> searchResults=new ArrayList<SearchResult>();
    String groupMappingsGroupName=GetterUtil.getString(groupMappings.getProperty("groupName")).toLowerCase();
    cookie=PortalLDAPUtil.searchLDAP(companyId,ldapContext,cookie,0,baseDN,sb.toString(),new String[]{groupMappingsGroupName},searchResults);
    for (    SearchResult searchResult : searchResults) {
      String fullGroupDN=PortalLDAPUtil.getNameInNamespace(ldapServerId,companyId,searchResult);
      Attributes groupAttributes=null;
      try {
        groupAttributes=PortalLDAPUtil.getGroupAttributes(ldapServerId,companyId,ldapContext,fullGroupDN);
      }
 catch (      NameNotFoundException nnfe) {
        _log.error("LDAP group not found with fullGroupDN " + fullGroupDN,nnfe);
        continue;
      }
      UserGroup userGroup=importUserGroup(companyId,groupAttributes,groupMappings);
      if (userGroup != null) {
        if (_log.isDebugEnabled()) {
          _log.debug("Adding " + user.getUserId() + " to group "+ userGroup.getUserGroupId());
        }
        newUserGroupIds.add(userGroup.getUserGroupId());
      }
    }
  }
  UserGroupLocalServiceUtil.setUserUserGroups(user.getUserId(),ArrayUtil.toArray(newUserGroupIds.toArray(new Long[newUserGroupIds.size()])));
}
