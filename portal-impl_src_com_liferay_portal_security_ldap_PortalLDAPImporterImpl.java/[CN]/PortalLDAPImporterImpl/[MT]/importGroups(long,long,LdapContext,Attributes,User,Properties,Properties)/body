{
  if (!LDAPSettingsUtil.isExportEnabled(companyId) || !LDAPSettingsUtil.isExportGroupEnabled(companyId)) {
    List<UserGroup> userGroups=UserGroupLocalServiceUtil.getUserUserGroups(user.getUserId());
    UserGroupLocalServiceUtil.clearUserUserGroups(user.getUserId());
    for (    UserGroup userGroup : userGroups) {
      if (!userGroup.isAddedByLDAPImport()) {
        UserGroupLocalServiceUtil.addUserUserGroups(user.getUserId(),new long[]{userGroup.getUserGroupId()});
      }
    }
  }
  if (PrefsPropsUtil.getBoolean(companyId,PropsKeys.LDAP_IMPORT_GROUP_SEARCH_FILTER_ENABLED)) {
    String postfix=LDAPSettingsUtil.getPropertyPostfix(ldapServerId);
    String baseDN=PrefsPropsUtil.getString(companyId,PropsKeys.LDAP_BASE_DN + postfix);
    Binding binding=PortalLDAPUtil.getUser(ldapServerId,companyId,user.getScreenName(),user.getEmailAddress());
    String fullUserDN=PortalLDAPUtil.getNameInNamespace(ldapServerId,companyId,binding);
    StringBundler sb=new StringBundler(9);
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(StringPool.AMPERSAND);
    sb.append(PrefsPropsUtil.getString(companyId,PropsKeys.LDAP_IMPORT_GROUP_SEARCH_FILTER + postfix));
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(groupMappings.getProperty("user"));
    sb.append(StringPool.EQUAL);
    sb.append(escapeValue(fullUserDN));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    sb.append(StringPool.CLOSE_PARENTHESIS);
    byte[] cookie=new byte[0];
    while (cookie != null) {
      List<SearchResult> searchResults=new ArrayList<SearchResult>();
      String groupMappingsGroupName=GetterUtil.getString(groupMappings.getProperty("groupName")).toLowerCase();
      cookie=PortalLDAPUtil.searchLDAP(companyId,ldapContext,cookie,0,baseDN,sb.toString(),new String[]{groupMappingsGroupName},searchResults);
      for (      SearchResult searchResult : searchResults) {
        String fullGroupDN=PortalLDAPUtil.getNameInNamespace(ldapServerId,companyId,searchResult);
        importGroup(ldapServerId,companyId,ldapContext,fullGroupDN,user,groupMappings);
      }
    }
  }
 else {
    String userMappingsGroup=userMappings.getProperty("group");
    if (Validator.isNull(userMappingsGroup)) {
      return;
    }
    Attribute userGroupAttribute=attributes.get(userMappingsGroup);
    if (userGroupAttribute == null) {
      return;
    }
    for (int i=0; i < userGroupAttribute.size(); i++) {
      String fullGroupDN=(String)userGroupAttribute.get(i);
      importGroup(ldapServerId,companyId,ldapContext,fullGroupDN,user,groupMappings);
    }
  }
}
