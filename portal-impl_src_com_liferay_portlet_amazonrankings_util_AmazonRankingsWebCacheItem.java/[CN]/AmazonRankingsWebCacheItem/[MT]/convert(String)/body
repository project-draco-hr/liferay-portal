{
  String isbn=_isbn;
  AmazonRankings amazonRankings=null;
  try {
    URL url=new URL("http://xml.amazon.com/onca/xml2?t=webservices-20&dev-t=" + AmazonRankingsUtil.getAmazonKey() + "&AsinSearch="+ isbn+ "&type=heavy&f=xml");
    Document doc=SAXReaderUtil.read(url);
    Iterator<Element> itr=doc.getRootElement().elements("ErrorMsg").iterator();
    if (itr.hasNext()) {
      Element el=itr.next();
      String errorMsg=el.getText();
      throw new WebCacheException(isbn + " " + errorMsg);
    }
    Element details=doc.getRootElement().elements("Details").iterator().next();
    String productName=details.elementText("ProductName");
    String catalog=details.elementText("Catalog");
    List<Element> authorsList=details.element("Authors").elements("Author");
    String[] authors=new String[authorsList.size()];
    for (int i=0; i < authorsList.size(); i++) {
      Element author=authorsList.get(i);
      authors[i]=author.getTextTrim();
    }
    String releaseDateAsString=details.elementText("ReleaseDate");
    Date releaseDate=GetterUtil.getDate(releaseDateAsString,new SimpleDateFormat("dd MMMMM,yyyy",Locale.US));
    String manufacturer=details.elementText("Manufacturer");
    String smallImageURL=details.elementText("ImageUrlSmall");
    String mediumImageURL=details.elementText("ImageUrlMedium");
    String largeImageURL=details.elementText("ImageUrlLarge");
    double listPrice=GetterUtil.getDouble(details.elementText("ListPrice"));
    double ourPrice=GetterUtil.getDouble(details.elementText("OurPrice"),listPrice);
    double usedPrice=GetterUtil.getDouble(details.elementText("UsedPrice"));
    double collectiblePrice=GetterUtil.getDouble(details.elementText("CollectiblePrice"));
    double thirdPartyNewPrice=GetterUtil.getDouble(details.elementText("ThirdPartyNewPrice"));
    int salesRank=GetterUtil.getInteger(details.elementText("SalesRank"));
    String media=details.elementText("Media");
    String availability=details.elementText("Availability");
    amazonRankings=new AmazonRankings(isbn,productName,catalog,authors,releaseDate,releaseDateAsString,manufacturer,smallImageURL,mediumImageURL,largeImageURL,listPrice,ourPrice,usedPrice,collectiblePrice,thirdPartyNewPrice,salesRank,media,availability);
  }
 catch (  WebCacheException ce) {
    throw ce;
  }
catch (  Exception e) {
    throw new WebCacheException(isbn + " " + e.toString());
  }
  return amazonRankings;
}
