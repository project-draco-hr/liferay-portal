{
  User user=userPersistence.findByPrimaryKey(userId);
  ShoppingCategory category=shoppingCategoryPersistence.findByPrimaryKey(categoryId);
  sku=sku.trim().toUpperCase();
  byte[] smallBytes=null;
  byte[] mediumBytes=null;
  byte[] largeBytes=null;
  try {
    smallBytes=FileUtil.getBytes(smallFile);
    mediumBytes=FileUtil.getBytes(mediumFile);
    largeBytes=FileUtil.getBytes(largeFile);
  }
 catch (  IOException ioe) {
  }
  Date now=new Date();
  validate(user.getCompanyId(),0,sku,name,smallImage,smallImageURL,smallFile,smallBytes,mediumImage,mediumImageURL,mediumFile,mediumBytes,largeImage,largeImageURL,largeFile,largeBytes);
  long itemId=counterLocalService.increment();
  ShoppingItem item=shoppingItemPersistence.create(itemId);
  item.setCompanyId(user.getCompanyId());
  item.setUserId(user.getUserId());
  item.setUserName(user.getFullName());
  item.setCreateDate(now);
  item.setModifiedDate(now);
  item.setCategoryId(categoryId);
  item.setSku(sku);
  item.setName(name);
  item.setDescription(description);
  item.setProperties(properties);
  item.setFields(itemFields.size() > 0);
  item.setFieldsQuantities(fieldsQuantities);
  for (int i=0; i < itemPrices.size(); i++) {
    ShoppingItemPrice itemPrice=(ShoppingItemPrice)itemPrices.get(i);
    if (itemPrice.getStatus() == ShoppingItemPriceImpl.STATUS_ACTIVE_DEFAULT) {
      item.setMinQuantity(itemPrice.getMinQuantity());
      item.setMaxQuantity(itemPrice.getMaxQuantity());
      item.setPrice(itemPrice.getPrice());
      item.setDiscount(itemPrice.getDiscount());
      item.setTaxable(itemPrice.getTaxable());
      item.setShipping(itemPrice.getShipping());
      item.setUseShippingFormula(itemPrice.getUseShippingFormula());
    }
    if ((sale == null) && (itemPrice.getDiscount() > 0) && ((itemPrice.getStatus() == ShoppingItemPriceImpl.STATUS_ACTIVE_DEFAULT) || (itemPrice.getStatus() == ShoppingItemPriceImpl.STATUS_ACTIVE))) {
      sale=Boolean.TRUE;
    }
  }
  item.setRequiresShipping(requiresShipping);
  item.setStockQuantity(stockQuantity);
  item.setFeatured(featured);
  item.setSale((sale != null) ? sale.booleanValue() : false);
  item.setSmallImage(smallImage);
  item.setSmallImageId(counterLocalService.increment());
  item.setSmallImageURL(smallImageURL);
  item.setMediumImage(mediumImage);
  item.setMediumImageId(counterLocalService.increment());
  item.setMediumImageURL(mediumImageURL);
  item.setLargeImage(largeImage);
  item.setLargeImageId(counterLocalService.increment());
  item.setLargeImageURL(largeImageURL);
  shoppingItemPersistence.update(item,false);
  for (int i=0; i < itemFields.size(); i++) {
    ShoppingItemField itemField=(ShoppingItemField)itemFields.get(i);
    long itemFieldId=counterLocalService.increment();
    itemField.setItemFieldId(itemFieldId);
    itemField.setItemId(itemId);
    itemField.setName(checkItemField(itemField.getName()));
    itemField.setValues(checkItemField(itemField.getValues()));
    shoppingItemFieldPersistence.update(itemField,false);
  }
  for (int i=0; (i < itemPrices.size()) && (itemPrices.size() > 1); i++) {
    ShoppingItemPrice itemPrice=(ShoppingItemPrice)itemPrices.get(i);
    long itemPriceId=counterLocalService.increment();
    itemPrice.setItemPriceId(itemPriceId);
    itemPrice.setItemId(itemId);
    shoppingItemPricePersistence.update(itemPrice,false);
  }
  saveImages(smallImage,item.getSmallImageId(),smallFile,smallBytes,mediumImage,item.getMediumImageId(),mediumFile,mediumBytes,largeImage,item.getLargeImageId(),largeFile,largeBytes);
  if ((addCommunityPermissions != null) && (addGuestPermissions != null)) {
    addItemResources(category,item,addCommunityPermissions.booleanValue(),addGuestPermissions.booleanValue());
  }
 else {
    addItemResources(category,item,communityPermissions,guestPermissions);
  }
  return item;
}
