{
  if ((excludedMethodNames != null) && excludedMethodNames.contains(method.getName())) {
    return false;
  }
  if (excludedTypesNames == null) {
    return true;
  }
  Class<?>[] parameterTypes=method.getParameterTypes();
  MethodParameter[] methodParameters=MethodParametersResolverUtil.resolveMethodParameters(method);
  for (int i=0; i < parameterTypes.length; i++) {
    Class<?> parameterType=parameterTypes[i];
    MethodParameter methodParameter=methodParameters[i];
    if (parameterType.isArray()) {
      parameterType=parameterType.getComponentType();
    }
    String parameterTypeName=parameterType.getName();
    for (    String excludedTypesName : excludedTypesNames) {
      String signature=methodParameter.getSignature();
      if (signature.contains(StringPool.LESS_THAN)) {
        String excludedName='L' + excludedTypesName;
        if (!excludedName.endsWith(StringPool.PERIOD)) {
          excludedName=excludedName.concat(StringPool.SEMICOLON);
        }
        excludedName=StringUtil.replace(excludedName,'.','/');
        if (signature.contains(excludedName)) {
          return false;
        }
      }
      if (parameterTypeName.startsWith(excludedTypesName)) {
        return false;
      }
    }
  }
  Class<?> returnType=method.getReturnType();
  if (returnType.isArray()) {
    returnType=returnType.getComponentType();
  }
  String returnTypeName=returnType.getName();
  for (  String excludedTypesName : excludedTypesNames) {
    if (excludedTypesName.startsWith(returnTypeName)) {
      return false;
    }
  }
  return true;
}
