{
  try {
    _mockIntraband.sendSyncDatagram(null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Registration reference is null",npe.getMessage());
  }
  try {
    RegistrationReference registrationReference=new MockRegistrationReference(_mockIntraband);
    registrationReference.cancelRegistration();
    _mockIntraband.sendSyncDatagram(registrationReference,null);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Registration reference is invalid",iae.getMessage());
  }
  try {
    _mockIntraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband),null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Datagram is null",npe.getMessage());
  }
  try {
    _mockIntraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband),Datagram.createRequestDatagram(_type,_data),1000,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Time unit is null",npe.getMessage());
  }
  try {
    _mockIntraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband),Datagram.createRequestDatagram(_type,_data),0,TimeUnit.MILLISECONDS);
    Assert.fail();
  }
 catch (  TimeoutException te) {
    Assert.assertEquals("Result waiting timeout",te.getMessage());
  }
  Assert.assertEquals(_DEFAULT_TIMEOUT,_mockIntraband.getDatagram().timeout);
  Datagram requestDatagram=Datagram.createRequestDatagram(_type,_data);
  try {
    _mockIntraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband),requestDatagram,2,TimeUnit.SECONDS);
    Assert.fail();
  }
 catch (  TimeoutException te) {
    Assert.assertEquals("Result waiting timeout",te.getMessage());
  }
  Assert.assertEquals(2000,requestDatagram.timeout);
  IOException ioException=new IOException();
  _mockIntraband.setIOException(ioException);
  try {
    _mockIntraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband),Datagram.createRequestDatagram(_type,_data));
    Assert.fail();
  }
 catch (  IOException ioe) {
    Assert.assertSame(ioException,ioe);
  }
 finally {
    _mockIntraband.setIOException(null);
  }
  final Datagram expectedDatagram=Datagram.createResponseDatagram(requestDatagram,_data);
  Intraband intraband=new MockIntraband(_DEFAULT_TIMEOUT){
    @Override protected Datagram processDatagram(    Datagram datagram){
      return expectedDatagram;
    }
  }
;
  Datagram responseDatagram=intraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband),requestDatagram);
  Assert.assertSame(expectedDatagram,responseDatagram);
  SendSyncDatagramCompletionHandler sendSyncDatagramCompletionHandler=new SendSyncDatagramCompletionHandler();
  sendSyncDatagramCompletionHandler.delivered(null);
  sendSyncDatagramCompletionHandler.submitted(null);
  sendSyncDatagramCompletionHandler.timedOut(null);
}
