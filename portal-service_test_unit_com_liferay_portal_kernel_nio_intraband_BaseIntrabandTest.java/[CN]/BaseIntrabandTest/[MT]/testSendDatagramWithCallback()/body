{
  try {
    _mockIntraband.sendDatagram(null,null,null,null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Registration reference is null",npe.getMessage());
  }
  try {
    RegistrationReference registrationReference=new MockRegistrationReference(_mockIntraband);
    registrationReference.cancelRegistration();
    _mockIntraband.sendDatagram(registrationReference,null,null,null,null);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Registration reference is invalid",iae.getMessage());
  }
  try {
    _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband),null,null,null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Datagram is null",npe.getMessage());
  }
  try {
    _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband),Datagram.createRequestDatagram(_type,_data),null,null,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Completion type set is null",npe.getMessage());
  }
  try {
    _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband),Datagram.createRequestDatagram(_type,_data),null,EnumSet.noneOf(CompletionHandler.CompletionType.class),null);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Completion type set is empty",iae.getMessage());
  }
  try {
    _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband),Datagram.createRequestDatagram(_type,_data),null,EnumSet.of(CompletionHandler.CompletionType.SUBMITTED),null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Complete handler is null",npe.getMessage());
  }
  try {
    _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband),Datagram.createRequestDatagram(_type,_data),null,EnumSet.of(CompletionHandler.CompletionType.SUBMITTED),new RecordCompletionHandler<Object>(),1000,null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Time unit is null",npe.getMessage());
  }
  Datagram requestDatagram=Datagram.createRequestDatagram(_type,_data);
  _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband),requestDatagram,null,EnumSet.of(CompletionHandler.CompletionType.DELIVERED),new RecordCompletionHandler<Object>(),0,TimeUnit.MILLISECONDS);
  Datagram sentDatagram=_mockIntraband.getDatagram();
  Assert.assertEquals(_DEFAULT_TIMEOUT,sentDatagram.timeout);
  Map<Long,Datagram> responseWaitingMap=_mockIntraband.responseWaitingMap;
  Assert.assertEquals(1,responseWaitingMap.size());
  Assert.assertSame(requestDatagram,responseWaitingMap.remove(requestDatagram.getSequenceId()));
  Map<Long,Long> timeoutMap=_mockIntraband.timeoutMap;
  Collection<Long> timeoutSequenceIds=timeoutMap.values();
  Assert.assertEquals(1,timeoutSequenceIds.size());
  Assert.assertTrue(timeoutSequenceIds.remove(requestDatagram.getSequenceId()));
  _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband),requestDatagram,null,EnumSet.of(CompletionHandler.CompletionType.REPLIED),new RecordCompletionHandler<Object>(),2,TimeUnit.SECONDS);
  sentDatagram=_mockIntraband.getDatagram();
  Assert.assertEquals(2000,sentDatagram.timeout);
  Assert.assertEquals(1,responseWaitingMap.size());
  Assert.assertSame(requestDatagram,responseWaitingMap.remove(requestDatagram.getSequenceId()));
  Assert.assertEquals(1,timeoutSequenceIds.size());
  Assert.assertTrue(timeoutSequenceIds.remove(requestDatagram.getSequenceId()));
  _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband),requestDatagram,null,EnumSet.of(CompletionHandler.CompletionType.SUBMITTED),new RecordCompletionHandler<Object>());
  sentDatagram=_mockIntraband.getDatagram();
  Assert.assertEquals(_DEFAULT_TIMEOUT,sentDatagram.timeout);
}
