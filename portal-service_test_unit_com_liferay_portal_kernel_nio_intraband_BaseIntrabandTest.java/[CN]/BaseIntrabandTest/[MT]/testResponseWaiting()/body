{
  Datagram requestDatagram=Datagram.createRequestDatagram(_type,_data);
  long sequenceId=100;
  requestDatagram.setSequenceId(sequenceId);
  requestDatagram.timeout=10000;
  _mockIntraband.addResponseWaitingDatagram(requestDatagram);
  Map<Long,Datagram> responseWaitingMap=_mockIntraband.responseWaitingMap;
  Assert.assertEquals(1,responseWaitingMap.size());
  Assert.assertSame(requestDatagram,responseWaitingMap.get(sequenceId));
  Map<Long,Long> timeoutMap=_mockIntraband.timeoutMap;
  Collection<Long> timeoutSequenceIds=timeoutMap.values();
  Assert.assertEquals(1,timeoutSequenceIds.size());
  Assert.assertTrue(timeoutSequenceIds.contains(sequenceId));
  Datagram responseDatagram=Datagram.createResponseDatagram(requestDatagram,_data);
  Assert.assertFalse(responseDatagram.isRequest());
  _mockIntraband.removeResponseWaitingDatagram(responseDatagram);
  Assert.assertTrue(responseWaitingMap.isEmpty());
  Assert.assertTrue(timeoutSequenceIds.isEmpty());
  _mockIntraband.removeResponseWaitingDatagram(responseDatagram);
  Assert.assertTrue(responseWaitingMap.isEmpty());
  Assert.assertTrue(timeoutSequenceIds.isEmpty());
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(),Level.WARNING);
  try {
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Datagram requestDatagram1=Datagram.createRequestDatagram(_type,_data);
    requestDatagram1.setSequenceId(sequenceId);
    RecordCompletionHandler<Object> recordCompletionHandler1=new RecordCompletionHandler<Object>();
    requestDatagram1.completionHandler=recordCompletionHandler1;
    requestDatagram1.timeout=1;
    _mockIntraband.addResponseWaitingDatagram(requestDatagram1);
    Thread.sleep(10);
    Datagram requestDatagram2=Datagram.createRequestDatagram(_type,_data);
    requestDatagram2.setSequenceId(sequenceId + 1);
    RecordCompletionHandler<Object> recordCompletionHandler2=new RecordCompletionHandler<Object>();
    requestDatagram2.completionHandler=recordCompletionHandler2;
    requestDatagram2.timeout=1;
    _mockIntraband.addResponseWaitingDatagram(requestDatagram2);
    Assert.assertEquals(2,responseWaitingMap.size());
    Assert.assertSame(requestDatagram1,responseWaitingMap.get(sequenceId));
    Assert.assertSame(requestDatagram2,responseWaitingMap.get(sequenceId + 1));
    Assert.assertEquals(2,timeoutSequenceIds.size());
    Assert.assertTrue(timeoutSequenceIds.contains(sequenceId));
    Assert.assertTrue(timeoutSequenceIds.contains(sequenceId + 1));
    Thread.sleep(10);
    _mockIntraband.cleanUpTimeoutResponseWaitingDatagrams();
    Assert.assertEquals(2,logRecords.size());
    assertMessageStartWith(logRecords.get(0),"Removed timeout response waiting datagram ");
    assertMessageStartWith(logRecords.get(1),"Removed timeout response waiting datagram ");
    recordCompletionHandler1.waitUntilTimeouted();
    recordCompletionHandler2.waitUntilTimeouted();
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    requestDatagram1=Datagram.createRequestDatagram(_type,_data);
    requestDatagram1.setSequenceId(sequenceId);
    recordCompletionHandler1=new RecordCompletionHandler<Object>();
    requestDatagram1.completionHandler=recordCompletionHandler1;
    requestDatagram1.timeout=1;
    _mockIntraband.addResponseWaitingDatagram(requestDatagram1);
    Thread.sleep(10);
    requestDatagram2=Datagram.createRequestDatagram(_type,_data);
    requestDatagram2.setSequenceId(sequenceId + 1);
    recordCompletionHandler2=new RecordCompletionHandler<Object>();
    requestDatagram2.completionHandler=recordCompletionHandler2;
    requestDatagram2.timeout=1;
    _mockIntraband.addResponseWaitingDatagram(requestDatagram2);
    Assert.assertEquals(2,responseWaitingMap.size());
    Assert.assertSame(requestDatagram1,responseWaitingMap.get(sequenceId));
    Assert.assertSame(requestDatagram2,responseWaitingMap.get(sequenceId + 1));
    Assert.assertEquals(2,timeoutSequenceIds.size());
    Assert.assertTrue(timeoutSequenceIds.contains(sequenceId));
    Assert.assertTrue(timeoutSequenceIds.contains(sequenceId + 1));
    Thread.sleep(10);
    _mockIntraband.cleanUpTimeoutResponseWaitingDatagrams();
    Assert.assertTrue(logRecords.isEmpty());
    recordCompletionHandler1.waitUntilTimeouted();
    recordCompletionHandler2.waitUntilTimeouted();
    _mockIntraband.cleanUpTimeoutResponseWaitingDatagrams();
  }
  finally {
    captureHandler.close();
  }
}
