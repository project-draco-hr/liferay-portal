{
  AtomicReference<DatagramReceiveHandler[]> datagramReceiveHandlersReference=_mockIntraband.datagramReceiveHandlersReference;
  DatagramReceiveHandler[] datagramReceiveHandlers=datagramReceiveHandlersReference.get();
  Assert.assertEquals(256,datagramReceiveHandlers.length);
  Assert.assertNotSame(datagramReceiveHandlers,_mockIntraband.getDatagramReceiveHandlers());
  DatagramReceiveHandler datagramReceiveHandler1=new RecordDatagramReceiveHandler();
  Assert.assertNull(_mockIntraband.registerDatagramReceiveHandler(_TYPE,datagramReceiveHandler1));
  Assert.assertSame(datagramReceiveHandler1,_mockIntraband.getDatagramReceiveHandlers()[_TYPE]);
  final DatagramReceiveHandler datagramReceiveHandler2=new RecordDatagramReceiveHandler();
  Assert.assertSame(datagramReceiveHandler1,_mockIntraband.registerDatagramReceiveHandler(_TYPE,datagramReceiveHandler2));
  Assert.assertSame(datagramReceiveHandler2,_mockIntraband.getDatagramReceiveHandlers()[_TYPE]);
  Assert.assertSame(datagramReceiveHandler2,_mockIntraband.unregisterDatagramReceiveHandler(_TYPE));
  Assert.assertNull(_mockIntraband.getDatagramReceiveHandlers()[_TYPE]);
  final AtomicReference<DatagramReceiveHandler[]> atomicReference=_mockIntraband.datagramReceiveHandlersReference;
  long valueOffset=ReflectionTestUtil.getFieldValue(AtomicReference.class,"valueOffset");
  try {
    ReflectionTestUtil.setFieldValue(AtomicReference.class,"valueOffset",valueOffset + 1);
    FutureTask<Void> registerFutureTask=new FutureTask<>(new Callable<Void>(){
      @Override public Void call(){
        _mockIntraband.registerDatagramReceiveHandler(_TYPE,datagramReceiveHandler2);
        Assert.fail();
        return null;
      }
    }
);
    Thread registerThread=new Thread(registerFutureTask,"Register Thread");
    registerThread.start();
    FutureTask<Void> monitorFutureTask=new FutureTask<>(new Callable<Void>(){
      @Override public Void call() throws InterruptedException {
        for (int i=0; i < 10; i++) {
          GCUtil.gc(false,false);
        }
        atomicReference.set(null);
        return null;
      }
    }
);
    Thread monitorThread=new Thread(monitorFutureTask,"Monitor Thread");
    monitorThread.start();
    monitorFutureTask.get(10,TimeUnit.MINUTES);
    try {
      Assert.assertSame(datagramReceiveHandler1,registerFutureTask.get(10,TimeUnit.MINUTES));
      Assert.fail();
    }
 catch (    ExecutionException ee) {
      Throwable throwable=ee.getCause();
      Assert.assertSame(NullPointerException.class,throwable.getClass());
    }
  }
  finally {
    ReflectionTestUtil.setFieldValue(AtomicReference.class,"valueOffset",valueOffset);
  }
  _mockIntraband.close();
  Assert.assertNull(datagramReceiveHandlersReference.get());
  try {
    _mockIntraband.getDatagramReceiveHandlers();
    Assert.fail();
  }
 catch (  ClosedIntrabandException cibe) {
  }
  try {
    _mockIntraband.registerDatagramReceiveHandler(_TYPE,new RecordDatagramReceiveHandler());
    Assert.fail();
  }
 catch (  ClosedIntrabandException cibe) {
  }
  try {
    _mockIntraband.unregisterDatagramReceiveHandler(_TYPE);
    Assert.fail();
  }
 catch (  ClosedIntrabandException cibe) {
  }
}
