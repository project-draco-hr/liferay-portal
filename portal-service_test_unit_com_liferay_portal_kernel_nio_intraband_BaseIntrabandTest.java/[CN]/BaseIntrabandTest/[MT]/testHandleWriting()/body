{
  ChannelContext channelContext=null;
  Datagram requestDatagram=null;
  RecordCompletionHandler<Object> recordCompletionHandler=null;
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(),Level.FINE)){
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    channelContext=new ChannelContext(new LinkedList<Datagram>());
    MockRegistrationReference mockRegistrationReference=new MockRegistrationReference(_mockIntraband);
    channelContext.setRegistrationReference(mockRegistrationReference);
    channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE,_data));
    Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(),channelContext));
    Assert.assertFalse(mockRegistrationReference.isValid());
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    assertMessageStartWith(logRecord,"Broken write channel, unregister ");
    Assert.assertTrue(logRecord.getThrown() instanceof IOException);
    logRecords=captureHandler.resetLogLevel(Level.INFO);
    channelContext=new ChannelContext(new LinkedList<Datagram>());
    mockRegistrationReference=new MockRegistrationReference(_mockIntraband);
    channelContext.setRegistrationReference(mockRegistrationReference);
    channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE,_data));
    Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(),channelContext));
    Assert.assertFalse(mockRegistrationReference.isValid());
    Assert.assertEquals(1,logRecords.size());
    logRecord=logRecords.get(0);
    assertMessageStartWith(logRecord,"Broken write channel, unregister ");
    Assert.assertNull(logRecord.getThrown());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    channelContext=new ChannelContext(null);
    mockRegistrationReference=new MockRegistrationReference(_mockIntraband);
    channelContext.setRegistrationReference(mockRegistrationReference);
    requestDatagram=Datagram.createRequestDatagram(_TYPE,_data);
    recordCompletionHandler=new RecordCompletionHandler<>();
    requestDatagram.completionHandler=recordCompletionHandler;
    channelContext.setWritingDatagram(requestDatagram);
    Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(),channelContext));
    Assert.assertFalse(mockRegistrationReference.isValid());
    recordCompletionHandler.waitUntilFailed();
    Assert.assertNotNull(recordCompletionHandler.getIOException());
    Assert.assertTrue(logRecords.isEmpty());
  }
   Pipe pipe=Pipe.open();
  Queue<Datagram> sendingQueue=new LinkedList<>();
  try (SourceChannel sourceChannel=pipe.source();SinkChannel sinkChannel=pipe.sink()){
    sourceChannel.configureBlocking(false);
    sinkChannel.configureBlocking(false);
    int bufferSize=1024 * 1024 * 10;
    ByteBuffer sendByteBuffer=ByteBuffer.allocate(bufferSize);
    ByteBuffer receiveByteBuffer=ByteBuffer.allocate(bufferSize + 14);
    channelContext=new ChannelContext(new LinkedList<Datagram>());
    channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE,sendByteBuffer));
    int count=0;
    while (!_mockIntraband.handleWriting(sinkChannel,channelContext)) {
      count++;
      sourceChannel.read(receiveByteBuffer);
      Assert.assertTrue(sendByteBuffer.hasRemaining());
    }
    sourceChannel.read(receiveByteBuffer);
    Assert.assertFalse(sendByteBuffer.hasRemaining());
    Assert.assertFalse(receiveByteBuffer.hasRemaining());
    Assert.assertTrue(count > 0);
    sourceChannel.configureBlocking(true);
    sinkChannel.configureBlocking(true);
    channelContext=new ChannelContext(new LinkedList<Datagram>());
    requestDatagram=Datagram.createRequestDatagram(_TYPE,_data);
    Object attachment=new Object();
    requestDatagram.attachment=attachment;
    recordCompletionHandler=new RecordCompletionHandler<>();
    requestDatagram.completionHandler=recordCompletionHandler;
    requestDatagram.completionTypes=EnumSet.of(CompletionType.SUBMITTED);
    channelContext.setWritingDatagram(requestDatagram);
    Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel,channelContext));
    recordCompletionHandler.waitUntilSubmitted();
    Assert.assertSame(attachment,recordCompletionHandler.getAttachment());
    channelContext=new ChannelContext(sendingQueue);
    requestDatagram=Datagram.createRequestDatagram(_TYPE,_data);
    requestDatagram.completionTypes=EnumSet.of(CompletionType.REPLIED);
    channelContext.setWritingDatagram(requestDatagram);
    Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel,channelContext));
    Assert.assertNull(requestDatagram.getDataByteBuffer());
    String requestDatagramString=requestDatagram.toString();
    Assert.assertTrue(requestDatagramString.contains("dataChunk=null"));
  }
   Assert.assertSame(sendingQueue,channelContext.getSendingQueue());
}
