{
  AutoDeployUtil.unregisterDir(AutoDeployDir.DEFAULT_NAME);
  HotDeployUtil.unregisterListeners();
  SandboxDeployUtil.unregisterDir(SandboxDeployDir.DEFAULT_NAME);
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down AIM");
    }
    AIMConnector.disconnect();
  }
 catch (  Exception e) {
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down ICQ");
    }
    ICQConnector.disconnect();
  }
 catch (  Exception e) {
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down MSN");
    }
    MSNConnector.disconnect();
  }
 catch (  Exception e) {
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down YM");
    }
    YMConnector.disconnect();
  }
 catch (  Exception e) {
  }
  JavadocManagerUtil.unload(StringPool.BLANK);
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down JCR");
    }
    JCRFactoryUtil.shutdown();
  }
 catch (  Exception e) {
  }
  LuceneHelperUtil.shutdown();
  DocumentConversionUtil.disconnect();
  try {
    SchedulerEngineUtil.shutdown();
  }
 catch (  Exception e) {
  }
  ThirdPartyThreadLocalRegistry.resetThreadLocals();
  CentralizedThreadLocal.clearShortLivedThreadLocals();
  DB db=DBFactoryUtil.getDB();
  String dbType=db.getType();
  if (dbType.equals(DB.TYPE_HYPERSONIC)) {
    Connection connection=null;
    Statement statement=null;
    try {
      connection=DataAccess.getConnection();
      statement=connection.createStatement();
      statement.executeUpdate("SHUTDOWN");
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
 finally {
      DataAccess.cleanUp(connection,statement);
    }
  }
  try {
    LogFactoryUtil.setLogFactory(new Jdk14LogFactoryImpl());
  }
 catch (  Exception e) {
  }
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  PortalExecutorManagerUtil.shutdown(true);
  if (GetterUtil.getBoolean(PropsUtil.get(PropsKeys.SHUTDOWN_PROGRAMMATICALLY_EXIT))) {
    Thread currentThread=Thread.currentThread();
    ThreadGroup threadGroup=getThreadGroup();
    Thread[] threads=getThreads(threadGroup);
    for (    Thread thread : threads) {
      if ((thread == null) || (thread == currentThread)) {
        continue;
      }
      try {
        thread.interrupt();
      }
 catch (      Exception e) {
      }
    }
    threadGroup.destroy();
  }
}
