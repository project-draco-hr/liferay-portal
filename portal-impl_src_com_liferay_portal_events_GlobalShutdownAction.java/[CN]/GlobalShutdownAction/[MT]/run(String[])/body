{
  HotDeployUtil.unregisterListeners();
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down AIM");
    }
    AIMConnector.disconnect();
  }
 catch (  Exception e) {
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down ICQ");
    }
    ICQConnector.disconnect();
  }
 catch (  Exception e) {
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down MSN");
    }
    MSNConnector.disconnect();
  }
 catch (  Exception e) {
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down YM");
    }
    YMConnector.disconnect();
  }
 catch (  Exception e) {
  }
  try {
    if (_log.isDebugEnabled()) {
      _log.debug("Shutting down JCR");
    }
    JCRFactoryUtil.shutdown();
  }
 catch (  Exception e) {
  }
  DocumentConversionUtil.disconnect();
  if (PropsValues.POP_SERVER_NOTIFICATIONS_ENABLED) {
    POPServerUtil.stop();
  }
  try {
    JobSchedulerUtil.shutdown();
  }
 catch (  Exception e) {
  }
  try {
    SchedulerEngineUtil.shutdown();
  }
 catch (  Exception e) {
  }
  DB db=DBFactoryUtil.getDB();
  if (db.getType().equals(DB.TYPE_HYPERSONIC)) {
    try {
      Connection connection=DataAccess.getConnection();
      Statement statement=connection.createStatement();
      statement.executeUpdate("SHUTDOWN");
      statement.close();
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  try {
    LogFactoryUtil.setLogFactory(new Jdk14LogFactoryImpl());
  }
 catch (  Exception e) {
  }
  if (GetterUtil.getBoolean(PropsUtil.get(PropsKeys.SHUTDOWN_PROGRAMMATICALLY_EXIT))) {
    Thread thread=Thread.currentThread();
    ThreadGroup threadGroup=thread.getThreadGroup();
    for (int i=0; i < 10; i++) {
      if (threadGroup.getParent() == null) {
        break;
      }
 else {
        threadGroup=threadGroup.getParent();
      }
    }
    Thread[] threads=new Thread[threadGroup.activeCount() * 2];
    threadGroup.enumerate(threads);
    for (int i=0; i < threads.length; i++) {
      Thread curThread=threads[i];
      if ((curThread != null) && (curThread != thread)) {
        try {
          curThread.interrupt();
        }
 catch (        Exception e) {
        }
      }
    }
    threadGroup.destroy();
  }
}
