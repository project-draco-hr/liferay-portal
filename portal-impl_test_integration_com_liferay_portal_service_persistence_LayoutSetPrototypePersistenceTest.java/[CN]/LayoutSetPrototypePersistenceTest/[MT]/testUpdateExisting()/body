{
  long pk=ServiceTestUtil.nextLong();
  LayoutSetPrototype newLayoutSetPrototype=_persistence.create(pk);
  newLayoutSetPrototype.setUuid(ServiceTestUtil.randomString());
  newLayoutSetPrototype.setCompanyId(ServiceTestUtil.nextLong());
  newLayoutSetPrototype.setCreateDate(ServiceTestUtil.nextDate());
  newLayoutSetPrototype.setModifiedDate(ServiceTestUtil.nextDate());
  newLayoutSetPrototype.setName(ServiceTestUtil.randomString());
  newLayoutSetPrototype.setDescription(ServiceTestUtil.randomString());
  newLayoutSetPrototype.setSettings(ServiceTestUtil.randomString());
  newLayoutSetPrototype.setActive(ServiceTestUtil.randomBoolean());
  _persistence.update(newLayoutSetPrototype);
  LayoutSetPrototype existingLayoutSetPrototype=_persistence.findByPrimaryKey(newLayoutSetPrototype.getPrimaryKey());
  Assert.assertEquals(existingLayoutSetPrototype.getUuid(),newLayoutSetPrototype.getUuid());
  Assert.assertEquals(existingLayoutSetPrototype.getLayoutSetPrototypeId(),newLayoutSetPrototype.getLayoutSetPrototypeId());
  Assert.assertEquals(existingLayoutSetPrototype.getCompanyId(),newLayoutSetPrototype.getCompanyId());
  Assert.assertEquals(Time.getShortTimestamp(existingLayoutSetPrototype.getCreateDate()),Time.getShortTimestamp(newLayoutSetPrototype.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingLayoutSetPrototype.getModifiedDate()),Time.getShortTimestamp(newLayoutSetPrototype.getModifiedDate()));
  Assert.assertEquals(existingLayoutSetPrototype.getName(),newLayoutSetPrototype.getName());
  Assert.assertEquals(existingLayoutSetPrototype.getDescription(),newLayoutSetPrototype.getDescription());
  Assert.assertEquals(existingLayoutSetPrototype.getSettings(),newLayoutSetPrototype.getSettings());
  Assert.assertEquals(existingLayoutSetPrototype.getActive(),newLayoutSetPrototype.getActive());
}
