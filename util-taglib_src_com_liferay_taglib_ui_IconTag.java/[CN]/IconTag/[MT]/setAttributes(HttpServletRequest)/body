{
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  if (_data == null) {
    _data=new HashMap<String,Object>(1);
  }
  String id=_id;
  if (Validator.isNull(id)) {
    id=(String)request.getAttribute("liferay-ui:icon-menu:id");
    String message=_message;
    if (Validator.isNull(message)) {
      message=_image;
    }
    if (Validator.isNotNull(id) && Validator.isNotNull(message)) {
      id=id.concat(StringPool.UNDERLINE).concat(FriendlyURLNormalizerUtil.normalize(message));
      PortletResponse portletResponse=(PortletResponse)request.getAttribute(JavaConstants.JAVAX_PORTLET_RESPONSE);
      String namespace=StringPool.BLANK;
      if (portletResponse != null) {
        namespace=portletResponse.getNamespace();
      }
      id=PortalUtil.getUniqueElementId(getOriginalServletRequest(),namespace,id);
    }
 else {
      id=PortalUtil.generateRandomKey(request,IconTag.class.getName());
    }
  }
  if (_message == null) {
    _message=StringUtil.replace(_image,StringPool.UNDERLINE,StringPool.DASH);
    _message=StringUtil.replace(_message,_AUI_PATH,StringPool.BLANK);
  }
  if (_useDialog && Validator.isNull(_data.get("title"))) {
    String message=_message;
    if (_localizeMessage) {
      message=LanguageUtil.get(pageContext,_message);
    }
    _data.put("title",HtmlUtil.stripHtml(message));
  }
  if (Validator.isNull(_method)) {
    if (_url == null) {
      _url=StringPool.BLANK;
    }
    int pos=_url.indexOf("p_p_lifecycle=0");
    if (pos != -1) {
      _method="get";
    }
 else {
      _method="post";
    }
  }
  boolean forcePost=_method.equals("post") && (_url.startsWith(Http.HTTP_WITH_SLASH) || _url.startsWith(Http.HTTPS_WITH_SLASH));
  boolean auiImage=(_image != null) && _image.startsWith(_AUI_PATH);
  if (Validator.isNull(_src)) {
    if (auiImage) {
      _src=themeDisplay.getPathThemeImages().concat("/spacer.png");
    }
 else     if (Validator.isNotNull(_image)) {
      StringBundler sb=new StringBundler(4);
      sb.append(themeDisplay.getPathThemeImages());
      sb.append("/common/");
      sb.append(_image);
      sb.append(".png");
      _src=StringUtil.replace(sb.toString(),"common/../","");
    }
  }
  if (Validator.isNull(_srcHover) && Validator.isNotNull(_imageHover)) {
    StringBundler sb=new StringBundler(4);
    sb.append(themeDisplay.getPathThemeImages());
    sb.append("/common/");
    sb.append(_imageHover);
    sb.append(".png");
    _srcHover=sb.toString();
  }
  request.setAttribute("liferay-ui:icon:alt",_alt);
  request.setAttribute("liferay-ui:icon:ariaRole",_ariaRole);
  request.setAttribute("liferay-ui:icon:auiImage",String.valueOf(auiImage));
  request.setAttribute("liferay-ui:icon:cssClass",_cssClass);
  request.setAttribute("liferay-ui:icon:data",_data);
  request.setAttribute("liferay-ui:icon:details",getDetails());
  request.setAttribute("liferay-ui:icon:iconCssClass",_iconCssClass);
  request.setAttribute("liferay-ui:icon:id",id);
  request.setAttribute("liferay-ui:icon:image",_image);
  request.setAttribute("liferay-ui:icon:imageHover",_imageHover);
  request.setAttribute("liferay-ui:icon:forcePost",String.valueOf(forcePost));
  request.setAttribute("liferay-ui:icon:label",String.valueOf(_label));
  request.setAttribute("liferay-ui:icon:lang",_lang);
  request.setAttribute("liferay-ui:icon:linkCssClass",_linkCssClass);
  request.setAttribute("liferay-ui:icon:localizeMessage",String.valueOf(_localizeMessage));
  request.setAttribute("liferay-ui:icon:message",_message);
  request.setAttribute("liferay-ui:icon:method",_method);
  request.setAttribute("liferay-ui:icon:onClick",_onClick);
  request.setAttribute("liferay-ui:icon:src",_src);
  request.setAttribute("liferay-ui:icon:srcHover",_srcHover);
  request.setAttribute("liferay-ui:icon:target",_target);
  request.setAttribute("liferay-ui:icon:toolTip",String.valueOf(_toolTip));
  request.setAttribute("liferay-ui:icon:url",_url);
  request.setAttribute("liferay-ui:icon:useDialog",String.valueOf(_useDialog));
}
