{
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  JSONArray jsonArray=JSONFactoryUtil.createJSONArray();
  List<Layout> layoutAncestors=null;
  List<Layout> layouts=LayoutServiceUtil.getLayouts(groupId,privateLayout,parentLayoutId,incomplete,QueryUtil.ALL_POS,QueryUtil.ALL_POS);
  long selPlid=ParamUtil.getLong(request,"selPlid");
  if (selPlid != 0) {
    Layout selLayout=LayoutLocalServiceUtil.getLayout(selPlid);
    layoutAncestors=selLayout.getAncestors();
    layoutAncestors.add(selLayout);
    List<Layout> filteredLayoutAncestors=new ArrayList<Layout>();
    for (    Layout layout : layouts) {
      if (LayoutPermissionUtil.contains(themeDisplay.getPermissionChecker(),layout.getPlid(),ActionKeys.VIEW)) {
        filteredLayoutAncestors.add(layout);
      }
    }
    layoutAncestors=filteredLayoutAncestors;
  }
  int start=0;
  int end=layouts.size();
  if (PropsValues.LAYOUT_MANAGE_PAGES_INITIAL_CHILDREN > -1) {
    start=ParamUtil.getInteger(request,"start");
    start=Math.max(0,Math.min(start,layouts.size()));
    end=ParamUtil.getInteger(request,"end",start + PropsValues.LAYOUT_MANAGE_PAGES_INITIAL_CHILDREN);
    int loadedLayoutsCount=_getLoadedLayoutsCount(request,parentLayoutId);
    if (loadedLayoutsCount > end) {
      end=loadedLayoutsCount;
    }
    end=Math.max(start,Math.min(end,layouts.size()));
  }
  for (  Layout layout : layouts.subList(start,end)) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
    if ((layoutAncestors != null) && layoutAncestors.contains(layout) || ArrayUtil.contains(expandedLayoutIds,layout.getLayoutId())) {
      String childrenJSON=StringPool.BLANK;
      if (layout instanceof VirtualLayout) {
        VirtualLayout virtualLayout=(VirtualLayout)layout;
        childrenJSON=getLayoutsJSON(request,virtualLayout.getSourceGroupId(),virtualLayout.isPrivateLayout(),virtualLayout.getLayoutId(),expandedLayoutIds,incomplete);
      }
 else {
        childrenJSON=getLayoutsJSON(request,groupId,layout.isPrivateLayout(),layout.getLayoutId(),expandedLayoutIds,incomplete);
      }
      jsonObject.put("children",JSONFactoryUtil.createJSONObject(childrenJSON));
    }
    jsonObject.put("contentDisplayPage",layout.isContentDisplayPage());
    jsonObject.put("friendlyURL",layout.getFriendlyURL());
    if (layout instanceof VirtualLayout) {
      VirtualLayout virtualLayout=(VirtualLayout)layout;
      jsonObject.put("groupId",virtualLayout.getSourceGroupId());
    }
 else {
      jsonObject.put("groupId",layout.getGroupId());
    }
    jsonObject.put("hasChildren",layout.hasChildren());
    jsonObject.put("layoutId",layout.getLayoutId());
    jsonObject.put("name",layout.getName(themeDisplay.getLocale()));
    jsonObject.put("parentLayoutId",layout.getParentLayoutId());
    jsonObject.put("plid",layout.getPlid());
    jsonObject.put("priority",layout.getPriority());
    jsonObject.put("privateLayout",layout.isPrivateLayout());
    jsonObject.put("type",layout.getType());
    jsonObject.put("updateable",SitesUtil.isLayoutUpdateable(layout));
    jsonObject.put("uuid",layout.getUuid());
    LayoutRevision layoutRevision=LayoutStagingUtil.getLayoutRevision(layout);
    if (layoutRevision != null) {
      User user=themeDisplay.getUser();
      long recentLayoutSetBranchId=StagingUtil.getRecentLayoutSetBranchId(user,layout.getLayoutSet().getLayoutSetId());
      if (StagingUtil.isIncomplete(layout,recentLayoutSetBranchId)) {
        jsonObject.put("incomplete",true);
      }
      long layoutSetBranchId=layoutRevision.getLayoutSetBranchId();
      LayoutSetBranch layoutSetBranch=LayoutSetBranchLocalServiceUtil.getLayoutSetBranch(layoutSetBranchId);
      LayoutBranch layoutBranch=layoutRevision.getLayoutBranch();
      if (!layoutBranch.isMaster()) {
        jsonObject.put("layoutBranchId",layoutBranch.getLayoutBranchId());
        jsonObject.put("layoutBranchName",layoutBranch.getName());
      }
      jsonObject.put("layoutRevisionId",layoutRevision.getLayoutRevisionId());
      jsonObject.put("layoutSetBranchId",layoutSetBranchId);
      jsonObject.put("layoutSetBranchName",layoutSetBranch.getName());
    }
    jsonArray.put(jsonObject);
  }
  JSONObject responseJSONObject=JSONFactoryUtil.createJSONObject();
  responseJSONObject.put("layouts",jsonArray);
  responseJSONObject.put("total",layouts.size());
  return responseJSONObject.toString();
}
