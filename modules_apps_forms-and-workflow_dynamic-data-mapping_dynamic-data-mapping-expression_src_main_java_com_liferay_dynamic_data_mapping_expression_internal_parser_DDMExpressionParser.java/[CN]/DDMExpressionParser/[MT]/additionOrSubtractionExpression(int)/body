{
  ParserRuleContext _parentctx=_ctx;
  int _parentState=getState();
  AdditionOrSubtractionExpressionContext _localctx=new AdditionOrSubtractionExpressionContext(_ctx,_parentState);
  AdditionOrSubtractionExpressionContext _prevctx=_localctx;
  int _startState=16;
  enterRecursionRule(_localctx,16,RULE_additionOrSubtractionExpression,_p);
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
{
        _localctx=new ToMultOrDivContext(_localctx);
        _ctx=_localctx;
        _prevctx=_localctx;
        setState(109);
        multiplicationOrDivisionExpression(0);
      }
      _ctx.stop=_input.LT(-1);
      setState(119);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,10,_ctx);
      while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt == 1) {
          if (_parseListeners != null)           triggerExitRuleEvent();
          _prevctx=_localctx;
{
            setState(117);
switch (getInterpreter().adaptivePredict(_input,9,_ctx)) {
case 1:
{
                _localctx=new AdditionExpressionContext(new AdditionOrSubtractionExpressionContext(_parentctx,_parentState));
                pushNewRecursionContext(_localctx,_startState,RULE_additionOrSubtractionExpression);
                setState(111);
                if (!(precpred(_ctx,3)))                 throw new FailedPredicateException(this,"precpred(_ctx, 3)");
                setState(112);
                match(PLUS);
                setState(113);
                multiplicationOrDivisionExpression(0);
              }
            break;
case 2:
{
            _localctx=new SubtractionExpressionContext(new AdditionOrSubtractionExpressionContext(_parentctx,_parentState));
            pushNewRecursionContext(_localctx,_startState,RULE_additionOrSubtractionExpression);
            setState(114);
            if (!(precpred(_ctx,2)))             throw new FailedPredicateException(this,"precpred(_ctx, 2)");
            setState(115);
            match(MINUS);
            setState(116);
            multiplicationOrDivisionExpression(0);
          }
        break;
    }
  }
}
setState(121);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,10,_ctx);
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
unrollRecursionContexts(_parentctx);
}
return _localctx;
}
