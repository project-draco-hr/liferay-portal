{
  ParserRuleContext _parentctx=_ctx;
  int _parentState=getState();
  LogicalOrExpressionContext _localctx=new LogicalOrExpressionContext(_ctx,_parentState);
  LogicalOrExpressionContext _prevctx=_localctx;
  int _startState=2;
  enterRecursionRule(_localctx,2,RULE_logicalOrExpression,_p);
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
{
        _localctx=new ToLogicalAndExpressionContext(_localctx);
        _ctx=_localctx;
        _prevctx=_localctx;
        setState(36);
        logicalAndExpression(0);
      }
      _ctx.stop=_input.LT(-1);
      setState(43);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,0,_ctx);
      while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt == 1) {
          if (_parseListeners != null)           triggerExitRuleEvent();
          _prevctx=_localctx;
{
{
              _localctx=new OrExpressionContext(new LogicalOrExpressionContext(_parentctx,_parentState));
              pushNewRecursionContext(_localctx,_startState,RULE_logicalOrExpression);
              setState(38);
              if (!(precpred(_ctx,2)))               throw new FailedPredicateException(this,"precpred(_ctx, 2)");
              setState(39);
              match(OR);
              setState(40);
              logicalAndExpression(0);
            }
          }
        }
        setState(45);
        _errHandler.sync(this);
        _alt=getInterpreter().adaptivePredict(_input,0,_ctx);
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    unrollRecursionContexts(_parentctx);
  }
  return _localctx;
}
