{
  BooleanOperandExpressionContext _localctx=new BooleanOperandExpressionContext(_ctx,getState());
  enterRule(_localctx,12,RULE_booleanOperandExpression);
  try {
    setState(102);
switch (getInterpreter().adaptivePredict(_input,7,_ctx)) {
case 1:
      _localctx=new ToLogicalTermContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(96);
    logicalTerm();
  }
break;
case 2:
_localctx=new ToAdditionOrSubtractionEpressionContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(97);
additionOrSubtractionExpression(0);
}
break;
case 3:
_localctx=new BooleanParenthesisContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(98);
match(LPAREN);
setState(99);
logicalOrExpression(0);
setState(100);
match(RPAREN);
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
