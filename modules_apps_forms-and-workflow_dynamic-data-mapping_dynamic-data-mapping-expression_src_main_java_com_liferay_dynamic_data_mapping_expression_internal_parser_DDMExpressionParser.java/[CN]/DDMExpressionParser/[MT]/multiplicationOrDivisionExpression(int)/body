{
  ParserRuleContext _parentctx=_ctx;
  int _parentState=getState();
  MultiplicationOrDivisionExpressionContext _localctx=new MultiplicationOrDivisionExpressionContext(_ctx,_parentState);
  MultiplicationOrDivisionExpressionContext _prevctx=_localctx;
  int _startState=18;
  enterRecursionRule(_localctx,18,RULE_multiplicationOrDivisionExpression,_p);
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
{
        _localctx=new ToNumericUnaryExpressionContext(_localctx);
        _ctx=_localctx;
        _prevctx=_localctx;
        setState(123);
        numericUnaryEpression();
      }
      _ctx.stop=_input.LT(-1);
      setState(133);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,12,_ctx);
      while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt == 1) {
          if (_parseListeners != null)           triggerExitRuleEvent();
          _prevctx=_localctx;
{
            setState(131);
switch (getInterpreter().adaptivePredict(_input,11,_ctx)) {
case 1:
{
                _localctx=new MultiplicationExpressionContext(new MultiplicationOrDivisionExpressionContext(_parentctx,_parentState));
                pushNewRecursionContext(_localctx,_startState,RULE_multiplicationOrDivisionExpression);
                setState(125);
                if (!(precpred(_ctx,3)))                 throw new FailedPredicateException(this,"precpred(_ctx, 3)");
                setState(126);
                match(MULT);
                setState(127);
                numericUnaryEpression();
              }
            break;
case 2:
{
            _localctx=new DivisionExpressionContext(new MultiplicationOrDivisionExpressionContext(_parentctx,_parentState));
            pushNewRecursionContext(_localctx,_startState,RULE_multiplicationOrDivisionExpression);
            setState(128);
            if (!(precpred(_ctx,2)))             throw new FailedPredicateException(this,"precpred(_ctx, 2)");
            setState(129);
            match(DIV);
            setState(130);
            numericUnaryEpression();
          }
        break;
    }
  }
}
setState(135);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,12,_ctx);
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
unrollRecursionContexts(_parentctx);
}
return _localctx;
}
