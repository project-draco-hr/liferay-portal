{
  ParserRuleContext _parentctx=_ctx;
  int _parentState=getState();
  ComparisonExpressionContext _localctx=new ComparisonExpressionContext(_ctx,_parentState);
  ComparisonExpressionContext _prevctx=_localctx;
  int _startState=8;
  enterRecursionRule(_localctx,8,RULE_comparisonExpression,_p);
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
{
        _localctx=new ToBooleanUnaryExpressionContext(_localctx);
        _ctx=_localctx;
        _prevctx=_localctx;
        setState(72);
        booleanUnaryExpression();
      }
      _ctx.stop=_input.LT(-1);
      setState(88);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,5,_ctx);
      while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt == 1) {
          if (_parseListeners != null)           triggerExitRuleEvent();
          _prevctx=_localctx;
{
            setState(86);
switch (getInterpreter().adaptivePredict(_input,4,_ctx)) {
case 1:
{
                _localctx=new GreaterThanExpressionContext(new ComparisonExpressionContext(_parentctx,_parentState));
                pushNewRecursionContext(_localctx,_startState,RULE_comparisonExpression);
                setState(74);
                if (!(precpred(_ctx,5)))                 throw new FailedPredicateException(this,"precpred(_ctx, 5)");
                setState(75);
                match(GT);
                setState(76);
                additionOrSubtractionExpression(0);
              }
            break;
case 2:
{
            _localctx=new GreaterThanOrEqualsExpressionContext(new ComparisonExpressionContext(_parentctx,_parentState));
            pushNewRecursionContext(_localctx,_startState,RULE_comparisonExpression);
            setState(77);
            if (!(precpred(_ctx,4)))             throw new FailedPredicateException(this,"precpred(_ctx, 4)");
            setState(78);
            match(GE);
            setState(79);
            additionOrSubtractionExpression(0);
          }
        break;
case 3:
{
        _localctx=new LessThanExpressionContext(new ComparisonExpressionContext(_parentctx,_parentState));
        pushNewRecursionContext(_localctx,_startState,RULE_comparisonExpression);
        setState(80);
        if (!(precpred(_ctx,3)))         throw new FailedPredicateException(this,"precpred(_ctx, 3)");
        setState(81);
        match(LT);
        setState(82);
        additionOrSubtractionExpression(0);
      }
    break;
case 4:
{
    _localctx=new LessThanOrEqualsExpressionContext(new ComparisonExpressionContext(_parentctx,_parentState));
    pushNewRecursionContext(_localctx,_startState,RULE_comparisonExpression);
    setState(83);
    if (!(precpred(_ctx,2)))     throw new FailedPredicateException(this,"precpred(_ctx, 2)");
    setState(84);
    match(LE);
    setState(85);
    additionOrSubtractionExpression(0);
  }
break;
}
}
}
setState(90);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,5,_ctx);
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
unrollRecursionContexts(_parentctx);
}
return _localctx;
}
