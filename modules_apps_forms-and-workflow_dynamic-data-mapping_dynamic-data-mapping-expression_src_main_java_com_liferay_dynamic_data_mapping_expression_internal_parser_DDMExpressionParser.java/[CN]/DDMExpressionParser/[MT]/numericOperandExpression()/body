{
  NumericOperandExpressionContext _localctx=new NumericOperandExpressionContext(_ctx,getState());
  enterRule(_localctx,22,RULE_numericOperandExpression);
  try {
    setState(147);
switch (getInterpreter().adaptivePredict(_input,14,_ctx)) {
case 1:
      _localctx=new ToNumericTermContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(141);
    numericTerm();
  }
break;
case 2:
_localctx=new ToFunctionCallExpressionContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(142);
functionCallExpression();
}
break;
case 3:
_localctx=new NumericParenthesisContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(143);
match(LPAREN);
setState(144);
additionOrSubtractionExpression(0);
setState(145);
match(RPAREN);
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
