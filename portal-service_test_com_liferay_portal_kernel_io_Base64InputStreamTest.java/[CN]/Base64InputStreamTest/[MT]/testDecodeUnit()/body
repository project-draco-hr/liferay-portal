{
  File testFile=new File(_testFilePath);
  byte[] outputBuffer=new byte[3];
  int position=0;
  FileOutputStream fileOutputStream=new FileOutputStream(testFile);
  byte[] bytes={CharPool.LOWER_CASE_A,CharPool.LOWER_CASE_B,CharPool.LOWER_CASE_C,CharPool.LOWER_CASE_D,CharPool.LOWER_CASE_E,CharPool.LOWER_CASE_F,CharPool.LOWER_CASE_H,CharPool.EQUAL,CharPool.LOWER_CASE_E,CharPool.LOWER_CASE_F,CharPool.EQUAL,CharPool.EQUAL,CharPool.LOWER_CASE_E,CharPool.EQUAL,CharPool.LOWER_CASE_E,CharPool.LOWER_CASE_F,CharPool.EQUAL,CharPool.LOWER_CASE_A};
  fileOutputStream.write(bytes);
  fileOutputStream.close();
  Base64InputStream base64InputStream=new Base64InputStream(new FileInputStream(testFile));
  int expResult=3;
  int returnValue=base64InputStream.decodeUnit(outputBuffer,position);
  assertEquals(expResult,returnValue);
  expResult=2;
  returnValue=base64InputStream.decodeUnit(outputBuffer,position);
  assertEquals(expResult,returnValue);
  expResult=1;
  returnValue=base64InputStream.decodeUnit(outputBuffer,position);
  assertEquals(expResult,returnValue);
  expResult=-1;
  returnValue=base64InputStream.decodeUnit(outputBuffer,position);
  assertEquals(expResult,returnValue);
  expResult=-1;
  returnValue=base64InputStream.decodeUnit(outputBuffer,position);
  assertEquals(expResult,returnValue);
  expResult=-1;
  returnValue=base64InputStream.decodeUnit(outputBuffer,position);
  assertEquals(expResult,returnValue);
  base64InputStream.close();
  testFile.delete();
}
