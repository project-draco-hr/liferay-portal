{
  long[] deleteFolderIds=StringUtil.split(ParamUtil.getString(actionRequest,"folderIds"),0L);
  List<TrashedModel> trashedModels=new ArrayList<>();
  for (int i=0; i < deleteFolderIds.length; i++) {
    long deleteFolderId=deleteFolderIds[i];
    if (moveToTrash) {
      Folder folder=DLAppServiceUtil.moveFolderToTrash(deleteFolderId);
      if (folder.getModel() instanceof TrashedModel) {
        trashedModels.add((TrashedModel)folder.getModel());
      }
    }
 else {
      DLAppServiceUtil.deleteFolder(deleteFolderId);
    }
  }
  long[] deleteFileShortcutIds=StringUtil.split(ParamUtil.getString(actionRequest,"fileShortcutIds"),0L);
  for (int i=0; i < deleteFileShortcutIds.length; i++) {
    long deleteFileShortcutId=deleteFileShortcutIds[i];
    if (moveToTrash) {
      FileShortcut fileShortcut=DLAppServiceUtil.moveFileShortcutToTrash(deleteFileShortcutId);
      if (fileShortcut.getModel() instanceof TrashedModel) {
        trashedModels.add((TrashedModel)fileShortcut.getModel());
      }
    }
 else {
      DLAppServiceUtil.deleteFileShortcut(deleteFileShortcutId);
    }
  }
  long[] deleteFileEntryIds=StringUtil.split(ParamUtil.getString(actionRequest,"fileEntryIds"),0L);
  for (  long deleteFileEntryId : deleteFileEntryIds) {
    if (moveToTrash) {
      FileEntry fileEntry=DLAppServiceUtil.moveFileEntryToTrash(deleteFileEntryId);
      if (fileEntry.getModel() instanceof TrashedModel) {
        trashedModels.add((TrashedModel)fileEntry.getModel());
      }
    }
 else {
      DLAppServiceUtil.deleteFileEntry(deleteFileEntryId);
    }
  }
  if (moveToTrash && !trashedModels.isEmpty()) {
    TrashUtil.addTrashSessionMessages(actionRequest,trashedModels);
    hideDefaultSuccessMessage(actionRequest);
  }
}
