{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long workflowInstanceId=ParamUtil.getLong(actionRequest,"workflowInstanceId");
  WorkflowInstance workflowInstance=WorkflowInstanceManagerUtil.getWorkflowInstance(themeDisplay.getCompanyId(),workflowInstanceId);
  Map<String,Serializable> workflowContext=workflowInstance.getWorkflowContext();
  long companyId=GetterUtil.getLong(workflowContext.get(WorkflowConstants.CONTEXT_COMPANY_ID));
  long userId=GetterUtil.getLong(workflowContext.get(WorkflowConstants.CONTEXT_USER_ID));
  long groupId=GetterUtil.getLong(workflowContext.get(WorkflowConstants.CONTEXT_GROUP_ID));
  String className=GetterUtil.getString(workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_NAME));
  long classPK=GetterUtil.getLong(workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_PK));
  WorkflowHandler workflowHandler=WorkflowHandlerRegistryUtil.getWorkflowHandler(className);
  workflowHandler.updateStatus(WorkflowConstants.STATUS_DRAFT,workflowContext);
  WorkflowInstanceLinkLocalServiceUtil.deleteWorkflowInstanceLink(companyId,groupId,className,classPK);
  Layout layout=themeDisplay.getLayout();
  Group layoutGroup=layout.getGroup();
  if (layoutGroup.isControlPanel() && (WorkflowInstanceManagerUtil.getWorkflowInstanceCount(companyId,userId,null,null,null) == 0)) {
    PermissionChecker permissionChecker=themeDisplay.getPermissionChecker();
    String portletId=PortalUtil.getPortletId(actionRequest);
    if (!permissionChecker.hasPermission(groupId,portletId,0,ActionKeys.ACCESS_IN_CONTROL_PANEL)) {
      return themeDisplay.getURLControlPanel();
    }
  }
  return null;
}
