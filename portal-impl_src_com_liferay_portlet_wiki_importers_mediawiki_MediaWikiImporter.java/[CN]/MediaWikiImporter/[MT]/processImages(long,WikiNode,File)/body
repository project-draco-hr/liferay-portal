{
  if ((imagesFile == null) || (!imagesFile.exists())) {
    return;
  }
  ProgressTracker progressTracker=ProgressTrackerThreadLocal.getProgressTracker();
  int count=0;
  ZipReader zipReader=new ZipReader(imagesFile);
  Map<String,byte[]> entries=zipReader.getEntries();
  int total=entries.size();
  if (total > 0) {
    try {
      WikiPageLocalServiceUtil.getPage(node.getNodeId(),SHARED_IMAGES_TITLE);
    }
 catch (    NoSuchPageException nspe) {
      WikiPageLocalServiceUtil.addPage(userId,node.getNodeId(),SHARED_IMAGES_TITLE,SHARED_IMAGES_CONTENT,null,true,null,null);
    }
  }
  List<ObjectValuePair<String,byte[]>> attachments=new ArrayList<ObjectValuePair<String,byte[]>>();
  Iterator<Map.Entry<String,byte[]>> itr=entries.entrySet().iterator();
  int percentage=50;
  for (int i=0; itr.hasNext(); i++) {
    Map.Entry<String,byte[]> entry=itr.next();
    String key=entry.getKey();
    byte[] value=entry.getValue();
    if (key.endsWith(StringPool.SLASH)) {
      _log.info("Ignoring " + key);
      continue;
    }
    String[] paths=StringUtil.split(key,StringPool.SLASH);
    if (!isValidImage(paths,value)) {
      _log.info("Ignoring " + key);
      continue;
    }
    String fileName=paths[paths.length - 1];
    attachments.add(new ObjectValuePair<String,byte[]>(fileName,value));
    count++;
    if ((i % 5) == 0) {
      WikiPageLocalServiceUtil.addPageAttachments(node.getNodeId(),SHARED_IMAGES_TITLE,attachments);
      attachments.clear();
      percentage=Math.min(50 + (i * 50) / total,99);
      progressTracker.updateProgress(percentage);
    }
  }
  if (!attachments.isEmpty()) {
    WikiPageLocalServiceUtil.addPageAttachments(node.getNodeId(),SHARED_IMAGES_TITLE,attachments);
  }
  _log.info("Imported " + count + " images into "+ node.getName());
}
