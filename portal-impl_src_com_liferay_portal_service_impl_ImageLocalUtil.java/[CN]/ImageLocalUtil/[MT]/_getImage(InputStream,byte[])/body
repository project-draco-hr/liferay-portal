{
  MemoryCacheImageInputStream mcis=null;
  try {
    if (is == null) {
      is=new ByteArrayInputStream(bytes);
    }
 else {
      try {
        bytes=FileUtil.getBytes(is);
      }
  finally {
        is.close();
      }
      is=new ByteArrayInputStream(bytes);
    }
    mcis=new MemoryCacheImageInputStream(is);
    String type=ImageImpl.TYPE_NOT_AVAILABLE;
    Iterator itr=ImageIO.getImageReaders(mcis);
    while (itr.hasNext()) {
      ImageReader reader=(ImageReader)itr.next();
      if (reader instanceof GIFImageReader) {
        type=ImageImpl.TYPE_GIF;
      }
 else       if (reader instanceof JPEGImageReader) {
        type=ImageImpl.TYPE_JPEG;
      }
 else       if (reader instanceof PNGImageReader) {
        type=ImageImpl.TYPE_PNG;
      }
      reader.dispose();
    }
    BufferedImage bufferedImage=ImageIO.read(mcis);
    if (bufferedImage == null) {
      throw new IOException("Unable to retreive buffered image from input stream " + "with type " + type);
    }
    int height=bufferedImage.getHeight();
    int width=bufferedImage.getWidth();
    int size=bytes.length;
    Image image=new ImageImpl();
    image.setTextObj(bytes);
    image.setType(type);
    image.setHeight(height);
    image.setWidth(width);
    image.setSize(size);
    return image;
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException ioe) {
        if (_log.isWarnEnabled()) {
          _log.warn(ioe);
        }
      }
    }
    if (mcis != null) {
      try {
        mcis.close();
      }
 catch (      IOException ioe) {
        if (_log.isWarnEnabled()) {
          _log.warn(ioe);
        }
      }
    }
  }
}
