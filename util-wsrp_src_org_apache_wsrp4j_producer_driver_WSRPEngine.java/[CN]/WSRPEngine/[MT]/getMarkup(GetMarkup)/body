{
  String MN="getMarkup";
  if (logger.isLogging(Logger.TRACE_HIGH)) {
    logger.entry(Logger.TRACE_HIGH,MN);
  }
  MarkupResponse markupResponse=null;
  try {
    paramCheck.check(request);
    this.checkCookie();
    RegistrationContext regContext=request.getRegistrationContext();
    PortletDescription portletDescription=null;
    portletDescription=provider.getDescriptionHandler().getPortletDescription(request.getPortletContext().getPortletHandle(),regContext,null,request.getMarkupParams().getLocales());
    MarkupType markupType=this.checkMarkupParams(portletDescription,request.getMarkupParams());
    request.getMarkupParams().setLocales(markupType.getLocales());
    request.getMarkupParams().setMimeTypes(new String[]{markupType.getMimeType()});
    request.getMarkupParams().setMode(markupType.getModes()[0]);
    request.getMarkupParams().setWindowState(markupType.getWindowStates()[0]);
    request.getMarkupParams().setWindowState(markupType.getWindowStates()[0]);
    Boolean templateProcessing=portletDescription.getDoesUrlTemplateProcessing();
    if (templateProcessing == null) {
      templateProcessing=Boolean.FALSE;
    }
    if (templateProcessing.booleanValue()) {
      try {
        paramCheck.check(request.getRuntimeContext().getTemplates());
      }
 catch (      MissingParametersFault e) {
        templateProcessing=Boolean.FALSE;
      }
    }
    markupResponse=provider.getPortletInvoker().invokeGetMarkup(request);
    if (!templateProcessing.booleanValue()) {
      markupResponse.getMarkupContext().setRequiresUrlRewriting(Boolean.TRUE);
    }
 else {
      markupResponse.getMarkupContext().setRequiresUrlRewriting(Boolean.FALSE);
    }
  }
 catch (  WSRPException e) {
    WSRPXHelper.handleWSRPException(e);
  }
  if (logger.isLogging(Logger.TRACE_HIGH)) {
    logger.exit(Logger.TRACE_HIGH,MN);
  }
  return markupResponse;
}
