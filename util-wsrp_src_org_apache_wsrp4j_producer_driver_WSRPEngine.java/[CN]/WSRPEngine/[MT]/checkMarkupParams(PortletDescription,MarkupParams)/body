{
  String MN="checkMarkupParams";
  if (logger.isLogging(Logger.TRACE_HIGH)) {
    logger.entry(Logger.TRACE_HIGH,MN);
  }
  MarkupType match=new MarkupType();
  String[] reqMimeTypes=markupParams.getMimeTypes();
  String reqMode=markupParams.getMode();
  String reqWindowState=markupParams.getWindowState();
  String[] reqLocales=markupParams.getLocales();
  boolean foundMime, foundWindow, foundMode;
  foundMime=foundWindow=foundMode=false;
  MarkupType[] markupTypes=portletDescription.getMarkupTypes();
  for (int i=0; i < markupTypes.length; i++) {
    String mimeType=markupTypes[i].getMimeType();
    for (int j=0; j < reqMimeTypes.length; j++) {
      if (mimeType.equalsIgnoreCase(reqMimeTypes[j])) {
        foundMime=true;
        match.setMimeType(mimeType);
        String[] modes=markupTypes[i].getModes();
        for (int k=0; k < modes.length; k++) {
          if (modes[k].equalsIgnoreCase(reqMode)) {
            foundMode=true;
            match.setModes(new String[]{reqMode});
            String[] windowStates=markupTypes[i].getWindowStates();
            for (int l=0; l < windowStates.length; l++) {
              if (windowStates[l].equalsIgnoreCase(reqWindowState)) {
                foundWindow=true;
                match.setWindowStates(new String[]{reqWindowState});
                String[] locales=markupTypes[i].getLocales();
                if (locales == null) {
                  if (logger.isLogging(Logger.TRACE_HIGH)) {
                    logger.exit(Logger.TRACE_HIGH,MN);
                  }
                  return match;
                }
                for (int m=0; m < locales.length; m++) {
                  for (int n=0; n < reqLocales.length; n++) {
                    if (locales[m].equalsIgnoreCase(reqLocales[n])) {
                      match.setLocales(new String[]{locales[m]});
                      if (logger.isLogging(Logger.TRACE_HIGH)) {
                        logger.exit(Logger.TRACE_HIGH,MN);
                      }
                      return match;
                    }
 else {
                      if (LocaleHelper.getLanguageCode(locales[m]).equalsIgnoreCase(LocaleHelper.getLanguageCode(reqLocales[n]))) {
                        match.setLocales(new String[]{LocaleHelper.getLanguageCode(locales[m])});
                        if (logger.isLogging(Logger.TRACE_HIGH)) {
                          logger.exit(Logger.TRACE_HIGH,MN);
                        }
                        return match;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (logger.isLogging(Logger.TRACE_HIGH)) {
    logger.exit(Logger.TRACE_HIGH,MN);
  }
  if (!foundMime)   throw new WSRPException(ErrorCodes.UNSUPPORTED_MIME_TYPE);
  if (!foundMode)   throw new WSRPException(ErrorCodes.UNSUPPORTED_MODE);
  if (!foundWindow)   throw new WSRPException(ErrorCodes.UNSUPPORTED_WINDOW_STATE);
  throw new WSRPException(ErrorCodes.UNSUPPORTED_LOCALE);
}
