{
  String MN="destroyPortlets";
  if (logger.isLogging(Logger.TRACE_HIGH)) {
    logger.entry(Logger.TRACE_HIGH,MN);
  }
  paramCheck.check(request);
  try {
    checkRegistration(request.getRegistrationContext());
    RegistrationContext regContext=request.getRegistrationContext();
    if (regContext != null) {
      String regHandle=regContext.getRegistrationHandle();
      if (regHandle != null && consumerRegistry.check(regHandle) == true) {
        provider.getPortletRegistrationFilterWriter().remove(regHandle,Arrays.asList(request.getPortletHandles()).iterator());
      }
    }
  }
 catch (  WSRPException e) {
    WSRPXHelper.handleWSRPException(e);
  }
  Iterator handles=Arrays.asList(request.getPortletHandles()).iterator();
  Iterator result=provider.getPortletPool().destroySeveral(handles);
  ArrayList failedHandles=new ArrayList();
  while (result.hasNext()) {
    DestroyFailed failed=new DestroyFailed();
    failed.setPortletHandle(result.next().toString());
    failed.setReason("Portlet handle refers to a producer offered portlet!");
    failedHandles.add(failed);
  }
  DestroyFailed[] destroyFailedArray=new DestroyFailed[failedHandles.size()];
  failedHandles.toArray(destroyFailedArray);
  DestroyPortletsResponse response=new DestroyPortletsResponse();
  response.setDestroyFailed(destroyFailedArray);
  response.setExtensions(null);
  if (logger.isLogging(Logger.TRACE_HIGH)) {
    logger.exit(Logger.TRACE_HIGH,MN);
  }
  return response;
}
