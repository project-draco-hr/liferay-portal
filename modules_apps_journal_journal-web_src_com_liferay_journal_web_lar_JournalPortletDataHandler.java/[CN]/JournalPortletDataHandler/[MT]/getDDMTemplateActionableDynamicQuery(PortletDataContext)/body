{
  ExportActionableDynamicQuery exportActionableDynamicQuery=DDMTemplateLocalServiceUtil.getExportActionableDynamicQuery(portletDataContext);
  final ActionableDynamicQuery.AddCriteriaMethod addCriteriaMethod=exportActionableDynamicQuery.getAddCriteriaMethod();
  exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      addCriteriaMethod.addCriteria(dynamicQuery);
      Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
      long ddmStructureClassNameId=PortalUtil.getClassNameId(DDMStructure.class);
      dynamicQuery.add(classNameIdProperty.eq(ddmStructureClassNameId));
      DynamicQuery ddmStructureDynamicQuery=DDMStructureLocalServiceUtil.dynamicQuery();
      ddmStructureDynamicQuery.setProjection(ProjectionFactoryUtil.property("structureId"));
      long articleClassNameId=PortalUtil.getClassNameId(JournalArticle.class);
      ddmStructureDynamicQuery.add(classNameIdProperty.eq(articleClassNameId));
      Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
      Property classPKProperty=PropertyFactoryUtil.forName("classPK");
      disjunction.add(classPKProperty.eq(0L));
      disjunction.add(classPKProperty.in(ddmStructureDynamicQuery));
      dynamicQuery.add(disjunction);
    }
  }
);
  exportActionableDynamicQuery.setStagedModelType(new StagedModelType(DDMTemplate.class.getName(),DDMStructure.class.getName()));
  return exportActionableDynamicQuery;
}
