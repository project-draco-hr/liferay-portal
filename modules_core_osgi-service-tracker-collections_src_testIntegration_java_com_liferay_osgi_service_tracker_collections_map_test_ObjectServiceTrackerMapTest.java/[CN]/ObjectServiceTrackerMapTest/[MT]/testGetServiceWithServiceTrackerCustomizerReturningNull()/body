{
  ServiceTrackerMap<String,TrackedTwo> serviceTrackerMap=ServiceTrackerMapFactory.openSingleValueMap(_bundleContext,TrackedOne.class,"(target=*)",new ServiceReferenceMapper<String,TrackedOne>(){
    @Override public void map(    ServiceReference<TrackedOne> serviceReference,    Emitter<String> emitter){
      emitter.emit((String)serviceReference.getProperty("target"));
      emitter.emit((String)serviceReference.getProperty("target"));
    }
  }
,new ServiceTrackerCustomizer<TrackedOne,TrackedTwo>(){
    @Override public TrackedTwo addingService(    ServiceReference<TrackedOne> serviceReference){
      return null;
    }
    @Override public void modifiedService(    ServiceReference<TrackedOne> serviceReference,    TrackedTwo trackedTwo){
    }
    @Override public void removedService(    ServiceReference<TrackedOne> serviceReference,    TrackedTwo trackedTwo){
    }
  }
);
  TrackedOne trackedOne=new TrackedOne("1");
  ServiceRegistration<TrackedOne> serviceRegistration=registerService(trackedOne,"one");
  Assert.assertFalse(serviceTrackerMap.containsKey("one"));
  serviceRegistration.unregister();
  serviceTrackerMap.close();
}
