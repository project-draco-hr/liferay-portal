{
  Class<?> clazz=getClass();
  PortalClassLoaderUtil.setClassLoader(clazz.getClassLoader());
  MockIntraband mockIntraband=new MockIntraband(){
    @Override protected Datagram processDatagram(    Datagram datagram){
      Deserializer deserializer=new Deserializer(datagram.getDataByteBuffer());
      try {
        Serializer serializer=new Serializer();
        ProcessCallable<Serializable> processCallable=deserializer.readObject();
        serializer.writeObject(new RPCResponse(processCallable.call()));
        return Datagram.createResponseDatagram(datagram,serializer.toByteBuffer());
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  MockRegistrationReference mockRegistrationReference=new MockRegistrationReference(mockIntraband);
  Future<String> futureResult=IntrabandRPCUtil.execute(mockRegistrationReference,new TestProcessCallable());
  Assert.assertEquals(TestProcessCallable.class.getName(),futureResult.get());
}
