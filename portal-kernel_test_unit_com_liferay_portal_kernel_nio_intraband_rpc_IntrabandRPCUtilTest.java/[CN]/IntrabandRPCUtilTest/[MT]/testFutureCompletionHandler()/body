{
  DefaultNoticeableFuture<String> defaultNoticeableFuture=new DefaultNoticeableFuture<>();
  FutureCompletionHandler<String> futureCompletionHandler=new FutureCompletionHandler<>(defaultNoticeableFuture);
  futureCompletionHandler.delivered(null);
  futureCompletionHandler.submitted(null);
  IOException ioe=new IOException();
  futureCompletionHandler.failed(null,ioe);
  try {
    defaultNoticeableFuture.get();
    Assert.fail();
  }
 catch (  ExecutionException ee) {
    Assert.assertSame(ioe,ee.getCause());
  }
  defaultNoticeableFuture=new DefaultNoticeableFuture<>();
  futureCompletionHandler=new FutureCompletionHandler<>(defaultNoticeableFuture);
  Serializer serializer=new Serializer();
  serializer.writeObject(new TestProcessCallable());
  ByteBuffer byteBuffer=serializer.toByteBuffer();
  byteBuffer.put(76,(byte)CharPool.UPPER_CASE_S);
  futureCompletionHandler.replied(null,Datagram.createRequestDatagram(SystemDataType.RPC.getValue(),byteBuffer));
  try {
    defaultNoticeableFuture.get();
    Assert.fail();
  }
 catch (  ExecutionException ee) {
    Throwable throwable=ee.getCause();
    Assert.assertSame(ClassNotFoundException.class,throwable.getClass());
  }
  defaultNoticeableFuture=new DefaultNoticeableFuture<>();
  futureCompletionHandler=new FutureCompletionHandler<>(defaultNoticeableFuture);
  futureCompletionHandler.timedOut(null);
  try {
    defaultNoticeableFuture.get();
    Assert.fail();
  }
 catch (  CancellationException ce) {
  }
}
