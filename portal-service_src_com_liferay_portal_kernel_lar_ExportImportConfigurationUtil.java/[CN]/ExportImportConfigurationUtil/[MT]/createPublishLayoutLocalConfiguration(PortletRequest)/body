{
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long userId=themeDisplay.getUserId();
  long groupId=ParamUtil.getLong(portletRequest,"groupId");
  Group liveGroup=GroupLocalServiceUtil.getGroup(groupId);
  Group stagingGroup=liveGroup.getStagingGroup();
  String tabs1=ParamUtil.getString(portletRequest,"tabs1");
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  String scope=ParamUtil.getString(portletRequest,"scope");
  Map<Long,Boolean> layoutIdMap=new LinkedHashMap<Long,Boolean>();
  if (scope.equals("selected-pages")) {
    layoutIdMap=ExportImportHelperUtil.getLayoutIdMap(portletRequest);
  }
  Map<String,String[]> parameterMap=StagingUtil.getStagingParameters(portletRequest);
  DateRange dateRange=ExportImportHelperUtil.getDateRange(portletRequest,stagingGroup.getGroupId(),privateLayout,0,null,"fromLastPublishDate");
  String exportImportConfigurationName=ParamUtil.getString(portletRequest,"exportImportConfigurationName");
  String exportImportConfigurationDescription=ParamUtil.getString(portletRequest,"exportImportConfigurationDescription");
  Map<String,Serializable> configurationContextMap=ExportImportConfigurationSettingsMapFactory.buildSettingsMap(userId,stagingGroup.getGroupId(),groupId,privateLayout,layoutIdMap,parameterMap,dateRange.getStartDate(),dateRange.getEndDate());
  return ExportImportConfigurationLocalServiceUtil.addExportImportConfiguration(userId,groupId,exportImportConfigurationName,exportImportConfigurationDescription,ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_LOCAL,configurationContextMap,new ServiceContext());
}
