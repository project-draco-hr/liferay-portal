{
  long userId=portletDataContext.getUserId(repositoryEntry.getUserUuid());
  Map<Long,Long> repositoryIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(Repository.class);
  long repositoryId=MapUtil.getLong(repositoryIds,repositoryEntry.getRepositoryId(),repositoryEntry.getRepositoryId());
  ServiceContext serviceContext=portletDataContext.createServiceContext(repositoryEntry);
  RepositoryEntry importedRepositoryEntry=null;
  if (portletDataContext.isDataStrategyMirror()) {
    RepositoryEntry existingRepositoryEntry=RepositoryEntryLocalServiceUtil.fetchRepositoryEntryByUuidAndGroupId(repositoryEntry.getUuid(),portletDataContext.getScopeGroupId());
    if (existingRepositoryEntry == null) {
      serviceContext.setUuid(repositoryEntry.getUuid());
      importedRepositoryEntry=RepositoryEntryLocalServiceUtil.addRepositoryEntry(userId,portletDataContext.getScopeGroupId(),repositoryId,repositoryEntry.getMappedId(),serviceContext);
    }
 else {
      importedRepositoryEntry=RepositoryEntryLocalServiceUtil.updateRepositoryEntry(existingRepositoryEntry.getRepositoryEntryId(),repositoryEntry.getMappedId());
    }
  }
 else {
    importedRepositoryEntry=RepositoryEntryLocalServiceUtil.addRepositoryEntry(userId,portletDataContext.getScopeGroupId(),repositoryId,repositoryEntry.getMappedId(),serviceContext);
  }
  portletDataContext.importClassedModel(repositoryEntry,importedRepositoryEntry);
}
