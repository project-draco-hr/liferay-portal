{
  String tabs1=ParamUtil.getString(req,"tabs1");
  long groupId=ParamUtil.getLong(req,"groupId");
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  String scope=ParamUtil.getString(req,"scope");
  if (Validator.isNull(scope)) {
    scope="all-pages";
  }
  Map<Long,Boolean> layoutIdMap=null;
  Map<String,String[]> parameterMap=req.getParameterMap();
  if (scope.equals("selected-pages")) {
    layoutIdMap=new LinkedHashMap<Long,Boolean>();
    long[] rowIds=ParamUtil.getLongValues(req,"rowIds");
    for (    long selPlid : rowIds) {
      boolean includeChildren=ParamUtil.getBoolean(req,"includeChildren_" + selPlid);
      layoutIdMap.put(selPlid,includeChildren);
    }
  }
  String remoteAddress=ParamUtil.getString(req,"remoteAddress");
  int remotePort=ParamUtil.getInteger(req,"remotePort");
  boolean secureConnection=ParamUtil.getBoolean(req,"secureConnection");
  long remoteGroupId=ParamUtil.getLong(req,"remoteGroupId");
  boolean remotePrivateLayout=ParamUtil.getBoolean(req,"remotePrivateLayout");
  boolean dateRange=ParamUtil.getBoolean(req,"dateRange");
  Date startDate=null;
  Date endDate=null;
  if (dateRange) {
    startDate=_getDate(req,"startDate",true).getTime();
    endDate=_getDate(req,"endDate",true).getTime();
  }
  if (schedule) {
    String groupName=getSchedulerGroupName(DestinationNames.LAYOUTS_REMOTE_PUBLISHER,groupId);
    int recurrenceType=ParamUtil.getInteger(req,"recurrenceType");
    Calendar startCal=_getDate(req,"schedulerStartDate",false);
    String cronText=_getCronText(req,startCal,false,recurrenceType);
    Date schedulerEndDate=null;
    int endDateType=ParamUtil.getInteger(req,"endDateType");
    if (endDateType == 1) {
      Calendar endCal=_getDate(req,"schedulerEndDate",false);
      schedulerEndDate=endCal.getTime();
    }
    String description=ParamUtil.getString(req,"description");
    LayoutServiceUtil.schedulePublishToRemote(groupId,privateLayout,layoutIdMap,getStagingParameters(req),remoteAddress,remotePort,secureConnection,remoteGroupId,remotePrivateLayout,startDate,endDate,groupName,cronText,startCal.getTime(),schedulerEndDate,description);
  }
 else {
    copyRemoteLayouts(groupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,secureConnection,remoteGroupId,remotePrivateLayout,getStagingParameters(req),startDate,endDate);
  }
}
