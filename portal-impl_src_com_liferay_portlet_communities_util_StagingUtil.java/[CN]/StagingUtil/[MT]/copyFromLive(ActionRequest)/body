{
  String tabs1=ParamUtil.getString(actionRequest,"tabs1");
  long stagingGroupId=ParamUtil.getLong(actionRequest,"stagingGroupId");
  Group stagingGroup=GroupLocalServiceUtil.getGroup(stagingGroupId);
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Copying live to staging for group " + stagingGroup.getLiveGroupId());
  }
  Map<String,String[]> parameterMap=getStagingParameters();
  String range=ParamUtil.getString(actionRequest,"range");
  Date startDate=null;
  Date endDate=null;
  if (range.equals("dateRange")) {
    startDate=_getDate(actionRequest,"startDate",true).getTime();
    endDate=_getDate(actionRequest,"endDate",true).getTime();
  }
 else   if (range.equals("last")) {
    int last=ParamUtil.getInteger(actionRequest,"last");
    Date now=new Date();
    startDate=new Date(now.getTime() - (last * Time.HOUR));
    endDate=now;
  }
  String scope=ParamUtil.getString(actionRequest,"scope");
  if (scope.equals("all-pages")) {
    publishLayouts(stagingGroup.getLiveGroupId(),stagingGroup.getGroupId(),privateLayout,parameterMap,startDate,endDate);
  }
 else   if (scope.equals("selected-pages")) {
    Map<Long,Boolean> layoutIdMap=new LinkedHashMap<Long,Boolean>();
    long[] rowIds=ParamUtil.getLongValues(actionRequest,"rowIds");
    for (    long selPlid : rowIds) {
      boolean includeChildren=ParamUtil.getBoolean(actionRequest,"includeChildren_" + selPlid);
      layoutIdMap.put(new Long(selPlid),new Boolean(includeChildren));
    }
    publishLayouts(stagingGroup.getLiveGroupId(),stagingGroup.getGroupId(),privateLayout,layoutIdMap,parameterMap,startDate,endDate);
  }
}
