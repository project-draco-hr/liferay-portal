{
  String tabs1=ParamUtil.getString(req,"tabs1");
  long groupId=ParamUtil.getLong(req,"groupId");
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  boolean dateRange=ParamUtil.getBoolean(req,"dateRange");
  Date startDate=null;
  Date endDate=null;
  if (dateRange) {
    ThemeDisplay themeDisplay=(ThemeDisplay)req.getAttribute(WebKeys.THEME_DISPLAY);
    int startDateMonth=ParamUtil.getInteger(req,"startDateMonth");
    int startDateDay=ParamUtil.getInteger(req,"startDateDay");
    int startDateYear=ParamUtil.getInteger(req,"startDateYear");
    int startDateHour=ParamUtil.getInteger(req,"startDateHour");
    int startDateMinute=ParamUtil.getInteger(req,"startDateMinute");
    int startDateAmPm=ParamUtil.getInteger(req,"startDateAmPm");
    if (startDateAmPm == Calendar.PM) {
      startDateHour+=12;
    }
    startDate=PortalUtil.getDate(startDateMonth,startDateDay,startDateYear,startDateHour,startDateMinute,themeDisplay.getTimeZone(),new PortalException());
    int endDateMonth=ParamUtil.getInteger(req,"endDateMonth");
    int endDateDay=ParamUtil.getInteger(req,"endDateDay");
    int endDateYear=ParamUtil.getInteger(req,"endDateYear");
    int endDateHour=ParamUtil.getInteger(req,"endDateHour");
    int endDateMinute=ParamUtil.getInteger(req,"endDateMinute");
    int endDateAmPm=ParamUtil.getInteger(req,"endDateAmPm");
    if (endDateAmPm == Calendar.PM) {
      endDateHour+=12;
    }
    endDate=PortalUtil.getDate(endDateMonth,endDateDay,endDateYear,endDateHour,endDateMinute,themeDisplay.getTimeZone(),new PortalException());
  }
  long remoteGroupId=ParamUtil.getLong(req,"remoteGroupId");
  boolean remotePrivateLayout=ParamUtil.getBoolean(req,"remotePrivateLayout");
  String remoteAddress=ParamUtil.getString(req,"remoteAddress");
  int remotePort=ParamUtil.getInteger(req,"remotePort");
  boolean secureConnection=ParamUtil.getBoolean(req,"secureConnection");
  if (_log.isDebugEnabled()) {
    StringMaker sm=new StringMaker();
    sm.append("Exporting ");
    if (privateLayout) {
      sm.append("private ");
    }
 else {
      sm.append("public ");
    }
    sm.append("pages for group ");
    sm.append(group.getGroupId());
    sm.append(" remotely to the ");
    if (remotePrivateLayout) {
      sm.append("private ");
    }
 else {
      sm.append("public ");
    }
    sm.append("pages for group ");
    sm.append(remoteGroupId);
    sm.append(" on host ");
    if (secureConnection) {
      sm.append(Http.HTTPS_WITH_SLASH);
    }
 else {
      sm.append(Http.HTTP_WITH_SLASH);
    }
    sm.append(remoteAddress);
    sm.append(StringPool.COLON);
    sm.append(remotePort);
    _log.debug(sm.toString());
  }
  String scope=ParamUtil.getString(req,"scope");
  if (Validator.isNull(scope)) {
    scope="all-pages";
  }
  Map<String,String[]> parameterMap=req.getParameterMap();
  Map<Long,Boolean> layoutIdMap=null;
  if (scope.equals("selected-pages")) {
    layoutIdMap=new LinkedHashMap<Long,Boolean>();
    long[] rowIds=ParamUtil.getLongValues(req,"rowIds");
    for (    long selPlid : rowIds) {
      boolean includeChildren=ParamUtil.getBoolean(req,"includeChildren_" + selPlid);
      layoutIdMap.put(selPlid,includeChildren);
    }
  }
  copyRemoteLayouts(groupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,secureConnection,remoteGroupId,remotePrivateLayout,getStagingParameters(req),startDate,endDate);
}
