{
  String tabs1=ParamUtil.getString(req,"tabs1");
  long stagingGroupId=ParamUtil.getLong(req,"stagingGroupId");
  Group stagingGroup=GroupLocalServiceUtil.getGroup(stagingGroupId);
  long liveGroupId=stagingGroup.getLiveGroupId();
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  String scope=ParamUtil.getString(req,"scope");
  Map<Long,Boolean> layoutIdMap=new LinkedHashMap<Long,Boolean>();
  if (scope.equals("selected-pages")) {
    long[] rowIds=ParamUtil.getLongValues(req,"rowIds");
    for (    long selPlid : rowIds) {
      boolean includeChildren=ParamUtil.getBoolean(req,"includeChildren_" + selPlid);
      layoutIdMap.put(selPlid,includeChildren);
    }
  }
  Map<String,String[]> parameterMap=getStagingParameters(req);
  String groupName=getSchedulerGroupName(DestinationNames.LAYOUTS_LOCAL_PUBLISHER,liveGroupId);
  int recurrenceType=ParamUtil.getInteger(req,"recurrenceType");
  Calendar startCal=_getDate(req,"schedulerStartDate",false);
  String cronText=_getCronText(req,startCal,false,recurrenceType);
  Date endDate=null;
  int endDateType=ParamUtil.getInteger(req,"endDateType");
  if (endDateType == 1) {
    Calendar endCal=_getDate(req,"schedulerEndDate",false);
    endDate=endCal.getTime();
  }
  String description=ParamUtil.getString(req,"description");
  LayoutServiceUtil.schedulePublishToLive(stagingGroupId,liveGroupId,privateLayout,layoutIdMap,parameterMap,scope,groupName,cronText,startCal.getTime(),endDate,description);
}
