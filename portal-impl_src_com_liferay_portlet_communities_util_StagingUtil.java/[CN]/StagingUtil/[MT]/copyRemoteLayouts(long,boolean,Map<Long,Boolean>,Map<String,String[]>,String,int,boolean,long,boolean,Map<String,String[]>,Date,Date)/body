{
  try {
    InetAddress inetAddress=InetAddress.getByName(remoteAddress);
    if (!inetAddress.isReachable(800)) {
      throw new RemoteExportException("{exception=UnreachableHostException,subject=" + remoteAddress + "}");
    }
  }
 catch (  UnknownHostException uhe) {
    throw new RemoteExportException("{exception=UnknownHostException,subject=" + remoteAddress + "}");
  }
catch (  IOException ioe) {
    throw new RemoteExportException("{exception=IOException,subject=" + remoteAddress + "}");
  }
  if ((remotePort <= 0) || (remotePort > 65535)) {
    throw new RemoteExportException("{exception=InvalidPortException,subject=" + remotePort + "}");
  }
  PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
  User user=UserLocalServiceUtil.getUser(permissionChecker.getUserId());
  StringMaker sm=new StringMaker();
  if (secure) {
    sm.append(Http.HTTPS_WITH_SLASH);
  }
 else {
    sm.append(Http.HTTP_WITH_SLASH);
  }
  sm.append(remoteAddress);
  sm.append(StringPool.COLON);
  sm.append(remotePort);
  HttpPrincipal httpPrincipal=new HttpPrincipal(sm.toString(),user.getEmailAddress(),user.getPassword(),user.getPasswordEncrypted());
  try {
    GroupServiceHttp.getGroup(httpPrincipal,remoteGroupId);
  }
 catch (  NoSuchGroupException nsge) {
    throw new RemoteExportException("{exception=NoSuchGroupException,subject=" + remoteGroupId + "}");
  }
catch (  SystemException se) {
    if (se.getCause() instanceof ConnectException) {
      throw new RemoteExportException("{exception=ConnectException,subject=" + sm.toString() + "}");
    }
  }
  byte[] bytes=null;
  if (layoutIdMap == null) {
    bytes=LayoutServiceUtil.exportLayouts(sourceGroupId,privateLayout,exportParameterMap,startDate,endDate);
  }
 else {
    List<Layout> layouts=new ArrayList<Layout>();
    Iterator<Map.Entry<Long,Boolean>> itr1=layoutIdMap.entrySet().iterator();
    while (itr1.hasNext()) {
      Entry<Long,Boolean> entry=itr1.next();
      long plid=entry.getKey();
      boolean includeChildren=entry.getValue();
      Layout layout=LayoutLocalServiceUtil.getLayout(plid);
      if (!layouts.contains(layout)) {
        layouts.add(layout);
      }
      Iterator<Layout> itr2=getMissingParents(layout,sourceGroupId).iterator();
      while (itr2.hasNext()) {
        Layout parentLayout=itr2.next();
        if (!layouts.contains(parentLayout)) {
          layouts.add(parentLayout);
        }
      }
      if (includeChildren) {
        itr2=layout.getAllChildren().iterator();
        while (itr2.hasNext()) {
          Layout childLayout=itr2.next();
          if (!layouts.contains(childLayout)) {
            layouts.add(childLayout);
          }
        }
      }
    }
    long[] layoutIds=new long[layouts.size()];
    for (int i=0; i < layouts.size(); i++) {
      Layout curLayout=layouts.get(i);
      layoutIds[i]=curLayout.getLayoutId();
    }
    if (layoutIds.length <= 0) {
      throw new RemoteExportException("{exception=NoLayoutsSelectedException}");
    }
    bytes=LayoutServiceUtil.exportLayouts(sourceGroupId,privateLayout,layoutIds,exportParameterMap,null,null);
  }
  LayoutServiceHttp.importLayouts(httpPrincipal,remoteGroupId,remotePrivateLayout,importParameterMap,bytes);
}
