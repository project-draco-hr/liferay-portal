{
  PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
  User user=UserLocalServiceUtil.getUser(permissionChecker.getUserId());
  StringBuilder sb=new StringBuilder();
  if (secureConnection) {
    sb.append(Http.HTTPS_WITH_SLASH);
  }
 else {
    sb.append(Http.HTTP_WITH_SLASH);
  }
  sb.append(remoteAddress);
  sb.append(StringPool.COLON);
  sb.append(remotePort);
  String url=sb.toString();
  HttpPrincipal httpPrincipal=new HttpPrincipal(url,user.getEmailAddress(),user.getPassword(),user.getPasswordEncrypted());
  try {
    GroupServiceHttp.getGroup(httpPrincipal,remoteGroupId);
  }
 catch (  NoSuchGroupException nsge) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.NO_GROUP);
    ree.setGroupId(remoteGroupId);
    throw ree;
  }
catch (  SystemException se) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.BAD_CONNECTION);
    ree.setURL(url);
    throw ree;
  }
  byte[] bytes=null;
  if (layoutIdMap == null) {
    bytes=LayoutServiceUtil.exportLayouts(sourceGroupId,privateLayout,exportParameterMap,startDate,endDate);
  }
 else {
    List<Layout> layouts=new ArrayList<Layout>();
    Iterator<Map.Entry<Long,Boolean>> itr1=layoutIdMap.entrySet().iterator();
    while (itr1.hasNext()) {
      Entry<Long,Boolean> entry=itr1.next();
      long plid=GetterUtil.getLong(String.valueOf(entry.getKey()));
      boolean includeChildren=entry.getValue();
      Layout layout=LayoutLocalServiceUtil.getLayout(plid);
      if (!layouts.contains(layout)) {
        layouts.add(layout);
      }
      Iterator<Layout> itr2=getMissingParents(layout,sourceGroupId).iterator();
      while (itr2.hasNext()) {
        Layout parentLayout=itr2.next();
        if (!layouts.contains(parentLayout)) {
          layouts.add(parentLayout);
        }
      }
      if (includeChildren) {
        itr2=layout.getAllChildren().iterator();
        while (itr2.hasNext()) {
          Layout childLayout=itr2.next();
          if (!layouts.contains(childLayout)) {
            layouts.add(childLayout);
          }
        }
      }
    }
    long[] layoutIds=new long[layouts.size()];
    for (int i=0; i < layouts.size(); i++) {
      Layout curLayout=layouts.get(i);
      layoutIds[i]=curLayout.getLayoutId();
    }
    if (layoutIds.length <= 0) {
      throw new RemoteExportException(RemoteExportException.NO_LAYOUTS);
    }
    bytes=LayoutServiceUtil.exportLayouts(sourceGroupId,privateLayout,layoutIds,exportParameterMap,startDate,endDate);
  }
  LayoutServiceHttp.importLayouts(httpPrincipal,remoteGroupId,remotePrivateLayout,importParameterMap,bytes);
}
