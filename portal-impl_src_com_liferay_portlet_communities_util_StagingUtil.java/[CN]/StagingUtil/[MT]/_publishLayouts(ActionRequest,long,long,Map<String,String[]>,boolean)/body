{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String tabs1=ParamUtil.getString(actionRequest,"tabs1");
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  String scope=ParamUtil.getString(actionRequest,"scope");
  Map<Long,Boolean> layoutIdMap=new LinkedHashMap<Long,Boolean>();
  if (scope.equals("selected-pages")) {
    long[] rowIds=ParamUtil.getLongValues(actionRequest,"rowIds");
    for (    long selPlid : rowIds) {
      boolean includeChildren=ParamUtil.getBoolean(actionRequest,"includeChildren_" + selPlid);
      layoutIdMap.put(selPlid,includeChildren);
    }
  }
  String range=ParamUtil.getString(actionRequest,"range");
  Date startDate=null;
  Date endDate=null;
  if (range.equals("dateRange")) {
    startDate=_getDate(actionRequest,"startDate",true).getTime();
    endDate=_getDate(actionRequest,"endDate",true).getTime();
  }
 else   if (range.equals("last")) {
    int rangeLast=ParamUtil.getInteger(actionRequest,"last");
    Date now=new Date();
    startDate=new Date(now.getTime() - (rangeLast * Time.HOUR));
    endDate=now;
  }
  if (schedule) {
    String groupName=getSchedulerGroupName(DestinationNames.LAYOUTS_LOCAL_PUBLISHER,targetGroupId);
    int recurrenceType=ParamUtil.getInteger(actionRequest,"recurrenceType");
    Calendar startCal=_getDate(actionRequest,"schedulerStartDate",true);
    String cronText=_getCronText(actionRequest,startCal,false,recurrenceType);
    Date schedulerEndDate=null;
    int endDateType=ParamUtil.getInteger(actionRequest,"endDateType");
    if (endDateType == 1) {
      Calendar endCal=_getDate(actionRequest,"schedulerEndDate",true);
      schedulerEndDate=endCal.getTime();
    }
    String description=ParamUtil.getString(actionRequest,"description");
    LayoutServiceUtil.schedulePublishToLive(sourceGroupId,targetGroupId,privateLayout,layoutIdMap,parameterMap,scope,startDate,endDate,groupName,cronText,startCal.getTime(),schedulerEndDate,description);
  }
 else {
    if (scope.equals("all-pages")) {
      publishLayouts(sourceGroupId,targetGroupId,privateLayout,parameterMap,startDate,endDate);
    }
 else {
      publishLayouts(sourceGroupId,targetGroupId,privateLayout,layoutIdMap,parameterMap,startDate,endDate);
    }
  }
}
