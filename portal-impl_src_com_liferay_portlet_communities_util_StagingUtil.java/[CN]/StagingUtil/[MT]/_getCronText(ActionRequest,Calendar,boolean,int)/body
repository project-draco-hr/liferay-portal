{
  Calendar startCal=null;
  if (timeZoneSensitive) {
    startCal=CalendarFactoryUtil.getCalendar();
    startCal.setTime(startDate.getTime());
  }
 else {
    startCal=(Calendar)startDate.clone();
  }
  Recurrence recurrence=new Recurrence(startCal,new Duration(1,0,0,0),recurrenceType);
  recurrence.setWeekStart(Calendar.SUNDAY);
  if (recurrenceType == Recurrence.DAILY) {
    int dailyType=ParamUtil.getInteger(req,"dailyType");
    if (dailyType == 0) {
      int dailyInterval=ParamUtil.getInteger(req,"dailyInterval",1);
      recurrence.setInterval(dailyInterval);
    }
 else {
      DayAndPosition[] dayPos={new DayAndPosition(Calendar.MONDAY,0),new DayAndPosition(Calendar.TUESDAY,0),new DayAndPosition(Calendar.WEDNESDAY,0),new DayAndPosition(Calendar.THURSDAY,0),new DayAndPosition(Calendar.FRIDAY,0)};
      recurrence.setByDay(dayPos);
    }
  }
 else   if (recurrenceType == Recurrence.WEEKLY) {
    int weeklyInterval=ParamUtil.getInteger(req,"weeklyInterval",1);
    recurrence.setInterval(weeklyInterval);
    List<DayAndPosition> dayPos=new ArrayList<DayAndPosition>();
    _addWeeklyDayPos(req,dayPos,Calendar.SUNDAY);
    _addWeeklyDayPos(req,dayPos,Calendar.MONDAY);
    _addWeeklyDayPos(req,dayPos,Calendar.TUESDAY);
    _addWeeklyDayPos(req,dayPos,Calendar.WEDNESDAY);
    _addWeeklyDayPos(req,dayPos,Calendar.THURSDAY);
    _addWeeklyDayPos(req,dayPos,Calendar.FRIDAY);
    _addWeeklyDayPos(req,dayPos,Calendar.SATURDAY);
    if (dayPos.size() == 0) {
      dayPos.add(new DayAndPosition(Calendar.MONDAY,0));
    }
    recurrence.setByDay(dayPos.toArray(new DayAndPosition[0]));
  }
 else   if (recurrenceType == Recurrence.MONTHLY) {
    int monthlyType=ParamUtil.getInteger(req,"monthlyType");
    if (monthlyType == 0) {
      int monthlyDay=ParamUtil.getInteger(req,"monthlyDay0",1);
      recurrence.setByMonthDay(new int[]{monthlyDay});
      int monthlyInterval=ParamUtil.getInteger(req,"monthlyInterval0",1);
      recurrence.setInterval(monthlyInterval);
    }
 else {
      int monthlyPos=ParamUtil.getInteger(req,"monthlyPos");
      int monthlyDay=ParamUtil.getInteger(req,"monthlyDay1");
      DayAndPosition[] dayPos={new DayAndPosition(monthlyDay,monthlyPos)};
      recurrence.setByDay(dayPos);
      int monthlyInterval=ParamUtil.getInteger(req,"monthlyInterval1",1);
      recurrence.setInterval(monthlyInterval);
    }
  }
 else   if (recurrenceType == Recurrence.YEARLY) {
    int yearlyType=ParamUtil.getInteger(req,"yearlyType");
    if (yearlyType == 0) {
      int yearlyMonth=ParamUtil.getInteger(req,"yearlyMonth0");
      int yearlyDay=ParamUtil.getInteger(req,"yearlyDay0",1);
      recurrence.setByMonth(new int[]{yearlyMonth});
      recurrence.setByMonthDay(new int[]{yearlyDay});
      int yearlyInterval=ParamUtil.getInteger(req,"yearlyInterval0",1);
      recurrence.setInterval(yearlyInterval);
    }
 else {
      int yearlyPos=ParamUtil.getInteger(req,"yearlyPos");
      int yearlyDay=ParamUtil.getInteger(req,"yearlyDay1");
      int yearlyMonth=ParamUtil.getInteger(req,"yearlyMonth1");
      DayAndPosition[] dayPos={new DayAndPosition(yearlyDay,yearlyPos)};
      recurrence.setByDay(dayPos);
      recurrence.setByMonth(new int[]{yearlyMonth});
      int yearlyInterval=ParamUtil.getInteger(req,"yearlyInterval1",1);
      recurrence.setInterval(yearlyInterval);
    }
  }
  return RecurrenceSerializer.toCronText(recurrence);
}
