{
  line=formatIncorrectSyntax(line,"catch(","catch (");
  line=formatIncorrectSyntax(line,"else{","else {");
  line=formatIncorrectSyntax(line,"for(","for (");
  line=formatIncorrectSyntax(line,"if(","if (");
  line=formatIncorrectSyntax(line,"while(","while (");
  line=formatIncorrectSyntax(line,"List <","List<");
  line=formatIncorrectSyntax(line,"){",") {");
  line=formatIncorrectSyntax(line,"]{","] {");
  line=formatIncorrectSyntax(line," [","[");
  line=formatIncorrectSyntax(line,StringPool.SPACE + StringPool.TAB,StringPool.TAB);
  for (int x=0; ; ) {
    x=line.indexOf(CharPool.EQUAL,x + 1);
    if (x == -1) {
      break;
    }
    if (isInsideQuotes(line,x)) {
      continue;
    }
    char c=line.charAt(x - 1);
    if (Character.isLetterOrDigit(c)) {
      line=StringUtil.replaceFirst(line,"="," =",x);
      break;
    }
    if (x == (line.length() - 1)) {
      break;
    }
    c=line.charAt(x + 1);
    if (Character.isLetterOrDigit(c)) {
      line=StringUtil.replaceFirst(line,"=","= ",x);
      break;
    }
  }
  if (!line.contains(StringPool.DOUBLE_SLASH)) {
    while (trimmedLine.contains(StringPool.TAB)) {
      line=StringUtil.replaceLast(line,StringPool.TAB,StringPool.SPACE);
      trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.TAB,StringPool.SPACE);
    }
  }
  for (int x=0; ; ) {
    x=trimmedLine.indexOf(StringPool.DOUBLE_SPACE,x + 1);
    if (x == -1) {
      break;
    }
    if (isInsideQuotes(trimmedLine,x)) {
      continue;
    }
    trimmedLine=StringUtil.replaceFirst(trimmedLine,StringPool.DOUBLE_SPACE,StringPool.SPACE,x);
    line=StringUtil.replaceFirst(line,StringPool.DOUBLE_SPACE,StringPool.SPACE,x + getLeadingTabCount(line));
  }
  if (line.contains(StringPool.DOUBLE_SLASH)) {
    return line;
  }
  int pos=line.indexOf(") ");
  if ((pos != -1) && !line.contains(StringPool.AT) && !isInsideQuotes(line,pos)) {
    String linePart=line.substring(pos + 2);
    if (Character.isLetter(linePart.charAt(0)) && !linePart.startsWith("default") && !linePart.startsWith("instanceof")&& !linePart.startsWith("throws")) {
      line=StringUtil.replaceFirst(line,StringPool.SPACE,StringPool.BLANK,pos);
    }
  }
  pos=line.indexOf(" (");
  if ((pos != -1) && !line.contains(StringPool.EQUAL) && !isInsideQuotes(line,pos)&& (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) {
    line=StringUtil.replaceFirst(line," (","(",pos);
  }
  for (int x=-1; ; ) {
    int posComma=line.indexOf(CharPool.COMMA,x + 1);
    int posSemicolon=line.indexOf(CharPool.SEMICOLON,x + 1);
    if ((posComma == -1) && (posSemicolon == -1)) {
      break;
    }
    x=Math.min(posComma,posSemicolon);
    if (x == -1) {
      x=Math.max(posComma,posSemicolon);
    }
    if (isInsideQuotes(line,x)) {
      continue;
    }
    if (line.length() > (x + 1)) {
      char nextChar=line.charAt(x + 1);
      if ((nextChar != CharPool.APOSTROPHE) && (nextChar != CharPool.CLOSE_PARENTHESIS) && (nextChar != CharPool.SPACE)&& (nextChar != CharPool.STAR)) {
        line=StringUtil.insert(line,StringPool.SPACE,x + 1);
      }
    }
    if (x > 0) {
      char previousChar=line.charAt(x - 1);
      if (previousChar == CharPool.SPACE) {
        line=line.substring(0,x - 1).concat(line.substring(x));
      }
    }
  }
  return line;
}
