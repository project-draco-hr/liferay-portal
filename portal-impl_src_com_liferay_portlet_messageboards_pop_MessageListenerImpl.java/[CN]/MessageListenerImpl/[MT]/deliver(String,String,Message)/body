{
  List<ObjectValuePair<String,InputStream>> inputStreamOVPs=null;
  try {
    StopWatch stopWatch=new StopWatch();
    stopWatch.start();
    if (_log.isDebugEnabled()) {
      _log.debug("Deliver message from " + from + " to "+ recipient);
    }
    String messageIdString=getMessageIdString(recipient,message);
    Company company=getCompany(messageIdString);
    if (_log.isDebugEnabled()) {
      _log.debug("Message id " + messageIdString);
    }
    long parentMessageId=MBUtil.getMessageId(messageIdString);
    if (_log.isDebugEnabled()) {
      _log.debug("Parent message id " + parentMessageId);
    }
    MBMessage parentMessage=null;
    if (parentMessageId > 0) {
      parentMessage=MBMessageLocalServiceUtil.fetchMBMessage(parentMessageId);
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Parent message " + parentMessage);
    }
    long groupId=0;
    long categoryId=MBUtil.getCategoryId(messageIdString);
    MBCategory category=MBCategoryLocalServiceUtil.fetchMBCategory(categoryId);
    if (category == null) {
      categoryId=MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID;
      if (parentMessage != null) {
        groupId=parentMessage.getGroupId();
      }
    }
 else {
      groupId=category.getGroupId();
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Group id " + groupId);
      _log.debug("Category id " + categoryId);
    }
    User user=UserLocalServiceUtil.getUserByEmailAddress(company.getCompanyId(),from);
    String subject=null;
    if (parentMessage != null) {
      subject=MBUtil.getSubjectForEmail(parentMessage);
    }
    MBMailMessage mbMailMessage=new MBMailMessage();
    MBUtil.collectPartContent(message,mbMailMessage);
    inputStreamOVPs=mbMailMessage.getInputStreamOVPs();
    PermissionCheckerUtil.setThreadValues(user);
    ServiceContext serviceContext=new ServiceContext();
    serviceContext.setAttribute("propagatePermissions",Boolean.TRUE);
    serviceContext.setLayoutFullURL(PortalUtil.getLayoutFullURL(groupId,PortletKeys.MESSAGE_BOARDS,StringUtil.equalsIgnoreCase(Http.HTTPS,PropsValues.WEB_SERVER_PROTOCOL)));
    serviceContext.setScopeGroupId(groupId);
    if (parentMessage == null) {
      MBMessageServiceUtil.addMessage(groupId,categoryId,subject,mbMailMessage.getBody(),MBMessageConstants.DEFAULT_FORMAT,inputStreamOVPs,false,0.0,true,serviceContext);
    }
 else {
      MBMessageServiceUtil.addMessage(parentMessage.getMessageId(),subject,mbMailMessage.getBody(),MBMessageConstants.DEFAULT_FORMAT,inputStreamOVPs,false,0.0,true,serviceContext);
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Delivering message takes " + stopWatch.getTime() + " ms");
    }
  }
 catch (  PrincipalException pe) {
    if (_log.isDebugEnabled()) {
      _log.debug("Prevented unauthorized post from " + from);
    }
    throw new MessageListenerException(pe);
  }
catch (  Exception e) {
    _log.error(e,e);
    throw new MessageListenerException(e);
  }
 finally {
    if (inputStreamOVPs != null) {
      for (      ObjectValuePair<String,InputStream> inputStreamOVP : inputStreamOVPs) {
        InputStream inputStream=inputStreamOVP.getValue();
        StreamUtil.cleanUp(inputStream);
      }
    }
    PermissionCheckerUtil.setThreadValues(null);
  }
}
