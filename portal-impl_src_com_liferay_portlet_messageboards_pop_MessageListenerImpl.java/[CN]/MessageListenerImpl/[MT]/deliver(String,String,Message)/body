{
  try {
    StopWatch stopWatch=null;
    if (_log.isDebugEnabled()) {
      stopWatch=new StopWatch();
      stopWatch.start();
      _log.debug("Deliver message from " + from + " to "+ recipient);
    }
    Company company=getCompany(recipient);
    String messageId=getMessageId(recipient,message);
    if (_log.isDebugEnabled()) {
      _log.debug("Message id " + messageId);
    }
    long categoryId=getCategoryId(messageId);
    if (_log.isDebugEnabled()) {
      _log.debug("Category id " + categoryId);
    }
    User user=UserLocalServiceUtil.getUserByEmailAddress(company.getCompanyId(),from);
    long parentMessageId=getParentMessageId(recipient,message);
    if (_log.isDebugEnabled()) {
      _log.debug("Parent message id " + parentMessageId);
    }
    MBMessage parentMessage=null;
    try {
      if (parentMessageId > 0) {
        parentMessage=MBMessageLocalServiceUtil.getMessage(parentMessageId);
      }
    }
 catch (    NoSuchMessageException nsme) {
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Parent message " + parentMessage);
    }
    String subject=MBUtil.getSubjectWithoutMessageId(message);
    MBMailMessage collector=new MBMailMessage();
    MBUtil.collectPartContent(message,collector);
    PermissionCheckerUtil.setThreadValues(user);
    ServiceContext serviceContext=new ServiceContext();
    serviceContext.setAddCommunityPermissions(true);
    serviceContext.setAddGuestPermissions(true);
    if (parentMessage == null) {
      MBMessageServiceUtil.addMessage(categoryId,subject,collector.getBody(),collector.getFiles(),false,0.0,StatusConstants.APPROVED,serviceContext);
    }
 else {
      MBMessageServiceUtil.addMessage(categoryId,parentMessage.getThreadId(),parentMessage.getMessageId(),subject,collector.getBody(),collector.getFiles(),false,0.0,StatusConstants.APPROVED,serviceContext);
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Delivering message takes " + stopWatch.getTime() + " ms");
    }
  }
 catch (  PrincipalException pe) {
    if (_log.isDebugEnabled()) {
      _log.debug("Prevented unauthorized post from " + from);
    }
    throw new MessageListenerException(pe);
  }
catch (  Exception e) {
    _log.error(e,e);
    throw new MessageListenerException(e);
  }
}
