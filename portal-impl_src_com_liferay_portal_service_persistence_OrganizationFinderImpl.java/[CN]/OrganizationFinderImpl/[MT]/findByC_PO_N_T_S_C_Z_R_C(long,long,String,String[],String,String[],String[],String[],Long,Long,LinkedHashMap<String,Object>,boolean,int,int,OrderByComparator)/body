{
  names=CustomSQLUtil.keywords(names);
  streets=CustomSQLUtil.keywords(streets);
  cities=CustomSQLUtil.keywords(cities);
  zips=CustomSQLUtil.keywords(zips);
  if (params != null) {
    Long resourceId=(Long)params.get("permissionsResourceId");
    Long groupId=(Long)params.get("permissionsGroupId");
    if (Validator.isNotNull(groupId) && Validator.isNotNull(resourceId)) {
      return findByPermissions(companyId,parentOrganizationId,parentOrganizationIdComparator,names,type,streets,cities,zips,regionId,countryId,resourceId.longValue(),groupId.longValue(),andOperator,start,end,obc);
    }
  }
 else {
    params=new LinkedHashMap<String,Object>();
  }
  Long userId=null;
  if (PropsValues.ORGANIZATIONS_USER_GROUP_MEMBERSHIP_ENABLED) {
    userId=(Long)params.get("usersOrgs");
  }
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=new LinkedHashMap<String,Object>();
  params2.putAll(params1);
  if (userId != null) {
    params2.remove("usersOrgs");
    params2.put("organizationsUserGroups",userId);
  }
  StringBuilder sb=new StringBuilder();
  sb.append("(");
  if (Validator.isNotNull(type)) {
    sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_L_S_C_Z_R_C));
  }
 else {
    sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C));
  }
  String sql=sb.toString();
  sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params1));
  sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params1));
  sb=new StringBuilder();
  sb.append(sql);
  sb.append(")");
  if (Validator.isNotNull(userId)) {
    sb.append(" UNION (");
    if (Validator.isNotNull(type)) {
      sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_L_S_C_Z_R_C));
    }
 else {
      sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C));
    }
    sql=sb.toString();
    sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params2));
    sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params2));
    sb=new StringBuilder();
    sb.append(sql);
    sb.append(")");
  }
  sql=sb.toString();
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Organization_.name)",StringPool.LIKE,false,names);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street1)",StringPool.LIKE,true,streets);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street2)",StringPool.LIKE,true,streets);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street3)",StringPool.LIKE,true,streets);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.city)",StringPool.LIKE,false,cities);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.zip)",StringPool.LIKE,true,zips);
  sql=StringUtil.replace(sql,"[$PARENT_ORGANIZATION_ID_COMPARATOR$]",parentOrganizationIdComparator);
  if (regionId == null) {
    sql=StringUtil.replace(sql,REGION_ID_SQL,StringPool.BLANK);
  }
  if (countryId == null) {
    sql=StringUtil.replace(sql,COUNTRY_ID_SQL,StringPool.BLANK);
  }
  sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
  sql=CustomSQLUtil.replaceOrderBy(sql,obc);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("orgId",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params1);
    qPos.add(companyId);
    qPos.add(parentOrganizationId);
    if (Validator.isNotNull(type)) {
      qPos.add(type);
    }
    qPos.add(names,2);
    qPos.add(streets,6);
    if (regionId != null) {
      qPos.add(regionId);
      qPos.add(regionId);
    }
    if (countryId != null) {
      qPos.add(countryId);
      qPos.add(countryId);
    }
    qPos.add(cities,2);
    qPos.add(zips,2);
    if (Validator.isNotNull(userId)) {
      setJoin(qPos,params2);
      qPos.add(companyId);
      qPos.add(parentOrganizationId);
      if (Validator.isNotNull(type)) {
        qPos.add(type);
      }
      qPos.add(names,2);
      qPos.add(streets,6);
      if (regionId != null) {
        qPos.add(regionId);
        qPos.add(regionId);
      }
      if (countryId != null) {
        qPos.add(countryId);
        qPos.add(countryId);
      }
      qPos.add(cities,2);
      qPos.add(zips,2);
    }
    List<Organization> organizations=new ArrayList<Organization>();
    Iterator<Long> itr=(Iterator<Long>)QueryUtil.iterate(q,getDialect(),start,end);
    while (itr.hasNext()) {
      Long organizationId=itr.next();
      Organization organization=OrganizationUtil.findByPrimaryKey(organizationId.longValue());
      organizations.add(organization);
    }
    return organizations;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
