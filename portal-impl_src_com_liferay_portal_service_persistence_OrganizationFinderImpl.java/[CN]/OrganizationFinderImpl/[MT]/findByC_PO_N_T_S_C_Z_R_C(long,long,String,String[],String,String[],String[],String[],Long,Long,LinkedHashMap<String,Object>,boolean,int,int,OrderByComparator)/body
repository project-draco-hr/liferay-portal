{
  names=CustomSQLUtil.keywords(names);
  streets=CustomSQLUtil.keywords(streets);
  cities=CustomSQLUtil.keywords(cities);
  zips=CustomSQLUtil.keywords(zips);
  if (params == null) {
    params=new LinkedHashMap<String,Object>();
  }
  StringBundler sb=new StringBundler();
  sb.append("(");
  if (Validator.isNotNull(params.get("groupOrganization"))) {
    sb.append(CustomSQLUtil.get(FIND_BY_GROUP_ID));
    sb.append(") UNION ALL (");
  }
  if (Validator.isNotNull(type)) {
    sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_L_S_C_Z_R_C));
  }
 else {
    sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C));
  }
  String sql=sb.toString();
  sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params));
  sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params));
  sql=sql.concat(StringPool.CLOSE_PARENTHESIS);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Organization_.name)",StringPool.LIKE,false,names);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street1)",StringPool.LIKE,true,streets);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street2)",StringPool.LIKE,true,streets);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street3)",StringPool.LIKE,true,streets);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.city)",StringPool.LIKE,false,cities);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.zip)",StringPool.LIKE,true,zips);
  sql=StringUtil.replace(sql,"[$PARENT_ORGANIZATION_ID_COMPARATOR$]",parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL);
  if (regionId == null) {
    sql=StringUtil.replace(sql,_REGION_ID_SQL,StringPool.BLANK);
  }
  if (countryId == null) {
    sql=StringUtil.replace(sql,_COUNTRY_ID_SQL,StringPool.BLANK);
  }
  sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
  sql=CustomSQLUtil.replaceOrderBy(sql,obc);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("orgId",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params);
    qPos.add(companyId);
    qPos.add(parentOrganizationId);
    if (Validator.isNotNull(type)) {
      qPos.add(type);
    }
    qPos.add(names,2);
    qPos.add(streets,6);
    if (regionId != null) {
      qPos.add(regionId);
      qPos.add(regionId);
    }
    if (countryId != null) {
      qPos.add(countryId);
      qPos.add(countryId);
    }
    qPos.add(cities,2);
    qPos.add(zips,2);
    List<Organization> organizations=new ArrayList<Organization>();
    Iterator<Long> itr=(Iterator<Long>)QueryUtil.iterate(q,getDialect(),start,end);
    while (itr.hasNext()) {
      Long organizationId=itr.next();
      Organization organization=OrganizationUtil.findByPrimaryKey(organizationId.longValue());
      organizations.add(organization);
    }
    return organizations;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
