{
  if (params == null) {
    params=new LinkedHashMap<String,Object>();
  }
  Long userId=(Long)params.get("usersOrgs");
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=new LinkedHashMap<String,Object>(params1);
  if (userId != null) {
    params2.remove("usersOrgs");
    params2.put("organizationsUserGroups",userId);
  }
  StringBundler sb=new StringBundler();
  sb.append("(");
  String sql=CustomSQLUtil.get(FIND_BY_COMPANY_ID);
  sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params1));
  sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params1));
  sb.append(sql);
  sb.append(")");
  if (Validator.isNotNull(userId)) {
    sql=CustomSQLUtil.get(FIND_BY_COMPANY_ID);
    sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params2));
    sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params2));
    sb.append(" UNION (");
    sb.append(sql);
    sb.append(")");
  }
  sql=sb.toString();
  sql=CustomSQLUtil.replaceAndOperator(sql,true);
  sql=CustomSQLUtil.replaceOrderBy(sql,obc);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("orgId",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params1);
    qPos.add(companyId);
    if (Validator.isNotNull(userId)) {
      setJoin(qPos,params2);
      qPos.add(companyId);
    }
    List<Organization> organizations=new ArrayList<Organization>();
    Iterator<Long> itr=(Iterator<Long>)QueryUtil.iterate(q,getDialect(),start,end);
    while (itr.hasNext()) {
      Long organizationId=itr.next();
      Organization organization=OrganizationUtil.findByPrimaryKey(organizationId.longValue());
      organizations.add(organization);
    }
    return organizations;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
