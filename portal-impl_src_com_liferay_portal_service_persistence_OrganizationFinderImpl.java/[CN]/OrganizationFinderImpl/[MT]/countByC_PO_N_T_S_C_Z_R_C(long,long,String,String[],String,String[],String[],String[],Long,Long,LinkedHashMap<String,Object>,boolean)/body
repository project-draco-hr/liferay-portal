{
  names=CustomSQLUtil.keywords(names);
  streets=CustomSQLUtil.keywords(streets);
  cities=CustomSQLUtil.keywords(cities);
  zips=CustomSQLUtil.keywords(zips);
  Session session=null;
  try {
    session=openSession();
    StringBundler sb=new StringBundler(5);
    boolean doUnion=false;
    if (params != null) {
      Long groupOrganization=(Long)params.get("groupOrganization");
      if (groupOrganization != null) {
        doUnion=true;
      }
    }
    if (doUnion) {
      sb.append(StringPool.OPEN_PARENTHESIS);
      sb.append(CustomSQLUtil.get(COUNT_BY_GROUP_ID));
      sb.append(") UNION ALL (");
    }
    if (Validator.isNotNull(type)) {
      sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_L_S_C_Z_R_C));
    }
 else {
      sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_S_C_Z_R_C));
    }
    if (doUnion) {
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    String sql=sb.toString();
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Organization_.name)",StringPool.LIKE,false,names);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street1)",StringPool.LIKE,true,streets);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street2)",StringPool.LIKE,true,streets);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street3)",StringPool.LIKE,true,streets);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.city)",StringPool.LIKE,false,cities);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.zip)",StringPool.LIKE,true,zips);
    if (regionId == null) {
      sql=StringUtil.replace(sql,_REGION_ID_SQL,StringPool.BLANK);
    }
    if (countryId == null) {
      sql=StringUtil.replace(sql,_COUNTRY_ID_SQL,StringPool.BLANK);
    }
    sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params));
    sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params));
    sql=StringUtil.replace(sql,"[$PARENT_ORGANIZATION_ID_COMPARATOR$]",parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params);
    qPos.add(companyId);
    qPos.add(parentOrganizationId);
    if (Validator.isNotNull(type)) {
      qPos.add(type);
    }
    qPos.add(names,2);
    qPos.add(streets,6);
    if (regionId != null) {
      qPos.add(regionId);
      qPos.add(regionId);
    }
    if (countryId != null) {
      qPos.add(countryId);
      qPos.add(countryId);
    }
    qPos.add(cities,2);
    qPos.add(zips,2);
    int count=0;
    Iterator<Long> itr=q.iterate();
    while (itr.hasNext()) {
      Long l=itr.next();
      if (l != null) {
        count+=l.intValue();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
