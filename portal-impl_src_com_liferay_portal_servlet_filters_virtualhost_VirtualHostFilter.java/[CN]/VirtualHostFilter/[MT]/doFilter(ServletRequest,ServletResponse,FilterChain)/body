{
  if (_log.isDebugEnabled()) {
    if (isFilterEnabled()) {
      _log.debug(VirtualHostFilter.class + " is enabled");
    }
 else {
      _log.debug(VirtualHostFilter.class + " is disabled");
    }
  }
  HttpServletRequest httpReq=(HttpServletRequest)req;
  HttpServletResponse httpRes=(HttpServletResponse)res;
  httpReq.setCharacterEncoding(StringPool.UTF8);
  httpRes=new AbsoluteRedirectsResponse(httpReq,httpRes);
  long companyId=PortalInstances.getCompanyId(httpReq);
  if (_log.isDebugEnabled()) {
    _log.debug("Company id " + companyId);
  }
  PortalUtil.getCurrentURL(httpReq);
  HttpSession ses=httpReq.getSession();
  Boolean httpsInitial=(Boolean)ses.getAttribute(WebKeys.HTTPS_INITIAL);
  if (httpsInitial == null) {
    httpsInitial=Boolean.valueOf(httpReq.isSecure());
    ses.setAttribute(WebKeys.HTTPS_INITIAL,httpsInitial);
    if (_log.isDebugEnabled()) {
      _log.debug("Setting httpsInitial to " + httpsInitial);
    }
  }
  if (!isFilterEnabled()) {
    processFilter(VirtualHostFilter.class,req,httpRes,chain);
    return;
  }
  StringBuffer requestURL=httpReq.getRequestURL();
  if (_log.isDebugEnabled()) {
    _log.debug("Received " + requestURL);
  }
  if (!isValidRequestURL(requestURL)) {
    processFilter(VirtualHostFilter.class,req,httpRes,chain);
    return;
  }
  String contextPath=PortalUtil.getPathContext();
  String friendlyURL=httpReq.getRequestURI().toLowerCase();
  if ((!contextPath.equals(StringPool.SLASH)) && (friendlyURL.indexOf(contextPath) != -1)) {
    friendlyURL=friendlyURL.substring(contextPath.length(),friendlyURL.length());
  }
  friendlyURL=StringUtil.replace(friendlyURL,StringPool.DOUBLE_SLASH,StringPool.SLASH);
  if (_log.isDebugEnabled()) {
    _log.debug("Friendly URL " + friendlyURL);
  }
  if (!isValidFriendlyURL(friendlyURL)) {
    processFilter(VirtualHostFilter.class,req,httpRes,chain);
    return;
  }
  LayoutSet layoutSet=(LayoutSet)req.getAttribute(WebKeys.VIRTUAL_HOST_LAYOUT_SET);
  if (_log.isDebugEnabled()) {
    _log.debug("Layout set " + layoutSet);
  }
  if (layoutSet != null) {
    try {
      LastPath lastPath=new LastPath(StringPool.BLANK,friendlyURL,req.getParameterMap());
      req.setAttribute(WebKeys.LAST_PATH,lastPath);
      StringMaker prefix=new StringMaker();
      if (layoutSet.isPrivateLayout()) {
        prefix.append(PortalUtil.getPathFriendlyURLPrivateGroup());
      }
 else {
        prefix.append(PortalUtil.getPathFriendlyURLPublic());
      }
      Group group=GroupLocalServiceUtil.getGroup(layoutSet.getGroupId());
      prefix.append(group.getFriendlyURL());
      StringMaker redirect=new StringMaker();
      redirect.append(prefix);
      redirect.append(friendlyURL);
      String query=httpReq.getQueryString();
      if (query != null) {
        redirect.append(StringPool.QUESTION);
        redirect.append(query);
      }
      if (_log.isDebugEnabled()) {
        _log.debug("Redirect to " + redirect);
      }
      RequestDispatcher rd=_ctx.getRequestDispatcher(redirect.toString());
      rd.forward(req,httpRes);
      return;
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  processFilter(VirtualHostFilter.class,req,httpRes,chain);
}
