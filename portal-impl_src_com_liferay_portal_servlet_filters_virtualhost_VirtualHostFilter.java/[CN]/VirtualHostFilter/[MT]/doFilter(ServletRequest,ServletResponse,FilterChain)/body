{
  if (_log.isDebugEnabled()) {
    if (isFilterEnabled()) {
      _log.debug(VirtualHostFilter.class + " is enabled");
    }
 else {
      _log.debug(VirtualHostFilter.class + " is disabled");
    }
  }
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  HttpServletResponse response=(HttpServletResponse)servletResponse;
  request.setCharacterEncoding(StringPool.UTF8);
  response=new AbsoluteRedirectsResponse(request,response);
  long companyId=PortalInstances.getCompanyId(request);
  if (_log.isDebugEnabled()) {
    _log.debug("Company id " + companyId);
  }
  PortalUtil.getCurrentURL(request);
  HttpSession session=request.getSession();
  Boolean httpsInitial=(Boolean)session.getAttribute(WebKeys.HTTPS_INITIAL);
  if (httpsInitial == null) {
    httpsInitial=Boolean.valueOf(request.isSecure());
    session.setAttribute(WebKeys.HTTPS_INITIAL,httpsInitial);
    if (_log.isDebugEnabled()) {
      _log.debug("Setting httpsInitial to " + httpsInitial);
    }
  }
  if (!isFilterEnabled()) {
    processFilter(VirtualHostFilter.class,request,response,filterChain);
    return;
  }
  StringBuffer requestURL=request.getRequestURL();
  if (_log.isDebugEnabled()) {
    _log.debug("Received " + requestURL);
  }
  if (!isValidRequestURL(requestURL)) {
    processFilter(VirtualHostFilter.class,request,response,filterChain);
    return;
  }
  String contextPath=PortalUtil.getPathContext();
  String friendlyURL=request.getRequestURI();
  if ((Validator.isNotNull(contextPath)) && (friendlyURL.indexOf(contextPath) != -1)) {
    friendlyURL=friendlyURL.substring(contextPath.length());
  }
  friendlyURL=StringUtil.replace(friendlyURL,StringPool.DOUBLE_SLASH,StringPool.SLASH);
  String i18nLanguageId=null;
  Set<String> languageIds=I18nServlet.getLanguageIds();
  for (  String languageId : languageIds) {
    if (friendlyURL.startsWith(languageId)) {
      int pos=friendlyURL.indexOf(StringPool.SLASH,1);
      i18nLanguageId=friendlyURL.substring(0,pos);
      friendlyURL=friendlyURL.substring(pos);
      break;
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Friendly URL " + friendlyURL);
  }
  if (!isValidFriendlyURL(friendlyURL)) {
    _log.debug("Friendly URL is not valid");
    processFilter(VirtualHostFilter.class,request,response,filterChain);
    return;
  }
  LayoutSet layoutSet=(LayoutSet)servletRequest.getAttribute(WebKeys.VIRTUAL_HOST_LAYOUT_SET);
  if (_log.isDebugEnabled()) {
    _log.debug("Layout set " + layoutSet);
  }
  if (layoutSet != null) {
    try {
      LastPath lastPath=new LastPath(contextPath,friendlyURL,servletRequest.getParameterMap());
      servletRequest.setAttribute(WebKeys.LAST_PATH,lastPath);
      StringBuilder prefix=new StringBuilder();
      Group group=GroupLocalServiceUtil.getGroup(layoutSet.getGroupId());
      if (layoutSet.isPrivateLayout()) {
        if (group.isUser()) {
          prefix.append(_PRIVATE_USER_SERVLET_MAPPING);
        }
 else {
          prefix.append(_PRIVATE_GROUP_SERVLET_MAPPING);
        }
      }
 else {
        prefix.append(_PUBLIC_GROUP_SERVLET_MAPPING);
      }
      prefix.append(group.getFriendlyURL());
      StringBuilder redirect=new StringBuilder();
      if (i18nLanguageId != null) {
        redirect.append(i18nLanguageId);
      }
      if (friendlyURL.startsWith(PropsValues.WIDGET_SERVLET_MAPPING)) {
        redirect.append(PropsValues.WIDGET_SERVLET_MAPPING);
        friendlyURL=StringUtil.replaceFirst(friendlyURL,PropsValues.WIDGET_SERVLET_MAPPING,StringPool.BLANK);
      }
      long plid=PortalUtil.getPlidFromFriendlyURL(companyId,friendlyURL);
      if (plid <= 0) {
        redirect.append(prefix);
      }
      redirect.append(friendlyURL);
      String query=request.getQueryString();
      if (query != null) {
        redirect.append(StringPool.QUESTION);
        redirect.append(query);
      }
      if (_log.isDebugEnabled()) {
        _log.debug("Redirect to " + redirect);
      }
      RequestDispatcher requestDispatcher=_servletContext.getRequestDispatcher(redirect.toString());
      requestDispatcher.forward(servletRequest,response);
      return;
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  processFilter(VirtualHostFilter.class,request,response,filterChain);
}
