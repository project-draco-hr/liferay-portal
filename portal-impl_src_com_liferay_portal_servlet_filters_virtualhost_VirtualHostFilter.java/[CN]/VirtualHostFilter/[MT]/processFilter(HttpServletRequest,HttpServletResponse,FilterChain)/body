{
  long companyId=PortalInstances.getCompanyId(request);
  if (!PortalInstances.isInstanceEnabled(companyId)) {
    String html=ContentUtil.get("com/liferay/portal/dependencies/disabled-instance.html");
    ServletResponseUtil.write(response,html);
    return;
  }
  String contextPath=PortalUtil.getPathContext();
  String originalFriendlyURL=request.getRequestURI();
  String friendlyURL=originalFriendlyURL;
  if ((Validator.isNotNull(contextPath)) && (friendlyURL.indexOf(contextPath) != -1)) {
    friendlyURL=friendlyURL.substring(contextPath.length());
  }
  friendlyURL=StringUtil.replace(friendlyURL,StringPool.DOUBLE_SLASH,StringPool.SLASH);
  String i18nLanguageId=null;
  Set<String> languageIds=I18nServlet.getLanguageIds();
  for (  String languageId : languageIds) {
    if (friendlyURL.startsWith(languageId)) {
      int pos=friendlyURL.indexOf(CharPool.SLASH,1);
      if (((pos != -1) && (pos != languageId.length())) || ((pos == -1) && !friendlyURL.equals(languageId))) {
        continue;
      }
      if (pos == -1) {
        i18nLanguageId=friendlyURL;
        friendlyURL=StringPool.SLASH;
      }
 else {
        i18nLanguageId=friendlyURL.substring(0,pos);
        friendlyURL=friendlyURL.substring(pos);
      }
      break;
    }
  }
  friendlyURL=StringUtil.replace(friendlyURL,PropsValues.WIDGET_SERVLET_MAPPING,StringPool.BLANK);
  if (_log.isDebugEnabled()) {
    _log.debug("Friendly URL " + friendlyURL);
  }
  if (!friendlyURL.equals(StringPool.SLASH) && !isValidFriendlyURL(friendlyURL)) {
    _log.debug("Friendly URL is not valid");
    processFilter(VirtualHostFilter.class,request,response,filterChain);
    return;
  }
 else   if (friendlyURL.startsWith(_PATH_DOCUMENTS)) {
    if (WebServerServlet.hasFiles(request)) {
      processFilter(VirtualHostFilter.class,request,response,filterChain);
      return;
    }
  }
  LayoutSet layoutSet=(LayoutSet)request.getAttribute(WebKeys.VIRTUAL_HOST_LAYOUT_SET);
  if (_log.isDebugEnabled()) {
    _log.debug("Layout set " + layoutSet);
  }
  if (layoutSet != null) {
    try {
      LastPath lastPath=new LastPath(contextPath,friendlyURL,request.getParameterMap());
      request.setAttribute(WebKeys.LAST_PATH,lastPath);
      StringBundler forwardURL=new StringBundler(6);
      if (i18nLanguageId != null) {
        forwardURL.append(i18nLanguageId);
      }
      if (originalFriendlyURL.startsWith(PropsValues.WIDGET_SERVLET_MAPPING)) {
        forwardURL.append(PropsValues.WIDGET_SERVLET_MAPPING);
        friendlyURL=StringUtil.replaceFirst(friendlyURL,PropsValues.WIDGET_SERVLET_MAPPING,StringPool.BLANK);
      }
      long plid=PortalUtil.getPlidFromFriendlyURL(companyId,friendlyURL);
      if (plid <= 0) {
        StringBundler prefix=new StringBundler(2);
        Group group=GroupLocalServiceUtil.getGroup(layoutSet.getGroupId());
        if (layoutSet.isPrivateLayout()) {
          if (group.isUser()) {
            prefix.append(_PRIVATE_USER_SERVLET_MAPPING);
          }
 else {
            prefix.append(_PRIVATE_GROUP_SERVLET_MAPPING);
          }
        }
 else {
          prefix.append(_PUBLIC_GROUP_SERVLET_MAPPING);
        }
        prefix.append(group.getFriendlyURL());
        String homeURL=PortalUtil.getRelativeHomeURL(request);
        if (group.isGuest() && friendlyURL.equals(StringPool.SLASH) && Validator.isNotNull(homeURL)) {
          friendlyURL=homeURL;
        }
 else {
          forwardURL.append(prefix);
        }
      }
      forwardURL.append(friendlyURL);
      if (_log.isDebugEnabled()) {
        _log.debug("Forward to " + forwardURL);
      }
      RequestDispatcher requestDispatcher=_servletContext.getRequestDispatcher(forwardURL.toString());
      requestDispatcher.forward(request,response);
      return;
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  processFilter(VirtualHostFilter.class,request,response,filterChain);
}
