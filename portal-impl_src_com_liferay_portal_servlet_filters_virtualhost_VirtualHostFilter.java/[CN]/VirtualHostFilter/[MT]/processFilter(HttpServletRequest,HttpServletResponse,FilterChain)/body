{
  long companyId=PortalInstances.getCompanyId(request);
  String originalFriendlyURL=request.getRequestURI();
  String friendlyURL=originalFriendlyURL;
  friendlyURL=StringUtil.replace(friendlyURL,StringPool.DOUBLE_SLASH,StringPool.SLASH);
  if (!friendlyURL.equals(StringPool.SLASH) && !_contextPath.isEmpty() && (friendlyURL.length() > _contextPath.length())&& friendlyURL.startsWith(_contextPath)&& friendlyURL.charAt(_contextPath.length()) == CharPool.SLASH) {
    friendlyURL=friendlyURL.substring(_contextPath.length());
  }
  int pos=friendlyURL.indexOf(CharPool.SEMICOLON);
  if (pos != -1) {
    friendlyURL=friendlyURL.substring(0,pos);
  }
  String i18nLanguageId=_findLanguageId(friendlyURL);
  friendlyURL=StringUtil.replace(friendlyURL,PropsValues.WIDGET_SERVLET_MAPPING,StringPool.BLANK);
  if (_log.isDebugEnabled()) {
    _log.debug("Friendly URL " + friendlyURL);
  }
  if (!friendlyURL.equals(StringPool.SLASH) && !isValidFriendlyURL(friendlyURL)) {
    _log.debug("Friendly URL is not valid");
    if (i18nLanguageId != null) {
      String forwardURL=StringUtil.replace(originalFriendlyURL,StringUtil.toLowerCase(i18nLanguageId),i18nLanguageId);
      RequestDispatcher requestDispatcher=_servletContext.getRequestDispatcher(forwardURL);
      requestDispatcher.forward(request,response);
      return;
    }
 else {
      processFilter(VirtualHostFilter.class.getName(),request,response,filterChain);
      return;
    }
  }
  LayoutSet layoutSet=(LayoutSet)request.getAttribute(WebKeys.VIRTUAL_HOST_LAYOUT_SET);
  if (_log.isDebugEnabled()) {
    _log.debug("Layout set " + layoutSet);
  }
  if (layoutSet == null) {
    processFilter(VirtualHostFilter.class.getName(),request,response,filterChain);
    return;
  }
  try {
    LastPath lastPath=new LastPath(_contextPath,friendlyURL,HttpUtil.parameterMapToString(request.getParameterMap()));
    request.setAttribute(WebKeys.LAST_PATH,lastPath);
    StringBundler forwardURL=new StringBundler(5);
    if (i18nLanguageId != null) {
      forwardURL.append(i18nLanguageId);
    }
    if (originalFriendlyURL.startsWith(PropsValues.WIDGET_SERVLET_MAPPING)) {
      forwardURL.append(PropsValues.WIDGET_SERVLET_MAPPING);
      friendlyURL=StringUtil.replaceFirst(friendlyURL,PropsValues.WIDGET_SERVLET_MAPPING,StringPool.BLANK);
    }
    long plid=PortalUtil.getPlidFromFriendlyURL(companyId,friendlyURL);
    if (plid <= 0) {
      Group group=GroupLocalServiceUtil.getGroup(layoutSet.getGroupId());
      if (isDocumentFriendlyURL(request,group.getGroupId(),friendlyURL)) {
        processFilter(VirtualHostFilter.class.getName(),request,response,filterChain);
        return;
      }
      if (group.isGuest() && friendlyURL.equals(StringPool.SLASH) && !layoutSet.isPrivateLayout()) {
        String homeURL=PortalUtil.getRelativeHomeURL(request);
        if (Validator.isNotNull(homeURL)) {
          friendlyURL=homeURL;
        }
      }
 else {
        if (layoutSet.isPrivateLayout()) {
          if (group.isUser()) {
            forwardURL.append(_PRIVATE_USER_SERVLET_MAPPING);
          }
 else {
            forwardURL.append(_PRIVATE_GROUP_SERVLET_MAPPING);
          }
        }
 else {
          forwardURL.append(_PUBLIC_GROUP_SERVLET_MAPPING);
        }
        forwardURL.append(group.getFriendlyURL());
      }
    }
    forwardURL.append(friendlyURL);
    if (_log.isDebugEnabled()) {
      _log.debug("Forward to " + forwardURL);
    }
    RequestDispatcher requestDispatcher=_servletContext.getRequestDispatcher(forwardURL.toString());
    requestDispatcher.forward(request,response);
  }
 catch (  Exception e) {
    _log.error(e,e);
    processFilter(VirtualHostFilter.class.getName(),request,response,filterChain);
  }
}
