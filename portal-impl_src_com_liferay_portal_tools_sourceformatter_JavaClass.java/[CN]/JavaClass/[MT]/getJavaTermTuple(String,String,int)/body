{
  int posStartNextLine=index;
  while (!line.endsWith(StringPool.OPEN_CURLY_BRACE) && !line.endsWith(StringPool.SEMICOLON)) {
    posStartNextLine=content.indexOf(StringPool.NEW_LINE,posStartNextLine) + 1;
    int posEndNextline=content.indexOf(StringPool.NEW_LINE,posStartNextLine);
    String nextLine=content.substring(posStartNextLine,posEndNextline);
    nextLine=StringUtil.trimLeading(nextLine);
    if (line.endsWith(StringPool.OPEN_PARENTHESIS)) {
      line+=nextLine;
    }
 else {
      line+=StringPool.SPACE + nextLine;
    }
  }
  line=StringUtil.replace(line," synchronized ",StringPool.SPACE);
  int x=line.indexOf(StringPool.EQUAL);
  int y=line.indexOf(StringPool.OPEN_PARENTHESIS);
  if (line.startsWith(_indent + "public static ")) {
    if (line.contains(" class ") || line.contains(" enum ")) {
      return new Tuple(getClassName(line),JavaTerm.TYPE_CLASS_PUBLIC_STATIC);
    }
    if (((x > 0) && ((y == -1) || (y > x))) || (line.endsWith(StringPool.SEMICOLON) && (y == -1))) {
      return new Tuple(getVariableName(line),JavaTerm.TYPE_VARIABLE_PUBLIC_STATIC);
    }
    if (y != -1) {
      return new Tuple(getConstructorOrMethodName(line,y),JavaTerm.TYPE_METHOD_PUBLIC_STATIC);
    }
  }
 else   if (line.startsWith(_indent + "public ")) {
    if (line.contains(" @interface ") || line.contains(" class ") || line.contains(" enum ")|| line.contains(" interface ")) {
      return new Tuple(getClassName(line),JavaTerm.TYPE_CLASS_PUBLIC);
    }
    if (((x > 0) && ((y == -1) || (y > x))) || (line.endsWith(StringPool.SEMICOLON) && (y == -1))) {
      return new Tuple(getVariableName(line),JavaTerm.TYPE_VARIABLE_PUBLIC);
    }
    if (y != -1) {
      int spaceCount=StringUtil.count(line.substring(0,y),StringPool.SPACE);
      if (spaceCount == 1) {
        return new Tuple(getConstructorOrMethodName(line,y),JavaTerm.TYPE_CONSTRUCTOR_PUBLIC);
      }
      if (spaceCount > 1) {
        return new Tuple(getConstructorOrMethodName(line,y),JavaTerm.TYPE_METHOD_PUBLIC);
      }
    }
  }
 else   if (line.startsWith(_indent + "protected static ")) {
    if (line.contains(" class ") || line.contains(" enum ")) {
      return new Tuple(getClassName(line),JavaTerm.TYPE_CLASS_PROTECTED_STATIC);
    }
    if (((x > 0) && ((y == -1) || (y > x))) || (line.endsWith(StringPool.SEMICOLON) && (y == -1))) {
      return new Tuple(getVariableName(line),JavaTerm.TYPE_VARIABLE_PROTECTED_STATIC);
    }
    if (y != -1) {
      return new Tuple(getConstructorOrMethodName(line,y),JavaTerm.TYPE_METHOD_PROTECTED_STATIC);
    }
  }
 else   if (line.startsWith(_indent + "protected ")) {
    if (line.contains(" @interface ") || line.contains(" class ") || line.contains(" enum ")|| line.contains(" interface ")) {
      return new Tuple(getClassName(line),JavaTerm.TYPE_CLASS_PROTECTED);
    }
    if (((x > 0) && ((y == -1) || (y > x))) || (line.endsWith(StringPool.SEMICOLON) && (y == -1))) {
      return new Tuple(getVariableName(line),JavaTerm.TYPE_VARIABLE_PROTECTED);
    }
    if (y != -1) {
      int spaceCount=StringUtil.count(line.substring(0,y),StringPool.SPACE);
      if (spaceCount == 1) {
        return new Tuple(getConstructorOrMethodName(line,y),JavaTerm.TYPE_CONSTRUCTOR_PROTECTED);
      }
      if (spaceCount > 1) {
        return new Tuple(getConstructorOrMethodName(line,y),JavaTerm.TYPE_METHOD_PROTECTED);
      }
    }
  }
 else   if (line.startsWith(_indent + "private static ")) {
    if (line.contains(" class ") || line.contains(" enum ")) {
      return new Tuple(getClassName(line),JavaTerm.TYPE_CLASS_PRIVATE_STATIC);
    }
    if (((x > 0) && ((y == -1) || (y > x))) || (line.endsWith(StringPool.SEMICOLON) && (y == -1))) {
      return new Tuple(getVariableName(line),JavaTerm.TYPE_VARIABLE_PRIVATE_STATIC);
    }
    if (y != -1) {
      return new Tuple(getConstructorOrMethodName(line,y),JavaTerm.TYPE_METHOD_PRIVATE_STATIC);
    }
  }
 else   if (line.startsWith(_indent + "private ")) {
    if (line.contains(" @interface ") || line.contains(" class ") || line.contains(" enum ")|| line.contains(" interface ")) {
      return new Tuple(getClassName(line),JavaTerm.TYPE_CLASS_PRIVATE);
    }
    if (((x > 0) && ((y == -1) || (y > x))) || (line.endsWith(StringPool.SEMICOLON) && (y == -1))) {
      return new Tuple(getVariableName(line),JavaTerm.TYPE_VARIABLE_PRIVATE);
    }
    if (y != -1) {
      int spaceCount=StringUtil.count(line.substring(0,y),StringPool.SPACE);
      if (spaceCount == 1) {
        return new Tuple(getConstructorOrMethodName(line,y),JavaTerm.TYPE_CONSTRUCTOR_PRIVATE);
      }
      if (spaceCount > 1) {
        return new Tuple(getConstructorOrMethodName(line,y),JavaTerm.TYPE_METHOD_PRIVATE);
      }
    }
  }
 else   if (line.startsWith(_indent + "static {")) {
    return new Tuple("static",JavaTerm.TYPE_STATIC_BLOCK);
  }
  return null;
}
