{
  Set<JavaTerm> javaTerms=new TreeSet<JavaTerm>(new JavaTermComparator(false));
  List<JavaTerm> staticBlocks=new ArrayList<JavaTerm>();
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(_content));
  int index=0;
  int lineCount=_lineCount - 1;
  String line=null;
  String javaTermName=null;
  int javaTermLineCount=-1;
  int javaTermStartPosition=-1;
  int javaTermType=-1;
  int lastCommentOrAnnotationPos=-1;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    lineCount++;
    if (JavaSourceProcessor.getLeadingTabCount(line) != _indent.length()) {
      index=index + line.length() + 1;
      continue;
    }
    if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ")|| line.equals(_indent + "protected")|| line.startsWith(_indent + "public ")|| line.equals(_indent + "public")|| line.equals(_indent + "static {")) {
      Tuple tuple=getJavaTermTuple(line,_content,index);
      if (tuple == null) {
        return Collections.emptySet();
      }
      int javaTermEndPosition=0;
      if (lastCommentOrAnnotationPos == -1) {
        javaTermEndPosition=index;
      }
 else {
        javaTermEndPosition=lastCommentOrAnnotationPos;
      }
      if ((javaTermStartPosition != -1) && (javaTermEndPosition < _content.length())) {
        JavaTerm javaTerm=getJavaTerm(javaTermName,javaTermType,javaTermLineCount,javaTermStartPosition,javaTermEndPosition);
        if (javaTerm == null) {
          return Collections.emptySet();
        }
        if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) {
          staticBlocks.add(javaTerm);
        }
 else {
          javaTerms.add(javaTerm);
        }
      }
      javaTermLineCount=lineCount;
      javaTermName=(String)tuple.getObject(0);
      javaTermStartPosition=javaTermEndPosition;
      javaTermType=(Integer)tuple.getObject(1);
      lastCommentOrAnnotationPos=-1;
    }
 else     if (hasAnnotationCommentOrJavadoc(line)) {
      if (lastCommentOrAnnotationPos == -1) {
        lastCommentOrAnnotationPos=index;
      }
    }
 else     if (!line.startsWith(_indent + StringPool.CLOSE_CURLY_BRACE) && !line.startsWith(_indent + StringPool.CLOSE_PARENTHESIS) && !line.startsWith(_indent + "extends")&& !line.startsWith(_indent + "implements")&& !BaseSourceProcessor.isExcludedFile(_javaTermAccessLevelModifierExclusionFiles,_absolutePath)) {
      Matcher matcher=_classPattern.matcher(_content);
      if (matcher.find()) {
        String insideClass=_content.substring(matcher.end());
        if (insideClass.contains(line) && !isEnumType(line,matcher.group(4))) {
          BaseSourceProcessor.processErrorMessage(_fileName,"Missing access level modifier: " + _fileName + " "+ lineCount);
        }
      }
    }
    index=index + line.length() + 1;
  }
  if (javaTermStartPosition != -1) {
    int javaTermEndPosition=_content.lastIndexOf(StringPool.CLOSE_CURLY_BRACE) - _indent.length() + 1;
    JavaTerm javaTerm=getJavaTerm(javaTermName,javaTermType,javaTermLineCount,javaTermStartPosition,javaTermEndPosition);
    if (javaTerm == null) {
      return Collections.emptySet();
    }
    if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) {
      staticBlocks.add(javaTerm);
    }
 else {
      javaTerms.add(javaTerm);
    }
  }
  return addStaticBlocks(javaTerms,staticBlocks);
}
