{
  if (_javaTerms == null) {
    return _content;
  }
  String originalContent=_content;
  JavaTerm previousJavaTerm=null;
  Iterator<JavaTerm> itr=_javaTerms.iterator();
  while (itr.hasNext()) {
    JavaTerm javaTerm=itr.next();
    checkUnusedParameters(javaTerm);
    if (!BaseSourceProcessor.isExcluded(checkJavaFieldTypesExclusions,_absolutePath)) {
      checkJavaFieldType(javaTerm,annotationsExclusions,immutableFieldTypes);
      if (!originalContent.equals(_content)) {
        return _content;
      }
    }
    sortJavaTerms(previousJavaTerm,javaTerm,javaTermSortExclusions);
    fixTabsAndIncorrectEmptyLines(javaTerm);
    formatAnnotations(javaTerm,testAnnotationsExclusions);
    if (!originalContent.equals(_content)) {
      return _content;
    }
    previousJavaTerm=javaTerm;
  }
  for (  JavaClass innerClass : _innerClasses) {
    String innerClassContent=innerClass.getContent();
    String newInnerClassContent=innerClass.formatJavaTerms(annotationsExclusions,immutableFieldTypes,checkJavaFieldTypesExclusions,javaTermSortExclusions,testAnnotationsExclusions);
    if (!innerClassContent.equals(newInnerClassContent)) {
      _content=StringUtil.replace(_content,innerClassContent,newInnerClassContent);
      return _content;
    }
  }
  fixJavaTermsDividers(_javaTerms,javaTermSortExclusions);
  return _content;
}
