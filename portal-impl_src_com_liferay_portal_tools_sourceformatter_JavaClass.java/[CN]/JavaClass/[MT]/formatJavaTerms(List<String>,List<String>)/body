{
  if (_javaTerms == null) {
    return _content;
  }
  String originalContent=_content;
  JavaTerm previousJavaTerm=null;
  Iterator<JavaTerm> itr=_javaTerms.iterator();
  while (itr.hasNext()) {
    JavaTerm javaTerm=itr.next();
    if (javaTerm.isClass()) {
      String javaTermContent=javaTerm.getContent();
      int pos=javaTermContent.indexOf("\n" + _indent + "static {");
      if (pos != -1) {
        javaTermContent=javaTermContent.substring(0,pos);
      }
      JavaClass innerClass=new JavaClass(_fileName,_absolutePath,javaTermContent,javaTerm.getLineCount(),_indent + StringPool.TAB,_javaTermAccessLevelModifierExclusions);
      String newJavaTermContent=innerClass.formatJavaTerms(javaTermSortExclusions,testAnnotationsExclusions);
      if (!javaTermContent.equals(newJavaTermContent)) {
        _content=StringUtil.replace(_content,javaTermContent,newJavaTermContent);
        return _content;
      }
    }
    sortJavaTerms(previousJavaTerm,javaTerm,javaTermSortExclusions);
    fixTabsAndIncorrectEmptyLines(javaTerm);
    formatAnnotations(javaTerm,testAnnotationsExclusions);
    if (!originalContent.equals(_content)) {
      return _content;
    }
    previousJavaTerm=javaTerm;
  }
  fixJavaTermsDividers(_javaTerms,javaTermSortExclusions);
  return _content;
}
