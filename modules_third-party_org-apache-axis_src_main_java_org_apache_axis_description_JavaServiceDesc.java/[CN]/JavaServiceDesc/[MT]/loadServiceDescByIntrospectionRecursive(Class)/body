{
  if (Skeleton.class.equals(implClass)) {
    return;
  }
  Method[] methods=getMethods(implClass);
  for (int i=0; i < methods.length; i++) {
    if (Modifier.isPublic(methods[i].getModifiers()) && !isServiceLifeCycleMethod(implClass,methods[i])) {
      getSyncedOperationsForName(implClass,methods[i].getName());
    }
  }
  if (implClass.isInterface()) {
    Class[] superClasses=implClass.getInterfaces();
    for (int i=0; i < superClasses.length; i++) {
      Class superClass=superClasses[i];
      if (!superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) {
        loadServiceDescByIntrospectionRecursive(superClass);
      }
    }
  }
 else {
    Class superClass=implClass.getSuperclass();
    if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) {
      loadServiceDescByIntrospectionRecursive(superClass);
    }
  }
}
