{
  String ownerId=(String)oldValue;
  try {
    if (ownerId.startsWith(PortletKeys.PREFS_OWNER_ID_GROUP)) {
      int index=PortletKeys.PREFS_OWNER_ID_GROUP.length() + 1;
      String str=ownerId.substring(index);
      if (Validator.isNumber(str)) {
        Long groupId=(Long)_groupIdMapper.getNewValue(new Long(str));
        ownerId=PortletKeys.PREFS_OWNER_ID_GROUP + StringPool.PERIOD + groupId;
      }
    }
 else     if (ownerId.startsWith(LayoutImpl.PUBLIC) || ownerId.startsWith(LayoutImpl.PRIVATE)) {
      String[] parts=StringUtil.split(ownerId,StringPool.PERIOD);
      Long groupId=new Long(parts[1]);
      if (groupId.longValue() <= 0) {
        throw new UpgradeException("OwnerId is invalid: " + ownerId);
      }
      groupId=(Long)_groupIdMapper.getNewValue(groupId);
      parts[1]=String.valueOf(groupId);
      ownerId=StringUtil.merge(parts,StringPool.PERIOD);
    }
  }
 catch (  StagnantRowException sre) {
    throw new StagnantRowException(ownerId,sre);
  }
  return ownerId;
}
