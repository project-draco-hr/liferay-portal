{
  Dictionary<String,Object> properties=new HashMapDictionary<>();
  properties.put(URLConstants.URL_HANDLER_PROTOCOL,new String[]{"lpkg"});
  bundleContext.registerService(URLStreamHandlerService.class.getName(),new LPKGURLStreamHandlerService(_urls),properties);
  _deploymentDirPath=_getDeploymentDirPath(bundleContext);
  Path overrideDirPath=_deploymentDirPath.resolve("override");
  List<File> jarFiles=_scanFiles(overrideDirPath,".jar");
  _uninstallOrphanOverridingJars(bundleContext,jarFiles);
  List<File> warFiles=_scanFiles(overrideDirPath,".war");
  _uninstallOrphanOverridingWars(bundleContext,warFiles);
  _lpkgBundleTracker=new BundleTracker<>(bundleContext,~Bundle.UNINSTALLED,new LPKGBundleTrackerCustomizer(bundleContext,_urls,_toFileNames(jarFiles,warFiles)));
  _lpkgBundleTracker.open();
  List<File> lpkgFiles=_scanFiles(_deploymentDirPath,".lpkg");
  _lpkgIndexValidator.setLPKGDeployer(this);
  _lpkgIndexValidator.setJarFiles(jarFiles);
  boolean updateIntegrityProperties=_lpkgIndexValidator.validate(lpkgFiles);
  boolean enabled=LPKGIndexValidatorThreadLocal.isEnabled();
  LPKGIndexValidatorThreadLocal.setEnabled(false);
  try {
    _instalLPKGs(bundleContext,lpkgFiles);
    _installOverrideJars(bundleContext,jarFiles);
    _installOverrideWars(bundleContext,warFiles);
    if (updateIntegrityProperties) {
      _lpkgIndexValidator.updateIntegrityProperties();
    }
  }
  finally {
    LPKGIndexValidatorThreadLocal.setEnabled(enabled);
  }
}
