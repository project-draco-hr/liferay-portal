{
  Element rootElement=portletDataContext.getExportDataRootElement();
  Set<String> dataSiteLevelPortletIds=checkDataSiteLevelPortlets(portletDataContext,stagedGroup);
  if (BackgroundTaskThreadLocal.hasBackgroundTask()) {
    ManifestSummary manifestSummary=portletDataContext.getManifestSummary();
    PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("layout",ArrayUtil.toStringArray(dataSiteLevelPortletIds),manifestSummary);
    manifestSummary.resetCounters();
  }
  long[] layoutIds=portletDataContext.getLayoutIds();
  if (stagedGroup.isLayoutPrototype()) {
    layoutIds=ExportImportHelperUtil.getAllLayoutIds(stagedGroup.getGroupId(),portletDataContext.isPrivateLayout());
  }
  long previousScopeGroupId=portletDataContext.getScopeGroupId();
  try {
    exportSitePortlets(portletDataContext,stagedGroup,dataSiteLevelPortletIds,layoutIds);
  }
  finally {
    portletDataContext.setScopeGroupId(previousScopeGroupId);
  }
  portletDataContext.setExportDataRootElement(rootElement);
  List<? extends StagedModel> childStagedModels=_stagedGroupStagedModelRepository.fetchChildrenStagedModels(portletDataContext,stagedGroup);
  for (  StagedModel stagedModel : childStagedModels) {
    StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext,stagedGroup,stagedModel,PortletDataContext.REFERENCE_TYPE_CHILD);
  }
  Element groupElement=portletDataContext.getExportDataElement(stagedGroup);
  portletDataContext.addClassedModel(groupElement,ExportImportPathUtil.getModelPath(stagedGroup),stagedGroup);
}
