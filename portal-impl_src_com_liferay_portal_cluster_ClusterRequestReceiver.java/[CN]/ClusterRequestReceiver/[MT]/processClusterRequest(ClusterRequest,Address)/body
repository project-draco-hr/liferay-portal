{
  Object responsePayload=null;
  ClusterMessageType clusterMessageType=clusterRequest.getClusterMessageType();
  if (clusterMessageType.equals(ClusterMessageType.NOTIFY) || clusterMessageType.equals(ClusterMessageType.UPDATE)) {
    _clusterExecutorImpl.memberJoined(sourceAddress,clusterRequest.getOriginatingClusterNode());
    if (clusterMessageType.equals(ClusterMessageType.NOTIFY)) {
      responsePayload=ClusterRequest.createClusterRequest(ClusterMessageType.UPDATE,_clusterExecutorImpl.getLocalClusterNode());
    }
  }
 else {
    MethodHandler methodHandler=clusterRequest.getMethodHandler();
    Object returnValue=null;
    Exception exception=null;
    if (methodHandler != null) {
      try {
        ClusterInvokeThreadLocal.setEnabled(false);
        returnValue=methodHandler.invoke();
      }
 catch (      Exception e) {
        exception=e;
        _log.error("Unable to invoke method " + methodHandler,e);
      }
 finally {
        ClusterInvokeThreadLocal.setEnabled(true);
      }
    }
 else {
      exception=new ClusterException("Payload is not of type " + MethodHandler.class.getName());
    }
    if (!clusterRequest.isFireAndForget()) {
      responsePayload=_clusterExecutorImpl.generateClusterNodeResponse(clusterRequest,returnValue,exception);
    }
  }
  if (responsePayload == null) {
    return;
  }
  Channel channel=_clusterExecutorImpl.getControlChannel();
  try {
    channel.send((org.jgroups.Address)sourceAddress.getRealAddress(),responsePayload);
  }
 catch (  Exception e) {
    _log.error("Unable to send message " + responsePayload,e);
  }
catch (  Throwable t) {
    _log.error(t,t);
  }
}
