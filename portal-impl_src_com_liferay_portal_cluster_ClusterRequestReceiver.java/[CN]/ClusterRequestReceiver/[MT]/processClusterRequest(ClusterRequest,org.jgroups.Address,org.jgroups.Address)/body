{
  ClusterMessageType clusterMessageType=clusterRequest.getClusterMessageType();
  if (clusterMessageType.equals(ClusterMessageType.NOTIFY)) {
    ClusterNode originatingClusterNode=clusterRequest.getOriginatingClusterNode();
    if (originatingClusterNode != null) {
      long expirationTime=System.currentTimeMillis() + (PropsValues.CLUSTER_EXECUTOR_HEARTBEAT_INTERVAL * 2);
      _clusterExecutorImpl.notify(new AddressImpl(sourceAddress),originatingClusterNode,expirationTime);
    }
 else {
      if (_log.isWarnEnabled()) {
        _log.warn("Content of notify message does not contain cluster " + "node information");
      }
    }
    return;
  }
  ClusterNodeResponse clusterNodeResponse=new ClusterNodeResponse();
  Address address=new AddressImpl(localAddress);
  clusterNodeResponse.setAddress(address);
  clusterNodeResponse.setClusterMessageType(ClusterMessageType.EXECUTE);
  try {
    ClusterNode localClusterNode=_clusterExecutorImpl.getLocalClusterNode();
    clusterNodeResponse.setClusterNode(localClusterNode);
  }
 catch (  Exception e) {
    clusterNodeResponse.setException(e);
  }
  clusterNodeResponse.setMulticast(clusterRequest.isMulticast());
  clusterNodeResponse.setUuid(clusterRequest.getUuid());
  MethodHandler methodHandler=clusterRequest.getMethodHandler();
  if (methodHandler != null) {
    try {
      ClusterInvokeThreadLocal.setEnabled(false);
      Object returnValue=invoke(clusterRequest.getServletContextName(),clusterRequest.getBeanIdentifier(),methodHandler);
      if (returnValue instanceof Serializable) {
        clusterNodeResponse.setResult(returnValue);
      }
 else       if (returnValue != null) {
        clusterNodeResponse.setException(new ClusterException("Return value is not serializable"));
      }
    }
 catch (    Exception e) {
      clusterNodeResponse.setException(e);
      _log.error("Failed to invoke method " + methodHandler,e);
    }
 finally {
      ClusterInvokeThreadLocal.setEnabled(true);
    }
  }
 else {
    clusterNodeResponse.setException(new ClusterException("Payload is not of type " + MethodHandler.class.getName()));
  }
  Channel controlChannel=_clusterExecutorImpl.getControlChannel();
  try {
    controlChannel.send(sourceAddress,localAddress,clusterNodeResponse);
  }
 catch (  ChannelException ce) {
    _log.error("Unable to send response message " + clusterNodeResponse,ce);
  }
catch (  Throwable t) {
    _log.error(t,t);
  }
}
