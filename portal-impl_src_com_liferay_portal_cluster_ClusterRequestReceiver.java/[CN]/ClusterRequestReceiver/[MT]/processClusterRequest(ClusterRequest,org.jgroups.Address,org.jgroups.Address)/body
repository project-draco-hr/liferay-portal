{
  ClusterMessageType clusterMessageType=clusterRequest.getClusterMessageType();
  ClusterNodeResponse clusterNodeResponse=new ClusterNodeResponse();
  try {
    ClusterNode localClusterNode=_clusterExecutorImpl.getLocalClusterNode();
    clusterNodeResponse.setClusterNode(localClusterNode);
  }
 catch (  Exception e) {
    clusterNodeResponse.setException(e);
  }
  if (clusterMessageType.equals(ClusterMessageType.NOTIFY) || clusterMessageType.equals(ClusterMessageType.UPDATE)) {
    ClusterNode originatingClusterNode=clusterRequest.getOriginatingClusterNode();
    if (originatingClusterNode != null) {
      _clusterExecutorImpl.memberJoined(new AddressImpl(sourceAddress),originatingClusterNode);
      clusterNodeResponse.setClusterMessageType(clusterMessageType);
    }
 else {
      if (_log.isWarnEnabled()) {
        _log.warn("Content of notify message does not contain cluster " + "node information");
      }
      return;
    }
  }
 else {
    clusterNodeResponse.setClusterMessageType(ClusterMessageType.EXECUTE);
    clusterNodeResponse.setMulticast(clusterRequest.isMulticast());
    clusterNodeResponse.setUuid(clusterRequest.getUuid());
    MethodWrapper methodWrapper=clusterRequest.getMethodWrapper();
    if (methodWrapper != null) {
      try {
        ClusterInvokeThreadLocal.setEnabled(true);
        Object returnValue=MethodInvoker.invoke(methodWrapper);
        if (returnValue instanceof Serializable) {
          clusterNodeResponse.setResult(returnValue);
        }
 else         if (returnValue != null) {
          clusterNodeResponse.setException(new ClusterException("Return value is not serializable"));
        }
      }
 catch (      Exception e) {
        clusterNodeResponse.setException(e);
      }
 finally {
        ClusterInvokeThreadLocal.setEnabled(false);
      }
    }
 else {
      clusterNodeResponse.setException(new ClusterException("Payload is not of type " + MethodWrapper.class.getName()));
    }
  }
  Channel controlChannel=_clusterExecutorImpl.getControlChannel();
  try {
    controlChannel.send(sourceAddress,localAddress,clusterNodeResponse);
  }
 catch (  ChannelException ce) {
    _log.error("Unable to send response message " + clusterNodeResponse,ce);
  }
catch (  Throwable t) {
    _log.error(t,t);
  }
}
