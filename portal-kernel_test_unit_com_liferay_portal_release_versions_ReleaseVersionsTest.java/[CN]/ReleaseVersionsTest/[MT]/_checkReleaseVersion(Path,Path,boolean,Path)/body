{
  Properties bndProperties=_loadProperties(bndBndPath);
  Properties otherBndProperties=_loadProperties(otherBndBndPath);
  String bundleSymbolicName=bndProperties.getProperty(Constants.BUNDLE_SYMBOLICNAME);
  String otherBundleSymbolicName=otherBndProperties.getProperty(Constants.BUNDLE_SYMBOLICNAME);
  Assert.assertEquals(bundleSymbolicName,otherBundleSymbolicName);
  String bundleVersion=bndProperties.getProperty(Constants.BUNDLE_VERSION);
  String otherBundleVersion=otherBndProperties.getProperty(Constants.BUNDLE_VERSION);
  Version masterVersion;
  Version releaseVersion;
  if (otherRelease) {
    masterVersion=Version.parseVersion(bundleVersion);
    releaseVersion=Version.parseVersion(otherBundleVersion);
  }
 else {
    masterVersion=Version.parseVersion(otherBundleVersion);
    releaseVersion=Version.parseVersion(bundleVersion);
  }
  int delta=0;
  for (int i=0; i < 3; i++) {
    int masterVersionPart=masterVersion.get(i);
    int releaseVersionPart=releaseVersion.get(i);
    if (masterVersionPart != releaseVersionPart) {
      delta=masterVersionPart - releaseVersionPart;
      break;
    }
  }
  if ((delta != 0) && (delta != 1)) {
    StringBundler sb=new StringBundler(9);
    sb.append("Difference in ");
    sb.append(Constants.BUNDLE_VERSION);
    sb.append(" for ");
    sb.append(relativePath);
    sb.append(" between master (");
    sb.append(masterVersion);
    sb.append(") and release (");
    sb.append(releaseVersion);
    sb.append(") branches is not allowed");
    Assert.fail(sb.toString());
  }
}
