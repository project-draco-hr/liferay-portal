{
  firstNames=CustomSQLUtil.keywords(firstNames);
  middleNames=CustomSQLUtil.keywords(middleNames);
  lastNames=CustomSQLUtil.keywords(lastNames);
  screenNames=CustomSQLUtil.keywords(screenNames);
  emailAddresses=CustomSQLUtil.keywords(emailAddresses);
  if (params == null) {
    params=_emptyLinkedHashMap;
  }
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=null;
  LinkedHashMap<String,Object> params3=null;
  Long[] groupIds=null;
  if (params.get("usersGroups") instanceof Long) {
    Long groupId=(Long)params.get("usersGroups");
    if (groupId > 0) {
      groupIds=new Long[]{groupId};
    }
  }
 else {
    groupIds=(Long[])params.get("usersGroups");
  }
  Long[] roleIds=null;
  if (params.get("usersRoles") instanceof Long) {
    Long roleId=(Long)params.get("usersRoles");
    if (roleId > 0) {
      roleIds=new Long[]{roleId};
    }
  }
 else {
    roleIds=(Long[])params.get("usersRoles");
  }
  boolean inherit=GetterUtil.getBoolean(params.get("inherit"));
  boolean doUnionOnGroup=ArrayUtil.isNotEmpty(groupIds) && inherit;
  if (doUnionOnGroup) {
    params2=new LinkedHashMap<String,Object>(params1);
    params2.remove("usersGroups");
    params3=new LinkedHashMap<String,Object>(params1);
    params3.remove("usersGroups");
    List<Long> organizationIds=new ArrayList<Long>();
    List<Long> userGroupIds=new ArrayList<Long>();
    for (    long groupId : groupIds) {
      Group group=GroupLocalServiceUtil.fetchGroup(groupId);
      if ((group != null) && group.isOrganization()) {
        organizationIds.add(group.getOrganizationId());
      }
      List<Organization> organizations=GroupUtil.getOrganizations(groupId);
      for (      Organization organization : organizations) {
        organizationIds.add(organization.getOrganizationId());
      }
      List<UserGroup> userGroups=GroupUtil.getUserGroups(groupId);
      for (      UserGroup userGroup : userGroups) {
        userGroupIds.add(userGroup.getUserGroupId());
      }
    }
    params2.put("usersOrgs",organizationIds.toArray(new Long[organizationIds.size()]));
    params3.put("usersUserGroups",userGroupIds.toArray(new Long[userGroupIds.size()]));
  }
  boolean doUnionOnRole=ArrayUtil.isNotEmpty(roleIds) && inherit;
  if (doUnionOnRole) {
    params2=new LinkedHashMap<String,Object>(params1);
    params2.remove("usersRoles");
    params3=new LinkedHashMap<String,Object>(params1);
    params3.remove("usersRoles");
    List<Long> roleGroupIds=new ArrayList<Long>();
    List<Long> userGroupIds=new ArrayList<Long>();
    for (    long roleId : roleIds) {
      List<Group> groups=RoleUtil.getGroups(roleId);
      for (      Group group : groups) {
        if (group.isUserGroup()) {
          userGroupIds.add(group.getClassPK());
        }
 else {
          roleGroupIds.add(group.getGroupId());
        }
      }
    }
    params2.put("usersGroups",roleGroupIds.toArray(new Long[roleGroupIds.size()]));
    params3.put("usersUserGroups",userGroupIds.toArray(new Long[userGroupIds.size()]));
  }
  Session session=null;
  try {
    session=openSession();
    Set<Long> userIds=new HashSet<Long>();
    userIds.addAll(countByC_FN_MN_LN_SN_EA_S(session,companyId,firstNames,middleNames,lastNames,screenNames,emailAddresses,status,params1,andOperator));
    if (doUnionOnGroup || doUnionOnRole) {
      userIds.addAll(countByC_FN_MN_LN_SN_EA_S(session,companyId,firstNames,middleNames,lastNames,screenNames,emailAddresses,status,params2,andOperator));
      userIds.addAll(countByC_FN_MN_LN_SN_EA_S(session,companyId,firstNames,middleNames,lastNames,screenNames,emailAddresses,status,params3,andOperator));
    }
    return userIds.size();
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
