{
  if (params == null) {
    return;
  }
  for (  Map.Entry<String,Object> entry : params.entrySet()) {
    String key=entry.getKey();
    if (key.equals("expandoAttributes")) {
      continue;
    }
    Object value=entry.getValue();
    if (key.equals("usersOrgsTree")) {
      List<Organization> organizationsTree=(List<Organization>)value;
      if (!organizationsTree.isEmpty()) {
        for (        Organization organization : organizationsTree) {
          StringBundler treePath=new StringBundler(5);
          treePath.append(StringPool.PERCENT);
          treePath.append(StringPool.SLASH);
          treePath.append(organization.getOrganizationId());
          treePath.append(StringPool.SLASH);
          treePath.append(StringPool.PERCENT);
          qPos.add(treePath.toString());
        }
      }
 else {
        qPos.add("%/ /%");
      }
    }
 else     if (value instanceof Long) {
      Long valueLong=(Long)value;
      if (Validator.isNotNull(valueLong)) {
        qPos.add(valueLong);
      }
    }
 else     if (value instanceof Long[]) {
      Long[] valueArray=(Long[])value;
      for (      Long element : valueArray) {
        if (Validator.isNotNull(element)) {
          qPos.add(element);
        }
      }
    }
 else     if (value instanceof Long[][]) {
      Long[][] valueDoubleArray=(Long[][])value;
      for (      Long[] valueArray : valueDoubleArray) {
        for (        Long valueLong : valueArray) {
          qPos.add(valueLong);
        }
      }
    }
 else     if (value instanceof String) {
      String valueString=(String)value;
      if (Validator.isNotNull(valueString)) {
        qPos.add(valueString);
      }
    }
 else     if (value instanceof String[]) {
      String[] valueArray=(String[])value;
      for (      String element : valueArray) {
        if (Validator.isNotNull(element)) {
          qPos.add(element);
        }
      }
    }
 else     if (value instanceof CustomSQLParam) {
      CustomSQLParam customSQLParam=(CustomSQLParam)value;
      customSQLParam.process(qPos);
    }
  }
}
