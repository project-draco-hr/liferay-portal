{
  double version=extraDataJSONObject.getDouble("version");
  WikiPage socialActivityWikiPage=WikiPageLocalServiceUtil.fetchPage(page.getNodeId(),page.getTitle(),version);
  User socialActivityUser=UserLocalServiceUtil.fetchUser(socialActivity.getUserId());
  if (socialActivityUser == null) {
    socialActivityUser=UserLocalServiceUtil.getDefaultUser(socialActivity.getCompanyId());
  }
  String userName=HtmlUtil.escape(socialActivityUser.getFullName());
  if (Validator.isNull(userName)) {
    userName="Liferay";
  }
  int type=socialActivity.getType();
  if ((type == SocialActivityConstants.TYPE_ADD_ATTACHMENT) || (type == SocialActivityConstants.TYPE_MOVE_ATTACHMENT_TO_TRASH) || (type == SocialActivityConstants.TYPE_RESTORE_ATTACHMENT_FROM_TRASH)) {
    String label="x-added-the-attachment-x";
    if (type == SocialActivityConstants.TYPE_MOVE_ATTACHMENT_TO_TRASH) {
      label="x-removed-the-attachment-x";
    }
 else     if (type == SocialActivityConstants.TYPE_RESTORE_ATTACHMENT_FROM_TRASH) {
      label="x-restored-the-attachment-x";
    }
    String title=extraDataJSONObject.getString("fileEntryTitle");
    long fileEntryId=extraDataJSONObject.getLong("fileEntryId");
    String url=getDownloadURL(fileEntryId);
    String titleLink=getLink(title,url);
    return LanguageUtil.format(resourceBundle,label,new Object[]{userName,titleLink},false);
  }
 else   if (type == SocialActivityConstants.TYPE_ADD_COMMENT) {
    String url=getPageURL(page) + "#wikiCommentsPanel";
    return LanguageUtil.format(resourceBundle,"x-added-a-comment",new Object[]{userName,url},false);
  }
 else   if ((type == SocialActivityConstants.TYPE_MOVE_TO_TRASH) || (type == SocialActivityConstants.TYPE_RESTORE_FROM_TRASH) || (type == WikiActivityKeys.ADD_PAGE)|| (type == WikiActivityKeys.UPDATE_PAGE)) {
    String pageURL=getPageURL(socialActivityWikiPage,version);
    if (type == SocialActivityConstants.TYPE_MOVE_TO_TRASH) {
      return LanguageUtil.format(resourceBundle,"activity-wiki-page-move-to-trash",new Object[]{StringPool.BLANK,userName,page.getTitle()},false);
    }
 else     if (type == SocialActivityConstants.TYPE_RESTORE_FROM_TRASH) {
      String titleLink=getLink(page.getTitle(),pageURL);
      return LanguageUtil.format(resourceBundle,"activity-wiki-page-restore-from-trash",new Object[]{StringPool.BLANK,userName,titleLink},false);
    }
 else     if (type == WikiActivityKeys.ADD_PAGE) {
      String titleLink=getLink(page.getTitle(),pageURL.toString());
      return LanguageUtil.format(resourceBundle,"x-added-the-page-x",new Object[]{userName,titleLink},false);
    }
 else     if (type == WikiActivityKeys.UPDATE_PAGE) {
      String title=String.valueOf(page.getVersion());
      String url=pageURL;
      if ((socialActivityWikiPage != null) && socialActivityWikiPage.isMinorEdit()) {
        title+=String.format(" (%s)",LanguageUtil.get(resourceBundle,"minor-edit"));
      }
      String titleURL=getLink(title,url);
      return LanguageUtil.format(resourceBundle,"x-updated-the-page-to-version-x",new Object[]{userName,titleURL},false);
    }
 else {
      return StringPool.BLANK;
    }
  }
 else {
    return StringPool.BLANK;
  }
}
