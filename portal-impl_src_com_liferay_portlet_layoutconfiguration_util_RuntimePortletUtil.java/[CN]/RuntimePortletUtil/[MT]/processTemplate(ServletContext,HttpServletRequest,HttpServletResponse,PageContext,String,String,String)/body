{
  if (Validator.isNull(velocityTemplateContent)) {
    return StringPool.BLANK;
  }
  TemplateProcessor processor=new TemplateProcessor(servletContext,request,response,portletId);
  VelocityContext velocityContext=VelocityEngineUtil.getWrappedStandardToolsContext();
  velocityContext.put("processor",processor);
  VelocityVariables.insertVariables(velocityContext,request);
  StringServletResponse stringResponse=new StringServletResponse(response);
  UnsyncStringWriter unsyncStringWriter=new UnsyncStringWriter(true);
  MethodWrapper methodWrapper=new MethodWrapper("com.liferay.taglib.util.VelocityTaglib","init",new Object[]{servletContext,request,stringResponse,pageContext,unsyncStringWriter});
  Object velocityTaglib=MethodInvoker.invoke(methodWrapper);
  velocityContext.put("taglibLiferay",velocityTaglib);
  velocityContext.put("theme",velocityTaglib);
  try {
    VelocityEngineUtil.mergeTemplate(velocityTemplateId,velocityTemplateContent,velocityContext,unsyncStringWriter);
  }
 catch (  Exception e) {
    _log.error(e,e);
    throw e;
  }
  String output=unsyncStringWriter.toString();
  Map<String,String> columnsMap=processor.getColumnsMap();
  Iterator<Map.Entry<String,String>> columnsMapItr=columnsMap.entrySet().iterator();
  while (columnsMapItr.hasNext()) {
    Map.Entry<String,String> entry=columnsMapItr.next();
    String key=entry.getKey();
    String value=entry.getValue();
    output=StringUtil.replace(output,key,value);
  }
  Map<Portlet,Object[]> portletsMap=processor.getPortletsMap();
  Map<String,String> contentsMap=new HashMap<String,String>(portletsMap.size());
  for (  Map.Entry<Portlet,Object[]> entry : portletsMap.entrySet()) {
    Portlet portlet=entry.getKey();
    Object[] value=entry.getValue();
    String queryString=(String)value[0];
    String columnId=(String)value[1];
    Integer columnPos=(Integer)value[2];
    Integer columnCount=(Integer)value[3];
    String content=processPortlet(servletContext,request,response,portlet,queryString,columnId,columnPos,columnCount,null);
    contentsMap.put(portlet.getPortletId(),content);
  }
  return StringUtil.replace(output,"[$TEMPLATE_PORTLET_","$]",contentsMap);
}
