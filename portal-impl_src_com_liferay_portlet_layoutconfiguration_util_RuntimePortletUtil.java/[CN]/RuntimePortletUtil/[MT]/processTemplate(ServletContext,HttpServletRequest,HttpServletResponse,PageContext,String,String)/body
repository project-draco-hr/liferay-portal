{
  if (Validator.isNull(content)) {
    return StringPool.BLANK;
  }
  TemplateProcessor processor=new TemplateProcessor(servletContext,request,response,portletId);
  VelocityContext vc=new VelocityContext();
  vc.put("processor",processor);
  VelocityVariables.insertVariables(vc,request);
  StringServletResponse stringResponse=new StringServletResponse(response);
  MethodWrapper methodWrapper=new MethodWrapper("com.liferay.taglib.util.VelocityTaglib","init",new Object[]{servletContext,request,stringResponse,pageContext});
  Object velocityTaglib=MethodInvoker.invoke(methodWrapper);
  vc.put("taglibLiferay",velocityTaglib);
  vc.put("theme",velocityTaglib);
  StringWriter sw=new StringWriter();
  try {
    Velocity.evaluate(vc,sw,RuntimePortletUtil.class.getName(),content);
  }
 catch (  Exception e) {
    _log.error(e,e);
    throw e;
  }
  String output=sw.toString();
  Map<String,String> columnsMap=processor.getColumnsMap();
  Iterator<Map.Entry<String,String>> columnsMapItr=columnsMap.entrySet().iterator();
  while (columnsMapItr.hasNext()) {
    Map.Entry<String,String> entry=columnsMapItr.next();
    String key=entry.getKey();
    String value=entry.getValue();
    output=StringUtil.replace(output,key,value);
  }
  Map<Portlet,Object[]> portletsMap=processor.getPortletsMap();
  Iterator<Map.Entry<Portlet,Object[]>> portletsMapItr=portletsMap.entrySet().iterator();
  while (portletsMapItr.hasNext()) {
    Map.Entry<Portlet,Object[]> entry=portletsMapItr.next();
    Portlet portlet=entry.getKey();
    Object[] value=entry.getValue();
    String queryString=(String)value[0];
    String columnId=(String)value[1];
    Integer columnPos=(Integer)value[2];
    Integer columnCount=(Integer)value[3];
    StringBuilder sb=new StringBuilder();
    processPortlet(sb,servletContext,request,response,portlet,queryString,columnId,columnPos,columnCount,null);
    output=StringUtil.replace(output,"[$TEMPLATE_PORTLET_" + portlet.getPortletId() + "$]",sb.toString());
  }
  return output;
}
