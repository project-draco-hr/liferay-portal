{
  if (Validator.isNull(velocityTemplateContent)) {
    return StringPool.BLANK;
  }
  UnsyncStringWriter unsyncStringWriter=new UnsyncStringWriter();
  CustomizationSettingsProcessor processor=new CustomizationSettingsProcessor(request,new PipingPageContext(pageContext,unsyncStringWriter),unsyncStringWriter);
  VelocityContext velocityContext=VelocityEngineUtil.getWrappedStandardToolsContext();
  velocityContext.put("processor",processor);
  VelocityVariablesUtil.insertVariables(velocityContext,request);
  MethodHandler methodHandler=new MethodHandler(_initMethodKey,servletContext,request,new PipingServletResponse(response,unsyncStringWriter),pageContext);
  Object velocityTaglib=methodHandler.invoke(true);
  velocityContext.put("taglibLiferay",velocityTaglib);
  velocityContext.put("theme",velocityTaglib);
  try {
    VelocityEngineUtil.mergeTemplate(velocityTemplateId,velocityTemplateContent,velocityContext,unsyncStringWriter);
  }
 catch (  Exception e) {
    _log.error(e,e);
    throw e;
  }
  return unsyncStringWriter.toString();
}
