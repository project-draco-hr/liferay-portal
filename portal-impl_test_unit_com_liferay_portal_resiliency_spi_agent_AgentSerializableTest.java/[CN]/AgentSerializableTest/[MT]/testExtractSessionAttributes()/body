{
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(AgentSerializable.class.getName(),Level.OFF);
  MockHttpSession mockHttpSession=new MockHttpSession();
  String serializeableAttribute="serializeableAttribute";
  final String nonserializableAttribute="nonserializableAttribute";
  mockHttpSession.setAttribute(serializeableAttribute,serializeableAttribute);
  mockHttpSession.setAttribute(nonserializableAttribute,new Object(){
    @Override public String toString(){
      return nonserializableAttribute;
    }
  }
);
  Map<String,Serializable> sessionAttributes=AgentSerializable.extractSessionAttributes(mockHttpSession);
  Assert.assertTrue(logRecords.isEmpty());
  Assert.assertEquals(1,sessionAttributes.size());
  Assert.assertEquals(serializeableAttribute,sessionAttributes.get(serializeableAttribute));
  logRecords=JDKLoggerTestUtil.configureJDKLogger(AgentSerializable.class.getName(),Level.WARNING);
  sessionAttributes=AgentSerializable.extractSessionAttributes(mockHttpSession);
  Assert.assertEquals(1,logRecords.size());
  LogRecord logRecord=logRecords.get(0);
  Assert.assertEquals("Nonserializable session attribute name " + nonserializableAttribute + " with value "+ nonserializableAttribute,logRecord.getMessage());
  Assert.assertEquals(1,sessionAttributes.size());
  Assert.assertEquals(serializeableAttribute,sessionAttributes.get(serializeableAttribute));
}
