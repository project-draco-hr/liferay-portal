{
  final String testTargetPortletId="testTargetPortletId";
  properties.put("com.liferay.portlet.add-default-resource",Boolean.TRUE);
  properties.put("com.liferay.portlet.system",Boolean.TRUE);
  setUpPortlet(new TestPortlet(map),properties,testTargetPortletId,false);
  testPortlet=new TestPortlet(){
    @Override public void serveResource(    ResourceRequest resourceRequest,    ResourceResponse resourceResponse) throws IOException {
      PrintWriter printWriter=resourceResponse.getWriter();
      PortletURL portletURL=PortletURLFactoryUtil.create(resourceRequest,testTargetPortletId,layout.getPlid(),PortletRequest.RENDER_PHASE);
      String queryString=HttpUtil.getQueryString(portletURL.toString());
      Map<String,String[]> parameterMap=HttpUtil.getParameterMap(queryString);
      String portletAuthenticationToken=MapUtil.getString(parameterMap,"p_p_auth");
      printWriter.write(portletAuthenticationToken);
    }
  }
;
  properties=new Hashtable<>();
  setUpPortlet(testPortlet,properties,TEST_PORTLET_ID);
  HttpServletRequest httpServletRequest=getHttpServletRequest();
  PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.RESOURCE_PHASE);
  Map<String,List<String>> responseMap=request(portletURL.toString());
  String portletAuthenticationToken=getString(responseMap,"body");
  List<String> cookies=responseMap.get("Set-Cookie");
  map.clear();
  portletURL=new PortletURLImpl(httpServletRequest,testTargetPortletId,layout.getPlid(),PortletRequest.RESOURCE_PHASE);
  portletURL.setWindowState(WindowState.MAXIMIZED);
  String url=portletURL.toString();
  url=HttpUtil.setParameter(url,"p_p_auth",portletAuthenticationToken);
  Map<String,List<String>> headers=new HashMap<>();
  headers.put("Cookie",cookies);
  responseMap=request(url,headers);
  Assert.assertEquals("200",getString(responseMap,"code"));
  Assert.assertTrue(map.containsKey("serveResource"));
}
