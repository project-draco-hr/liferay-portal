{
  final String testTargetPortletId="testTargetPortletId";
  Dictionary<String,Object> properties=new HashMapDictionary<>();
  properties.put("com.liferay.portlet.add-default-resource",Boolean.TRUE);
  properties.put("com.liferay.portlet.system",Boolean.TRUE);
  TestPortlet testTargetPortlet=new TestPortlet();
  setUpPortlet(testTargetPortlet,properties,testTargetPortletId,false);
  testPortlet=new TestPortlet(){
    @Override public void serveResource(    ResourceRequest resourceRequest,    ResourceResponse resourceResponse) throws IOException {
      PrintWriter printWriter=resourceResponse.getWriter();
      PortletURL portletURL=PortletURLFactoryUtil.create(resourceRequest,testTargetPortletId,layout.getPlid(),PortletRequest.RENDER_PHASE);
      String queryString=HttpUtil.getQueryString(portletURL.toString());
      Map<String,String[]> parameterMap=HttpUtil.getParameterMap(queryString);
      String portletAuthenticationToken=MapUtil.getString(parameterMap,"p_p_auth");
      printWriter.write(portletAuthenticationToken);
    }
  }
;
  properties=new HashMapDictionary<>();
  setUpPortlet(testPortlet,properties,TEST_PORTLET_ID);
  HttpServletRequest httpServletRequest=PortletContainerTestUtil.getHttpServletRequest(group,layout);
  PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.RESOURCE_PHASE);
  Response response=PortletContainerTestUtil.request(portletURL.toString());
  testTargetPortlet.reset();
  portletURL=new PortletURLImpl(httpServletRequest,testTargetPortletId,layout.getPlid(),PortletRequest.RESOURCE_PHASE);
  portletURL.setWindowState(WindowState.MAXIMIZED);
  String url=portletURL.toString();
  url=HttpUtil.setParameter(url,"p_p_auth",response.getBody());
  response=PortletContainerTestUtil.request(url,Collections.singletonMap("Cookie",response.getCookies()));
  Assert.assertEquals(200,response.getCode());
  Assert.assertTrue(testTargetPortlet.isCalledServeResource());
}
