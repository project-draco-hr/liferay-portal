{
  String s=null;
  boolean retVal=true;
  if (filter != null) {
    s=new String(filter);
    s=s.trim();
    if (s.equals("") || s.equals("*")) {
      s=null;
    }
 else {
      s=s.replaceAll("\\("," \\( ");
      s=s.replaceAll("\\)"," \\) ");
      s=s.replaceAll("~="," ~= ");
      s=s.replaceAll("<="," <= ");
      s=s.replaceAll(">="," >= ");
      s=s.replaceAll("=","= ");
      ArrayList<Integer> items=new ArrayList<Integer>();
      for (int j=0; j < s.length(); j++) {
        if ((s.charAt(j) == '=') && (j > 0)) {
          if (!(s.charAt(j - 1) == '~') && !(s.charAt(j - 1) == '<') && !(s.charAt(j - 1) == '>')) {
            items.add(new Integer(j));
          }
        }
      }
      if (items.size() > 0) {
        int offset=0;
        for (int j=0; j < items.size(); j++) {
          s=s.substring(0,(Integer)(items.get(j)) + offset) + " " + s.substring((Integer)(items.get(j)) + offset);
          offset++;
        }
      }
      s=s.replaceAll("\\s+"," ");
      s=s.trim();
    }
  }
  if (retVal == true) {
    if (s != null) {
      if (!(s.startsWith("(")) || (!(s.endsWith(")")))) {
        retVal=false;
      }
    }
  }
  if (retVal == true) {
    if (s != null) {
      int i=0;
      for (int j=0; j < s.length(); j++) {
        if (s.charAt(j) == '(') {
          i++;
        }
 else         if (s.charAt(j) == ')') {
          i--;
        }
        if (i < 0) {
          retVal=false;
        }
      }
      if (i != 0) {
        retVal=false;
      }
    }
  }
  String[] filtertype={"=","~=","<=",">="};
  if (retVal == true) {
    if (s != null) {
      int i=0;
      StringTokenizer st=new StringTokenizer(s);
      while (st.hasMoreTokens()) {
        String t=st.nextToken();
        if ((t.equals(filtertype[0])) || (t.equals(filtertype[1])) || (t.equals(filtertype[2]))|| (t.equals(filtertype[3]))) {
          i++;
        }
 else {
          i=0;
        }
        if (i > 1) {
          retVal=false;
        }
      }
    }
  }
  if (retVal == true) {
    if (s != null) {
      int i=0;
      StringTokenizer st=new StringTokenizer(s);
      while (st.hasMoreTokens()) {
        String t=st.nextToken();
        if (t.equals("(")) {
          i++;
        }
 else {
          if (i > 0) {
            if ((t.equals(filtertype[0])) || (t.equals(filtertype[1])) || (t.equals(filtertype[2]))|| (t.equals(filtertype[3]))) {
              retVal=false;
            }
          }
          i=0;
        }
      }
    }
  }
  if (retVal == true) {
    if (s != null) {
      int j=0;
      int k=0;
      StringTokenizer st=new StringTokenizer(s);
      while (st.hasMoreTokens()) {
        String t=st.nextToken();
        if (t.equals("(")) {
          j=0;
          k=0;
        }
 else         if (t.equals(")")) {
          if ((k == 0) && (j == 0)) {
            retVal=false;
          }
          k++;
        }
 else         if ((t.equals(filtertype[0])) || (t.equals(filtertype[1])) || (t.equals(filtertype[2]))|| (t.equals(filtertype[3]))) {
          j++;
        }
 else {
          if (j == 0) {
            if ((t.toUpperCase().equals("NULL")) || (t.toUpperCase().equals("NUL"))) {
              retVal=false;
            }
          }
        }
      }
    }
  }
  return retVal;
}
