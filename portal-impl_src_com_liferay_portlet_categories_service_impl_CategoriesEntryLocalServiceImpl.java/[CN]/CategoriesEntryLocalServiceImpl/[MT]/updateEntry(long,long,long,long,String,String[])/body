{
  CategoriesEntry entry=categoriesEntryPersistence.findByPrimaryKey(entryId);
  entry.setModifiedDate(new Date());
  categoriesVocabularyPersistence.findByPrimaryKey(vocabularyId);
  entry.setVocabularyId(vocabularyId);
  name=name.trim();
  validate(parentEntryId,entryId,name);
  entry.setName(name);
  entry.setParentEntryId(parentEntryId);
  categoriesEntryPersistence.update(entry,false);
  Set<Long> newProperties=new HashSet<Long>();
  List<CategoriesProperty> oldProperties=categoriesPropertyPersistence.findByEntryId(entryId);
  for (int i=0; i < properties.length; i++) {
    String[] property=StringUtil.split(properties[i],StringPool.COLON);
    long propertyId=0;
    if (property.length > 0) {
      propertyId=GetterUtil.getLong(property[0]);
    }
    String key=StringPool.BLANK;
    if (property.length > 1) {
      key=GetterUtil.getString(property[1]);
    }
    String value=StringPool.BLANK;
    if (property.length > 2) {
      value=GetterUtil.getString(property[2]);
    }
    if (propertyId == 0) {
      if (Validator.isNotNull(key)) {
        categoriesPropertyLocalService.addProperty(userId,entryId,key,value);
      }
    }
 else {
      if (Validator.isNull(key)) {
        categoriesPropertyLocalService.deleteProperty(propertyId);
      }
 else {
        categoriesPropertyLocalService.updateProperty(propertyId,key,value);
        newProperties.add(propertyId);
      }
    }
  }
  for (  CategoriesProperty property : oldProperties) {
    if (!newProperties.contains(property.getPropertyId())) {
      categoriesPropertyLocalService.deleteProperty(property);
    }
  }
  return entry;
}
