{
  final DefaultNoticeableFuture<Map<Path,Path>> defaultNoticeableFuture=new DefaultNoticeableFuture<Map<Path,Path>>();
  if (pathMap.isEmpty()) {
    defaultNoticeableFuture.set(pathMap);
    return defaultNoticeableFuture;
  }
  final Map<Path,Path> resultPathMap=new ConcurrentHashMap<>();
  final AtomicInteger counter=new AtomicInteger(pathMap.size());
  for (  Map.Entry<Path,Path> entry : pathMap.entrySet()) {
    final Path remoteFilePath=entry.getKey();
    NoticeableFuture<Path> noticeableFuture=getFile(channel,remoteFilePath,entry.getValue(),deleteAfterFetch);
    noticeableFuture.addFutureListener(new BaseFutureListener<Path>(){
      @Override public void completeWithCancel(      Future<Path> future){
        defaultNoticeableFuture.cancel(true);
      }
      @Override public void completeWithException(      Future<Path> future,      Throwable throwable){
        defaultNoticeableFuture.setException(throwable);
      }
      @Override public void completeWithResult(      Future<Path> future,      Path localFilePath){
        if (localFilePath != null) {
          resultPathMap.put(remoteFilePath,localFilePath);
        }
        if (counter.decrementAndGet() <= 0) {
          defaultNoticeableFuture.set(resultPathMap);
        }
      }
    }
);
  }
  return defaultNoticeableFuture;
}
