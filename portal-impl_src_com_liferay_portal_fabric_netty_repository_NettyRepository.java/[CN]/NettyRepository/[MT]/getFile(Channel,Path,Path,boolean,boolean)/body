{
  if (_log.isDebugEnabled()) {
    _log.debug("Fetching remote file " + remoteFilePath);
  }
  final Path cachedLocalFilePath=pathMap.get(remoteFilePath);
  final DefaultNoticeableFuture<FileResponse> defaultNoticeableFuture=new DefaultNoticeableFuture<>();
  NoticeableFuture<FileResponse> noticeableFuture=asyncBroker.post(remoteFilePath,defaultNoticeableFuture);
  if (noticeableFuture == null) {
    noticeableFuture=defaultNoticeableFuture;
    NettyUtil.scheduleCancellation(channel,defaultNoticeableFuture,getFileTimeout);
    ChannelFuture channelFuture=channel.writeAndFlush(new FileRequest(remoteFilePath,getLastModifiedTime(cachedLocalFilePath),deleteAfterFetch));
    channelFuture.addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture channelFuture){
        if (channelFuture.isSuccess()) {
          return;
        }
        if (channelFuture.isCancelled()) {
          defaultNoticeableFuture.cancel(true);
          return;
        }
        Throwable throwable=new IOException("Unable to fetch remote file " + remoteFilePath,channelFuture.cause());
        if (!asyncBroker.takeWithException(remoteFilePath,throwable)) {
          _log.error("Unable to place exception because no future " + "exists with ID " + remoteFilePath,throwable);
        }
      }
    }
);
  }
  return new NoticeableFutureConverter<Path,FileResponse>(noticeableFuture){
    @Override protected Path convert(    FileResponse fileResponse) throws IOException {
      if (fileResponse.isFileNotFound()) {
        if (_log.isWarnEnabled()) {
          _log.warn("Remote file " + remoteFilePath + " is not found");
        }
        return null;
      }
      if (fileResponse.isFileNotModified()) {
        if (_log.isDebugEnabled()) {
          _log.debug("Remote file " + remoteFilePath + " is not modified, use cached local file "+ cachedLocalFilePath);
        }
        return cachedLocalFilePath;
      }
      Path targetLocalFilePath=localFilePath;
synchronized (fileResponse) {
        Path recheckCacheLocalFilePath=pathMap.get(remoteFilePath);
        if (recheckCacheLocalFilePath != null) {
          targetLocalFilePath=recheckCacheLocalFilePath;
        }
        Path tempLocalFilePath=fileResponse.getLocalFile();
        if (tempLocalFilePath.startsWith(repositoryPath)) {
          Files.copy(fileResponse.getLocalFile(),targetLocalFilePath,StandardCopyOption.REPLACE_EXISTING);
        }
 else {
          Files.move(fileResponse.getLocalFile(),targetLocalFilePath,StandardCopyOption.REPLACE_EXISTING);
        }
        if (populateCache) {
          pathMap.put(remoteFilePath,targetLocalFilePath);
        }
        fileResponse.setLocalFile(targetLocalFilePath);
      }
      if (_log.isDebugEnabled()) {
        _log.debug("Fetched remote file " + remoteFilePath + " to "+ targetLocalFilePath);
      }
      return targetLocalFilePath;
    }
  }
;
}
