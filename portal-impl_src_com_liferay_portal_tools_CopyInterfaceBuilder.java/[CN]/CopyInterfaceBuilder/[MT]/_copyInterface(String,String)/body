{
  JavaClass javaClass=_getJavaClass(parentDir,srcFile);
  JavaMethod[] methods=javaClass.getMethods();
  Arrays.sort(methods,new JavaMethodComparator());
  StringBuilder sb=new StringBuilder();
  sb.append("package " + javaClass.getPackage().getName() + ";");
  sb.append("[$IMPORTS$]");
  sb.append("public class Copy" + javaClass.getName() + " implements "+ javaClass.getName()+ " {");
  String varName="_" + TextFormatter.format(javaClass.getName(),TextFormatter.I);
  Set<String> imports=new TreeSet<String>();
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (javaMethod.isPublic()) {
      String returnValueName=javaMethod.getReturns().getValue();
      imports.add(returnValueName);
      sb.append("public " + javaMethod.getReturns().getJavaClass().getName() + _getDimensions(javaMethod.getReturns())+ " "+ methodName+ "(");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sb.append(javaParameter.getType().getJavaClass().getName() + _getDimensions(javaParameter.getType()) + " "+ javaParameter.getName());
        imports.add(javaParameter.getType().getValue());
        if ((j + 1) != parameters.length) {
          sb.append(", ");
        }
      }
      sb.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      Set<String> newExceptions=new LinkedHashSet<String>();
      for (int j=0; j < thrownExceptions.length; j++) {
        Type thrownException=thrownExceptions[j];
        newExceptions.add(thrownException.getJavaClass().getName());
        imports.add(thrownException.getValue());
      }
      if (newExceptions.size() > 0) {
        sb.append(" throws ");
        int count=0;
        for (        String newException : newExceptions) {
          sb.append(newException);
          if (count < newExceptions.size() - 1) {
            sb.append(", ");
          }
          count++;
        }
      }
      sb.append("{");
      if (!returnValueName.equals("void")) {
        sb.append("return ");
      }
      sb.append(varName + "." + methodName+ "(");
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sb.append(javaParameter.getName());
        if ((j + 1) != parameters.length) {
          sb.append(", ");
        }
      }
      sb.append(");");
      sb.append("}");
    }
  }
  sb.append("private " + javaClass.getName() + " "+ varName+ ";");
  sb.append("}");
  String content=sb.toString();
  sb=new StringBuilder();
  for (  String importClass : imports) {
    if (!importClass.equals("boolean") && !importClass.equals("double") && !importClass.equals("int")&& !importClass.equals("long")&& !importClass.equals("short")&& !importClass.equals("void")) {
      sb.append("import " + importClass + ";");
    }
  }
  content=StringUtil.replace(content,"[$IMPORTS$]",sb.toString());
  File file=new File(parentDir + "/" + StringUtil.replace(javaClass.getPackage().getName(),".","/")+ "/Copy"+ javaClass.getName()+ ".java");
  ServiceBuilder.writeFile(file,content);
}
