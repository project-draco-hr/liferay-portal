{
  JavaClass javaClass=_getJavaClass(parentDir,srcFile);
  JavaMethod[] methods=javaClass.getMethods();
  Arrays.sort(methods,new JavaMethodComparator());
  StringBundler sb=new StringBundler();
  sb.append("package ");
  sb.append(javaClass.getPackage().getName());
  sb.append(";");
  sb.append("[$IMPORTS$]");
  sb.append("public class Copy");
  sb.append(javaClass.getName());
  sb.append(" implements ");
  sb.append(javaClass.getName());
  sb.append(" {");
  String varName="_" + TextFormatter.format(javaClass.getName(),TextFormatter.I);
  Set<String> imports=new TreeSet<String>();
  for (int i=0; i < methods.length; i++) {
    JavaMethod javaMethod=methods[i];
    String methodName=javaMethod.getName();
    if (javaMethod.isPublic()) {
      String returnValueName=javaMethod.getReturns().getValue();
      imports.add(returnValueName);
      sb.append("public ");
      sb.append(javaMethod.getReturns().getJavaClass().getName());
      sb.append(_getDimensions(javaMethod.getReturns()));
      sb.append(" ");
      sb.append(methodName);
      sb.append("(");
      JavaParameter[] parameters=javaMethod.getParameters();
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sb.append(javaParameter.getType().getJavaClass().getName());
        sb.append(_getDimensions(javaParameter.getType()));
        sb.append(" ");
        sb.append(javaParameter.getName());
        sb.append(", ");
        imports.add(javaParameter.getType().getValue());
      }
      if (parameters.length > 0) {
        sb.setIndex(sb.index() - 1);
      }
      sb.append(")");
      Type[] thrownExceptions=javaMethod.getExceptions();
      Set<String> newExceptions=new LinkedHashSet<String>();
      for (int j=0; j < thrownExceptions.length; j++) {
        Type thrownException=thrownExceptions[j];
        newExceptions.add(thrownException.getJavaClass().getName());
        imports.add(thrownException.getValue());
      }
      if (newExceptions.size() > 0) {
        sb.append(" throws ");
        for (        String newException : newExceptions) {
          sb.append(newException);
          sb.append(", ");
        }
        sb.setIndex(sb.index() - 1);
      }
      sb.append("{");
      if (!returnValueName.equals("void")) {
        sb.append("return ");
      }
      sb.append(varName);
      sb.append(".");
      sb.append(methodName);
      sb.append("(");
      for (int j=0; j < parameters.length; j++) {
        JavaParameter javaParameter=parameters[j];
        sb.append(javaParameter.getName());
        sb.append(", ");
      }
      if (parameters.length > 0) {
        sb.setIndex(sb.index() - 1);
      }
      sb.append(");");
      sb.append("}");
    }
  }
  sb.append("private ");
  sb.append(javaClass.getName());
  sb.append(" ");
  sb.append(varName);
  sb.append(";");
  sb.append("}");
  String content=sb.toString();
  sb=new StringBundler(imports.size() * 3);
  for (  String importClass : imports) {
    if (!importClass.equals("boolean") && !importClass.equals("double") && !importClass.equals("int")&& !importClass.equals("long")&& !importClass.equals("short")&& !importClass.equals("void")) {
      sb.append("import ");
      sb.append(importClass);
      sb.append(";");
    }
  }
  content=StringUtil.replace(content,"[$IMPORTS$]",sb.toString());
  File file=new File(parentDir + "/" + StringUtil.replace(javaClass.getPackage().getName(),".","/")+ "/Copy"+ javaClass.getName()+ ".java");
  ServiceBuilder.writeFile(file,content);
}
