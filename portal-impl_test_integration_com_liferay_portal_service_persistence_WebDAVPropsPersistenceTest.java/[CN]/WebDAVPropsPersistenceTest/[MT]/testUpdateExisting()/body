{
  long pk=ServiceTestUtil.nextLong();
  WebDAVProps newWebDAVProps=_persistence.create(pk);
  newWebDAVProps.setCompanyId(ServiceTestUtil.nextLong());
  newWebDAVProps.setCreateDate(ServiceTestUtil.nextDate());
  newWebDAVProps.setModifiedDate(ServiceTestUtil.nextDate());
  newWebDAVProps.setClassNameId(ServiceTestUtil.nextLong());
  newWebDAVProps.setClassPK(ServiceTestUtil.nextLong());
  newWebDAVProps.setProps(ServiceTestUtil.randomString());
  _persistence.update(newWebDAVProps,false);
  WebDAVProps existingWebDAVProps=_persistence.findByPrimaryKey(newWebDAVProps.getPrimaryKey());
  Assert.assertEquals(existingWebDAVProps.getWebDavPropsId(),newWebDAVProps.getWebDavPropsId());
  Assert.assertEquals(existingWebDAVProps.getCompanyId(),newWebDAVProps.getCompanyId());
  Assert.assertEquals(Time.getShortTimestamp(existingWebDAVProps.getCreateDate()),Time.getShortTimestamp(newWebDAVProps.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingWebDAVProps.getModifiedDate()),Time.getShortTimestamp(newWebDAVProps.getModifiedDate()));
  Assert.assertEquals(existingWebDAVProps.getClassNameId(),newWebDAVProps.getClassNameId());
  Assert.assertEquals(existingWebDAVProps.getClassPK(),newWebDAVProps.getClassPK());
  Assert.assertEquals(existingWebDAVProps.getProps(),newWebDAVProps.getProps());
}
