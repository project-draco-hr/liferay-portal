{
  long pk=RandomTestUtil.nextLong();
  WebDAVProps newWebDAVProps=_persistence.create(pk);
  newWebDAVProps.setMvccVersion(RandomTestUtil.nextLong());
  newWebDAVProps.setCompanyId(RandomTestUtil.nextLong());
  newWebDAVProps.setCreateDate(RandomTestUtil.nextDate());
  newWebDAVProps.setModifiedDate(RandomTestUtil.nextDate());
  newWebDAVProps.setClassNameId(RandomTestUtil.nextLong());
  newWebDAVProps.setClassPK(RandomTestUtil.nextLong());
  newWebDAVProps.setProps(RandomTestUtil.randomString());
  _models.add(_persistence.update(newWebDAVProps));
  WebDAVProps existingWebDAVProps=_persistence.findByPrimaryKey(newWebDAVProps.getPrimaryKey());
  Assert.assertEquals(existingWebDAVProps.getMvccVersion(),newWebDAVProps.getMvccVersion());
  Assert.assertEquals(existingWebDAVProps.getWebDavPropsId(),newWebDAVProps.getWebDavPropsId());
  Assert.assertEquals(existingWebDAVProps.getCompanyId(),newWebDAVProps.getCompanyId());
  Assert.assertEquals(Time.getShortTimestamp(existingWebDAVProps.getCreateDate()),Time.getShortTimestamp(newWebDAVProps.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingWebDAVProps.getModifiedDate()),Time.getShortTimestamp(newWebDAVProps.getModifiedDate()));
  Assert.assertEquals(existingWebDAVProps.getClassNameId(),newWebDAVProps.getClassNameId());
  Assert.assertEquals(existingWebDAVProps.getClassPK(),newWebDAVProps.getClassPK());
  Assert.assertEquals(existingWebDAVProps.getProps(),newWebDAVProps.getProps());
}
