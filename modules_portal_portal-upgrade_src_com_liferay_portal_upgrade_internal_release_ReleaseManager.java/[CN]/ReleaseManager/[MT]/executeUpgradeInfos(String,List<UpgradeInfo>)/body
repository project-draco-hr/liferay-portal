{
  OutputStreamContainerFactory outputStreamContainerFactory=_outputStreamContainerFactoryTracker.getOutputStreamContainerFactory();
  OutputStreamContainer outputStreamContainer=outputStreamContainerFactory.create("upgrade-" + bundleSymbolicName);
  final OutputStream outputStream=outputStreamContainer.getOutputStream();
  Runnable runnable=new Runnable(){
    @Override public void run(){
      for (      UpgradeInfo upgradeInfo : upgradeInfos) {
        UpgradeStep upgradeStep=upgradeInfo.getUpgradeStep();
        try {
          upgradeStep.upgrade(new DBProcessContext(){
            @Override public DBContext getDBContext(){
              return new DBContext();
            }
            @Override public OutputStream getOutputStream(){
              return outputStream;
            }
          }
);
          _releaseLocalService.updateRelease(bundleSymbolicName,upgradeInfo.getToVersionString(),upgradeInfo.getFromVersionString());
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
;
  RunnableUtil.runWithSwappedSystemOut(runnable,outputStream);
  try {
    outputStream.close();
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
  Release release=_releaseLocalService.fetchRelease(bundleSymbolicName);
  if (release != null) {
    _releasePublisher.publish(release);
  }
}
