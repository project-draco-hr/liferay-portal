{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long messageId=ParamUtil.getLong(actionRequest,"messageId");
  String splitThreadSubject=ParamUtil.getString(actionRequest,"splitThreadSubject");
  ServiceContext serviceContext=ServiceContextFactory.getInstance(MBThread.class.getName(),actionRequest);
  MBMessage message=_mbMessageLocalService.getMessage(messageId);
  long oldParentMessageId=message.getParentMessageId();
  MBThread newThread=_mbThreadService.splitThread(messageId,splitThreadSubject,serviceContext);
  boolean addExplanationPost=ParamUtil.getBoolean(actionRequest,"addExplanationPost");
  if (addExplanationPost) {
    String subject=ParamUtil.getString(actionRequest,"subject");
    String body=ParamUtil.getString(actionRequest,"body");
    MBGroupServiceSettings mbGroupServiceSettings=MBGroupServiceSettings.getInstance(themeDisplay.getScopeGroupId());
    String layoutFullURL=PortalUtil.getLayoutFullURL(themeDisplay);
    String newThreadURL=layoutFullURL + "/-/message_boards/view_message/" + message.getMessageId();
    body=StringUtil.replace(body,MBThreadConstants.NEW_THREAD_URL,newThreadURL);
    serviceContext.setAddGroupPermissions(true);
    serviceContext.setAddGuestPermissions(true);
    _mbMessageService.addMessage(oldParentMessageId,subject,body,mbGroupServiceSettings.getMessageFormat(),Collections.<ObjectValuePair<String,InputStream>>emptyList(),false,MBThreadConstants.PRIORITY_NOT_GIVEN,message.getAllowPingbacks(),serviceContext);
  }
  PortletURL portletURL=((ActionResponseImpl)actionResponse).createRenderURL();
  portletURL.setParameter("mvcRenderCommandName","/message_boards/view_message");
  portletURL.setParameter("messageId",String.valueOf(newThread.getRootMessageId()));
  actionResponse.sendRedirect(portletURL.toString());
}
