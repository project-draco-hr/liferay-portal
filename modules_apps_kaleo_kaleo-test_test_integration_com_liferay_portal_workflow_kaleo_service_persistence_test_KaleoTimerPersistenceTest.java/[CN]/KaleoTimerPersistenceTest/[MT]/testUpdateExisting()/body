{
  long pk=RandomTestUtil.nextLong();
  KaleoTimer newKaleoTimer=_persistence.create(pk);
  newKaleoTimer.setGroupId(RandomTestUtil.nextLong());
  newKaleoTimer.setCompanyId(RandomTestUtil.nextLong());
  newKaleoTimer.setUserId(RandomTestUtil.nextLong());
  newKaleoTimer.setUserName(RandomTestUtil.randomString());
  newKaleoTimer.setCreateDate(RandomTestUtil.nextDate());
  newKaleoTimer.setModifiedDate(RandomTestUtil.nextDate());
  newKaleoTimer.setKaleoClassName(RandomTestUtil.randomString());
  newKaleoTimer.setKaleoClassPK(RandomTestUtil.nextLong());
  newKaleoTimer.setKaleoDefinitionId(RandomTestUtil.nextLong());
  newKaleoTimer.setName(RandomTestUtil.randomString());
  newKaleoTimer.setBlocking(RandomTestUtil.randomBoolean());
  newKaleoTimer.setDescription(RandomTestUtil.randomString());
  newKaleoTimer.setDuration(RandomTestUtil.nextDouble());
  newKaleoTimer.setScale(RandomTestUtil.randomString());
  newKaleoTimer.setRecurrenceDuration(RandomTestUtil.nextDouble());
  newKaleoTimer.setRecurrenceScale(RandomTestUtil.randomString());
  _kaleoTimers.add(_persistence.update(newKaleoTimer));
  KaleoTimer existingKaleoTimer=_persistence.findByPrimaryKey(newKaleoTimer.getPrimaryKey());
  Assert.assertEquals(existingKaleoTimer.getKaleoTimerId(),newKaleoTimer.getKaleoTimerId());
  Assert.assertEquals(existingKaleoTimer.getGroupId(),newKaleoTimer.getGroupId());
  Assert.assertEquals(existingKaleoTimer.getCompanyId(),newKaleoTimer.getCompanyId());
  Assert.assertEquals(existingKaleoTimer.getUserId(),newKaleoTimer.getUserId());
  Assert.assertEquals(existingKaleoTimer.getUserName(),newKaleoTimer.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoTimer.getCreateDate()),Time.getShortTimestamp(newKaleoTimer.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoTimer.getModifiedDate()),Time.getShortTimestamp(newKaleoTimer.getModifiedDate()));
  Assert.assertEquals(existingKaleoTimer.getKaleoClassName(),newKaleoTimer.getKaleoClassName());
  Assert.assertEquals(existingKaleoTimer.getKaleoClassPK(),newKaleoTimer.getKaleoClassPK());
  Assert.assertEquals(existingKaleoTimer.getKaleoDefinitionId(),newKaleoTimer.getKaleoDefinitionId());
  Assert.assertEquals(existingKaleoTimer.getName(),newKaleoTimer.getName());
  Assert.assertEquals(existingKaleoTimer.getBlocking(),newKaleoTimer.getBlocking());
  Assert.assertEquals(existingKaleoTimer.getDescription(),newKaleoTimer.getDescription());
  AssertUtils.assertEquals(existingKaleoTimer.getDuration(),newKaleoTimer.getDuration());
  Assert.assertEquals(existingKaleoTimer.getScale(),newKaleoTimer.getScale());
  AssertUtils.assertEquals(existingKaleoTimer.getRecurrenceDuration(),newKaleoTimer.getRecurrenceDuration());
  Assert.assertEquals(existingKaleoTimer.getRecurrenceScale(),newKaleoTimer.getRecurrenceScale());
}
