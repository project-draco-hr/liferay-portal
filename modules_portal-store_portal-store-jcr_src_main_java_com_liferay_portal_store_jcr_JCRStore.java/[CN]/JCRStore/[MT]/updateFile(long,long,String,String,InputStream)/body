{
  Session session=null;
  try {
    session=_jcrFactoryWrapper.createSession();
    Workspace workspace=session.getWorkspace();
    VersionManager versionManager=workspace.getVersionManager();
    Node rootNode=getRootNode(session,companyId);
    Node repositoryNode=getFolderNode(rootNode,repositoryId);
    if (fileName.contains(StringPool.SLASH)) {
      String path=fileName.substring(0,fileName.lastIndexOf(StringPool.SLASH));
      fileName=fileName.substring(path.length() + 1);
      repositoryNode=getFolderNode(repositoryNode,path);
    }
    Node fileNode=repositoryNode.getNode(fileName);
    Node contentNode=fileNode.getNode(JCRConstants.JCR_CONTENT);
    versionManager.checkout(contentNode.getPath());
    contentNode.setProperty(JCRConstants.JCR_MIME_TYPE,ContentTypes.TEXT_PLAIN);
    ValueFactory valueFactory=session.getValueFactory();
    Binary binary=valueFactory.createBinary(is);
    contentNode.setProperty(JCRConstants.JCR_DATA,binary);
    contentNode.setProperty(JCRConstants.JCR_LAST_MODIFIED,Calendar.getInstance());
    session.save();
    Version version=versionManager.checkin(contentNode.getPath());
    VersionHistory versionHistory=versionManager.getVersionHistory(contentNode.getPath());
    if (versionHistory.hasVersionLabel(versionLabel)) {
      throw new DuplicateFileException(companyId,repositoryId,fileName,versionLabel);
    }
    versionHistory.addVersionLabel(version.getName(),versionLabel,_jcrStoreConfiguration.moveVersionLabels());
  }
 catch (  PathNotFoundException pnfe) {
    throw new NoSuchFileException(companyId,repositoryId,fileName,versionLabel,pnfe);
  }
catch (  RepositoryException re) {
    throw new SystemException(re);
  }
 finally {
    _jcrFactoryWrapper.closeSession(session);
  }
}
