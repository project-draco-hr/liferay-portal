{
  StopWatch stopWatch=new StopWatch();
  if (_log.isDebugEnabled()) {
    stopWatch.start();
    if (isNew) {
      _log.debug("Updating new user " + user + " from LDAP server "+ ldapServerId+ " to company "+ companyId);
    }
 else {
      _log.debug("Updating existing user " + user + " from LDAP server "+ ldapServerId+ " to company "+ companyId);
    }
  }
  Date modifiedDate=null;
  boolean passwordReset=ldapUser.isPasswordReset();
  if (_ldapSettings.isExportEnabled(companyId)) {
    passwordReset=user.isPasswordReset();
  }
  try {
    if (Validator.isNotNull(modifyTimestamp)) {
      modifiedDate=LDAPUtil.parseDate(modifyTimestamp);
      if (modifiedDate.equals(user.getModifiedDate())) {
        if (ldapUser.isAutoPassword()) {
          if (_log.isDebugEnabled()) {
            _log.debug("Skipping user " + user.getEmailAddress() + " because he is already synchronized");
          }
          return user;
        }
        _userLocalService.updatePassword(user.getUserId(),password,password,passwordReset,true);
        if (_log.isDebugEnabled()) {
          _log.debug("User " + user.getEmailAddress() + " is already synchronized, but updated "+ "password to avoid a blank value");
        }
        return user;
      }
    }
 else     if (!isNew) {
      if (_log.isInfoEnabled()) {
        _log.info("Skipping user " + user.getEmailAddress() + " because the LDAP entry was never modified");
      }
      return user;
    }
  }
 catch (  ParseException pe) {
    if (_log.isDebugEnabled()) {
      _log.debug("Unable to parse LDAP modify timestamp " + modifyTimestamp,pe);
    }
  }
  LDAPServerConfiguration ldapServerConfiguration=_ldapServerConfigurationProvider.getConfiguration(companyId,ldapServerId);
  String[] userIgnoreAttributes=ldapServerConfiguration.userIgnoreAttributes();
  Set<String> ldapUserIgnoreAttributes=new HashSet<>(Arrays.asList(userIgnoreAttributes));
  LDAPImportConfiguration ldapImportConfiguration=_ldapImportConfigurationProvider.getConfiguration(companyId);
  if (!ldapImportConfiguration.importUserPasswordEnabled()) {
    password=ldapImportConfiguration.importUserPasswordDefault();
    if (StringUtil.equalsIgnoreCase(password,_USER_PASSWORD_SCREEN_NAME)) {
      password=ldapUser.getScreenName();
    }
  }
  if (Validator.isNull(ldapUser.getScreenName()) || ldapUser.isAutoScreenName()) {
    ldapUser.setScreenName(user.getScreenName());
  }
  if (ldapUser.isUpdatePassword()) {
    _userLocalService.updatePassword(user.getUserId(),password,password,passwordReset,true);
  }
  Contact ldapContact=ldapUser.getContact();
  updateLDAPUser(ldapUser.getUser(),ldapContact,user,userMappings,contactMappings,ldapUserIgnoreAttributes);
  Calendar birthdayCal=CalendarFactoryUtil.getCalendar();
  birthdayCal.setTime(ldapContact.getBirthday());
  int birthdayMonth=birthdayCal.get(Calendar.MONTH);
  int birthdayDay=birthdayCal.get(Calendar.DAY_OF_MONTH);
  int birthdayYear=birthdayCal.get(Calendar.YEAR);
  user=_userLocalService.updateUser(user.getUserId(),password,StringPool.BLANK,StringPool.BLANK,passwordReset,ldapUser.getReminderQueryQuestion(),ldapUser.getReminderQueryAnswer(),ldapUser.getScreenName(),ldapUser.getEmailAddress(),ldapUser.getFacebookId(),ldapUser.getOpenId(),(ldapUser.getPortraitId() > 0),ldapUser.getPortraitBytes(),ldapUser.getLanguageId(),ldapUser.getTimeZoneId(),ldapUser.getGreeting(),ldapUser.getComments(),ldapUser.getFirstName(),ldapUser.getMiddleName(),ldapUser.getLastName(),ldapUser.getPrefixId(),ldapUser.getSuffixId(),ldapUser.isMale(),birthdayMonth,birthdayDay,birthdayYear,ldapUser.getSmsSn(),ldapUser.getFacebookSn(),ldapUser.getJabberSn(),ldapUser.getSkypeSn(),ldapUser.getTwitterSn(),ldapUser.getJobTitle(),ldapUser.getGroupIds(),ldapUser.getOrganizationIds(),ldapUser.getRoleIds(),ldapUser.getUserGroupRoles(),ldapUser.getUserGroupIds(),ldapUser.getServiceContext());
  if (modifiedDate != null) {
    user=_userLocalService.updateModifiedDate(user.getUserId(),modifiedDate);
  }
  user=_userLocalService.updateStatus(user.getUserId(),ldapUser.getStatus(),new ServiceContext());
  if (_log.isDebugEnabled()) {
    _log.debug("Finished update for user " + user + " in "+ stopWatch.getTime()+ "ms");
  }
  return user;
}
