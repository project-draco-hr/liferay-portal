{
  hideDefaultSuccessMessage(actionRequest);
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  if (Validator.isNull(cmd)) {
    return;
  }
  try {
    long groupId=ParamUtil.getLong(actionRequest,"groupId");
    boolean privateLayout=ParamUtil.getBoolean(actionRequest,"privateLayout");
    long[] layoutIds=getLayoutIds(actionRequest);
    DateRange dateRange=ExportImportDateUtil.getDateRange(actionRequest,groupId,privateLayout,0,null,ExportImportDateUtil.RANGE_ALL);
    String fileName=LanguageUtil.get(actionRequest.getLocale(),"public-pages");
    if (privateLayout) {
      fileName=LanguageUtil.get(actionRequest.getLocale(),"private-pages");
    }
    fileName=fileName + StringPool.DASH + Time.getShortTimestamp();
    LayoutServiceUtil.exportLayoutsAsFileInBackground(fileName,groupId,privateLayout,layoutIds,actionRequest.getParameterMap(),dateRange.getStartDate(),dateRange.getEndDate(),fileName);
    String redirect=ParamUtil.getString(actionRequest,"redirect");
    sendRedirect(actionRequest,actionResponse,redirect);
  }
 catch (  Exception e) {
    SessionErrors.add(actionRequest,e.getClass());
    if (!(e instanceof LARFileNameException)) {
      _log.error(e,e);
      String pagesRedirect=ParamUtil.getString(actionRequest,"pagesRedirect");
      sendRedirect(actionRequest,actionResponse,pagesRedirect);
    }
  }
}
