{
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  File file=null;
  try {
    long groupId=ParamUtil.getLong(actionRequest,"groupId");
    boolean privateLayout=ParamUtil.getBoolean(actionRequest,"privateLayout");
    long[] layoutIds=getLayoutIds(groupId,privateLayout,ParamUtil.getString(actionRequest,"layoutIds"));
    String fileName=ParamUtil.getString(actionRequest,"exportFileName");
    DateRange dateRange=ExportImportUtil.getDateRange(actionRequest,groupId,-1,null,privateLayout,true);
    Date startDate=dateRange.getStartDate();
    Date endDate=dateRange.getEndDate();
    if (Validator.isNotNull(cmd)) {
      file=LayoutServiceUtil.exportLayoutsAsFile(groupId,privateLayout,layoutIds,actionRequest.getParameterMap(),startDate,endDate);
      HttpServletRequest request=PortalUtil.getHttpServletRequest(actionRequest);
      HttpServletResponse response=PortalUtil.getHttpServletResponse(actionResponse);
      ServletResponseUtil.sendFile(request,response,fileName,new FileInputStream(file),ContentTypes.APPLICATION_ZIP);
      setForward(actionRequest,ActionConstants.COMMON_NULL);
    }
 else {
      if (startDate != null) {
        actionResponse.setRenderParameter("startDate",String.valueOf(startDate.getTime()));
      }
      if (endDate != null) {
        actionResponse.setRenderParameter("endDate",String.valueOf(endDate.getTime()));
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
    SessionErrors.add(actionRequest,e.getClass());
    String pagesRedirect=ParamUtil.getString(actionRequest,"pagesRedirect");
    sendRedirect(actionRequest,actionResponse,pagesRedirect);
  }
 finally {
    FileUtil.delete(file);
  }
}
