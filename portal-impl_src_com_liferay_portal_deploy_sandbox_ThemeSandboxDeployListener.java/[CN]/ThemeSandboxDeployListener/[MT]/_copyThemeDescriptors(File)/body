{
  URL url=getClass().getResource('/' + THEME_RESOURCE_ROOT + "theme.txt");
  if (url == null) {
    throw new IOException("Theme descriptors not found.");
  }
  String urlProtocol=url.getProtocol();
  if (urlProtocol.equals("jar")) {
    String jarFileName=url.getFile();
    int ndx=jarFileName.indexOf('!');
    if ((ndx == -1) || (jarFileName.startsWith("file:/") == false)) {
      throw new IOException("Malformed URL.");
    }
    jarFileName=jarFileName.substring(6,ndx);
    ZipFile jarFile=new ZipFile(jarFileName);
    Enumeration en=jarFile.entries();
    while (en.hasMoreElements()) {
      ZipEntry entry=(ZipEntry)en.nextElement();
      String entryName=entry.getName();
      if (entryName.startsWith(THEME_RESOURCE_ROOT) == false) {
        continue;
      }
      entryName=entryName.substring(THEME_RESOURCE_ROOT.length());
      File file=new File(targetDir,entryName);
      if (entry.isDirectory()) {
        file.mkdirs();
      }
 else {
        File parent=file.getParentFile();
        if (parent != null && parent.exists() == false) {
          parent.mkdirs();
        }
        InputStream in=jarFile.getInputStream(entry);
        OutputStream out=null;
        try {
          out=new FileOutputStream(file);
          StreamUtil.transfer(in,out);
        }
  finally {
          StreamUtil.cleanUp(out);
          StreamUtil.cleanUp(in);
        }
      }
    }
  }
 else   if (urlProtocol.equals("file")) {
    File sourceDir=new File(url.getFile()).getParentFile();
    CopyTask.copyDirectory(sourceDir,targetDir,null,null,true,true);
  }
 else {
    throw new IOException("Unsupported protocol: " + urlProtocol);
  }
}
