{
  if (qName.equals("absolute-ordering")) {
    if (_othersAbsoluteOrderingSet && (_absoluteOrderingNames != null)) {
      _absoluteOrderingNames.add(Order.OTHERS);
    }
    List<String> absoluteOrderingNames=_webXMLDefinition.getAbsoluteOrderingNames();
    absoluteOrderingNames.addAll(_absoluteOrderingNames);
    _absoluteOrderingNames=null;
    _othersAbsoluteOrderingSet=false;
  }
 else   if (qName.equals("after")) {
    _after=false;
    _afterName=_name;
    _name=null;
  }
 else   if (qName.equals("async-supported")) {
    boolean asyncSupported=GetterUtil.getBoolean(_stack.pop());
    if (_filterDefinition != null) {
      _filterDefinition.setAsyncSupported(asyncSupported);
    }
 else     if (_servletDefinition != null) {
      _servletDefinition.setAsyncSupported(asyncSupported);
    }
  }
 else   if (qName.equals("before")) {
    _before=false;
    _beforeName=_name;
    _name=null;
  }
 else   if (qName.equals("context-param")) {
    _webXMLDefinition.setContextParameter(_parameterName,_parameterValue);
    _parameterName=null;
    _parameterValue=null;
  }
 else   if (qName.equals("dispatcher")) {
    String dispatcher=String.valueOf(_stack.pop());
    dispatcher=StringUtil.toUpperCase(dispatcher);
    dispatcher=dispatcher.trim();
    _filterMapping.dispatchers.add(dispatcher);
  }
 else   if (qName.equals("filter")) {
    if (_filterDefinition.getFilter() != null) {
      _webXMLDefinition.setFilterDefinition(_filterDefinition.getName(),_filterDefinition);
    }
    _filterDefinition=null;
  }
 else   if (qName.equals("filter-class")) {
    String filterClassName=String.valueOf(_stack.pop());
    Filter filter=_getFilterInstance(filterClassName.trim());
    _filterDefinition.setFilter(filter);
  }
 else   if (qName.equals("filter-mapping")) {
    Map<String,FilterDefinition> filterDefinitions=_webXMLDefinition.getFilterDefinitions();
    FilterDefinition filterDefinition=filterDefinitions.get(_filterMapping.filterName);
    if (filterDefinition != null) {
      filterDefinition.setDispatchers(_filterMapping.dispatchers);
      if (_filterMapping.servletName != null) {
        List<String> servletNames=filterDefinition.getServletNames();
        servletNames.add(_filterMapping.servletName);
      }
      filterDefinition.setURLPatterns(_filterMapping.urlPatterns);
    }
    _filterMapping=null;
  }
 else   if (qName.equals("filter-name")) {
    if (_filterMapping != null) {
      String filterName=String.valueOf(_stack.pop());
      _filterMapping.filterName=filterName.trim();
    }
 else     if (_filterDefinition != null) {
      String filterName=String.valueOf(_stack.pop());
      _filterDefinition.setName(filterName.trim());
    }
  }
 else   if (qName.equals("http-method")) {
    if (_webResourceCollection != null) {
      String httpMethod=String.valueOf(_stack.pop());
      _webResourceCollection.httpMethods.add(httpMethod.trim());
    }
  }
 else   if (qName.equals("http-method-exception")) {
    if (_webResourceCollection != null) {
      String httpMethodException=String.valueOf(_stack.pop());
      _webResourceCollection.httpMethodExceptions.add(httpMethodException.trim());
    }
  }
 else   if (qName.equals("init-param")) {
    if (_filterDefinition != null) {
      _filterDefinition.setInitParameter(_parameterName,_parameterValue);
    }
 else     if (_servletDefinition != null) {
      _servletDefinition.setInitParameter(_parameterName,_parameterValue);
    }
    _parameterName=null;
    _parameterValue=null;
  }
 else   if (qName.equals("jsp-config")) {
    _webXMLDefinition.setJspTaglibMappings(_jspConfig.mappings);
    _jspConfig=null;
  }
 else   if (qName.equals("jsp-file")) {
    String jspFile=String.valueOf(_stack.pop());
    _servletDefinition.setJSPFile(jspFile);
    _servletDefinition.setServlet(new JspServletWrapper(jspFile));
  }
 else   if (qName.equals("listener")) {
    if (_listenerDefinition.getEventListener() != null) {
      _webXMLDefinition.addListenerDefinition(_listenerDefinition);
    }
    _listenerDefinition=null;
  }
 else   if (qName.equals("listener-class")) {
    String listenerClassName=String.valueOf(_stack.pop());
    EventListener eventListener=_getListenerInstance(listenerClassName);
    _listenerDefinition.setEventListener(eventListener);
  }
 else   if (qName.equals("name")) {
    String name=String.valueOf(_stack.pop());
    if (_absoluteOrderingNames != null) {
      _absoluteOrderingNames.add(name);
    }
 else     if (!_after && !_before) {
      _webXMLDefinition.setFragmentName(name);
    }
 else {
      _name=name;
    }
  }
 else   if (qName.equals("ordering")) {
    if (_order == null) {
      return;
    }
    EnumMap<Path,String[]> routes=_order.getRoutes();
    List<String> beforeNames=new ArrayList<>(2);
    if (_beforeName != null) {
      beforeNames.add(_beforeName);
    }
    if (_othersBeforeSet) {
      beforeNames.add(Order.OTHERS);
    }
    if (ListUtil.isNotEmpty(beforeNames)) {
      routes.put(Path.BEFORE,beforeNames.toArray(new String[0]));
    }
    List<String> afterNames=new ArrayList<>(2);
    if (_afterName != null) {
      afterNames.add(_afterName);
    }
    if (_othersAfterSet) {
      afterNames.add(Order.OTHERS);
    }
    if (ListUtil.isNotEmpty(afterNames)) {
      routes.put(Path.AFTER,afterNames.toArray(new String[0]));
    }
    _order.setRoutes(routes);
    _webXMLDefinition.setOrder(_order);
    _afterName=null;
    _beforeName=null;
    _order=null;
    _othersAfterSet=false;
    _othersBeforeSet=false;
  }
 else   if (qName.equals("others")) {
    if (_absoluteOrderingNames != null) {
      _othersAbsoluteOrderingSet=true;
    }
    if (_after) {
      _othersAfterSet=true;
    }
 else     if (_before) {
      _othersBeforeSet=true;
    }
  }
 else   if (qName.equals("param-name")) {
    _parameterName=String.valueOf(_stack.pop());
    _parameterName=_parameterName.trim();
  }
 else   if (qName.equals("param-value")) {
    _parameterValue=String.valueOf(_stack.pop());
    _parameterValue=_parameterValue.trim();
  }
 else   if (qName.equals("role-name") || qName.equals("transport-guarantee")) {
    _logger.log(Logger.LOG_WARNING,qName + " from web.xml in Bundle " + _bundle+ " is not supported. This value will be ignored");
  }
 else   if (qName.equals("servlet")) {
    _webXMLDefinition.setServletDefinition(_servletDefinition.getName(),_servletDefinition);
    _servletDefinition=null;
  }
 else   if (qName.equals("servlet-class")) {
    String servletClassName=String.valueOf(_stack.pop());
    Servlet servlet=_getServletInstance(servletClassName.trim());
    _servletDefinition.setServlet(servlet);
  }
 else   if (qName.equals("servlet-mapping")) {
    Map<String,ServletDefinition> servletDefinitions=_webXMLDefinition.getServletDefinitions();
    ServletDefinition servletDefinition=servletDefinitions.get(_servletMapping.servletName);
    if (servletDefinition != null) {
      servletDefinition.setURLPatterns(_servletMapping.urlPatterns);
    }
    _servletMapping=null;
  }
 else   if (qName.equals("servlet-name")) {
    if (_filterMapping != null) {
      String servletName=String.valueOf(_stack.pop());
      _filterMapping.servletName=servletName.trim();
    }
 else     if (_servletDefinition != null) {
      String servletName=String.valueOf(_stack.pop());
      _servletDefinition.setName(servletName.trim());
    }
 else     if (_servletMapping != null) {
      String servletName=String.valueOf(_stack.pop());
      _servletMapping.servletName=servletName.trim();
    }
  }
 else   if (qName.equals("taglib")) {
    _jspConfig.mappings.put(_taglibUri,_taglibLocation);
    _taglibUri=null;
    _taglibLocation=null;
  }
 else   if (qName.equals("taglib-location")) {
    _taglibLocation=String.valueOf(_stack.pop());
  }
 else   if (qName.equals("taglib-uri")) {
    _taglibUri=String.valueOf(_stack.pop());
  }
 else   if (qName.equals("url-pattern")) {
    if (_filterMapping != null) {
      String urlPattern=String.valueOf(_stack.pop());
      _filterMapping.urlPatterns.add(urlPattern.trim());
    }
 else     if (_servletMapping != null) {
      String urlPattern=String.valueOf(_stack.pop());
      _servletMapping.urlPatterns.add(urlPattern.trim());
    }
 else     if (_webResourceCollection != null) {
      String urlPattern=String.valueOf(_stack.pop());
      _webResourceCollection.urlPatterns.add(urlPattern.trim());
    }
  }
 else   if (qName.equals("web-resource-collection")) {
    List<WebResourceCollectionDefinition> webResourceCollectionDefinitions=_webXMLDefinition.getWebResourceCollectionDefinitions();
    WebResourceCollectionDefinition definition=new WebResourceCollectionDefinition();
    definition.setName(_webResourceCollection.webResourceName);
    for (    String httpMethod : _webResourceCollection.httpMethods) {
      definition.addHttpMethod(httpMethod);
    }
    for (    String httpMethodException : _webResourceCollection.httpMethodExceptions) {
      definition.addHttpMethodException(httpMethodException);
    }
    for (    String urlPattern : _webResourceCollection.urlPatterns) {
      definition.addURLPattern(urlPattern);
    }
    webResourceCollectionDefinitions.add(definition);
    _webResourceCollection=null;
  }
 else   if (qName.equals("web-resource-name")) {
    String name=String.valueOf(_stack.pop());
    _webResourceCollection.webResourceName=name.trim();
  }
}
