{
  if (qName.equals("async-supported")) {
    boolean asyncSupported=GetterUtil.getBoolean(_stack.pop());
    if (_filterDefinition != null) {
      _filterDefinition.setAsyncSupported(asyncSupported);
    }
 else     if (_servletDefinition != null) {
      _servletDefinition.setAsyncSupported(asyncSupported);
    }
  }
 else   if (qName.equals("context-param")) {
    _webXMLDefinition.setContextParameter(_paramName,_paramValue);
    _paramName=null;
    _paramValue=null;
  }
 else   if (qName.equals("dispatcher")) {
    String dispatcher=String.valueOf(_stack.pop());
    dispatcher=StringUtil.toUpperCase(dispatcher);
    dispatcher=dispatcher.trim();
    _filterMapping.dispatchers.add(dispatcher);
  }
 else   if (qName.equals("filter")) {
    if (_filterDefinition.getFilter() != null) {
      _webXMLDefinition.setFilterDefinition(_filterDefinition.getName(),_filterDefinition);
    }
    _filterDefinition=null;
  }
 else   if (qName.equals("filter-class")) {
    String filterClassName=String.valueOf(_stack.pop());
    Filter filter=_getFilterInstance(filterClassName.trim());
    _filterDefinition.setFilter(filter);
  }
 else   if (qName.equals("filter-mapping")) {
    Map<String,FilterDefinition> filterDefinitions=_webXMLDefinition.getFilterDefinitions();
    FilterDefinition filterDefinition=filterDefinitions.get(_filterMapping.filterName);
    if (filterDefinition != null) {
      filterDefinition.setDispatchers(_filterMapping.dispatchers);
      if (_filterMapping.servletName != null) {
        List<String> servletNames=filterDefinition.getServletNames();
        servletNames.add(_filterMapping.servletName);
      }
      filterDefinition.setURLPatterns(_filterMapping.urlPatterns);
    }
    _filterMapping=null;
  }
 else   if (qName.equals("filter-name")) {
    if (_filterMapping != null) {
      String filterName=String.valueOf(_stack.pop());
      _filterMapping.filterName=filterName.trim();
    }
 else     if (_filterDefinition != null) {
      String filterName=String.valueOf(_stack.pop());
      _filterDefinition.setName(filterName.trim());
    }
  }
 else   if (qName.equals("init-param")) {
    if (_filterDefinition != null) {
      _filterDefinition.setInitParameter(_paramName,_paramValue);
    }
 else     if (_servletDefinition != null) {
      _servletDefinition.setInitParameter(_paramName,_paramValue);
    }
    _paramName=null;
    _paramValue=null;
  }
 else   if (qName.equals("jsp-config")) {
    _webXMLDefinition.setJspTaglibMappings(_jspConfig.mappings);
    _jspConfig=null;
  }
 else   if (qName.equals("jsp-file")) {
    String jspFile=String.valueOf(_stack.pop());
    _servletDefinition.setJSPFile(jspFile);
    _servletDefinition.setServlet(new JspServletWrapper(jspFile));
  }
 else   if (qName.equals("listener")) {
    if (_listenerDefinition.getEventListener() != null) {
      _webXMLDefinition.addListenerDefinition(_listenerDefinition);
    }
    _listenerDefinition=null;
  }
 else   if (qName.equals("listener-class")) {
    String listenerClassName=String.valueOf(_stack.pop());
    EventListener eventListener=_getListenerInstance(listenerClassName);
    _listenerDefinition.setEventListener(eventListener);
  }
 else   if (qName.equals("param-name")) {
    _paramName=String.valueOf(_stack.pop());
    _paramName=_paramName.trim();
  }
 else   if (qName.equals("param-value")) {
    _paramValue=String.valueOf(_stack.pop());
    _paramValue=_paramValue.trim();
  }
 else   if (qName.equals("servlet")) {
    _webXMLDefinition.setServletDefinition(_servletDefinition.getName(),_servletDefinition);
    _servletDefinition=null;
  }
 else   if (qName.equals("servlet-class")) {
    String servletClassName=String.valueOf(_stack.pop());
    Servlet servlet=_getServletInstance(servletClassName.trim());
    _servletDefinition.setServlet(servlet);
  }
 else   if (qName.equals("servlet-mapping")) {
    Map<String,ServletDefinition> servletDefinitions=_webXMLDefinition.getServletDefinitions();
    ServletDefinition servletDefinition=servletDefinitions.get(_servletMapping.servletName);
    if (servletDefinition != null) {
      servletDefinition.setURLPatterns(_servletMapping.urlPatterns);
    }
    _servletMapping=null;
  }
 else   if (qName.equals("servlet-name")) {
    if (_filterMapping != null) {
      String servletName=String.valueOf(_stack.pop());
      _filterMapping.servletName=servletName.trim();
    }
 else     if (_servletDefinition != null) {
      String servletName=String.valueOf(_stack.pop());
      _servletDefinition.setName(servletName.trim());
    }
 else     if (_servletMapping != null) {
      String servletName=String.valueOf(_stack.pop());
      _servletMapping.servletName=servletName.trim();
    }
  }
 else   if (qName.equals("taglib")) {
    _jspConfig.mappings.put(_taglibUri,_taglibLocation);
    _taglibUri=null;
    _taglibLocation=null;
  }
 else   if (qName.equals("taglib-location")) {
    _taglibLocation=String.valueOf(_stack.pop());
  }
 else   if (qName.equals("taglib-uri")) {
    _taglibUri=String.valueOf(_stack.pop());
  }
 else   if (qName.equals("after")) {
    _after=false;
    _nameAfter=_name;
    _name=null;
  }
 else   if (qName.equals("before")) {
    _before=false;
    _nameBefore=_name;
    _name=null;
  }
 else   if (qName.equals("name")) {
    String name=String.valueOf(_stack.pop());
    if (_namesAbsoluteOrdering != null) {
      _namesAbsoluteOrdering.add(name);
    }
 else     if (!_after && !_before) {
      _webXMLDefinition.setFragmentName(name);
    }
 else {
      _name=name;
    }
  }
 else   if (qName.equals("others")) {
    if (_namesAbsoluteOrdering != null) {
      _othersAbsoluteOrderingSet=true;
    }
    if (_after) {
      _othersAfterSet=true;
    }
 else     if (_before) {
      _othersBeforeSet=true;
    }
  }
 else   if (qName.equals("absolute-ordering")) {
    if (_othersAbsoluteOrderingSet && (_namesAbsoluteOrdering != null)) {
      _namesAbsoluteOrdering.add(Order.OTHERS);
    }
    _othersAbsoluteOrderingSet=false;
    List<String> absoluteOrderNames=_webXMLDefinition.getAbsoluteOrderNames();
    absoluteOrderNames.addAll(_namesAbsoluteOrdering);
    _namesAbsoluteOrdering=null;
  }
 else   if (qName.equals("ordering")) {
    if (_ordering == null) {
      return;
    }
    EnumMap<Path,String[]> routes=_ordering.getRoutes();
    List<String> namesBefore=new ArrayList<>(2);
    if (_nameBefore != null) {
      namesBefore.add(_nameBefore);
    }
    if (_othersBeforeSet) {
      namesBefore.add(Order.OTHERS);
    }
    if (ListUtil.isNotEmpty(namesBefore)) {
      routes.put(Path.BEFORE,namesBefore.toArray(new String[0]));
    }
    List<String> namesAfter=new ArrayList<>(2);
    if (_nameAfter != null) {
      namesAfter.add(_nameAfter);
    }
    if (_othersAfterSet) {
      namesAfter.add(Order.OTHERS);
    }
    if (ListUtil.isNotEmpty(namesAfter)) {
      routes.put(Path.AFTER,namesAfter.toArray(new String[0]));
    }
    _nameAfter=null;
    _nameBefore=null;
    _othersAfterSet=false;
    _othersBeforeSet=false;
    _ordering.setRoutes(routes);
    _webXMLDefinition.setOrdering(_ordering);
    _ordering=null;
  }
 else   if (qName.equals("url-pattern")) {
    if (_filterMapping != null) {
      String urlPattern=String.valueOf(_stack.pop());
      _filterMapping.urlPatterns.add(urlPattern.trim());
    }
 else     if (_servletMapping != null) {
      String urlPattern=String.valueOf(_stack.pop());
      _servletMapping.urlPatterns.add(urlPattern.trim());
    }
  }
}
