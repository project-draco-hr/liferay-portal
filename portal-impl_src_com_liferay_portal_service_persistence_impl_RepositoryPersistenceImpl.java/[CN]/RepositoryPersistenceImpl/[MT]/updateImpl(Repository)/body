{
  repository=toUnwrappedModel(repository);
  boolean isNew=repository.isNew();
  RepositoryModelImpl repositoryModelImpl=(RepositoryModelImpl)repository;
  if (Validator.isNull(repository.getUuid())) {
    String uuid=PortalUUIDUtil.generate();
    repository.setUuid(uuid);
  }
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  Date now=new Date();
  if (isNew && (repository.getCreateDate() == null)) {
    if (serviceContext == null) {
      repository.setCreateDate(now);
    }
 else {
      repository.setCreateDate(serviceContext.getCreateDate(now));
    }
  }
  if (!repositoryModelImpl.hasSetModifiedDate()) {
    if (serviceContext == null) {
      repository.setModifiedDate(now);
    }
 else {
      repository.setModifiedDate(serviceContext.getModifiedDate(now));
    }
  }
  Session session=null;
  try {
    session=openSession();
    if (repository.isNew()) {
      session.save(repository);
      repository.setNew(false);
    }
 else {
      repository=(Repository)session.merge(repository);
    }
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
  finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
  if (isNew || !RepositoryModelImpl.COLUMN_BITMASK_ENABLED) {
    finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
  }
 else {
    if ((repositoryModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{repositoryModelImpl.getOriginalUuid()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID,args);
      args=new Object[]{repositoryModelImpl.getUuid()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID,args);
    }
    if ((repositoryModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{repositoryModelImpl.getOriginalUuid(),repositoryModelImpl.getOriginalCompanyId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C,args);
      args=new Object[]{repositoryModelImpl.getUuid(),repositoryModelImpl.getCompanyId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C,args);
    }
    if ((repositoryModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_GROUPID.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{repositoryModelImpl.getOriginalGroupId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_GROUPID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_GROUPID,args);
      args=new Object[]{repositoryModelImpl.getGroupId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_GROUPID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_GROUPID,args);
    }
  }
  entityCache.putResult(RepositoryModelImpl.ENTITY_CACHE_ENABLED,RepositoryImpl.class,repository.getPrimaryKey(),repository,false);
  clearUniqueFindersCache(repositoryModelImpl);
  cacheUniqueFindersCache(repositoryModelImpl,isNew);
  repository.resetOriginalValues();
  return repository;
}
