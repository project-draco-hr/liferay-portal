{
  String tempTableName="TEMP_TABLE_" + StringUtil.randomString(4);
  try (LoggingTimer loggingTimer=new LoggingTimer()){
    runSQL("create table " + tempTableName + " (threadId LONG)");
    StringBundler sb=new StringBundler(7);
    sb.append("insert into ");
    sb.append(tempTableName);
    sb.append(" select MBThread.threadId from MBThread, MBMessage ");
    sb.append("where MBThread.threadId = MBMessage.threadId and ");
    sb.append("MBThread.categoryId = ");
    sb.append(MBCategoryConstants.DISCUSSION_CATEGORY_ID);
    sb.append(" group by MBMessage.threadId having ");
    sb.append("count(MBMessage.messageId) = 1");
    long classNameId=PortalUtil.getClassNameId(MBDiscussion.class.getName());
    sb=new StringBundler(7);
    sb.append("delete from AssetEntry where classPK in (");
    sb.append("select MBMessage.messageId from MBMessage inner join ");
    sb.append(tempTableName);
    sb.append(" on MBMessage.threadId = ");
    sb.append(tempTableName);
    sb.append(".threadId) and classNameId = ");
    sb.append(classNameId);
    runSQL(sb.toString());
    sb=new StringBundler(4);
    sb.append("delete from MBDiscussion where threadId in (");
    sb.append("select threadId from ");
    sb.append(tempTableName);
    sb.append(StringPool.CLOSE_PARENTHESIS);
    runSQL(sb.toString());
    sb=new StringBundler(4);
    sb.append("delete from MBMessage where threadId in (");
    sb.append("select threadId from ");
    sb.append(tempTableName);
    sb.append(StringPool.CLOSE_PARENTHESIS);
    runSQL(sb.toString());
    sb=new StringBundler(4);
    sb.append("delete from MBThread where threadId in (");
    sb.append("select threadId from ");
    sb.append(tempTableName);
    sb.append(StringPool.CLOSE_PARENTHESIS);
    runSQL(sb.toString());
  }
 catch (  Exception e) {
    throw new UpgradeException(e);
  }
 finally {
    runSQL("drop table " + tempTableName);
  }
}
