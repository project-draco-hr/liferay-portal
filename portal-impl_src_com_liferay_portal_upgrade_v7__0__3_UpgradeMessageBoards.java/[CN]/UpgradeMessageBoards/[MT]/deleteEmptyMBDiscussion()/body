{
  try (LoggingTimer loggingTimer=new LoggingTimer()){
    runSQL("create table threadId_TEMP_TABLE (threadId LONG)");
    StringBundler sb=new StringBundler(5);
    sb.append("insert into threadId_TEMP_TABLE select T.threadId ");
    sb.append("from MBThread T, MBMessage M where T.threadId = ");
    sb.append("M.threadId and T.categoryId = ");
    sb.append(MBCategoryConstants.DISCUSSION_CATEGORY_ID);
    sb.append(" group by M.threadId having count(M.messageId) = 1");
    long classNameId=PortalUtil.getClassNameId(MBDiscussion.class.getName());
    sb=new StringBundler(5);
    sb.append("delete from AssetEntry where classPK in (");
    sb.append("select M.messageId from MBMessage M inner join ");
    sb.append("threadId_TEMP_TABLE T on M.threadId = T.threadId) and ");
    sb.append("classNameId = ");
    sb.append(classNameId);
    runSQL(sb.toString());
    sb=new StringBundler(2);
    sb.append("delete from MBDiscussion where threadId in (");
    sb.append("select threadId from threadId_TEMP_TABLE)");
    runSQL(sb.toString());
    sb=new StringBundler(2);
    sb.append("delete from MBMessage where threadId in (");
    sb.append("select threadId from threadId_TEMP_TABLE)");
    runSQL(sb.toString());
    sb=new StringBundler(2);
    sb.append("delete from MBThread where threadId in (");
    sb.append("select threadId from threadId_TEMP_TABLE)");
    runSQL(sb.toString());
  }
 catch (  Exception e) {
    throw new UpgradeException(e);
  }
 finally {
    runSQL("drop table threadId_TEMP_TABLE");
  }
}
