{
  KaleoInstance kaleoInstance=kaleoInstancePersistence.findByPrimaryKey(kaleoInstanceId);
  long rootKaleoInstanceTokenId=kaleoInstance.getRootKaleoInstanceTokenId();
  if (rootKaleoInstanceTokenId > 0) {
    return kaleoInstanceTokenPersistence.findByPrimaryKey(rootKaleoInstanceTokenId);
  }
  User user=userPersistence.findByPrimaryKey(serviceContext.getGuestOrUserId());
  Date now=new Date();
  rootKaleoInstanceTokenId=counterLocalService.increment();
  KaleoInstanceToken kaleoInstanceToken=kaleoInstanceTokenPersistence.create(rootKaleoInstanceTokenId);
  long groupId=StagingUtil.getLiveGroupId(serviceContext.getScopeGroupId());
  kaleoInstanceToken.setGroupId(groupId);
  kaleoInstanceToken.setCompanyId(user.getCompanyId());
  kaleoInstanceToken.setUserId(user.getUserId());
  kaleoInstanceToken.setUserName(user.getFullName());
  kaleoInstanceToken.setCreateDate(now);
  kaleoInstanceToken.setModifiedDate(now);
  kaleoInstanceToken.setKaleoDefinitionId(kaleoInstance.getKaleoDefinitionId());
  kaleoInstanceToken.setKaleoInstanceId(kaleoInstance.getKaleoInstanceId());
  kaleoInstanceToken.setParentKaleoInstanceTokenId(KaleoInstanceTokenImpl.DEFAULT_PARENT_KALEO_INSTANCE_TOKEN_ID);
  kaleoInstanceToken.setClassName((String)workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_NAME));
  if (workflowContext.containsKey(WorkflowConstants.CONTEXT_ENTRY_CLASS_PK)) {
    kaleoInstanceToken.setClassPK(GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_PK)));
  }
  kaleoInstanceTokenPersistence.update(kaleoInstanceToken);
  kaleoInstance.setRootKaleoInstanceTokenId(rootKaleoInstanceTokenId);
  kaleoInstancePersistence.update(kaleoInstance);
  return kaleoInstanceToken;
}
