{
  Map<String,Set<String>> classCommandNameMap=new HashMap<>();
  for (  String classCommandName : classCommandNames) {
    Set<String> classCommandProperties=new TreeSet<>();
    String className=PoshiRunnerGetterUtil.getClassNameFromClassCommandName(classCommandName);
    List<String> properties=new ArrayList<>();
    properties.addAll(_getTestCaseClassProperties(className));
    properties.addAll(_getTestCaseCommandProperties(classCommandName));
    List<String> ignoreProperties=Arrays.asList(PropsValues.TEST_BATCH_GROUP_IGNORE_PROPERTIES);
    for (    String property : properties) {
      boolean ignore=false;
      for (      String ignoreProperty : ignoreProperties) {
        if (property.contains(ignoreProperty)) {
          ignore=true;
          break;
        }
      }
      if (!ignore) {
        classCommandProperties.add(property);
      }
    }
    classCommandNameMap.put(classCommandName,classCommandProperties);
  }
  Multimap<Set<String>,String> multimap=HashMultimap.create();
  for (  Map.Entry<String,Set<String>> entry : classCommandNameMap.entrySet()) {
    multimap.put(entry.getValue(),entry.getKey());
  }
  Map<Integer,List<String>> classCommandNameGroups=new HashMap<>();
  int classCommandNameIndex=0;
  Map<Set<String>,Collection<String>> map=multimap.asMap();
  for (  Set<String> key : map.keySet()) {
    List<String> classCommandNameGroup=new ArrayList(map.get(key));
    Collections.sort(classCommandNameGroup);
    int groupSize=_getAllocatedTestGroupSize(classCommandNameGroup.size());
    List<List<String>> partitions=Lists.partition(classCommandNameGroup,groupSize);
    for (int j=0; j < partitions.size(); j++) {
      classCommandNameGroups.put(classCommandNameIndex,partitions.get(j));
      classCommandNameIndex++;
    }
  }
  return classCommandNameGroups;
}
