{
  String propertyQuery=PropsValues.TEST_BATCH_PROPERTY_QUERY;
  if (propertyQuery == null) {
    String[] propertyNames=PropsValues.TEST_BATCH_PROPERTY_NAMES;
    String[] propertyValues=PropsValues.TEST_BATCH_PROPERTY_VALUES;
    if (propertyNames.length != propertyValues.length) {
      throw new Exception("'test.batch.property.names'/'test.batch.property.values'" + " must have matching amounts of entries!");
    }
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < propertyNames.length; i++) {
      sb.append(propertyNames[i]);
      sb.append(" == \"");
      sb.append(propertyValues[i]);
      sb.append("\"");
      if (i < (propertyNames.length - 1)) {
        sb.append(" OR ");
      }
    }
    propertyQuery=sb.toString();
  }
  List<String> classCommandNames=new ArrayList<>();
  PQLEntity pqlEntity=PQLEntityFactory.newPQLEntity(propertyQuery);
  for (  String testCaseClassCommandName : _testCaseClassCommandNames) {
    Properties properties=_classCommandNamePropertiesMap.get(testCaseClassCommandName);
    Boolean pqlResultBoolean=(Boolean)pqlEntity.getPQLResult(properties);
    if (pqlResultBoolean) {
      classCommandNames.add(testCaseClassCommandName);
    }
  }
  System.out.println("The following query returned " + classCommandNames.size() + " test class command names:");
  System.out.println(propertyQuery);
  if (PropsValues.TEST_BATCH_RUN_TYPE.equals("sequential")) {
    return _getTestBatchSequentialGroups(classCommandNames);
  }
 else   if (PropsValues.TEST_BATCH_RUN_TYPE.equals("single")) {
    return _getTestBatchSingleGroups(classCommandNames);
  }
  throw new Exception("'test.batch.run.type' must be set to 'single' or 'sequential'");
}
