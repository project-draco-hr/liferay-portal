{
  super(request);
  _fileParameters=new LinkedHashMap<>();
  _regularParameters=new LinkedHashMap<>();
  LiferayServletRequest liferayServletRequest=null;
  try {
    HttpSession session=request.getSession();
    session.removeAttribute(ProgressTracker.PERCENT);
    ServletFileUpload servletFileUpload=new ServletFileUpload(new LiferayFileItemFactory(getTempDir()));
    liferayServletRequest=new LiferayServletRequest(request);
    List<org.apache.commons.fileupload.FileItem> fileItems=servletFileUpload.parseRequest(liferayServletRequest);
    liferayServletRequest.setFinishedReadingOriginalStream(true);
    long uploadServletRequestImplMaxSize=PrefsPropsUtil.getLong(PropsKeys.UPLOAD_SERVLET_REQUEST_IMPL_MAX_SIZE);
    long uploadServletRequestImplSize=0;
    int contentLength=request.getContentLength();
    if ((uploadServletRequestImplMaxSize > 0) && ((contentLength == -1) || (contentLength > uploadServletRequestImplMaxSize))) {
      fileItems=sort(fileItems);
    }
    for (    org.apache.commons.fileupload.FileItem fileItem : fileItems) {
      LiferayFileItem liferayFileItem=(LiferayFileItem)fileItem;
      if (uploadServletRequestImplMaxSize > 0) {
        long itemSize=liferayFileItem.getItemSize();
        if ((uploadServletRequestImplSize + itemSize) > uploadServletRequestImplMaxSize) {
          StringBundler sb=new StringBundler(3);
          sb.append("Request reached the maximum permitted size of ");
          sb.append(uploadServletRequestImplMaxSize);
          sb.append(" bytes");
          UploadException uploadException=new UploadException(sb.toString());
          uploadException.setExceededLiferayFileItemSizeLimit(false);
          uploadException.setExceededSizeLimit(true);
          request.setAttribute(WebKeys.UPLOAD_EXCEPTION,uploadException);
          continue;
        }
        uploadServletRequestImplSize+=itemSize;
      }
      if (liferayFileItem.isFormField()) {
        liferayFileItem.setString(request.getCharacterEncoding());
        String fieldName=liferayFileItem.getFieldName();
        if (!_regularParameters.containsKey(fieldName)) {
          _regularParameters.put(fieldName,new ArrayList<String>());
        }
        List<String> values=_regularParameters.get(fieldName);
        if (liferayFileItem.getSize() > LiferayFileItem.THRESHOLD_SIZE) {
          StringBundler sb=new StringBundler(5);
          sb.append("The field ");
          sb.append(fieldName);
          sb.append(" exceeds its maximum permitted size of ");
          sb.append(LiferayFileItem.THRESHOLD_SIZE);
          sb.append(" bytes");
          UploadException uploadException=new UploadException(sb.toString());
          uploadException.setExceededLiferayFileItemSizeLimit(true);
          uploadException.setExceededSizeLimit(true);
          request.setAttribute(WebKeys.UPLOAD_EXCEPTION,uploadException);
        }
        values.add(liferayFileItem.getEncodedString());
        continue;
      }
      FileItem[] liferayFileItems=_fileParameters.get(liferayFileItem.getFieldName());
      if (liferayFileItems == null) {
        liferayFileItems=new LiferayFileItem[]{liferayFileItem};
      }
 else {
        LiferayFileItem[] newLiferayFileItems=new LiferayFileItem[liferayFileItems.length + 1];
        System.arraycopy(liferayFileItems,0,newLiferayFileItems,0,liferayFileItems.length);
        newLiferayFileItems[newLiferayFileItems.length - 1]=liferayFileItem;
        liferayFileItems=newLiferayFileItems;
      }
      _fileParameters.put(liferayFileItem.getFieldName(),liferayFileItems);
    }
  }
 catch (  Exception e) {
    UploadException uploadException=new UploadException(e);
    if (e instanceof FileUploadBase.FileSizeLimitExceededException || e instanceof FileUploadBase.SizeLimitExceededException) {
      uploadException.setExceededSizeLimit(true);
    }
    request.setAttribute(WebKeys.UPLOAD_EXCEPTION,uploadException);
    if (_log.isDebugEnabled()) {
      _log.debug(e,e);
    }
  }
  _liferayServletRequest=liferayServletRequest;
}
