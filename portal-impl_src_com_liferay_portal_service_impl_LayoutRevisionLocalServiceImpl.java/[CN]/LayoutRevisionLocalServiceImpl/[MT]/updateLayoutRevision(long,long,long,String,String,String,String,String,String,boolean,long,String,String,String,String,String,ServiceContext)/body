{
  User user=userPersistence.findByPrimaryKey(userId);
  LayoutRevision oldLayoutRevision=layoutRevisionPersistence.findByPrimaryKey(layoutRevisionId);
  Date now=new Date();
  LayoutRevision layoutRevision=null;
  int workflowAction=serviceContext.getWorkflowAction();
  boolean revisionInProgress=ParamUtil.getBoolean(serviceContext,"revisionInProgress");
  if (!MergeLayoutPrototypesThreadLocal.isInProgress() && (workflowAction != WorkflowConstants.ACTION_PUBLISH) && (_layoutRevisionId.get() <= 0)&& !revisionInProgress) {
    long newLayoutRevisionId=counterLocalService.increment();
    layoutRevision=layoutRevisionPersistence.create(newLayoutRevisionId);
    layoutRevision.setGroupId(oldLayoutRevision.getGroupId());
    layoutRevision.setCompanyId(oldLayoutRevision.getCompanyId());
    layoutRevision.setUserId(user.getUserId());
    layoutRevision.setUserName(user.getFullName());
    layoutRevision.setCreateDate(serviceContext.getCreateDate(now));
    layoutRevision.setModifiedDate(serviceContext.getModifiedDate(now));
    layoutRevision.setLayoutSetBranchId(oldLayoutRevision.getLayoutSetBranchId());
    layoutRevision.setParentLayoutRevisionId(oldLayoutRevision.getLayoutRevisionId());
    layoutRevision.setHead(false);
    layoutRevision.setLayoutBranchId(layoutBranchId);
    layoutRevision.setPlid(oldLayoutRevision.getPlid());
    layoutRevision.setPrivateLayout(oldLayoutRevision.isPrivateLayout());
    layoutRevision.setName(name);
    layoutRevision.setTitle(title);
    layoutRevision.setDescription(description);
    layoutRevision.setKeywords(keywords);
    layoutRevision.setRobots(robots);
    layoutRevision.setTypeSettings(typeSettings);
    if (iconImage) {
      layoutRevision.setIconImage(iconImage);
      layoutRevision.setIconImageId(iconImageId);
    }
    layoutRevision.setThemeId(themeId);
    layoutRevision.setColorSchemeId(colorSchemeId);
    layoutRevision.setWapThemeId(wapThemeId);
    layoutRevision.setWapColorSchemeId(wapColorSchemeId);
    layoutRevision.setCss(css);
    layoutRevision.setStatus(WorkflowConstants.STATUS_DRAFT);
    layoutRevision.setStatusDate(serviceContext.getModifiedDate(now));
    layoutRevisionPersistence.update(layoutRevision);
    _layoutRevisionId.set(layoutRevision.getLayoutRevisionId());
    copyPortletPreferences(layoutRevision,layoutRevision.getParentLayoutRevisionId(),serviceContext);
    StagingUtil.deleteRecentLayoutRevisionId(user,layoutRevision.getLayoutSetBranchId(),layoutRevision.getPlid());
    StagingUtil.setRecentLayoutBranchId(user,layoutRevision.getLayoutSetBranchId(),layoutRevision.getPlid(),layoutRevision.getLayoutBranchId());
  }
 else {
    layoutRevision=oldLayoutRevision;
    layoutRevision.setName(name);
    layoutRevision.setTitle(title);
    layoutRevision.setDescription(description);
    layoutRevision.setKeywords(keywords);
    layoutRevision.setRobots(robots);
    layoutRevision.setTypeSettings(typeSettings);
    if (iconImage) {
      layoutRevision.setIconImage(iconImage);
      layoutRevision.setIconImageId(iconImageId);
    }
    layoutRevision.setThemeId(themeId);
    layoutRevision.setColorSchemeId(colorSchemeId);
    layoutRevision.setWapThemeId(wapThemeId);
    layoutRevision.setWapColorSchemeId(wapColorSchemeId);
    layoutRevision.setCss(css);
    layoutRevisionPersistence.update(layoutRevision);
    _layoutRevisionId.set(layoutRevision.getLayoutRevisionId());
  }
  boolean major=ParamUtil.getBoolean(serviceContext,"major");
  if (major) {
    updateMajor(layoutRevision);
  }
  WorkflowHandlerRegistryUtil.startWorkflowInstance(layoutRevision.getCompanyId(),layoutRevision.getGroupId(),userId,LayoutRevision.class.getName(),layoutRevision.getLayoutRevisionId(),layoutRevision,serviceContext);
  return layoutRevision;
}
