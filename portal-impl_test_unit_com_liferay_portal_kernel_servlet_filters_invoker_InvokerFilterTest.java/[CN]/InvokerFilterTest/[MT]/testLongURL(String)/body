{
  InvokerFilter invokerFilter=new InvokerFilter();
  int invokerFilterUriMaxLength=GetterUtil.getInteger(PropsUtil.get(PropsKeys.INVOKER_FILTER_URI_MAX_LENGTH));
  char[] chars=new char[invokerFilterUriMaxLength];
  for (int i=0; i < chars.length; i++) {
    chars[i]='0';
  }
  String payload=urlPrefix.concat(new String(chars));
  MockHttpServletRequest mockHttpServletRequest=new MockHttpServletRequest(HttpMethods.GET,payload);
  MockHttpServletResponse mockHttpServletResponse=new MockHttpServletResponse();
  MockFilterChain mockFilterChain=new MockFilterChain();
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(InvokerFilter.class.getName(),Level.WARNING)){
    invokerFilter.doFilter(mockHttpServletRequest,mockHttpServletResponse,mockFilterChain);
    int status=mockHttpServletResponse.getStatus();
    Assert.assertEquals(HttpServletResponse.SC_REQUEST_URI_TOO_LONG,status);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertTrue(logRecord.getMessage().startsWith("Rejected " + urlPrefix));
  }
 }
