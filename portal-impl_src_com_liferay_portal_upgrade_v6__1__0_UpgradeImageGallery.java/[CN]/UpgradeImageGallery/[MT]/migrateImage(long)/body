{
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    con=DataAccess.getConnection();
    StringBundler sb=new StringBundler(8);
    sb.append("select fileVersionId, fileEntry.fileEntryId, ");
    sb.append("fileEntry.groupId, fileEntry.companyId, ");
    sb.append("folderId, name, largeImageId, smallImageId, ");
    sb.append("custom1ImageId, custom2ImageId from DLFileVersion ");
    sb.append("fileVersion, DLFileEntry fileEntry where ");
    sb.append("fileEntry.fileEntryId = fileVersion.fileEntryId and ");
    sb.append("(largeImageId = ? or smallImageId = ? or ");
    sb.append("custom1ImageId = ? or custom2ImageId = ?)");
    String sql=sb.toString();
    ps=con.prepareStatement(sql);
    ps.setLong(1,imageId);
    ps.setLong(2,imageId);
    ps.setLong(3,imageId);
    ps.setLong(4,imageId);
    rs=ps.executeQuery();
    if (rs.next()) {
      long fileVersionId=rs.getLong("fileVersionId");
      long fileEntryId=rs.getLong("fileEntry.fileEntryId");
      long companyId=rs.getLong("fileEntry.companyId");
      long groupId=rs.getLong("fileEntry.groupId");
      long folderId=rs.getLong("folderId");
      String name=rs.getString("name");
      long largeImageId=rs.getLong("largeImageId");
      long custom1ImageId=rs.getLong("custom1ImageId");
      long custom2ImageId=rs.getLong("custom2ImageId");
      Image image=ImageLocalServiceUtil.getImage(imageId);
      if (largeImageId == imageId) {
        long repositoryId=DLFolderConstants.getDataRepositoryId(groupId,folderId);
        try {
          migrateFile(repositoryId,companyId,name,image);
        }
 catch (        Exception e) {
        }
      }
 else {
        ClassLoader classLoader=PortalClassLoaderUtil.getClassLoader();
        String sourceHookClassName=FileSystemHook.class.getName();
        if (Validator.isNotNull(PropsValues.IMAGE_HOOK_IMPL)) {
          sourceHookClassName=PropsValues.IMAGE_HOOK_IMPL;
        }
        Hook sourceHook=(Hook)InstanceFactory.newInstance(classLoader,sourceHookClassName);
        InputStream is=sourceHook.getImageAsStream(image);
        ImageProcessor.storeThumbnail(companyId,groupId,fileEntryId,fileVersionId,custom1ImageId,custom2ImageId,is,image.getType());
      }
    }
 else {
      Image image=ImageLocalServiceUtil.getImage(imageId);
      try {
        migrateFile(0,0,null,image);
      }
 catch (      Exception e) {
      }
    }
  }
  finally {
    DataAccess.cleanUp(con,ps,rs);
  }
}
