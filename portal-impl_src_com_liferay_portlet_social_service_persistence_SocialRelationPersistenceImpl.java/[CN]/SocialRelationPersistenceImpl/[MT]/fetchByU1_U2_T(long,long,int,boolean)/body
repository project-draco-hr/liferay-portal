{
  Object[] finderArgs=new Object[]{userId1,userId2,type};
  Object result=null;
  if (retrieveFromCache) {
    result=FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_U1_U2_T,finderArgs,this);
  }
  if (result instanceof SocialRelation) {
    SocialRelation socialRelation=(SocialRelation)result;
    if ((userId1 != socialRelation.getUserId1()) || (userId2 != socialRelation.getUserId2()) || (type != socialRelation.getType())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(5);
    query.append(_SQL_SELECT_SOCIALRELATION_WHERE);
    query.append(_FINDER_COLUMN_U1_U2_T_USERID1_2);
    query.append(_FINDER_COLUMN_U1_U2_T_USERID2_2);
    query.append(_FINDER_COLUMN_U1_U2_T_TYPE_2);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(userId1);
      qPos.add(userId2);
      qPos.add(type);
      List<SocialRelation> list=q.list();
      if (list.isEmpty()) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_U1_U2_T,finderArgs,list);
      }
 else {
        SocialRelation socialRelation=list.get(0);
        result=socialRelation;
        cacheResult(socialRelation);
        if ((socialRelation.getUserId1() != userId1) || (socialRelation.getUserId2() != userId2) || (socialRelation.getType() != type)) {
          FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_U1_U2_T,finderArgs,socialRelation);
        }
      }
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_U1_U2_T,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (SocialRelation)result;
  }
}
