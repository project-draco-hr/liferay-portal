{
  final ServletContext servletContext=servletConfig.getServletContext();
  ClassLoader classLoader=servletContext.getClassLoader();
  if (!(classLoader instanceof BundleReference)) {
    throw new IllegalStateException();
  }
  List<Bundle> bundles=new ArrayList<>();
  BundleReference bundleReference=(BundleReference)classLoader;
  _bundle=bundleReference.getBundle();
  bundles.add(_bundle);
  bundles.add(_jspBundle);
  collectTaglibProviderBundles(bundles);
  _allParticipatingBundles=bundles.toArray(new Bundle[bundles.size()]);
  _jspBundleClassloader=new JspBundleClassloader(_allParticipatingBundles);
  final Map<String,String> defaults=new HashMap<>();
  defaults.put("compilerClassName","com.liferay.portal.servlet.jsp.compiler.internal.JspCompiler");
  defaults.put("compilerSourceVM","1.7");
  defaults.put("compilerTargetVM","1.7");
  defaults.put("development","false");
  defaults.put("httpMethods","GET,POST,HEAD");
  defaults.put("keepgenerated","false");
  defaults.put("logVerbosityLevel","NONE");
  defaults.put("saveBytecode","true");
  StringBundler sb=new StringBundler(5);
  ServletContext portalServletContext=ServletContextPool.get(PortalUtil.getServletContextName());
  sb.append(portalServletContext.getAttribute(JavaConstants.JAVAX_SERVLET_CONTEXT_TEMPDIR));
  sb.append(StringPool.SLASH);
  sb.append(_bundle.getSymbolicName());
  sb.append(StringPool.DASH);
  sb.append(_bundle.getVersion());
  defaults.put("scratchdir",sb.toString());
  Enumeration<String> names=servletConfig.getInitParameterNames();
  Set<String> nameSet=new HashSet<>(Collections.list(names));
  nameSet.addAll(defaults.keySet());
  final Enumeration<String> initParameterNames=Collections.enumeration(nameSet);
  _jspServlet.init(new ServletConfig(){
    @Override public String getServletName(){
      return servletConfig.getServletName();
    }
    @Override public ServletContext getServletContext(){
      return getServletContextWrapper(servletContext);
    }
    @Override public Enumeration<String> getInitParameterNames(){
      return initParameterNames;
    }
    @Override public String getInitParameter(    String name){
      String value=servletConfig.getInitParameter(name);
      if (value == null) {
        value=defaults.get(name);
      }
      return value;
    }
  }
);
  scanTLDs(servletContext);
}
