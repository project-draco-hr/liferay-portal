{
  long pk=ServiceTestUtil.nextLong();
  MDRRuleGroup newMDRRuleGroup=_persistence.create(pk);
  newMDRRuleGroup.setUuid(ServiceTestUtil.randomString());
  newMDRRuleGroup.setGroupId(ServiceTestUtil.nextLong());
  newMDRRuleGroup.setCompanyId(ServiceTestUtil.nextLong());
  newMDRRuleGroup.setUserId(ServiceTestUtil.nextLong());
  newMDRRuleGroup.setUserName(ServiceTestUtil.randomString());
  newMDRRuleGroup.setCreateDate(ServiceTestUtil.nextDate());
  newMDRRuleGroup.setModifiedDate(ServiceTestUtil.nextDate());
  newMDRRuleGroup.setName(ServiceTestUtil.randomString());
  newMDRRuleGroup.setDescription(ServiceTestUtil.randomString());
  _persistence.update(newMDRRuleGroup);
  MDRRuleGroup existingMDRRuleGroup=_persistence.findByPrimaryKey(newMDRRuleGroup.getPrimaryKey());
  Assert.assertEquals(existingMDRRuleGroup.getUuid(),newMDRRuleGroup.getUuid());
  Assert.assertEquals(existingMDRRuleGroup.getRuleGroupId(),newMDRRuleGroup.getRuleGroupId());
  Assert.assertEquals(existingMDRRuleGroup.getGroupId(),newMDRRuleGroup.getGroupId());
  Assert.assertEquals(existingMDRRuleGroup.getCompanyId(),newMDRRuleGroup.getCompanyId());
  Assert.assertEquals(existingMDRRuleGroup.getUserId(),newMDRRuleGroup.getUserId());
  Assert.assertEquals(existingMDRRuleGroup.getUserName(),newMDRRuleGroup.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMDRRuleGroup.getCreateDate()),Time.getShortTimestamp(newMDRRuleGroup.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingMDRRuleGroup.getModifiedDate()),Time.getShortTimestamp(newMDRRuleGroup.getModifiedDate()));
  Assert.assertEquals(existingMDRRuleGroup.getName(),newMDRRuleGroup.getName());
  Assert.assertEquals(existingMDRRuleGroup.getDescription(),newMDRRuleGroup.getDescription());
}
