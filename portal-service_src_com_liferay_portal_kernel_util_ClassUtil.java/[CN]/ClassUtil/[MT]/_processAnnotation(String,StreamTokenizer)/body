{
  s=s.trim();
  List<String> tokens=new ArrayList<>();
  Matcher annotationNameMatcher=_ANNOTATION_NAME_REGEXP.matcher(s);
  Matcher annotationParametersMatcher=_ANNOTATION_PARAMETERS_REGEXP.matcher(s);
  if (annotationNameMatcher.matches()) {
    tokens.add(annotationNameMatcher.group(1));
  }
 else   if (annotationParametersMatcher.matches()) {
    tokens.add(annotationParametersMatcher.group(1));
    String annotationParameters=StringPool.BLANK;
    if (s.trim().endsWith(")")) {
      annotationParameters=annotationParametersMatcher.group(3);
    }
 else {
      int pos=s.indexOf('{');
      if (pos != -1) {
        annotationParameters+=s.substring(pos + 1);
      }
      while (st.nextToken() != StreamTokenizer.TT_EOF) {
        if (st.ttype != StreamTokenizer.TT_WORD) {
          continue;
        }
        annotationParameters+=st.sval;
        String trimmedValue=StringUtil.trim(st.sval);
        if (!trimmedValue.endsWith(")")) {
          continue;
        }
        int closeParenthesesCount=StringUtil.count(annotationParameters,")");
        int openParenthesesCount=StringUtil.count(annotationParameters,"(");
        if (closeParenthesesCount > openParenthesesCount) {
          break;
        }
      }
    }
    tokens=_processAnnotationParameters(annotationParameters,tokens);
  }
  return tokens.toArray(new String[tokens.size()]);
}
