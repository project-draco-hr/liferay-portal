{
  s=s.trim();
  List<String> tokens=new ArrayList<String>();
  Matcher annotationNameMatcher=_ANNOTATION_NAME_REGEXP.matcher(s);
  Matcher annotationParametersMatcher=_ANNOTATION_PARAMETERS_REGEXP.matcher(s);
  if (annotationNameMatcher.matches()) {
    String annotationName=annotationNameMatcher.group();
    tokens.add(annotationName.replace("@",""));
  }
 else   if (annotationParametersMatcher.matches()) {
    String annotationName=annotationParametersMatcher.group(1);
    tokens.add(annotationName);
    String annotationParameters=null;
    if (s.trim().endsWith(")")) {
      annotationParameters=annotationParametersMatcher.group(2);
    }
 else {
      StringBundler sb=new StringBundler();
      int openingBraceIndex=s.indexOf('{');
      if (openingBraceIndex != -1) {
        sb.append(s.substring(openingBraceIndex + 1));
      }
      while (st.nextToken() != StreamTokenizer.TT_EOF) {
        if (st.ttype == StreamTokenizer.TT_WORD) {
          sb.append(st.sval);
          if (st.sval.trim().endsWith(")")) {
            break;
          }
        }
      }
      annotationParameters=sb.toString();
    }
    tokens=_processAnnotationParameters(annotationParameters,tokens);
  }
  return tokens.toArray(new String[tokens.size()]);
}
