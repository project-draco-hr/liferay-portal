{
  Bundle bundle=mock(Bundle.class);
  Class<?> clazz=getClass();
  when(bundle.getEntry(Matchers.eq("package.json"))).thenReturn(clazz.getResource("dependencies/package.json"));
  SoyPortletHelper soyPortletHelper=new SoyPortletHelper(bundle);
  String portletNamespace=StringUtil.randomString();
  JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
  String portletComponentId=portletNamespace.concat("PortletComponent");
  jsonObject.put("element",StringPool.POUND.concat(portletComponentId));
  jsonObject.put("id",portletComponentId);
  jsonObject.put("key 1","value 1");
  String expectedPortletJavaScript=soyPortletHelper.getPortletJavaScript(jsonObject.toJSONString(),portletNamespace,"\"SampleModuleName/View.soy\"");
  Template template=new MockTemplate();
  template.put(TemplateConstants.NAMESPACE,StringUtil.randomString());
  template.put("element",StringPool.POUND.concat(portletComponentId));
  template.put("id",portletComponentId);
  template.put("key 1","value 1");
  String actualPortletJavaScript=soyPortletHelper.getPortletJavaScript(template,"View",portletNamespace,Collections.<String>emptySet());
  Assert.assertEquals(expectedPortletJavaScript,actualPortletJavaScript);
}
