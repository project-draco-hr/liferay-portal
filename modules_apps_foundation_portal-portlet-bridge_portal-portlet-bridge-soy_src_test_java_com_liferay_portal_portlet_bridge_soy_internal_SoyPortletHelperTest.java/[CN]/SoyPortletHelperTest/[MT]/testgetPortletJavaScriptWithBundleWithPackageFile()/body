{
  Bundle bundle=(Bundle)ProxyUtil.newProxyInstance(Bundle.class.getClassLoader(),new Class<?>[]{Bundle.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws NoSuchMethodException {
      if (method.equals(Bundle.class.getMethod("getEntry",String.class)) && "package.json".equals(args[0])) {
        return SoyPortletHelperTest.class.getResource("dependencies/package.json");
      }
      return null;
    }
  }
);
  SoyPortletHelper soyPortletHelper=new SoyPortletHelper(bundle);
  String portletNamespace=StringUtil.randomString();
  JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
  String portletComponentId=portletNamespace.concat("PortletComponent");
  jsonObject.put(TemplateConstants.NAMESPACE,portletNamespace);
  jsonObject.put("element",StringPool.POUND.concat(portletComponentId));
  jsonObject.put("id",portletComponentId);
  jsonObject.put("key 1","value 1");
  String expectedPortletJavaScript=soyPortletHelper.getPortletJavaScript(jsonObject.toJSONString(),portletNamespace,"\"SampleModuleName/View.soy\"");
  Template template=new MockTemplate();
  template.put(TemplateConstants.NAMESPACE,portletNamespace);
  template.put("element",StringPool.POUND.concat(portletComponentId));
  template.put("id",portletComponentId);
  template.put("key 1","value 1");
  String actualPortletJavaScript=soyPortletHelper.getPortletJavaScript(template,"View",portletNamespace,Collections.<String>emptySet());
  Assert.assertEquals(expectedPortletJavaScript,actualPortletJavaScript);
}
