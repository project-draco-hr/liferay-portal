{
  Template template=mock(Template.class);
  final Map<String,Object> context=new HashMap<>();
  when(template.put(Matchers.anyString(),Matchers.any())).then(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocationOnMock) throws Throwable {
      Object[] args=invocationOnMock.getArguments();
      context.put(String.valueOf(args[0]),args[1]);
      return null;
    }
  }
);
  when(template.get(Matchers.anyString())).then(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      Object[] args=invocationOnMock.getArguments();
      return context.get(String.valueOf(args[0]));
    }
  }
);
  when(template.getKeys()).then(new Answer<String[]>(){
    @Override public String[] answer(    InvocationOnMock invocationOnMock) throws Throwable {
      Set<String> keySet=context.keySet();
      return keySet.toArray(new String[keySet.size()]);
    }
  }
);
  return template;
}
