{
  Class.forName(jdbcDriver.class.getName());
  final CountDownLatch startCountDownLatch=new CountDownLatch(1);
  Server server=new Server(){
    @Override public int stop(){
      try (PrintWriter logPrintWriter=getLogWriter();PrintWriter errPrintWriter=getErrWriter()){
        int state=super.stop();
        if (!_shutdownCountDownLatch.await(1,TimeUnit.MINUTES)) {
          throw new IllegalStateException("Unable to shut down Hypersonic " + _databaseName);
        }
        return state;
      }
 catch (      InterruptedException ie) {
        return ReflectionUtil.throwException(ie);
      }
    }
    @Override protected synchronized void setState(    int state){
      super.setState(state);
      if (state == ServerConstants.SERVER_STATE_ONLINE) {
        startCountDownLatch.countDown();
      }
 else       if (state == ServerConstants.SERVER_STATE_SHUTDOWN) {
        _shutdownCountDownLatch.countDown();
      }
    }
    private final CountDownLatch _shutdownCountDownLatch=new CountDownLatch(1);
  }
;
  File hsqlHomeDir=new File(_HSQL_HOME);
  hsqlHomeDir.mkdirs();
  server.setErrWriter(new UnsyncPrintWriter(new File(hsqlHomeDir,_databaseName + ".err.log")));
  server.setLogWriter(new UnsyncPrintWriter(new File(hsqlHomeDir,_databaseName + ".std.log")));
  server.setDatabaseName(0,_databaseName);
  server.setDatabasePath(0,_HSQL_HOME + _databaseName);
  server.start();
  if (!startCountDownLatch.await(1,TimeUnit.MINUTES)) {
    throw new IllegalStateException("Unable to start up Hypersonic " + _databaseName);
  }
  return server;
}
