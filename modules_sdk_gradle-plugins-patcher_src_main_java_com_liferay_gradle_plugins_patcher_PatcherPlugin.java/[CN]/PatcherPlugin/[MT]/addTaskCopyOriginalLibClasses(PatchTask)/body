{
  String taskName="copy" + StringUtil.capitalize(patchTask.getName()) + "OriginalLibClasses";
  Copy copy=GradleUtil.addTask(patchTask.getProject(),taskName,Copy.class);
  copy.eachFile(new ExcludeExistingFileAction(copy.getDestinationDir()));
  copy.from(new Callable<FileCollection>(){
    @Override public FileCollection call() throws Exception {
      Project project=patchTask.getProject();
      return project.zipTree(patchTask.getOriginalLibFile());
    }
  }
);
  copy.into(new Callable<File>(){
    @Override public File call() throws Exception {
      JavaCompile javaCompile=(JavaCompile)GradleUtil.getTask(patchTask.getProject(),JavaPlugin.COMPILE_JAVA_TASK_NAME);
      return javaCompile.getDestinationDir();
    }
  }
);
  copy.onlyIf(new Spec<Task>(){
    @Override public boolean isSatisfiedBy(    Task task){
      if (patchTask.isCopyOriginalLibClasses()) {
        return true;
      }
      return false;
    }
  }
);
  TaskOutputs taskOutputs=copy.getOutputs();
  taskOutputs.upToDateWhen(new Spec<Task>(){
    @Override public boolean isSatisfiedBy(    Task task){
      return false;
    }
  }
);
  return copy;
}
