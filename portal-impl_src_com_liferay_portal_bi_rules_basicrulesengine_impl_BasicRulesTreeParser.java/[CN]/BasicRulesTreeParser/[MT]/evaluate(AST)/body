{
  Rule r;
  AST evaluate_AST_in=(_t == ASTNULL) ? null : (AST)_t;
  AST c=null;
  Rule a, b;
  r=null;
  try {
    if (_t == null)     _t=ASTNULL;
switch (_t.getType()) {
case AND:
{
        AST __t30=_t;
        AST tmp1_AST_in=(AST)_t;
        match(_t,AND);
        _t=_t.getFirstChild();
        a=evaluate(_t);
        _t=_retTree;
        b=evaluate(_t);
        _t=_retTree;
        _t=__t30;
        _t=_t.getNextSibling();
        r=new AndRules(a,b);
        break;
      }
case OR:
{
      AST __t31=_t;
      AST tmp2_AST_in=(AST)_t;
      match(_t,OR);
      _t=_t.getFirstChild();
      a=evaluate(_t);
      _t=_retTree;
      b=evaluate(_t);
      _t=_retTree;
      _t=__t31;
      _t=_t.getNextSibling();
      r=new OrRules(a,b);
      break;
    }
case EQ:
{
    AST __t32=_t;
    AST tmp3_AST_in=(AST)_t;
    match(_t,EQ);
    _t=_t.getFirstChild();
    a=evaluate(_t);
    _t=_retTree;
    b=evaluate(_t);
    _t=_retTree;
    _t=__t32;
    _t=_t.getNextSibling();
    r=new Equals(a,b);
    break;
  }
case NOTEQ:
{
  AST __t33=_t;
  AST tmp4_AST_in=(AST)_t;
  match(_t,NOTEQ);
  _t=_t.getFirstChild();
  a=evaluate(_t);
  _t=_retTree;
  b=evaluate(_t);
  _t=_retTree;
  _t=__t33;
  _t=_t.getNextSibling();
  r=new NotEquals(a,b);
  break;
}
case GT:
{
AST __t34=_t;
AST tmp5_AST_in=(AST)_t;
match(_t,GT);
_t=_t.getFirstChild();
a=evaluate(_t);
_t=_retTree;
b=evaluate(_t);
_t=_retTree;
_t=__t34;
_t=_t.getNextSibling();
r=new GreaterThan(a,b);
break;
}
case GTEQ:
{
AST __t35=_t;
AST tmp6_AST_in=(AST)_t;
match(_t,GTEQ);
_t=_t.getFirstChild();
a=evaluate(_t);
_t=_retTree;
b=evaluate(_t);
_t=_retTree;
_t=__t35;
_t=_t.getNextSibling();
r=new GreaterThanEquals(a,b);
break;
}
case LT:
{
AST __t36=_t;
AST tmp7_AST_in=(AST)_t;
match(_t,LT);
_t=_t.getFirstChild();
a=evaluate(_t);
_t=_retTree;
b=evaluate(_t);
_t=_retTree;
_t=__t36;
_t=_t.getNextSibling();
r=new LessThan(a,b);
break;
}
case LTEQ:
{
AST __t37=_t;
AST tmp8_AST_in=(AST)_t;
match(_t,LTEQ);
_t=_t.getFirstChild();
a=evaluate(_t);
_t=_retTree;
b=evaluate(_t);
_t=_retTree;
_t=__t37;
_t=_t.getNextSibling();
r=new LessThanEquals(a,b);
break;
}
case MATCHES:
{
AST __t38=_t;
AST tmp9_AST_in=(AST)_t;
match(_t,MATCHES);
_t=_t.getFirstChild();
a=evaluate(_t);
_t=_retTree;
b=evaluate(_t);
_t=_retTree;
_t=__t38;
_t=_t.getNextSibling();
r=new Matches(a,b);
break;
}
case PART:
{
c=(AST)_t;
match(_t,PART);
_t=_t.getNextSibling();
r=factory.createRule(c.getText());
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
if (_t != null) {
_t=_t.getNextSibling();
}
}
_retTree=_t;
return r;
}
