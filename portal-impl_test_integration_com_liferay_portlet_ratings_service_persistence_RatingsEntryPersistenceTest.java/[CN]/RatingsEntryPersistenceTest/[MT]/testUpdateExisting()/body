{
  long pk=ServiceTestUtil.nextLong();
  RatingsEntry newRatingsEntry=_persistence.create(pk);
  newRatingsEntry.setCompanyId(ServiceTestUtil.nextLong());
  newRatingsEntry.setUserId(ServiceTestUtil.nextLong());
  newRatingsEntry.setUserName(ServiceTestUtil.randomString());
  newRatingsEntry.setCreateDate(ServiceTestUtil.nextDate());
  newRatingsEntry.setModifiedDate(ServiceTestUtil.nextDate());
  newRatingsEntry.setClassNameId(ServiceTestUtil.nextLong());
  newRatingsEntry.setClassPK(ServiceTestUtil.nextLong());
  newRatingsEntry.setScore(ServiceTestUtil.nextDouble());
  _persistence.update(newRatingsEntry,false);
  RatingsEntry existingRatingsEntry=_persistence.findByPrimaryKey(newRatingsEntry.getPrimaryKey());
  Assert.assertEquals(existingRatingsEntry.getEntryId(),newRatingsEntry.getEntryId());
  Assert.assertEquals(existingRatingsEntry.getCompanyId(),newRatingsEntry.getCompanyId());
  Assert.assertEquals(existingRatingsEntry.getUserId(),newRatingsEntry.getUserId());
  Assert.assertEquals(existingRatingsEntry.getUserName(),newRatingsEntry.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingRatingsEntry.getCreateDate()),Time.getShortTimestamp(newRatingsEntry.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingRatingsEntry.getModifiedDate()),Time.getShortTimestamp(newRatingsEntry.getModifiedDate()));
  Assert.assertEquals(existingRatingsEntry.getClassNameId(),newRatingsEntry.getClassNameId());
  Assert.assertEquals(existingRatingsEntry.getClassPK(),newRatingsEntry.getClassPK());
  AssertUtils.assertEquals(existingRatingsEntry.getScore(),newRatingsEntry.getScore());
}
