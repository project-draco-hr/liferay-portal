{
  ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(2,3,TestUtil.KEEPALIVE_TIME,TimeUnit.MILLISECONDS,false,10);
  try {
    MarkerBlockingJob markerBlockingJob1=new MarkerBlockingJob(true);
    MarkerBlockingJob markerBlockingJob2=new MarkerBlockingJob(true);
    MarkerBlockingJob markerBlockingJob3=new MarkerBlockingJob(true);
    threadPoolExecutor.execute(markerBlockingJob1);
    threadPoolExecutor.execute(markerBlockingJob2);
    threadPoolExecutor.execute(markerBlockingJob3);
    TestUtil.waitUntilBlock(markerBlockingJob1,markerBlockingJob2,markerBlockingJob3);
    TestUtil.unblock(markerBlockingJob1,markerBlockingJob2,markerBlockingJob3);
    TestUtil.waitUntilEnded(markerBlockingJob1,markerBlockingJob2,markerBlockingJob3);
    Thread.sleep(TestUtil.SHORT_WAIT);
    Assert.assertEquals(3,threadPoolExecutor.getPoolSize());
    Assert.assertEquals(0,threadPoolExecutor.getActiveCount());
    Thread.sleep(TestUtil.KEEPALIVE_WAIT * 2);
    Assert.assertEquals(2,threadPoolExecutor.getPoolSize());
    Assert.assertEquals(0,threadPoolExecutor.getActiveCount());
    threadPoolExecutor.adjustPoolSize(1,1);
    Assert.assertEquals(1,threadPoolExecutor.getCorePoolSize());
    Assert.assertEquals(1,threadPoolExecutor.getMaxPoolSize());
    Thread.sleep(TestUtil.KEEPALIVE_WAIT * 2);
    Assert.assertEquals(1,threadPoolExecutor.getPoolSize());
    Assert.assertEquals(0,threadPoolExecutor.getActiveCount());
  }
  finally {
    TestUtil.closePool(threadPoolExecutor);
  }
}
