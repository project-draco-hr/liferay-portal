{
  RecordRejectedExecutionHandler recordRejectedExecutionHandler=new RecordRejectedExecutionHandler();
  final ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(1,2,TestUtil.KEEPALIVE_TIME,TimeUnit.MILLISECONDS,true,3,recordRejectedExecutionHandler,Executors.defaultThreadFactory(),new ThreadPoolHandlerAdapter());
  final TaskQueue<Runnable> taskQueue=threadPoolExecutor.getTaskQueue();
  final CountDownLatch executeLatch=new CountDownLatch(1);
  Thread thread=new Thread(){
    @Override public void run(){
      try {
        ReentrantLock putLock=taskQueue.getPutLock();
        putLock.lock();
        executeLatch.countDown();
        try {
          while (!putLock.hasQueuedThreads()) {
            Thread.sleep(1);
          }
          threadPoolExecutor.shutdown();
        }
  finally {
          putLock.unlock();
        }
      }
 catch (      InterruptedException ie) {
      }
    }
  }
;
  thread.start();
  executeLatch.await();
  try {
    MarkerBlockingJob markerBlockingJob=new MarkerBlockingJob();
    threadPoolExecutor.execute(markerBlockingJob);
    List<Runnable> rejectedList=recordRejectedExecutionHandler.getRejectedList();
    Assert.assertEquals(1,rejectedList.size());
    Assert.assertSame(markerBlockingJob,rejectedList.get(0));
    Assert.assertFalse(markerBlockingJob.isStarted());
  }
  finally {
    TestUtil.closePool(threadPoolExecutor);
  }
}
