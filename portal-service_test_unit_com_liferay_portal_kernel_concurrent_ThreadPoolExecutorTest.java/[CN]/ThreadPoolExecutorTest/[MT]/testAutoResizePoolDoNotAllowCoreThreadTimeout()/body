{
  ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(5,10,TestUtil.KEEPALIVE_TIME,TimeUnit.MILLISECONDS,false,10);
  try {
    Queue<MarkerBlockingJob> markerBlockingJobQueue=new LinkedList<>();
    Assert.assertEquals(0,threadPoolExecutor.getPoolSize());
    for (int i=0; i < 10; i++) {
      MarkerBlockingJob markerBlockingJob=new MarkerBlockingJob(true);
      markerBlockingJobQueue.add(markerBlockingJob);
      threadPoolExecutor.execute(markerBlockingJob);
      markerBlockingJob.waitUntilBlock();
      Assert.assertEquals(i + 1,threadPoolExecutor.getPoolSize());
      Assert.assertEquals(i + 1,threadPoolExecutor.getLargestPoolSize());
      Assert.assertEquals(i + 1,threadPoolExecutor.getTaskCount());
    }
    for (int i=0; i < 10; i++) {
      MarkerBlockingJob markerBlockingJob=new MarkerBlockingJob(true);
      markerBlockingJobQueue.add(markerBlockingJob);
      threadPoolExecutor.execute(markerBlockingJob);
      Assert.assertEquals(10,threadPoolExecutor.getPoolSize());
      Assert.assertEquals(10,threadPoolExecutor.getLargestPoolSize());
      Assert.assertEquals(i + 1,threadPoolExecutor.getPendingTaskCount());
      Assert.assertEquals(i + 11,threadPoolExecutor.getTaskCount());
    }
    for (int i=0; i < 10; i++) {
      try {
        threadPoolExecutor.execute(new MarkerBlockingJob(true));
        Assert.fail();
      }
 catch (      RejectedExecutionException ree) {
      }
      Assert.assertEquals(10,threadPoolExecutor.getPoolSize());
      Assert.assertEquals(10,threadPoolExecutor.getLargestPoolSize());
      Assert.assertEquals(10,threadPoolExecutor.getPendingTaskCount());
      Assert.assertEquals(20,threadPoolExecutor.getTaskCount());
    }
    Assert.assertEquals(20,markerBlockingJobQueue.size());
    for (int i=0; i < 10; i++) {
      MarkerBlockingJob markerBlockingJob=markerBlockingJobQueue.remove();
      markerBlockingJob.unBlock();
      TestUtil.waitUntilEnded(markerBlockingJob);
      Assert.assertEquals(10,threadPoolExecutor.getPoolSize());
      Assert.assertEquals(10,threadPoolExecutor.getLargestPoolSize());
      Assert.assertEquals(9 - i,threadPoolExecutor.getPendingTaskCount());
      Assert.assertEquals(20,threadPoolExecutor.getTaskCount());
      Assert.assertEquals(i + 1,threadPoolExecutor.getCompletedTaskCount());
    }
    for (int i=0; i < 10; i++) {
      MarkerBlockingJob markerBlockingJob=markerBlockingJobQueue.remove();
      markerBlockingJob.unBlock();
      TestUtil.waitUntilEnded(markerBlockingJob);
      Thread.sleep(TestUtil.KEEPALIVE_WAIT);
      Assert.assertEquals((i > 4) ? 5 : 9 - i,threadPoolExecutor.getPoolSize());
      Assert.assertEquals(10,threadPoolExecutor.getLargestPoolSize());
      Assert.assertEquals(0,threadPoolExecutor.getPendingTaskCount());
      Assert.assertEquals(20,threadPoolExecutor.getTaskCount());
      Assert.assertEquals(i + 11,threadPoolExecutor.getCompletedTaskCount());
    }
  }
  finally {
    TestUtil.closePool(threadPoolExecutor,true);
  }
}
