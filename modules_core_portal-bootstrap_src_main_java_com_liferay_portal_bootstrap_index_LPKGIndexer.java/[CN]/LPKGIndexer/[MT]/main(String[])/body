{
  if ((args == null) || (args.length == 0)) {
    System.err.println("Usage: <cmd> <list of lpkg files or directories containing " + "lpkg files>");
    return;
  }
  FastDateFormatFactoryUtil fastDateFormatFactoryUtil=new FastDateFormatFactoryUtil();
  fastDateFormatFactoryUtil.setFastDateFormatFactory(new FastDateFormatFactoryImpl());
  FileUtil fileUtil=new FileUtil();
  fileUtil.setFile(new FileImpl());
  PropsUtil.setProps(new PropsImpl());
  File targetPlatformDir=new File(PropsValues.MODULE_FRAMEWORK_BASE_DIR,TARGET_PLATFORM);
  if (!targetPlatformDir.exists() && !targetPlatformDir.mkdirs()) {
    System.err.printf("[ERROR] Cannot create directory %s because of file " + "permissions\n",targetPlatformDir);
    return;
  }
  List<File> lpkgFiles=new ArrayList<>();
  for (  String arg : args) {
    File file=new File(arg);
    if (!file.exists() || !file.canRead()) {
      continue;
    }
    if (!file.isDirectory()) {
      String name=file.getName();
      if (name.endsWith(".lpkg")) {
        lpkgFiles.add(file);
      }
      continue;
    }
    File[] files=file.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.endsWith(".lpkg");
      }
    }
);
    for (    File entry : files) {
      if (entry.exists() && entry.canRead()) {
        lpkgFiles.add(entry);
      }
    }
  }
  if (lpkgFiles.isEmpty()) {
    System.err.println("No lpkg files were found in args " + Arrays.toString(args));
    return;
  }
  for (  File lpkgFile : lpkgFiles) {
    LPKGIndexer lpkgIndexer=new LPKGIndexer(lpkgFile);
    lpkgIndexer.index(targetPlatformDir);
  }
}
