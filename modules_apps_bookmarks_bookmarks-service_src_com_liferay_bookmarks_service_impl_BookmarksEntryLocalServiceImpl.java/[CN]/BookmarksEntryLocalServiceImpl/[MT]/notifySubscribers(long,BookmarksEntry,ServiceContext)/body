{
  String layoutFullURL=serviceContext.getLayoutFullURL();
  if (!entry.isApproved() || Validator.isNull(layoutFullURL)) {
    return;
  }
  BookmarksGroupServiceOverriddenConfiguration bookmarksGroupServiceConfiguration=moduleConfigurationFactory.getConfiguration(BookmarksGroupServiceOverriddenConfiguration.class,new GroupServiceSettingsLocator(entry.getGroupId(),BookmarksConstants.SERVICE_NAME));
  if ((serviceContext.isCommandAdd() && !bookmarksGroupServiceConfiguration.emailEntryAddedEnabled()) || (serviceContext.isCommandUpdate() && !bookmarksGroupServiceConfiguration.emailEntryUpdatedEnabled())) {
    return;
  }
  String statusByUserName=StringPool.BLANK;
  try {
    User user=userLocalService.getUserById(serviceContext.getGuestOrUserId());
    statusByUserName=user.getFullName();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  String entryTitle=entry.getName();
  String entryURL=layoutFullURL + Portal.FRIENDLY_URL_SEPARATOR + "bookmarks"+ StringPool.SLASH+ entry.getEntryId();
  String fromName=bookmarksGroupServiceConfiguration.emailFromName();
  String fromAddress=bookmarksGroupServiceConfiguration.emailFromAddress();
  LocalizedValuesMap subjectLocalizedValuesMap=null;
  LocalizedValuesMap bodyLocalizedValuesMap=null;
  if (serviceContext.isCommandUpdate()) {
    subjectLocalizedValuesMap=bookmarksGroupServiceConfiguration.emailEntryUpdatedSubject();
    bodyLocalizedValuesMap=bookmarksGroupServiceConfiguration.emailEntryUpdatedBody();
  }
 else {
    subjectLocalizedValuesMap=bookmarksGroupServiceConfiguration.emailEntryAddedSubject();
    bodyLocalizedValuesMap=bookmarksGroupServiceConfiguration.emailEntryAddedBody();
  }
  SubscriptionSender subscriptionSender=new GroupSubscriptionCheckSubscriptionSender(BookmarksResourcePermissionChecker.RESOURCE_NAME);
  subscriptionSender.setClassName(entry.getModelClassName());
  subscriptionSender.setClassPK(entry.getEntryId());
  subscriptionSender.setCompanyId(entry.getCompanyId());
  subscriptionSender.setContextAttributes("[$BOOKMARKS_ENTRY_STATUS_BY_USER_NAME$]",statusByUserName,"[$BOOKMARKS_ENTRY_URL$]",entryURL);
  subscriptionSender.setContextCreatorUserPrefix("BOOKMARKS_ENTRY");
  subscriptionSender.setCreatorUserId(entry.getUserId());
  subscriptionSender.setCurrentUserId(userId);
  subscriptionSender.setEntryTitle(entryTitle);
  subscriptionSender.setEntryURL(entryURL);
  subscriptionSender.setFrom(fromAddress,fromName);
  subscriptionSender.setHtmlFormat(true);
  if (bodyLocalizedValuesMap != null) {
    subscriptionSender.setLocalizedBodyMap(LocalizationUtil.getMap(bodyLocalizedValuesMap));
  }
  if (subjectLocalizedValuesMap != null) {
    subscriptionSender.setLocalizedSubjectMap(LocalizationUtil.getMap(subjectLocalizedValuesMap));
  }
  subscriptionSender.setMailId("bookmarks_entry",entry.getEntryId());
  int notificationType=UserNotificationDefinition.NOTIFICATION_TYPE_ADD_ENTRY;
  if (serviceContext.isCommandUpdate()) {
    notificationType=UserNotificationDefinition.NOTIFICATION_TYPE_UPDATE_ENTRY;
  }
  subscriptionSender.setNotificationType(notificationType);
  subscriptionSender.setPortletId(BookmarksPortletKeys.BOOKMARKS);
  subscriptionSender.setReplyToAddress(fromAddress);
  subscriptionSender.setScopeGroupId(entry.getGroupId());
  subscriptionSender.setServiceContext(serviceContext);
  BookmarksFolder folder=entry.getFolder();
  if (folder != null) {
    subscriptionSender.addPersistedSubscribers(BookmarksFolder.class.getName(),folder.getFolderId());
    for (    Long ancestorFolderId : folder.getAncestorFolderIds()) {
      subscriptionSender.addPersistedSubscribers(BookmarksFolder.class.getName(),ancestorFolderId);
    }
  }
  subscriptionSender.addPersistedSubscribers(BookmarksFolder.class.getName(),entry.getGroupId());
  subscriptionSender.addPersistedSubscribers(BookmarksEntry.class.getName(),entry.getEntryId());
  subscriptionSender.flushNotificationsAsync();
}
