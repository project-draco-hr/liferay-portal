{
  String reCaptchaResponse=ParamUtil.getString(request,"g-recaptcha-response");
  Http.Options options=new Http.Options();
  try {
    options.addPart("secret",PrefsPropsUtil.getString(PropsKeys.CAPTCHA_ENGINE_RECAPTCHA_KEY_PRIVATE,PropsValues.CAPTCHA_ENGINE_RECAPTCHA_KEY_PRIVATE));
  }
 catch (  SystemException se) {
    _log.error(se,se);
  }
  options.addPart("remoteip",request.getRemoteAddr());
  options.addPart("response",reCaptchaResponse);
  options.setLocation(PropsValues.CAPTCHA_ENGINE_RECAPTCHA_URL_VERIFY);
  options.setPost(true);
  String content=null;
  try {
    content=HttpUtil.URLtoString(options);
  }
 catch (  IOException ioe) {
    _log.error(ioe,ioe);
    throw new CaptchaTextException();
  }
  if (content == null) {
    _log.error("reCAPTCHA did not return a result");
    throw new CaptchaTextException();
  }
  try {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject(content);
    String success=jsonObject.getString("success");
    if (StringUtil.equalsIgnoreCase(success,"true")) {
      return true;
    }
    JSONArray jsonArray=jsonObject.getJSONArray("error-codes");
    if ((jsonArray == null) || (jsonArray.length() == 0)) {
      return false;
    }
    StringBundler sb=new StringBundler(jsonArray.length() * 2 - 1);
    for (int i=0; i < jsonArray.length(); i++) {
      sb.append(jsonArray.getString(i));
      if (i < (jsonArray.length() - 1)) {
        sb.append(StringPool.COMMA_AND_SPACE);
      }
    }
    _log.error("reCAPTCHA encountered an error: " + sb.toString());
    return false;
  }
 catch (  JSONException jsone) {
    _log.error("reCAPTCHA did not return a valid result: " + content);
    throw new CaptchaTextException();
  }
}
