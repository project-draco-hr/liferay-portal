{
  ServletContext servletContext=servletContextEvent.getServletContext();
  String contextPath=servletContext.getRealPath(StringPool.BLANK);
  String spiEmbeddedLibDirName=servletContext.getInitParameter("spiEmbeddedLibDir");
  File spiEmbeddedLibDir=new File(contextPath,spiEmbeddedLibDirName);
  if (!spiEmbeddedLibDir.exists() || !spiEmbeddedLibDir.isDirectory()) {
    _log.error("Unable to find SPI embedded lib directory " + spiEmbeddedLibDir.getAbsolutePath());
    return;
  }
  Set<File> jarFiles=new LinkedHashSet<File>();
  for (  File file : spiEmbeddedLibDir.listFiles()) {
    String fileName=file.getName();
    if (fileName.endsWith(".jar")) {
      jarFiles.add(file);
    }
  }
  if (!ServerDetector.isTomcat()) {
    File spiEmbeddedLibExtDir=new File(spiEmbeddedLibDir,"ext");
    if (!spiEmbeddedLibExtDir.exists() || !spiEmbeddedLibExtDir.isDirectory()) {
      _log.error("Unable to find SPI embedded lib ext directory " + spiEmbeddedLibExtDir.getAbsolutePath());
      return;
    }
    for (    File file : spiEmbeddedLibExtDir.listFiles()) {
      String fileName=file.getName();
      if (fileName.endsWith(".jar")) {
        jarFiles.add(file);
      }
    }
    String liferayLibGlobalDir=SystemProperties.get(PropsKeys.LIFERAY_LIB_GLOBAL_DIR);
    File portalServiceJarFile=new File(liferayLibGlobalDir,"portal-service.jar");
    if (!portalServiceJarFile.exists()) {
      _log.error("Unable to find portal-service.jar file " + portalServiceJarFile.getAbsolutePath());
      return;
    }
    jarFiles.add(portalServiceJarFile);
    String jdbcDriverJarDirName=ClassUtil.getParentPath(PortalClassLoaderUtil.getClassLoader(),PropsUtil.get(PropsKeys.JDBC_DEFAULT_DRIVER_CLASS_NAME));
    int pos=jdbcDriverJarDirName.lastIndexOf(".jar");
    pos=jdbcDriverJarDirName.lastIndexOf(CharPool.SLASH,pos);
    jdbcDriverJarDirName=jdbcDriverJarDirName.substring(0,pos + 1);
    File jdbcDriverJarDir=new File(jdbcDriverJarDirName);
    for (    File file : jdbcDriverJarDir.listFiles()) {
      String fileName=file.getName();
      if (fileName.endsWith(".jar")) {
        jarFiles.add(file);
      }
    }
  }
  StringBundler sb=new StringBundler(jarFiles.size() * 2 + 4);
  for (  File file : jarFiles) {
    sb.append(file.getAbsolutePath());
    sb.append(File.pathSeparator);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("SPI embedded lib class path " + sb.toString());
  }
  sb.append(contextPath);
  sb.append("/WEB-INF/classes");
  if (ServerDetector.isTomcat()) {
    sb.append(File.pathSeparator);
    sb.append(ClassPathUtil.getGlobalClassPath());
  }
  SPI_CLASS_PATH=sb.toString();
  if (_log.isDebugEnabled()) {
    _log.debug("SPI class path " + SPI_CLASS_PATH);
  }
  String spiProviderClassName=servletContext.getInitParameter("spiProviderClassName");
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  try {
    Class<SPIProvider> spiProviderClass=null;
    if (SPIUtil.isSPI()) {
      spiProviderClass=(Class<SPIProvider>)loadClassDirectly(contextClassLoader,spiProviderClassName);
    }
 else {
      spiProviderClass=(Class<SPIProvider>)contextClassLoader.loadClass(spiProviderClassName);
    }
    SPIProvider spiProvider=spiProviderClass.newInstance();
    boolean result=spiProviderReference.compareAndSet(null,spiProvider);
    if (!result) {
      _log.error("Duplicate SPI provider " + spiProvider + " is already registered in servlet context "+ servletContext.getContextPath());
    }
 else {
      MPIHelperUtil.registerSPIProvider(spiProvider);
    }
  }
 catch (  Exception e) {
    _log.error("Unable to create SPI provider with name " + spiProviderClassName,e);
  }
}
