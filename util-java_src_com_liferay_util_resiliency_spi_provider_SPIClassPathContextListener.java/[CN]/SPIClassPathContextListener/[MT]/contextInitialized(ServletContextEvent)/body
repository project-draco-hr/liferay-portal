{
  ServletContext servletContext=servletContextEvent.getServletContext();
  String contextPath=servletContext.getRealPath(StringPool.BLANK);
  String embeddedLibDirName=servletContext.getInitParameter("embeddedLibDir");
  File embeddedLibDir=new File(contextPath,embeddedLibDirName);
  if (!embeddedLibDir.exists() || !embeddedLibDir.isDirectory()) {
    _log.error("Unable to find embedded lib directory " + embeddedLibDir.getAbsolutePath());
    return;
  }
  List<File> jarFiles=new ArrayList<File>();
  for (  File file : embeddedLibDir.listFiles()) {
    String fileName=file.getName();
    if (fileName.endsWith(".jar")) {
      jarFiles.add(file);
    }
  }
  StringBundler sb=new StringBundler(jarFiles.size() * 2 + 4);
  for (  File file : jarFiles) {
    sb.append(file.getAbsolutePath());
    sb.append(File.pathSeparator);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Embedded lib class path " + sb.toString());
  }
  sb.append(contextPath);
  sb.append("/WEB-INF/classes");
  sb.append(File.pathSeparator);
  sb.append(ClassPathUtil.getGlobalClassPath());
  SPI_CLASS_PATH=sb.toString();
  if (_log.isDebugEnabled()) {
    _log.debug("SPI class path " + SPI_CLASS_PATH);
  }
  String spiProviderClassName=servletContext.getInitParameter("spiProviderClassName");
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  try {
    Class<SPIProvider> spiProviderClass=(Class<SPIProvider>)loadClassDirectly(contextClassLoader,spiProviderClassName);
    SPIProvider spiProvider=spiProviderClass.newInstance();
    boolean result=spiProviderReference.compareAndSet(null,spiProvider);
    if (!result) {
      _log.error("Duplicate SPI provider " + spiProvider + " is already registered in servlet context "+ servletContext.getContextPath());
    }
 else {
      MPIHelperUtil.registerSPIProvider(spiProvider);
    }
  }
 catch (  Exception e) {
    _log.error("Unable to create SPI provider with name " + spiProviderClassName,e);
  }
}
