{
  AccessControlled accessControlled=findAnnotation(methodInvocation);
  if (accessControlled == AccessControl.NULL_ACCESS_CONTROLLED) {
    return null;
  }
  boolean remoteAccess=AccessControlThreadLocal.isRemoteAccess();
  if (!remoteAccess) {
    return null;
  }
  Object targetObject=methodInvocation.getThis();
  Class<?> targetClass=targetObject.getClass();
  String servletContextName=ClassLoaderPool.getContextName(targetClass.getClassLoader());
  SPI spi=SPIRegistryUtil.getServletContextSPI(servletContextName);
  if (spi == null) {
    serviceBeanAopCacheManager.removeMethodInterceptor(methodInvocation,this);
    return null;
  }
  ServiceMethodProcessCallable serviceMethodProcessCallable=new ServiceMethodProcessCallable(IdentifiableBeanInvokerUtil.createMethodHandler(methodInvocation));
  Future<Serializable> futureResult=IntrabandRPCUtil.execute(spi.getRegistrationReference(),serviceMethodProcessCallable);
  Object result=futureResult.get();
  Method method=methodInvocation.getMethod();
  Class<?> returnType=method.getReturnType();
  if (returnType == void.class) {
    result=nullResult;
  }
  return result;
}
