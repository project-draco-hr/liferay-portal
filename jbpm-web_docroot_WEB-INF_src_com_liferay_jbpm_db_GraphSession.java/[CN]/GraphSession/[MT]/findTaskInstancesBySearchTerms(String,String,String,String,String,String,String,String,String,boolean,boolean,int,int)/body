{
  List list=new ArrayList();
  try {
    String sql="";
    int index=0;
    if (Validator.isNull(assignedTo) || assignedTo.equals("all")) {
      sql+="(";
      sql+=CustomSQLUtil.get(FIND_TASK_INSTANCES_BY_ACTOR);
      sql+=") ";
      sql+="UNION ";
      sql+="(";
      sql+=CustomSQLUtil.get(FIND_TASK_INSTANCES_BY_POOL);
      sql+=") ";
      index=2;
    }
 else     if (assignedTo.equals("me")) {
      sql+=CustomSQLUtil.get(FIND_TASK_INSTANCES_BY_ACTOR);
      index=1;
    }
 else     if (assignedTo.equals("pool")) {
      sql+=CustomSQLUtil.get(FIND_TASK_INSTANCES_BY_POOL);
      index=1;
    }
    sql+="ORDER BY taskActorId DESC, taskCreate ASC";
    String endDateCheck="(JBPM_TASKINSTANCE.END_ IS NULL) ";
    if (!hideEndedTasks) {
      endDateCheck="((JBPM_TASKINSTANCE.END_ >= ? " + "[$AND_OR_NULL_CHECK$]) AND " + "(JBPM_TASKINSTANCE.END_ <= ? [$AND_OR_NULL_CHECK$])) ";
    }
    sql=StringUtil.replace(sql,"[$END_DATE_CHECK$]",endDateCheck);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    SQLQuery q=_session.createSQLQuery(sql);
    q.addScalar("taskId",Hibernate.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    for (int i=0; i < index; i++) {
      qPos.add(taskName);
      qPos.add(taskName);
      qPos.add(definitionName);
      qPos.add(definitionName);
      qPos.add(_getDate(createDateGT,true));
      qPos.add(_getDate(createDateGT,true));
      qPos.add(_getDate(createDateLT,false));
      qPos.add(_getDate(createDateLT,false));
      qPos.add(_getDate(startDateGT,true));
      qPos.add(_getDate(startDateGT,true));
      qPos.add(_getDate(startDateLT,false));
      qPos.add(_getDate(startDateLT,false));
      if (!hideEndedTasks) {
        qPos.add(_getDate(endDateGT,true));
        qPos.add(_getDate(endDateGT,true));
        qPos.add(_getDate(endDateLT,false));
        qPos.add(_getDate(endDateLT,false));
      }
      qPos.add(_userId);
    }
    Iterator itr=QueryUtil.iterate(q,_dialect,begin,end);
    while (itr.hasNext()) {
      Long taskId=(Long)itr.next();
      TaskInstance taskInstance=_jbpmContext.loadTaskInstance(taskId.longValue());
      WorkflowUtil.initTask(taskInstance);
      list.add(taskInstance);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
    throw new RuntimeException(e.getMessage());
  }
  return list;
}
