{
  List list=new ArrayList();
  try {
    int definitionVersionInt=0;
    if (!Validator.isNumber(definitionVersion)) {
      definitionVersion=null;
    }
 else {
      definitionVersionInt=GetterUtil.getInteger(definitionVersion);
    }
    String assignedUserIdInnerJoin=StringPool.BLANK;
    String assignedUserIdCheck=StringPool.BLANK;
    if (Validator.isNotNull(assignedUserId)) {
      assignedUserIdInnerJoin="INNER JOIN JBPM_TOKEN ON JBPM_TOKEN.PROCESSINSTANCE_ = " + "JBPM_PROCESSINSTANCE.ID_ INNER JOIN " + "JBPM_TASKINSTANCE ON JBPM_TASKINSTANCE.TOKEN_ = "+ "JBPM_TOKEN.ID_ ";
      assignedUserIdCheck="(JBPM_TASKINSTANCE.ACTORID_ = ?) AND ";
    }
    String endDateCheck="(JBPM_PROCESSINSTANCE.END_ IS NULL) ";
    if (!hideEndedTasks) {
      endDateCheck="((JBPM_PROCESSINSTANCE.END_ >= ? [$AND_OR_NULL_CHECK$]) " + "AND (JBPM_PROCESSINSTANCE.END_ <= ? " + "[$AND_OR_NULL_CHECK$])) ";
    }
    String sql=CustomSQLUtil.get(FIND_PROCESS_INSTANCES_BY_SEARCH_TERMS);
    sql=StringUtil.replace(sql,"[$ASSIGNED_USER_ID_INNER_JOIN$]",assignedUserIdInnerJoin);
    sql=StringUtil.replace(sql,"[$ASSIGNED_USER_ID_CHECK$]",assignedUserIdCheck);
    sql=StringUtil.replace(sql,"[$END_DATE_CHECK$]",endDateCheck);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    SQLQuery q=_session.createSQLQuery(sql);
    q.addScalar("instanceId",Hibernate.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(definitionName);
    qPos.add(definitionName);
    qPos.add(definitionVersionInt);
    qPos.add(definitionVersion);
    qPos.add(_getDate(startDateGT,true));
    qPos.add(_getDate(startDateGT,true));
    qPos.add(_getDate(startDateLT,false));
    qPos.add(_getDate(startDateLT,false));
    if (Validator.isNotNull(assignedUserId)) {
      qPos.add(assignedUserId);
    }
    if (!hideEndedTasks) {
      qPos.add(_getDate(endDateGT,true));
      qPos.add(_getDate(endDateGT,true));
      qPos.add(_getDate(endDateLT,false));
      qPos.add(_getDate(endDateLT,false));
    }
    Iterator itr=QueryUtil.iterate(q,_dialect,begin,end);
    while (itr.hasNext()) {
      Long instanceId=(Long)itr.next();
      ProcessInstance processInstance=_jbpmContext.loadProcessInstance(instanceId.longValue());
      WorkflowUtil.initInstance(processInstance);
      list.add(processInstance);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
    throw new RuntimeException(e.getMessage());
  }
  return list;
}
