{
  final Project project=getProject();
  final File temporaryDir=new File(getTemporaryDir(),"src");
  project.delete(temporaryDir);
  project.copy(new Action<CopySpec>(){
    @Override public void execute(    CopySpec copySpec){
      String originalLibSrcDirName=getOriginalLibSrcDirName();
      if (!originalLibSrcDirName.equals(".")) {
        Map<Object,Object> leadingPathReplacementsMap=new HashMap<>();
        leadingPathReplacementsMap.put(originalLibSrcDirName,"");
        copySpec.eachFile(new ReplaceLeadingPathAction(leadingPathReplacementsMap));
      }
      copySpec.filter(_fixCrLfArgs,FixCrLfFilter.class);
      copySpec.from(project.zipTree(getOriginalLibSrcFile()));
      copySpec.include(getFileNames());
      copySpec.into(temporaryDir);
      copySpec.setIncludeEmptyDirs(false);
    }
  }
);
  return temporaryDir;
}
