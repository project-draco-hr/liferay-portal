{
  final Project project=getProject();
  File patchesTemporaryDir=fixPatchFiles();
  final File srcTemporaryDir=fixSrcFiles();
  for (  final File patchFile : getSortedFiles(patchesTemporaryDir)) {
    final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    ExecResult execResult=project.exec(new Action<ExecSpec>(){
      @Override public void execute(      ExecSpec execSpec){
        execSpec.setExecutable("patch");
        execSpec.setIgnoreExitValue(true);
        execSpec.setWorkingDir(srcTemporaryDir);
        execSpec.args(getArgs());
        execSpec.args("--input=" + FileUtil.relativize(patchFile,srcTemporaryDir));
        execSpec.setStandardOutput(byteArrayOutputStream);
      }
    }
);
    System.out.println(byteArrayOutputStream.toString());
    execResult.rethrowFailure();
    execResult.assertNormalExitValue();
  }
  FileTree fileTree=project.fileTree(srcTemporaryDir);
  for (  File file : fileTree) {
    File patchedSrcDir=getPatchedSrcDir(file.getName());
    if (patchedSrcDir == null) {
      continue;
    }
    Path patchedSrcDirPath=patchedSrcDir.toPath();
    String relativePath=FileUtil.relativize(file,srcTemporaryDir);
    patchedSrcDirPath=patchedSrcDirPath.resolve(relativePath);
    Files.createDirectories(patchedSrcDirPath.getParent());
    Files.move(file.toPath(),patchedSrcDirPath,StandardCopyOption.REPLACE_EXISTING);
  }
}
