{
  if ((versionOverrideFile == null) || !versionOverrideFile.exists()) {
    return;
  }
  final Properties versionOverrides=GUtil.loadProperties(versionOverrideFile);
  String bundleVersion=versionOverrides.getProperty(Constants.BUNDLE_VERSION);
  if (Validator.isNotNull(bundleVersion)) {
    Map<String,String> bundleInstructions=getBundleInstructions(project);
    bundleInstructions.put(Constants.BUNDLE_VERSION,bundleVersion);
    project.setVersion(bundleVersion);
  }
  ConfigurationContainer configurationContainer=project.getConfigurations();
  Action<Configuration> action=new Action<Configuration>(){
    @Override public void execute(    Configuration configuration){
      ResolutionStrategy resolutionStrategy=configuration.getResolutionStrategy();
      resolutionStrategy.eachDependency(new Action<DependencyResolveDetails>(){
        @Override public void execute(        DependencyResolveDetails dependencyResolveDetails){
          ModuleVersionSelector moduleVersionSelector=dependencyResolveDetails.getRequested();
          String key=moduleVersionSelector.getGroup() + _DEPENDENCY_KEY_SEPARATOR + moduleVersionSelector.getName();
          String version=versionOverrides.getProperty(key);
          if (Validator.isNotNull(version)) {
            dependencyResolveDetails.useVersion(version);
          }
        }
      }
);
    }
  }
;
  configurationContainer.all(action);
  final Copy copy=(Copy)GradleUtil.getTask(project,JavaPlugin.PROCESS_RESOURCES_TASK_NAME);
  copy.filesMatching("**/packageinfo",new Action<FileCopyDetails>(){
    @Override public void execute(    final FileCopyDetails fileCopyDetails){
      fileCopyDetails.filter(new Closure<Void>(copy){
        @SuppressWarnings("unused") public String doCall(        String line){
          if (Validator.isNull(line)) {
            return line;
          }
          String packagePath=fileCopyDetails.getPath();
          packagePath=packagePath.substring(0,packagePath.lastIndexOf('/'));
          packagePath=packagePath.replace('/','.');
          String versionOverride=versionOverrides.getProperty(packagePath);
          if (Validator.isNotNull(versionOverride)) {
            return "version " + versionOverride;
          }
          return line;
        }
      }
);
    }
  }
);
}
