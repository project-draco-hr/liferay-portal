{
  Action<Task> action=new Action<Task>(){
    @Override public void execute(    Task task){
      try {
        _execute(task.getProject());
      }
 catch (      IOException ioe) {
        throw new UncheckedIOException(ioe);
      }
    }
    private void _execute(    Project project) throws IOException {
      boolean hasPackageInfoFiles=_hasPackageInfoFiles(project);
      if (versionOverrideFile != null) {
        Properties versions=_getVersions(project.getProjectDir(),null);
        if (hasPackageInfoFiles) {
          GitUtil.executeGit(project,"checkout","--","bnd.bnd","**/packageinfo");
        }
 else {
          GitUtil.executeGit(project,"checkout","--","bnd.bnd");
        }
        Properties committedVersions=_getVersions(project.getProjectDir(),null);
        _removeDuplicates(versions,committedVersions);
        _saveVersions(project.getProjectDir(),versions,versionOverrideFile);
        GitUtil.executeGit(project,"add",project.relativePath(versionOverrideFile));
      }
 else       if (hasPackageInfoFiles) {
        GitUtil.executeGit(project,"add","bnd.bnd","**/packageinfo");
      }
 else {
        GitUtil.executeGit(project,"add","bnd.bnd");
      }
      String message=project.getName() + " packageinfo";
      GitUtil.commit(project,message,true);
    }
    private boolean _hasPackageInfoFiles(    Project project){
      Map<String,Object> args=new HashMap<>();
      args.put("dir",project.getProjectDir());
      args.put("include","src/main/resources/**/packageinfo");
      FileTree fileTree=project.fileTree(args);
      if (!fileTree.isEmpty()) {
        return true;
      }
      return false;
    }
    private void _removeDuplicates(    Properties properties,    Properties otherProperties){
      Set<Map.Entry<Object,Object>> entrySet=properties.entrySet();
      Iterator<Map.Entry<Object,Object>> iterator=entrySet.iterator();
      while (iterator.hasNext()) {
        Map.Entry<Object,Object> entry=iterator.next();
        String key=(String)entry.getKey();
        if (Objects.equals(entry.getValue(),otherProperties.getProperty(key))) {
          iterator.remove();
        }
      }
    }
  }
;
  task.doLast(action);
  if (task instanceof VerificationTask) {
    VerificationTask verificationTask=(VerificationTask)task;
    verificationTask.setIgnoreFailures(true);
  }
}
