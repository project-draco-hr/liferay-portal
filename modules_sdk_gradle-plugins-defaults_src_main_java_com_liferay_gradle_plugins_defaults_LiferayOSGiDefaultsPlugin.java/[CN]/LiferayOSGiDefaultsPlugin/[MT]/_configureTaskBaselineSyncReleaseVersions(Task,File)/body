{
  Action<Task> action=new Action<Task>(){
    @Override public void execute(    Task task){
      try {
        Project project=task.getProject();
        if (versionOverrideFile != null) {
          Properties versions=_getVersions(project.getProjectDir(),null);
          _saveVersions(project.getProjectDir(),versions,versionOverrideFile);
          GitUtil.executeGit(project,"add",project.relativePath(versionOverrideFile));
        }
 else         if (_hasPackageInfoFiles(project)) {
          GitUtil.executeGit(project,"add","bnd.bnd","**/packageinfo");
        }
 else {
          GitUtil.executeGit(project,"add","bnd.bnd");
        }
        String message=project.getName() + " packageinfo";
        GitUtil.commit(project,message,true);
      }
 catch (      IOException ioe) {
        throw new UncheckedIOException(ioe);
      }
    }
    private boolean _hasPackageInfoFiles(    Project project){
      Map<String,Object> args=new HashMap<>();
      args.put("dir",project.getProjectDir());
      args.put("include","src/main/resources/**/packageinfo");
      FileTree fileTree=project.fileTree(args);
      if (!fileTree.isEmpty()) {
        return true;
      }
      return false;
    }
  }
;
  task.doLast(action);
  if (task instanceof VerificationTask) {
    VerificationTask verificationTask=(VerificationTask)task;
    verificationTask.setIgnoreFailures(true);
  }
}
