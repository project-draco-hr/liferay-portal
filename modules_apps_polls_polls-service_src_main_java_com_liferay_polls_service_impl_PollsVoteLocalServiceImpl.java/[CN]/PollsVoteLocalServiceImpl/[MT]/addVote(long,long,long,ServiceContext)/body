{
  Date now=new Date();
  PollsChoice choice=pollsChoicePersistence.findByPrimaryKey(choiceId);
  if (choice.getQuestionId() != questionId) {
    throw new NoSuchQuestionException("{questionId=" + questionId + "}");
  }
  PollsQuestion question=pollsQuestionPersistence.findByPrimaryKey(questionId);
  if (question.isExpired(serviceContext,now)) {
    throw new QuestionExpiredException();
  }
  question.setLastVoteDate(serviceContext.getCreateDate(now));
  pollsQuestionPersistence.update(question);
  PollsVote vote=null;
  ThemeDisplay themeDisplay=serviceContext.getThemeDisplay();
  if (Validator.isNotNull(themeDisplay) && themeDisplay.isSignedIn()) {
    vote=pollsVotePersistence.fetchByQ_U_First(questionId,userId,null);
  }
  if (vote != null) {
    StringBundler sb=new StringBundler(5);
    sb.append("{questionId=");
    sb.append(questionId);
    sb.append(", userId=");
    sb.append(userId);
    sb.append("}");
    throw new DuplicateVoteException(sb.toString());
  }
  String userName=null;
  User user=userPersistence.fetchByPrimaryKey(userId);
  if (Validator.isNotNull(user)) {
    userName=user.getFullName();
  }
  if (Validator.isNull(userName)) {
    userName=serviceContext.translate("anonymous");
  }
  long voteId=counterLocalService.increment();
  vote=pollsVotePersistence.create(voteId);
  vote.setUuid(serviceContext.getUuid());
  vote.setGroupId(serviceContext.getScopeGroupId());
  vote.setCompanyId(serviceContext.getCompanyId());
  vote.setUserId(userId);
  vote.setUserName(userName);
  vote.setQuestionId(questionId);
  vote.setChoiceId(choiceId);
  vote.setVoteDate(serviceContext.getCreateDate(now));
  pollsVotePersistence.update(vote);
  return vote;
}
