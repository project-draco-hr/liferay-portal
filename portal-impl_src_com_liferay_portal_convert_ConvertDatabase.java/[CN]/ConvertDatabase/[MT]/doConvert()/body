{
  DataSource dataSource=getDataSource();
  Dialect dialect=DialectDetector.getDialect(dataSource);
  DB db=DBFactoryUtil.getDB(dialect);
  List<String> modelNames=ModelHintsUtil.getModels();
  List<Tuple> tableDetails=new ArrayList<Tuple>();
  Connection connection=dataSource.getConnection();
  try {
    MaintenanceUtil.appendStatus("Collecting information for database tables to migration");
    for (    String modelName : modelNames) {
      String implClassName=modelName.replaceFirst("(\\.model\\.)(\\p{Upper}.*)","$1impl.$2Impl");
      Class<?> implClass=InstancePool.get(implClassName).getClass();
      Field[] fields=implClass.getFields();
      for (      Field field : fields) {
        Tuple tuple=null;
        String fieldName=field.getName();
        if (fieldName.equals("TABLE_NAME")) {
          tuple=getTableDetails(implClass,field,fieldName);
        }
 else         if (fieldName.startsWith("MAPPING_TABLE_") && fieldName.endsWith("_NAME")) {
          tuple=getTableDetails(implClass,field,fieldName);
        }
        if (tuple != null) {
          tableDetails.add(tuple);
        }
      }
    }
    for (    Tuple tuple : _UNMAPPED_TABLES) {
      tableDetails.add(tuple);
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Migrating database tables");
    }
    for (int i=0; i < tableDetails.size(); i++) {
      if ((i > 0) && (i % (tableDetails.size() / 4) == 0)) {
        MaintenanceUtil.appendStatus((i * 100 / tableDetails.size()) + "%");
      }
      Tuple tuple=tableDetails.get(i);
      String table=(String)tuple.getObject(0);
      Object[][] columns=(Object[][])tuple.getObject(1);
      String sqlCreate=(String)tuple.getObject(2);
      migrateTable(db,connection,table,columns,sqlCreate);
    }
  }
  finally {
    DataAccess.cleanUp(connection);
  }
  MaintenanceUtil.appendStatus("Please change your JDBC settings before restarting server");
  ShutdownUtil.shutdown(0);
}
