{
  Map<String,FileItem[]> fileParameters=new HashMap<>();
  Map<String,List<String>> regularParameters=new HashMap<>();
  for (int i=0; i < 10; i++) {
    PortletContainerTestUtil.putFileParameter(getClass(),_TXT_DEPENDENCY,fileParameters);
    PortletContainerTestUtil.putRegularParameter(regularParameters);
  }
  LiferayServletRequest liferayServletRequest=PortletContainerTestUtil.mockLiferayServletRequest(getClass(),_TXT_DEPENDENCY);
  String parameter=RandomTestUtil.randomString();
  MockHttpServletRequest mockHttpServletRequest=(MockHttpServletRequest)liferayServletRequest.getRequest();
  mockHttpServletRequest.addParameter(parameter,parameter);
  UploadPortletRequest uploadPortletRequest=new UploadPortletRequestImpl(new UploadServletRequestImpl((HttpServletRequest)liferayServletRequest.getRequest(),fileParameters,regularParameters),null,_portletNamespace);
  for (  Map.Entry<String,List<String>> entry : regularParameters.entrySet()) {
    String key=entry.getKey();
    String[] parameterValues=uploadPortletRequest.getParameterValues(key);
    List<String> parameterValuesList=ListUtil.fromArray(parameterValues);
    Assert.assertTrue(parameterValuesList.containsAll(entry.getValue()));
  }
  String[] requestParameterValues=uploadPortletRequest.getParameterValues(parameter);
  ArrayUtil.contains(requestParameterValues,parameter);
  for (  Map.Entry<String,FileItem[]> entry : fileParameters.entrySet()) {
    String key=entry.getKey();
    String[] parameterValues=uploadPortletRequest.getParameterValues(key);
    List<String> parameterValuesList=ListUtil.fromArray(parameterValues);
    Assert.assertFalse(parameterValuesList.contains(key));
  }
}
