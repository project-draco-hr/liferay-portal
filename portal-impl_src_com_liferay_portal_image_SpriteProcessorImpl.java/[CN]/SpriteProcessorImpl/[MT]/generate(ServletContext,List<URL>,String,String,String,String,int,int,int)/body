{
  if (imageURLs.size() < 1) {
    return null;
  }
  Collections.sort(imageURLs,new PropertyComparator("path"));
  File spriteRootDir=null;
  if (Validator.isNull(spriteRootDirName)) {
    File tempDir=(File)servletContext.getAttribute(JavaConstants.JAVAX_SERVLET_CONTEXT_TEMPDIR);
    spriteRootDir=new File(tempDir,SpriteProcessor.PATH);
  }
 else {
    spriteRootDir=new File(spriteRootDirName);
  }
  spriteRootDir.mkdirs();
  File spritePropertiesFile=new File(spriteRootDir,spritePropertiesFileName);
  File spritePropertiesParentFile=spritePropertiesFile.getParentFile();
  spritePropertiesParentFile.mkdirs();
  boolean build=false;
  long lastModified=0;
  if (spritePropertiesFile.exists()) {
    lastModified=spritePropertiesFile.lastModified();
    URLConnection urlConnection=null;
    for (    URL imageURL : imageURLs) {
      urlConnection=imageURL.openConnection();
      if ((urlConnection != null) && (urlConnection.getLastModified() > lastModified)) {
        build=true;
        break;
      }
    }
  }
 else {
    build=true;
  }
  if (!build) {
    String spritePropertiesString=FileUtil.read(spritePropertiesFile);
    if (Validator.isNull(spritePropertiesString)) {
      return null;
    }
 else {
      return PropertiesUtil.load(spritePropertiesString);
    }
  }
  List<RenderedImage> renderedImages=new ArrayList<>();
  Properties spriteProperties=new SortedProperties();
  float x=0;
  float y=0;
  URLConnection urlConnection=null;
  for (  URL imageURL : imageURLs) {
    urlConnection=imageURL.openConnection();
    if ((urlConnection != null) && (urlConnection.getContentLength() > maxSize)) {
      continue;
    }
    try {
      ImageBag imageBag=ImageToolUtil.read(urlConnection.getInputStream());
      RenderedImage renderedImage=imageBag.getRenderedImage();
      int height=renderedImage.getHeight();
      int width=renderedImage.getWidth();
      if ((height <= maxHeight) && (width <= maxWidth)) {
        renderedImage=convert(renderedImage);
        renderedImage=TranslateDescriptor.create(renderedImage,x,y,null,null);
        renderedImages.add(renderedImage);
        String key=ServletContextUtil.getResourcePath(imageURL);
        int pos=key.indexOf(rootPath);
        if (pos == 0) {
          key=key.substring(rootPath.length());
        }
        String contextPath=ContextPathUtil.getContextPath(servletContext);
        key=contextPath.concat(key);
        String value=(int)y + "," + height+ ","+ width;
        spriteProperties.setProperty(key,value);
        y+=renderedImage.getHeight();
      }
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to process " + imageURL);
      }
      if (_log.isDebugEnabled()) {
        _log.debug(e,e);
      }
    }
  }
  if (renderedImages.size() <= 1) {
    renderedImages.clear();
    spriteProperties.clear();
  }
 else {
    RenderedImage renderedImage=MosaicDescriptor.create(renderedImages.toArray(new RenderedImage[renderedImages.size()]),MosaicDescriptor.MOSAIC_TYPE_OVERLAY,null,null,null,null,null);
    File spriteFile=new File(spriteRootDir,spriteFileName);
    File spriteDir=spriteFile.getParentFile();
    spriteDir.mkdirs();
    ImageIO.write(renderedImage,"png",spriteFile);
    if (lastModified > 0) {
      spriteFile.setLastModified(lastModified);
    }
  }
  FileUtil.write(spritePropertiesFile,PropertiesUtil.toString(spriteProperties));
  if (lastModified > 0) {
    spritePropertiesFile.setLastModified(lastModified);
  }
  return spriteProperties;
}
