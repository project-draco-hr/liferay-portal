{
  int height=renderedImage.getHeight();
  int width=renderedImage.getWidth();
  SampleModel sampleModel=renderedImage.getSampleModel();
  ColorModel colorModel=renderedImage.getColorModel();
  Raster raster=renderedImage.getData();
  DataBuffer dataBuffer=raster.getDataBuffer();
  if (colorModel instanceof IndexColorModel) {
    IndexColorModel indexColorModel=(IndexColorModel)colorModel;
    int mapSize=indexColorModel.getMapSize();
    byte[][] data=new byte[4][mapSize];
    indexColorModel.getReds(data[0]);
    indexColorModel.getGreens(data[1]);
    indexColorModel.getBlues(data[2]);
    indexColorModel.getAlphas(data[3]);
    LookupTableJAI lookupTableJAI=new LookupTableJAI(data);
    renderedImage=LookupDescriptor.create(renderedImage,lookupTableJAI,null);
  }
 else   if (sampleModel.getNumBands() == 2) {
    List<Byte> bytesList=new ArrayList<>(height * width * _NUM_OF_BANDS);
    List<Byte> tempBytesList=new ArrayList<>(_NUM_OF_BANDS);
    for (int i=0; i < dataBuffer.getSize(); i++) {
      int mod=(i + 1) % 2;
      int elemPos=i;
      if (mod == 0) {
        tempBytesList.add((byte)dataBuffer.getElem(elemPos - 1));
        tempBytesList.add((byte)dataBuffer.getElem(elemPos - 1));
      }
      tempBytesList.add((byte)dataBuffer.getElem(elemPos));
      if (mod == 0) {
        Collections.reverse(tempBytesList);
        bytesList.addAll(tempBytesList);
        tempBytesList.clear();
      }
    }
    byte[] data=ArrayUtil.toArray(bytesList.toArray(new Byte[bytesList.size()]));
    DataBuffer newDataBuffer=new DataBufferByte(data,data.length);
    renderedImage=createRenderedImage(renderedImage,height,width,newDataBuffer);
  }
 else   if (colorModel.getTransparency() != Transparency.TRANSLUCENT) {
    List<Byte> bytesList=new ArrayList<>(height * width * _NUM_OF_BANDS);
    List<Byte> tempBytesList=new ArrayList<>(_NUM_OF_BANDS);
    for (int i=0; i < dataBuffer.getSize(); i++) {
      int mod=(i + 1) % 3;
      int elemPos=i;
      tempBytesList.add((byte)dataBuffer.getElem(elemPos));
      if (mod == 0) {
        tempBytesList.add((byte)255);
        Collections.reverse(tempBytesList);
        bytesList.addAll(tempBytesList);
        tempBytesList.clear();
      }
    }
    byte[] data=ArrayUtil.toArray(bytesList.toArray(new Byte[bytesList.size()]));
    DataBuffer newDataBuffer=new DataBufferByte(data,data.length);
    renderedImage=createRenderedImage(renderedImage,height,width,newDataBuffer);
  }
  return renderedImage;
}
