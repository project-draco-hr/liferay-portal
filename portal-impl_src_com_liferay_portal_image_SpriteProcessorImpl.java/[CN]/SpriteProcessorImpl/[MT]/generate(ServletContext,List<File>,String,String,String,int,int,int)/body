{
  if (imageFiles.size() < 1) {
    return null;
  }
  if (spritePropertiesRootPath.endsWith(StringPool.BACK_SLASH) || spritePropertiesRootPath.endsWith(StringPool.SLASH)) {
    spritePropertiesRootPath=spritePropertiesRootPath.substring(0,spritePropertiesRootPath.length() - 1);
  }
  Collections.sort(imageFiles);
  String spriteRootDirName=getSpriteRootDirName(servletContext,imageFiles);
  File spritePropertiesFile=new File(spriteRootDirName + StringPool.SLASH + spritePropertiesFileName);
  boolean build=false;
  long lastModified=0;
  if (spritePropertiesFile.exists()) {
    lastModified=spritePropertiesFile.lastModified();
    for (    File imageFile : imageFiles) {
      if (imageFile.lastModified() > lastModified) {
        build=true;
        break;
      }
    }
  }
 else {
    build=true;
  }
  if (!build) {
    String spritePropertiesString=FileUtil.read(spritePropertiesFile);
    if (Validator.isNull(spritePropertiesString)) {
      return null;
    }
 else {
      return PropertiesUtil.load(spritePropertiesString);
    }
  }
  List<RenderedImage> renderedImages=new ArrayList<RenderedImage>();
  Properties spriteProperties=new SortedProperties();
  float x=0;
  float y=0;
  for (  File imageFile : imageFiles) {
    if (imageFile.length() > maxSize) {
      continue;
    }
    try {
      ImageBag imageBag=ImageProcessorUtil.read(imageFile);
      RenderedImage renderedImage=imageBag.getRenderedImage();
      int height=renderedImage.getHeight();
      int width=renderedImage.getWidth();
      if ((height <= maxHeight) && (width <= maxWidth)) {
        renderedImage=convert(renderedImage);
        renderedImage=TranslateDescriptor.create(renderedImage,x,y,null,null);
        renderedImages.add(renderedImage);
        String key=StringUtil.replace(imageFile.toString(),CharPool.BACK_SLASH,CharPool.SLASH);
        key=key.substring(spritePropertiesRootPath.toString().length());
        String value=(int)y + "," + height+ ","+ width;
        spriteProperties.setProperty(key,value);
        y+=renderedImage.getHeight();
      }
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to process " + imageFile);
      }
      if (_log.isDebugEnabled()) {
        _log.debug(e,e);
      }
    }
  }
  if (renderedImages.size() <= 1) {
    renderedImages.clear();
    spriteProperties.clear();
  }
 else {
    RenderedImage renderedImage=MosaicDescriptor.create(renderedImages.toArray(new RenderedImage[renderedImages.size()]),MosaicDescriptor.MOSAIC_TYPE_OVERLAY,null,null,null,null,null);
    File spriteFile=new File(spriteRootDirName + StringPool.SLASH + spriteFileName);
    spriteFile.mkdirs();
    ImageIO.write(renderedImage,"png",spriteFile);
    if (lastModified > 0) {
      spriteFile.setLastModified(lastModified);
    }
    ImageWorker imageWorker=new ImageWorker(renderedImage);
    imageWorker.forceIndexColorModelForGIF(true);
    renderedImage=imageWorker.getPlanarImage();
    spriteFile=new File(spriteRootDirName + StringPool.SLASH + StringUtil.replace(spriteFileName,".png",".gif"));
    FileOutputStream fos=new FileOutputStream(spriteFile);
    try {
      ImageProcessorUtil.encodeGIF(renderedImage,fos);
    }
  finally {
      fos.close();
    }
    if (lastModified > 0) {
      spriteFile.setLastModified(lastModified);
    }
  }
  FileUtil.write(spritePropertiesFile,PropertiesUtil.toString(spriteProperties));
  if (lastModified > 0) {
    spritePropertiesFile.setLastModified(lastModified);
  }
  return spriteProperties;
}
