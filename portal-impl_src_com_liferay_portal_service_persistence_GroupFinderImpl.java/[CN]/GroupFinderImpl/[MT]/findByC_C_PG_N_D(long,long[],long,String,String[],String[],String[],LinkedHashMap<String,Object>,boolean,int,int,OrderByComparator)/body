{
  names=CustomSQLUtil.keywords(names);
  realNames=CustomSQLUtil.keywords(realNames);
  descriptions=CustomSQLUtil.keywords(descriptions);
  if (params == null) {
    params=_emptyLinkedHashMap;
  }
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=null;
  LinkedHashMap<String,Object> params3=null;
  LinkedHashMap<String,Object> params4=null;
  Long userId=(Long)params.get("usersGroups");
  boolean inherit=GetterUtil.getBoolean(params.get("inherit"),true);
  boolean doUnion=Validator.isNotNull(userId) && inherit;
  if (doUnion) {
    params2=new LinkedHashMap<String,Object>(params1);
    params2.remove("usersGroups");
    params2.put("groupOrg",userId);
    params3=new LinkedHashMap<String,Object>(params1);
    params3.remove("usersGroups");
    params3.put("groupsOrgs",userId);
    params4=new LinkedHashMap<String,Object>(params1);
    params4.remove("usersGroups");
    params4.put("groupsUserGroups",userId);
  }
  String sql=null;
  if (classNameIds == _getGroupOrganizationClassNameIds()) {
    String sqlKey=_buildSQLKey(params1,params2,params3,params4,obc,doUnion);
    sql=_findByC_C_PG_N_DSQLCache.get(sqlKey);
  }
  if (sql == null) {
    String findByC_PG_N_D_SQL=CustomSQLUtil.get(FIND_BY_C_C_PG_N_D);
    if (classNameIds == null) {
      findByC_PG_N_D_SQL=StringUtil.replace(findByC_PG_N_D_SQL,"AND (Group_.classNameId = ?)",StringPool.BLANK);
    }
 else {
      findByC_PG_N_D_SQL=StringUtil.replace(findByC_PG_N_D_SQL,"Group_.classNameId = ?","Group_.classNameId = ".concat(StringUtil.merge(classNameIds," OR Group_.classNameId = ")));
    }
    findByC_PG_N_D_SQL=replaceOrderBy(findByC_PG_N_D_SQL,obc);
    StringBundler sb=new StringBundler();
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL,params1));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    if (doUnion) {
      sb.append(" UNION (");
      sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL,params2));
      sb.append(") UNION (");
      sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL,params3));
      sb.append(") UNION (");
      sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL,params4));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    if (obc != null) {
      sb.append(" ORDER BY ");
      sb.append(obc.toString());
    }
    sql=sb.toString();
    if (classNameIds == _getGroupOrganizationClassNameIds()) {
      String sqlKey=_buildSQLKey(params1,params2,params3,params4,obc,doUnion);
      _findByC_C_PG_N_DSQLCache.put(sqlKey,sql);
    }
  }
  sql=StringUtil.replace(sql,"[$PARENT_GROUP_ID_COMPARATOR$]",parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Group_.name) LIKE ? OR lower(Group_.name)",StringPool.LIKE,false,names);
  sql=CustomSQLUtil.replaceKeywords(sql,"lower(Group_.description)",StringPool.LIKE,true,descriptions);
  sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("groupId",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params1);
    qPos.add(companyId);
    qPos.add(parentGroupId);
    qPos.add(names);
    qPos.add(realNames);
    qPos.add(names);
    qPos.add(descriptions,2);
    if (doUnion) {
      setJoin(qPos,params2);
      qPos.add(companyId);
      qPos.add(parentGroupId);
      qPos.add(names);
      qPos.add(realNames);
      qPos.add(names);
      qPos.add(descriptions,2);
      setJoin(qPos,params3);
      qPos.add(companyId);
      qPos.add(parentGroupId);
      qPos.add(names);
      qPos.add(realNames);
      qPos.add(names);
      qPos.add(descriptions,2);
      setJoin(qPos,params4);
      qPos.add(companyId);
      qPos.add(parentGroupId);
      qPos.add(names);
      qPos.add(realNames);
      qPos.add(names);
      qPos.add(descriptions,2);
    }
    List<Long> groupIds=(List<Long>)QueryUtil.list(q,getDialect(),start,end);
    List<Group> groups=new ArrayList<Group>(groupIds.size());
    for (    Long groupId : groupIds) {
      Group group=GroupUtil.findByPrimaryKey(groupId);
      groups.add(group);
    }
    return groups;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
