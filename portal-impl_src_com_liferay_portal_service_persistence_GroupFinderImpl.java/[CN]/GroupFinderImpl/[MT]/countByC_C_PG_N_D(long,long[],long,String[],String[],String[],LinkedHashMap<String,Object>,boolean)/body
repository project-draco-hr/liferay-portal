{
  String parentGroupIdComparator=StringPool.EQUAL;
  if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) {
    parentGroupIdComparator=StringPool.NOT_EQUAL;
  }
  names=CustomSQLUtil.keywords(names);
  realNames=CustomSQLUtil.keywords(realNames);
  descriptions=CustomSQLUtil.keywords(descriptions);
  if (params == null) {
    params=_emptyLinkedHashMap;
  }
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=null;
  LinkedHashMap<String,Object> params3=null;
  LinkedHashMap<String,Object> params4=null;
  Long userId=(Long)params.get("usersGroups");
  boolean doUnion=Validator.isNotNull(userId);
  if (doUnion) {
    params2=new LinkedHashMap<String,Object>(params1);
    params2.remove("usersGroups");
    params2.put("groupOrg",userId);
    params3=new LinkedHashMap<String,Object>(params1);
    params3.remove("usersGroups");
    params3.put("groupsOrgs",userId);
    params4=new LinkedHashMap<String,Object>(params1);
    params4.remove("usersGroups");
    params4.put("groupsUserGroups",userId);
  }
  Session session=null;
  try {
    session=openSession();
    Set<Long> groupIds=new HashSet<Long>();
    groupIds.addAll(countByC_C_PG_N_D(session,companyId,classNameIds,parentGroupId,parentGroupIdComparator,names,realNames,descriptions,params1,andOperator));
    if (doUnion) {
      groupIds.addAll(countByC_C_PG_N_D(session,companyId,classNameIds,parentGroupId,parentGroupIdComparator,names,realNames,descriptions,params2,andOperator));
      groupIds.addAll(countByC_C_PG_N_D(session,companyId,classNameIds,parentGroupId,parentGroupIdComparator,names,realNames,descriptions,params3,andOperator));
      groupIds.addAll(countByC_C_PG_N_D(session,companyId,classNameIds,parentGroupId,parentGroupIdComparator,names,realNames,descriptions,params4,andOperator));
    }
    return groupIds.size();
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
