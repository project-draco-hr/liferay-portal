{
  name=StringUtil.lowerCase(name);
  description=StringUtil.lowerCase(description);
  if (params == null) {
    params=new LinkedHashMap<String,Object>();
  }
  Long userId=(Long)params.get("usersGroups");
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=new LinkedHashMap<String,Object>();
  params2.putAll(params1);
  if (userId != null) {
    params2.remove("usersGroups");
    params2.put("groupsOrgs",userId);
  }
  LinkedHashMap<String,Object> params3=new LinkedHashMap<String,Object>();
  params3.putAll(params1);
  if (userId != null) {
    params3.remove("usersGroups");
    params3.put("groupsUserGroups",userId);
  }
  StringBuilder sb=new StringBuilder();
  sb.append("(");
  sb.append(CustomSQLUtil.get(FIND_BY_C_N_D));
  String sql=sb.toString();
  sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params1));
  sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params1));
  sb=new StringBuilder();
  sb.append(sql);
  sb.append(")");
  if (Validator.isNotNull(userId)) {
    sb.append(" UNION (");
    sb.append(CustomSQLUtil.get(FIND_BY_C_N_D));
    sql=sb.toString();
    sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params2));
    sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params2));
    sb=new StringBuilder();
    sb.append(sql);
    sb.append(") UNION (");
    sb.append(CustomSQLUtil.get(FIND_BY_C_N_D));
    sql=sb.toString();
    sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params3));
    sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params3));
    sb=new StringBuilder();
    sb.append(sql);
    sb.append(")");
  }
  sql=sb.toString();
  sql=CustomSQLUtil.replaceOrderBy(sql,obc);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("groupId",Type.STRING);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params1);
    qPos.add(companyId);
    qPos.add(name);
    qPos.add(name);
    qPos.add(description);
    qPos.add(description);
    if (Validator.isNotNull(userId)) {
      setJoin(qPos,params2);
      qPos.add(companyId);
      qPos.add(name);
      qPos.add(name);
      qPos.add(description);
      qPos.add(description);
      setJoin(qPos,params3);
      qPos.add(companyId);
      qPos.add(name);
      qPos.add(name);
      qPos.add(description);
      qPos.add(description);
    }
    List<Group> groups=new ArrayList<Group>();
    Iterator<String> itr=(Iterator<String>)QueryUtil.iterate(q,getDialect(),start,end);
    while (itr.hasNext()) {
      long groupId=GetterUtil.getLong(itr.next());
      Group group=GroupUtil.findByPrimaryKey(groupId);
      groups.add(group);
    }
    return groups;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
