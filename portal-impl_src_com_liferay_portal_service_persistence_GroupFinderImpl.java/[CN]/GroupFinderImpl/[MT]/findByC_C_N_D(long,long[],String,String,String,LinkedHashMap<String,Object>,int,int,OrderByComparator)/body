{
  name=StringUtil.lowerCase(name);
  description=StringUtil.lowerCase(description);
  if (params == null) {
    params=_emptyLinkedHashMap;
  }
  Long userId=(Long)params.get("usersGroups");
  boolean inherit=GetterUtil.getBoolean((Serializable)params.get("inherit"),true);
  boolean doUnion=Validator.isNotNull(userId) && inherit;
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=null;
  LinkedHashMap<String,Object> params3=null;
  LinkedHashMap<String,Object> params4=null;
  if (doUnion) {
    params2=new LinkedHashMap<String,Object>(params1);
    params2.remove("usersGroups");
    params2.put("groupOrg",userId);
    params3=new LinkedHashMap<String,Object>(params1);
    params3.remove("usersGroups");
    params3.put("groupsOrgs",userId);
    params4=new LinkedHashMap<String,Object>(params1);
    params4.remove("usersGroups");
    params4.put("groupsUserGroups",userId);
  }
  String sql=null;
  if (classNameIds == _getGroupOrganizationClassNameIds()) {
    String sqlKey=_buildFindByC_C_N_DSQLKey(params1,params2,params3,params4,obc,doUnion);
    sql=_findByC_C_N_DSQLCache.get(sqlKey);
  }
  if (sql == null) {
    String findByCND_SQL=CustomSQLUtil.get(FIND_BY_C_N_D);
    if (classNameIds == null) {
      findByCND_SQL=StringUtil.replace(findByCND_SQL,"AND (Group_.classNameId = ?)",StringPool.BLANK);
    }
 else {
      findByCND_SQL=StringUtil.replace(findByCND_SQL,"Group_.classNameId = ?","Group_.classNameId = ".concat(StringUtil.merge(classNameIds," OR Group_.classNameId = ")));
    }
    StringBundler sb=new StringBundler();
    sb.append("(");
    sb.append(replaceJoinAndWhere(findByCND_SQL,params1));
    sb.append(")");
    if (doUnion) {
      sb.append(" UNION (");
      sb.append(replaceJoinAndWhere(findByCND_SQL,params2));
      sb.append(") UNION (");
      sb.append(replaceJoinAndWhere(findByCND_SQL,params3));
      sb.append(") UNION (");
      sb.append(replaceJoinAndWhere(findByCND_SQL,params4));
      sb.append(")");
    }
    if (obc != null) {
      sb.append(" ORDER BY ");
      sb.append(obc.toString());
    }
    sql=sb.toString();
    if (classNameIds == _getGroupOrganizationClassNameIds()) {
      String sqlKey=_buildFindByC_C_N_DSQLKey(params1,params2,params3,params4,obc,doUnion);
      _findByC_C_N_DSQLCache.put(sqlKey,sql);
    }
  }
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("groupId",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params1);
    qPos.add(companyId);
    qPos.add(name);
    qPos.add(realName);
    qPos.add(name);
    qPos.add(description);
    qPos.add(description);
    if (doUnion) {
      setJoin(qPos,params2);
      qPos.add(companyId);
      qPos.add(name);
      qPos.add(realName);
      qPos.add(name);
      qPos.add(description);
      qPos.add(description);
      setJoin(qPos,params3);
      qPos.add(companyId);
      qPos.add(name);
      qPos.add(realName);
      qPos.add(name);
      qPos.add(description);
      qPos.add(description);
      setJoin(qPos,params4);
      qPos.add(companyId);
      qPos.add(name);
      qPos.add(realName);
      qPos.add(name);
      qPos.add(description);
      qPos.add(description);
    }
    List<Long> groupIds=(List<Long>)QueryUtil.list(q,getDialect(),start,end);
    List<Group> groups=new ArrayList<Group>(groupIds.size());
    for (    Long groupId : groupIds) {
      Group group=GroupUtil.findByPrimaryKey(groupId);
      groups.add(group);
    }
    return groups;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
