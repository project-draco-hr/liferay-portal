{
  name=StringUtil.lowerCase(name);
  description=StringUtil.lowerCase(description);
  if (params == null) {
    params=new LinkedHashMap<String,Object>();
  }
  Long userId=(Long)params.get("usersGroups");
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=new LinkedHashMap<String,Object>(params1);
  LinkedHashMap<String,Object> params3=new LinkedHashMap<String,Object>(params1);
  if (userId != null) {
    params2.remove("usersGroups");
    params2.put("groupsOrgs",userId);
    params3.remove("usersGroups");
    params3.put("groupsUserGroups",userId);
  }
  String findByCND=CustomSQLUtil.get(FIND_BY_C_N_D);
  findByCND=StringUtil.replace(findByCND,"Group_.classNameId = ?","Group_.classNameId = ".concat(StringUtil.merge(classNameIds," OR Group_.classNameId = ")));
  findByCND=CustomSQLUtil.replaceOrderBy(findByCND,obc);
  StringBundler sb=new StringBundler();
  sb.append("(");
  sb.append(replaceJoinAndWhere(findByCND,params1));
  sb.append(")");
  if (Validator.isNotNull(userId)) {
    sb.append(" UNION (");
    sb.append(replaceJoinAndWhere(findByCND,params2));
    sb.append(") UNION (");
    sb.append(replaceJoinAndWhere(findByCND,params3));
    sb.append(")");
  }
  String sql=sb.toString();
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("groupId",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    setJoin(qPos,params1);
    qPos.add(companyId);
    qPos.add(name);
    qPos.add(realName);
    qPos.add(name);
    qPos.add(description);
    qPos.add(description);
    if (Validator.isNotNull(userId)) {
      setJoin(qPos,params2);
      qPos.add(companyId);
      qPos.add(name);
      qPos.add(realName);
      qPos.add(name);
      qPos.add(description);
      qPos.add(description);
      setJoin(qPos,params3);
      qPos.add(companyId);
      qPos.add(name);
      qPos.add(realName);
      qPos.add(name);
      qPos.add(description);
      qPos.add(description);
    }
    List<Long> groupIds=(List<Long>)QueryUtil.list(q,getDialect(),start,end);
    List<Group> groups=new ArrayList<Group>(groupIds.size());
    for (    Long groupId : groupIds) {
      Group group=GroupUtil.findByPrimaryKey(groupId);
      groups.add(group);
    }
    return groups;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
