{
  name=StringUtil.lowerCase(name);
  description=StringUtil.lowerCase(description);
  if (params == null) {
    params=new LinkedHashMap();
  }
  Long userId=(Long)params.get("usersGroups");
  LinkedHashMap params1=params;
  LinkedHashMap params2=new LinkedHashMap();
  params2.putAll(params1);
  if (userId != null) {
    params2.remove("usersGroups");
    params2.put("groupsOrgs",userId);
  }
  LinkedHashMap params3=new LinkedHashMap();
  params3.putAll(params1);
  if (userId != null) {
    params3.remove("usersGroups");
    params3.put("groupsUserGroups",userId);
  }
  StringMaker sm=new StringMaker();
  sm.append("(");
  sm.append(CustomSQLUtil.get(FIND_BY_C_N_D));
  String sql=sm.toString();
  sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params1));
  sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params1));
  sm=new StringMaker();
  sm.append(sql);
  sm.append(")");
  if (Validator.isNotNull(userId)) {
    sm.append(" UNION (");
    sm.append(CustomSQLUtil.get(FIND_BY_C_N_D));
    sql=sm.toString();
    sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params2));
    sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params2));
    sm=new StringMaker();
    sm.append(sql);
    sm.append(") UNION (");
    sm.append(CustomSQLUtil.get(FIND_BY_C_N_D));
    sql=sm.toString();
    sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(params3));
    sql=StringUtil.replace(sql,"[$WHERE$]",getWhere(params3));
    sm=new StringMaker();
    sm.append(sql);
    sm.append(")");
  }
  sql=sm.toString();
  sql=CustomSQLUtil.replaceOrderBy(sql,obc);
  String finderSQL=sql;
  boolean[] finderClassNamesCacheEnabled=new boolean[]{GroupModelImpl.CACHE_ENABLED,LayoutSetModelImpl.CACHE_ENABLED,PermissionModelImpl.CACHE_ENABLED,ResourceModelImpl.CACHE_ENABLED,ResourceCodeModelImpl.CACHE_ENABLED,UserGroupRoleModelImpl.CACHE_ENABLED,GroupModelImpl.CACHE_ENABLED_GROUPS_ORGS,GroupModelImpl.CACHE_ENABLED_GROUPS_ROLES,GroupModelImpl.CACHE_ENABLED_GROUPS_USERGROUPS,RoleModelImpl.CACHE_ENABLED_ROLES_PERMISSIONS,UserModelImpl.CACHE_ENABLED_USERS_GROUPS,UserModelImpl.CACHE_ENABLED_USERS_ORGS,UserModelImpl.CACHE_ENABLED_USERS_USERGROUPS};
  String[] finderClassNames=new String[]{Group.class.getName(),LayoutSet.class.getName(),Permission.class.getName(),Resource.class.getName(),ResourceCode.class.getName(),UserGroupRole.class.getName(),"Groups_Orgs","Groups_Roles","Groups_UserGroups","Roles_Permissions","Users_Groups","Users_Orgs","Users_UserGroups"};
  String finderMethodName="customFindByC_N_D";
  String finderParams[]=new String[]{Long.class.getName(),String.class.getName(),String.class.getName(),LinkedHashMap.class.getName(),String.class.getName(),String.class.getName()};
  Object finderArgs[]=new Object[]{new Long(companyId),name,description,params.toString(),String.valueOf(begin),String.valueOf(end)};
  Object result=null;
  if (!ArrayUtil.contains(finderClassNamesCacheEnabled,false)) {
    result=FinderCache.getResult(finderSQL,finderClassNames,finderMethodName,finderParams,finderArgs);
  }
  if (result == null) {
    Session session=null;
    try {
      session=HibernateUtil.openSession();
      SQLQuery q=session.createSQLQuery(sql);
      q.addScalar("groupId",Hibernate.STRING);
      QueryPos qPos=QueryPos.getInstance(q);
      setJoin(qPos,params1);
      qPos.add(companyId);
      qPos.add(name);
      qPos.add(name);
      qPos.add(description);
      qPos.add(description);
      if (Validator.isNotNull(userId)) {
        setJoin(qPos,params2);
        qPos.add(companyId);
        qPos.add(name);
        qPos.add(name);
        qPos.add(description);
        qPos.add(description);
        setJoin(qPos,params3);
        qPos.add(companyId);
        qPos.add(name);
        qPos.add(name);
        qPos.add(description);
        qPos.add(description);
      }
      List list=new ArrayList();
      Iterator itr=QueryUtil.iterate(q,HibernateUtil.getDialect(),begin,end);
      while (itr.hasNext()) {
        long groupId=GetterUtil.getLong((String)itr.next());
        Group group=GroupUtil.findByPrimaryKey(groupId);
        list.add(group);
      }
      FinderCache.putResult(finderSQL,finderClassNamesCacheEnabled,finderClassNames,finderMethodName,finderParams,finderArgs,list);
      return list;
    }
 catch (    Exception e) {
      throw new SystemException(e);
    }
 finally {
      HibernateUtil.closeSession(session);
    }
  }
 else {
    return (List)result;
  }
}
