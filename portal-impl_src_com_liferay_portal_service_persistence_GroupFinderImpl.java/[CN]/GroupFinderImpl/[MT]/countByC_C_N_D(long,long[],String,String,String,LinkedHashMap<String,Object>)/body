{
  name=StringUtil.lowerCase(name);
  description=StringUtil.lowerCase(description);
  if (params == null) {
    params=_emptyLinkedHashMap;
  }
  Long userId=(Long)params.get("usersGroups");
  boolean doUnion=Validator.isNotNull(userId);
  LinkedHashMap<String,Object> params1=params;
  LinkedHashMap<String,Object> params2=null;
  LinkedHashMap<String,Object> params3=null;
  LinkedHashMap<String,Object> params4=null;
  if (doUnion) {
    params2=new LinkedHashMap<String,Object>(params1);
    params2.remove("usersGroups");
    params2.put("groupOrg",userId);
    params3=new LinkedHashMap<String,Object>(params1);
    params3.remove("usersGroups");
    params3.put("groupsOrgs",userId);
    params4=new LinkedHashMap<String,Object>(params1);
    params4.remove("usersGroups");
    params4.put("groupsUserGroups",userId);
  }
  Session session=null;
  try {
    session=openSession();
    Set<Long> groupIds=new HashSet<Long>();
    groupIds.addAll(countByC_C_N_D(session,companyId,classNameIds,name,realName,description,params1));
    if (doUnion) {
      groupIds.addAll(countByC_C_N_D(session,companyId,classNameIds,name,realName,description,params2));
      groupIds.addAll(countByC_C_N_D(session,companyId,classNameIds,name,realName,description,params3));
      groupIds.addAll(countByC_C_N_D(session,companyId,classNameIds,name,realName,description,params4));
    }
    return groupIds.size();
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
