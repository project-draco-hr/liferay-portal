{
  Exception exception=new NullPointerException();
  char[] expectedMessageWithCRLFChars=new char[_messageChars.length];
  System.arraycopy(_messageChars,0,expectedMessageWithCRLFChars,0,expectedMessageWithCRLFChars.length);
  expectedMessageWithCRLFChars[CharPool.NEW_LINE]=CharPool.NEW_LINE;
  expectedMessageWithCRLFChars[CharPool.RETURN]=CharPool.RETURN;
  Log log=SanitizerLogWrapper.allowCRLF(_log);
  try {
    log.debug(_message);
    log.debug(_message,exception);
    log.error(_message);
    log.error(_message,exception);
    log.fatal(_message);
    log.fatal(_message,exception);
    log.info(_message);
    log.info(_message,exception);
    log.trace(_message);
    log.trace(_message,exception);
    log.warn(_message);
    log.warn(_message,exception);
    List<LoggingEvent> loggingEvents=_captureAppender.getLoggingEvents();
    Assert.assertNotNull(loggingEvents);
    Assert.assertEquals(12,loggingEvents.size());
    for (    LoggingEvent loggingEvent : loggingEvents) {
      String message=loggingEvent.getRenderedMessage();
      Assert.assertTrue(message.startsWith(SanitizerLogWrapper.CRLF_WARNING));
      int messageWithCRLFCharsLength=message.length() - SanitizerLogWrapper.CRLF_WARNING.length();
      char[] messageWithCRLFChars=new char[messageWithCRLFCharsLength];
      message.getChars(SanitizerLogWrapper.CRLF_WARNING.length(),message.length(),messageWithCRLFChars,0);
      Assert.assertArrayEquals(expectedMessageWithCRLFChars,messageWithCRLFChars);
    }
    loggingEvents.clear();
    _log.debug(_message);
    _log.debug(_message,exception);
    _log.error(_message);
    _log.error(_message,exception);
    _log.fatal(_message);
    _log.fatal(_message,exception);
    _log.info(_message);
    _log.info(_message,exception);
    _log.trace(_message);
    _log.trace(_message,exception);
    _log.warn(_message);
    _log.warn(_message,exception);
    Assert.assertNotNull(loggingEvents);
    Assert.assertEquals(12,loggingEvents.size());
    for (    LoggingEvent loggingEvent : loggingEvents) {
      String message=loggingEvent.getRenderedMessage();
      char[] messageChars=message.toCharArray();
      Assert.assertArrayEquals(_messageChars,messageChars);
    }
  }
  finally {
    _captureAppender.close();
  }
}
