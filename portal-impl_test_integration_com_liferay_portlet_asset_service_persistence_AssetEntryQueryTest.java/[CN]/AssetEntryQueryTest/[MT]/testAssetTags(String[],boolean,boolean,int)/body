{
  ThreadLocalCache<Object[]> threadLocalCache=ThreadLocalCacheManager.getThreadLocalCache(Lifecycle.REQUEST,AssetEntryServiceImpl.class.getName());
  threadLocalCache.removeAll();
  Group group=ServiceTestUtil.addGroup();
  long[] assetTagIds=AssetTagLocalServiceUtil.getTagIds(group.getGroupId(),assetTagNames);
  AssetEntryQuery assetEntryQuery=new AssetEntryQuery();
  assetEntryQuery=buildAssetEntryQueryTags(assetEntryQuery,assetTagIds,any,not);
  assetEntryQuery.setGroupIds(new long[]{group.getGroupId()});
  int initialEntries=AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext(group.getGroupId());
  serviceContext.setAssetTagNames(_assetTagNames1);
  BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),"Liferay Architectural Approach",StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,false,null,null,null,serviceContext);
  serviceContext.setAssetTagNames(_assetTagNames2);
  BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),"Modularity with OSGI",StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,false,null,null,null,serviceContext);
  threadLocalCache.removeAll();
  assetTagIds=AssetTagLocalServiceUtil.getTagIds(group.getGroupId(),assetTagNames);
  assetEntryQuery=buildAssetEntryQueryTags(assetEntryQuery,assetTagIds,any,not);
  int allTagsEntries=AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
  Assert.assertEquals(initialEntries + expectedResults,allTagsEntries);
}
