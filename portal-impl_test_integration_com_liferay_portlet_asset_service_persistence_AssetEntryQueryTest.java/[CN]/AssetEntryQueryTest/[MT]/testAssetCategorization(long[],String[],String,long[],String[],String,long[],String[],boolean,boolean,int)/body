{
  ThreadLocalCache<Object[]> threadLocalCache=ThreadLocalCacheManager.getThreadLocalCache(Lifecycle.REQUEST,AssetEntryServiceImpl.class.getName());
  threadLocalCache.removeAll();
  AssetEntryQuery assetEntryQuery=buildAssetEntryQuery(_group.getGroupId(),assetCategoryIds,assetTagNames,any,not);
  int initialEntries=AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(_group.getGroupId());
  if (assetCategoryIds1 != null) {
    serviceContext.setAssetCategoryIds(assetCategoryIds1);
  }
  if (assetTagNames1 != null) {
    serviceContext.setAssetTagNames(assetTagNames1);
  }
  BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title1,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,false,null,null,null,serviceContext);
  if (assetCategoryIds2 != null) {
    serviceContext.setAssetCategoryIds(assetCategoryIds2);
  }
  if (assetTagNames2 != null) {
    serviceContext.setAssetTagNames(assetTagNames2);
  }
  BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title2,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,false,null,null,null,serviceContext);
  threadLocalCache.removeAll();
  assetEntryQuery=buildAssetEntryQuery(_group.getGroupId(),assetCategoryIds,assetTagNames,any,not);
  int allTagsEntries=AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
  Assert.assertEquals(initialEntries + expectedResults,allTagsEntries);
}
