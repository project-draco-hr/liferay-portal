{
  ThreadLocalCache<Object[]> threadLocalCache=ThreadLocalCacheManager.getThreadLocalCache(Lifecycle.REQUEST,AssetEntryServiceImpl.class.getName());
  threadLocalCache.removeAll();
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(_group.getGroupId(),TestPropsValues.getUserId());
  Date now=new Date();
  for (int i=0; i < viewCounts.length; i++) {
    BlogsEntry entry=BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),RandomTestUtil.randomString(),RandomTestUtil.randomString(),now,serviceContext);
    AssetEntry assetEntry=AssetEntryLocalServiceUtil.getEntry(BlogsEntry.class.getName(),entry.getEntryId());
    assetEntry.setViewCount(viewCounts[i]);
    AssetEntryLocalServiceUtil.updateAssetEntry(assetEntry);
  }
  threadLocalCache.removeAll();
  AssetEntryQuery assetEntryQuery=buildAssetEntryQuery(_group.getGroupId(),null,null,false,false);
  assetEntryQuery.setOrderByCol1("viewCount");
  assetEntryQuery.setOrderByType1(orderByType);
  List<AssetEntry> assetEntries=AssetEntryServiceUtil.getEntries(assetEntryQuery);
  for (int i=0; i < assetEntries.size(); i++) {
    AssetEntry assetEntry=assetEntries.get(i);
    Assert.assertEquals(assetEntry.getViewCount(),orderedViewCounts[i]);
  }
}
