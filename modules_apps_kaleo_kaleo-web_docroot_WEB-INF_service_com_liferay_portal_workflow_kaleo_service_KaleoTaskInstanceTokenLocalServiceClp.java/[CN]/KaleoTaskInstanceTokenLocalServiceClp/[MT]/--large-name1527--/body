{
  Object returnObj=null;
  try {
    returnObj=_invokableLocalService.invokeMethod(_methodName41,_methodParameterTypes41,new Object[]{ClpSerializer.translateInput(taskName),ClpSerializer.translateInput(assetTypes),ClpSerializer.translateInput(assetPrimaryKeys),ClpSerializer.translateInput(dueDateGT),ClpSerializer.translateInput(dueDateLT),ClpSerializer.translateInput(completed),ClpSerializer.translateInput(searchByUserRoles),andOperator,start,end,ClpSerializer.translateInput(orderByComparator),ClpSerializer.translateInput(serviceContext)});
  }
 catch (  Throwable t) {
    t=ClpSerializer.translateThrowable(t);
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t.getClass().getName() + " is not a valid exception");
    }
  }
  return (java.util.List<com.liferay.portal.workflow.kaleo.model.KaleoTaskInstanceToken>)ClpSerializer.translateOutput(returnObj);
}
