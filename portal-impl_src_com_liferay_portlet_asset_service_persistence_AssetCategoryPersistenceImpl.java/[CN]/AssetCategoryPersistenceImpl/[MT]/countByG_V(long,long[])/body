{
  Object[] finderArgs=new Object[]{groupId,StringUtil.merge(vocabularyIds)};
  Long count=(Long)FinderCacheUtil.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_V,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_COUNT_ASSETCATEGORY_WHERE);
    query.append(_FINDER_COLUMN_G_V_GROUPID_2);
    if ((vocabularyIds == null) || (vocabularyIds.length > 0)) {
      query.append(StringPool.OPEN_PARENTHESIS);
      for (int i=0; i < vocabularyIds.length; i++) {
        query.append(_FINDER_COLUMN_G_V_VOCABULARYID_2);
        if ((i + 1) < vocabularyIds.length) {
          query.append(WHERE_OR);
        }
      }
      query.append(StringPool.CLOSE_PARENTHESIS);
    }
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      if (vocabularyIds != null) {
        qPos.add(vocabularyIds);
      }
      count=(Long)q.uniqueResult();
      FinderCacheUtil.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_V,finderArgs,count);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_V,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return count.intValue();
}
