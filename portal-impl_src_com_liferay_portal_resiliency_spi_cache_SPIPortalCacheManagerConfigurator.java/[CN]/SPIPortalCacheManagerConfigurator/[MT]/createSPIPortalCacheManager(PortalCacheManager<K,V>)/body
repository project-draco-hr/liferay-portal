{
  if (!SPIUtil.isSPI()) {
    return portalCacheManager;
  }
  SPI spi=SPIUtil.getSPI();
  RegistrationReference registrationReference=spi.getRegistrationReference();
  Future<String[]> future=IntrabandProxyInstallationUtil.installSkeleton(registrationReference,PortalCache.class,new IntrabandPortalCacheTargetLocator(false));
  String[] skeletonProxyMethodSignatures=future.get();
  String[] stubProxyMethodSignatures=IntrabandProxyUtil.getProxyMethodSignatures(BaseIntrabandPortalCacheManager.getPortalCacheStubClass());
  IntrabandProxyInstallationUtil.checkProxyMethodSignatures(skeletonProxyMethodSignatures,stubProxyMethodSignatures);
  future=IntrabandProxyInstallationUtil.installSkeleton(registrationReference,PortalCacheManager.class,new IntrabandPortalCacheTargetLocator(true));
  skeletonProxyMethodSignatures=future.get();
  Class<? extends PortalCacheManager<K,V>> stubClass=(Class<? extends PortalCacheManager<K,V>>)IntrabandProxyUtil.getStubClass(BaseIntrabandPortalCacheManager.class,PortalCacheManager.class.getName());
  stubProxyMethodSignatures=IntrabandProxyUtil.getProxyMethodSignatures(stubClass);
  IntrabandProxyInstallationUtil.checkProxyMethodSignatures(skeletonProxyMethodSignatures,stubProxyMethodSignatures);
  portalCacheManager=IntrabandProxyUtil.newStubInstance(stubClass,StringPool.BLANK,registrationReference,_INTRABAND_PROXY_EXCEPTION_HANDLER);
  return portalCacheManager;
}
