{
  HttpServletRequest request=serviceContext.getRequest();
  if (!(request instanceof UploadRequest)) {
    return;
  }
  UploadRequest uploadRequest=(UploadRequest)request;
  Fields fields=StorageEngineUtil.getFields(storageId);
  List<String> fieldNames=getFieldNames(fieldNamespace,fieldName,serviceContext);
  List<Serializable> fieldValues=new ArrayList<Serializable>(fieldNames.size());
  for (int i=0; i < fieldNames.size(); i++) {
    InputStream inputStream=null;
    try {
      String fileName=uploadRequest.getFileName(fieldNames.get(i));
      inputStream=uploadRequest.getFileAsStream(fieldNames.get(i),true);
      if ((inputStream == null) && fields.contains(fieldName)) {
        Field field=fields.get(fieldName);
        Serializable fieldValue=field.getValue(field.getDefaultLocale(),i);
        if (fieldValue != null) {
          JSONObject recordFileJSONObject=JSONFactoryUtil.createJSONObject(String.valueOf(fieldValue));
          fileName=recordFileJSONObject.getString("name");
          inputStream=DLStoreUtil.getFileAsStream(serviceContext.getCompanyId(),CompanyConstants.SYSTEM,recordFileJSONObject.getString("path"));
        }
      }
      if (inputStream != null) {
        String filePath=storeFieldFile(baseModel,fieldName,inputStream,serviceContext);
        JSONObject recordFileJSONObject=JSONFactoryUtil.createJSONObject();
        recordFileJSONObject.put("name",fileName);
        recordFileJSONObject.put("path",filePath);
        recordFileJSONObject.put("className",baseModel.getModelClassName());
        recordFileJSONObject.put("classPK",String.valueOf(baseModel.getPrimaryKeyObj()));
        String fieldValue=recordFileJSONObject.toString();
        fieldValues.add(fieldValue);
      }
    }
  finally {
      StreamUtil.cleanUp(inputStream);
    }
  }
  DDMStructure ddmStructure=DDMStructureLocalServiceUtil.getStructure(structureId);
  Field field=createField(ddmStructure,fieldName,fieldValues,serviceContext);
  fields.put(field);
  StorageEngineUtil.update(storageId,fields,true,serviceContext);
}
