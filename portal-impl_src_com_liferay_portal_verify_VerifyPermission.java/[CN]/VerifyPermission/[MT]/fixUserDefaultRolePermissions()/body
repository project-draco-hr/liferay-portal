{
  DB db=DBManagerUtil.getDB();
  DBType dbType=db.getDBType();
  try (LoggingTimer loggingTimer=new LoggingTimer()){
    long userClassNameId=PortalUtil.getClassNameId(User.class);
    long userGroupClassNameId=PortalUtil.getClassNameId(UserGroup.class);
    long[] companyIds=PortalInstances.getCompanyIdsBySQL();
    if (dbType == DBType.MYSQL) {
      fixUserDefaultRolePermissionsMySQL(userClassNameId,userGroupClassNameId,companyIds);
      return;
    }
    if (dbType == DBType.ORACLE) {
      fixUserDefaultRolePermissionsOracle(userClassNameId,userGroupClassNameId,companyIds);
      return;
    }
    for (    long companyId : companyIds) {
      Role powerUserRole=RoleLocalServiceUtil.getRole(companyId,RoleConstants.POWER_USER);
      Role userRole=RoleLocalServiceUtil.getRole(companyId,RoleConstants.USER);
      StringBundler sb=new StringBundler(20);
      sb.append("update ResourcePermission set roleId = ");
      sb.append(userRole.getRoleId());
      sb.append(" where resourcePermissionId in (select ");
      sb.append("resourcePermissionId from ResourcePermission ");
      sb.append("inner join Layout on ResourcePermission.companyId ");
      sb.append("= Layout.companyId and ResourcePermission.primKey ");
      sb.append("like replace('[$PLID$]_LAYOUT_%', '[$PLID$]', ");
      sb.append("cast_text(Layout.plid)) inner join Group_ on ");
      sb.append("Layout.groupId = Group_.groupId where ");
      sb.append("ResourcePermission.scope = ");
      sb.append(ResourceConstants.SCOPE_INDIVIDUAL);
      sb.append(" and ResourcePermission.roleId = ");
      sb.append(powerUserRole.getRoleId());
      sb.append(" and (Group_.classNameId = ");
      sb.append(userClassNameId);
      sb.append(" or Group_.classNameId = ");
      sb.append(userGroupClassNameId);
      sb.append(") and Layout.type_ = '");
      sb.append(LayoutConstants.TYPE_PORTLET);
      sb.append("')");
      runSQL(sb.toString());
    }
  }
  finally {
    EntityCacheUtil.clearCache();
    FinderCacheUtil.clearCache();
  }
}
