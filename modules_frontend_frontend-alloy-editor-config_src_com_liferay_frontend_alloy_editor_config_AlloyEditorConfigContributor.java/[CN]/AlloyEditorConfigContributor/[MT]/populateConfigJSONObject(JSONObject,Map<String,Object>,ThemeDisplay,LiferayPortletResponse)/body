{
  String contentsLanguageId=(String)inputEditorTaglibAttributes.get("liferay-ui:input-editor:contentsLanguageId");
  Locale contentsLocale=LocaleUtil.fromLanguageId(contentsLanguageId);
  String contentsLanguageDir=LanguageUtil.get(contentsLocale,"lang.dir");
  contentsLanguageId=LocaleUtil.toLanguageId(contentsLocale);
  jsonObject.put("contentsLangDirection",HtmlUtil.escapeJS(contentsLanguageDir));
  jsonObject.put("contentsLanguage",contentsLanguageId.replace("iw_","he_"));
  String languageId=LocaleUtil.toLanguageId(themeDisplay.getLocale());
  jsonObject.put("language",languageId.replace("iw_","he_"));
  jsonObject.put("removePlugins","toolbar,elementspath,resize,liststyle,link");
  if (liferayPortletResponse != null) {
    LiferayPortletURL itemSelectorURL=liferayPortletResponse.createRenderURL(PortletKeys.ITEM_SELECTOR);
    itemSelectorURL.setParameter("mvcPath","/view.jsp");
    itemSelectorURL.setParameter("groupId",String.valueOf(themeDisplay.getScopeGroupId()));
    String name=liferayPortletResponse.getNamespace() + GetterUtil.getString((String)inputEditorTaglibAttributes.get("liferay-ui:input-editor:name"));
    itemSelectorURL.setParameter("eventName",name + "selectDocument");
    itemSelectorURL.setParameter("showGroupsSelector",Boolean.TRUE.toString());
    Map<String,String> fileBrowserParamsMap=(Map<String,String>)inputEditorTaglibAttributes.get("liferay-ui:input-editor:fileBrowserParams");
    if (fileBrowserParamsMap != null) {
      for (      Map.Entry<String,String> entry : fileBrowserParamsMap.entrySet()) {
        itemSelectorURL.setParameter(entry.getKey(),entry.getValue());
      }
    }
    try {
      itemSelectorURL.setWindowState(LiferayWindowState.POP_UP);
    }
 catch (    WindowStateException wse) {
    }
    jsonObject.put("filebrowserBrowseUrl",itemSelectorURL.toString());
    jsonObject.put("filebrowserFlashBrowseUrl",itemSelectorURL.toString() + "&Type=flash");
    jsonObject.put("filebrowserImageBrowseLinkUrl",itemSelectorURL.toString() + "&Type=image");
    jsonObject.put("filebrowserImageBrowseUrl",itemSelectorURL.toString() + "&Type=image");
    jsonObject.put("srcNode",name);
  }
  JSONObject toolbarsJSONObject=JSONFactoryUtil.createJSONObject();
  try {
    JSONArray toolbarAddJSONArray=JSONFactoryUtil.createJSONArray("['imageselector']");
    JSONArray toolbarImageJSONArray=JSONFactoryUtil.createJSONArray("['left', 'right']");
    JSONArray toolbarStylesJSONArray=JSONFactoryUtil.createJSONArray("['strong', 'em', 'u', 'h1', 'h2', 'a', 'twitter']");
    toolbarsJSONObject.put("add",toolbarAddJSONArray);
    toolbarsJSONObject.put("image",toolbarImageJSONArray);
    toolbarsJSONObject.put("styles",toolbarStylesJSONArray);
  }
 catch (  JSONException jsone) {
    if (_log.isErrorEnabled()) {
      _log.error("Unable to create a JSON array from string");
    }
  }
  jsonObject.put("toolbarsJSONObject",toolbarsJSONObject);
}
