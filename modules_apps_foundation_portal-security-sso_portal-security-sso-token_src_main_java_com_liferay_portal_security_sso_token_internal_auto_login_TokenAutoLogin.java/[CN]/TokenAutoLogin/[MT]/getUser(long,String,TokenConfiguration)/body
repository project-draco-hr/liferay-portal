{
  User user=null;
  String authType=PrefsPropsUtil.getString(companyId,PropsKeys.COMPANY_SECURITY_AUTH_TYPE,PropsValues.COMPANY_SECURITY_AUTH_TYPE);
  if (tokenCompanyServiceSettings.importFromLDAP()) {
    try {
      if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
        user=_userImporter.importUser(companyId,StringPool.BLANK,login);
      }
 else       if (authType.equals(CompanyConstants.AUTH_TYPE_EA)) {
        user=_userImporter.importUser(companyId,login,StringPool.BLANK);
      }
 else {
        if (_log.isWarnEnabled()) {
          StringBundler sb=new StringBundler(7);
          sb.append("The property \"");
          sb.append(PropsKeys.COMPANY_SECURITY_AUTH_TYPE);
          sb.append("\" must be set to either \"");
          sb.append(CompanyConstants.AUTH_TYPE_EA);
          sb.append("\" or \"");
          sb.append(CompanyConstants.AUTH_TYPE_SN);
          sb.append("\"");
          _log.warn(sb.toString());
        }
      }
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to import from LDAP",e);
      }
    }
  }
  if (user != null) {
    return user;
  }
  if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
    user=_userLocalService.getUserByScreenName(companyId,login);
  }
 else   if (authType.equals(CompanyConstants.AUTH_TYPE_EA)) {
    user=_userLocalService.getUserByEmailAddress(companyId,login);
  }
 else {
    if (_log.isWarnEnabled()) {
      StringBundler sb=new StringBundler(6);
      sb.append("Incompatible setting for: ");
      sb.append(PropsKeys.COMPANY_SECURITY_AUTH_TYPE);
      sb.append(". Please configure to either: ");
      sb.append(CompanyConstants.AUTH_TYPE_EA);
      sb.append(" or ");
      sb.append(CompanyConstants.AUTH_TYPE_SN);
      _log.warn(sb.toString());
    }
  }
  return user;
}
