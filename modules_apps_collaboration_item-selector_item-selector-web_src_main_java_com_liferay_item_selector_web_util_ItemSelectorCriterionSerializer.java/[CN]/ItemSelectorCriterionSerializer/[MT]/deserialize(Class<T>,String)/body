{
  try {
    Constructor<T> constructor=itemSelectorCriterionClass.getConstructor();
    constructor.setAccessible(true);
    T itemSelectorCriterion=constructor.newInstance();
    JSONDeserializer<Map<String,?>> jsonDeserializer=JSONFactoryUtil.createJSONDeserializer();
    Map<String,?> map=jsonDeserializer.deserialize(json);
    String[] externalPropertyKeys=getExternalPropertyKeys(itemSelectorCriterion);
    for (    String externalPropertyKey : externalPropertyKeys) {
      Class<?> serializableFieldClass=PropertyUtils.getPropertyType(itemSelectorCriterion,externalPropertyKey);
      Object value=map.get(externalPropertyKey);
      if (serializableFieldClass.isArray() && List.class.isInstance(value)) {
        List<?> list=(List<?>)value;
        value=list.toArray((Object[])Array.newInstance(serializableFieldClass.getComponentType(),list.size()));
      }
 else       if (((serializableFieldClass == Long.class) || (serializableFieldClass == Long.TYPE)) && (value instanceof String)) {
        value=Long.valueOf((String)value);
      }
      PropertyUtils.setProperty(itemSelectorCriterion,externalPropertyKey,value);
    }
    _setDesiredItemSelectorReturnTypes(itemSelectorCriterion,map);
    return itemSelectorCriterion;
  }
 catch (  IllegalAccessException|InstantiationException|InvocationTargetException|NoSuchMethodException e) {
    throw new SystemException(e);
  }
}
