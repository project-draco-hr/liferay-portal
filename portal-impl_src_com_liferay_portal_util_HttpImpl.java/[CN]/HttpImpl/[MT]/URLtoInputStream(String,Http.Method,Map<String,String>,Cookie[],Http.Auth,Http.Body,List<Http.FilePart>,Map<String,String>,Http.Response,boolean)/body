{
  HttpMethod httpMethod=null;
  HttpState httpState=null;
  try {
    _cookies.set(null);
    if (location == null) {
      return null;
    }
 else     if (!location.startsWith(Http.HTTP_WITH_SLASH) && !location.startsWith(Http.HTTPS_WITH_SLASH)) {
      location=Http.HTTP_WITH_SLASH + location;
    }
    HostConfiguration hostConfiguration=getHostConfiguration(location);
    HttpClient httpClient=getClient(hostConfiguration);
    if (method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) {
      if (method.equals(Http.Method.POST)) {
        httpMethod=new PostMethod(location);
      }
 else {
        httpMethod=new PutMethod(location);
      }
      if (body != null) {
        RequestEntity requestEntity=new StringRequestEntity(body.getContent(),body.getContentType(),body.getCharset());
        EntityEnclosingMethod entityEnclosingMethod=(EntityEnclosingMethod)httpMethod;
        entityEnclosingMethod.setRequestEntity(requestEntity);
      }
 else       if (method.equals(Http.Method.POST)) {
        PostMethod postMethod=(PostMethod)httpMethod;
        if (!hasRequestHeader(postMethod,HttpHeaders.CONTENT_TYPE)) {
          HttpClientParams httpClientParams=httpClient.getParams();
          httpClientParams.setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET,StringPool.UTF8);
        }
        processPostMethod(postMethod,fileParts,parts);
      }
    }
 else     if (method.equals(Http.Method.DELETE)) {
      httpMethod=new DeleteMethod(location);
    }
 else     if (method.equals(Http.Method.HEAD)) {
      httpMethod=new HeadMethod(location);
    }
 else {
      httpMethod=new GetMethod(location);
    }
    if (headers != null) {
      for (      Map.Entry<String,String> header : headers.entrySet()) {
        httpMethod.addRequestHeader(header.getKey(),header.getValue());
      }
    }
    if ((method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) && ((body != null) || ((fileParts != null) && !fileParts.isEmpty()) || ((parts != null) && !parts.isEmpty())) && !hasRequestHeader(httpMethod,HttpHeaders.CONTENT_TYPE)) {
      httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE,ContentTypes.APPLICATION_X_WWW_FORM_URLENCODED_UTF8);
    }
    if (!hasRequestHeader(httpMethod,HttpHeaders.USER_AGENT)) {
      httpMethod.addRequestHeader(HttpHeaders.USER_AGENT,_DEFAULT_USER_AGENT);
    }
    httpState=new HttpState();
    if (ArrayUtil.isNotEmpty(cookies)) {
      org.apache.commons.httpclient.Cookie[] commonsCookies=toCommonsCookies(cookies);
      httpState.addCookies(commonsCookies);
      HttpMethodParams httpMethodParams=httpMethod.getParams();
      httpMethodParams.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
    }
    if (auth != null) {
      httpMethod.setDoAuthentication(true);
      httpState.setCredentials(new AuthScope(auth.getHost(),auth.getPort(),auth.getRealm()),new UsernamePasswordCredentials(auth.getUsername(),auth.getPassword()));
    }
    proxifyState(httpState,hostConfiguration);
    int responseCode=httpClient.executeMethod(hostConfiguration,httpMethod,httpState);
    response.setResponseCode(responseCode);
    Header locationHeader=httpMethod.getResponseHeader("location");
    if ((locationHeader != null) && !locationHeader.equals(location)) {
      String redirect=locationHeader.getValue();
      if (followRedirects) {
        return URLtoInputStream(redirect,Http.Method.GET,headers,cookies,auth,body,fileParts,parts,response,followRedirects);
      }
 else {
        response.setRedirect(redirect);
      }
    }
    long contentLengthLong=0;
    Header contentLengthHeader=httpMethod.getResponseHeader(HttpHeaders.CONTENT_LENGTH);
    if (contentLengthHeader != null) {
      contentLengthLong=GetterUtil.getLong(contentLengthHeader.getValue());
      response.setContentLengthLong(contentLengthLong);
      if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) {
        response.setContentLength(-1);
      }
 else {
        int contentLength=(int)contentLengthLong;
        response.setContentLength(contentLength);
      }
    }
    Header contentType=httpMethod.getResponseHeader(HttpHeaders.CONTENT_TYPE);
    if (contentType != null) {
      response.setContentType(contentType.getValue());
    }
    for (    Header header : httpMethod.getResponseHeaders()) {
      response.addHeader(header.getName(),header.getValue());
    }
    InputStream inputStream=httpMethod.getResponseBodyAsStream();
    final HttpMethod referenceHttpMethod=httpMethod;
    final Reference<InputStream> reference=FinalizeManager.register(inputStream,new FinalizeAction(){
      @Override public void doFinalize(      Reference<?> reference){
        referenceHttpMethod.releaseConnection();
      }
    }
,FinalizeManager.WEAK_REFERENCE_FACTORY);
    return new UnsyncFilterInputStream(inputStream){
      @Override public void close() throws IOException {
        super.close();
        referenceHttpMethod.releaseConnection();
        reference.clear();
      }
    }
;
  }
  finally {
    try {
      if (httpState != null) {
        _cookies.set(toServletCookies(httpState.getCookies()));
      }
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
}
