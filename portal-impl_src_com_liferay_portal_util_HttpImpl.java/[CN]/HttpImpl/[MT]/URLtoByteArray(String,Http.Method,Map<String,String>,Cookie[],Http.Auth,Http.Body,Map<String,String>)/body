{
  byte[] bytes=null;
  HttpMethod httpMethod=null;
  try {
    if (location == null) {
      return bytes;
    }
 else     if (!location.startsWith(Http.HTTP_WITH_SLASH) && !location.startsWith(Http.HTTPS_WITH_SLASH)) {
      location=Http.HTTP_WITH_SLASH + location;
    }
    HostConfiguration hostConfig=getHostConfig(location);
    HttpClient client=getClient(hostConfig);
    if ((method == Http.Method.POST) || (method == Http.Method.PUT)) {
      if (method == Http.Method.POST) {
        httpMethod=new PostMethod(location);
      }
 else {
        httpMethod=new PutMethod(location);
      }
      if (body != null) {
        RequestEntity requestEntity=new StringRequestEntity(body.getContent(),body.getContentType(),body.getCharset());
        EntityEnclosingMethod entityEnclosingMethod=(EntityEnclosingMethod)httpMethod;
        entityEnclosingMethod.setRequestEntity(requestEntity);
      }
 else       if ((parts != null) && (parts.size() > 0) && (method == Http.Method.POST)) {
        List<NameValuePair> nvpList=new ArrayList<NameValuePair>();
        for (        Map.Entry<String,String> entry : parts.entrySet()) {
          String key=entry.getKey();
          String value=entry.getValue();
          if (value != null) {
            nvpList.add(new NameValuePair(key,value));
          }
        }
        NameValuePair[] nvpArray=nvpList.toArray(new NameValuePair[nvpList.size()]);
        PostMethod postMethod=(PostMethod)httpMethod;
        postMethod.setRequestBody(nvpArray);
      }
    }
 else     if (method == Http.Method.DELETE) {
      httpMethod=new DeleteMethod(location);
    }
 else {
      httpMethod=new GetMethod(location);
    }
    if ((method == Http.Method.POST) || (method == Http.Method.PUT) && (body != null)) {
    }
 else     if (!_hasRequestHeader(httpMethod,HttpHeaders.CONTENT_TYPE)) {
      httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE,ContentTypes.APPLICATION_X_WWW_FORM_URLENCODED);
    }
    if (!_hasRequestHeader(httpMethod,HttpHeaders.USER_AGENT)) {
      httpMethod.addRequestHeader(HttpHeaders.USER_AGENT,_DEFAULT_USER_AGENT);
    }
    if (headers != null) {
      for (      Map.Entry<String,String> header : headers.entrySet()) {
        httpMethod.addRequestHeader(header.getKey(),header.getValue());
      }
    }
    HttpState state=new HttpState();
    if ((cookies != null) && (cookies.length > 0)) {
      org.apache.commons.httpclient.Cookie[] commonsCookies=new org.apache.commons.httpclient.Cookie[0];
      for (int i=0; i < cookies.length; i++) {
        Cookie cookie=cookies[i];
        commonsCookies[i]=new org.apache.commons.httpclient.Cookie(cookie.getDomain(),cookie.getName(),cookie.getValue(),cookie.getPath(),cookie.getMaxAge(),cookie.getSecure());
      }
      state.addCookies(commonsCookies);
      httpMethod.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
    }
    if (auth != null) {
      httpMethod.setDoAuthentication(true);
      state.setCredentials(new AuthScope(auth.getHost(),auth.getPort(),auth.getRealm()),new UsernamePasswordCredentials(auth.getUsername(),auth.getPassword()));
    }
    proxifyState(state,hostConfig);
    client.executeMethod(hostConfig,httpMethod,state);
    Header locationHeader=httpMethod.getResponseHeader("location");
    if ((locationHeader != null) && !locationHeader.equals(location)) {
      return URLtoByteArray(locationHeader.getValue(),Http.Method.GET,headers,cookies,auth,body,parts);
    }
    InputStream is=httpMethod.getResponseBodyAsStream();
    if (is != null) {
      bytes=FileUtil.getBytes(is);
      is.close();
    }
    return bytes;
  }
  finally {
    try {
      if (httpMethod != null) {
        httpMethod.releaseConnection();
      }
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
}
