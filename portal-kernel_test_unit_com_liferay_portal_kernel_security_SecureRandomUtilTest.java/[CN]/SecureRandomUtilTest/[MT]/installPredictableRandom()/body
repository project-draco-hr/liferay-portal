{
  ReflectionTestUtil.setFieldValue(SecureRandomUtil.class,"_gapRandom",new Random(){
    @Override public long nextLong(){
      return _counter.getAndIncrement();
    }
    private static final long serialVersionUID=1L;
    private final AtomicLong _counter=new AtomicLong();
  }
);
  SecureRandom predictableRandom=new PredictableRandom();
  ReflectionTestUtil.setFieldValue(SecureRandomUtil.class,"_random",predictableRandom);
  byte[] bytes=ReflectionTestUtil.getFieldValue(SecureRandomUtil.class,"_bytes");
  predictableRandom.nextBytes(bytes);
  return predictableRandom;
}
