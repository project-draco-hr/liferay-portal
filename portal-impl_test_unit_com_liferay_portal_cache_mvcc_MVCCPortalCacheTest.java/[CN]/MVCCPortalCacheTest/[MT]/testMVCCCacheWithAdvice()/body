{
  Assert.assertNull(_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  TestPortalCacheAdvice.block();
  Thread thread1=new Thread(){
    @Override public void run(){
      _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_1));
    }
  }
;
  thread1.start();
  TestPortalCacheAdvice.waitUntilBlock(1);
  Thread thread2=new Thread(){
    @Override public void run(){
      _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_1));
    }
  }
;
  thread2.start();
  TestPortalCacheAdvice.waitUntilBlock(2);
  TestPortalCacheAdvice.unblock(2);
  thread1.join();
  thread2.join();
  _assertVersion(_VERSION_1,_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  _testPortalCacheListener.assertActionsCount(1);
  _testPortalCacheListener.assertPut(_KEY_1,new MockMVCCModel(_VERSION_1));
  _testPortalCacheListener.reset();
  _testPortalCacheReplicator.assertActionsCount(1);
  _testPortalCacheReplicator.assertPut(_KEY_1,new MockMVCCModel(_VERSION_1));
  _testPortalCacheReplicator.reset();
  TestPortalCacheAdvice.block();
  thread1=new Thread(){
    @Override public void run(){
      PortalCacheHelperUtil.putWithoutReplicator(_mvccPortalCache,_KEY_1,new MockMVCCModel(_VERSION_2));
    }
  }
;
  thread1.start();
  TestPortalCacheAdvice.waitUntilBlock(1);
  thread2=new Thread(){
    @Override public void run(){
      PortalCacheHelperUtil.putWithoutReplicator(_mvccPortalCache,_KEY_1,new MockMVCCModel(_VERSION_2));
    }
  }
;
  thread2.start();
  TestPortalCacheAdvice.waitUntilBlock(2);
  TestPortalCacheAdvice.unblock(2);
  thread1.join();
  thread2.join();
  _assertVersion(_VERSION_2,_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  _testPortalCacheListener.assertActionsCount(1);
  _testPortalCacheListener.assertUpdated(_KEY_1,new MockMVCCModel(_VERSION_2));
  _testPortalCacheListener.reset();
  _testPortalCacheReplicator.assertActionsCount(0);
}
