{
  Assert.assertNull(_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  MemoryPortalCacheAdvice.block();
  Thread thread1=new Thread(){
    @Override public void run(){
      _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_1));
    }
  }
;
  thread1.start();
  MemoryPortalCacheAdvice.waitUntilBlock(1);
  Thread thread2=new Thread(){
    @Override public void run(){
      _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_1));
    }
  }
;
  thread2.start();
  MemoryPortalCacheAdvice.waitUntilBlock(2);
  MemoryPortalCacheAdvice.unblock(2);
  thread1.join();
  thread2.join();
  _assertVersion(_VERSION_1,_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(1);
  _testCacheListener.assertPut(_KEY_1,new MockMVCCModel(_VERSION_1));
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(1);
  _testCacheReplicator.assertPut(_KEY_1,new MockMVCCModel(_VERSION_1));
  _testCacheReplicator.reset();
  MemoryPortalCacheAdvice.block();
  thread1=new Thread(){
    @Override public void run(){
      PortalCacheHelperUtil.putWithoutReplicator(_mvccPortalCache,_KEY_1,new MockMVCCModel(_VERSION_2));
    }
  }
;
  thread1.start();
  MemoryPortalCacheAdvice.waitUntilBlock(1);
  thread2=new Thread(){
    @Override public void run(){
      PortalCacheHelperUtil.putWithoutReplicator(_mvccPortalCache,_KEY_1,new MockMVCCModel(_VERSION_2));
    }
  }
;
  thread2.start();
  MemoryPortalCacheAdvice.waitUntilBlock(2);
  MemoryPortalCacheAdvice.unblock(2);
  thread1.join();
  thread2.join();
  _assertVersion(_VERSION_2,_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  _testCacheListener.assertActionsCount(1);
  _testCacheListener.assertUpdated(_KEY_1,new MockMVCCModel(_VERSION_2));
  _testCacheListener.reset();
  _testCacheReplicator.assertActionsCount(0);
}
