{
  Assert.assertNull(_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  if (timeToLive) {
    _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_1),10);
  }
 else {
    _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_1));
  }
  _assertVersion(_VERSION_1,_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  _testPortalCacheListener.assertActionsCount(1);
  if (timeToLive) {
    _testPortalCacheListener.assertPut(_KEY_1,new MockMVCCModel(_VERSION_1),10);
  }
 else {
    _testPortalCacheListener.assertPut(_KEY_1,new MockMVCCModel(_VERSION_1));
  }
  _testPortalCacheListener.reset();
  _testPortalCacheReplicator.assertActionsCount(1);
  if (timeToLive) {
    _testPortalCacheReplicator.assertPut(_KEY_1,new MockMVCCModel(_VERSION_1),10);
  }
 else {
    _testPortalCacheReplicator.assertPut(_KEY_1,new MockMVCCModel(_VERSION_1));
  }
  _testPortalCacheReplicator.reset();
  if (timeToLive) {
    _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_0),10);
  }
 else {
    _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_0));
  }
  _assertVersion(_VERSION_1,_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  _testPortalCacheListener.assertActionsCount(0);
  _testPortalCacheReplicator.assertActionsCount(0);
  if (timeToLive) {
    _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_2),10);
  }
 else {
    _mvccPortalCache.put(_KEY_1,new MockMVCCModel(_VERSION_2));
  }
  _assertVersion(_VERSION_2,_mvccPortalCache.get(_KEY_1));
  Assert.assertNull(_mvccPortalCache.get(_KEY_2));
  _testPortalCacheListener.assertActionsCount(1);
  if (timeToLive) {
    _testPortalCacheListener.assertUpdated(_KEY_1,new MockMVCCModel(_VERSION_2),10);
  }
 else {
    _testPortalCacheListener.assertUpdated(_KEY_1,new MockMVCCModel(_VERSION_2));
  }
  _testPortalCacheListener.reset();
  _testPortalCacheReplicator.assertActionsCount(1);
  if (timeToLive) {
    _testPortalCacheReplicator.assertUpdated(_KEY_1,new MockMVCCModel(_VERSION_2),10);
  }
 else {
    _testPortalCacheReplicator.assertUpdated(_KEY_1,new MockMVCCModel(_VERSION_2));
  }
  _testPortalCacheReplicator.reset();
}
