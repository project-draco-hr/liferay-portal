{
  Calendar calendar=calendarPersistence.findByPrimaryKey(calendarId);
  CalendarBooking calendarBooking=calendarBookingPersistence.findByPrimaryKey(calendarBookingId);
  HashMap<Long,CalendarBooking> childCalendarBookingMap=new HashMap<>();
  List<CalendarBooking> childCalendarBookingList=calendarBookingPersistence.findByParentCalendarBookingId(calendarBookingId);
  for (  CalendarBooking childCalendarBooking : childCalendarBookingList) {
    childCalendarBookingMap.put(childCalendarBooking.getCalendarId(),childCalendarBooking);
  }
  for (  Locale locale : descriptionMap.keySet()) {
    String sanitizedDescription=SanitizerUtil.sanitize(calendar.getCompanyId(),calendar.getGroupId(),userId,CalendarBooking.class.getName(),calendarBookingId,ContentTypes.TEXT_HTML,Sanitizer.MODE_ALL,descriptionMap.get(locale),null);
    descriptionMap.put(locale,sanitizedDescription);
  }
  java.util.Calendar startTimeJCalendar=JCalendarUtil.getJCalendar(startTime);
  java.util.Calendar endTimeJCalendar=JCalendarUtil.getJCalendar(endTime);
  if (allDay) {
    startTimeJCalendar=JCalendarUtil.toMidnightJCalendar(startTimeJCalendar);
    endTimeJCalendar=JCalendarUtil.toLastHourJCalendar(endTimeJCalendar);
  }
  if (firstReminder < secondReminder) {
    long originalSecondReminder=secondReminder;
    secondReminder=firstReminder;
    firstReminder=originalSecondReminder;
  }
  validate(titleMap,startTimeJCalendar,endTimeJCalendar,recurrence);
  calendarBooking.setGroupId(calendar.getGroupId());
  calendarBooking.setModifiedDate(serviceContext.getModifiedDate(null));
  calendarBooking.setCalendarId(calendarId);
  Map<Locale,String> updatedTitleMap=calendarBooking.getTitleMap();
  updatedTitleMap.putAll(titleMap);
  calendarBooking.setTitleMap(updatedTitleMap,serviceContext.getLocale());
  Map<Locale,String> updatedDescriptionMap=calendarBooking.getDescriptionMap();
  updatedDescriptionMap.putAll(descriptionMap);
  calendarBooking.setDescriptionMap(updatedDescriptionMap);
  calendarBooking.setLocation(location);
  calendarBooking.setAllDay(allDay);
  calendarBooking.setRecurrence(recurrence);
  calendarBooking.setFirstReminder(firstReminder);
  calendarBooking.setFirstReminderType(firstReminderType);
  calendarBooking.setSecondReminder(secondReminder);
  calendarBooking.setSecondReminderType(secondReminderType);
  long startTimeInMilis=startTimeJCalendar.getTimeInMillis();
  long endTimeInMilis=endTimeJCalendar.getTimeInMillis();
  boolean timeChanged=!Validator.equals(calendarBooking.getStartTime(),startTimeInMilis) || !Validator.equals(calendarBooking.getEndTime(),endTimeInMilis);
  calendarBooking.setStartTime(startTimeInMilis);
  calendarBooking.setEndTime(endTimeJCalendar.getTimeInMillis());
  if (!calendarBooking.isPending() || !calendarBooking.isDraft()) {
    calendarBooking.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  calendarBooking.setExpandoBridgeAttributes(serviceContext);
  calendarBookingPersistence.update(calendarBooking);
  addChildCalendarBookings(calendarBooking,childCalendarIds,serviceContext);
  updateAsset(userId,calendarBooking,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  socialActivityLocalService.addActivity(userId,calendarBooking.getGroupId(),CalendarBooking.class.getName(),calendarBookingId,CalendarActivityKeys.UPDATE_CALENDAR_BOOKING,getExtraDataJSON(calendarBooking),0);
  sendNotification(calendarBooking,NotificationTemplateType.UPDATE,serviceContext);
  if (calendarBooking.isMasterBooking()) {
    WorkflowHandlerRegistryUtil.startWorkflowInstance(calendarBooking.getCompanyId(),calendarBooking.getGroupId(),userId,CalendarBooking.class.getName(),calendarBooking.getCalendarBookingId(),calendarBooking,serviceContext);
  }
  int workflowAction=GetterUtil.getInteger(serviceContext.getAttribute("workflowAction"));
  if (!timeChanged && !Validator.equals(workflowAction,WorkflowConstants.ACTION_SAVE_DRAFT)) {
    for (    CalendarBooking childCalendarBooking : calendarBooking.getChildCalendarBookings()) {
      CalendarBooking oldChildCalendarBooking=childCalendarBookingMap.get(childCalendarBooking.getCalendarId());
      if (!childCalendarBooking.isMasterBooking() && (oldChildCalendarBooking.getStatusByUserId() > 0)) {
        childCalendarBooking=updateStatus(oldChildCalendarBooking.getStatusByUserId(),childCalendarBooking,oldChildCalendarBooking.getStatus(),serviceContext);
      }
    }
  }
  return calendarBooking;
}
