{
  List<Element> filterMappingElements=element.elements("filter-mapping");
  Collections.reverse(new ArrayList<Element>(filterMappingElements));
  for (  Element filterElement : element.elements("filter")) {
    String filterClassName=filterElement.elementText("filter-class");
    Class<?> clazz=null;
    try {
      clazz=bundle.loadClass(filterClassName);
    }
 catch (    Exception e) {
      _log.error("Unable to load filter " + filterClassName);
      continue;
    }
    Filter filter=(Filter)clazz.newInstance();
    FilterDefinition filterDefinition=new FilterDefinition();
    boolean asyncSupported=GetterUtil.getBoolean(filterElement.elementText("async-supported"));
    filterDefinition.setAsyncSupported(asyncSupported);
    filterDefinition.setFilter(filter);
    String filterName=filterElement.elementText("filter-name");
    filterDefinition.setName(filterName);
    List<Element> initParamElements=filterElement.elements("init-param");
    for (    Element initParamElement : initParamElements) {
      String paramName=initParamElement.elementText("param-name");
      String paramValue=initParamElement.elementText("param-value");
      filterDefinition.setInitParameter(paramName,paramValue);
    }
    for (int i=0; i < filterMappingElements.size(); i++) {
      Element filterMappingElement=filterMappingElements.get(i);
      String filterMappingElementFilterName=filterMappingElement.elementText("filter-name");
      if (filterMappingElementFilterName.equals(filterName)) {
        List<String> dispatchers=getDispatchers(filterMappingElement);
        filterDefinition.setDispatchers(dispatchers);
        List<String> servletNames=getServletNames(filterMappingElement);
        filterDefinition.setServletNames(servletNames);
        List<String> urlPatterns=getURLPatterns(filterMappingElement);
        filterDefinition.setURLPatterns(urlPatterns);
        filterDefinition.setPriority(i);
      }
    }
    webXML.setFilterDefinition(filterName,filterDefinition);
  }
}
