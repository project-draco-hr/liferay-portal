{
  if (types == null) {
    types=new String[0];
  }
 else   if (types.length > 1) {
    types=ArrayUtil.distinct(types,NULL_SAFE_STRING_COMPARATOR);
    Arrays.sort(types,NULL_SAFE_STRING_COMPARATOR);
  }
  Object[] finderArgs=new Object[]{groupId,StringUtil.merge(types),repeating};
  Long count=(Long)finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_T_R,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_COUNT_CALEVENT_WHERE);
    query.append(_FINDER_COLUMN_G_T_R_GROUPID_2);
    if (types.length > 0) {
      query.append(StringPool.OPEN_PARENTHESIS);
      for (int i=0; i < types.length; i++) {
        String type=types[i];
        if (type == null) {
          query.append(_FINDER_COLUMN_G_T_R_TYPE_4);
        }
 else         if (type.equals(StringPool.BLANK)) {
          query.append(_FINDER_COLUMN_G_T_R_TYPE_6);
        }
 else {
          query.append(_FINDER_COLUMN_G_T_R_TYPE_5);
        }
        if ((i + 1) < types.length) {
          query.append(WHERE_OR);
        }
      }
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(WHERE_AND);
    }
    query.append(_FINDER_COLUMN_G_T_R_REPEATING_2);
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      for (      String type : types) {
        if ((type != null) && !type.isEmpty()) {
          qPos.add(type);
        }
      }
      qPos.add(repeating);
      count=(Long)q.uniqueResult();
      finderCache.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_T_R,finderArgs,count);
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_T_R,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return count.intValue();
}
