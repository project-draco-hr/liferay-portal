{
  long pk=RandomTestUtil.nextLong();
  BlogsStatsUser newBlogsStatsUser=_persistence.create(pk);
  newBlogsStatsUser.setGroupId(RandomTestUtil.nextLong());
  newBlogsStatsUser.setCompanyId(RandomTestUtil.nextLong());
  newBlogsStatsUser.setUserId(RandomTestUtil.nextLong());
  newBlogsStatsUser.setEntryCount(RandomTestUtil.nextInt());
  newBlogsStatsUser.setLastPostDate(RandomTestUtil.nextDate());
  newBlogsStatsUser.setRatingsTotalEntries(RandomTestUtil.nextInt());
  newBlogsStatsUser.setRatingsTotalScore(RandomTestUtil.nextDouble());
  newBlogsStatsUser.setRatingsAverageScore(RandomTestUtil.nextDouble());
  _models.add(_persistence.update(newBlogsStatsUser));
  BlogsStatsUser existingBlogsStatsUser=_persistence.findByPrimaryKey(newBlogsStatsUser.getPrimaryKey());
  Assert.assertEquals(existingBlogsStatsUser.getStatsUserId(),newBlogsStatsUser.getStatsUserId());
  Assert.assertEquals(existingBlogsStatsUser.getGroupId(),newBlogsStatsUser.getGroupId());
  Assert.assertEquals(existingBlogsStatsUser.getCompanyId(),newBlogsStatsUser.getCompanyId());
  Assert.assertEquals(existingBlogsStatsUser.getUserId(),newBlogsStatsUser.getUserId());
  Assert.assertEquals(existingBlogsStatsUser.getEntryCount(),newBlogsStatsUser.getEntryCount());
  Assert.assertEquals(Time.getShortTimestamp(existingBlogsStatsUser.getLastPostDate()),Time.getShortTimestamp(newBlogsStatsUser.getLastPostDate()));
  Assert.assertEquals(existingBlogsStatsUser.getRatingsTotalEntries(),newBlogsStatsUser.getRatingsTotalEntries());
  AssertUtils.assertEquals(existingBlogsStatsUser.getRatingsTotalScore(),newBlogsStatsUser.getRatingsTotalScore());
  AssertUtils.assertEquals(existingBlogsStatsUser.getRatingsAverageScore(),newBlogsStatsUser.getRatingsAverageScore());
}
