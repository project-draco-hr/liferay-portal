{
  long pk=ServiceTestUtil.nextLong();
  BlogsStatsUser newBlogsStatsUser=_persistence.create(pk);
  newBlogsStatsUser.setGroupId(ServiceTestUtil.nextLong());
  newBlogsStatsUser.setCompanyId(ServiceTestUtil.nextLong());
  newBlogsStatsUser.setUserId(ServiceTestUtil.nextLong());
  newBlogsStatsUser.setEntryCount(ServiceTestUtil.nextInt());
  newBlogsStatsUser.setLastPostDate(ServiceTestUtil.nextDate());
  newBlogsStatsUser.setRatingsTotalEntries(ServiceTestUtil.nextInt());
  newBlogsStatsUser.setRatingsTotalScore(ServiceTestUtil.nextDouble());
  newBlogsStatsUser.setRatingsAverageScore(ServiceTestUtil.nextDouble());
  _persistence.update(newBlogsStatsUser,false);
  BlogsStatsUser existingBlogsStatsUser=_persistence.findByPrimaryKey(newBlogsStatsUser.getPrimaryKey());
  Assert.assertEquals(existingBlogsStatsUser.getStatsUserId(),newBlogsStatsUser.getStatsUserId());
  Assert.assertEquals(existingBlogsStatsUser.getGroupId(),newBlogsStatsUser.getGroupId());
  Assert.assertEquals(existingBlogsStatsUser.getCompanyId(),newBlogsStatsUser.getCompanyId());
  Assert.assertEquals(existingBlogsStatsUser.getUserId(),newBlogsStatsUser.getUserId());
  Assert.assertEquals(existingBlogsStatsUser.getEntryCount(),newBlogsStatsUser.getEntryCount());
  Assert.assertEquals(Time.getShortTimestamp(existingBlogsStatsUser.getLastPostDate()),Time.getShortTimestamp(newBlogsStatsUser.getLastPostDate()));
  Assert.assertEquals(existingBlogsStatsUser.getRatingsTotalEntries(),newBlogsStatsUser.getRatingsTotalEntries());
  AssertUtils.assertEquals(existingBlogsStatsUser.getRatingsTotalScore(),newBlogsStatsUser.getRatingsTotalScore());
  AssertUtils.assertEquals(existingBlogsStatsUser.getRatingsAverageScore(),newBlogsStatsUser.getRatingsAverageScore());
}
