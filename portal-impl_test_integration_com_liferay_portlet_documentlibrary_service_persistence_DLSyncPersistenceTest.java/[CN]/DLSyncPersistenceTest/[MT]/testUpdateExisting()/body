{
  long pk=ServiceTestUtil.nextLong();
  DLSync newDLSync=_persistence.create(pk);
  newDLSync.setCompanyId(ServiceTestUtil.nextLong());
  newDLSync.setCreateDate(ServiceTestUtil.nextDate());
  newDLSync.setModifiedDate(ServiceTestUtil.nextDate());
  newDLSync.setFileId(ServiceTestUtil.nextLong());
  newDLSync.setFileUuid(ServiceTestUtil.randomString());
  newDLSync.setRepositoryId(ServiceTestUtil.nextLong());
  newDLSync.setParentFolderId(ServiceTestUtil.nextLong());
  newDLSync.setName(ServiceTestUtil.randomString());
  newDLSync.setDescription(ServiceTestUtil.randomString());
  newDLSync.setEvent(ServiceTestUtil.randomString());
  newDLSync.setType(ServiceTestUtil.randomString());
  newDLSync.setVersion(ServiceTestUtil.randomString());
  _persistence.update(newDLSync);
  DLSync existingDLSync=_persistence.findByPrimaryKey(newDLSync.getPrimaryKey());
  Assert.assertEquals(existingDLSync.getSyncId(),newDLSync.getSyncId());
  Assert.assertEquals(existingDLSync.getCompanyId(),newDLSync.getCompanyId());
  Assert.assertEquals(Time.getShortTimestamp(existingDLSync.getCreateDate()),Time.getShortTimestamp(newDLSync.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingDLSync.getModifiedDate()),Time.getShortTimestamp(newDLSync.getModifiedDate()));
  Assert.assertEquals(existingDLSync.getFileId(),newDLSync.getFileId());
  Assert.assertEquals(existingDLSync.getFileUuid(),newDLSync.getFileUuid());
  Assert.assertEquals(existingDLSync.getRepositoryId(),newDLSync.getRepositoryId());
  Assert.assertEquals(existingDLSync.getParentFolderId(),newDLSync.getParentFolderId());
  Assert.assertEquals(existingDLSync.getName(),newDLSync.getName());
  Assert.assertEquals(existingDLSync.getDescription(),newDLSync.getDescription());
  Assert.assertEquals(existingDLSync.getEvent(),newDLSync.getEvent());
  Assert.assertEquals(existingDLSync.getType(),newDLSync.getType());
  Assert.assertEquals(existingDLSync.getVersion(),newDLSync.getVersion());
}
