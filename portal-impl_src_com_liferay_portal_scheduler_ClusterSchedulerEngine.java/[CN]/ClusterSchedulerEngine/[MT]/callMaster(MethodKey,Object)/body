{
  MethodHandler methodHandler=new MethodHandler(methodKey,arguments);
  Lock lock=updateMemorySchedulerClusterMaster();
  Address address=(Address)getDeserializedObject(lock.getOwner());
  if (address.equals(ClusterExecutorUtil.getLocalClusterNodeAddress())) {
    if (methodKey == _getScheduledJobsMethodKey3) {
      return methodHandler.invoke(false);
    }
 else {
      return methodHandler.invoke(schedulerEngine);
    }
  }
  ClusterRequest clusterRequest=ClusterRequest.createUnicastRequest(methodHandler,address);
  clusterRequest.setBeanIdentifier(_beanIdentifier);
  FutureClusterResponses futureClusterResponses=ClusterExecutorUtil.execute(clusterRequest);
  try {
    ClusterNodeResponses clusterNodeResponses=futureClusterResponses.get(20,TimeUnit.SECONDS);
    ClusterNodeResponse clusterNodeResponse=clusterNodeResponses.getClusterResponse(address);
    return clusterNodeResponse.getResult();
  }
 catch (  Exception e) {
    throw new SchedulerException("Unable to load scheduled jobs from cluster node " + address.getDescription(),e);
  }
}
