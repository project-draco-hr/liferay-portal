{
  List<Long> userIds=new UniqueList<Long>();
  Group group=groupLocalService.getGroup(groupId);
  Company company=companyLocalService.getCompany(group.getCompanyId());
  String modelResource=Group.class.getName();
  String resourcePrimKey=String.valueOf(group.getGroupId());
  List<Role> roles=ResourceActionsUtil.getRoles(company.getCompanyId(),group,modelResource,null);
  List<Team> teams=teamLocalService.getGroupTeams(groupId);
  if (teams != null) {
    for (    Team team : teams) {
      Role role=RoleLocalServiceUtil.getTeamRole(team.getCompanyId(),team.getTeamId());
      roles.add(role);
    }
  }
  Resource resource=ResourceLocalServiceUtil.getResource(company.getCompanyId(),modelResource,ResourceConstants.SCOPE_INDIVIDUAL,resourcePrimKey);
  List<String> actions=ResourceActionsUtil.getResourceActions(Group.class.getName());
  for (  Role role : roles) {
    if (role.getName().equals(RoleConstants.OWNER) || role.getName().equals(RoleConstants.SITE_ADMINISTRATOR) || role.getName().equals(RoleConstants.SITE_OWNER)|| role.getName().equals(RoleConstants.ORGANIZATION_ADMINISTRATOR)|| role.getName().equals(RoleConstants.ORGANIZATION_OWNER)) {
      continue;
    }
    List<String> currentIndividualActions=new ArrayList<String>();
    List<String> currentGroupActions=new ArrayList<String>();
    List<String> currentGroupTemplateActions=new ArrayList<String>();
    List<String> currentCompanyActions=new ArrayList<String>();
    resourcePermissionLocalService.populateResourcePermissionActionIds(groupId,role,resource,actions,currentIndividualActions,currentGroupActions,currentGroupTemplateActions,currentCompanyActions);
    List<String> currentActions=new ArrayList<String>();
    currentActions.addAll(currentIndividualActions);
    currentActions.addAll(currentGroupActions);
    currentActions.addAll(currentGroupTemplateActions);
    currentActions.addAll(currentCompanyActions);
    if (currentActions.contains(ActionKeys.ASSIGN_MEMBERS)) {
      List<UserGroupRole> currentUserGroupRoles=userGroupRoleLocalService.getUserGroupRolesByGroupAndRole(groupId,role.getRoleId());
      for (      UserGroupRole userGroupRole : currentUserGroupRoles) {
        userIds.add(userGroupRole.getUserId());
      }
    }
  }
  Role siteAdministratorRole=roleLocalService.getRole(group.getCompanyId(),RoleConstants.SITE_ADMINISTRATOR);
  List<UserGroupRole> siteAdministratorUserGroupRoles=userGroupRoleLocalService.getUserGroupRolesByGroupAndRole(groupId,siteAdministratorRole.getRoleId());
  for (  UserGroupRole userGroupRole : siteAdministratorUserGroupRoles) {
    userIds.add(userGroupRole.getUserId());
  }
  Role siteOwnerRole=rolePersistence.findByC_N(group.getCompanyId(),RoleConstants.SITE_OWNER);
  List<UserGroupRole> siteOwnerUserGroupRoles=userGroupRoleLocalService.getUserGroupRolesByGroupAndRole(groupId,siteOwnerRole.getRoleId());
  for (  UserGroupRole userGroupRole : siteOwnerUserGroupRoles) {
    userIds.add(userGroupRole.getUserId());
  }
  if (!group.isOrganization()) {
    return userIds;
  }
  Role organizationAdministratorRole=roleLocalService.getRole(group.getCompanyId(),RoleConstants.ORGANIZATION_ADMINISTRATOR);
  List<UserGroupRole> organizationAdminstratorUserGroupRoles=userGroupRoleLocalService.getUserGroupRolesByGroupAndRole(groupId,organizationAdministratorRole.getRoleId());
  for (  UserGroupRole orgAdministratorUserGroupRole : organizationAdminstratorUserGroupRoles) {
    userIds.add(orgAdministratorUserGroupRole.getUserId());
  }
  Role orgOwnerRole=roleLocalService.getRole(group.getCompanyId(),RoleConstants.ORGANIZATION_OWNER);
  List<UserGroupRole> organizationOwnerUserGroupRoles=userGroupRoleLocalService.getUserGroupRolesByGroupAndRole(groupId,orgOwnerRole.getRoleId());
  for (  UserGroupRole organizationOwnerUserGroupRole : organizationOwnerUserGroupRoles) {
    userIds.add(organizationOwnerUserGroupRole.getUserId());
  }
  return userIds;
}
