{
  List<String> serviceAccessPolicyNames=ServiceAccessPolicyThreadLocal.getActiveServiceAccessPolicyNames();
  SAPConfiguration sapConfiguration=null;
  try {
    sapConfiguration=_configurationFactory.getConfiguration(SAPConfiguration.class,new CompanyServiceSettingsLocator(CompanyThreadLocal.getCompanyId(),SAPConstants.SERVICE_NAME));
  }
 catch (  ConfigurationException ce) {
    throw new SecurityException("Unable to get service access policy configuration",ce);
  }
  if (sapConfiguration.requireDefaultSAPEntry() || (serviceAccessPolicyNames == null)) {
    if (serviceAccessPolicyNames == null) {
      serviceAccessPolicyNames=new ArrayList<>();
      ServiceAccessPolicyThreadLocal.setActiveServiceAccessPolicyNames(serviceAccessPolicyNames);
    }
    boolean passwordBasedAuthentication=false;
    AccessControlContext accessControlContext=AccessControlUtil.getAccessControlContext();
    if (accessControlContext != null) {
      AuthVerifierResult authVerifierResult=accessControlContext.getAuthVerifierResult();
      if (authVerifierResult != null) {
        passwordBasedAuthentication=authVerifierResult.isPasswordBasedAuthentication();
      }
    }
    if (passwordBasedAuthentication) {
      serviceAccessPolicyNames.add(sapConfiguration.defaultUserSAPEntryName());
    }
 else {
      serviceAccessPolicyNames.add(sapConfiguration.defaultApplicationSAPEntryName());
    }
  }
  long companyId=CompanyThreadLocal.getCompanyId();
  Set<String> allowedServiceSignatures=new HashSet<>();
  for (  String name : serviceAccessPolicyNames) {
    try {
      SAPEntry sapEntry=_sapEntryLocalService.getSAPEntry(companyId,name);
      allowedServiceSignatures.addAll(sapEntry.getAllowedServiceSignaturesList());
    }
 catch (    PortalException pe) {
      throw new SecurityException(pe);
    }
  }
  if (allowedServiceSignatures.contains(StringPool.STAR)) {
    return;
  }
  Class<?> clazz=method.getDeclaringClass();
  String className=clazz.getName();
  if (allowedServiceSignatures.contains(className)) {
    return;
  }
  String methodName=method.getName();
  String classNameAndMethodName=className.concat(StringPool.POUND).concat(methodName);
  if (allowedServiceSignatures.contains(classNameAndMethodName)) {
    return;
  }
  for (  String allowedService : allowedServiceSignatures) {
    if (matches(className,methodName,allowedService)) {
      return;
    }
  }
  throw new SecurityException("Access denied to " + classNameAndMethodName);
}
