{
  PermissionCheckerImpl permissionChecker=null;
  try {
    LayoutsPublisherRequest layoutsPublisherRequest=(LayoutsPublisherRequest)JSONUtil.deserialize(message);
    String command=layoutsPublisherRequest.getCommand();
    long userId=layoutsPublisherRequest.getUserId();
    long stagingGroupId=layoutsPublisherRequest.getStagingGroupId();
    long liveGroupId=layoutsPublisherRequest.getLiveGroupId();
    boolean privateLayout=layoutsPublisherRequest.isPrivateLayout();
    Map<Long,Boolean> layoutIdMap=layoutsPublisherRequest.getLayoutIdMap();
    Map<String,String[]> parameterMap=layoutsPublisherRequest.getParameterMap();
    PrincipalThreadLocal.setName(userId);
    User user=UserLocalServiceUtil.getUserById(userId);
    permissionChecker=PermissionCheckerFactory.create(user,false);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    if (command.equals(LayoutsPublisherRequest.COMMAND_ALL_PAGES)) {
      StagingUtil.publishLayouts(stagingGroupId,liveGroupId,privateLayout,parameterMap);
    }
 else     if (command.equals(LayoutsPublisherRequest.COMMAND_SELECTED_PAGES)) {
      StagingUtil.publishLayouts(stagingGroupId,liveGroupId,privateLayout,layoutIdMap,parameterMap);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    try {
      PermissionCheckerFactory.recycle(permissionChecker);
    }
 catch (    Exception e) {
    }
  }
}
