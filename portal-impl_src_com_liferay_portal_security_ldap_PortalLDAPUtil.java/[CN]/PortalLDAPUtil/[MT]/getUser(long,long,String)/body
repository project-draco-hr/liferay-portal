{
  String postfix=LDAPSettingsUtil.getPropertyPostfix(ldapServerId);
  LdapContext ldapContext=getContext(ldapServerId,companyId);
  NamingEnumeration<SearchResult> enu=null;
  try {
    if (ldapContext == null) {
      return null;
    }
    String baseDN=PrefsPropsUtil.getString(companyId,PropsKeys.LDAP_BASE_DN + postfix);
    String filter=null;
    String userFilter=PrefsPropsUtil.getString(companyId,PropsKeys.LDAP_IMPORT_USER_SEARCH_FILTER + postfix);
    Properties userMappings=LDAPSettingsUtil.getUserMappings(ldapServerId,companyId);
    if (Validator.isNotNull(userFilter)) {
      StringBundler sb=new StringBundler(11);
      sb.append(StringPool.OPEN_PARENTHESIS);
      sb.append(StringPool.AMPERSAND);
      sb.append(StringPool.OPEN_PARENTHESIS);
      sb.append(userMappings.getProperty("screenName"));
      sb.append(StringPool.EQUAL);
      sb.append(screenName);
      sb.append(StringPool.CLOSE_PARENTHESIS);
      sb.append(StringPool.OPEN_PARENTHESIS);
      sb.append(userFilter);
      sb.append(StringPool.CLOSE_PARENTHESIS);
      sb.append(StringPool.CLOSE_PARENTHESIS);
      filter=sb.toString();
    }
 else {
      StringBundler sb=new StringBundler(5);
      sb.append(StringPool.OPEN_PARENTHESIS);
      sb.append(userMappings.getProperty("screenName"));
      sb.append(StringPool.EQUAL);
      sb.append(screenName);
      sb.append(StringPool.CLOSE_PARENTHESIS);
      filter=sb.toString();
    }
    SearchControls searchControls=new SearchControls(SearchControls.SUBTREE_SCOPE,1,0,null,false,false);
    enu=ldapContext.search(baseDN,filter,searchControls);
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (ldapContext != null) {
      ldapContext.close();
    }
  }
  if (enu.hasMoreElements()) {
    Binding binding=enu.nextElement();
    enu.close();
    return binding;
  }
 else {
    return null;
  }
}
