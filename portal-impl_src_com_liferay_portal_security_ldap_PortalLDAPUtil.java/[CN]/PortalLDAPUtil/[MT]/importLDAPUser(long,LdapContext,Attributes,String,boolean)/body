{
  AttributesTransformer attrsTransformer=AttributesTransformerFactory.getInstance();
  attrs=attrsTransformer.transformUser(attrs);
  Properties userMappings=getUserMappings(companyId);
  LogUtil.debug(_log,userMappings);
  User defaultUser=UserLocalServiceUtil.getDefaultUser(companyId);
  boolean autoPassword=false;
  boolean updatePassword=true;
  if (password.equals(StringPool.BLANK)) {
    autoPassword=true;
    updatePassword=false;
  }
  long creatorUserId=0;
  boolean passwordReset=false;
  boolean autoScreenName=false;
  String screenName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("screenName")).toLowerCase();
  String emailAddress=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("emailAddress"));
  String openId=StringPool.BLANK;
  Locale locale=defaultUser.getLocale();
  String firstName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("firstName"));
  String middleName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("middleName"));
  String lastName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("lastName"));
  if (Validator.isNull(firstName) || Validator.isNull(lastName)) {
    String fullName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("fullName"));
    String[] names=LDAPUtil.splitFullName(fullName);
    firstName=names[0];
    middleName=names[1];
    lastName=names[2];
  }
  int prefixId=0;
  int suffixId=0;
  boolean male=true;
  int birthdayMonth=Calendar.JANUARY;
  int birthdayDay=1;
  int birthdayYear=1970;
  String jobTitle=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("jobTitle"));
  long[] groupIds=null;
  long[] organizationIds=null;
  long[] roleIds=null;
  long[] userGroupIds=null;
  boolean sendEmail=false;
  ServiceContext serviceContext=null;
  if (_log.isDebugEnabled()) {
    _log.debug("Screen name " + screenName + " and email address "+ emailAddress);
  }
  if (Validator.isNull(screenName) || Validator.isNull(emailAddress)) {
    if (_log.isWarnEnabled()) {
      _log.warn("Cannot add user because screen name and email address " + "are required");
    }
    return null;
  }
  User user=null;
  try {
    String authType=PrefsPropsUtil.getString(companyId,PropsKeys.COMPANY_SECURITY_AUTH_TYPE,PropsValues.COMPANY_SECURITY_AUTH_TYPE);
    if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
      user=UserLocalServiceUtil.getUserByScreenName(companyId,screenName);
    }
 else {
      user=UserLocalServiceUtil.getUserByEmailAddress(companyId,emailAddress);
    }
    if (user.isDefaultUser()) {
      return user;
    }
    Date ldapUserModifiedDate=null;
    String modifiedDate=LDAPUtil.getAttributeValue(attrs,"modifyTimestamp");
    try {
      if (Validator.isNull(modifiedDate)) {
        if (_log.isInfoEnabled()) {
          _log.info("LDAP entry never modified, skipping user " + user.getEmailAddress());
        }
        return user;
      }
 else {
        DateFormat dateFormat=new SimpleDateFormat("yyyyMMddHHmmss");
        ldapUserModifiedDate=dateFormat.parse(modifiedDate);
      }
      if (ldapUserModifiedDate.equals(user.getModifiedDate()) && autoPassword) {
        if (_log.isDebugEnabled()) {
          _log.debug("User is already syncronized, skipping user " + user.getEmailAddress());
        }
        return user;
      }
    }
 catch (    ParseException pe) {
      if (_log.isDebugEnabled()) {
        _log.debug("Unable to parse LDAP modify timestamp " + modifiedDate);
      }
      _log.debug(pe,pe);
    }
    Contact contact=user.getContact();
    Calendar birthdayCal=CalendarFactoryUtil.getCalendar();
    birthdayCal.setTime(contact.getBirthday());
    birthdayMonth=birthdayCal.get(Calendar.MONTH);
    birthdayDay=birthdayCal.get(Calendar.DATE);
    birthdayYear=birthdayCal.get(Calendar.YEAR);
    if (updatePassword) {
      user=UserLocalServiceUtil.updatePassword(user.getUserId(),password,password,passwordReset,true);
    }
    user=UserLocalServiceUtil.updateUser(user.getUserId(),password,StringPool.BLANK,StringPool.BLANK,user.isPasswordReset(),screenName,emailAddress,openId,user.getLanguageId(),user.getTimeZoneId(),user.getGreeting(),user.getComments(),firstName,middleName,lastName,contact.getPrefixId(),contact.getSuffixId(),contact.getMale(),birthdayMonth,birthdayDay,birthdayYear,contact.getSmsSn(),contact.getAimSn(),contact.getFacebookSn(),contact.getIcqSn(),contact.getJabberSn(),contact.getMsnSn(),contact.getMySpaceSn(),contact.getSkypeSn(),contact.getTwitterSn(),contact.getYmSn(),jobTitle,groupIds,organizationIds,roleIds,userGroupIds,serviceContext);
    if (ldapUserModifiedDate != null) {
      UserLocalServiceUtil.updateModifiedDate(user.getUserId(),ldapUserModifiedDate);
    }
  }
 catch (  NoSuchUserException nsue) {
  }
  if (user == null) {
    try {
      if (_log.isDebugEnabled()) {
        _log.debug("Adding user to portal " + emailAddress);
      }
      user=UserLocalServiceUtil.addUser(creatorUserId,companyId,autoPassword,password,password,autoScreenName,screenName,emailAddress,openId,locale,firstName,middleName,lastName,prefixId,suffixId,male,birthdayMonth,birthdayDay,birthdayYear,jobTitle,groupIds,organizationIds,roleIds,userGroupIds,sendEmail,serviceContext);
    }
 catch (    Exception e) {
      _log.error("Problem adding user with screen name " + screenName + " and email address "+ emailAddress,e);
    }
  }
  if (importGroupMembership && (user != null)) {
    String userMappingsGroup=userMappings.getProperty("group");
    if (userMappingsGroup != null) {
      Attribute attr=attrs.get(userMappingsGroup);
      if (attr != null) {
        _importGroupsAndMembershipFromLDAPUser(companyId,ctx,user.getUserId(),attr);
      }
    }
  }
  return user;
}
