{
  long companyId=user.getCompanyId();
  if (!isAuthEnabled(companyId) || !isExportEnabled(companyId)) {
    return;
  }
  LdapContext ctx=getContext(companyId);
  if (ctx == null) {
    return;
  }
  Properties userMappings=getUserMappings(companyId);
  Binding binding=getUser(user.getCompanyId(),user.getScreenName());
  String name=StringPool.BLANK;
  if (binding == null) {
    StringBuilder sb=new StringBuilder();
    sb.append(userMappings.getProperty("screenName"));
    sb.append(StringPool.EQUAL);
    sb.append(user.getScreenName());
    sb.append(StringPool.COMMA);
    sb.append(getUsersDN(companyId));
    name=sb.toString();
    LDAPUser ldapUser=(LDAPUser)Class.forName(PropsValues.LDAP_USER_IMPL).newInstance();
    ldapUser.setUser(user);
    ctx.bind(name,ldapUser);
  }
 else {
    name=getNameInNamespace(companyId,binding);
    Modifications mods=Modifications.getInstance();
    mods.addItem(userMappings.getProperty("firstName"),user.getFirstName());
    mods.addItem(userMappings.getProperty("lastName"),user.getLastName());
    String fullNameMapping=userMappings.getProperty("fullName");
    if (Validator.isNotNull(fullNameMapping)) {
      mods.addItem(fullNameMapping,user.getFullName());
    }
    if (user.isPasswordModified() && Validator.isNotNull(user.getPasswordUnencrypted())) {
      mods.addItem(userMappings.getProperty("password"),user.getPasswordUnencrypted());
    }
    mods.addItem(userMappings.getProperty("emailAddress"),user.getEmailAddress());
    String jobTitleMapping=userMappings.getProperty("jobTitle");
    if (Validator.isNotNull(jobTitleMapping)) {
      mods.addItem(jobTitleMapping,user.getContact().getJobTitle());
    }
    ModificationItem[] modItems=mods.getItems();
    ctx.modifyAttributes(name,modItems);
  }
  ctx.close();
}
