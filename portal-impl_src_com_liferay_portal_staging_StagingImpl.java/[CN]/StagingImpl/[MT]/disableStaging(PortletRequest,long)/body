{
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  Group liveGroup=GroupLocalServiceUtil.getGroup(liveGroupId);
  UnicodeProperties typeSettingsProperties=liveGroup.getTypeSettingsProperties();
  typeSettingsProperties.remove("remoteAddress");
  typeSettingsProperties.remove("remoteGroupId");
  typeSettingsProperties.remove("remotePort");
  typeSettingsProperties.remove("secureConnection");
  typeSettingsProperties.remove("staged");
  typeSettingsProperties.remove("stagedRemotely");
  typeSettingsProperties.remove("workflowEnabled");
  typeSettingsProperties.remove("workflowRoleNames");
  typeSettingsProperties.remove("workflowStages");
  Set<String> keys=new HashSet<String>();
  for (  String key : typeSettingsProperties.keySet()) {
    if (key.startsWith(StagingConstants.STAGED_PORTLET)) {
      keys.add(key);
    }
  }
  for (  String key : keys) {
    typeSettingsProperties.remove(key);
  }
  if (liveGroup.hasStagingGroup()) {
    if (themeDisplay.getScopeGroupId() != liveGroup.getGroupId()) {
      String redirect=ParamUtil.getString(portletRequest,"pagesRedirect");
      redirect=HttpUtil.removeParameter(redirect,"refererPlid");
      redirect=StringUtil.replace(redirect,String.valueOf(themeDisplay.getScopeGroupId()),String.valueOf(liveGroup.getGroupId()));
      portletRequest.setAttribute(WebKeys.REDIRECT,redirect);
    }
    Group stagingGroup=liveGroup.getStagingGroup();
    GroupLocalServiceUtil.deleteGroup(stagingGroup.getGroupId());
  }
 else {
    LayoutSetBranchLocalServiceUtil.deleteLayoutSetBranches(liveGroup.getGroupId(),false);
    LayoutSetBranchLocalServiceUtil.deleteLayoutSetBranches(liveGroup.getGroupId(),true);
  }
  GroupLocalServiceUtil.updateGroup(liveGroup.getGroupId(),typeSettingsProperties.toString());
}
