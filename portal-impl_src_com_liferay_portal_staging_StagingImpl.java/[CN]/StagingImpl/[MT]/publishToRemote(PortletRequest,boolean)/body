{
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String tabs1=ParamUtil.getString(portletRequest,"tabs1");
  long groupId=ParamUtil.getLong(portletRequest,"groupId");
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  String scope=ParamUtil.getString(portletRequest,"scope");
  if (Validator.isNull(scope)) {
    scope="all-pages";
  }
  Map<Long,Boolean> layoutIdMap=null;
  if (scope.equals("selected-pages")) {
    layoutIdMap=ExportImportHelperUtil.getLayoutIdMap(portletRequest);
  }
  Map<String,String[]> parameterMap=getStagingParameters(portletRequest);
  parameterMap.put(PortletDataHandlerKeys.PUBLISH_TO_REMOTE,new String[]{Boolean.TRUE.toString()});
  Group group=GroupLocalServiceUtil.getGroup(groupId);
  UnicodeProperties groupTypeSettingsProperties=group.getTypeSettingsProperties();
  String remoteAddress=ParamUtil.getString(portletRequest,"remoteAddress",groupTypeSettingsProperties.getProperty("remoteAddress"));
  remoteAddress=stripProtocolFromRemoteAddress(remoteAddress);
  int remotePort=ParamUtil.getInteger(portletRequest,"remotePort",GetterUtil.getInteger(groupTypeSettingsProperties.getProperty("remotePort")));
  String remotePathContext=ParamUtil.getString(portletRequest,"remotePathContext",groupTypeSettingsProperties.getProperty("remotePathContext"));
  boolean secureConnection=ParamUtil.getBoolean(portletRequest,"secureConnection",GetterUtil.getBoolean(groupTypeSettingsProperties.getProperty("secureConnection")));
  long remoteGroupId=ParamUtil.getLong(portletRequest,"remoteGroupId",GetterUtil.getLong(groupTypeSettingsProperties.getProperty("remoteGroupId")));
  boolean remotePrivateLayout=ParamUtil.getBoolean(portletRequest,"remotePrivateLayout");
  validate(remoteAddress,remotePort,remotePathContext,secureConnection,remoteGroupId);
  DateRange dateRange=ExportImportHelperUtil.getDateRange(portletRequest,groupId,privateLayout,0,null);
  if (schedule) {
    String groupName=getSchedulerGroupName(DestinationNames.LAYOUTS_REMOTE_PUBLISHER,groupId);
    int recurrenceType=ParamUtil.getInteger(portletRequest,"recurrenceType");
    Calendar startCalendar=ExportImportHelperUtil.getCalendar(portletRequest,"schedulerStartDate",true);
    String cronText=SchedulerEngineHelperUtil.getCronText(portletRequest,startCalendar,true,recurrenceType);
    Date schedulerEndDate=null;
    int endDateType=ParamUtil.getInteger(portletRequest,"endDateType");
    if (endDateType == 1) {
      Calendar endCalendar=ExportImportHelperUtil.getCalendar(portletRequest,"schedulerEndDate",true);
      schedulerEndDate=endCalendar.getTime();
    }
    String description=ParamUtil.getString(portletRequest,"description");
    LayoutServiceUtil.schedulePublishToRemote(groupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,remotePathContext,secureConnection,remoteGroupId,remotePrivateLayout,dateRange.getStartDate(),dateRange.getEndDate(),groupName,cronText,startCalendar.getTime(),schedulerEndDate,description);
  }
 else {
    MessageStatus messageStatus=new MessageStatus();
    messageStatus.startTimer();
    try {
      copyRemoteLayouts(groupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,remotePathContext,secureConnection,remoteGroupId,remotePrivateLayout,dateRange.getStartDate(),dateRange.getEndDate());
    }
 catch (    Exception e) {
      messageStatus.setException(e);
      throw e;
    }
 finally {
      messageStatus.stopTimer();
      LayoutsRemotePublisherRequest publisherRequest=new LayoutsRemotePublisherRequest(themeDisplay.getUserId(),groupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,remotePathContext,secureConnection,remoteGroupId,remotePrivateLayout,dateRange.getStartDate(),dateRange.getEndDate());
      messageStatus.setPayload(publisherRequest);
      MessageBusUtil.sendMessage(DestinationNames.MESSAGE_BUS_MESSAGE_STATUS,messageStatus);
    }
  }
}
