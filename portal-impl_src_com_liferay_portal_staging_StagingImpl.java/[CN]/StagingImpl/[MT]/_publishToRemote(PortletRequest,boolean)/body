{
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String tabs1=ParamUtil.getString(portletRequest,"tabs1");
  long groupId=ParamUtil.getLong(portletRequest,"groupId");
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  String scope=ParamUtil.getString(portletRequest,"scope");
  if (Validator.isNull(scope)) {
    scope="all-pages";
  }
  Map<Long,Boolean> layoutIdMap=null;
  Map<String,String[]> parameterMap=portletRequest.getParameterMap();
  if (scope.equals("selected-pages")) {
    layoutIdMap=new LinkedHashMap<Long,Boolean>();
    long[] rowIds=ParamUtil.getLongValues(portletRequest,"rowIds");
    for (    long selPlid : rowIds) {
      boolean includeChildren=ParamUtil.getBoolean(portletRequest,"includeChildren_" + selPlid);
      layoutIdMap.put(selPlid,includeChildren);
    }
  }
  String remoteAddress=ParamUtil.getString(portletRequest,"remoteAddress");
  int remotePort=ParamUtil.getInteger(portletRequest,"remotePort");
  boolean secureConnection=ParamUtil.getBoolean(portletRequest,"secureConnection");
  long remoteGroupId=ParamUtil.getLong(portletRequest,"remoteGroupId");
  boolean remotePrivateLayout=ParamUtil.getBoolean(portletRequest,"remotePrivateLayout");
  String range=ParamUtil.getString(portletRequest,"range");
  Date startDate=null;
  Date endDate=null;
  if (range.equals("dateRange")) {
    startDate=_getDate(portletRequest,"startDate",true).getTime();
    endDate=_getDate(portletRequest,"endDate",true).getTime();
  }
 else   if (range.equals("fromLastPublishDate")) {
    LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(groupId,privateLayout);
    UnicodeProperties settingsProperties=layoutSet.getSettingsProperties();
    long lastPublishDate=GetterUtil.getLong(settingsProperties.getProperty("last-publish-date"));
    if (lastPublishDate > 0) {
      Calendar cal=Calendar.getInstance(themeDisplay.getTimeZone(),themeDisplay.getLocale());
      endDate=cal.getTime();
      cal.setTimeInMillis(lastPublishDate);
      startDate=cal.getTime();
    }
  }
 else   if (range.equals("last")) {
    int rangeLast=ParamUtil.getInteger(portletRequest,"last");
    Date now=new Date();
    startDate=new Date(now.getTime() - (rangeLast * Time.HOUR));
    endDate=now;
  }
  if (schedule) {
    String groupName=getSchedulerGroupName(DestinationNames.LAYOUTS_REMOTE_PUBLISHER,groupId);
    int recurrenceType=ParamUtil.getInteger(portletRequest,"recurrenceType");
    Calendar startCal=_getDate(portletRequest,"schedulerStartDate",true);
    String cronText=_getCronText(portletRequest,startCal,true,recurrenceType);
    Date schedulerEndDate=null;
    int endDateType=ParamUtil.getInteger(portletRequest,"endDateType");
    if (endDateType == 1) {
      Calendar endCal=_getDate(portletRequest,"schedulerEndDate",true);
      schedulerEndDate=endCal.getTime();
    }
    String description=ParamUtil.getString(portletRequest,"description");
    LayoutServiceUtil.schedulePublishToRemote(groupId,privateLayout,layoutIdMap,getStagingParameters(portletRequest),remoteAddress,remotePort,secureConnection,remoteGroupId,remotePrivateLayout,startDate,endDate,groupName,cronText,startCal.getTime(),schedulerEndDate,description);
  }
 else {
    MessageStatus messageStatus=new MessageStatus();
    messageStatus.startTimer();
    try {
      copyRemoteLayouts(groupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,secureConnection,remoteGroupId,remotePrivateLayout,getStagingParameters(portletRequest),startDate,endDate);
    }
 catch (    Exception e) {
      messageStatus.setException(e);
      throw e;
    }
 finally {
      messageStatus.stopTimer();
      LayoutsRemotePublisherRequest publisherRequest=new LayoutsRemotePublisherRequest(themeDisplay.getUserId(),groupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,secureConnection,remoteGroupId,remotePrivateLayout,startDate,endDate);
      messageStatus.setPayload(publisherRequest);
      MessageBusUtil.sendMessage(DestinationNames.MESSAGE_BUS_MESSAGE_STATUS,messageStatus);
    }
  }
}
