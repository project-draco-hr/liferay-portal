{
  Map<String,Serializable> settingsMap=exportImportConfiguration.getSettingsMap();
  PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
  boolean secureConnection=MapUtil.getBoolean(settingsMap,"secureConnection");
  StringBundler sb=new StringBundler(4);
  if (secureConnection) {
    sb.append(Http.HTTPS_WITH_SLASH);
  }
 else {
    sb.append(Http.HTTP_WITH_SLASH);
  }
  String remoteAddress=MapUtil.getString(settingsMap,"remoteAddress");
  int remotePort=MapUtil.getInteger(settingsMap,"remotePort");
  String remotePathContext=MapUtil.getString(settingsMap,"remotePathContext");
  sb.append(remoteAddress);
  sb.append(StringPool.COLON);
  sb.append(remotePort);
  sb.append(remotePathContext);
  String url=sb.toString();
  User user=permissionChecker.getUser();
  HttpPrincipal httpPrincipal=new HttpPrincipal(url,user.getEmailAddress(),user.getPassword(),user.getPasswordEncrypted());
  long remoteGroupId=MapUtil.getLong(settingsMap,"remoteGroupId");
  try {
    GroupServiceHttp.checkRemoteStagingGroup(httpPrincipal,remoteGroupId);
  }
 catch (  NoSuchGroupException nsge) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.NO_GROUP);
    ree.setGroupId(remoteGroupId);
    throw ree;
  }
catch (  RemoteAuthException rae) {
    rae.setURL(url);
    throw rae;
  }
catch (  SystemException se) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.BAD_CONNECTION);
    ree.setURL(url);
    throw ree;
  }
  Map<String,Serializable> taskContextMap=new HashMap<String,Serializable>();
  taskContextMap.put("exportImportConfigurationId",exportImportConfiguration.getExportImportConfigurationId());
  taskContextMap.put("httpPrincipal",httpPrincipal);
  BackgroundTaskLocalServiceUtil.addBackgroundTask(user.getUserId(),exportImportConfiguration.getGroupId(),StringPool.BLANK,null,LayoutRemoteStagingBackgroundTaskExecutor.class,taskContextMap,new ServiceContext());
}
