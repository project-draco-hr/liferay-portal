{
  String errorMessage=StringPool.BLANK;
  JSONArray errorMessagesJSONArray=null;
  int errorType=0;
  JSONArray warningMessagesJSONArray=null;
  if (e instanceof DuplicateFileException || e instanceof FileExtensionException || e instanceof FileNameException|| e instanceof FileSizeException|| e instanceof LARFileException|| e instanceof LARFileSizeException|| e instanceof LARTypeException|| e instanceof LayoutPrototypeException|| e instanceof LocaleException|| e instanceof MissingReferenceException|| e instanceof PortletIdException) {
    if (e instanceof DuplicateFileException) {
      errorMessage=themeDisplay.translate("please-enter-a-unique-document-name");
      errorType=ServletResponseConstants.SC_DUPLICATE_FILE_EXCEPTION;
    }
 else     if (e instanceof FileExtensionException) {
      errorMessage=themeDisplay.translate("document-names-must-end-with-one-of-the-following-" + "extensions",".lar");
      errorType=ServletResponseConstants.SC_FILE_EXTENSION_EXCEPTION;
    }
 else     if (e instanceof FileNameException) {
      errorMessage=themeDisplay.translate("please-enter-a-file-with-a-valid-file-name");
      errorType=ServletResponseConstants.SC_FILE_NAME_EXCEPTION;
    }
 else     if (e instanceof FileSizeException || e instanceof LARFileSizeException) {
      long fileMaxSize=PrefsPropsUtil.getLong(PropsKeys.DL_FILE_MAX_SIZE);
      if (fileMaxSize == 0) {
        fileMaxSize=PrefsPropsUtil.getLong(PropsKeys.UPLOAD_SERVLET_REQUEST_IMPL_MAX_SIZE);
      }
      fileMaxSize/=1024;
      errorMessage=themeDisplay.translate("please-enter-a-file-with-a-valid-file-size-no-larger-" + "than-x",fileMaxSize);
      errorType=ServletResponseConstants.SC_FILE_SIZE_EXCEPTION;
    }
 else     if (e instanceof LARTypeException) {
      LARTypeException lte=(LARTypeException)e;
      errorMessage=themeDisplay.translate("please-import-a-lar-file-of-the-correct-type-x-is-not-" + "valid",lte.getMessage());
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    }
 else     if (e instanceof LARFileException) {
      errorMessage=themeDisplay.translate("please-specify-a-lar-file-to-import");
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    }
 else     if (e instanceof LayoutPrototypeException) {
      LayoutPrototypeException lpe=(LayoutPrototypeException)e;
      StringBundler sb=new StringBundler(4);
      sb.append("the-lar-file-could-not-be-imported-because-it-");
      sb.append("requires-page-templates-or-site-templates-that-");
      sb.append("could-not-be-found.-please-import-the-following-");
      sb.append("templates-manually");
      errorMessage=themeDisplay.translate(sb.toString());
      errorMessagesJSONArray=JSONFactoryUtil.createJSONArray();
      List<Tuple> missingLayoutPrototypes=lpe.getMissingLayoutPrototypes();
      for (      Tuple missingLayoutPrototype : missingLayoutPrototypes) {
        JSONObject errorMessageJSONObject=JSONFactoryUtil.createJSONObject();
        String layoutPrototypeUuid=(String)missingLayoutPrototype.getObject(1);
        errorMessageJSONObject.put("info",layoutPrototypeUuid);
        String layoutPrototypeName=(String)missingLayoutPrototype.getObject(2);
        errorMessageJSONObject.put("name",layoutPrototypeName);
        String layoutPrototypeClassName=(String)missingLayoutPrototype.getObject(0);
        errorMessageJSONObject.put("type",ResourceActionsUtil.getModelResource(themeDisplay.getLocale(),layoutPrototypeClassName));
        errorMessagesJSONArray.put(errorMessageJSONObject);
      }
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    }
 else     if (e instanceof LocaleException) {
      LocaleException le=(LocaleException)e;
      errorMessage=themeDisplay.translate("the-available-languages-in-the-lar-file-x-do-not-match-" + "the-portal's-available-languages-x",new String[]{StringUtil.merge(le.getSourceAvailableLocales(),StringPool.COMMA_AND_SPACE),StringUtil.merge(le.getTargetAvailableLocales(),StringPool.COMMA_AND_SPACE)});
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    }
 else     if (e instanceof MissingReferenceException) {
      MissingReferenceException mre=(MissingReferenceException)e;
      errorMessage=themeDisplay.translate("there-are-missing-references-that-could-not-be-found-" + "in-the-current-site.-please-import-another-lar-file-" + "containing-the-following-elements");
      MissingReferences missingReferences=mre.getMissingReferences();
      errorMessagesJSONArray=getErrorMessagesJSONArray(themeDisplay,missingReferences.getDependencyMissingReferences());
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
      warningMessagesJSONArray=getWarningMessagesJSONArray(themeDisplay,missingReferences.getWeakMissingReferences());
    }
 else     if (e instanceof PortletIdException) {
      errorMessage=themeDisplay.translate("please-import-a-lar-file-for-the-current-portlet");
      errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    }
  }
 else {
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
  }
  JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
  jsonObject.put("message",errorMessage);
  if ((errorMessagesJSONArray != null) && (errorMessagesJSONArray.length() > 0)) {
    jsonObject.put("messageListItems",errorMessagesJSONArray);
  }
  jsonObject.put("status",errorType);
  if ((warningMessagesJSONArray != null) && (warningMessagesJSONArray.length() > 0)) {
    jsonObject.put("warningMessages",warningMessagesJSONArray);
  }
  return jsonObject;
}
