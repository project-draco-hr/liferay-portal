{
  PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
  User user=permissionChecker.getUser();
  StringBundler sb=new StringBundler(4);
  if (secureConnection) {
    sb.append(Http.HTTPS_WITH_SLASH);
  }
 else {
    sb.append(Http.HTTP_WITH_SLASH);
  }
  sb.append(remoteAddress);
  sb.append(StringPool.COLON);
  sb.append(remotePort);
  sb.append(remotePathContext);
  String url=sb.toString();
  HttpPrincipal httpPrincipal=new HttpPrincipal(url,user.getEmailAddress(),user.getPassword(),user.getPasswordEncrypted());
  try {
    GroupServiceHttp.checkRemoteStagingGroup(httpPrincipal,remoteGroupId);
  }
 catch (  NoSuchGroupException nsge) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.NO_GROUP);
    ree.setGroupId(remoteGroupId);
    throw ree;
  }
catch (  SystemException se) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.BAD_CONNECTION);
    ree.setURL(url);
    throw ree;
  }
  Map<String,Serializable> taskContextMap=BackgroundTaskContextMapFactory.buildTaskContextMap(user.getUserId(),sourceGroupId,privateLayout,null,parameterMap,Constants.PUBLISH,startDate,endDate,null);
  if (layoutIdMap != null) {
    HashMap<Long,Boolean> serializableLayoutIdMap=new HashMap<Long,Boolean>(layoutIdMap);
    taskContextMap.put("layoutIdMap",serializableLayoutIdMap);
  }
  taskContextMap.put("httpPrincipal",httpPrincipal);
  taskContextMap.put("remoteGroupId",remoteGroupId);
  BackgroundTaskLocalServiceUtil.addBackgroundTask(user.getUserId(),sourceGroupId,StringPool.BLANK,null,LayoutRemoteStagingBackgroundTaskExecutor.class,taskContextMap,new ServiceContext());
}
