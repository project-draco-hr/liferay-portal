{
  PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
  User user=permissionChecker.getUser();
  StringBundler sb=new StringBundler(4);
  if (secureConnection) {
    sb.append(Http.HTTPS_WITH_SLASH);
  }
 else {
    sb.append(Http.HTTP_WITH_SLASH);
  }
  sb.append(remoteAddress);
  sb.append(StringPool.COLON);
  sb.append(remotePort);
  sb.append(remotePathContext);
  String url=sb.toString();
  HttpPrincipal httpPrincipal=new HttpPrincipal(url,user.getEmailAddress(),user.getPassword(),user.getPasswordEncrypted());
  try {
    GroupServiceHttp.checkRemoteStagingGroup(httpPrincipal,remoteGroupId);
  }
 catch (  NoSuchGroupException nsge) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.NO_GROUP);
    ree.setGroupId(remoteGroupId);
    throw ree;
  }
catch (  SystemException se) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.BAD_CONNECTION);
    ree.setURL(url);
    throw ree;
  }
  File file=null;
  FileInputStream fileInputStream=null;
  long folderId=0;
  try {
    file=exportLayoutsAsFile(sourceGroupId,privateLayout,layoutIdMap,parameterMap,remoteGroupId,startDate,endDate,httpPrincipal);
    int bufferSize=PropsValues.STAGING_REMOTE_TRANSFER_BUFFER_SIZE;
    byte[] byteBuffer=new byte[bufferSize];
    String fileName=file.getName();
    String md5Checksum=FileUtil.getMD5Checksum(file);
    fileInputStream=new FileInputStream(file);
    int readBytes=0;
    folderId=StagingServiceHttp.prepare(httpPrincipal,remoteGroupId,md5Checksum);
    while ((readBytes=fileInputStream.read(byteBuffer)) >= 0) {
      if (readBytes < bufferSize) {
        byte[] tempByteBuffer=new byte[readBytes];
        System.arraycopy(byteBuffer,0,tempByteBuffer,0,readBytes);
        StagingServiceHttp.stage(httpPrincipal,folderId,fileName,tempByteBuffer);
      }
 else {
        StagingServiceHttp.stage(httpPrincipal,folderId,fileName,byteBuffer);
      }
      byteBuffer=new byte[bufferSize];
    }
    StagingServiceHttp.publish(httpPrincipal,folderId,privateLayout,parameterMap);
  }
  finally {
    StreamUtil.cleanUp(fileInputStream);
    FileUtil.delete(file);
    if (folderId > 0) {
      StagingServiceHttp.cleanup(httpPrincipal,folderId);
    }
  }
}
