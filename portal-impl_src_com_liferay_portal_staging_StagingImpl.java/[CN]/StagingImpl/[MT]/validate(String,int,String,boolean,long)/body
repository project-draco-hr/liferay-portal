{
  RemoteOptionsException roe=null;
  if (!Validator.isDomain(remoteAddress) && !Validator.isIPAddress(remoteAddress)) {
    roe=new RemoteOptionsException(RemoteOptionsException.REMOTE_ADDRESS);
    roe.setRemoteAddress(remoteAddress);
    throw roe;
  }
  if ((remotePort < 1) || (remotePort > 65535)) {
    roe=new RemoteOptionsException(RemoteOptionsException.REMOTE_PORT);
    roe.setRemotePort(remotePort);
    throw roe;
  }
  if (Validator.isNotNull(remotePathContext) && (!remotePathContext.startsWith(StringPool.FORWARD_SLASH) || remotePathContext.endsWith(StringPool.FORWARD_SLASH))) {
    roe=new RemoteOptionsException(RemoteOptionsException.REMOTE_PATH_CONTEXT);
    roe.setRemotePathContext(remotePathContext);
    throw roe;
  }
  if (remoteGroupId <= 0) {
    roe=new RemoteOptionsException(RemoteOptionsException.REMOTE_GROUP_ID);
    roe.setRemoteGroupId(remoteGroupId);
    throw roe;
  }
  PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
  User user=permissionChecker.getUser();
  String remoteURL=buildRemoteURL(remoteAddress,remotePort,remotePathContext,secureConnection,GroupConstants.DEFAULT_LIVE_GROUP_ID,false);
  HttpPrincipal httpPrincipal=new HttpPrincipal(remoteURL,user.getEmailAddress(),user.getPassword(),user.getPasswordEncrypted());
  try {
    GroupServiceHttp.checkRemoteStagingGroup(httpPrincipal,remoteGroupId);
  }
 catch (  NoSuchGroupException nsge) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.NO_GROUP);
    ree.setGroupId(remoteGroupId);
    throw ree;
  }
catch (  PrincipalException pe) {
    RemoteExportException ree=new RemoteExportException(RemoteExportException.NO_PERMISSIONS);
    ree.setGroupId(remoteGroupId);
    throw ree;
  }
catch (  SystemException se) {
    if (se.getCause() instanceof InvalidKeyException) {
      throw (InvalidKeyException)se.getCause();
    }
    RemoteExportException ree=new RemoteExportException(RemoteExportException.BAD_CONNECTION,se.getMessage());
    ree.setURL(remoteURL);
    throw ree;
  }
}
