{
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String tabs1=ParamUtil.getString(portletRequest,"tabs1");
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  String scope=ParamUtil.getString(portletRequest,"scope");
  long[] layoutIds=null;
  if (scope.equals("selected-pages")) {
    layoutIds=ExportImportHelperUtil.getLayoutIds(portletRequest,targetGroupId);
  }
  if (schedule) {
    String groupName=getSchedulerGroupName(DestinationNames.LAYOUTS_LOCAL_PUBLISHER,targetGroupId);
    int recurrenceType=ParamUtil.getInteger(portletRequest,"recurrenceType");
    Calendar startCalendar=ExportImportDateUtil.getCalendar(portletRequest,"schedulerStartDate",true);
    String cronText=SchedulerEngineHelperUtil.getCronText(portletRequest,startCalendar,true,recurrenceType);
    Date schedulerEndDate=null;
    int endDateType=ParamUtil.getInteger(portletRequest,"endDateType");
    if (endDateType == 1) {
      Calendar endCalendar=ExportImportDateUtil.getCalendar(portletRequest,"schedulerEndDate",true);
      schedulerEndDate=endCalendar.getTime();
    }
    String description=ParamUtil.getString(portletRequest,"description");
    LayoutServiceUtil.schedulePublishToLive(sourceGroupId,targetGroupId,privateLayout,layoutIds,parameterMap,scope,null,null,groupName,cronText,startCalendar.getTime(),schedulerEndDate,description);
  }
 else {
    if (scope.equals("all-pages")) {
      publishLayouts(themeDisplay.getUserId(),sourceGroupId,targetGroupId,privateLayout,parameterMap,null,null);
    }
 else {
      publishLayouts(themeDisplay.getUserId(),sourceGroupId,targetGroupId,privateLayout,layoutIds,parameterMap,null,null);
    }
  }
}
