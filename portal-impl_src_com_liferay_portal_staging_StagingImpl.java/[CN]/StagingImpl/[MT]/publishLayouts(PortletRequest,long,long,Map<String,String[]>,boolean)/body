{
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String tabs1=ParamUtil.getString(portletRequest,"tabs1");
  boolean privateLayout=true;
  if (tabs1.equals("public-pages")) {
    privateLayout=false;
  }
  String scope=ParamUtil.getString(portletRequest,"scope");
  Map<Long,Boolean> layoutIdMap=new LinkedHashMap<Long,Boolean>();
  if (scope.equals("selected-pages")) {
    layoutIdMap=ExportImportHelperUtil.getLayoutIdMap(portletRequest);
  }
  DateRange dateRange=ExportImportDateUtil.getDateRange(portletRequest,sourceGroupId,privateLayout,0,null,ExportImportDateUtil.RANGE_FROM_LAST_PUBLISH_DATE);
  if (schedule) {
    String groupName=getSchedulerGroupName(DestinationNames.LAYOUTS_LOCAL_PUBLISHER,targetGroupId);
    int recurrenceType=ParamUtil.getInteger(portletRequest,"recurrenceType");
    Calendar startCalendar=ExportImportDateUtil.getCalendar(portletRequest,"schedulerStartDate",true);
    String cronText=SchedulerEngineHelperUtil.getCronText(portletRequest,startCalendar,true,recurrenceType);
    Date schedulerEndDate=null;
    int endDateType=ParamUtil.getInteger(portletRequest,"endDateType");
    if (endDateType == 1) {
      Calendar endCalendar=ExportImportDateUtil.getCalendar(portletRequest,"schedulerEndDate",true);
      schedulerEndDate=endCalendar.getTime();
    }
    String description=ParamUtil.getString(portletRequest,"description");
    LayoutServiceUtil.schedulePublishToLive(sourceGroupId,targetGroupId,privateLayout,layoutIdMap,parameterMap,scope,dateRange.getStartDate(),dateRange.getEndDate(),groupName,cronText,startCalendar.getTime(),schedulerEndDate,description);
  }
 else {
    MessageStatus messageStatus=new MessageStatus();
    messageStatus.startTimer();
    String command=LayoutsLocalPublisherRequest.COMMAND_SELECTED_PAGES;
    try {
      if (scope.equals("all-pages")) {
        command=LayoutsLocalPublisherRequest.COMMAND_ALL_PAGES;
        publishLayouts(themeDisplay.getUserId(),sourceGroupId,targetGroupId,privateLayout,parameterMap,dateRange.getStartDate(),dateRange.getEndDate());
      }
 else {
        publishLayouts(themeDisplay.getUserId(),sourceGroupId,targetGroupId,privateLayout,layoutIdMap,parameterMap,dateRange.getStartDate(),dateRange.getEndDate());
      }
    }
 catch (    Exception e) {
      messageStatus.setException(e);
      throw e;
    }
 finally {
      messageStatus.stopTimer();
      LayoutsLocalPublisherRequest publisherRequest=new LayoutsLocalPublisherRequest(command,themeDisplay.getUserId(),sourceGroupId,targetGroupId,privateLayout,layoutIdMap,parameterMap,dateRange.getStartDate(),dateRange.getEndDate());
      messageStatus.setPayload(publisherRequest);
      MessageBusUtil.sendMessage(DestinationNames.MESSAGE_BUS_MESSAGE_STATUS,messageStatus);
    }
  }
}
