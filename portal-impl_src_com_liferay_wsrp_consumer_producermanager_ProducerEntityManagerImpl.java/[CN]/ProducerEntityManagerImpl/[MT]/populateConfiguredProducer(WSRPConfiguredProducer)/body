{
  String id=String.valueOf(producer.getConfiguredProducerId());
  String name=producer.getName();
  URL url=null;
  try {
    url=new URL(producer.getProducerURL());
  }
 catch (  MalformedURLException mfue) {
    throw new WSRPConsumerException(mfue.getMessage());
  }
  WSRPVersion producerVersion=WSRPVersion.fromValue(producer.getProducerVersion());
  String producerMarkupURL=producer.getProducerMarkupURL();
  short status=(short)producer.getStatus();
  ProducerEntityStatus entityStatus=ProducerEntityStatus.getProducerEntityStatus(status);
  RegistrationData registrationData=getRegistrationDataFromXML(producer.getRegistrationData());
  RegistrationContext registrationContext=getRegistrationContextFromXML(producer.getRegistrationContext());
  ServiceDescription serviceDescription=getServiceDesctionFromXML(producer.getServiceDescription());
  Map userCategoryMap=getConsumerObjectFactory().getMap(producer.getUserCategoryMapping());
  long sdLastModified=producer.getSdLastModified();
  String lastModified=String.valueOf(sdLastModified);
  String identityPropagationType=producer.getIdentityPropagationType();
  LeaseTime leaseTime=null;
  if (Validator.isNotNull(producer.getLifetimeTerminationTime())) {
    try {
      XMLGregorianCalendar terminationTime=DatatypeFactory.newInstance().newXMLGregorianCalendar(producer.getLifetimeTerminationTime());
      leaseTime=new LeaseTime();
      leaseTime.setTerminationTime(terminationTime);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  ProducerEntity producerEntity=new ProducerEntityImpl(id,name,url,producerVersion,producerMarkupURL,entityStatus,registrationData,registrationContext,serviceDescription,userCategoryMap,null,null,sdLastModified,lastModified,producer.getEntityVersion(),identityPropagationType,leaseTime);
  return producerEntity;
}
