{
  List<Long> badItemIds=new ArrayList<Long>();
  Map<ShoppingCartItem,Integer> items=getItems(groupId,itemIds);
  boolean minQtyMultiple=GetterUtil.getBoolean(PropsUtil.get(PropsKeys.SHOPPING_CART_MIN_QTY_MULTIPLE));
  for (  Map.Entry<ShoppingCartItem,Integer> entry : items.entrySet()) {
    ShoppingCartItem cartItem=entry.getKey();
    Integer count=entry.getValue();
    ShoppingItem item=cartItem.getItem();
    int minQuantity=ShoppingUtil.getMinQuantity(item);
    if (minQuantity <= 0) {
      continue;
    }
    if (minQtyMultiple) {
      if ((count.intValue() % minQuantity) > 0) {
        badItemIds.add(item.getItemId());
      }
    }
 else {
      if (count.intValue() < minQuantity) {
        badItemIds.add(item.getItemId());
      }
    }
  }
  if (!badItemIds.isEmpty()) {
    throw new CartMinQuantityException(StringUtil.merge(badItemIds.toArray(new Long[badItemIds.size()])));
  }
  String[] couponCodesArray=StringUtil.split(couponCodes);
  for (int i=0; i < couponCodesArray.length; i++) {
    try {
      ShoppingCoupon coupon=shoppingCouponPersistence.findByCode(couponCodesArray[i]);
      if (coupon.getGroupId() != groupId) {
        throw new NoSuchCouponException(couponCodesArray[i]);
      }
 else       if (!coupon.isActive()) {
        throw new CouponActiveException(couponCodesArray[i]);
      }
 else       if (!coupon.hasValidStartDate()) {
        throw new CouponStartDateException(couponCodesArray[i]);
      }
 else       if (!coupon.hasValidEndDate()) {
        throw new CouponEndDateException(couponCodesArray[i]);
      }
    }
 catch (    NoSuchCouponException nsce) {
      throw new NoSuchCouponException(couponCodesArray[i]);
    }
    break;
  }
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  ShoppingCart cart=null;
  if (user.isDefaultUser()) {
    cart=shoppingCartPersistence.create(0);
    cart.setGroupId(groupId);
    cart.setCompanyId(user.getCompanyId());
    cart.setUserId(userId);
    cart.setUserName(user.getFullName());
    cart.setCreateDate(now);
  }
 else {
    cart=shoppingCartPersistence.fetchByG_U(groupId,userId);
    if (cart == null) {
      long cartId=counterLocalService.increment();
      cart=shoppingCartPersistence.create(cartId);
      cart.setGroupId(groupId);
      cart.setCompanyId(user.getCompanyId());
      cart.setUserId(userId);
      cart.setUserName(user.getFullName());
      cart.setCreateDate(now);
    }
  }
  cart.setModifiedDate(now);
  cart.setItemIds(checkItemIds(groupId,itemIds));
  cart.setCouponCodes(couponCodes);
  cart.setAltShipping(altShipping);
  cart.setInsure(insure);
  if (!user.isDefaultUser()) {
    shoppingCartPersistence.update(cart);
  }
  return cart;
}
