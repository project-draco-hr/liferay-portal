{
  if (dtStart.getTime().getTime() > current.getTime().getTime()) {
    throw new IllegalArgumentException("Current time before DtStart");
  }
  int minInterval=getMinimumInterval();
  Calendar candidate=(Calendar)current.clone();
  if (true) {
    candidate.clear(Calendar.ZONE_OFFSET);
    candidate.clear(Calendar.DST_OFFSET);
    candidate.setTimeZone(TimeZone.getTimeZone("GMT"));
    candidate.setMinimalDaysInFirstWeek(4);
    candidate.setFirstDayOfWeek(dtStart.getFirstDayOfWeek());
  }
  if (frequency == NO_RECURRENCE) {
    candidate.setTime(dtStart.getTime());
    return candidate;
  }
  reduce_constant_length_field(Calendar.SECOND,dtStart,candidate);
  reduce_constant_length_field(Calendar.MINUTE,dtStart,candidate);
  reduce_constant_length_field(Calendar.HOUR_OF_DAY,dtStart,candidate);
switch (minInterval) {
case DAILY:
    break;
case WEEKLY:
  reduce_constant_length_field(Calendar.DAY_OF_WEEK,dtStart,candidate);
break;
case MONTHLY:
reduce_day_of_month(dtStart,candidate);
break;
case YEARLY:
reduce_day_of_year(dtStart,candidate);
break;
}
return candidate;
}
