{
  long pk=ServiceTestUtil.nextLong();
  ResourcePermission newResourcePermission=_persistence.create(pk);
  newResourcePermission.setCompanyId(ServiceTestUtil.nextLong());
  newResourcePermission.setName(ServiceTestUtil.randomString());
  newResourcePermission.setScope(ServiceTestUtil.nextInt());
  newResourcePermission.setPrimKey(ServiceTestUtil.randomString());
  newResourcePermission.setRoleId(ServiceTestUtil.nextLong());
  newResourcePermission.setOwnerId(ServiceTestUtil.nextLong());
  newResourcePermission.setActionIds(ServiceTestUtil.nextLong());
  newResourcePermission.setMvccVersion(ServiceTestUtil.nextLong());
  _persistence.update(newResourcePermission);
  ResourcePermission existingResourcePermission=_persistence.findByPrimaryKey(newResourcePermission.getPrimaryKey());
  Assert.assertEquals(existingResourcePermission.getResourcePermissionId(),newResourcePermission.getResourcePermissionId());
  Assert.assertEquals(existingResourcePermission.getCompanyId(),newResourcePermission.getCompanyId());
  Assert.assertEquals(existingResourcePermission.getName(),newResourcePermission.getName());
  Assert.assertEquals(existingResourcePermission.getScope(),newResourcePermission.getScope());
  Assert.assertEquals(existingResourcePermission.getPrimKey(),newResourcePermission.getPrimKey());
  Assert.assertEquals(existingResourcePermission.getRoleId(),newResourcePermission.getRoleId());
  Assert.assertEquals(existingResourcePermission.getOwnerId(),newResourcePermission.getOwnerId());
  Assert.assertEquals(existingResourcePermission.getActionIds(),newResourcePermission.getActionIds());
  Assert.assertEquals(existingResourcePermission.getMvccVersion(),newResourcePermission.getMvccVersion());
}
