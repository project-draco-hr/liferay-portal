{
  if (throwable == null) {
    if (Validator.isNotNull(message)) {
      log.error(message);
      return;
    }
    throw new IllegalArgumentException("Either throwable or message must not be null");
  }
  Throwable cause=throwable;
  while (cause.getCause() != null) {
    cause=cause.getCause();
  }
  StackTraceElement[] steArray=cause.getStackTrace();
  if (steArray.length <= STACK_TRACE_LENGTH) {
    if (Validator.isNotNull(message)) {
      log.error(message,cause);
    }
 else {
      log.error(cause);
    }
    return;
  }
  int count=0;
  List<StackTraceElement> steList=new ArrayList<StackTraceElement>();
  for (  StackTraceElement ste : steArray) {
    String className=ste.getClassName();
    boolean addElement=true;
    if (REMOVE_UNKNOWN_SOURCE && (ste.getLineNumber() < 0)) {
      addElement=false;
    }
    if (className.startsWith("$") || className.startsWith("java.lang.reflect.") || className.startsWith("org.springframework.")|| className.startsWith("sun.reflect.")) {
      addElement=false;
    }
    if (addElement) {
      steList.add(ste);
      count++;
    }
    if (count >= STACK_TRACE_LENGTH) {
      break;
    }
  }
  steArray=steList.toArray(new StackTraceElement[steList.size()]);
  cause.setStackTrace(steArray);
  if (Validator.isNotNull(message)) {
    log.error(message,cause);
  }
 else {
    log.error(cause);
  }
}
