{
  long pk=nextLong();
  Organization newOrganization=_persistence.create(pk);
  newOrganization.setCompanyId(nextLong());
  newOrganization.setLeftOrganizationId(nextLong());
  newOrganization.setRightOrganizationId(nextLong());
  newOrganization.setName(randomString());
  newOrganization.setType(randomString());
  newOrganization.setRecursable(randomBoolean());
  newOrganization.setRegionId(nextLong());
  newOrganization.setCountryId(nextLong());
  newOrganization.setStatusId(nextInt());
  newOrganization.setComments(randomString());
  _persistence.update(newOrganization,false);
  Organization existingOrganization=_persistence.findByPrimaryKey(newOrganization.getPrimaryKey());
  assertEquals(existingOrganization.getOrganizationId(),newOrganization.getOrganizationId());
  assertEquals(existingOrganization.getCompanyId(),newOrganization.getCompanyId());
  assertEquals(existingOrganization.getParentOrganizationId(),newOrganization.getParentOrganizationId());
  assertEquals(existingOrganization.getLeftOrganizationId(),newOrganization.getLeftOrganizationId());
  assertEquals(existingOrganization.getRightOrganizationId(),newOrganization.getRightOrganizationId());
  assertEquals(existingOrganization.getName(),newOrganization.getName());
  assertEquals(existingOrganization.getType(),newOrganization.getType());
  assertEquals(existingOrganization.getRecursable(),newOrganization.getRecursable());
  assertEquals(existingOrganization.getRegionId(),newOrganization.getRegionId());
  assertEquals(existingOrganization.getCountryId(),newOrganization.getCountryId());
  assertEquals(existingOrganization.getStatusId(),newOrganization.getStatusId());
  assertEquals(existingOrganization.getComments(),newOrganization.getComments());
}
