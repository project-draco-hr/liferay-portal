{
  long userId=portletDataContext.getUserId(page.getUserUuid());
  Element pageElement=portletDataContext.getImportDataStagedModelElement(page);
  String content=ExportImportHelperUtil.replaceImportContentReferences(portletDataContext,page,page.getContent());
  page.setContent(content);
  ServiceContext serviceContext=portletDataContext.createServiceContext(page);
  serviceContext.setUuid(page.getUuid());
  Map<Long,Long> nodeIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(WikiNode.class);
  long nodeId=MapUtil.getLong(nodeIds,page.getNodeId(),page.getNodeId());
  WikiPage importedPage=null;
  WikiPage existingPage=WikiPageLocalServiceUtil.fetchPage(nodeId,page.getTitle());
  if (existingPage == null) {
    importedPage=WikiPageLocalServiceUtil.addPage(userId,nodeId,page.getTitle(),page.getVersion(),page.getContent(),page.getSummary(),page.isMinorEdit(),page.getFormat(),page.getHead(),page.getParentTitle(),page.getRedirectTitle(),serviceContext);
    WikiPageResource pageResource=WikiPageResourceLocalServiceUtil.getPageResource(importedPage.getResourcePrimKey());
    String pageResourceUuid=GetterUtil.getString(pageElement.attributeValue("page-resource-uuid"));
    if (Validator.isNotNull(pageResourceUuid)) {
      pageResource.setUuid(pageElement.attributeValue("page-resource-uuid"));
      WikiPageResourceLocalServiceUtil.updateWikiPageResource(pageResource);
    }
  }
 else {
    existingPage=fetchStagedModelByUuidAndGroupId(page.getUuid(),portletDataContext.getScopeGroupId());
    if (existingPage == null) {
      existingPage=WikiPageLocalServiceUtil.fetchPage(nodeId,page.getTitle(),page.getVersion());
    }
    if (existingPage == null) {
      importedPage=WikiPageLocalServiceUtil.updatePage(userId,nodeId,page.getTitle(),0.0,page.getContent(),page.getSummary(),page.isMinorEdit(),page.getFormat(),page.getParentTitle(),page.getRedirectTitle(),serviceContext);
    }
 else {
      importedPage=existingPage;
    }
  }
  if (page.isHead()) {
    List<Element> attachmentElements=portletDataContext.getReferenceDataElements(pageElement,DLFileEntry.class,PortletDataContext.REFERENCE_TYPE_WEAK);
    for (    Element attachmentElement : attachmentElements) {
      String path=attachmentElement.attributeValue("path");
      FileEntry fileEntry=(FileEntry)portletDataContext.getZipEntryAsObject(path);
      InputStream inputStream=null;
      try {
        String binPath=attachmentElement.attributeValue("bin-path");
        if (Validator.isNull(binPath) && portletDataContext.isPerformDirectBinaryImport()) {
          try {
            inputStream=FileEntryUtil.getContentStream(fileEntry);
          }
 catch (          NoSuchFileException nsfe) {
          }
        }
 else {
          inputStream=portletDataContext.getZipEntryAsInputStream(binPath);
        }
        if (inputStream == null) {
          if (_log.isWarnEnabled()) {
            _log.warn("Unable to import attachment for file entry " + fileEntry.getFileEntryId());
          }
          continue;
        }
        WikiPageLocalServiceUtil.addPageAttachment(userId,importedPage.getNodeId(),importedPage.getTitle(),fileEntry.getTitle(),inputStream,null);
      }
  finally {
        StreamUtil.cleanUp(inputStream);
      }
    }
  }
  portletDataContext.importClassedModel(page,importedPage);
  Map<Long,Long> pageIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(WikiPage.class + ".pageId");
  pageIds.put(page.getPageId(),importedPage.getPageId());
}
