{
  String jsp=ctxt.getJspFile();
  if (jsw != null && (ctxt.getOptions().getModificationTestInterval() > 0)) {
    if (jsw.getLastModificationTest() + (ctxt.getOptions().getModificationTestInterval() * 1000) > System.currentTimeMillis()) {
      return false;
    }
 else {
      jsw.setLastModificationTest(System.currentTimeMillis());
    }
  }
  long jspRealLastModified=0;
  File targetFile;
  if (checkClass) {
    targetFile=new File(ctxt.getClassFileName());
  }
 else {
    targetFile=new File(ctxt.getServletJavaFileName());
  }
  long targetLastModified=targetFile.lastModified();
  if (checkClass) {
    JspRuntimeContext rtctxt=ctxt.getRuntimeContext();
    String className=ctxt.getFullClassName();
    long cachedTime=rtctxt.getBytecodeBirthTime(className);
    if (cachedTime > targetLastModified) {
      targetLastModified=cachedTime;
    }
 else {
      rtctxt.setBytecode(className,null);
    }
  }
  if (targetLastModified == 0L)   return true;
  if (jsw != null) {
    File jspFile=jsw.getJspFile();
    if (jspFile != null) {
      jspRealLastModified=jspFile.lastModified();
    }
  }
  if (jspRealLastModified == 0 || targetLastModified < jspRealLastModified) {
    try {
      URL jspUrl=ctxt.getResource(jsp);
      if (jspUrl == null) {
        ctxt.incrementRemoved();
        return false;
      }
      URLConnection uc=jspUrl.openConnection();
      jspRealLastModified=uc.getLastModified();
      uc.getInputStream().close();
    }
 catch (    Exception e) {
      e.printStackTrace();
      return true;
    }
  }
  if (checkClass && jsw != null) {
    jsw.setServletClassLastModifiedTime(targetLastModified);
  }
  if (targetLastModified < jspRealLastModified) {
    jspModTime=jspRealLastModified;
    if (log.isLoggable(Level.FINE)) {
      log.fine("Compiler: outdated: " + targetFile + " "+ targetLastModified);
    }
    return true;
  }
  if (jsw == null) {
    return false;
  }
  List depends=jsw.getDependants();
  if (depends == null) {
    return false;
  }
  Iterator it=depends.iterator();
  while (it.hasNext()) {
    String include=(String)it.next();
    try {
      URL includeUrl=ctxt.getResource(include);
      if (includeUrl == null) {
        return true;
      }
      URLConnection includeUconn=includeUrl.openConnection();
      long includeLastModified=includeUconn.getLastModified();
      includeUconn.getInputStream().close();
      if (includeLastModified > targetLastModified) {
        if (include.endsWith(".tld")) {
          ctxt.clearTaglibs();
          ctxt.clearTagFileJarUrls();
        }
        return true;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      return true;
    }
  }
  return false;
}
