{
  long t1=0;
  if (log.isLoggable(Level.FINE)) {
    t1=System.currentTimeMillis();
  }
  String javaFileName=ctxt.getServletJavaFileName();
  String classpath=ctxt.getClassPath();
  String sep=System.getProperty("path.separator");
  ArrayList<File> cpath=new ArrayList<File>();
  HashSet<String> paths=new HashSet<String>();
  String sysClassPath=options.getSystemClassPath();
  if (sysClassPath != null) {
    StringTokenizer tokenizer=new StringTokenizer(sysClassPath,sep);
    while (tokenizer.hasMoreElements()) {
      String path=tokenizer.nextToken();
      if (!paths.contains(path) && !systemJarInWebinf(path)) {
        paths.add(path);
        cpath.add(new File(path));
      }
    }
  }
  if (classpath != null) {
    StringTokenizer tokenizer=new StringTokenizer(classpath,sep);
    while (tokenizer.hasMoreElements()) {
      String path=tokenizer.nextToken();
      if (!paths.contains(path) && !systemJarInWebinf(path)) {
        paths.add(path);
        cpath.add(new File(path));
      }
    }
  }
  if (log.isLoggable(Level.FINE)) {
    log.fine("Using classpath: " + sysClassPath + sep+ classpath);
  }
  javaCompiler.setClassPath(cpath);
  javaCompiler.setDebug(options.getClassDebugInfo());
  String exts=System.getProperty("java.ext.dirs");
  if (exts != null) {
    javaCompiler.setExtdirs(exts);
  }
  if (options.getCompilerTargetVM() != null) {
    javaCompiler.setTargetVM(options.getCompilerTargetVM());
  }
  if (options.getCompilerSourceVM() != null) {
    javaCompiler.setSourceVM(options.getCompilerSourceVM());
  }
  JavacErrorDetail[] javacErrors=javaCompiler.compile(ctxt.getFullClassName(),pageNodes);
  if (javacErrors != null) {
    javaCompiler.doJavaFile(true);
    log.severe("Error compiling file: " + javaFileName);
    errDispatcher.javacError(javacErrors);
  }
  if (log.isLoggable(Level.FINE)) {
    long t2=System.currentTimeMillis();
    log.fine("Compiled " + javaFileName + " "+ (t2 - t1)+ "ms");
  }
  javaCompiler.doJavaFile(ctxt.keepGenerated());
  if (!ctxt.isPrototypeMode() && !options.isSmapSuppressed()) {
    smapUtil.installSmap();
  }
  if (jsw != null && jsw.getServletClassLastModifiedTime() <= 0) {
    jsw.setServletClassLastModifiedTime(javaCompiler.getClassLastModified());
  }
  if (options.getSaveBytecode()) {
    javaCompiler.saveClassFile(ctxt.getFullClassName(),ctxt.getClassFileName());
  }
  ctxt.getRuntimeContext().adjustBytecodeTime(ctxt.getFullClassName(),jspModTime);
}
