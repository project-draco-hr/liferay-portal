{
  long t1, t2, t3, t4;
  t1=t2=t3=t4=0;
  if (log.isLoggable(Level.FINE)) {
    t1=System.currentTimeMillis();
  }
  pageInfo=new PageInfo(new BeanRepository(ctxt.getClassLoader(),errDispatcher),ctxt.getJspFile());
  JspConfig jspConfig=options.getJspConfig();
  JspProperty jspProperty=jspConfig.findJspProperty(ctxt.getJspFile());
  pageInfo.setELIgnored(JspUtil.booleanValue(jspProperty.isELIgnored()));
  pageInfo.setScriptingInvalid(JspUtil.booleanValue(jspProperty.isScriptingInvalid()));
  pageInfo.setTrimDirectiveWhitespaces(JspUtil.booleanValue(jspProperty.getTrimSpaces()));
  pageInfo.setDeferredSyntaxAllowedAsLiteral(JspUtil.booleanValue(jspProperty.getPoundAllowed()));
  pageInfo.setErrorOnUndeclaredNamespace(JspUtil.booleanValue(jspProperty.errorOnUndeclaredNamespace()));
  if (jspProperty.getIncludePrelude() != null) {
    pageInfo.setIncludePrelude(jspProperty.getIncludePrelude());
  }
  if (jspProperty.getIncludeCoda() != null) {
    pageInfo.setIncludeCoda(jspProperty.getIncludeCoda());
  }
  if (options.isDefaultBufferNone() && pageInfo.getBufferValue() == null) {
    pageInfo.setBuffer(0);
  }
  String javaFileName=ctxt.getServletJavaFileName();
  ServletWriter writer=null;
  try {
    Writer javaWriter=javaCompiler.getJavaWriter(javaFileName,ctxt.getOptions().getJavaEncoding());
    writer=new ServletWriter(new PrintWriter(javaWriter));
    ctxt.setWriter(writer);
    JspUtil.resetTemporaryVariableName();
    ParserController parserCtl=new ParserController(ctxt,this);
    pageNodes=parserCtl.parse(ctxt.getJspFile());
    if (ctxt.isPrototypeMode()) {
      Generator.generate(writer,this,pageNodes);
      writer.close();
      writer=null;
      return;
    }
    Validator.validate(this,pageNodes);
    if (log.isLoggable(Level.FINE)) {
      t2=System.currentTimeMillis();
    }
    Collector.collect(this,pageNodes);
    tfp=new TagFileProcessor();
    tfp.loadTagFiles(this,pageNodes);
    if (log.isLoggable(Level.FINE)) {
      t3=System.currentTimeMillis();
    }
    ScriptingVariabler.set(pageNodes,errDispatcher);
    TagPluginManager tagPluginManager=options.getTagPluginManager();
    tagPluginManager.apply(pageNodes,errDispatcher,pageInfo);
    TextOptimizer.concatenate(this,pageNodes);
    ELFunctionMapper.map(this,pageNodes);
    Generator.generate(writer,this,pageNodes);
    writer.close();
    writer=null;
    ctxt.setWriter(null);
    if (log.isLoggable(Level.FINE)) {
      t4=System.currentTimeMillis();
      log.fine("Generated " + javaFileName + " total="+ (t4 - t1)+ " generate="+ (t4 - t3)+ " validate="+ (t2 - t1));
    }
  }
 catch (  Exception e) {
    if (writer != null) {
      try {
        writer.close();
        writer=null;
      }
 catch (      Exception e1) {
      }
    }
    javaCompiler.doJavaFile(false);
    throw e;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e2) {
      }
    }
  }
  if (!options.isSmapSuppressed()) {
    smapUtil.generateSmap(pageNodes);
  }
  tfp.removeProtoTypeFiles(ctxt.getClassFileName());
}
