{
  ClusterLinkImpl clusterLinkImpl=new ClusterLinkImpl();
  clusterLinkImpl.setProps(new Props(){
    @Override public boolean contains(    String key){
      return true;
    }
    @Override public String get(    String key){
      if (PropsKeys.CLUSTER_LINK_ENABLED.equals(key)) {
        return String.valueOf(enabled);
      }
      return StringPool.BLANK;
    }
    @Override public String get(    String key,    Filter filter){
      return null;
    }
    @Override public String[] getArray(    String key){
      return null;
    }
    @Override public String[] getArray(    String key,    Filter filter){
      return null;
    }
    @Override public Properties getProperties(){
      return new Properties();
    }
    @Override public Properties getProperties(    String prefix,    boolean removePrefix){
      return new Properties();
    }
  }
);
  clusterLinkImpl.setClusterChannelFactory(new TestClusterChannelFactory());
  clusterLinkImpl.setPortalExecutorManager(new MockPortalExecutorManager());
  Map<String,Object> properties=new HashMap<>();
  for (int i=0; i < channels; i++) {
    properties.put(ClusterPropsKeys.CHANNEL_NAME_TRANSPORT_PREFIX + StringPool.PERIOD + i,"test-channel-name-transport-" + i);
    properties.put(ClusterPropsKeys.CHANNEL_PROPERTIES_TRANSPORT_PREFIX + StringPool.PERIOD + i,"test-channel-properties-transport-" + i);
  }
  clusterLinkImpl.activate(properties);
  return clusterLinkImpl;
}
