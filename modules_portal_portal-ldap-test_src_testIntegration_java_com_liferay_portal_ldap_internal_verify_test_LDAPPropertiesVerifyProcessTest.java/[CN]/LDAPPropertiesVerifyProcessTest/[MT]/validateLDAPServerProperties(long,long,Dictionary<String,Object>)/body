{
  Assert.assertNotNull(properties);
  Assert.assertNotNull(properties.get(LDAPConstants.AUTH_SEARCH_FILTER));
  Assert.assertEquals("(mail=@email_address@)",properties.get(LDAPConstants.AUTH_SEARCH_FILTER));
  Assert.assertNotNull(properties.get(LDAPConstants.BASE_DN));
  Assert.assertEquals("dc=liferay,dc=com",properties.get(LDAPConstants.BASE_DN));
  Assert.assertNotNull(properties.get(LDAPConstants.BASE_PROVIDER_URL));
  Assert.assertEquals("ldap://liferay.com:10389",properties.get(LDAPConstants.BASE_PROVIDER_URL));
  Assert.assertNotNull(properties.get(LDAPConstants.COMPANY_ID));
  Assert.assertEquals(companyId,properties.get(LDAPConstants.COMPANY_ID));
  Assert.assertNotNull(properties.get(LDAPConstants.CONTACT_CUSTOM_MAPPINGS));
  Assert.assertTrue(Validator.isNull((String)properties.get(LDAPConstants.CONTACT_CUSTOM_MAPPINGS)));
  Assert.assertTrue(ArrayUtil.containsAll(new String[]{"birthday=","country="},StringUtil.split((String)properties.get(LDAPConstants.CONTACT_MAPPINGS),StringPool.PIPE)));
  Assert.assertNotNull(properties.get(LDAPConstants.GROUP_DEFAULT_OBJECT_CLASSES));
  Assert.assertTrue(ArrayUtil.containsAll(new String[]{"top","groupOfUniqueNames"},StringUtil.split((String)properties.get(LDAPConstants.GROUP_DEFAULT_OBJECT_CLASSES),StringPool.PIPE)));
  Assert.assertNotNull(properties.get(LDAPConstants.GROUP_MAPPINGS));
  Assert.assertTrue(ArrayUtil.containsAll(new String[]{"description=description","groupName=cn","user=uniqueMember"},StringUtil.split((String)properties.get(LDAPConstants.GROUP_MAPPINGS),StringPool.PIPE)));
  Assert.assertNotNull(properties.get(LDAPConstants.GROUP_SEARCH_FILTER));
  Assert.assertEquals("(objectClass=groupOfUniqueNames)",properties.get(LDAPConstants.GROUP_SEARCH_FILTER));
  Assert.assertNotNull(properties.get(LDAPConstants.GROUPS_DN));
  Assert.assertEquals("ou=groups,dc=example,dc=com",properties.get(LDAPConstants.GROUPS_DN));
  Assert.assertNotNull(properties.get(LDAPConstants.LDAP_SERVER_ID));
  Assert.assertEquals(ldapServerId,properties.get(LDAPConstants.LDAP_SERVER_ID));
  Assert.assertNotNull(properties.get(LDAPConstants.USER_SEARCH_FILTER));
  Assert.assertEquals("(objectClass=inetOrgPerson)",properties.get(LDAPConstants.USER_SEARCH_FILTER));
  Assert.assertNotNull(properties.get(LDAPConstants.SECURITY_CREDENTIAL));
  Assert.assertEquals("secret",properties.get(LDAPConstants.SECURITY_CREDENTIAL));
  Assert.assertNotNull(properties.get(LDAPConstants.SECURITY_PRINCIPAL));
  Assert.assertEquals("uid=admin,ou=system",properties.get(LDAPConstants.SECURITY_PRINCIPAL));
  Assert.assertNotNull(properties.get(LDAPConstants.SERVER_NAME));
  Assert.assertEquals("test",properties.get(LDAPConstants.SERVER_NAME));
  Assert.assertNotNull(properties.get(LDAPConstants.USER_CUSTOM_MAPPINGS));
  Assert.assertTrue(Validator.isNull((String)properties.get(LDAPConstants.USER_CUSTOM_MAPPINGS)));
  Assert.assertNotNull(properties.get(LDAPConstants.USER_DEFAULT_OBJECT_CLASSES));
  Assert.assertTrue(ArrayUtil.containsAll(new String[]{"top","person","inetOrgPerson","organizationalPerson"},StringUtil.split((String)properties.get(LDAPConstants.USER_DEFAULT_OBJECT_CLASSES),StringPool.PIPE)));
  Assert.assertNotNull(properties.get(LDAPConstants.USER_MAPPINGS));
  Assert.assertTrue(ArrayUtil.containsAll(new String[]{"emailAddress=mail","firstName=givenName","group=groupMembership","jobTitle=title","lastName=sn","password=userPassword","screenName=cn","uuid=uuid"},StringUtil.split((String)properties.get(LDAPConstants.USER_MAPPINGS),StringPool.PIPE)));
  Assert.assertNotNull(properties.get(LDAPConstants.USERS_DN));
  Assert.assertEquals("ou=users,dc=example,dc=com",properties.get(LDAPConstants.USERS_DN));
}
