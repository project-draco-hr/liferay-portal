{
  MockSPIProvider mockSPIProvider1=new MockSPIProvider(null);
  try {
    MPIHelperUtil.registerSPIProvider(mockSPIProvider1);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
  }
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(),Level.INFO);
  try {
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    String name1="spiProvider1";
    mockSPIProvider1=new MockSPIProvider(name1);
    Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1));
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord1=logRecords.get(0);
    Assert.assertEquals("Registered SPI provider " + mockSPIProvider1,logRecord1.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    String name2="spiProvider2";
    MockSPIProvider mockSPIProvider2=new MockSPIProvider(name2);
    Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider2));
    Assert.assertTrue(logRecords.isEmpty());
    logRecords=captureHandler.resetLogLevel(Level.WARNING);
    MockSPIProvider mockSPIProvider3=new MockSPIProvider(name1);
    Assert.assertFalse(MPIHelperUtil.registerSPIProvider(mockSPIProvider3));
    Assert.assertEquals(1,logRecords.size());
    logRecord1=logRecords.get(0);
    Assert.assertEquals("Not registering SPI provider " + mockSPIProvider3 + " because it duplicates "+ mockSPIProvider1,logRecord1.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    mockSPIProvider3=new MockSPIProvider(name1);
    Assert.assertFalse(MPIHelperUtil.registerSPIProvider(mockSPIProvider3));
    Assert.assertTrue(logRecords.isEmpty());
    String name3="spiProvider3";
    Assert.assertSame(mockSPIProvider1,MPIHelperUtil.getSPIProvider(name1));
    Assert.assertSame(mockSPIProvider2,MPIHelperUtil.getSPIProvider(name2));
    Assert.assertNull(MPIHelperUtil.getSPIProvider(name3));
    List<SPIProvider> spiProviders=MPIHelperUtil.getSPIProviders();
    Assert.assertEquals(2,spiProviders.size());
    Assert.assertTrue(spiProviders.contains(mockSPIProvider1));
    Assert.assertTrue(spiProviders.contains(mockSPIProvider2));
    mockSPIProvider3=new MockSPIProvider(null);
    try {
      MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3);
      Assert.fail();
    }
 catch (    NullPointerException npe) {
    }
    logRecords=captureHandler.resetLogLevel(Level.WARNING);
    mockSPIProvider3=new MockSPIProvider(name3);
    Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3));
    Assert.assertEquals(1,logRecords.size());
    logRecord1=logRecords.get(0);
    Assert.assertEquals("Not unregistering unregistered SPI provider " + mockSPIProvider3,logRecord1.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    mockSPIProvider3=new MockSPIProvider(name3);
    Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3));
    Assert.assertTrue(logRecords.isEmpty());
    logRecords=captureHandler.resetLogLevel(Level.INFO);
    Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(new MockSPIProvider(name2)));
    Assert.assertEquals(1,logRecords.size());
    logRecord1=logRecords.get(0);
    Assert.assertEquals("Not unregistering unregistered SPI provider " + name2,logRecord1.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(new MockSPIProvider(name2)));
    Assert.assertTrue(logRecords.isEmpty());
    logRecords=captureHandler.resetLogLevel(Level.INFO);
    ConcurrentMap<String,Object> oldSPIProviderContainers=ReflectionTestUtil.getFieldValue(MPIHelperUtil.class,"_spiProviderContainers");
    try {
      ReflectionTestUtil.setFieldValue(MPIHelperUtil.class,"_spiProviderContainers",new ConcurrentHashMap<String,Object>(oldSPIProviderContainers){
        @Override public boolean remove(        Object key,        Object value){
          return false;
        }
      }
);
      Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2));
    }
  finally {
      ReflectionTestUtil.setFieldValue(MPIHelperUtil.class,"_spiProviderContainers",oldSPIProviderContainers);
    }
    Assert.assertEquals(1,logRecords.size());
    logRecord1=logRecords.get(0);
    Assert.assertEquals("Not unregistering unregistered SPI provider " + name2,logRecord1.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    oldSPIProviderContainers=ReflectionTestUtil.getFieldValue(MPIHelperUtil.class,"_spiProviderContainers");
    try {
      ReflectionTestUtil.setFieldValue(MPIHelperUtil.class,"_spiProviderContainers",new ConcurrentHashMap<String,Object>(oldSPIProviderContainers){
        @Override public boolean remove(        Object key,        Object value){
          return false;
        }
      }
);
      Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2));
    }
  finally {
      ReflectionTestUtil.setFieldValue(MPIHelperUtil.class,"_spiProviderContainers",oldSPIProviderContainers);
    }
    Assert.assertTrue(logRecords.isEmpty());
    logRecords=captureHandler.resetLogLevel(Level.INFO);
    Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2));
    Assert.assertEquals(1,logRecords.size());
    logRecord1=logRecords.get(0);
    Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider2,logRecord1.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1));
    Assert.assertTrue(logRecords.isEmpty());
    logRecords=captureHandler.resetLogLevel(Level.SEVERE);
    mockSPIProvider1=new MockSPIProvider(name1);
    Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1));
    mockSPIProvider2=new MockSPIProvider(name2);
    Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider2));
    MockSPI mockSPI1=new MockSPI();
    mockSPI1.failOnStop=true;
    mockSPI1.spiProviderName=name1;
    MPIHelperUtilTestUtil.directResigterSPI("spi1",mockSPI1);
    MockSPI mockSPI2=new MockSPI();
    mockSPI2.failOnStop=true;
    mockSPI2.spiProviderName=name2;
    MPIHelperUtilTestUtil.directResigterSPI("spi2",mockSPI2);
    Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1));
    Assert.assertFalse(mockSPI1.destroyed);
    Assert.assertFalse(mockSPI1.stopped);
    Assert.assertFalse(mockSPI2.destroyed);
    Assert.assertFalse(mockSPI2.stopped);
    Assert.assertEquals(1,logRecords.size());
    logRecord1=logRecords.get(0);
    Assert.assertEquals("Unable to unregister SPI " + mockSPI1 + " while unregistering SPI provider "+ mockSPIProvider1,logRecord1.getMessage());
    Throwable throwable=logRecord1.getThrown();
    Assert.assertSame(RemoteException.class,throwable.getClass());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    mockSPI1.failOnDestroy=true;
    mockSPI1.failOnStop=false;
    mockSPI2.failOnDestroy=true;
    mockSPI2.failOnStop=false;
    Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2));
    Assert.assertFalse(mockSPI1.destroyed);
    Assert.assertFalse(mockSPI1.stopped);
    Assert.assertFalse(mockSPI2.destroyed);
    Assert.assertTrue(mockSPI2.stopped);
    Assert.assertTrue(logRecords.isEmpty());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    mockSPIProvider1=new MockSPIProvider(name1);
    Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1));
    final RuntimeException runtimeException=new RuntimeException();
    mockSPI1=new MockSPI(){
      @Override public String toString(){
        throw runtimeException;
      }
    }
;
    mockSPI1.failOnDestroy=true;
    mockSPI1.failOnStop=false;
    mockSPI1.spiProviderName=name1;
    MPIHelperUtilTestUtil.directResigterSPI(name1,mockSPI1);
    try {
      MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1);
      Assert.fail();
    }
 catch (    RuntimeException re) {
      Assert.assertSame(runtimeException,re);
    }
    Assert.assertTrue(logRecords.isEmpty());
    mockSPIProvider1=new MockSPIProvider(name1);
    Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1));
    mockSPIProvider2=new MockSPIProvider(name2);
    Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider2));
    mockSPI1=new MockSPI();
    mockSPI1.failOnDestroy=false;
    mockSPI1.spiProviderName=name1;
    MPIHelperUtilTestUtil.directResigterSPI("spi1",mockSPI1);
    mockSPI2=new MockSPI();
    mockSPI2.failOnDestroy=false;
    mockSPI2.spiProviderName=name2;
    MPIHelperUtilTestUtil.directResigterSPI("spi2",mockSPI2);
    logRecords=captureHandler.resetLogLevel(Level.INFO);
    Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1));
    Assert.assertTrue(mockSPI1.destroyed);
    Assert.assertTrue(mockSPI1.stopped);
    Assert.assertFalse(mockSPI2.destroyed);
    Assert.assertFalse(mockSPI2.stopped);
    Assert.assertEquals(2,logRecords.size());
    logRecord1=logRecords.get(0);
    Assert.assertEquals("Unregistered SPI " + mockSPI1 + " while unregistering SPI provider "+ mockSPIProvider1,logRecord1.getMessage());
    LogRecord logRecord2=logRecords.get(1);
    Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider1,logRecord2.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2));
    Assert.assertTrue(mockSPI1.destroyed);
    Assert.assertTrue(mockSPI1.stopped);
    Assert.assertTrue(mockSPI2.destroyed);
    Assert.assertTrue(mockSPI2.stopped);
    Assert.assertTrue(logRecords.isEmpty());
  }
  finally {
    captureHandler.close();
  }
}
