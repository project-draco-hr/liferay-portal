{
  MockSPI mockSPI=new MockSPI();
  ConcurrentMap<String,Object> attributes=ProcessExecutor.ProcessContext.getAttributes();
  attributes.put(SPI.SPI_INSTANCE_PUBLICATION_KEY,mockSPI);
  UnicastRemoteObject.unexportObject(_getMPIImpl(),true);
  final IOException ioException=new IOException();
  ReflectionTestUtil.setFieldValue(MPIHelperUtil.class,"_intraband",new MockIntraband(){
    @Override public void close() throws IOException {
      throw ioException;
    }
  }
);
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(),Level.OFF);
  try {
    MPIHelperUtil.shutdown();
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
  }
  finally {
    captureHandler.close();
  }
}
