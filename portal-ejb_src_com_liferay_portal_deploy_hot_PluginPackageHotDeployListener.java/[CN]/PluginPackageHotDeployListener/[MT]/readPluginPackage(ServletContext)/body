{
  PluginPackage pluginPackage=null;
  String servletContextName=ctx.getServletContextName();
  String xml=Http.URLtoString(ctx.getResource("/WEB-INF/liferay-plugin-package.xml"));
  if (xml == null) {
    String version;
    String artifactGroupId;
    String artifactId;
    Manifest manifest=new Manifest(ctx.getResourceAsStream("/META-INF/MANIFEST.MF"));
    Attributes attributes=manifest.getMainAttributes();
    artifactGroupId=attributes.getValue("Implementation-Vendor-Id");
    if (Validator.isNull(artifactGroupId)) {
      artifactGroupId=attributes.getValue("Implementation-Vendor");
    }
    if (Validator.isNull(artifactGroupId)) {
      artifactGroupId=servletContextName;
    }
    artifactId=attributes.getValue("Implementation-Title");
    if (Validator.isNull(artifactId)) {
      artifactId=servletContextName;
    }
    version=attributes.getValue("Implementation-Version");
    if (Validator.isNull(version)) {
      version=Version.UNKNOWN;
    }
    if (_log.isWarnEnabled()) {
      _log.warn("Plugin package on context " + servletContextName + " cannot be tracked because this WAR does not "+ "contain a liferay-plugin-package.xml file");
    }
    pluginPackage=new PluginPackageImpl(artifactGroupId + StringPool.SLASH + artifactId+ StringPool.SLASH+ version+ StringPool.SLASH+ "war");
    pluginPackage.setName(artifactId);
    return pluginPackage;
  }
  if (_log.isInfoEnabled()) {
    if (servletContextName == null) {
      _log.info("Reading plugin package for the root context");
    }
 else {
      _log.info("Reading plugin package for " + servletContextName);
    }
  }
  pluginPackage=PluginPackageUtil.readPluginPackageXml(xml);
  return pluginPackage;
}
