{
  UnicodeProperties props=layout.getTypeSettingsProperties();
  String[] layoutColumnIds=StringUtil.split(props.get(LayoutTypePortletConstants.NESTED_COLUMN_IDS));
  boolean updateColumnIds=false;
  for (  String columnId : columnIds) {
    String portletIds=props.getProperty(columnId);
    if (Validator.isNotNull(portletIds) && !ArrayUtil.contains(layoutColumnIds,columnId)) {
      layoutColumnIds=ArrayUtil.append(layoutColumnIds,columnId);
      updateColumnIds=true;
    }
  }
  if (updateColumnIds) {
    props.setProperty(LayoutTypePortletConstants.NESTED_COLUMN_IDS,StringUtil.merge(layoutColumnIds));
    layout.setTypeSettingsProperties(props);
    try {
      LayoutLocalServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),layout.getTypeSettings());
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Error updating the nested columns");
      }
    }
  }
}
