{
  StringWriter output=new StringWriter();
  boolean load=false;
  try {
    VelocityContext context=new VelocityContext();
    SAXReader reader=new SAXReader();
    Document doc=reader.read(new StringReader(xml));
    List nodes=_extractDynamicContents(doc.getRootElement());
    Iterator itr=nodes.iterator();
    while (itr.hasNext()) {
      TemplateNode node=(TemplateNode)itr.next();
      context.put(node.getName(),node);
    }
    if (themeDisplay != null) {
      Theme theme=themeDisplay.getTheme();
      Layout layout=themeDisplay.getLayout();
      List layouts=themeDisplay.getLayouts();
      context.put("themeDisplay",themeDisplay);
      context.put("company",themeDisplay.getCompany());
      context.put("user",themeDisplay.getUser());
      context.put("realUser",themeDisplay.getRealUser());
      context.put("layout",layout);
      context.put("layouts",layouts);
      context.put("plid",String.valueOf(themeDisplay.getPlid()));
      context.put("layoutTypePortlet",themeDisplay.getLayoutTypePortlet());
      context.put("portletGroupId",new Long(themeDisplay.getPortletGroupId()));
      context.put("permissionChecker",themeDisplay.getPermissionChecker());
      context.put("locale",themeDisplay.getLocale());
      context.put("timeZone",themeDisplay.getTimeZone());
      context.put("theme",theme);
      context.put("colorScheme",themeDisplay.getColorScheme());
      context.put("portletDisplay",themeDisplay.getPortletDisplay());
    }
    long companyId=GetterUtil.getLong((String)tokens.get("company_id"));
    long groupId=GetterUtil.getLong((String)tokens.get("group_id"));
    String journalTemplatesPath=VelocityResourceListener.JOURNAL_SEPARATOR + StringPool.SLASH + companyId+ StringPool.SLASH+ groupId;
    String randomNamespace=PwdGenerator.getPassword(PwdGenerator.KEY3,4) + StringPool.UNDERLINE;
    context.put("companyId",String.valueOf(companyId));
    context.put("groupId",String.valueOf(groupId));
    context.put("journalTemplatesPath",journalTemplatesPath);
    context.put("randomNamespace",randomNamespace);
    load=Velocity.evaluate(context,output,JournalVmUtil.class.getName(),script);
  }
 catch (  Exception e) {
    if (e instanceof DocumentException) {
      throw new TransformException("Unable to read XML document",e);
    }
 else     if (e instanceof VelocityException) {
      VelocityException pex=(VelocityException)e;
      throw new TransformException("Unable to parse velocity template." + Html.escape(pex.getMessage(),false),e);
    }
 else     if (e instanceof IOException) {
      throw new TransformException("Error reading velocity template",e);
    }
 else     if (e instanceof TransformException) {
      throw (TransformException)e;
    }
 else {
      throw new TransformException("Unhandled exception",e);
    }
  }
  if (!load) {
    throw new TransformException("Unable to dynamically load velocity transform script");
  }
  return output.toString();
}
