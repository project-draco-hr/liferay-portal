{
  StringWriter output=new StringWriter();
  boolean load=false;
  try {
    VelocityContext context=new VelocityContext();
    Document doc=SAXReaderUtil.read(xml);
    Element root=doc.getRootElement();
    List<TemplateNode> nodes=_extractDynamicContents(root);
    for (    TemplateNode node : nodes) {
      context.put(node.getName(),node);
    }
    context.put("xmlRequest",root.element("request").asXML());
    context.put("request",_insertRequestVariables(root.element("request")));
    long companyId=GetterUtil.getLong(tokens.get("company_id"));
    Company company=CompanyLocalServiceUtil.getCompanyById(companyId);
    long groupId=GetterUtil.getLong(tokens.get("group_id"));
    String journalTemplatesPath=VelocityResourceListener.JOURNAL_SEPARATOR + StringPool.SLASH + companyId+ StringPool.SLASH+ groupId;
    String randomNamespace=PwdGenerator.getPassword(PwdGenerator.KEY3,4) + StringPool.UNDERLINE;
    context.put("company",company);
    context.put("companyId",String.valueOf(companyId));
    context.put("groupId",String.valueOf(groupId));
    context.put("journalTemplatesPath",journalTemplatesPath);
    context.put("viewMode",viewMode);
    context.put("locale",LocaleUtil.fromLanguageId(languageId));
    context.put("permissionChecker",PermissionThreadLocal.getPermissionChecker());
    context.put("randomNamespace",randomNamespace);
    VelocityVariables.insertHelperUtilities(context,_TEMPLATE_VELOCITY_RESTRICTED_VARIABLES);
    script=_injectEditInPlace(xml,script);
    try {
      load=Velocity.evaluate(context,output,JournalVmUtil.class.getName(),script);
    }
 catch (    VelocityException ve) {
      context.put("exception",ve.getMessage());
      context.put("script",script);
      if (ve instanceof ParseErrorException) {
        ParseErrorException pe=(ParseErrorException)ve;
        context.put("column",new Integer(pe.getColumnNumber()));
        context.put("line",new Integer(pe.getLineNumber()));
      }
      String errorTemplate=ContentUtil.get(PropsValues.JOURNAL_ERROR_TEMPLATE_VELOCITY);
      load=Velocity.evaluate(context,output,JournalVmUtil.class.getName(),errorTemplate);
    }
  }
 catch (  Exception e) {
    if (e instanceof DocumentException) {
      throw new TransformException("Unable to read XML document",e);
    }
 else     if (e instanceof VelocityException) {
      VelocityException pex=(VelocityException)e;
      throw new TransformException("Unable to parse velocity template: " + HtmlUtil.escape(pex.getMessage()),e);
    }
 else     if (e instanceof IOException) {
      throw new TransformException("Error reading velocity template",e);
    }
 else     if (e instanceof TransformException) {
      throw (TransformException)e;
    }
 else {
      throw new TransformException("Unhandled exception",e);
    }
  }
  if (!load) {
    throw new TransformException("Unable to dynamically load velocity transform script");
  }
  return output.toString();
}
