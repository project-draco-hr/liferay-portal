{
  StringWriter output=new StringWriter();
  boolean load=false;
  try {
    VelocityContext context=new VelocityContext();
    SAXReader reader=new SAXReader();
    Document doc=reader.read(new StringReader(xml));
    Element root=doc.getRootElement();
    List nodes=_extractDynamicContents(root);
    Iterator itr=nodes.iterator();
    while (itr.hasNext()) {
      TemplateNode node=(TemplateNode)itr.next();
      context.put(node.getName(),node);
    }
    context.put("request",_insertRequestVariables(root.element("request")));
    long companyId=GetterUtil.getLong((String)tokens.get("company_id"));
    long groupId=GetterUtil.getLong((String)tokens.get("group_id"));
    String journalTemplatesPath=VelocityResourceListener.JOURNAL_SEPARATOR + StringPool.SLASH + companyId+ StringPool.SLASH+ groupId;
    String randomNamespace=PwdGenerator.getPassword(PwdGenerator.KEY3,4) + StringPool.UNDERLINE;
    context.put("companyId",String.valueOf(companyId));
    context.put("groupId",String.valueOf(groupId));
    context.put("journalTemplatesPath",journalTemplatesPath);
    context.put("randomNamespace",randomNamespace);
    String[] restrictedVariables=PropsUtil.getArray(PropsUtil.JOURNAL_TEMPLATE_VELOCITY_RESTRICTED_VARIABLES);
    VelocityVariables.insertHelperUtilities(context,restrictedVariables);
    script=_injectEditInPlace(xml,script);
    load=Velocity.evaluate(context,output,JournalVmUtil.class.getName(),script);
  }
 catch (  Exception e) {
    if (e instanceof DocumentException) {
      throw new TransformException("Unable to read XML document",e);
    }
 else     if (e instanceof VelocityException) {
      VelocityException pex=(VelocityException)e;
      throw new TransformException("Unable to parse velocity template: " + Html.escape(pex.getMessage()),e);
    }
 else     if (e instanceof IOException) {
      throw new TransformException("Error reading velocity template",e);
    }
 else     if (e instanceof TransformException) {
      throw (TransformException)e;
    }
 else {
      throw new TransformException("Unhandled exception",e);
    }
  }
  if (!load) {
    throw new TransformException("Unable to dynamically load velocity transform script");
  }
  return output.toString();
}
