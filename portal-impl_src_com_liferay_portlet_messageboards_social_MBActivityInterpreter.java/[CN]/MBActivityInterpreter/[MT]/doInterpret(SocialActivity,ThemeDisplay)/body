{
  PermissionChecker permissionChecker=themeDisplay.getPermissionChecker();
  if (!MBMessagePermission.contains(permissionChecker,activity.getClassPK(),ActionKeys.VIEW)) {
    return null;
  }
  String groupName=StringPool.BLANK;
  if (activity.getGroupId() != themeDisplay.getScopeGroupId()) {
    groupName=getGroupName(activity.getGroupId(),themeDisplay);
  }
  String creatorUserName=getUserName(activity.getUserId(),themeDisplay);
  String receiverUserName=getUserName(activity.getReceiverUserId(),themeDisplay);
  int activityType=activity.getType();
  MBMessage message=MBMessageLocalServiceUtil.getMessage(activity.getClassPK());
  String link=themeDisplay.getURLPortal() + themeDisplay.getPathMain() + "/message_boards/find_message?messageId="+ message.getMessageId();
  String titlePattern=null;
  StringBuilder sb=new StringBuilder();
  sb.append("<a href=\"");
  sb.append(link);
  sb.append("\">\"");
  sb.append(cleanContent(message.getSubject()));
  sb.append("\"</a>");
  String messageSubject=sb.toString();
  if (activityType == MBActivityKeys.ADD_MESSAGE) {
    titlePattern="activity-message-boards-add-message";
  }
 else   if (activityType == MBActivityKeys.REPLY_MESSAGE) {
    titlePattern="activity-message-boards-reply-message";
  }
  if (Validator.isNotNull(groupName)) {
    titlePattern+="-in";
  }
  Object[] titleArguments=new Object[]{groupName,creatorUserName,receiverUserName,messageSubject};
  String title=themeDisplay.translate(titlePattern,titleArguments);
  String body=StringPool.BLANK;
  return new SocialActivityFeedEntry(link,title,body);
}
