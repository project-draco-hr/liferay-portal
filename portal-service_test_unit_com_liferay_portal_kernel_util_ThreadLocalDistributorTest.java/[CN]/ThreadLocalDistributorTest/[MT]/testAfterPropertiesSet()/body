{
  ThreadLocalDistributor threadLocalDistributor=new ThreadLocalDistributor();
  try {
    threadLocalDistributor.afterPropertiesSet();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Thread local sources is null",iae.getMessage());
  }
  threadLocalDistributor.setClassLoader(getClass().getClassLoader());
  threadLocalDistributor.setThreadLocalSources(keyValuePairs);
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(ThreadLocalDistributor.class.getName(),Level.WARNING);
  threadLocalDistributor.afterPropertiesSet();
  Assert.assertEquals(3,logRecords.size());
  LogRecord logRecord1=logRecords.get(0);
  Assert.assertEquals("_nonStatic is not a static ThreadLocal.",logRecord1.getMessage());
  LogRecord logRecord2=logRecords.get(1);
  Assert.assertEquals("_nullValue is not initialized.",logRecord2.getMessage());
  LogRecord logRecord3=logRecords.get(2);
  Assert.assertEquals("_object is not type of ThreadLocal.",logRecord3.getMessage());
  List<ThreadLocal<Serializable>> threadLocals=_getThreadLocals(threadLocalDistributor);
  Assert.assertEquals(1,threadLocals.size());
  Assert.assertSame(TestClass._threadLocal,threadLocals.get(0));
  logRecords=JDKLoggerTestUtil.configureJDKLogger(ThreadLocalDistributor.class.getName(),Level.OFF);
  threadLocalDistributor=new ThreadLocalDistributor();
  threadLocalDistributor.setClassLoader(getClass().getClassLoader());
  threadLocalDistributor.setThreadLocalSources(keyValuePairs);
  threadLocalDistributor.afterPropertiesSet();
  Assert.assertTrue(logRecords.isEmpty());
  threadLocals=_getThreadLocals(threadLocalDistributor);
  Assert.assertEquals(1,threadLocals.size());
  Assert.assertSame(TestClass._threadLocal,threadLocals.get(0));
}
