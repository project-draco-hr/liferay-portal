{
  ThreadLocalDistributor threadLocalDistributor=new ThreadLocalDistributor();
  try {
    threadLocalDistributor.afterPropertiesSet();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Thread local sources is null",iae.getMessage());
  }
  threadLocalDistributor.setClassLoader(getClassLoader());
  threadLocalDistributor.setThreadLocalSources(_keyValuePairs);
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ThreadLocalDistributor.class.getName(),Level.WARNING)){
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    threadLocalDistributor.afterPropertiesSet();
    Assert.assertEquals(3,logRecords.size());
    LogRecord logRecord1=logRecords.get(0);
    Assert.assertEquals("_nonStatic is not a static ThreadLocal",logRecord1.getMessage());
    LogRecord logRecord2=logRecords.get(1);
    Assert.assertEquals("_nullValue is not initialized",logRecord2.getMessage());
    LogRecord logRecord3=logRecords.get(2);
    Assert.assertEquals("_object is not of type ThreadLocal",logRecord3.getMessage());
    List<ThreadLocal<Serializable>> threadLocals=ReflectionTestUtil.getFieldValue(threadLocalDistributor,"_threadLocals");
    Assert.assertEquals(1,threadLocals.size());
    Assert.assertSame(TestClass._threadLocal,threadLocals.get(0));
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    threadLocalDistributor=new ThreadLocalDistributor();
    threadLocalDistributor.setClassLoader(getClassLoader());
    threadLocalDistributor.setThreadLocalSources(_keyValuePairs);
    threadLocalDistributor.afterPropertiesSet();
    Assert.assertTrue(logRecords.isEmpty());
    threadLocals=ReflectionTestUtil.getFieldValue(threadLocalDistributor,"_threadLocals");
    Assert.assertEquals(1,threadLocals.size());
    Assert.assertSame(TestClass._threadLocal,threadLocals.get(0));
  }
 }
