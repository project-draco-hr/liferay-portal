{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long organizationId=ParamUtil.getLong(actionRequest,"organizationId");
  long parentOrganizationId=ParamUtil.getLong(actionRequest,"parentOrganizationSearchContainerPrimaryKeys",OrganizationConstants.DEFAULT_PARENT_ORGANIZATION_ID);
  String name=ParamUtil.getString(actionRequest,"name");
  int statusId=ParamUtil.getInteger(actionRequest,"statusId");
  String type=ParamUtil.getString(actionRequest,"type");
  long regionId=ParamUtil.getLong(actionRequest,"regionId");
  long countryId=ParamUtil.getLong(actionRequest,"countryId");
  String comments=ParamUtil.getString(actionRequest,"comments");
  boolean site=ParamUtil.getBoolean(actionRequest,"site");
  List<Address> addresses=UsersAdminUtil.getAddresses(actionRequest);
  List<EmailAddress> emailAddresses=UsersAdminUtil.getEmailAddresses(actionRequest);
  List<OrgLabor> orgLabors=UsersAdminUtil.getOrgLabors(actionRequest);
  List<Phone> phones=UsersAdminUtil.getPhones(actionRequest);
  List<Website> websites=UsersAdminUtil.getWebsites(actionRequest);
  ServiceContext serviceContext=ServiceContextFactory.getInstance(Organization.class.getName(),actionRequest);
  Organization organization=null;
  if (organizationId <= 0) {
    organization=OrganizationServiceUtil.addOrganization(parentOrganizationId,name,type,regionId,countryId,statusId,comments,site,addresses,emailAddresses,orgLabors,phones,websites,serviceContext);
  }
 else {
    organization=OrganizationServiceUtil.updateOrganization(organizationId,parentOrganizationId,name,type,regionId,countryId,statusId,comments,true,null,site,addresses,emailAddresses,orgLabors,phones,websites,serviceContext);
    boolean deleteLogo=ParamUtil.getBoolean(actionRequest,"deleteLogo");
    if (deleteLogo) {
      OrganizationServiceUtil.deleteLogo(organization.getOrganizationId());
    }
  }
  long publicLayoutSetPrototypeId=ParamUtil.getLong(actionRequest,"publicLayoutSetPrototypeId");
  long privateLayoutSetPrototypeId=ParamUtil.getLong(actionRequest,"privateLayoutSetPrototypeId");
  boolean publicLayoutSetPrototypeLinkEnabled=ParamUtil.getBoolean(actionRequest,"publicLayoutSetPrototypeLinkEnabled",(publicLayoutSetPrototypeId > 0));
  boolean privateLayoutSetPrototypeLinkEnabled=ParamUtil.getBoolean(actionRequest,"privateLayoutSetPrototypeLinkEnabled",(privateLayoutSetPrototypeId > 0));
  Group organizationGroup=organization.getGroup();
  if (GroupPermissionUtil.contains(themeDisplay.getPermissionChecker(),organizationGroup,ActionKeys.UPDATE)) {
    SitesUtil.updateLayoutSetPrototypesLinks(organizationGroup,publicLayoutSetPrototypeId,privateLayoutSetPrototypeId,publicLayoutSetPrototypeLinkEnabled,privateLayoutSetPrototypeLinkEnabled);
  }
  String reminderQueries=actionRequest.getParameter("reminderQueries");
  PortletPreferences portletPreferences=organization.getPreferences();
  LocalizationUtil.setLocalizedPreferencesValues(actionRequest,portletPreferences,"reminderQueries");
  portletPreferences.setValue("reminderQueries",reminderQueries);
  portletPreferences.store();
  return organization;
}
