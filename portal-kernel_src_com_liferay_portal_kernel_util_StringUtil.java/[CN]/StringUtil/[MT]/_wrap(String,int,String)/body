{
  if (text == null) {
    return null;
  }
  StringBuilder sb=new StringBuilder();
  UnsyncBufferedReader br=new UnsyncBufferedReader(new UnsyncStringReader(text));
  String s=StringPool.BLANK;
  while ((s=br.readLine()) != null) {
    if (s.length() == 0) {
      sb.append(lineSeparator);
      continue;
    }
    int lineLength=0;
    String[] tokens=s.split(StringPool.SPACE);
    for (    String token : tokens) {
      if ((lineLength + token.length() + 1) > width) {
        if (lineLength > 0) {
          sb.append(lineSeparator);
        }
        if (token.length() > width) {
          int pos=token.indexOf(StringPool.OPEN_PARENTHESIS);
          if (pos != -1) {
            sb.append(token.substring(0,pos + 1));
            sb.append(lineSeparator);
            token=token.substring(pos + 1);
            sb.append(token);
            lineLength=token.length();
          }
 else {
            sb.append(token);
            lineLength=token.length();
          }
        }
 else {
          sb.append(token);
          lineLength=token.length();
        }
      }
 else {
        if (lineLength > 0) {
          sb.append(StringPool.SPACE);
          lineLength++;
        }
        sb.append(token);
        lineLength+=token.length();
      }
    }
    sb.append(lineSeparator);
  }
  return sb.toString();
}
