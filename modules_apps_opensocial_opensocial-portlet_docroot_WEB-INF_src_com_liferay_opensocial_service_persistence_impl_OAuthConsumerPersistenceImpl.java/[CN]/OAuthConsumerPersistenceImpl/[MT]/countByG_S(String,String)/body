{
  FinderPath finderPath=FINDER_PATH_COUNT_BY_G_S;
  Object[] finderArgs=new Object[]{gadgetKey,serviceName};
  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler(3);
    query.append(_SQL_COUNT_OAUTHCONSUMER_WHERE);
    boolean bindGadgetKey=false;
    if (gadgetKey == null) {
      query.append(_FINDER_COLUMN_G_S_GADGETKEY_1);
    }
 else     if (gadgetKey.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_S_GADGETKEY_3);
    }
 else {
      bindGadgetKey=true;
      query.append(_FINDER_COLUMN_G_S_GADGETKEY_2);
    }
    boolean bindServiceName=false;
    if (serviceName == null) {
      query.append(_FINDER_COLUMN_G_S_SERVICENAME_1);
    }
 else     if (serviceName.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_S_SERVICENAME_3);
    }
 else {
      bindServiceName=true;
      query.append(_FINDER_COLUMN_G_S_SERVICENAME_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindGadgetKey) {
        qPos.add(gadgetKey);
      }
      if (bindServiceName) {
        qPos.add(serviceName);
      }
      count=(Long)q.uniqueResult();
      finderCache.putResult(finderPath,finderArgs,count);
    }
 catch (    Exception e) {
      finderCache.removeResult(finderPath,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return count.intValue();
}
