{
  Object[] finderArgs=new Object[]{gadgetKey,serviceName};
  Object result=null;
  if (retrieveFromCache) {
    result=finderCache.getResult(FINDER_PATH_FETCH_BY_G_S,finderArgs,this);
  }
  if (result instanceof OAuthConsumer) {
    OAuthConsumer oAuthConsumer=(OAuthConsumer)result;
    if (!Validator.equals(gadgetKey,oAuthConsumer.getGadgetKey()) || !Validator.equals(serviceName,oAuthConsumer.getServiceName())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_OAUTHCONSUMER_WHERE);
    boolean bindGadgetKey=false;
    if (gadgetKey == null) {
      query.append(_FINDER_COLUMN_G_S_GADGETKEY_1);
    }
 else     if (gadgetKey.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_S_GADGETKEY_3);
    }
 else {
      bindGadgetKey=true;
      query.append(_FINDER_COLUMN_G_S_GADGETKEY_2);
    }
    boolean bindServiceName=false;
    if (serviceName == null) {
      query.append(_FINDER_COLUMN_G_S_SERVICENAME_1);
    }
 else     if (serviceName.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_S_SERVICENAME_3);
    }
 else {
      bindServiceName=true;
      query.append(_FINDER_COLUMN_G_S_SERVICENAME_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindGadgetKey) {
        qPos.add(gadgetKey);
      }
      if (bindServiceName) {
        qPos.add(serviceName);
      }
      List<OAuthConsumer> list=q.list();
      if (list.isEmpty()) {
        finderCache.putResult(FINDER_PATH_FETCH_BY_G_S,finderArgs,list);
      }
 else {
        if ((list.size() > 1) && _log.isWarnEnabled()) {
          _log.warn("OAuthConsumerPersistenceImpl.fetchByG_S(String, String, boolean) with parameters (" + StringUtil.merge(finderArgs) + ") yields a result set with more than 1 result. This violates the logical unique restriction. There is no order guarantee on which result is returned by this finder.");
        }
        OAuthConsumer oAuthConsumer=list.get(0);
        result=oAuthConsumer;
        cacheResult(oAuthConsumer);
        if ((oAuthConsumer.getGadgetKey() == null) || !oAuthConsumer.getGadgetKey().equals(gadgetKey) || (oAuthConsumer.getServiceName() == null)|| !oAuthConsumer.getServiceName().equals(serviceName)) {
          finderCache.putResult(FINDER_PATH_FETCH_BY_G_S,finderArgs,oAuthConsumer);
        }
      }
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_FETCH_BY_G_S,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (OAuthConsumer)result;
  }
}
