{
  DLFileEntry dlFileEntry=(DLFileEntry)obj;
  if (_log.isDebugEnabled()) {
    _log.debug("Indexing document " + dlFileEntry);
  }
  boolean indexContent=true;
  InputStream is=null;
  try {
    String[] ignoreExtensions=PrefsPropsUtil.getStringArray(PropsKeys.DL_FILE_INDEXING_IGNORE_EXTENSIONS,StringPool.COMMA);
    if (ArrayUtil.contains(ignoreExtensions,StringPool.PERIOD + dlFileEntry.getExtension())) {
      indexContent=false;
    }
    if (indexContent) {
      is=dlFileEntry.getFileVersion().getContentStream(false);
    }
  }
 catch (  Exception e) {
  }
  DLFileVersion dlFileVersion=dlFileEntry.getFileVersion();
  try {
    Document document=getBaseModelDocument(CLASS_NAME,dlFileEntry,dlFileVersion);
    if (indexContent) {
      if (is != null) {
        try {
          document.addFile(Field.CONTENT,is,dlFileEntry.getTitle(),PropsValues.DL_FILE_INDEXING_MAX_SIZE);
        }
 catch (        IOException ioe) {
          throw new SearchException("Cannot extract text from file" + dlFileEntry);
        }
      }
 else       if (_log.isDebugEnabled()) {
        _log.debug("Document " + dlFileEntry + " does not have any content");
      }
    }
    document.addKeyword(Field.CLASS_TYPE_ID,dlFileEntry.getFileEntryTypeId());
    document.addText(Field.DESCRIPTION,dlFileEntry.getDescription());
    document.addKeyword(Field.FOLDER_ID,dlFileEntry.getFolderId());
    document.addKeyword(Field.HIDDEN,dlFileEntry.isInHiddenFolder());
    document.addText(Field.PROPERTIES,dlFileEntry.getLuceneProperties());
    document.addText(Field.TITLE,dlFileEntry.getTitle());
    document.addKeyword(Field.TREE_PATH,StringUtil.split(dlFileEntry.getTreePath(),CharPool.SLASH));
    document.addKeyword("dataRepositoryId",dlFileEntry.getDataRepositoryId());
    document.addText("ddmContent",extractDDMContent(dlFileVersion,LocaleUtil.getSiteDefault()));
    document.addKeyword("extension",dlFileEntry.getExtension());
    document.addKeyword("fileEntryTypeId",dlFileEntry.getFileEntryTypeId());
    document.addKeyword("mimeType",StringUtil.replace(dlFileEntry.getMimeType(),CharPool.FORWARD_SLASH,CharPool.UNDERLINE));
    document.addKeyword("path",dlFileEntry.getTitle());
    document.addKeyword("readCount",dlFileEntry.getReadCount());
    document.addKeyword("size",dlFileEntry.getSize());
    ExpandoBridge expandoBridge=ExpandoBridgeFactoryUtil.getExpandoBridge(dlFileEntry.getCompanyId(),DLFileEntry.class.getName(),dlFileVersion.getFileVersionId());
    ExpandoBridgeIndexerUtil.addAttributes(document,expandoBridge);
    addFileEntryTypeAttributes(document,dlFileVersion);
    if (dlFileEntry.isInHiddenFolder()) {
      Indexer indexer=IndexerRegistryUtil.getIndexer(dlFileEntry.getClassName());
      if ((indexer != null) && (indexer instanceof RelatedEntryIndexer)) {
        RelatedEntryIndexer relatedEntryIndexer=(RelatedEntryIndexer)indexer;
        relatedEntryIndexer.addRelatedEntryFields(document,new LiferayFileEntry(dlFileEntry));
        DocumentHelper documentHelper=new DocumentHelper(document);
        documentHelper.setAttachmentOwnerKey(PortalUtil.getClassNameId(dlFileEntry.getClassName()),dlFileEntry.getClassPK());
        document.addKeyword(Field.RELATED_ENTRY,true);
      }
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Document " + dlFileEntry + " indexed successfully");
    }
    return document;
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}
