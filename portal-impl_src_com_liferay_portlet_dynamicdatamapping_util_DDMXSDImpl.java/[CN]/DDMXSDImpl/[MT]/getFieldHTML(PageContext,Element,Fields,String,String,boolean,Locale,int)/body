{
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  String portletId=PortalUtil.getPortletId(request);
  String portletNamespace=PortalUtil.getPortletNamespace(portletId);
  Map<String,Object> freeMarkerContext=getFreeMarkerContext(element,locale);
  freeMarkerContext.put("portletNamespace",portletNamespace);
  freeMarkerContext.put("namespace",namespace);
  Map<String,Object> fieldStructure=(Map<String,Object>)freeMarkerContext.get("fieldStructure");
  int startValueIndex=0;
  int endValueIndex=1;
  if (fields != null) {
    freeMarkerContext.put("fields",fields);
    String name=element.attributeValue("name");
    Field field=fields.get(name);
    if (field != null) {
      List<Serializable> values=field.getValues(themeDisplay.getLocale());
      Field fieldsTree=fields.get("_fieldsTree");
      if ((parentRepeatablePosition != -1) && (fieldsTree != null)) {
        Map<String,Object> parentFieldStructure=(Map<String,Object>)freeMarkerContext.get("parentFieldStructure");
        String parentFieldName=(String)parentFieldStructure.get("name");
        List<Serializable> fieldsTreeValues=fieldsTree.getValues(locale);
        int parentFieldIndex=getFieldIndex(parentFieldName,parentRepeatablePosition,fieldsTreeValues);
        startValueIndex=getStartValueIndex(name,parentFieldIndex,fieldsTreeValues);
        endValueIndex=getEndValueIndex(name,parentFieldName,parentFieldIndex,startValueIndex,fieldsTreeValues);
      }
 else {
        endValueIndex=values.size();
      }
    }
  }
  StringBuffer sb=new StringBuffer(endValueIndex - startValueIndex);
  for (int i=startValueIndex; i < endValueIndex; i++) {
    fieldStructure.put("randomNamespace",PwdGenerator.getPassword(4));
    fieldStructure.put("valueIndex",i);
    String childrenHTML=getHTML(pageContext,element,fields,namespace,mode,readOnly,locale,i);
    fieldStructure.put("children",childrenHTML);
    sb.append(processFTL(pageContext,element,mode,readOnly,freeMarkerContext));
  }
  return sb.toString();
}
