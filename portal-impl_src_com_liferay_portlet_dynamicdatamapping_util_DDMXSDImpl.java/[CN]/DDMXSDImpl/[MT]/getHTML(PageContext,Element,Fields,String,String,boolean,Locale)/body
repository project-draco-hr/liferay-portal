{
  StringBundler sb=new StringBundler();
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  String portletId=PortalUtil.getPortletId(request);
  String portletNamespace=PortalUtil.getPortletNamespace(portletId);
  List<Element> dynamicElementElements=element.elements("dynamic-element");
  for (  Element dynamicElementElement : dynamicElementElements) {
    Map<String,Object> freeMarkerContext=getFreeMarkerContext(dynamicElementElement,locale);
    freeMarkerContext.put("portletNamespace",portletNamespace);
    freeMarkerContext.put("namespace",namespace);
    if (fields != null) {
      freeMarkerContext.put("fields",fields);
    }
    Map<String,Object> field=(Map<String,Object>)freeMarkerContext.get("fieldStructure");
    String childrenHTML=getHTML(pageContext,dynamicElementElement,fields,namespace,mode,readOnly,locale);
    field.put("children",childrenHTML);
    String fieldNamespace=dynamicElementElement.attributeValue("fieldNamespace",_DEFAULT_NAMESPACE);
    String defaultResourcePath=_TPL_DEFAULT_PATH;
    boolean fieldReadOnly=GetterUtil.getBoolean(field.get("readOnly"));
    if ((fieldReadOnly && Validator.isNotNull(mode) && mode.equalsIgnoreCase(DDMTemplateConstants.TEMPLATE_MODE_EDIT)) || readOnly) {
      fieldNamespace=_DEFAULT_READ_ONLY_NAMESPACE;
      defaultResourcePath=_TPL_DEFAULT_READ_ONLY_PATH;
    }
    String type=dynamicElementElement.attributeValue("type");
    String templateName=StringUtil.replaceFirst(type,fieldNamespace.concat(StringPool.DASH),StringPool.BLANK);
    StringBundler resourcePath=new StringBundler(5);
    resourcePath.append(_TPL_PATH);
    resourcePath.append(fieldNamespace.toLowerCase());
    resourcePath.append(CharPool.SLASH);
    resourcePath.append(templateName);
    resourcePath.append(_TPL_EXT);
    String resource=resourcePath.toString();
    if (!TemplateManagerUtil.hasTemplate(TemplateManager.FREE_MARKER,resource)) {
      resource=defaultResourcePath;
    }
    Template freemarkerTemplate=TemplateManagerUtil.getTemplate(TemplateManager.FREE_MARKER,resource,TemplateContextType.STANDARD);
    for (    Map.Entry<String,Object> entry : freeMarkerContext.entrySet()) {
      freemarkerTemplate.put(entry.getKey(),entry.getValue());
    }
    sb.append(processFTL(pageContext,freemarkerTemplate));
  }
  return sb.toString();
}
