{
  StringBundler sb=new StringBundler();
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  String portletId=PortalUtil.getPortletId(request);
  String portletNamespace=PortalUtil.getPortletNamespace(portletId);
  List<Element> dynamicElementElements=element.elements("dynamic-element");
  for (  Element dynamicElementElement : dynamicElementElements) {
    FreeMarkerContext freeMarkerContext=getFreeMarkerContext(dynamicElementElement,locale);
    freeMarkerContext.put("portletNamespace",portletNamespace);
    freeMarkerContext.put("namespace",namespace);
    if (fields != null) {
      freeMarkerContext.put("fields",fields);
    }
    Map<String,Object> field=(Map<String,Object>)freeMarkerContext.get("field");
    String childrenHTML=getHTML(pageContext,dynamicElementElement,fields,namespace,mode,readOnly,locale);
    field.put("children",childrenHTML);
    String fieldNamespace=dynamicElementElement.attributeValue("fieldNamespace",_DEFAULT_NAMESPACE);
    boolean required=Boolean.valueOf(String.valueOf(field.get("required")));
    if (readOnly) {
      fieldNamespace=_DEFAULT_READ_ONLY_NAMESPACE;
    }
 else     if (required && mode.equals(DDMTemplateConstants.TEMPLATE_MODE_EDIT)) {
      fieldNamespace=_DEFAULT_MODE_EDIT_NAMESPACE;
    }
    String type=dynamicElementElement.attributeValue("type");
    String templateName=StringUtil.replaceFirst(type,fieldNamespace.concat(StringPool.DASH),StringPool.BLANK);
    StringBundler resourcePath=new StringBundler(5);
    resourcePath.append(_TPL_PATH);
    resourcePath.append(fieldNamespace.toLowerCase());
    resourcePath.append(CharPool.SLASH);
    resourcePath.append(templateName);
    resourcePath.append(_TPL_EXT);
    sb.append(processFTL(pageContext,freeMarkerContext,resourcePath.toString(),mode,readOnly));
  }
  return sb.toString();
}
