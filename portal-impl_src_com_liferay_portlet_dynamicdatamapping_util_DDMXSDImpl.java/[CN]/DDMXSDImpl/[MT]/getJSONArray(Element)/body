{
  JSONArray jsonArray=JSONFactoryUtil.createJSONArray();
  Document document=element.getDocument();
  String defaultLocale=LocalizationUtil.getDefaultLocale(document.asXML());
  List<Element> dynamicElementElements=element.elements("dynamic-element");
  for (  Element dynamicElementElement : dynamicElementElements) {
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
    JSONObject localizationMapJSONObject=JSONFactoryUtil.createJSONObject();
    List<Element> metadataElements=dynamicElementElement.elements("meta-data");
    for (    Element metadataElement : metadataElements) {
      if (metadataElement == null) {
        continue;
      }
      String locale=metadataElement.attributeValue("locale");
      JSONObject localeMap=JSONFactoryUtil.createJSONObject();
      localizationMapJSONObject.put(locale,localeMap);
      for (      Element metadataEntryElement : metadataElement.elements()) {
        String attributeName=metadataEntryElement.attributeValue("name");
        String attributeValue=metadataEntryElement.getText();
        localeMap.put(attributeName,attributeValue);
        if (defaultLocale.equals(locale)) {
          jsonObject.put(attributeName,attributeValue);
        }
      }
    }
    jsonObject.put("localizationMap",localizationMapJSONObject);
    for (    Attribute attribute : dynamicElementElement.attributes()) {
      jsonObject.put(attribute.getName(),attribute.getValue());
    }
    jsonObject.put("id",dynamicElementElement.attributeValue("name"));
    JSONArray hiddenAttributesJSONArray=JSONFactoryUtil.createJSONArray();
    hiddenAttributesJSONArray.put("readOnly");
    jsonObject.put("hiddenAttributes",hiddenAttributesJSONArray);
    String type=jsonObject.getString("type");
    String key="fields";
    if (type.equals(_TYPE_RADIO) || type.equals(_TYPE_SELECT)) {
      key="options";
    }
    jsonObject.put(key,getJSONArray(dynamicElementElement));
    jsonArray.put(jsonObject);
  }
  return jsonArray;
}
