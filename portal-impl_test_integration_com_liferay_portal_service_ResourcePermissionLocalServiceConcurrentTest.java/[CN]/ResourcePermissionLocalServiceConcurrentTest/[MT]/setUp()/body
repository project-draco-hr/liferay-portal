{
  Assume.assumeTrue(PropsValues.RETRY_ADVICE_MAX_RETRIES != 0);
  _threadCount=ServiceTestUtil.THREAD_COUNT;
  if ((PropsValues.RETRY_ADVICE_MAX_RETRIES > 0) && (_threadCount > PropsValues.RETRY_ADVICE_MAX_RETRIES)) {
    _threadCount=PropsValues.RETRY_ADVICE_MAX_RETRIES;
  }
  _actionId=RandomTestUtil.randomString(UniqueStringRandomizerBumper.INSTANCE);
  _name=RandomTestUtil.randomString(UniqueStringRandomizerBumper.INSTANCE);
  _resourceAction=ResourceActionLocalServiceUtil.addResourceAction(_name,_actionId,RandomTestUtil.randomLong());
  ResourceActionLocalServiceUtil.checkResourceActions();
  AdvisedSupport advisedSupport=ServiceBeanAopProxy.getAdvisedSupport(ResourcePermissionLocalServiceUtil.getService());
  TargetSource targetSource=advisedSupport.getTargetSource();
  final ResourcePermissionLocalServiceImpl resourcePermissionLocalServiceImpl=(ResourcePermissionLocalServiceImpl)targetSource.getTarget();
  final ResourcePermissionPersistence resourcePermissionPersistence=resourcePermissionLocalServiceImpl.getResourcePermissionPersistence();
  ReflectionTestUtil.setFieldValue(resourcePermissionLocalServiceImpl,"resourcePermissionPersistence",ProxyUtil.newProxyInstance(ResourcePermissionPersistence.class.getClassLoader(),new Class<?>[]{ResourcePermissionPersistence.class},new SynchronousInvocationHandler(_threadCount,new Runnable(){
    @Override public void run(){
      ReflectionTestUtil.setFieldValue(resourcePermissionLocalServiceImpl,"resourcePermissionPersistence",resourcePermissionPersistence);
    }
  }
,ResourcePermissionPersistence.class.getMethod("update",BaseModel.class),resourcePermissionPersistence)));
}
