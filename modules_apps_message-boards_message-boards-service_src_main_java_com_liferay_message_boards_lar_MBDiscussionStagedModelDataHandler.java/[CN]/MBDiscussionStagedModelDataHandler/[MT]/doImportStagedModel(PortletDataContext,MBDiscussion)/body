{
  long userId=portletDataContext.getUserId(discussion.getUserUuid());
  String className=discussion.getClassName();
  Map<Long,Long> relatedClassPKs=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(className);
  long newClassPK=MapUtil.getLong(relatedClassPKs,discussion.getClassPK(),discussion.getClassPK());
  MBDiscussion existingDiscussion=_mbDiscussionLocalService.fetchDiscussion(discussion.getClassName(),newClassPK);
  if (existingDiscussion == null) {
    if (className.equals(Layout.class.getName()) && PropsValues.LAYOUT_COMMENTS_ENABLED) {
      MBMessage rootMessage=_mbMessageLocalService.addDiscussionMessage(userId,discussion.getUserName(),portletDataContext.getScopeGroupId(),className,newClassPK,WorkflowConstants.ACTION_PUBLISH);
      existingDiscussion=_mbDiscussionLocalService.getThreadDiscussion(rootMessage.getThreadId());
    }
 else {
      StringBundler sb=new StringBundler(5);
      sb.append("No discussion exists for {className=");
      sb.append(discussion.getClassName());
      sb.append(", classPK=");
      sb.append(newClassPK);
      sb.append(StringPool.CLOSE_CURLY_BRACE);
      throw new NoSuchDiscussionException(sb.toString());
    }
  }
  Map<Long,Long> discussionIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(MBDiscussion.class);
  discussionIds.put(discussion.getDiscussionId(),existingDiscussion.getDiscussionId());
  Map<Long,Long> threadIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(MBThread.class);
  threadIds.put(discussion.getThreadId(),existingDiscussion.getThreadId());
}
