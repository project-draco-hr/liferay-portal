{
  final PrintArtifactPublishCommandsTask printArtifactPublishCommandsTask=GradleUtil.addTask(project,PRINT_ARTIFACT_PUBLISH_COMMANDS,PrintArtifactPublishCommandsTask.class);
  printArtifactPublishCommandsTask.setArtifactPropertiesFile(new Callable<File>(){
    @Override public File call() throws Exception {
      return recordArtifactTask.getOutputFile();
    }
  }
);
  printArtifactPublishCommandsTask.setDescription("Prints the artifact publish commands if this project has been " + "changed since the last publish.");
  configureTaskEnabledIfStale(printArtifactPublishCommandsTask,recordArtifactTask);
  File gitRepoDir=GradleUtil.getRootDir(project,".gitrepo");
  if (gitRepoDir != null) {
    configureTaskEnabledIfLeaf(printArtifactPublishCommandsTask);
  }
  GradleUtil.withPlugin(project,LiferayAntDefaultsPlugin.class,new Action<LiferayAntDefaultsPlugin>(){
    @Override public void execute(    LiferayAntDefaultsPlugin liferayAntDefaultsPlugin){
      configureTaskPrintArtifactPublishCommandsForAnt(printArtifactPublishCommandsTask);
    }
  }
);
  GradleUtil.withPlugin(project,LiferayOSGiDefaultsPlugin.class,new Action<LiferayOSGiDefaultsPlugin>(){
    @Override public void execute(    LiferayOSGiDefaultsPlugin liferayOSGiDefaultsPlugin){
      configureTaskPrintArtifactPublishCommandsForOSGi(printArtifactPublishCommandsTask);
    }
  }
);
  GradleUtil.withPlugin(project,LiferayThemeDefaultsPlugin.class,new Action<LiferayThemeDefaultsPlugin>(){
    @Override public void execute(    LiferayThemeDefaultsPlugin liferayThemeDefaultsPlugin){
      configureTaskPrintArtifactPublishCommandsForTheme(printArtifactPublishCommandsTask);
    }
  }
);
  return printArtifactPublishCommandsTask;
}
