{
  if (intervalJob == null) {
    return;
  }
  try {
    if (_scheduler.isShutdown()) {
      return;
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  try {
    if (!_scheduler.isStarted()) {
      _scheduler.start();
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  String jobName=intervalJob.getClass().getName() + StringPool.AT + intervalJob.hashCode();
  JobClassUtil.put(jobName,(Class<IntervalJob>)intervalJob.getClass());
  Date startTime=null;
  try {
    if (ServerDetector.getServerId().equals(ServerDetector.TOMCAT_ID)) {
      startTime=new Date(System.currentTimeMillis() + Time.MINUTE);
    }
  }
 catch (  RuntimeException re) {
  }
  if (startTime == null) {
    startTime=new Date(System.currentTimeMillis() + Time.MINUTE * 3);
  }
  Date endTime=null;
  JobDetail jobDetail=new JobDetail(jobName,Scheduler.DEFAULT_GROUP,JobWrapper.class);
  Trigger trigger=new SimpleTrigger(jobName,Scheduler.DEFAULT_GROUP,startTime,endTime,SimpleTrigger.REPEAT_INDEFINITELY,intervalJob.getInterval());
  try {
    _scheduler.scheduleJob(jobDetail,trigger);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
}
