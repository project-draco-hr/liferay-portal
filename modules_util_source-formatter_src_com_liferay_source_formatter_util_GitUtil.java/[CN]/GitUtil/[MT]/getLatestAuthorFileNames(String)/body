{
  List<String> latestAuthorFileNames=new ArrayList<>();
  int gitLevel=getGitLevel(baseDirName);
  if (gitLevel == -1) {
    return latestAuthorFileNames;
  }
  InputStream gitCommandInputStream=getGitCommandInputStream("git log");
  if (gitCommandInputStream == null) {
    return latestAuthorFileNames;
  }
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new InputStreamReader(gitCommandInputStream));
  String line=null;
  String commitId=null;
  String latestAuthor=null;
  List<String> latestAuthorCommitIds=new ArrayList<>();
  while ((line=unsyncBufferedReader.readLine()) != null) {
    if (line.startsWith("commit ")) {
      commitId=line.substring(7);
    }
 else     if (line.startsWith("Author: ")) {
      if (latestAuthor == null) {
        int x=line.lastIndexOf(CharPool.LESS_THAN);
        int y=line.lastIndexOf(CharPool.GREATER_THAN);
        latestAuthor=line.substring(x + 1,y);
        latestAuthorCommitIds.add(commitId);
      }
 else {
        if (line.endsWith("<" + latestAuthor + ">")) {
          latestAuthorCommitIds.add(commitId);
        }
 else {
          break;
        }
      }
    }
  }
  for (  String latestAuthorCommitId : latestAuthorCommitIds) {
    gitCommandInputStream=getGitCommandInputStream("git diff-tree --no-commit-id --name-only -r " + latestAuthorCommitId);
    String output=StringUtil.read(gitCommandInputStream);
    for (    String outputLine : StringUtil.splitLines(output)) {
      if (StringUtil.count(outputLine,StringPool.SLASH) < gitLevel) {
        continue;
      }
      String fileName=getFileName(outputLine,gitLevel);
      if (!latestAuthorFileNames.contains(fileName)) {
        latestAuthorFileNames.add(fileName);
      }
    }
  }
  return latestAuthorFileNames;
}
