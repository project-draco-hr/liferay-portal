{
  long pk=nextLong();
  WorkflowInstanceLink newWorkflowInstanceLink=_persistence.create(pk);
  newWorkflowInstanceLink.setGroupId(nextLong());
  newWorkflowInstanceLink.setCompanyId(nextLong());
  newWorkflowInstanceLink.setUserId(nextLong());
  newWorkflowInstanceLink.setUserName(randomString());
  newWorkflowInstanceLink.setCreateDate(nextDate());
  newWorkflowInstanceLink.setModifiedDate(nextDate());
  newWorkflowInstanceLink.setClassNameId(nextLong());
  newWorkflowInstanceLink.setClassPK(nextLong());
  newWorkflowInstanceLink.setWorkflowInstanceId(nextLong());
  _persistence.update(newWorkflowInstanceLink,false);
  WorkflowInstanceLink existingWorkflowInstanceLink=_persistence.findByPrimaryKey(newWorkflowInstanceLink.getPrimaryKey());
  assertEquals(existingWorkflowInstanceLink.getWorkflowInstanceLinkId(),newWorkflowInstanceLink.getWorkflowInstanceLinkId());
  assertEquals(existingWorkflowInstanceLink.getGroupId(),newWorkflowInstanceLink.getGroupId());
  assertEquals(existingWorkflowInstanceLink.getCompanyId(),newWorkflowInstanceLink.getCompanyId());
  assertEquals(existingWorkflowInstanceLink.getUserId(),newWorkflowInstanceLink.getUserId());
  assertEquals(existingWorkflowInstanceLink.getUserName(),newWorkflowInstanceLink.getUserName());
  assertEquals(Time.getShortTimestamp(existingWorkflowInstanceLink.getCreateDate()),Time.getShortTimestamp(newWorkflowInstanceLink.getCreateDate()));
  assertEquals(Time.getShortTimestamp(existingWorkflowInstanceLink.getModifiedDate()),Time.getShortTimestamp(newWorkflowInstanceLink.getModifiedDate()));
  assertEquals(existingWorkflowInstanceLink.getClassNameId(),newWorkflowInstanceLink.getClassNameId());
  assertEquals(existingWorkflowInstanceLink.getClassPK(),newWorkflowInstanceLink.getClassPK());
  assertEquals(existingWorkflowInstanceLink.getWorkflowInstanceId(),newWorkflowInstanceLink.getWorkflowInstanceId());
}
