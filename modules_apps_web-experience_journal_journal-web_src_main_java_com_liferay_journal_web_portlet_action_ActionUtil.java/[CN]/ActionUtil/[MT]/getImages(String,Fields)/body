{
  Map<String,byte[]> images=new HashMap<>();
  for (  Field field : fields) {
    String dataType=field.getDataType();
    if (!dataType.equals(FieldConstants.IMAGE)) {
      continue;
    }
    Map<Locale,List<Serializable>> valuesMap=field.getValuesMap();
    for (    Map.Entry<Locale,List<Serializable>> entry : valuesMap.entrySet()) {
      List<Serializable> values=entry.getValue();
      for (int i=0; i < values.size(); i++) {
        JSONObject jsonObject=JSONFactoryUtil.createJSONObject((String)values.get(i));
        String type=jsonObject.getString("type");
        if (type.equals("document")) {
          continue;
        }
        String uuid=jsonObject.getString("uuid");
        long groupId=jsonObject.getLong("groupId");
        if (Validator.isNotNull(uuid) && (groupId > 0)) {
          StringBundler sb=new StringBundler(7);
          sb.append(getElementInstanceId(content,field.getName(),i));
          sb.append(StringPool.UNDERLINE);
          sb.append(field.getName());
          sb.append(StringPool.UNDERLINE);
          sb.append(LanguageUtil.getLanguageId(entry.getKey()));
          FileEntry fileEntry=DLAppLocalServiceUtil.getFileEntryByUuidAndGroupId(uuid,groupId);
          byte[] bytes=FileUtil.getBytes(fileEntry.getContentStream());
          images.put(sb.toString(),bytes);
        }
      }
    }
  }
  return images;
}
