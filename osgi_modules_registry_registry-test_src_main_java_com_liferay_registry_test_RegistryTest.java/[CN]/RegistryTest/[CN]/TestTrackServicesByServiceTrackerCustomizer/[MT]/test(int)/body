{
  InterfaceOne oneA=getInstance();
  InterfaceOne oneB=getInstance();
  AtomicReference<TrackedOne> referenceA=new AtomicReference<TrackedOne>();
  AtomicReference<TrackedOne> referenceB=new AtomicReference<TrackedOne>();
  ServiceTrackerCustomizer<InterfaceOne,TrackedOne> serviceTrackerCustomizer=new MockServiceTrackerCustomizer(oneA,oneB,referenceA,referenceB);
  ServiceTracker<InterfaceOne,TrackedOne> serviceTracker=getServiceTracker(serviceTrackerCustomizer);
  serviceTracker.open();
  Assert.assertTrue(serviceTracker.isEmpty());
  Assert.assertEquals(0,serviceTracker.size());
  ServiceRegistration<InterfaceOne> serviceRegistrationA=_registry.registerService(InterfaceOne.class,oneA);
  Assert.assertNotNull(serviceRegistrationA);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put("a.property","G");
  ServiceRegistration<InterfaceOne> serviceRegistrationB=_registry.registerService(InterfaceOne.class,oneB,properties);
  Assert.assertNotNull(serviceRegistrationB);
  Assert.assertFalse(serviceTracker.isEmpty());
  Assert.assertEquals((expectedServicesCount == 2) ? referenceA.get() : referenceB.get(),serviceTracker.getService());
  Assert.assertEquals(referenceB.get(),serviceTracker.getService(serviceRegistrationB.getServiceReference()));
  ServiceReference<InterfaceOne>[] serviceReferences=serviceTracker.getServiceReferences();
  Assert.assertEquals(expectedServicesCount,serviceReferences.length);
  Object[] services=serviceTracker.getServices();
  Assert.assertEquals(expectedServicesCount,services.length);
  SortedMap<ServiceReference<InterfaceOne>,TrackedOne> trackedServiceReferences=serviceTracker.getTrackedServiceReferences();
  Assert.assertNotNull(trackedServiceReferences);
  Assert.assertEquals(expectedServicesCount,trackedServiceReferences.size());
  Assert.assertEquals((expectedServicesCount == 2) ? referenceA.get() : referenceB.get(),trackedServiceReferences.get(trackedServiceReferences.firstKey()));
  Assert.assertEquals(referenceB.get(),trackedServiceReferences.get(trackedServiceReferences.lastKey()));
  serviceRegistrationA.unregister();
  Assert.assertEquals(1,serviceTracker.size());
  serviceRegistrationB.unregister();
  Assert.assertEquals(0,serviceTracker.size());
  trackedServiceReferences=serviceTracker.getTrackedServiceReferences();
  Assert.assertNotNull(trackedServiceReferences);
  Assert.assertEquals(0,trackedServiceReferences.size());
  serviceTracker.close();
}
