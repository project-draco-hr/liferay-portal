{
  TestPortlet adtPortlet=new TestPortlet(map){
    @Override public void render(    RenderRequest renderRequest,    RenderResponse renderResponse) throws IOException, PortletException {
      map.put("render",Boolean.TRUE.toString());
      PortletContext portletContext=getPortletContext();
      PortletRequestDispatcher portletRequestDispatcher=portletContext.getRequestDispatcher("/view.jsp");
      portletRequestDispatcher.include(renderRequest,renderResponse);
    }
  }
;
  properties.put("com.liferay.portlet.instanceable",Boolean.FALSE.toString());
  setUpPortlet(adtPortlet,properties,TEST_PORTLET_ID);
  BundleContext bundleContext=getBundleContext();
  properties.put("javax.portlet.name",TEST_PORTLET_ID);
  ServiceRegistration<?> templateHandlerServiceRegistration=bundleContext.registerService(new String[]{Object.class.getName(),TemplateHandler.class.getName()},new TestEmbeddedPortletDisplayTemplateHandler(),properties);
  serviceRegistrations.add(templateHandlerServiceRegistration);
  HttpServletRequest httpServletRequest=getHttpServletRequest();
  PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.RENDER_PHASE);
  String testRuntimePortletId="testRuntimePortletId";
  TestPortlet testRuntimePortlet=new TestPortlet(map){
    @Override public void render(    RenderRequest renderRequest,    RenderResponse renderResponse) throws IOException, PortletException {
      map.put("runtime",Boolean.TRUE.toString());
    }
  }
;
  setUpPortlet(testRuntimePortlet,properties,testRuntimePortletId,false);
  portletURL.setParameter("testRuntimePortletId",testRuntimePortletId);
  Map<String,List<String>> responseMap=request(portletURL.toString());
  Assert.assertEquals("200",getString(responseMap,"code"));
  Assert.assertTrue(map.containsKey("render"));
  Assert.assertTrue(map.containsKey("runtime"));
}
