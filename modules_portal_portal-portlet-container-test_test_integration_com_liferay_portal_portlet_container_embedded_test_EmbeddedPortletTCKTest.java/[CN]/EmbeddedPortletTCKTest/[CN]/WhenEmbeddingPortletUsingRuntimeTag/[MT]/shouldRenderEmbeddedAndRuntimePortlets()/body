{
  TestPortlet embeddedPortlet=new TestPortlet(){
    @Override public void serveResource(    ResourceRequest resourceRequest,    ResourceResponse resourceResponse) throws IOException, PortletException {
      map.put("resource",Boolean.TRUE.toString());
      PortletContext portletContext=getPortletContext();
      PortletRequestDispatcher portletRequestDispatcher=portletContext.getRequestDispatcher("/runtime_portlet.jsp");
      portletRequestDispatcher.include(resourceRequest,resourceResponse);
    }
  }
;
  setUpPortlet(embeddedPortlet,properties,TEST_PORTLET_ID,false);
  PortletPreferencesLocalServiceUtil.addPortletPreferences(TestPropsValues.getCompanyId(),PortletKeys.PREFS_OWNER_ID_DEFAULT,PortletKeys.PREFS_OWNER_TYPE_LAYOUT,layout.getPlid(),TEST_PORTLET_ID,null,null);
  HttpServletRequest httpServletRequest=getHttpServletRequest();
  PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.RESOURCE_PHASE);
  String testRuntimePortletId="testRuntimePortletId";
  TestPortlet testRuntimePortlet=new TestPortlet(map){
    @Override public void render(    RenderRequest renderRequest,    RenderResponse renderResponse) throws IOException, PortletException {
      map.put("runtime",Boolean.TRUE.toString());
    }
  }
;
  setUpPortlet(testRuntimePortlet,properties,testRuntimePortletId,false);
  portletURL.setParameter("testRuntimePortletId",testRuntimePortletId);
  Map<String,List<String>> responseMap=request(portletURL.toString());
  Assert.assertEquals("200",getString(responseMap,"code"));
  Assert.assertTrue(map.containsKey("resource"));
  Assert.assertTrue(map.containsKey("runtime"));
}
