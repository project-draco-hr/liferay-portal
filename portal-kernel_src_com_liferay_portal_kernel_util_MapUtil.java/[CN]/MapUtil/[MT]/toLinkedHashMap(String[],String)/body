{
  LinkedHashMap<String,Object> map=new LinkedHashMap<>();
  if (params == null) {
    return (LinkedHashMap<String,T>)map;
  }
  for (  String param : params) {
    String[] kvp=StringUtil.split(param,delimiter);
    if (kvp.length == 2) {
      map.put(kvp[0],kvp[1]);
    }
 else     if (kvp.length == 3) {
      String type=kvp[2];
      if (StringUtil.equalsIgnoreCase(type,"boolean") || type.equals(Boolean.class.getName())) {
        map.put(kvp[0],Boolean.valueOf(kvp[1]));
      }
 else       if (StringUtil.equalsIgnoreCase(type,"double") || type.equals(Double.class.getName())) {
        map.put(kvp[0],Double.valueOf(kvp[1]));
      }
 else       if (StringUtil.equalsIgnoreCase(type,"int") || type.equals(Integer.class.getName())) {
        map.put(kvp[0],Integer.valueOf(kvp[1]));
      }
 else       if (StringUtil.equalsIgnoreCase(type,"long") || type.equals(Long.class.getName())) {
        map.put(kvp[0],Long.valueOf(kvp[1]));
      }
 else       if (StringUtil.equalsIgnoreCase(type,"short") || type.equals(Short.class.getName())) {
        map.put(kvp[0],Short.valueOf(kvp[1]));
      }
 else       if (type.equals(String.class.getName())) {
        map.put(kvp[0],kvp[1]);
      }
 else {
        try {
          Class<?> clazz=Class.forName(type);
          Constructor<?> constructor=clazz.getConstructor(String.class);
          map.put(kvp[0],constructor.newInstance(kvp[1]));
        }
 catch (        Exception e) {
          _log.error(e.getMessage(),e);
        }
      }
    }
  }
  return (LinkedHashMap<String,T>)map;
}
