{
  long pk=ServiceTestUtil.nextLong();
  Website newWebsite=_persistence.create(pk);
  newWebsite.setCompanyId(ServiceTestUtil.nextLong());
  newWebsite.setUserId(ServiceTestUtil.nextLong());
  newWebsite.setUserName(ServiceTestUtil.randomString());
  newWebsite.setCreateDate(ServiceTestUtil.nextDate());
  newWebsite.setModifiedDate(ServiceTestUtil.nextDate());
  newWebsite.setClassNameId(ServiceTestUtil.nextLong());
  newWebsite.setClassPK(ServiceTestUtil.nextLong());
  newWebsite.setUrl(ServiceTestUtil.randomString());
  newWebsite.setTypeId(ServiceTestUtil.nextInt());
  newWebsite.setPrimary(ServiceTestUtil.randomBoolean());
  _persistence.update(newWebsite,false);
  Website existingWebsite=_persistence.findByPrimaryKey(newWebsite.getPrimaryKey());
  Assert.assertEquals(existingWebsite.getWebsiteId(),newWebsite.getWebsiteId());
  Assert.assertEquals(existingWebsite.getCompanyId(),newWebsite.getCompanyId());
  Assert.assertEquals(existingWebsite.getUserId(),newWebsite.getUserId());
  Assert.assertEquals(existingWebsite.getUserName(),newWebsite.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingWebsite.getCreateDate()),Time.getShortTimestamp(newWebsite.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingWebsite.getModifiedDate()),Time.getShortTimestamp(newWebsite.getModifiedDate()));
  Assert.assertEquals(existingWebsite.getClassNameId(),newWebsite.getClassNameId());
  Assert.assertEquals(existingWebsite.getClassPK(),newWebsite.getClassPK());
  Assert.assertEquals(existingWebsite.getUrl(),newWebsite.getUrl());
  Assert.assertEquals(existingWebsite.getTypeId(),newWebsite.getTypeId());
  Assert.assertEquals(existingWebsite.getPrimary(),newWebsite.getPrimary());
}
