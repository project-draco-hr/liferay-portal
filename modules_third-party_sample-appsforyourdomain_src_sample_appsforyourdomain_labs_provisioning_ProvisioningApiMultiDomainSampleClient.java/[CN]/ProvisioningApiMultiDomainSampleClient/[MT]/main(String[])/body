{
  if (args.length != 4) {
    System.out.println("Usage: java ProvisioningApiMultiDomainSampleClient <admin@example.com> " + "<adminpassword> <primarydomain> <secondarydomain>");
    System.exit(1);
  }
  String adminEmail=args[0];
  String adminPassword=args[1];
  String primaryDomain=args[2];
  String secondaryDomain=args[3];
  try {
    ProvisioningApiMultiDomainSampleClient client=new ProvisioningApiMultiDomainSampleClient(adminEmail,adminPassword,primaryDomain,"multidomain-api-sample-" + primaryDomain);
    long time=System.currentTimeMillis();
    String userEmail="test-" + time + "@"+ secondaryDomain;
    GenericEntry entry=client.createUser(userEmail,"p@ssw0rd","firstName","lastName");
    LOGGER.log(Level.INFO,"Created user - " + entry.getProperty("userEmail"));
    entry=client.retrieveUser(userEmail);
    LOGGER.log(Level.INFO,"Retrieved user - " + entry.getProperty("userEmail"));
    Map<UserProperty,String> optionalAttributes=new HashMap<UserProperty,String>();
    optionalAttributes.put(UserProperty.ADMIN,String.valueOf(true));
    optionalAttributes.put(UserProperty.SUSPENDED,String.valueOf(false));
    optionalAttributes.put(UserProperty.HASH_FUNCTION,"MD5");
    entry=client.createUser("test2-" + time + "@"+ secondaryDomain,"0f359740bd1cda994f8b55330c86d845","firstName","lastName",optionalAttributes);
    LOGGER.log(Level.INFO,"Created user with optional attributes- " + entry.getProperty("userEmail"));
    Map<String,String> updatedAttributes=new HashMap<String,String>();
    updatedAttributes.put("lastName","Smith");
    updatedAttributes.put("isSuspended","true");
    entry=client.updateUser(userEmail,updatedAttributes);
    LOGGER.log(Level.INFO,"Updated user - " + entry.getProperty("lastName"));
    List<GenericEntry> users=client.retrieveAllUsers();
    LOGGER.log(Level.INFO,"Retrieved all users - " + users.size());
    String aliasEmail="alias-" + time + "@"+ secondaryDomain;
    entry=client.createAlias(aliasEmail,userEmail);
    LOGGER.log(Level.INFO,"Created alias - " + entry.getProperty("aliasEmail"));
    entry=client.retrieveAlias(aliasEmail);
    LOGGER.log(Level.INFO,"Retrieved alias - " + entry.getProperty("aliasEmail"));
    List<GenericEntry> aliases=client.retrieveAllAliases();
    LOGGER.log(Level.INFO,"Retrieved all aliases - " + users.size());
    client.deleteAlias(aliasEmail);
    LOGGER.log(Level.INFO,"Deleted  - " + aliasEmail);
    client.deleteUser(userEmail);
    LOGGER.log(Level.INFO,"Deleted  - " + userEmail);
    client.deleteUser("test2-" + time + "@"+ secondaryDomain);
  }
 catch (  AuthenticationException e) {
    e.printStackTrace();
  }
catch (  AppsForYourDomainException e) {
    e.printStackTrace();
  }
catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ServiceException e) {
    e.printStackTrace();
  }
}
