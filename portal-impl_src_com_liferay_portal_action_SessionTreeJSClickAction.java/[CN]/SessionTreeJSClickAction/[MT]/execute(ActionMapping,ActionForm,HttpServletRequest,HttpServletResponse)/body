{
  try {
    String cmd=ParamUtil.getString(request,Constants.CMD);
    String treeId=ParamUtil.getString(request,"treeId");
    if (cmd.equals("collapse")) {
      SessionTreeJSClicks.closeNodes(request,treeId);
    }
 else     if (cmd.equals("expand")) {
      String[] nodeIds=StringUtil.split(ParamUtil.getString(request,"nodeIds"));
      SessionTreeJSClicks.openNodes(request,treeId,nodeIds);
    }
 else     if (cmd.equals("layoutCheck")) {
      long plid=ParamUtil.getLong(request,"plid");
      if (plid == LayoutConstants.DEFAULT_PLID) {
        long groupId=ParamUtil.getLong(request,"groupId");
        boolean privateLayout=ParamUtil.getBoolean(request,"privateLayout");
        List<Layout> layouts=LayoutLocalServiceUtil.getLayouts(groupId,privateLayout,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
        for (        Layout layout : layouts) {
          SessionTreeJSClicks.openLayoutNodes(request,treeId,layout.isPrivateLayout(),layout.getLayoutId(),true);
        }
      }
 else {
        boolean recursive=ParamUtil.getBoolean(request,"recursive");
        Layout layout=LayoutLocalServiceUtil.getLayout(plid);
        SessionTreeJSClicks.openLayoutNodes(request,treeId,layout.isPrivateLayout(),layout.getLayoutId(),recursive);
      }
    }
 else     if (cmd.equals("layoutCollapse")) {
    }
 else     if (cmd.equals("layoutUncheck")) {
      long plid=ParamUtil.getLong(request,"plid");
      if (plid == LayoutConstants.DEFAULT_PLID) {
        long groupId=ParamUtil.getLong(request,"groupId");
        boolean privateLayout=ParamUtil.getBoolean(request,"privateLayout");
        List<Layout> layouts=LayoutLocalServiceUtil.getLayouts(groupId,privateLayout,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
        for (        Layout layout : layouts) {
          SessionTreeJSClicks.closeLayoutNodes(request,treeId,layout.isPrivateLayout(),layout.getLayoutId(),true);
        }
      }
 else {
        boolean recursive=ParamUtil.getBoolean(request,"recursive");
        Layout layout=LayoutLocalServiceUtil.getLayout(plid);
        SessionTreeJSClicks.closeLayoutNodes(request,treeId,layout.isPrivateLayout(),layout.getLayoutId(),recursive);
      }
    }
 else     if (cmd.equals("layoutUncollapse")) {
    }
 else {
      String nodeId=ParamUtil.getString(request,"nodeId");
      boolean openNode=ParamUtil.getBoolean(request,"openNode");
      if (openNode) {
        SessionTreeJSClicks.openNode(request,treeId,nodeId);
      }
 else {
        SessionTreeJSClicks.closeNode(request,treeId,nodeId);
      }
    }
    if (!cmd.isEmpty()) {
      updateCheckedLayoutsPlidList(request,treeId);
    }
    PortalPreferences portalPreferences=PortletPreferencesFactoryUtil.getPortalPreferences(request);
    String checkedNodesJSONArray=portalPreferences.getValue(SessionTreeJSClicks.class.getName(),treeId + "Plid");
    response.setContentType(ContentTypes.APPLICATION_JSON);
    ServletOutputStream servletOutputStream=response.getOutputStream();
    servletOutputStream.print(checkedNodesJSONArray);
    return null;
  }
 catch (  Exception e) {
    PortalUtil.sendError(e,request,response);
    return null;
  }
}
