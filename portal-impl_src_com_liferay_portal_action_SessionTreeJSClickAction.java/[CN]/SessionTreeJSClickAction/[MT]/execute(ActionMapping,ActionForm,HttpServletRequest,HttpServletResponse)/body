{
  try {
    String cmd=ParamUtil.getString(request,Constants.CMD);
    String treeId=ParamUtil.getString(request,"treeId");
    long groupId=ParamUtil.getLong(request,"groupId");
    long layoutId=ParamUtil.getLong(request,"layoutId");
    boolean privateLayout=ParamUtil.getBoolean(request,"privateLayout");
    boolean recursive=ParamUtil.getBoolean(request,"recursive");
    if (cmd.equals("collapseLayout")) {
      String treeNamespace=_EXPAND_NAMESPACE.concat(treeId);
      SessionTreeJSClicks.removeLayoutNodes(request,treeNamespace,layoutId,privateLayout,recursive);
    }
 else     if (cmd.equals("expandLayout")) {
      String treeNamespace=_EXPAND_NAMESPACE.concat(treeId);
      SessionTreeJSClicks.addLayoutNodes(request,treeNamespace,layoutId,privateLayout,recursive);
    }
 else     if (cmd.equals("checkLayout")) {
      String treeNamespace=_CHECK_NAMESPACE.concat(treeId);
      SessionTreeJSClicks.addLayoutNodes(request,treeNamespace,layoutId,privateLayout,recursive);
    }
 else     if (cmd.equals("uncheckLayout")) {
      String treeNamespace=_CHECK_NAMESPACE.concat(treeId);
      SessionTreeJSClicks.removeLayoutNodes(request,treeNamespace,layoutId,privateLayout,recursive);
      if (layoutId != LayoutConstants.DEFAULT_PARENT_LAYOUT_ID) {
        Layout layout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,layoutId);
        for (        Layout parentLayout : layout.getAncestors()) {
          SessionTreeJSClicks.removeNode(request,treeNamespace,String.valueOf(parentLayout.getLayoutId()));
        }
      }
    }
 else {
      String nodeId=ParamUtil.getString(request,"nodeId");
      boolean addNode=ParamUtil.getBoolean(request,"addNode");
      if (addNode) {
        SessionTreeJSClicks.addNode(request,treeId,nodeId);
      }
 else {
        SessionTreeJSClicks.removeNode(request,treeId,nodeId);
      }
    }
    return null;
  }
 catch (  Exception e) {
    PortalUtil.sendError(e,request,response);
    return null;
  }
}
