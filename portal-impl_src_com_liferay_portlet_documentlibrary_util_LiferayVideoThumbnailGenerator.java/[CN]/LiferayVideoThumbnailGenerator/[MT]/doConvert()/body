{
  inputIContainer=IContainer.make();
  int returnValue=0;
  openContainer(inputIContainer,_inputUrl,false);
  int numOfStreams=inputIContainer.getNumStreams();
  if (numOfStreams < 0) {
    throw new RuntimeException("Input file doesn't have any stream");
  }
  IVideoPicture[] inputIVideoPictures=new IVideoPicture[numOfStreams];
  IStream[] inputIStreams=new IStream[numOfStreams];
  IStreamCoder[] inputIStreamCoders=new IStreamCoder[numOfStreams];
  for (int i=0; i < numOfStreams; i++) {
    inputIVideoPictures[i]=null;
    IStream inputIStream=inputIContainer.getStream(i);
    IStreamCoder inputIStreamCoder=inputIStream.getStreamCoder();
    ICodec.Type inputICodecType=inputIStreamCoder.getCodecType();
    inputIStreams[i]=inputIStream;
    inputIStreamCoders[i]=inputIStreamCoder;
    if (inputICodecType == ICodec.Type.CODEC_TYPE_VIDEO) {
      inputIVideoPictures[i]=IVideoPicture.make(inputIStreamCoder.getPixelType(),inputIStreamCoder.getWidth(),inputIStreamCoder.getHeight());
    }
    if (inputIStreamCoders[i] != null) {
      returnValue=inputIStreamCoders[i].open();
      if (returnValue < 0) {
        throw new RuntimeException("Cannot open input coder");
      }
    }
  }
  IPacket inputIPacket=IPacket.make();
  boolean keyPacketFound=false;
  boolean onlyDecodeKeyPackets=false;
  int countNonKeyAfterKey=0;
  int currentPacketSize=0;
  while (inputIContainer.readNextPacket(inputIPacket) == 0) {
    currentPacketSize=inputIPacket.getSize();
    int streamIndex=inputIPacket.getStreamIndex();
    IStream iStream=inputIContainer.getStream(streamIndex);
    long timeStampOffset=getStreamTimeStampOffset(iStream);
    IStreamCoder inputIStreamCoder=inputIStreamCoders[streamIndex];
    IVideoPicture inputIVideoPicture=inputIVideoPictures[streamIndex];
    ICodec.Type inputICodecType=inputIStreamCoder.getCodecType();
    if (_log.isDebugEnabled()) {
      _log.debug("Current packet size: " + currentPacketSize);
    }
    if (inputICodecType == ICodec.Type.CODEC_TYPE_VIDEO) {
      keyPacketFound=keyPacketFound(inputIPacket,keyPacketFound);
      countNonKeyAfterKey=countNonKeyAfterKey(inputIPacket,keyPacketFound,countNonKeyAfterKey);
      boolean startDecoding=startDecoding(inputIPacket,inputIStreamCoder,countNonKeyAfterKey,onlyDecodeKeyPackets,keyPacketFound);
      if (startDecoding) {
        returnValue=decodeVideo(null,inputIVideoPicture,null,inputIPacket,null,inputIStreamCoder,null,null,_file,_extension,_height,_width,timeStampOffset);
        if (returnValue <= 0) {
          if (inputIPacket.isKey()) {
            throw new RuntimeException("Cannot decode video stream: " + streamIndex);
          }
          onlyDecodeKeyPackets=true;
          continue;
        }
 else         if (returnValue == THUMBNAIL_GENERATED) {
          break;
        }
      }
 else {
        if (_log.isDebugEnabled()) {
          _log.debug("Do not decode yet stream: " + streamIndex);
        }
      }
    }
  }
  inputIVideoPictures=null;
  inputIStreamCoders=null;
}
