{
  BuildPluginDescriptorTask buildPluginDescriptorTask=GradleUtil.addTask(project,BUILD_PLUGIN_DESCRIPTOR_TASK_NAME,BuildPluginDescriptorTask.class);
  buildPluginDescriptorTask.dependsOn(JavaPlugin.COMPILE_JAVA_TASK_NAME);
  final SourceSet sourceSet=GradleUtil.getSourceSet(project,SourceSet.MAIN_SOURCE_SET_NAME);
  buildPluginDescriptorTask.setClassesDir(new Callable<File>(){
    @Override public File call() throws Exception {
      SourceSetOutput sourceSetOutput=sourceSet.getOutput();
      return sourceSetOutput.getClassesDir();
    }
  }
);
  buildPluginDescriptorTask.setDescription("Generates the Maven plugin descriptor for the project.");
  buildPluginDescriptorTask.setGroup(BasePlugin.BUILD_GROUP);
  buildPluginDescriptorTask.setMavenEmbedderClasspath(mavenEmbedderClasspath);
  buildPluginDescriptorTask.setOutputDir(new Callable<File>(){
    @Override public File call() throws Exception {
      File resourcesDir=getSrcDir(sourceSet.getResources());
      return new File(resourcesDir,"META-INF/maven");
    }
  }
);
  buildPluginDescriptorTask.setPomArtifactId(new Callable<String>(){
    @Override public String call() throws Exception {
      return _osgiHelper.getBundleSymbolicName(project);
    }
  }
);
  buildPluginDescriptorTask.setPomGroupId(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return project.getGroup();
    }
  }
);
  buildPluginDescriptorTask.setPomVersion(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return project.getVersion();
    }
  }
);
  buildPluginDescriptorTask.setSourceDir(new Callable<File>(){
    @Override public File call() throws Exception {
      return getSrcDir(sourceSet.getJava());
    }
  }
);
  Task processResourcesTask=GradleUtil.getTask(project,JavaPlugin.PROCESS_RESOURCES_TASK_NAME);
  processResourcesTask.mustRunAfter(buildPluginDescriptorTask);
  return buildPluginDescriptorTask;
}
