{
  String value=dynamicContentElement.getText();
  if (Validator.isNull(value)) {
    return;
  }
  JSONObject jsonObject=JSONFactoryUtil.createJSONObject(value);
  String data=jsonObject.getString("data");
  if (Validator.isNotNull(data)) {
    dynamicContentElement.clearContent();
    dynamicContentElement.addCDATA(data);
    return;
  }
  String uuid=jsonObject.getString("uuid");
  long groupId=jsonObject.getLong("groupId");
  FileEntry fileEntry=dlAppLocalService.getFileEntryByUuidAndGroupId(uuid,groupId);
  boolean isTempFile=fileEntry.isRepositoryCapabilityProvided(TemporaryFileEntriesCapability.class);
  if (isTempFile) {
    FileEntry tempFileEntry=fileEntry;
    Folder folder=article.addImagesFolder();
    String fileEntryName=DLUtil.getUniqueFileName(fileEntry.getGroupId(),folder.getFolderId(),fileEntry.getFileName());
    fileEntry=PortletFileRepositoryUtil.addPortletFileEntry(groupId,fileEntry.getUserId(),JournalArticle.class.getName(),article.getResourcePrimKey(),JournalConstants.SERVICE_NAME,folder.getFolderId(),fileEntry.getContentStream(),fileEntryName,fileEntry.getMimeType(),false);
    dlAppLocalService.deleteFileEntry(tempFileEntry.getFileEntryId());
  }
  String previewURL=DLUtil.getPreviewURL(fileEntry,fileEntry.getFileVersion(),null,StringPool.BLANK,false,true);
  dynamicContentElement.addAttribute("resourcePrimKey",String.valueOf(article.getResourcePrimKey()));
  dynamicContentElement.clearContent();
  dynamicContentElement.addCDATA(previewURL);
}
