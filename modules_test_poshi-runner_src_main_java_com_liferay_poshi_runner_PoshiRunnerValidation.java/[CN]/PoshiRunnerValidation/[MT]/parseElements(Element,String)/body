{
  List<Element> childElements=element.elements();
  List<String> possibleElementNames=Arrays.asList("description","echo","execute","fail","for","if","property","return","take-screenshot","task","toggle","var","while");
  if (Validator.isNotNull(filePath) && filePath.endsWith(".function")) {
    possibleElementNames=Arrays.asList("execute","if");
  }
  for (  Element childElement : childElements) {
    String elementName=childElement.getName();
    if (!possibleElementNames.contains(elementName)) {
      _exceptions.add(new Exception("Invalid " + elementName + " element\n"+ filePath+ ":"+ childElement.attributeValue("line-number")));
    }
    if (elementName.equals("description") || elementName.equals("echo") || elementName.equals("fail")) {
      validateMessageElement(childElement,filePath);
    }
 else     if (elementName.equals("execute")) {
      validateExecuteElement(childElement,filePath);
    }
 else     if (elementName.equals("for")) {
      validateForElement(childElement,filePath);
    }
 else     if (elementName.equals("if")) {
      validateIfElement(childElement,filePath);
    }
 else     if (elementName.equals("property")) {
      validatePropertyElement(childElement,filePath);
    }
 else     if (elementName.equals("return")) {
      validateCommandReturnElement(childElement,filePath);
    }
 else     if (elementName.equals("take-screenshot")) {
      validateTakeScreenshotElement(childElement,filePath);
    }
 else     if (elementName.equals("task")) {
      validateTaskElement(childElement,filePath);
    }
 else     if (elementName.equals("toggle")) {
      validateToggleElement(childElement,filePath);
    }
 else     if (elementName.equals("var")) {
      validateVarElement(childElement,filePath);
    }
 else     if (elementName.equals("while")) {
      validateWhileElement(childElement,filePath);
    }
  }
}
