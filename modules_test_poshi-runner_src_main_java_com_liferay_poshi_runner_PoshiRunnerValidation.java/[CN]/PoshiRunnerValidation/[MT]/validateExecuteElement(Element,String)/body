{
  List<String> multiplePrimaryAttributeNames=null;
  List<String> primaryAttributeNames=Arrays.asList("function","macro","macro-desktop","macro-mobile","method","selenium","test-case");
  if (filePath.endsWith(".function")) {
    primaryAttributeNames=Arrays.asList("function","selenium");
  }
 else   if (filePath.endsWith(".macro")) {
    multiplePrimaryAttributeNames=Arrays.asList("macro-desktop","macro-mobile");
    primaryAttributeNames=Arrays.asList("function","macro","macro-desktop","macro-mobile");
  }
 else   if (filePath.endsWith(".testcase")) {
    multiplePrimaryAttributeNames=Arrays.asList("macro-desktop","macro-mobile");
    primaryAttributeNames=Arrays.asList("function","macro","macro-desktop","macro-mobile","method","test-case");
  }
  String primaryAttributeName=getPrimaryAttributeName(element,multiplePrimaryAttributeNames,primaryAttributeNames,filePath);
  if (primaryAttributeName == null) {
    return;
  }
  if (primaryAttributeName.equals("function")) {
    List<String> possibleAttributeNames=Arrays.asList("function","line-number","locator1","locator2","value1","value2");
    validatePossibleAttributeNames(element,possibleAttributeNames,filePath);
    validateFunctionContext(element,filePath);
  }
 else   if (primaryAttributeName.equals("macro")) {
    List<String> possibleAttributeNames=Arrays.asList("line-number","macro");
    validatePossibleAttributeNames(element,possibleAttributeNames,filePath);
    validateMacroContext(element,"macro",filePath);
  }
 else   if (primaryAttributeName.equals("macro-desktop")) {
    List<String> possibleAttributeNames=Arrays.asList("line-number","macro-desktop","macro-mobile");
    validatePossibleAttributeNames(element,possibleAttributeNames,filePath);
    validateMacroContext(element,"macro-desktop",filePath);
  }
 else   if (primaryAttributeName.equals("macro-mobile")) {
    List<String> possibleAttributeNames=Arrays.asList("line-number","macro-desktop","macro-mobile");
    validatePossibleAttributeNames(element,possibleAttributeNames,filePath);
    validateMacroContext(element,"macro-mobile",filePath);
  }
 else   if (primaryAttributeName.equals("selenium")) {
    List<String> possibleAttributeNames=Arrays.asList("argument1","argument2","line-number","selenium");
    validatePossibleAttributeNames(element,possibleAttributeNames,filePath);
  }
 else   if (primaryAttributeName.equals("test-case")) {
    List<String> possibleAttributeNames=Arrays.asList("line-number","test-case");
    validatePossibleAttributeNames(element,possibleAttributeNames,filePath);
    validateTestCaseContext(element,filePath);
  }
  List<Element> childElements=element.elements();
  if (!childElements.isEmpty()) {
    primaryAttributeNames=Arrays.asList("function","macro","macro-desktop","macro-mobile","method","selenium","test-case");
    validateHasPrimaryAttributeName(element,multiplePrimaryAttributeNames,primaryAttributeNames,filePath);
    List<String> possibleChildElementNames=Arrays.asList("arg","return","var");
    for (    Element childElement : childElements) {
      String childElementName=childElement.getName();
      if (!possibleChildElementNames.contains(childElementName)) {
        _exceptions.add(new Exception("Invalid child element\n" + filePath + ":"+ childElement.attributeValue("line-number")));
      }
    }
    List<Element> argElements=element.elements("arg");
    for (    Element argElement : argElements) {
      validateArgElement(argElement,filePath);
    }
    List<Element> returnElements=element.elements("return");
    for (    Element returnElement : returnElements) {
      if (primaryAttributeName.equals("macro")) {
        validateExecuteReturnMacroElement(returnElement,filePath);
        validateMacroReturnsAttribute(element,"macro",returnElement,filePath);
      }
 else       if (primaryAttributeName.equals("method")) {
        validateExecuteReturnMethodElement(returnElement,filePath);
      }
    }
    List<Element> varElements=element.elements("var");
    for (    Element varElement : varElements) {
      validateVarElement(varElement,filePath);
    }
  }
}
