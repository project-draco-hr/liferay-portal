{
  testPortlet=new TestPortlet(map){
    @Override public void serveResource(    ResourceRequest resourceRequest,    ResourceResponse resourceResponse) throws IOException {
      PrintWriter printWriter=resourceResponse.getWriter();
      PortletURL portletURL=resourceResponse.createActionURL();
      String queryString=HttpUtil.getQueryString(portletURL.toString());
      Map<String,String[]> parameterMap=HttpUtil.getParameterMap(queryString);
      String portalAuthenticationToken=MapUtil.getString(parameterMap,"p_auth");
      printWriter.write(portalAuthenticationToken);
    }
  }
;
  setUpPortlet(testPortlet,properties,TEST_PORTLET_ID);
  HttpServletRequest httpServletRequest=PortletContainerTestUtil.getHttpServletRequest(group,layout);
  PortletContainerTestUtil.PortalAuthentication portalAuthentication=PortletContainerTestUtil.getPortalAuthentication(httpServletRequest,layout,TEST_PORTLET_ID);
  map.clear();
  PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.ACTION_PHASE);
  String url=portletURL.toString();
  url=HttpUtil.removeParameter(url,"p_auth");
  Map<String,List<String>> headers=new HashMap<>();
  headers.put("Cookie",portalAuthentication.getCookies());
  headers.put("X-CSRF-Token",Collections.singletonList(portalAuthentication.getPortalAuthenticationToken()));
  Map<String,List<String>> responseMap=PortletContainerTestUtil.request(url,headers);
  Assert.assertEquals("200",PortletContainerTestUtil.getString(responseMap,"code"));
  Assert.assertTrue(map.containsKey("processAction"));
}
