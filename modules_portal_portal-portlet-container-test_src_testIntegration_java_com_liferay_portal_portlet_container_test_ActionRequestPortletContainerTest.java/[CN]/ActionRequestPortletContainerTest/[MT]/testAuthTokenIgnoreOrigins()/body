{
  String[] authTokenIgnoreOrigins=ReflectionTestUtil.getAndSetFieldValue(PropsValues.class,"AUTH_TOKEN_IGNORE_ORIGINS",new String[]{SecurityPortletContainerWrapper.class.getName()});
  try {
    AuthTokenWhitelistUtil.resetOriginCSRFWhitelist();
    setUpPortlet(testPortlet,new HashMapDictionary<String,Object>(),TEST_PORTLET_ID);
    HttpServletRequest httpServletRequest=PortletContainerTestUtil.getHttpServletRequest(group,layout);
    PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.ACTION_PHASE);
    Response response=PortletContainerTestUtil.request(portletURL.toString());
    Assert.assertEquals(200,response.getCode());
    Assert.assertTrue(testPortlet.isActionCalled());
  }
  finally {
    ReflectionTestUtil.setFieldValue(PropsValues.class,"AUTH_TOKEN_IGNORE_ORIGINS",authTokenIgnoreOrigins);
    AuthTokenWhitelistUtil.resetOriginCSRFWhitelist();
  }
}
