{
  String[] authTokenIgnorePortlets=ReflectionTestUtil.getAndSetFieldValue(PropsValues.class,"AUTH_TOKEN_IGNORE_PORTLETS",new String[]{TEST_PORTLET_ID});
  try {
    AuthTokenWhitelistUtil.resetPortletCSRFWhitelist();
    setUpPortlet(testPortlet,new HashMapDictionary<String,Object>(),TEST_PORTLET_ID);
    HttpServletRequest httpServletRequest=PortletContainerTestUtil.getHttpServletRequest(group,layout);
    PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.ACTION_PHASE);
    Map<String,List<String>> responseMap=PortletContainerTestUtil.request(portletURL.toString());
    Assert.assertEquals("200",PortletContainerTestUtil.getString(responseMap,"code"));
    Assert.assertTrue(testPortlet.isActionCalled());
  }
  finally {
    ReflectionTestUtil.setFieldValue(PropsValues.class,"AUTH_TOKEN_IGNORE_PORTLETS",authTokenIgnorePortlets);
    AuthTokenWhitelistUtil.resetPortletCSRFWhitelist();
  }
}
