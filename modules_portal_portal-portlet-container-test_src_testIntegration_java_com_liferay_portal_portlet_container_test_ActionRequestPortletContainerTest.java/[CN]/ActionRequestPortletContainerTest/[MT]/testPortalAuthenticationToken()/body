{
  testPortlet=new TestPortlet(map){
    @Override public void serveResource(    ResourceRequest resourceRequest,    ResourceResponse resourceResponse) throws IOException {
      PrintWriter printWriter=resourceResponse.getWriter();
      PortletURL portletURL=resourceResponse.createActionURL();
      String queryString=HttpUtil.getQueryString(portletURL.toString());
      Map<String,String[]> parameterMap=HttpUtil.getParameterMap(queryString);
      String portalAuthenticationToken=MapUtil.getString(parameterMap,"p_auth");
      printWriter.write(portalAuthenticationToken);
    }
  }
;
  setUpPortlet(testPortlet,properties,TEST_PORTLET_ID);
  HttpServletRequest httpServletRequest=PortletContainerTestUtil.getHttpServletRequest(group,layout);
  PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.RESOURCE_PHASE);
  Map<String,List<String>> responseMap=PortletContainerTestUtil.request(portletURL.toString());
  String portalAuthenticationToken=PortletContainerTestUtil.getString(responseMap,"body");
  List<String> cookies=responseMap.get("Set-Cookie");
  map.clear();
  portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.ACTION_PHASE);
  String url=portletURL.toString();
  url=HttpUtil.setParameter(url,"p_auth",portalAuthenticationToken);
  Map<String,List<String>> headers=new HashMap<>();
  headers.put("Cookie",cookies);
  responseMap=PortletContainerTestUtil.request(url,headers);
  Assert.assertEquals("200",PortletContainerTestUtil.getString(responseMap,"code"));
  Assert.assertTrue(map.containsKey("processAction"));
}
