{
  String cmd=ParamUtil.getString(req,Constants.CMD);
  Layout layout=(Layout)req.getAttribute(WebKeys.LAYOUT);
  String companyId=PortalUtil.getCompanyId(req);
  String plid=layout.getPlid();
  String groupId=ParamUtil.getString(req,"groupId");
  if (Validator.isNotNull(groupId)) {
    plid=LayoutImpl.PUBLIC + groupId + ".1";
  }
 else {
    groupId=PortalUtil.getPortletGroupId(req);
  }
  String articleId=ParamUtil.getString(req,"articleId");
  boolean autoArticleId=ParamUtil.getBoolean(req,"autoArticleId");
  double version=ParamUtil.getDouble(req,"version");
  boolean incrementVersion=ParamUtil.getBoolean(req,"incrementVersion");
  String title=ParamUtil.getString(req,"title");
  String description=ParamUtil.getString(req,"description");
  String content=ParamUtil.getString(req,"content");
  String type=ParamUtil.getString(req,"type");
  String structureId=ParamUtil.getString(req,"structureId");
  String templateId=ParamUtil.getString(req,"templateId");
  int displayDateMonth=ParamUtil.getInteger(req,"displayDateMonth");
  int displayDateDay=ParamUtil.getInteger(req,"displayDateDay");
  int displayDateYear=ParamUtil.getInteger(req,"displayDateYear");
  int displayDateHour=ParamUtil.getInteger(req,"displayDateHour");
  int displayDateMinute=ParamUtil.getInteger(req,"displayDateMinute");
  int displayDateAmPm=ParamUtil.getInteger(req,"displayDateAmPm");
  if (displayDateAmPm == Calendar.PM) {
    displayDateHour+=12;
  }
  int expirationDateMonth=ParamUtil.getInteger(req,"expirationDateMonth");
  int expirationDateDay=ParamUtil.getInteger(req,"expirationDateDay");
  int expirationDateYear=ParamUtil.getInteger(req,"expirationDateYear");
  int expirationDateHour=ParamUtil.getInteger(req,"expirationDateHour");
  int expirationDateMinute=ParamUtil.getInteger(req,"expirationDateMinute");
  int expirationDateAmPm=ParamUtil.getInteger(req,"expirationDateAmPm");
  boolean neverExpire=ParamUtil.getBoolean(req,"neverExpire");
  if (expirationDateAmPm == Calendar.PM) {
    expirationDateHour+=12;
  }
  int reviewDateMonth=ParamUtil.getInteger(req,"reviewDateMonth");
  int reviewDateDay=ParamUtil.getInteger(req,"reviewDateDay");
  int reviewDateYear=ParamUtil.getInteger(req,"reviewDateYear");
  int reviewDateHour=ParamUtil.getInteger(req,"reviewDateHour");
  int reviewDateMinute=ParamUtil.getInteger(req,"reviewDateMinute");
  int reviewDateAmPm=ParamUtil.getInteger(req,"reviewDateAmPm");
  boolean neverReview=ParamUtil.getBoolean(req,"neverReview");
  if (reviewDateAmPm == Calendar.PM) {
    reviewDateHour+=12;
  }
  Map images=getImages(PortalUtil.getUploadPortletRequest(req));
  String articleURL=ParamUtil.getString(req,"articleURL");
  String[] communityPermissions=req.getParameterValues("communityPermissions");
  String[] guestPermissions=req.getParameterValues("guestPermissions");
  boolean approve=ParamUtil.getBoolean(req,"approve");
  JournalArticle article=null;
  if (cmd.equals(Constants.ADD)) {
    article=JournalArticleServiceUtil.addArticle(articleId,autoArticleId,plid,title,description,content,type,structureId,templateId,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,images,articleURL,req.getPreferences(),communityPermissions,guestPermissions);
  }
 else {
    if (Validator.isNotNull(structureId)) {
      JournalArticle curArticle=JournalArticleServiceUtil.getArticle(companyId,groupId,articleId,version);
      if (Validator.isNotNull(curArticle.getStructureId())) {
        JournalStructure structure=JournalStructureServiceUtil.getStructure(companyId,groupId,structureId);
        content=JournalUtil.mergeLocaleContent(curArticle.getContent(),content,structure.getXsd());
      }
    }
    article=JournalArticleServiceUtil.updateArticle(companyId,groupId,articleId,version,incrementVersion,title,description,content,type,structureId,templateId,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,images,articleURL,req.getPreferences());
  }
  if (approve) {
    article=JournalArticleServiceUtil.approveArticle(article.getGroupId(),article.getArticleId(),article.getVersion(),layout.getPlid(),articleURL,req.getPreferences());
  }
  JournalUtil.addRecentArticle(req,article);
  String portletResource=ParamUtil.getString(req,"portletResource");
  if (Validator.isNotNull(portletResource)) {
    PortletPreferences prefs=PortletPreferencesFactory.getPortletSetup(req,portletResource,true,true);
    prefs.setValue("article-id",article.getArticleId());
    prefs.store();
    updateContentSearch(req,portletResource,article.getArticleId());
  }
}
