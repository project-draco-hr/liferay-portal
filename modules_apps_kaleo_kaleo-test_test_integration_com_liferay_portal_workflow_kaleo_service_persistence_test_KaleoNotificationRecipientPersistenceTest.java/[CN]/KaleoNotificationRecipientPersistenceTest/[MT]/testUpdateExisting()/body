{
  long pk=RandomTestUtil.nextLong();
  KaleoNotificationRecipient newKaleoNotificationRecipient=_persistence.create(pk);
  newKaleoNotificationRecipient.setGroupId(RandomTestUtil.nextLong());
  newKaleoNotificationRecipient.setCompanyId(RandomTestUtil.nextLong());
  newKaleoNotificationRecipient.setUserId(RandomTestUtil.nextLong());
  newKaleoNotificationRecipient.setUserName(RandomTestUtil.randomString());
  newKaleoNotificationRecipient.setCreateDate(RandomTestUtil.nextDate());
  newKaleoNotificationRecipient.setModifiedDate(RandomTestUtil.nextDate());
  newKaleoNotificationRecipient.setKaleoDefinitionId(RandomTestUtil.nextLong());
  newKaleoNotificationRecipient.setKaleoNotificationId(RandomTestUtil.nextLong());
  newKaleoNotificationRecipient.setRecipientClassName(RandomTestUtil.randomString());
  newKaleoNotificationRecipient.setRecipientClassPK(RandomTestUtil.nextLong());
  newKaleoNotificationRecipient.setRecipientRoleType(RandomTestUtil.nextInt());
  newKaleoNotificationRecipient.setRecipientScript(RandomTestUtil.randomString());
  newKaleoNotificationRecipient.setRecipientScriptLanguage(RandomTestUtil.randomString());
  newKaleoNotificationRecipient.setRecipientScriptRequiredContexts(RandomTestUtil.randomString());
  newKaleoNotificationRecipient.setAddress(RandomTestUtil.randomString());
  newKaleoNotificationRecipient.setNotificationReceptionType(RandomTestUtil.randomString());
  _kaleoNotificationRecipients.add(_persistence.update(newKaleoNotificationRecipient));
  KaleoNotificationRecipient existingKaleoNotificationRecipient=_persistence.findByPrimaryKey(newKaleoNotificationRecipient.getPrimaryKey());
  Assert.assertEquals(existingKaleoNotificationRecipient.getKaleoNotificationRecipientId(),newKaleoNotificationRecipient.getKaleoNotificationRecipientId());
  Assert.assertEquals(existingKaleoNotificationRecipient.getGroupId(),newKaleoNotificationRecipient.getGroupId());
  Assert.assertEquals(existingKaleoNotificationRecipient.getCompanyId(),newKaleoNotificationRecipient.getCompanyId());
  Assert.assertEquals(existingKaleoNotificationRecipient.getUserId(),newKaleoNotificationRecipient.getUserId());
  Assert.assertEquals(existingKaleoNotificationRecipient.getUserName(),newKaleoNotificationRecipient.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoNotificationRecipient.getCreateDate()),Time.getShortTimestamp(newKaleoNotificationRecipient.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoNotificationRecipient.getModifiedDate()),Time.getShortTimestamp(newKaleoNotificationRecipient.getModifiedDate()));
  Assert.assertEquals(existingKaleoNotificationRecipient.getKaleoDefinitionId(),newKaleoNotificationRecipient.getKaleoDefinitionId());
  Assert.assertEquals(existingKaleoNotificationRecipient.getKaleoNotificationId(),newKaleoNotificationRecipient.getKaleoNotificationId());
  Assert.assertEquals(existingKaleoNotificationRecipient.getRecipientClassName(),newKaleoNotificationRecipient.getRecipientClassName());
  Assert.assertEquals(existingKaleoNotificationRecipient.getRecipientClassPK(),newKaleoNotificationRecipient.getRecipientClassPK());
  Assert.assertEquals(existingKaleoNotificationRecipient.getRecipientRoleType(),newKaleoNotificationRecipient.getRecipientRoleType());
  Assert.assertEquals(existingKaleoNotificationRecipient.getRecipientScript(),newKaleoNotificationRecipient.getRecipientScript());
  Assert.assertEquals(existingKaleoNotificationRecipient.getRecipientScriptLanguage(),newKaleoNotificationRecipient.getRecipientScriptLanguage());
  Assert.assertEquals(existingKaleoNotificationRecipient.getRecipientScriptRequiredContexts(),newKaleoNotificationRecipient.getRecipientScriptRequiredContexts());
  Assert.assertEquals(existingKaleoNotificationRecipient.getAddress(),newKaleoNotificationRecipient.getAddress());
  Assert.assertEquals(existingKaleoNotificationRecipient.getNotificationReceptionType(),newKaleoNotificationRecipient.getNotificationReceptionType());
}
