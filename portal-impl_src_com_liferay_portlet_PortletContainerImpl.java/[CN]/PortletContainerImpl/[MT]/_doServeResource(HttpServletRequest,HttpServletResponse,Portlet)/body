{
  HttpServletRequest ownerLayoutRequest=getOwnerLayoutRequestWrapper(request,portlet);
  Layout ownerLayout=(Layout)ownerLayoutRequest.getAttribute(WebKeys.LAYOUT);
  boolean allowAddPortletDefaultResource=PortalUtil.isAllowAddPortletDefaultResource(ownerLayoutRequest,portlet);
  if (!allowAddPortletDefaultResource) {
    String url=null;
    LastPath lastPath=(LastPath)request.getAttribute(WebKeys.LAST_PATH);
    if (lastPath != null) {
      StringBundler sb=new StringBundler(3);
      sb.append(PortalUtil.getPortalURL(request));
      sb.append(lastPath.getContextPath());
      sb.append(lastPath.getPath());
      url=sb.toString();
    }
 else {
      url=String.valueOf(request.getRequestURI());
    }
    response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_NO_CACHE_VALUE);
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    _log.error("Reject serveResource for " + url + " on "+ portlet.getPortletId());
    return;
  }
  WindowState windowState=(WindowState)request.getAttribute(WebKeys.WINDOW_STATE);
  PortletMode portletMode=PortletModeFactory.getPortletMode(ParamUtil.getString(request,"p_p_mode"));
  PortletPreferencesIds portletPreferencesIds=PortletPreferencesFactoryUtil.getPortletPreferencesIds(request,portlet.getPortletId());
  PortletPreferences portletPreferences=null;
  if (allowAddPortletDefaultResource) {
    portletPreferences=PortletPreferencesLocalServiceUtil.getPreferences(portletPreferencesIds);
  }
 else {
    portletPreferences=PortletPreferencesLocalServiceUtil.getStrictPreferences(portletPreferencesIds);
  }
  ServletContext servletContext=(ServletContext)request.getAttribute(WebKeys.CTX);
  InvokerPortlet invokerPortlet=PortletInstanceFactoryUtil.create(portlet,servletContext);
  PortletConfig portletConfig=PortletConfigFactoryUtil.create(portlet,servletContext);
  PortletContext portletContext=portletConfig.getPortletContext();
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  PortletDisplay portletDisplay=themeDisplay.getPortletDisplay();
  Layout layout=(Layout)request.getAttribute(WebKeys.LAYOUT);
  String portletPrimaryKey=PortletPermissionUtil.getPrimaryKey(layout.getPlid(),portlet.getPortletId());
  portletDisplay.setId(portlet.getPortletId());
  portletDisplay.setRootPortletId(portlet.getRootPortletId());
  portletDisplay.setInstanceId(portlet.getInstanceId());
  portletDisplay.setResourcePK(portletPrimaryKey);
  portletDisplay.setPortletName(portletConfig.getPortletName());
  portletDisplay.setNamespace(PortalUtil.getPortletNamespace(portlet.getPortletId()));
  WebDAVStorage webDAVStorage=portlet.getWebDAVStorageInstance();
  if (webDAVStorage != null) {
    portletDisplay.setWebDAVEnabled(true);
  }
 else {
    portletDisplay.setWebDAVEnabled(false);
  }
  ResourceRequestImpl resourceRequestImpl=ResourceRequestFactory.create(request,portlet,invokerPortlet,portletContext,windowState,portletMode,portletPreferences,layout.getPlid());
  long companyId=PortalUtil.getCompanyId(request);
  ResourceResponseImpl resourceResponseImpl=ResourceResponseFactory.create(resourceRequestImpl,response,portlet.getPortletId(),companyId);
  resourceRequestImpl.defineObjects(portletConfig,resourceResponseImpl);
  try {
    ServiceContext serviceContext=ServiceContextFactory.getInstance(resourceRequestImpl);
    ServiceContextThreadLocal.pushServiceContext(serviceContext);
    PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
    long scopeGroupId=themeDisplay.getScopeGroupId();
    boolean access=PortletPermissionUtil.hasAccessPermission(permissionChecker,scopeGroupId,ownerLayout,portlet,portletMode);
    if (access) {
      invokerPortlet.serveResource(resourceRequestImpl,resourceResponseImpl);
      resourceResponseImpl.transferHeaders(response);
    }
  }
  finally {
    ServiceContextThreadLocal.popServiceContext();
  }
}
