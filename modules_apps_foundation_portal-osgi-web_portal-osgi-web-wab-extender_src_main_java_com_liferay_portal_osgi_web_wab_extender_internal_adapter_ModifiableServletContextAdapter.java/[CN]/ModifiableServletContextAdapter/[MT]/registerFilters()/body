{
  Map<String,FilterDefinition> filterDefinitions=_webXMLDefinition.getFilterDefinitions();
  for (  FilterRegistrationImpl filterRegistrationImpl : _filterRegistrations.values()) {
    if (filterRegistrationImpl.getInstance() != null) {
      continue;
    }
    String filterClassName=filterRegistrationImpl.getClassName();
    try {
      Class<?> clazz=_bundle.loadClass(filterClassName);
      Class<? extends Filter> filterClass=clazz.asSubclass(Filter.class);
      Filter filter=filterClass.newInstance();
      filterRegistrationImpl.setInstance(filter);
      FilterDefinition filterDefinition=new FilterDefinition();
      filterDefinition.setAsyncSupported(filterRegistrationImpl.isAsyncSupported());
      FilterRegistrationImpl.FilterMapping filterMapping=filterRegistrationImpl.getFilterMapping();
      for (      DispatcherType dispatcherType : filterMapping.getDispatchers()) {
        filterDefinition.addDispatcher(dispatcherType.toString());
      }
      filterDefinition.setFilter(filter);
      filterDefinition.setInitParameters(filterRegistrationImpl.getInitParameters());
      filterDefinition.setName(filterRegistrationImpl.getName());
      filterDefinition.setServletNames(new ArrayList<>(filterRegistrationImpl.getServletNameMappings()));
      filterDefinition.setURLPatterns(new ArrayList<>(filterRegistrationImpl.getUrlPatternMappings()));
      filterDefinitions.put(filterRegistrationImpl.getName(),filterDefinition);
    }
 catch (    Exception e) {
      _logger.log(Logger.LOG_ERROR,"Bundle " + _bundle + " is unable to load filter "+ filterClassName);
    }
  }
}
