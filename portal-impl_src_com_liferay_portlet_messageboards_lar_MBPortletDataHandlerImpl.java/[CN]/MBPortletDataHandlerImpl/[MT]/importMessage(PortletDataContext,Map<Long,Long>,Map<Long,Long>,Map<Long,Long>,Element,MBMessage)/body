{
  long userId=context.getUserId(message.getUserUuid());
  String userName=message.getUserName();
  long categoryId=MapUtil.getLong(categoryPKs,message.getCategoryId(),message.getCategoryId());
  long threadId=MapUtil.getLong(threadPKs,message.getThreadId(),message.getThreadId());
  long parentMessageId=MapUtil.getLong(messagePKs,message.getParentMessageId(),message.getParentMessageId());
  List<ObjectValuePair<String,byte[]>> files=new ArrayList<ObjectValuePair<String,byte[]>>();
  List<String> existingFiles=new ArrayList<String>();
  if (context.getBooleanParameter(_NAMESPACE,"attachments") && message.isAttachments()) {
    List<Element> attachmentEls=messageEl.elements("attachment");
    for (    Element attachmentEl : attachmentEls) {
      String name=attachmentEl.attributeValue("name");
      String binPath=attachmentEl.attributeValue("bin-path");
      byte[] bytes=context.getZipEntryAsByteArray(binPath);
      files.add(new ObjectValuePair<String,byte[]>(name,bytes));
    }
    if (files.size() <= 0) {
      _log.error("Could not find attachments for message " + message.getMessageId());
    }
  }
  String[] tagsEntries=null;
  if (context.getBooleanParameter(_NAMESPACE,"tags")) {
    tagsEntries=context.getTagsEntries(MBMessage.class,message.getMessageId());
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setScopeGroupId(context.getGroupId());
  serviceContext.setTagsEntries(tagsEntries);
  if ((categoryId != MBCategoryImpl.DEFAULT_PARENT_CATEGORY_ID) && (categoryId == message.getCategoryId())) {
    String path=getImportCategoryPath(context,categoryId);
    MBCategory category=(MBCategory)context.getZipEntryAsObject(path);
    importCategory(context,categoryPKs,category);
    categoryId=MapUtil.getLong(categoryPKs,message.getCategoryId(),message.getCategoryId());
  }
  MBMessage existingMessage=null;
  try {
    MBCategoryUtil.findByPrimaryKey(categoryId);
    if (parentMessageId != MBMessageImpl.DEFAULT_PARENT_MESSAGE_ID) {
      MBMessageUtil.findByPrimaryKey(parentMessageId);
      MBThreadUtil.findByPrimaryKey(threadId);
    }
    if (context.getDataStrategy().equals(PortletDataHandlerKeys.DATA_STRATEGY_MIRROR)) {
      try {
        existingMessage=MBMessageFinderUtil.findByUuid_G(message.getUuid(),context.getGroupId());
        MBMessageLocalServiceUtil.updateMessage(userId,existingMessage.getMessageId(),message.getSubject(),message.getBody(),files,existingFiles,message.getPriority(),serviceContext);
      }
 catch (      NoSuchMessageException nsme) {
        existingMessage=MBMessageLocalServiceUtil.addMessage(message.getUuid(),userId,userName,categoryId,threadId,parentMessageId,message.getSubject(),message.getBody(),files,message.getAnonymous(),message.getPriority(),serviceContext);
      }
    }
 else {
      existingMessage=MBMessageLocalServiceUtil.addMessage(userId,userName,categoryId,threadId,parentMessageId,message.getSubject(),message.getBody(),files,message.getAnonymous(),message.getPriority(),serviceContext);
    }
    threadPKs.put(message.getThreadId(),existingMessage.getThreadId());
    messagePKs.put(message.getMessageId(),existingMessage.getMessageId());
    if (context.getBooleanParameter(_NAMESPACE,"ratings")) {
      context.importRatingsEntries(MBMessage.class,message.getMessageId(),existingMessage.getMessageId());
    }
  }
 catch (  NoSuchCategoryException nsce) {
    _log.error("Could not find the parent category for message " + message.getMessageId());
  }
catch (  NoSuchMessageException nsme) {
    _log.error("Could not find the parent message for message " + message.getMessageId());
  }
catch (  NoSuchThreadException nste) {
    _log.error("Could not find the thread for message " + message.getMessageId());
  }
}
