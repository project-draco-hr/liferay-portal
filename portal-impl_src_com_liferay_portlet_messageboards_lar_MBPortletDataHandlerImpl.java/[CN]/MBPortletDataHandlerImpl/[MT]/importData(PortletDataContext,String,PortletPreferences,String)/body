{
  try {
    context.importPermissions("com.liferay.portlet.messageboards",context.getSourceGroupId(),context.getGroupId());
    Document doc=SAXReaderUtil.read(data);
    Element root=doc.getRootElement();
    List<Element> categoryEls=root.element("categories").elements("category");
    Map<Long,Long> categoryPKs=(Map<Long,Long>)context.getNewPrimaryKeysMap(MBCategory.class);
    for (    Element categoryEl : categoryEls) {
      String path=categoryEl.attributeValue("path");
      if (!context.isPathNotProcessed(path)) {
        continue;
      }
      MBCategory category=(MBCategory)context.getZipEntryAsObject(path);
      importCategory(context,categoryPKs,category);
    }
    List<Element> messageEls=root.element("messages").elements("message");
    Map<Long,Long> threadPKs=(Map<Long,Long>)context.getNewPrimaryKeysMap(MBThread.class);
    Map<Long,Long> messagePKs=(Map<Long,Long>)context.getNewPrimaryKeysMap(MBMessage.class);
    for (    Element messageEl : messageEls) {
      String path=messageEl.attributeValue("path");
      if (!context.isPathNotProcessed(path)) {
        continue;
      }
      MBMessage message=(MBMessage)context.getZipEntryAsObject(path);
      importMessage(context,categoryPKs,threadPKs,messagePKs,messageEl,message);
    }
    if (context.getBooleanParameter(_NAMESPACE,"flags")) {
      List<Element> flagEls=root.element("message-flags").elements("flag");
      for (      Element flagEl : flagEls) {
        String path=flagEl.attributeValue("path");
        if (!context.isPathNotProcessed(path)) {
          continue;
        }
        MBMessageFlag flag=(MBMessageFlag)context.getZipEntryAsObject(path);
        importFlag(context,messagePKs,flag);
      }
    }
    if (context.getBooleanParameter(_NAMESPACE,"user-bans")) {
      List<Element> banEls=root.element("user-bans").elements("user-ban");
      for (      Element banEl : banEls) {
        String path=banEl.attributeValue("path");
        if (!context.isPathNotProcessed(path)) {
          continue;
        }
        MBBan ban=(MBBan)context.getZipEntryAsObject(path);
        importBan(context,ban);
      }
    }
    return null;
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
