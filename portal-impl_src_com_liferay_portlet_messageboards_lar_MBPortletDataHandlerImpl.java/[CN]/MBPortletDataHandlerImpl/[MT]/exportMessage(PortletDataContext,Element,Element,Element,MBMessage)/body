{
  if (!portletDataContext.isWithinDateRange(message.getModifiedDate())) {
    return;
  }
  if (message.getStatus() != WorkflowConstants.STATUS_APPROVED) {
    return;
  }
  exportParentCategory(portletDataContext,categoriesElement,message.getCategoryId());
  String path=getMessagePath(portletDataContext,message);
  if (portletDataContext.isPathNotProcessed(path)) {
    Element messageElement=messagesElement.addElement("message");
    message.setPriority(message.getPriority());
    if (portletDataContext.getBooleanParameter(_NAMESPACE,"attachments") && message.isAttachments()) {
      for (      String attachment : message.getAttachmentsFiles()) {
        int pos=attachment.lastIndexOf(CharPool.FORWARD_SLASH);
        String name=attachment.substring(pos + 1);
        String binPath=getMessageAttachementBinPath(portletDataContext,message,name);
        Element attachmentElement=messageElement.addElement("attachment");
        attachmentElement.addAttribute("name",name);
        attachmentElement.addAttribute("bin-path",binPath);
        byte[] bytes=DLStoreUtil.getFileAsBytes(portletDataContext.getCompanyId(),CompanyConstants.SYSTEM,attachment);
        portletDataContext.addZipEntry(binPath,bytes);
      }
      message.setAttachmentsDir(message.getAttachmentsDir());
    }
    if (portletDataContext.getBooleanParameter(_NAMESPACE,"thread-flags")) {
      List<MBThreadFlag> threadFlags=MBThreadFlagUtil.findByThreadId(message.getThreadId());
      for (      MBThreadFlag threadFlag : threadFlags) {
        exportMessageFlag(portletDataContext,messageFlagsElement,threadFlag);
      }
    }
    portletDataContext.addClassedModel(messageElement,path,message,_NAMESPACE);
  }
}
