{
  try {
    XStream xStream=new XStream();
    Document doc=DocumentHelper.createDocument();
    Element root=doc.addElement("message-boards-data");
    root.addAttribute("group-id",String.valueOf(context.getGroupId()));
    List categories=MBCategoryUtil.findByGroupId(context.getGroupId());
    List messages=new ArrayList();
    Iterator itr=categories.iterator();
    while (itr.hasNext()) {
      MBCategory category=(MBCategory)itr.next();
      if (context.addPrimaryKey(MBCategory.class,category.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        category.setUserUuid(category.getUserUuid());
        List categoryMessages=MBMessageUtil.findByCategoryId(category.getCategoryId());
        messages.addAll(categoryMessages);
      }
    }
    String xml=xStream.toXML(categories);
    Element el=root.addElement("message-board-categories");
    Document tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    List flags=new ArrayList();
    itr=messages.iterator();
    while (itr.hasNext()) {
      MBMessage message=(MBMessage)itr.next();
      if (context.addPrimaryKey(MBMessage.class,message.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        message.setUserUuid(message.getUserUuid());
        message.setPriority(message.getPriority());
        if (context.getBooleanParameter(_NAMESPACE,"tags")) {
          context.addTagsEntries(MBMessage.class,message.getPrimaryKeyObj());
        }
        if (context.getBooleanParameter(_NAMESPACE,"attachments") && message.isAttachments()) {
          String[] attachments=message.getAttachmentsFiles();
          for (int i=0; i < attachments.length; i++) {
            String attachment=attachments[i];
            byte[] byteArray=DLServiceUtil.getFile(context.getCompanyId(),CompanyImpl.SYSTEM,attachment);
            context.getZipWriter().addEntry(attachment,byteArray);
          }
          message.setAttachmentsDir(message.getAttachmentsDir());
        }
        if (context.getBooleanParameter(_NAMESPACE,"flags")) {
          List messageFlags=MBMessageFlagUtil.findByMessageId(message.getMessageId());
          flags.addAll(messageFlags);
        }
      }
    }
    xml=xStream.toXML(messages);
    el=root.addElement("message-board-messages");
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    itr=flags.iterator();
    while (itr.hasNext()) {
      MBMessageFlag flag=(MBMessageFlag)itr.next();
      if (context.addPrimaryKey(MBMessageFlag.class,flag.getPrimaryKeyObj())) {
        itr.remove();
      }
 else {
        flag.setUserUuid(flag.getUserUuid());
      }
    }
    xml=xStream.toXML(flags);
    el=root.addElement("message-board-flags");
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    List bans=new ArrayList();
    if (context.getBooleanParameter(_NAMESPACE,"user-bans")) {
      bans=MBBanUtil.findByGroupId(context.getGroupId());
      itr=bans.iterator();
      while (itr.hasNext()) {
        MBBan ban=(MBBan)itr.next();
        if (context.addPrimaryKey(MBBan.class,ban.getPrimaryKeyObj())) {
          itr.remove();
        }
 else {
          ban.setBanUserUuid(ban.getBanUserUuid());
          ban.setUserUuid(ban.getUserUuid());
        }
      }
    }
    xml=xStream.toXML(bans);
    el=root.addElement("message-board-bans");
    tempDoc=PortalUtil.readDocumentFromXML(xml);
    el.content().add(tempDoc.getRootElement().createCopy());
    return doc.asXML();
  }
 catch (  Exception e) {
    throw new PortletDataException(e);
  }
}
