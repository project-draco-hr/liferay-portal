{
  JobDetail jobDetail=jobExecutionContext.getJobDetail();
  JobDataMap jobDataMap=jobDetail.getJobDataMap();
  String destinationName=jobDataMap.getString(SchedulerEngine.DESTINATION_NAME);
  String messageJSON=(String)jobDataMap.get(SchedulerEngine.MESSAGE);
  Message message=null;
  if (messageJSON == null) {
    message=new Message();
  }
 else {
    message=(Message)JSONFactoryUtil.deserialize(messageJSON);
  }
  String lockName=message.getString(SchedulerEngine.EXECUTION_LOCK);
  ReentrantLock executionLock=null;
  if (lockName != null) {
    executionLock=LockRegistry.getLock(lockName,lockName);
    if (executionLock != null) {
      if (executionLock.hasQueuedThreads()) {
        return;
      }
      executionLock.lock();
    }
  }
  try {
    message.put(SchedulerEngine.DESTINATION_NAME,destinationName);
    Scheduler scheduler=jobExecutionContext.getScheduler();
    JobState jobState=(JobState)jobDataMap.get(SchedulerEngine.JOB_STATE);
    if (jobExecutionContext.getNextFireTime() == null) {
      Trigger trigger=jobExecutionContext.getTrigger();
      StorageType storageType=StorageType.valueOf(jobDataMap.getString(SchedulerEngine.STORAGE_TYPE));
      if (storageType.equals(StorageType.PERSISTED)) {
        JobState jobStateClone=updatePersistedJobState(jobState,trigger);
        jobDataMap.put(SchedulerEngine.JOB_STATE,jobStateClone);
        scheduler.addJob(jobDetail,true);
      }
 else {
        message.put(SchedulerEngine.DISABLE,true);
        if (PropsValues.CLUSTER_LINK_ENABLED && storageType.equals(StorageType.MEMORY_CLUSTERED)) {
          notifyClusterMember(trigger.getJobName(),trigger.getGroup(),storageType);
        }
      }
    }
    message.put(SchedulerEngine.JOB_STATE,jobState);
    MessageBusUtil.sendMessage(destinationName,message);
  }
  finally {
    if (executionLock != null) {
      executionLock.unlock();
    }
  }
}
