{
  List<PropertyComment> propertyComments=new ArrayList<>();
  StringBundler sb=new StringBundler();
  boolean previousLineIsPreformatted=false;
  for (  String line : lines) {
    line=StringUtil.trimTrailing(line);
    if (line.startsWith(DOUBLE_INDENT + "#")) {
      break;
    }
    String trimmedLine=line.trim();
    if (trimmedLine.startsWith("# " + INDENT)) {
      if (previousLineIsPreformatted) {
        sb.append(StringUtil.replaceFirst(trimmedLine,"#",StringPool.BLANK));
      }
 else {
        addPropertyComment(propertyComments,sb.toString());
        sb=new StringBundler();
        sb.append(StringUtil.replaceFirst(trimmedLine,"#",StringPool.BLANK));
      }
      sb.append(StringPool.NEW_LINE);
      previousLineIsPreformatted=true;
    }
 else     if (trimmedLine.startsWith("# ")) {
      if (previousLineIsPreformatted) {
        addPropertyComment(propertyComments,sb.toString());
        sb=new StringBundler();
        trimmedLine=StringUtil.replaceFirst(trimmedLine,"#",StringPool.BLANK);
        sb.append(trimmedLine.trim());
      }
 else {
        if (sb.length() > 0) {
          sb.append(StringPool.SPACE);
        }
        line=StringUtil.replaceFirst(line,"#",StringPool.BLANK);
        sb.append(line.trim());
      }
      sb.append(StringPool.NEW_LINE);
      previousLineIsPreformatted=false;
    }
 else     if (trimmedLine.startsWith("#") && (trimmedLine.length() < 2)) {
      addPropertyComment(propertyComments,sb.toString());
      sb=new StringBundler();
    }
 else {
      addPropertyComment(propertyComments,sb.toString());
      break;
    }
  }
  return propertyComments;
}
