{
  boolean isMulticast=clusterRequest.isMulticast();
  List<Address> addresses=null;
  if (isMulticast) {
    addresses=getControlAddresses();
  }
 else {
    Collection<String> clusterNodeIds=clusterRequest.getTargetClusterNodeIds();
    addresses=new ArrayList<Address>(clusterNodeIds.size());
    for (    String clusterNodeId : clusterNodeIds) {
      Address address=getAddress(clusterNodeId);
      addresses.add(address);
    }
  }
  Address localControlAddress=getLocalControlAddress();
  if (clusterRequest.isSkipLocal()) {
    addresses.remove(localControlAddress);
  }
  FutureClusterResponses futureClusterResponses=new FutureClusterResponses(clusterRequest.getUuid(),addresses,this);
  if (!clusterRequest.isFireAndForget()) {
    _executionResultMap.put(clusterRequest.getUuid(),futureClusterResponses);
  }
  for (  Address address : addresses) {
    if (_shortcutLocalMethod && address.equals(localControlAddress)) {
      ClusterNodeResponse clusterNodeResponse=runLocalMethod(clusterRequest.getMethodWrapper());
      clusterNodeResponse.setMulticast(isMulticast);
      clusterNodeResponse.setUuid(clusterRequest.getUuid());
      futureClusterResponses.addClusterNodeResponse(clusterNodeResponse);
    }
    if (!isMulticast) {
      org.jgroups.Address jGroupsAddress=(org.jgroups.Address)address.getRealAddress();
      try {
        _controlChannel.send(jGroupsAddress,null,clusterRequest);
      }
 catch (      ChannelException ce) {
        _log.error("Unable to send unicast message " + clusterRequest,ce);
        throw new SystemException("Unable to send unicast request",ce);
      }
    }
  }
  if (isMulticast) {
    try {
      _controlChannel.send(null,null,clusterRequest);
    }
 catch (    ChannelException ce) {
      _log.error("Unable to send unicast message " + clusterRequest,ce);
      throw new SystemException("Unable to send cluster request",ce);
    }
  }
  return futureClusterResponses;
}
