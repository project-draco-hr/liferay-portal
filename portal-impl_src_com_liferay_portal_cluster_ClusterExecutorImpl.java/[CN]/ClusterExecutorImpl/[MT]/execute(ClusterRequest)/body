{
  if (!isEnabled()) {
    return null;
  }
  Set<String> clusterNodeIds=new HashSet<>();
  if (clusterRequest.isMulticast()) {
    clusterNodeIds=new HashSet<>(_clusterNodeStatusMap.keySet());
    if (clusterRequest.isSkipLocal()) {
      clusterNodeIds.remove(_localClusterNodeStatus.getClusterNodeId());
    }
  }
 else {
    clusterNodeIds.addAll(clusterRequest.getTargetClusterNodeIds());
  }
  FutureClusterResponses futureClusterResponses=new FutureClusterResponses(clusterNodeIds);
  if (!clusterRequest.isFireAndForget()) {
    String uuid=clusterRequest.getUuid();
    _futureClusterResponses.put(uuid,futureClusterResponses);
  }
  if (clusterNodeIds.remove(_localClusterNodeStatus.getClusterNodeId())) {
    ClusterNodeResponse clusterNodeResponse=executeClusterRequest(clusterRequest);
    if (!clusterRequest.isFireAndForget()) {
      futureClusterResponses.addClusterNodeResponse(clusterNodeResponse);
    }
  }
  if (clusterRequest.isMulticast()) {
    _clusterChannel.sendMulticastMessage(clusterRequest);
  }
 else {
    for (    String clusterNodeId : clusterNodeIds) {
      ClusterNodeStatus clusterNodeStatus=_clusterNodeStatusMap.get(clusterNodeId);
      if (clusterNodeStatus == null) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to find cluster node " + clusterNodeId + " while executing "+ clusterRequest);
        }
        continue;
      }
      _clusterChannel.sendUnicastMessage(clusterRequest,clusterNodeStatus.getAddress());
    }
  }
  return futureClusterResponses;
}
