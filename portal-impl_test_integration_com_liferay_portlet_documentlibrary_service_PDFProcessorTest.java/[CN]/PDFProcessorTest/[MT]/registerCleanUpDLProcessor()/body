{
  final AtomicBoolean cleanUp=new AtomicBoolean(false);
  DLProcessor cleanUpDLProcessor=new DLProcessor(){
    @Override public void afterPropertiesSet() throws Exception {
    }
    @Override public void cleanUp(    FileEntry fileEntry){
      cleanUp.set(true);
    }
    @Override public void cleanUp(    FileVersion fileVersion){
      cleanUp.set(true);
    }
    @Override public void copy(    FileVersion sourceFileVersion,    FileVersion destinationFileVersion){
    }
    @Override public void exportGeneratedFiles(    PortletDataContext portletDataContext,    FileEntry fileEntry,    Element fileEntryElement) throws Exception {
    }
    @Override public String getType(){
      return DLProcessorConstants.PDF_PROCESSOR;
    }
    @Override public void importGeneratedFiles(    PortletDataContext portletDataContext,    FileEntry fileEntry,    FileEntry importedFileEntry,    Element fileEntryElement) throws Exception {
    }
    @Override public boolean isSupported(    FileVersion fileVersion){
      return true;
    }
    @Override public boolean isSupported(    String mimeType){
      return true;
    }
    @Override public void trigger(    FileVersion sourceFileVersion,    FileVersion destinationFileVersion){
    }
  }
;
  Registry registry=RegistryUtil.getRegistry();
  HashMap<String,Object> properties=new HashMap<>();
  properties.put("service.ranking",1000);
  _dlProcessorServiceRegistration=registry.registerService(DLProcessor.class,cleanUpDLProcessor,properties);
  return cleanUp;
}
