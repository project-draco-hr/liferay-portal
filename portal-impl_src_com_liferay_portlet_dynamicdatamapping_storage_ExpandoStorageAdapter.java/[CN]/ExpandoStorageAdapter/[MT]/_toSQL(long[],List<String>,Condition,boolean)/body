{
  StringBundler sb=new StringBundler();
  if (count) {
    sb.append("SELECT COUNT(DISTINCT(ExpandoValue.rowId_)) AS ");
    sb.append("COUNT_VALUE ");
  }
 else {
    sb.append("SELECT ExpandoColumn.name, ExpandoColumn.type_, ");
    sb.append("ExpandoValue.rowId_, ExpandoValue.data_, ");
  }
  sb.append("FROM ExpandoValue INNER JOIN ExpandoColumn ON (");
  sb.append("ExpandoColumn.columnId = ExpandoValue.columnId) WHERE ");
  sb.append("ExpandoValue.rowId_ IN (");
  if (condition == null) {
    sb.append(StringUtil.merge(expandoRowIds));
  }
 else {
    sb.append("SELECT DISTINCT (ExpandoValue.rowId_) FROM ");
    sb.append("ExpandoValue INNER JOIN ExpandoColumn ON (");
    sb.append("ExpandoColumn.columnId = ExpandoValue.columnId) WHERE ");
    sb.append("ExpandoValue.rowId_ IN (");
    sb.append(StringUtil.merge(expandoRowIds));
    sb.append(") AND ");
    sb.append(_toSQL(condition));
  }
  sb.append(StringPool.CLOSE_PARENTHESIS);
  if (fieldNames != null && !fieldNames.isEmpty()) {
    sb.append(" AND ExpandoColumn.name IN (");
    for (int i=0; i < fieldNames.size(); i++) {
      String fieldName=fieldNames.get(i);
      sb.append(StringUtil.quote(fieldName));
      if ((i + 1) < fieldNames.size()) {
        sb.append(StringPool.COMMA);
      }
 else {
        sb.append(StringPool.CLOSE_PARENTHESIS);
      }
    }
  }
  sb.append(StringPool.SPACE);
  return sb.toString();
}
