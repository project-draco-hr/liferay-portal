{
  Tuple tuple=null;
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(_TEMP_FILE_NAME_1));
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind("MCF-Word Work File D_1.tmp"));
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(_TEMP_FILE_NAME_1));
  assertCode(HttpServletResponse.SC_CREATED,servicePut(_TEMP_FILE_NAME_1,_testDeltaBytes));
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(_TEMP_META_NAME_1));
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(_TEMP_META_NAME_1));
  assertCode(HttpServletResponse.SC_CREATED,servicePut(_TEMP_META_NAME_1,_testMetaBytes));
  lock(_TEMP_META_NAME_1);
  assertCode(HttpServletResponse.SC_CREATED,servicePut(_TEMP_META_NAME_1,_testMetaBytes,getLock(_TEMP_META_NAME_1)));
  assertCode(WebDAVUtil.SC_MULTI_STATUS,servicePropFind(_TEMP_FILE_NAME_1));
  unlock(_TEMP_META_NAME_1);
  lock(_TEMP_FILE_NAME_1);
  unlock(_TEMP_FILE_NAME_1);
  lock(_TEMP_FILE_NAME_1);
  assertCode(HttpServletResponse.SC_CREATED,servicePut(_TEMP_FILE_NAME_1,_testDeltaBytes,getLock(_TEMP_FILE_NAME_1)));
  assertCode(WebDAVUtil.SC_MULTI_STATUS,servicePropFind(_TEMP_FILE_NAME_1));
  unlock(_TEST_FILE_NAME);
  lock(_TEST_FILE_NAME);
  tuple=serviceGet(_TEST_FILE_NAME);
  assertCode(HttpServletResponse.SC_OK,tuple);
  assertBytes(_testFileBytes,getResponseBody(tuple));
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind("Backup of Test.docx"));
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(_TEMP_FILE_NAME_2));
  unlock(_TEST_FILE_NAME);
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(_TEMP_FILE_NAME_2));
  assertCode(HttpServletResponse.SC_CREATED,serviceCopyOrMove(Method.MOVE,_TEST_FILE_NAME,_TEMP_FILE_NAME_2));
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(_TEMP_META_NAME_2));
  assertCode(HttpServletResponse.SC_CREATED,serviceCopyOrMove(Method.MOVE,_TEST_META_NAME,_TEMP_META_NAME_2));
  for (int i=0; i < 2; i++) {
    lock(_TEMP_FILE_NAME_2);
    tuple=serviceGet(_TEMP_FILE_NAME_2);
    assertCode(HttpServletResponse.SC_OK,tuple);
    assertBytes(_testFileBytes,getResponseBody(tuple));
    unlock(_TEMP_FILE_NAME_2);
  }
  for (int i=0; i < 2; i++) {
    String orig=_TEMP_FILE_NAME_1;
    String dest=_TEST_FILE_NAME;
    if (i == 1) {
      orig=_TEMP_META_NAME_1;
      dest=_TEST_META_NAME;
    }
    assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(dest));
    assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(dest));
    assertCode(HttpServletResponse.SC_CREATED,serviceCopyOrMove(Method.MOVE,orig,dest,getLock(orig)));
    moveLock(orig,dest);
  }
  for (int i=0; i < 2; i++) {
    lock(_TEST_FILE_NAME);
    tuple=serviceGet(_TEST_FILE_NAME);
    assertCode(HttpServletResponse.SC_OK,tuple);
    assertBytes(_testDeltaBytes,getResponseBody(tuple));
    unlock(_TEST_FILE_NAME);
  }
  lock(_TEST_META_NAME);
  tuple=serviceGet(_TEST_META_NAME);
  assertCode(HttpServletResponse.SC_OK,tuple);
  assertBytes(_testMetaBytes,getResponseBody(tuple));
  assertCode(HttpServletResponse.SC_CREATED,servicePut(_TEST_META_NAME,_testMetaBytes,getLock(_TEST_META_NAME)));
  assertCode(WebDAVUtil.SC_MULTI_STATUS,servicePropFind(_TEST_META_NAME));
  unlock(_TEST_META_NAME);
  unlock(_TEMP_FILE_NAME_2);
  assertCode(HttpServletResponse.SC_NO_CONTENT,serviceDelete(_TEMP_FILE_NAME_2));
  assertCode(HttpServletResponse.SC_NO_CONTENT,serviceDelete(_TEMP_META_NAME_2));
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(_TEMP_META_NAME_2));
  assertCode(HttpServletResponse.SC_NOT_FOUND,servicePropFind(_TEMP_FILE_NAME_2));
}
