{
  final AtomicReference<Throwable> exceptionReference1=new AtomicReference<Throwable>();
  Thread thread1=new Thread(){
    @Override public void run(){
      try {
        List<SourceProcessor> sourceProcessors=new ArrayList<SourceProcessor>();
        sourceProcessors.add(CSSSourceProcessor.class.newInstance());
        sourceProcessors.add(FTLSourceProcessor.class.newInstance());
        sourceProcessors.add(JSPSourceProcessor.class.newInstance());
        sourceProcessors.add(JSSourceProcessor.class.newInstance());
        sourceProcessors.add(PropertiesSourceProcessor.class.newInstance());
        sourceProcessors.add(SHSourceProcessor.class.newInstance());
        sourceProcessors.add(SQLSourceProcessor.class.newInstance());
        sourceProcessors.add(TLDSourceProcessor.class.newInstance());
        for (        SourceProcessor sourceProcessor : sourceProcessors) {
          _runSourceProcessor(sourceProcessor);
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
        exceptionReference1.set(t);
      }
    }
  }
;
  final AtomicReference<Throwable> exceptionReference2=new AtomicReference<Throwable>();
  Thread thread2=new Thread(){
    @Override public void run(){
      try {
        List<SourceProcessor> sourceProcessors=new ArrayList<SourceProcessor>();
        sourceProcessors.add(JavaSourceProcessor.class.newInstance());
        sourceProcessors.add(XMLSourceProcessor.class.newInstance());
        for (        SourceProcessor sourceProcessor : sourceProcessors) {
          _runSourceProcessor(sourceProcessor);
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
        exceptionReference2.set(t);
      }
    }
  }
;
  thread1.start();
  thread2.start();
  thread1.join();
  thread2.join();
  Throwable throwable1=exceptionReference1.get();
  Throwable throwable2=exceptionReference2.get();
  if (throwable1 != null) {
    if (throwable2 != null) {
      throwable1.addSuppressed(throwable2);
    }
    throw throwable1;
  }
 else   if (throwable2 != null) {
    throw throwable2;
  }
  if (_throwException) {
    if (!_errorMessages.isEmpty()) {
      throw new Exception(StringUtil.merge(_errorMessages,"\n"));
    }
    if (_firstSourceMismatchException != null) {
      throw _firstSourceMismatchException;
    }
  }
}
