{
  GetMethod getFileMethod=null;
  try {
    String url=ParamUtil.getString(req,"url");
    URL urlObj=new URL(url);
    String recommendedWARName=ParamUtil.getString(req,"remoteDeployWARName");
    String progressId=ParamUtil.getString(req,Constants.PROGRESS_ID);
    String urlString=urlObj.toString();
    HttpClient client=Http.getClient(urlString);
    getFileMethod=new GetMethod(urlString);
    int responseCode=client.executeMethod(client.getHostConfiguration(),getFileMethod);
    if (responseCode != 200) {
      SessionErrors.add(req,"errorResponseFromServer",new Object[]{String.valueOf(responseCode)});
      return;
    }
    long contentLength=getFileMethod.getResponseContentLength();
    String fileName=url.substring(url.lastIndexOf(StringPool.SLASH) + 1);
    String destFileName=_getDestFileName(recommendedWARName,url,fileName);
    ProgressInputStream pis=new ProgressInputStream(req,getFileMethod.getResponseBodyAsStream(),contentLength,progressId);
    String deployDir=PrefsPropsUtil.getString(PropsUtil.AUTO_DEPLOY_DEPLOY_DIR);
    String tmpFilePath=deployDir + StringPool.SLASH + _DOWNLOAD_DIR+ StringPool.SLASH+ destFileName;
    File tmpFile=new File(tmpFilePath);
    if (!tmpFile.getParentFile().exists()) {
      tmpFile.getParentFile().mkdirs();
    }
    FileOutputStream fos=new FileOutputStream(tmpFile);
    try {
      pis.readAll(fos);
      if (_log.isInfoEnabled()) {
        _log.info("Downloaded plugin from " + urlObj + " has "+ pis.getTotalRead()+ " bytes");
      }
    }
  finally {
      pis.clearProgress();
    }
    getFileMethod.releaseConnection();
    if (pis.getTotalRead() > 0) {
      String destination=deployDir + StringPool.SLASH + destFileName;
      File destinationFile=new File(destination);
      boolean moved=FileUtil.move(tmpFile,destinationFile);
      if (!moved) {
        FileUtil.copyFile(tmpFile,destinationFile);
        FileUtil.delete(tmpFile);
      }
      SessionMessages.add(req,"pluginDownloaded");
    }
 else {
      SessionErrors.add(req,UploadException.class.getName());
    }
  }
 catch (  MalformedURLException murle) {
    if (getFileMethod != null) {
      getFileMethod.releaseConnection();
    }
    SessionErrors.add(req,"invalidUrl",murle);
  }
catch (  IOException ioe) {
    if (getFileMethod != null) {
      getFileMethod.releaseConnection();
    }
    SessionErrors.add(req,"errorConnectingToServer",ioe);
  }
}
