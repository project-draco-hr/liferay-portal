{
  String url=ParamUtil.getString(req,"url");
  String preferredWARName=ParamUtil.getString(req,"preferredWARName");
  String progressId=ParamUtil.getString(req,"progressId");
  URL urlObj=new URL(url);
  GetMethod getFileMethod=new GetMethod(urlObj.toString());
  try {
    int responseCode=_client.executeMethod(getFileMethod);
    if (responseCode != 200) {
      SessionErrors.add(req,"errorResponseFromServer",new Object[]{Integer.toString(responseCode)});
      return;
    }
    long contentLength=getFileMethod.getResponseContentLength();
    ProgressInputStream pis=new ProgressInputStream(req,getFileMethod.getResponseBodyAsStream(),contentLength,progressId);
    byte[] bytes;
    try {
      bytes=pis.readAll();
    }
  finally {
      pis.clearProgress();
    }
    getFileMethod.releaseConnection();
    _log.info("Downloaded plugin from " + urlObj + " ("+ bytes.length+ " bytes)");
    String fileName=url.substring(url.lastIndexOf(StringPool.SLASH) + 1);
    String destFileName=null;
    destFileName=_getDestFileName(preferredWARName,url,fileName);
    if ((bytes != null) && (bytes.length > 0)) {
      String destination=PrefsPropsUtil.getString(PropsUtil.AUTO_DEPLOY_DEPLOY_DIR) + StringPool.SLASH + destFileName;
      FileUtil.write(destination,bytes);
    }
 else {
      SessionErrors.add(req,UploadException.class.getName());
    }
  }
 catch (  MalformedURLException mue) {
    getFileMethod.releaseConnection();
    SessionErrors.add(req,"invalidUrl",url);
  }
catch (  IOException ioe) {
    getFileMethod.releaseConnection();
    SessionErrors.add(req,"errorConnectingToServer",ioe);
  }
}
