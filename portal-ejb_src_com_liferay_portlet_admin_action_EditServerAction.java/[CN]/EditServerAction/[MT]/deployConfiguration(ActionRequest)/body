{
  boolean enabled=ParamUtil.getBoolean(req,"enabled");
  String deployDir=ParamUtil.getString(req,"deployDir");
  String destDir=ParamUtil.getString(req,"destDir");
  long interval=ParamUtil.getLong(req,"interval");
  boolean unpackWar=ParamUtil.getBoolean(req,"unpackWar");
  String tomcatLibDir=ParamUtil.getString(req,"tomcatLibDir");
  String pluginRepositories=ParamUtil.getString(req,"pluginRepositories");
  PortletPreferences prefs=PrefsPropsUtil.getPreferences();
  prefs.setValue(PropsUtil.AUTO_DEPLOY_ENABLED,String.valueOf(enabled));
  prefs.setValue(PropsUtil.AUTO_DEPLOY_DEPLOY_DIR,deployDir);
  prefs.setValue(PropsUtil.AUTO_DEPLOY_DEST_DIR,destDir);
  prefs.setValue(PropsUtil.AUTO_DEPLOY_INTERVAL,String.valueOf(interval));
  prefs.setValue(PropsUtil.AUTO_DEPLOY_UNPACK_WAR,String.valueOf(unpackWar));
  if (Validator.isNotNull(tomcatLibDir)) {
    prefs.setValue(PropsUtil.AUTO_DEPLOY_TOMCAT_LIB_DIR,tomcatLibDir);
  }
  String oldPluginRepositories=PrefsPropsUtil.getString(PropsUtil.AUTO_DEPLOY_DEPLOY_DIR);
  prefs.setValue(PropsUtil.PLUGIN_REPOSITORIES,pluginRepositories);
  prefs.store();
  if (!pluginRepositories.equals(oldPluginRepositories)) {
    reloadRepositories(req);
  }
  if (_log.isInfoEnabled()) {
    _log.info("Unregistering auto deploy directories");
  }
  AutoDeployUtil.unregisterDir("defaultAutoDeployDir");
  if (enabled) {
    if (_log.isInfoEnabled()) {
      _log.info("Registering auto deploy directories");
    }
    List autoDeployListeners=new ArrayList();
    autoDeployListeners.add(new AutoDeployLayoutTemplateListener());
    autoDeployListeners.add(new AutoDeployPortletListener());
    autoDeployListeners.add(new AutoDeployThemeListener());
    AutoDeployDir autoDeployDir=new AutoDeployDir("defaultAutoDeployDir",new File(deployDir),new File(destDir),interval,autoDeployListeners);
    AutoDeployUtil.registerDir(autoDeployDir);
  }
 else {
    if (_log.isInfoEnabled()) {
      _log.info("Not registering auto deploy directories");
    }
  }
}
