{
  Class<?> clazz=serviceWrapper.getClass();
  ClassLoader classLoader=clazz.getClassLoader();
  Method method=clazz.getMethod("getWrappedService",new Class<?>[0]);
  Class<?> serviceTypeClass=method.getReturnType();
  Object serviceProxy=PortalBeanLocatorUtil.locate(serviceTypeClass.getName());
  if (!ProxyUtil.isProxyClass(serviceProxy.getClass())) {
    _log.error("Service hooks require Spring to be configured to use " + "JdkDynamicProxy and will not work with CGLIB");
    return null;
  }
  AdvisedSupport advisedSupport=ServiceBeanAopProxy.getAdvisedSupport(serviceProxy);
  TargetSource targetSource=advisedSupport.getTargetSource();
  Object previousService=targetSource.getTarget();
  Class<?> previousServiceClass=previousService.getClass();
  ClassLoader previousServiceClassLoader=previousServiceClass.getClassLoader();
  T proxiedPreviousService=(T)ProxyUtil.newProxyInstance(previousServiceClassLoader,new Class[]{serviceTypeClass},new ClassLoaderBeanHandler(previousService,previousServiceClassLoader));
  serviceWrapper.setWrappedService(proxiedPreviousService);
  return new ServiceBag(classLoader,advisedSupport,serviceTypeClass,serviceWrapper);
}
