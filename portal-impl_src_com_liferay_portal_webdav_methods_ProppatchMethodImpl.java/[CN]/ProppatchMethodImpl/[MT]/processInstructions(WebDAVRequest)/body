{
  try {
    Set<Tuple> newProps=new HashSet<Tuple>();
    HttpServletRequest request=webDavRequest.getHttpServletRequest();
    WebDAVProps webDavProps=getStoredProperties(webDavRequest);
    String xml=new String(FileUtil.getBytes(request.getInputStream()));
    if (Validator.isNull(xml)) {
      return newProps;
    }
    if (_log.isInfoEnabled()) {
      _log.info("Request XML: \n" + XMLFormatter.toString(xml,StringPool.FOUR_SPACES));
    }
    Document doc=SAXReaderUtil.read(xml);
    Element root=doc.getRootElement();
    Iterator<Element> itr=root.elements().iterator();
    while (itr.hasNext()) {
      Element instruction=itr.next();
      List<Element> list=instruction.elements();
      if (list.size() != 1) {
        throw new InvalidRequestException("There should only be one <prop /> per set or remove " + "instruction.");
      }
      Element prop=list.get(0);
      if (!prop.getName().equals("prop") || !prop.getNamespaceURI().equals(WebDAVUtil.DAV_URI.getURI())) {
        throw new InvalidRequestException("Invalid <prop /> element " + prop);
      }
      list=prop.elements();
      if (list.size() != 1) {
        throw new InvalidRequestException("<prop /> should only have one subelement.");
      }
      Element customProp=list.get(0);
      String name=customProp.getName();
      String prefix=customProp.getNamespacePrefix();
      String uri=customProp.getNamespaceURI();
      String text=customProp.getText();
      Namespace namespace=null;
      if (uri.equals(WebDAVUtil.DAV_URI.getURI())) {
        namespace=WebDAVUtil.DAV_URI;
      }
 else       if (Validator.isNull(prefix)) {
        namespace=SAXReaderUtil.createNamespace(uri);
      }
 else {
        namespace=SAXReaderUtil.createNamespace(prefix,uri);
      }
      if (instruction.getName().equals("set")) {
        if (Validator.isNull(text)) {
          webDavProps.addProp(name,prefix,uri);
        }
 else {
          webDavProps.addProp(name,prefix,uri,text);
        }
        newProps.add(new Tuple(customProp.getName(),namespace));
      }
 else       if (instruction.getName().equals("remove")) {
        webDavProps.removeProp(name,prefix,uri);
      }
 else {
        throw new InvalidRequestException("Instead of set/remove instruction, received " + instruction);
      }
    }
    WebDAVPropsLocalServiceUtil.storeWebDAVProps(webDavProps);
    return newProps;
  }
 catch (  LockException le) {
    throw le;
  }
catch (  Exception e) {
    throw new InvalidRequestException(e);
  }
}
