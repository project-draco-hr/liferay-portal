{
  final List<String> fileNames=new ArrayList<>();
  final List<PathMatcher> excludeDirPathMatchers=new ArrayList<>();
  final List<PathMatcher> excludeFilePathMatchers=new ArrayList<>();
  final List<PathMatcher> includeFilePathMatchers=new ArrayList<>();
  FileSystem fileSystem=FileSystems.getDefault();
  for (  String exclude : excludes) {
    if (exclude.endsWith("/**")) {
      exclude=exclude.substring(0,exclude.length() - 3);
      excludeDirPathMatchers.add(fileSystem.getPathMatcher("glob:" + exclude));
    }
 else {
      excludeFilePathMatchers.add(fileSystem.getPathMatcher("glob:" + exclude));
    }
  }
  for (  String include : includes) {
    includeFilePathMatchers.add(fileSystem.getPathMatcher("glob:" + include));
  }
  Files.walkFileTree(Paths.get(baseDir),new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dirPath,    BasicFileAttributes basicFileAttributes){
      if (Files.exists(dirPath.resolve("source_formatter.ignore"))) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      for (      PathMatcher pathMatcher : excludeDirPathMatchers) {
        if (pathMatcher.matches(dirPath)) {
          return FileVisitResult.SKIP_SUBTREE;
        }
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path filePath,    BasicFileAttributes basicFileAttributes){
      for (      PathMatcher pathMatcher : excludeFilePathMatchers) {
        if (pathMatcher.matches(filePath)) {
          return FileVisitResult.CONTINUE;
        }
      }
      for (      PathMatcher pathMatcher : includeFilePathMatchers) {
        if (!pathMatcher.matches(filePath)) {
          continue;
        }
        String fileName=filePath.toString();
        fileNames.add(fileName);
        updateProperties(fileName);
        return FileVisitResult.CONTINUE;
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
  return fileNames;
}
