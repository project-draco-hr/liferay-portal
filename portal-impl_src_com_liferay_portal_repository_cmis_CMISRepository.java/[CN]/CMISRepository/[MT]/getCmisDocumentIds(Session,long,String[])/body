{
  try {
    String folderObjectId=toFolderId(session,folderId);
    StringBundler sb=new StringBundler();
    sb.append("SELECT cmis:objectId FROM cmis:document");
    if ((mimeTypes != null) && (mimeTypes.length > 0)) {
      sb.append(" WHERE cmis:contentStreamMimeType IN (");
      for (int i=0; i < mimeTypes.length; ) {
        sb.append(StringUtil.quote(mimeTypes[i]));
        if (++i < mimeTypes.length) {
          sb.append(", ");
        }
      }
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    if (folderId > 0) {
      if ((mimeTypes != null) && (mimeTypes.length > 0)) {
        sb.append(" AND ");
      }
 else {
        sb.append(" WHERE ");
      }
      sb.append("IN_FOLDER(");
      sb.append(StringUtil.quote(folderObjectId));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    String query=sb.toString();
    if (_log.isDebugEnabled()) {
      _log.debug("Calling query " + query);
    }
    ItemIterable<QueryResult> queryResults=session.query(query,false);
    Iterator<QueryResult> itr=queryResults.iterator();
    List<String> cmisDocumentIds=new ArrayList<String>();
    while (itr.hasNext()) {
      QueryResult queryResult=itr.next();
      String objectId=queryResult.getPropertyValueByQueryName(PropertyIds.OBJECT_ID);
      cmisDocumentIds.add(objectId);
    }
    return cmisDocumentIds;
  }
 catch (  SystemException se) {
    throw se;
  }
catch (  Exception e) {
    throw new RepositoryException(e);
  }
}
