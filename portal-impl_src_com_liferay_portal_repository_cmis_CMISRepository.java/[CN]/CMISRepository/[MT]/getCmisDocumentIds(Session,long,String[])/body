{
  try {
    String objectId=toFolderId(session,folderId);
    StringBundler sb=new StringBundler(64);
    sb.append("SELECT cmis:objectId FROM cmis:document");
    sb.append(StringPool.WHERE);
    boolean conditionExist=false;
    if ((mimeTypes != null) && (mimeTypes.length > 0)) {
      conditionExist=Boolean.TRUE;
      sb.append(" cmis:contentStreamMimeType IN (");
      for (int i=0; i < mimeTypes.length; ) {
        sb.append(StringUtil.quote(mimeTypes[i]));
        if (++i < mimeTypes.length) {
          sb.append(", ");
        }
      }
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    if (folderId > 0) {
      if (conditionExist) {
        sb.append(StringPool.WHERE_AND);
      }
 else {
        conditionExist=Boolean.TRUE;
      }
      sb.append("IN_FOLDER(");
      sb.append(StringUtil.quote(objectId));
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    String query=sb.toString();
    if (!conditionExist) {
      query=query.substring(0,(query.length() - StringPool.WHERE.length()));
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Calling query " + query);
    }
    ItemIterable<QueryResult> queryResults=session.query(query,false);
    Iterator<QueryResult> itr=queryResults.iterator();
    List<String> values=new ArrayList<String>();
    while (itr.hasNext()) {
      QueryResult queryResult=itr.next();
      PropertyData<String> propertyData=queryResult.getPropertyById(PropertyIds.OBJECT_ID);
      values.add(propertyData.getValues().get(0));
    }
    return values;
  }
 catch (  SystemException se) {
    throw se;
  }
catch (  Exception e) {
    throw new RepositoryException(e);
  }
}
