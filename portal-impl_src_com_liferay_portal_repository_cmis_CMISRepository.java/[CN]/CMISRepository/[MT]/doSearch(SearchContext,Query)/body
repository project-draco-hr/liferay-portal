{
  long startTime=System.currentTimeMillis();
  Session session=getSession();
  RepositoryInfo repositoryInfo=session.getRepositoryInfo();
  RepositoryCapabilities repositoryCapabilities=repositoryInfo.getCapabilities();
  QueryConfig queryConfig=searchContext.getQueryConfig();
  CapabilityQuery capabilityQuery=repositoryCapabilities.getQueryCapability();
  queryConfig.setAttribute("capabilityQuery",capabilityQuery.value());
  String queryString=CMISSearchQueryBuilderUtil.buildQuery(searchContext,query);
  if (_log.isDebugEnabled()) {
    _log.debug("CMIS search query: " + queryString);
  }
  ItemIterable<QueryResult> queryResults=session.query(queryString,false);
  int start=searchContext.getStart();
  int end=searchContext.getEnd();
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) {
    start=0;
  }
  int total=0;
  List<com.liferay.portal.kernel.search.Document> documents=new ArrayList<com.liferay.portal.kernel.search.Document>();
  List<String> snippets=new ArrayList<String>();
  List<Float> scores=new ArrayList<Float>();
  for (  QueryResult queryResult : queryResults) {
    total++;
    if (total <= start) {
      continue;
    }
    if ((total > end) && (end != QueryUtil.ALL_POS)) {
      continue;
    }
    com.liferay.portal.kernel.search.Document document=new DocumentImpl();
    String objectId=queryResult.getPropertyValueByQueryName(PropertyIds.OBJECT_ID);
    FileEntry fileEntry=toFileEntry(objectId);
    document.addKeyword(Field.ENTRY_CLASS_NAME,fileEntry.getModelClassName());
    document.addKeyword(Field.ENTRY_CLASS_PK,fileEntry.getFileEntryId());
    document.addKeyword(Field.TITLE,fileEntry.getTitle());
    documents.add(document);
    if (queryConfig.isScoreEnabled()) {
      Object scoreObj=queryResult.getPropertyValueByQueryName("HITS");
      if (scoreObj != null) {
        scores.add(Float.valueOf(scoreObj.toString()));
      }
 else {
        scores.add(1.0f);
      }
    }
 else {
      scores.add(1.0f);
    }
    snippets.add(StringPool.BLANK);
  }
  float searchTime=(float)(System.currentTimeMillis() - startTime) / Time.SECOND;
  Hits hits=new HitsImpl();
  hits.setDocs(documents.toArray(new com.liferay.portal.kernel.search.Document[0]));
  hits.setLength(total);
  hits.setQuery(query);
  hits.setQueryTerms(new String[0]);
  hits.setScores(scores.toArray(new Float[0]));
  hits.setSearchTime(searchTime);
  hits.setSnippets(snippets.toArray(new String[0]));
  hits.setStart(startTime);
  return hits;
}
