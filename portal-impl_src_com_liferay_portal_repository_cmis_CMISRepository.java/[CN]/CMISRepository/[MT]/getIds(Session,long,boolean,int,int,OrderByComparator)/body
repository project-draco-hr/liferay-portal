{
  try {
    ObjectId objectId=toFolderId(session,folderId);
    StringBundler sb=new StringBundler(6);
    sb.append("SELECT cmis:objectId FROM ");
    if (fileEntries) {
      sb.append("cmis:document ");
    }
 else {
      sb.append("cmis:folder ");
    }
    sb.append("WHERE IN_FOLDER('");
    sb.append(objectId.getId());
    sb.append("') ORDER BY ");
    if (obc != null) {
      if (obc instanceof FileEntryModifiedDateComparator) {
        if (obc.isAscending()) {
          sb.append("cmis:lastModificationDate ASC");
        }
 else {
          sb.append("cmis:lastModificationDate DESC");
        }
      }
 else       if (obc instanceof FileEntryReadCountComparator) {
      }
 else       if (obc instanceof FileEntryTitleComparator) {
        if (!obc.isAscending()) {
          sb.append("cmis:name DESC");
        }
      }
    }
    if (sb.index() == 5) {
      sb.append("cmis:name ASC");
    }
    ItemIterable<QueryResult> queryResults=session.query(sb.toString(),false);
    List<String> ids=new ArrayList<String>();
    Iterator<QueryResult> itr=queryResults.iterator();
    while (itr.hasNext()) {
      QueryResult queryResult=itr.next();
      PropertyData<String> propertyData=queryResult.getPropertyById(PropertyIds.OBJECT_ID);
      ids.add(propertyData.getValues().get(0));
    }
    return ListUtil.subList(ids,start,end);
  }
 catch (  SystemException se) {
    throw se;
  }
catch (  Exception e) {
    throw new RepositoryException(e);
  }
}
