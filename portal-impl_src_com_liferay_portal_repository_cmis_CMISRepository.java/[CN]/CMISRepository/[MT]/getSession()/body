{
  String login=PrincipalThreadLocal.getName();
  String password=PrincipalThreadLocal.getPassword();
  try {
    String authType=CompanyLocalServiceUtil.getCompany(CompanyThreadLocal.getCompanyId()).getAuthType();
    if (!authType.equals(CompanyConstants.AUTH_TYPE_ID)) {
      User user=UserLocalServiceUtil.getUser(GetterUtil.getLong(login));
      if (authType.equals(CompanyConstants.AUTH_TYPE_EA)) {
        login=user.getEmailAddress();
      }
 else       if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) {
        login=user.getScreenName();
      }
    }
  }
 catch (  Exception e) {
    throw new RepositoryException(e);
  }
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(SessionParameter.USER,login);
  parameters.put(SessionParameter.PASSWORD,password);
  parameters.put(SessionParameter.LOCALE_ISO3166_COUNTRY,LocaleUtil.getDefault().getCountry());
  parameters.put(SessionParameter.LOCALE_ISO639_LANGUAGE,LocaleUtil.getDefault().getLanguage());
  UnicodeProperties typeSettingsProperties=getTypeSettingsProperties();
  if (typeSettingsProperties.containsKey(ATOMPUB_URL)) {
    parameters.put(SessionParameter.BINDING_TYPE,BindingType.ATOMPUB.value());
    putParameter(parameters,SessionParameter.ATOMPUB_URL,ATOMPUB_URL);
  }
 else {
    parameters.put(SessionParameter.BINDING_TYPE,BindingType.WEBSERVICES.value());
    putParameter(parameters,SessionParameter.WEBSERVICES_ACL_SERVICE,WEBSERVICES_ACL_SERVICE);
    putParameter(parameters,SessionParameter.WEBSERVICES_DISCOVERY_SERVICE,WEBSERVICES_DISCOVERY_SERVICE);
    putParameter(parameters,SessionParameter.WEBSERVICES_MULTIFILING_SERVICE,WEBSERVICES_MULTIFILING_SERVICE);
    putParameter(parameters,SessionParameter.WEBSERVICES_NAVIGATION_SERVICE,WEBSERVICES_NAVIGATION_SERVICE);
    putParameter(parameters,SessionParameter.WEBSERVICES_OBJECT_SERVICE,WEBSERVICES_OBJECT_SERVICE);
    putParameter(parameters,SessionParameter.WEBSERVICES_POLICY_SERVICE,WEBSERVICES_POLICY_SERVICE);
    putParameter(parameters,SessionParameter.WEBSERVICES_RELATIONSHIP_SERVICE,WEBSERVICES_RELATIONSHIP_SERVICE);
    putParameter(parameters,SessionParameter.WEBSERVICES_REPOSITORY_SERVICE,WEBSERVICES_REPOSITORY_SERVICE);
    putParameter(parameters,SessionParameter.WEBSERVICES_VERSIONING_SERVICE,WEBSERVICES_VERSIONING_SERVICE);
  }
  if (!typeSettingsProperties.containsKey(REPOSITORY_ID)) {
    org.apache.chemistry.opencmis.client.api.Repository cmisRepository=_sessionFactory.getRepositories(parameters).get(0);
    typeSettingsProperties.setProperty(REPOSITORY_ID,cmisRepository.getId());
    try {
      Repository repository=RepositoryUtil.findByPrimaryKey(getRepositoryId());
      repository.setTypeSettingsProperties(typeSettingsProperties);
      RepositoryUtil.update(repository,false);
    }
 catch (    Exception e) {
      throw new RepositoryException(e);
    }
  }
  putParameter(parameters,SessionParameter.REPOSITORY_ID,REPOSITORY_ID);
  return _sessionFactory.createSession(parameters);
}
