{
  orderId=StringUtil.upperCase(orderId);
  List list=new ArrayList();
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    String sql=CustomSQLUtil.get(FIND_BY_O_G_C_U_PPPS);
    if (Validator.isNull(ppPaymentStatus)) {
      sql=StringUtil.replace(sql,"ppPaymentStatus = ?","ppPaymentStatus != ?");
      ppPaymentStatus=ShoppingOrder.STATUS_LATEST;
    }
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    sql=CustomSQLUtil.replaceOrderBy(sql,obc);
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("ShoppingOrder",ShoppingOrderHBM.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    qPos.add(companyId);
    qPos.add(orderId);
    qPos.add(orderId);
    qPos.add(userId);
    qPos.add(userId);
    qPos.add(billingFirstName);
    qPos.add(billingFirstName);
    qPos.add(billingLastName);
    qPos.add(billingLastName);
    qPos.add(billingEmailAddress);
    qPos.add(billingEmailAddress);
    qPos.add(shippingFirstName);
    qPos.add(shippingFirstName);
    qPos.add(shippingLastName);
    qPos.add(shippingLastName);
    qPos.add(shippingEmailAddress);
    qPos.add(shippingEmailAddress);
    qPos.add(ppPaymentStatus);
    Iterator itr=QueryUtil.iterate(q,HibernateUtil.getDialect(),begin,end);
    while (itr.hasNext()) {
      ShoppingOrderHBM orderHBM=(ShoppingOrderHBM)itr.next();
      ShoppingOrder order=ShoppingOrderHBMUtil.model(orderHBM);
      list.add(order);
    }
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
  return list;
}
