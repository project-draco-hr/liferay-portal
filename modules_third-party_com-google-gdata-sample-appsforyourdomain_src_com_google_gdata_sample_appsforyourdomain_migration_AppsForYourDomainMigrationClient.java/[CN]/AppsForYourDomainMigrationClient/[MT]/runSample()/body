{
  List<String> labels=new ArrayList<String>();
  labels.add(MIGRATED_LABEL);
  List<MailItemProperty> properties=new ArrayList<MailItemProperty>();
  properties.add(MailItemProperty.UNREAD);
  properties.add(MailItemProperty.INBOX);
  MailItemEntry[] entries=new MailItemEntry[ITEMS_TO_BATCH];
  for (int i=0; i < entries.length; i++) {
    entries[i]=setupMailItem(rfcTxt,properties,labels);
  }
  LOGGER.log(Level.INFO,"Inserting " + Integer.toString(ITEMS_TO_BATCH) + " mail items in a batch.");
  try {
    MailItemFeed feed=batchInsertMailItems(entries);
    int failedInsertions=0, successfulInsertions=0;
    for (    MailItemEntry returnedEntry : feed.getEntries()) {
      if (BatchUtils.isFailure(returnedEntry)) {
        BatchStatus status=BatchUtils.getBatchStatus(returnedEntry);
        LOGGER.log(Level.SEVERE,"Entry " + BatchUtils.getBatchId(returnedEntry) + " failed insertion: "+ status.getCode()+ " "+ status.getReason());
        failedInsertions++;
      }
 else {
        successfulInsertions++;
      }
    }
    LOGGER.log(Level.INFO,"Batch insertion: " + Integer.toString(successfulInsertions) + " succeeded, "+ Integer.toString(failedInsertions)+ " failed.");
  }
 catch (  IOException e) {
    LOGGER.log(Level.SEVERE,"Caught IOException: " + e.toString());
    e.printStackTrace();
  }
catch (  ServiceException e) {
    LOGGER.log(Level.SEVERE,"Caught ServiceException: " + e.toString());
    e.printStackTrace();
  }
}
