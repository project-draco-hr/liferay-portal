{
  User user=userPersistence.findByPrimaryKey(userId);
  long pageId=0;
  if (oldPage.isApproved()) {
    pageId=counterLocalService.increment();
  }
 else {
    pageId=oldPage.getPageId();
  }
  content=SanitizerUtil.sanitize(user.getCompanyId(),oldPage.getGroupId(),userId,WikiPage.class.getName(),pageId,"text/" + format,content);
  long nodeId=oldPage.getNodeId();
  if (newNodeId != 0) {
    nodeId=newNodeId;
  }
  validate(nodeId,content,format);
  serviceContext.validateModifiedDate(oldPage,PageVersionException.class);
  long resourcePrimKey=wikiPageResourceLocalService.getPageResourcePrimKey(oldPage.getGroupId(),oldPage.getNodeId(),oldPage.getTitle());
  Date now=new Date();
  WikiPage page=oldPage;
  double newVersion=oldPage.getVersion();
  if (oldPage.isApproved()) {
    newVersion=MathUtil.format(oldPage.getVersion() + 0.1,1,1);
    page=wikiPagePersistence.create(pageId);
    page.setUuid(serviceContext.getUuid());
  }
  page.setResourcePrimKey(resourcePrimKey);
  page.setGroupId(oldPage.getGroupId());
  page.setCompanyId(user.getCompanyId());
  page.setUserId(user.getUserId());
  page.setUserName(user.getFullName());
  page.setCreateDate(oldPage.getCreateDate());
  page.setNodeId(nodeId);
  page.setTitle(Validator.isNull(newTitle) ? oldPage.getTitle() : newTitle);
  page.setVersion(newVersion);
  page.setMinorEdit(minorEdit);
  page.setContent(content);
  if (oldPage.isPending()) {
    page.setStatus(oldPage.getStatus());
  }
 else {
    page.setStatus(WorkflowConstants.STATUS_DRAFT);
  }
  page.setSummary(summary);
  page.setFormat(format);
  if (Validator.isNotNull(parentTitle)) {
    page.setParentTitle(parentTitle);
  }
  if (Validator.isNotNull(redirectTitle)) {
    page.setRedirectTitle(redirectTitle);
  }
  ExpandoBridgeUtil.setExpandoBridgeAttributes(oldPage.getExpandoBridge(),page.getExpandoBridge(),serviceContext);
  wikiPagePersistence.update(page);
  WikiNode node=wikiNodePersistence.findByPrimaryKey(nodeId);
  node.setLastPostDate(serviceContext.getModifiedDate(now));
  wikiNodePersistence.update(node);
  updateAsset(userId,page,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),serviceContext.getAssetLinkEntryIds());
  WikiGroupServiceOverriddenConfiguration wikiGroupServiceOverriddenConfiguration=configurationFactory.getConfiguration(WikiGroupServiceOverriddenConfiguration.class,new GroupServiceSettingsLocator(node.getGroupId(),WikiConstants.SERVICE_NAME));
  if (!page.isMinorEdit() || wikiGroupServiceOverriddenConfiguration.pageMinorEditAddSocialActivity()) {
    if (oldPage.getVersion() == newVersion) {
      Date createDate=new Date(now.getTime() + 1);
      SocialActivityManagerUtil.updateLastSocialActivity(serviceContext.getUserId(),page,WikiActivityKeys.UPDATE_PAGE,createDate);
    }
 else {
      JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
      extraDataJSONObject.put("title",page.getTitle());
      extraDataJSONObject.put("version",page.getVersion());
      SocialActivityManagerUtil.addActivity(userId,page,WikiActivityKeys.UPDATE_PAGE,extraDataJSONObject.toString(),0);
    }
  }
  page=startWorkflowInstance(userId,page,serviceContext);
  return page;
}
