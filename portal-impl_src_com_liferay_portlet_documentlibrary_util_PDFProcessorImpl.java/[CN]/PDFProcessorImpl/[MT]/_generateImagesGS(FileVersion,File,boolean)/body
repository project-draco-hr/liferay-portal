{
  String tempFileId=DLUtil.getTempFileId(fileVersion.getFileEntryId(),fileVersion.getVersion());
  List<String> arguments=new ArrayList<>();
  arguments.add("-sDEVICE=png16m");
  if (thumbnail) {
    arguments.add("-sOutputFile=" + getThumbnailTempFilePath(tempFileId));
    arguments.add("-dFirstPage=1");
    arguments.add("-dLastPage=1");
  }
 else {
    arguments.add("-sOutputFile=" + getPreviewTempFilePath(tempFileId,-1));
  }
  arguments.add("-dPDFFitPage");
  arguments.add("-dTextAlphaBits=4");
  arguments.add("-dGraphicsAlphaBits=4");
  arguments.add("-r" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DPI);
  if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH != 0) {
    arguments.add("-dDEVICEWIDTH=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH);
  }
  if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT != 0) {
    arguments.add("-dDEVICEHEIGHT=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT);
  }
  arguments.add(file.getPath());
  Future<?> future=GhostscriptUtil.execute(arguments);
  String processIdentity=String.valueOf(fileVersion.getFileVersionId());
  long waiting=PropsValues.DL_FILE_ENTRY_PREVIEW_GENERATION_TIMEOUT_GHOSTSCRIPT;
  if (_log.isDebugEnabled()) {
    if (thumbnail) {
      _log.debug("Waiting for " + waiting + " seconds to obtain "+ file.getPath()+ " thumbnail generation");
    }
 else {
      _log.debug("Waiting for " + waiting + " seconds to obtain "+ file.getPath()+ " previews generation");
    }
  }
  try {
    future.get(waiting,TimeUnit.SECONDS);
    futures.put(processIdentity,future);
  }
 catch (  TimeoutException te) {
    _log.error(file.getPath() + " generation timeout!");
    boolean cancel=future.cancel(true);
    _log.error("Generation cancelled?: " + cancel);
    throw te;
  }
catch (  Exception e) {
    _log.error("Unexpected error: ",e);
    throw e;
  }
  if (thumbnail) {
    File thumbnailTempFile=getThumbnailTempFile(tempFileId);
    try {
      storeThumbnailImages(fileVersion,thumbnailTempFile);
    }
  finally {
      FileUtil.delete(thumbnailTempFile);
    }
  }
 else {
    int total=getPreviewTempFileCount(fileVersion);
    for (int i=0; i < total; i++) {
      File previewTempFile=getPreviewTempFile(tempFileId,i + 2);
      try {
        addFileToStore(fileVersion.getCompanyId(),PREVIEW_PATH,getPreviewFilePath(fileVersion,i + 1),previewTempFile);
      }
  finally {
        FileUtil.delete(previewTempFile);
      }
    }
  }
}
