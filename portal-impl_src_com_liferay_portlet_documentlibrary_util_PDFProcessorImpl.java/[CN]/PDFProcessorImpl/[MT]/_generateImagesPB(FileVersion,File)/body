{
  String tempFileId=DLUtil.getTempFileId(fileVersion.getFileEntryId(),fileVersion.getVersion());
  File thumbnailFile=getThumbnailTempFile(tempFileId);
  int previewFilesCount=0;
  try (PDDocument pdDocument=PDDocument.load(file)){
    previewFilesCount=pdDocument.getNumberOfPages();
  }
   File[] previewFiles=new File[previewFilesCount];
  for (int i=0; i < previewFilesCount; i++) {
    previewFiles[i]=getPreviewTempFile(tempFileId,i);
  }
  boolean generatePreview=_isGeneratePreview(fileVersion);
  boolean generateThumbnail=_isGenerateThumbnail(fileVersion);
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  if (PropsValues.DL_FILE_ENTRY_PREVIEW_FORK_PROCESS_ENABLED) {
    ProcessCallable<String> processCallable=new LiferayPDFBoxProcessCallable(ServerDetector.getServerId(),PropsUtil.get(PropsKeys.LIFERAY_HOME),Log4JUtil.getCustomLogSettings(),file,thumbnailFile,previewFiles,getThumbnailType(fileVersion),getPreviewType(fileVersion),PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DPI,PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT,PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH,generatePreview,generateThumbnail);
    ProcessChannel<String> processChannel=ProcessExecutorUtil.execute(ClassPathUtil.getPortalProcessConfig(),processCallable);
    Future<String> future=processChannel.getProcessNoticeableFuture();
    String processIdentity=String.valueOf(fileVersion.getFileVersionId());
    long waiting=PropsValues.DL_FILE_ENTRY_PREVIEW_GENERATION_TIMEOUT_PDFBOX;
    if (_log.isDebugEnabled()) {
      if (generateThumbnail && generatePreview) {
        _log.debug("Waiting for " + waiting + " seconds to obtain "+ file.getPath()+ " thumbnail and previews "+ "generation");
      }
 else {
        if (generateThumbnail) {
          _log.debug("Waiting for " + waiting + " seconds to obtain "+ file.getPath()+ " thumbnail generation");
        }
        if (generatePreview) {
          _log.debug("Waiting for " + waiting + " seconds to obtain "+ file.getPath()+ " previews generation");
        }
      }
    }
    try {
      future.get(waiting,TimeUnit.SECONDS);
      futures.put(processIdentity,future);
    }
 catch (    TimeoutException te) {
      _log.error(file.getPath() + " generation timeout!");
      boolean cancel=future.cancel(true);
      _log.error("Generation cancelled?: " + cancel);
      throw te;
    }
catch (    Exception e) {
      _log.error("Unexpected error: ",e);
      throw e;
    }
  }
 else {
    LiferayPDFBoxConverter liferayConverter=new LiferayPDFBoxConverter(file,thumbnailFile,previewFiles,getPreviewType(fileVersion),getThumbnailType(fileVersion),PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DPI,PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT,PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH,generatePreview,generateThumbnail);
    liferayConverter.generateImagesPB();
  }
  if (generateThumbnail) {
    try {
      storeThumbnailImages(fileVersion,thumbnailFile);
    }
  finally {
      FileUtil.delete(thumbnailFile);
    }
  }
  if (generatePreview) {
    int index=0;
    for (    File previewFile : previewFiles) {
      try {
        addFileToStore(fileVersion.getCompanyId(),PREVIEW_PATH,getPreviewFilePath(fileVersion,index + 1),previewFile);
      }
  finally {
        FileUtil.delete(previewFile);
      }
      index++;
    }
  }
  if (_log.isInfoEnabled()) {
    if (generateThumbnail && generatePreview) {
      _log.info("PDFBox generated a thumbnail " + "and " + getPreviewFileCount(fileVersion) + " preview pages for "+ fileVersion.getFileVersionId()+ " in "+ stopWatch.getTime()+ " ms");
    }
 else {
      if (generateThumbnail) {
        _log.info("PDFBox generated a thumbnail for " + fileVersion.getFileVersionId() + " in "+ stopWatch.getTime()+ " ms");
      }
      if (generatePreview) {
        _log.info("PDFBox generated " + getPreviewFileCount(fileVersion) + " preview pages for "+ fileVersion.getFileVersionId()+ " in "+ stopWatch.getTime()+ " ms");
      }
    }
  }
}
