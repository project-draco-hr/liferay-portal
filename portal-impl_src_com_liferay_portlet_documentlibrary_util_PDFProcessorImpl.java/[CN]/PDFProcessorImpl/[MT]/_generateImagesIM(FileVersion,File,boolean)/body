{
  String tempFileId=DLUtil.getTempFileId(fileVersion.getFileEntryId(),fileVersion.getVersion());
  IMOperation imOperation=new IMOperation();
  imOperation.alpha("off");
  imOperation.density(PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DPI,PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DPI);
  if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT != 0) {
    imOperation.adaptiveResize(PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH,PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT);
  }
 else {
    imOperation.adaptiveResize(PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH);
  }
  imOperation.depth(PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DEPTH);
  if (thumbnail) {
    imOperation.addImage(file.getPath() + "[0]");
    imOperation.addImage(getThumbnailTempFilePath(tempFileId));
  }
 else {
    imOperation.addImage(file.getPath());
    imOperation.addImage(getPreviewTempFilePath(tempFileId,-1));
  }
  if (PropsValues.DL_FILE_ENTRY_PREVIEW_FORK_PROCESS_ENABLED) {
    ProcessCallable<String> processCallable=new ImageMagickProcessCallable(_globalSearchPath,_resourceLimitsProperties,imOperation.getCmdArgs());
    Future<String> future=ProcessExecutor.execute(ClassPathUtil.getPortalClassPath(),processCallable);
    future.get();
  }
 else {
    LiferayConvertCmd.run(_globalSearchPath,_resourceLimitsProperties,imOperation.getCmdArgs());
  }
  if (thumbnail) {
    File thumbnailTempFile=getThumbnailTempFile(tempFileId);
    try {
      storeThumbnailImages(fileVersion,thumbnailTempFile);
    }
  finally {
      FileUtil.delete(thumbnailTempFile);
    }
  }
 else {
    File singlePagePreviewFile=getPreviewTempFile(tempFileId,-1);
    if (singlePagePreviewFile.exists()) {
      singlePagePreviewFile.renameTo(getPreviewTempFile(tempFileId,1));
    }
    int total=getPreviewTempFileCount(fileVersion);
    for (int i=0; i < total; i++) {
      File previewTempFile=getPreviewTempFile(tempFileId,i + 1);
      try {
        addFileToStore(fileVersion.getCompanyId(),PREVIEW_PATH,getPreviewFilePath(fileVersion,i + 1),previewTempFile);
      }
  finally {
        FileUtil.delete(previewTempFile);
      }
    }
  }
}
