{
  long pk=nextLong();
  SocialRelation newSocialRelation=_persistence.create(pk);
  newSocialRelation.setUuid(randomString());
  newSocialRelation.setCompanyId(nextLong());
  newSocialRelation.setCreateDate(nextLong());
  newSocialRelation.setUserId1(nextLong());
  newSocialRelation.setUserId2(nextLong());
  newSocialRelation.setType(nextInt());
  _persistence.update(newSocialRelation,false);
  SocialRelation existingSocialRelation=_persistence.findByPrimaryKey(newSocialRelation.getPrimaryKey());
  assertEquals(existingSocialRelation.getUuid(),newSocialRelation.getUuid());
  assertEquals(existingSocialRelation.getRelationId(),newSocialRelation.getRelationId());
  assertEquals(existingSocialRelation.getCompanyId(),newSocialRelation.getCompanyId());
  assertEquals(existingSocialRelation.getCreateDate(),newSocialRelation.getCreateDate());
  assertEquals(existingSocialRelation.getUserId1(),newSocialRelation.getUserId1());
  assertEquals(existingSocialRelation.getUserId2(),newSocialRelation.getUserId2());
  assertEquals(existingSocialRelation.getType(),newSocialRelation.getType());
}
