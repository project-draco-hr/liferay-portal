{
  ThemeLoader themeLoader=ThemeLoaderFactory.getDefaultThemeLoader();
  if (themeLoader == null) {
    _log.error("No theme loaders are deployed");
    return null;
  }
  ZipReader zipReader=new ZipReader(new ByteArrayInputStream(themeZip));
  Map<String,byte[]> entries=zipReader.getEntries();
  String lookAndFeelXML=new String(entries.get("liferay-look-and-feel.xml"));
  String themeId=String.valueOf(layoutSet.getGroupId());
  if (layoutSet.isPrivateLayout()) {
    themeId+="-private";
  }
 else {
    themeId+="-public";
  }
  if (PropsValues.THEME_LOADER_NEW_THEME_ID_ON_IMPORT) {
    Date now=new Date();
    themeId+="-" + Time.getShortTimestamp(now);
  }
  String themeName=themeId;
  lookAndFeelXML=StringUtil.replace(lookAndFeelXML,new String[]{"[$GROUP_ID$]","[$THEME_ID$]","[$THEME_NAME$]"},new String[]{String.valueOf(layoutSet.getGroupId()),themeId,themeName});
  FileUtil.deltree(themeLoader.getFileStorage() + "/" + themeId);
  Iterator<Map.Entry<String,byte[]>> itr=entries.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry<String,byte[]> entry=itr.next();
    String key=entry.getKey();
    byte[] value=entry.getValue();
    if (key.equals("liferay-look-and-feel.xml")) {
      value=lookAndFeelXML.getBytes();
    }
    FileUtil.write(themeLoader.getFileStorage() + "/" + themeId+ "/"+ key,value);
  }
  themeLoader.loadThemes();
  CommLink commLink=CommLink.getInstance();
  MethodWrapper methodWrapper=new MethodWrapper(ThemeLoaderFactory.class.getName(),"loadThemes");
  commLink.send(methodWrapper);
  themeId+=PortletImpl.WAR_SEPARATOR + themeLoader.getServletContextName();
  return PortalUtil.getJsSafePortletId(themeId);
}
