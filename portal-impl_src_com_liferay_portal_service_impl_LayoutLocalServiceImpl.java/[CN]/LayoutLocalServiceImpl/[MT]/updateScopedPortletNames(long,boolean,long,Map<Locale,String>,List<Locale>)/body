{
  Layout layout=layoutPersistence.findByG_P_L(groupId,privateLayout,layoutId);
  DynamicQuery portletPreferencesDynamicQuery=DynamicQueryFactoryUtil.forClass(PortletPreferences.class,PortletPreferencesImpl.TABLE_NAME,PACLClassLoaderUtil.getPortalClassLoader());
  Property plidProperty=PropertyFactoryUtil.forName("plid");
  DynamicQuery layoutDynamicQuery=DynamicQueryFactoryUtil.forClass(Layout.class,LayoutImpl.TABLE_NAME,PACLClassLoaderUtil.getPortalClassLoader());
  Projection plidProjection=ProjectionFactoryUtil.property("plid");
  layoutDynamicQuery.setNoColumnAliasProjection(plidProjection);
  Property groupIdProperty=PropertyFactoryUtil.forName("groupId");
  layoutDynamicQuery.add(groupIdProperty.eq(groupId));
  Property privateLayoutProperty=PropertyFactoryUtil.forName("privateLayout");
  layoutDynamicQuery.add(privateLayoutProperty.eq(privateLayout));
  portletPreferencesDynamicQuery.add(plidProperty.in(layoutDynamicQuery));
  Junction junction=RestrictionsFactoryUtil.disjunction();
  List<Portlet> scopablePortlets=portletLocalService.getScopablePortlets();
  for (  Portlet scopablePortlet : scopablePortlets) {
    if (scopablePortlet.isInstanceable()) {
      Criterion criterion=RestrictionsFactoryUtil.like("portletId",scopablePortlet.getPortletId() + PortletConstants.INSTANCE_SEPARATOR + StringPool.PERCENT);
      junction.add(criterion);
    }
 else {
      Criterion criterion=RestrictionsFactoryUtil.eq("portletId",scopablePortlet.getPortletId());
      junction.add(criterion);
    }
  }
  portletPreferencesDynamicQuery.add(junction);
  List<PortletPreferences> portletPreferencesList=portletPreferencesLocalService.dynamicQuery(portletPreferencesDynamicQuery);
  for (  PortletPreferences portletPreferences : portletPreferencesList) {
    if (portletPreferences.getPortletId() == null) {
      continue;
    }
    Layout curLayout=layoutPersistence.findByPrimaryKey(portletPreferences.getPlid());
    javax.portlet.PortletPreferences jxPreferences=PortletPreferencesFactoryUtil.getLayoutPortletSetup(curLayout,portletPreferences.getPortletId());
    String scopeLayoutUuid=GetterUtil.getString(jxPreferences.getValue("lfrScopeLayoutUuid",null));
    if (!scopeLayoutUuid.equals(layout.getUuid())) {
      continue;
    }
    for (    Locale locale : nameMapModifiedLocales) {
      String languageId=LanguageUtil.getLanguageId(locale);
      String portletTitle=PortalUtil.getPortletTitle(PortletConstants.getRootPortletId(portletPreferences.getPortletId()),languageId);
      String newPortletTitle=PortalUtil.getNewPortletTitle(portletTitle,curLayout.getName(languageId),nameMap.get(locale));
      if (newPortletTitle.equals(portletTitle)) {
        continue;
      }
      try {
        jxPreferences.setValue("portletSetupTitle_" + languageId,newPortletTitle);
        jxPreferences.setValue("portletSetupUseCustomTitle",Boolean.TRUE.toString());
        jxPreferences.store();
      }
 catch (      IOException ioe) {
        throw new SystemException(ioe);
      }
catch (      PortletException pe) {
        throw new SystemException(pe);
      }
    }
  }
}
