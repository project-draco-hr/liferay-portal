{
  HttpServletRequest request=portletRequestImpl.getHttpServletRequest();
  HttpServletResponse response=stateAwareResponseImpl.getHttpServletResponse();
  String portletId=portlet.getPortletId();
  ServletContext servletContext=(ServletContext)request.getAttribute(WebKeys.CTX);
  InvokerPortlet invokerPortlet=PortletInstanceFactoryUtil.create(portlet,servletContext);
  PortletConfig portletConfig=PortletConfigFactory.create(portlet,servletContext);
  PortletContext portletContext=portletConfig.getPortletContext();
  WindowState windowState=portletRequestImpl.getWindowState();
  PortletMode portletMode=portletRequestImpl.getPortletMode();
  User user=stateAwareResponseImpl.getUser();
  Layout layout=stateAwareResponseImpl.getLayout();
  PortletPreferences portletPreferences=portletRequestImpl.getPreferencesImpl();
  EventRequestImpl eventRequestImpl=EventRequestFactory.create(request,portlet,invokerPortlet,portletContext,windowState,portletMode,portletPreferences,layout.getPlid());
  eventRequestImpl.setEvent(event);
  EventResponseImpl eventResponseImpl=EventResponseFactory.create(eventRequestImpl,response,portletId,user,layout,windowState,portletMode);
  eventRequestImpl.defineObjects(portletConfig,eventResponseImpl);
  try {
    invokerPortlet.processEvent(eventRequestImpl,eventResponseImpl);
    if (eventResponseImpl.isCalledSetRenderParameter()) {
      Map<String,String[]> renderParameterMap=new HashMap<String,String[]>();
      MapUtil.copy(eventResponseImpl.getRenderParameterMap(),renderParameterMap);
      RenderParametersPool.put(request,layout.getPlid(),portletId,renderParameterMap);
    }
  }
 catch (  UnavailableException ue) {
    throw ue;
  }
catch (  PortletException pe) {
    eventResponseImpl.setWindowState(windowState);
    eventResponseImpl.setPortletMode(portletMode);
  }
  processEvents(eventRequestImpl,eventResponseImpl,portlets);
}
