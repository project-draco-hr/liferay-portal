{
  ThemeDisplay themeDisplay=(ThemeDisplay)req.getAttribute(WebKeys.THEME_DISPLAY);
  Layout layout=themeDisplay.getLayout();
  Boolean layoutDefault=(Boolean)req.getAttribute(WebKeys.LAYOUT_DEFAULT);
  if ((layoutDefault != null) && (layoutDefault.booleanValue())) {
    Layout requestedLayout=(Layout)req.getAttribute(WebKeys.REQUESTED_LAYOUT);
    if (requestedLayout != null) {
      String redirectParam="redirect";
      String authLoginURL=PortalUtil.getCommunityLoginURL(themeDisplay);
      if (Validator.isNull(authLoginURL)) {
        authLoginURL=PropsValues.AUTH_LOGIN_URL;
      }
      if (Validator.isNotNull(PropsValues.AUTH_LOGIN_PORTLET_NAME) && Validator.isNotNull(authLoginURL)) {
        redirectParam=PortalUtil.getPortletNamespace(PropsValues.AUTH_LOGIN_PORTLET_NAME) + redirectParam;
      }
      String url=PortalUtil.getLayoutURL(requestedLayout,themeDisplay);
      String redirect=HttpUtil.addParameter(themeDisplay.getURLSignIn(),redirectParam,url);
      if (_log.isDebugEnabled()) {
        _log.debug("Redirect requested layout to " + redirect);
      }
      res.sendRedirect(redirect);
    }
 else {
      String redirect=PortalUtil.getLayoutURL(layout,themeDisplay);
      if (_log.isDebugEnabled()) {
        _log.debug("Redirect default layout to " + redirect);
      }
      res.sendRedirect(redirect);
    }
    return null;
  }
  long plid=ParamUtil.getLong(req,"p_l_id");
  if (plid > 0) {
    return processLayout(mapping,req,res,plid);
  }
 else {
    try {
      forwardLayout(req);
      return mapping.findForward(ActionConstants.COMMON_FORWARD);
    }
 catch (    Exception e) {
      PortalUtil.sendError(e,req,res);
      return null;
    }
  }
}
