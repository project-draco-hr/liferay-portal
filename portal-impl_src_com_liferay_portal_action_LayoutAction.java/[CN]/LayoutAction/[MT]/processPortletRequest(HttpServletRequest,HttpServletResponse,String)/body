{
  HttpSession session=request.getSession();
  long companyId=PortalUtil.getCompanyId(request);
  User user=PortalUtil.getUser(request);
  Layout layout=(Layout)request.getAttribute(WebKeys.LAYOUT);
  String portletId=ParamUtil.getString(request,"p_p_id");
  if (Validator.isNull(portletId)) {
    return null;
  }
  Portlet portlet=PortletLocalServiceUtil.getPortletById(companyId,portletId);
  if (portlet == null) {
    return null;
  }
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  themeDisplay.setScopeGroupId(PortalUtil.getScopeGroupId(request,portletId));
  ServletContext servletContext=(ServletContext)request.getAttribute(WebKeys.CTX);
  InvokerPortlet invokerPortlet=PortletInstanceFactoryUtil.create(portlet,servletContext);
  if (user != null) {
    InvokerPortletImpl.clearResponse(session,layout.getPrimaryKey(),portletId,LanguageUtil.getLanguageId(request));
  }
  PortletConfig portletConfig=PortletConfigFactoryUtil.create(portlet,servletContext);
  PortletContext portletContext=portletConfig.getPortletContext();
  WindowState windowState=WindowStateFactory.getWindowState(ParamUtil.getString(request,"p_p_state"));
  if (layout.isTypeControlPanel() && ((windowState == null) || windowState.equals(WindowState.NORMAL) || (Validator.isNull(windowState.toString())))) {
    windowState=WindowState.MAXIMIZED;
  }
  PortletMode portletMode=PortletModeFactory.getPortletMode(ParamUtil.getString(request,"p_p_mode"));
  PortletPreferencesIds portletPreferencesIds=PortletPreferencesFactoryUtil.getPortletPreferencesIds(request,portletId);
  PortletPreferences portletPreferences=null;
  if (PortalUtil.isAllowAddPortletDefaultResource(request,portlet)) {
    portletPreferences=PortletPreferencesLocalServiceUtil.getPreferences(portletPreferencesIds);
  }
 else {
    portletPreferences=PortletPreferencesLocalServiceUtil.getStrictPreferences(portletPreferencesIds);
  }
  processPublicRenderParameters(request,layout,portlet);
  if (lifecycle.equals(PortletRequest.ACTION_PHASE)) {
    String contentType=request.getHeader(HttpHeaders.CONTENT_TYPE);
    if (_log.isDebugEnabled()) {
      _log.debug("Content type " + contentType);
    }
    UploadServletRequest uploadServletRequest=null;
    try {
      if ((contentType != null) && (contentType.startsWith(ContentTypes.MULTIPART_FORM_DATA))) {
        PortletConfigImpl invokerPortletConfigImpl=(PortletConfigImpl)invokerPortlet.getPortletConfig();
        if (invokerPortlet.isStrutsPortlet() || ((invokerPortletConfigImpl != null) && (!invokerPortletConfigImpl.isWARFile()))) {
          uploadServletRequest=new UploadServletRequestImpl(request);
          request=uploadServletRequest;
        }
      }
      if (PropsValues.AUTH_TOKEN_CHECK_ENABLED && invokerPortlet.isCheckAuthToken()) {
        AuthTokenUtil.check(request);
      }
      ActionRequestImpl actionRequestImpl=ActionRequestFactory.create(request,portlet,invokerPortlet,portletContext,windowState,portletMode,portletPreferences,layout.getPlid());
      ActionResponseImpl actionResponseImpl=ActionResponseFactory.create(actionRequestImpl,response,portletId,user,layout,windowState,portletMode);
      actionRequestImpl.defineObjects(portletConfig,actionResponseImpl);
      ServiceContext serviceContext=ServiceContextFactory.getInstance(actionRequestImpl);
      ServiceContextThreadLocal.pushServiceContext(serviceContext);
      invokerPortlet.processAction(actionRequestImpl,actionResponseImpl);
      actionResponseImpl.transferHeaders(response);
      RenderParametersPool.put(request,layout.getPlid(),portletId,actionResponseImpl.getRenderParameterMap());
      List<LayoutTypePortlet> layoutTypePortlets=null;
      if (!actionResponseImpl.getEvents().isEmpty()) {
        if (PropsValues.PORTLET_EVENT_DISTRIBUTION_LAYOUT_SET) {
          layoutTypePortlets=getLayoutTypePortlets(layout.getGroupId(),layout.isPrivateLayout());
        }
 else {
          if (layout.isTypePortlet()) {
            LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
            layoutTypePortlets=new ArrayList<LayoutTypePortlet>();
            layoutTypePortlets.add(layoutTypePortlet);
          }
        }
        processEvents(actionRequestImpl,actionResponseImpl,layoutTypePortlets);
        actionRequestImpl.defineObjects(portletConfig,actionResponseImpl);
      }
    }
  finally {
      if (uploadServletRequest != null) {
        uploadServletRequest.cleanUp();
      }
      ServiceContextThreadLocal.popServiceContext();
    }
  }
 else   if (lifecycle.equals(PortletRequest.RENDER_PHASE) || lifecycle.equals(PortletRequest.RESOURCE_PHASE)) {
    PortalUtil.updateWindowState(portletId,user,layout,windowState,request);
    PortalUtil.updatePortletMode(portletId,user,layout,portletMode,request);
  }
  if (lifecycle.equals(PortletRequest.RESOURCE_PHASE)) {
    PortletDisplay portletDisplay=themeDisplay.getPortletDisplay();
    String portletPrimaryKey=PortletPermissionUtil.getPrimaryKey(layout.getPlid(),portletId);
    portletDisplay.setId(portletId);
    portletDisplay.setRootPortletId(portlet.getRootPortletId());
    portletDisplay.setInstanceId(portlet.getInstanceId());
    portletDisplay.setResourcePK(portletPrimaryKey);
    portletDisplay.setPortletName(portletConfig.getPortletName());
    portletDisplay.setNamespace(PortalUtil.getPortletNamespace(portletId));
    WebDAVStorage webDAVStorage=portlet.getWebDAVStorageInstance();
    if (webDAVStorage != null) {
      portletDisplay.setWebDAVEnabled(true);
    }
 else {
      portletDisplay.setWebDAVEnabled(false);
    }
    ResourceRequestImpl resourceRequestImpl=ResourceRequestFactory.create(request,portlet,invokerPortlet,portletContext,windowState,portletMode,portletPreferences,layout.getPlid());
    ResourceResponseImpl resourceResponseImpl=ResourceResponseFactory.create(resourceRequestImpl,response,portletId,companyId);
    resourceRequestImpl.defineObjects(portletConfig,resourceResponseImpl);
    try {
      ServiceContext serviceContext=ServiceContextFactory.getInstance(resourceRequestImpl);
      ServiceContextThreadLocal.pushServiceContext(serviceContext);
      invokerPortlet.serveResource(resourceRequestImpl,resourceResponseImpl);
    }
  finally {
      ServiceContextThreadLocal.popServiceContext();
    }
  }
  return portlet;
}
