{
  Document doc=XMLUtils.newDocument(inputWSDL);
  NodeList elements=doc.getChildNodes();
  if ((elements.getLength() > 0) && elements.item(0).getLocalName().equals("definitions")) {
    elements=elements.item(0).getChildNodes();
    for (int i=0; (i < elements.getLength()) && (wsdlTypesElem == null); i++) {
      Node node=elements.item(i);
      if ((node.getLocalName() != null) && node.getLocalName().equals("types")) {
        wsdlTypesElem=(Element)node;
      }
    }
  }
  if (wsdlTypesElem == null) {
    return;
  }
  wsdlTypesElem=(Element)docHolder.importNode(wsdlTypesElem,true);
  docHolder.appendChild(wsdlTypesElem);
  BaseTypeMapping btm=new BaseTypeMapping(){
    public String getBaseName(    QName qNameIn){
      QName qName=new QName(qNameIn.getNamespaceURI(),qNameIn.getLocalPart());
      Class cls=tm.getClassForQName(qName);
      if (cls == null) {
        return null;
      }
 else {
        return JavaUtils.getTextClassName(cls.getName());
      }
    }
  }
;
  SymbolTable symbolTable=new SymbolTable(btm,true,false,false);
  symbolTable.populate(null,doc);
  processSymTabEntries(symbolTable);
}
