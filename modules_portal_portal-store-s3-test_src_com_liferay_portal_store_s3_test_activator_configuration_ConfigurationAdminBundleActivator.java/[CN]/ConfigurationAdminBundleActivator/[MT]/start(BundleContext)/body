{
  String dlStoreImpl=PropsUtil.get(PropsKeys.DL_STORE_IMPL);
  String s3StoreClassName="com.liferay.portal.store.s3.S3Store";
  if (!dlStoreImpl.equals(s3StoreClassName)) {
    return;
  }
  ServiceReference<ConfigurationAdmin> serviceReference=bundleContext.getServiceReference(ConfigurationAdmin.class);
  try {
    ConfigurationAdmin configurationAdmin=bundleContext.getService(serviceReference);
    _s3Configuration=configurationAdmin.getConfiguration("com.liferay.portal.store.s3.configuration.S3Configuration",null);
    Dictionary<String,Object> properties=new Hashtable<>();
    properties.put("accessKey","");
    properties.put("bucketName","");
    properties.put("httpClientMaxConnections","50");
    properties.put("s3serviceDefaultBucketLocation","US");
    properties.put("s3serviceDefaultStorageClass","STANDARD");
    properties.put("s3serviceS3Endpoint","s3.amazonws.com");
    properties.put("secretKey","");
    properties.put("tempDirCleanUpExpunge","7");
    properties.put("tempDirCleanUpFrequency","100");
    _s3Configuration.update(properties);
    Filter filter=bundleContext.createFilter("(&(objectClass=" + Store.class.getName() + ")(store.type=com.liferay.portal.store.s3.S3Store))");
    ServiceTracker<?,?> serviceTracker=new ServiceTracker<>(bundleContext,filter,null);
    serviceTracker.open();
    Object s3Store=serviceTracker.waitForService(10000);
    serviceTracker.close();
    if (s3Store == null) {
      _s3Configuration.delete();
      throw new IllegalStateException("S3Store was not registered within 10 seconds");
    }
  }
  finally {
    bundleContext.ungetService(serviceReference);
  }
}
