{
  if (_interrupt) {
    Thread currentThread=Thread.currentThread();
    currentThread.interrupt();
  }
  final MockSPI mockSPI=new MockSPI();
  if (_registerBack) {
    final String spiUUID=((RemoteSPI)processCallable).getUUID();
    Thread notifyThread=new Thread(){
      @Override public void run(){
        try {
          SPISynchronousQueueUtil.notifySynchronousQueue(spiUUID,mockSPI);
        }
 catch (        InterruptedException ie) {
          Assert.fail(ie.getMessage());
        }
      }
    }
;
    notifyThread.start();
  }
  if (_throwException) {
    throw new ProcessException("ProcessException");
  }
  DefaultNoticeableFuture<T> defaultNoticeableFuture=new DefaultNoticeableFuture<T>();
  defaultNoticeableFuture.set((T)mockSPI);
  return defaultNoticeableFuture;
}
