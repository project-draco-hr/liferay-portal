{
  if (_interrupt) {
    Thread currentThread=Thread.currentThread();
    currentThread.interrupt();
  }
  final MockSPI mockSPI=new MockSPI();
  if (_registerBack) {
    final String spiUUID=((RemoteSPI)processCallable).getUUID();
    _syncThrowableThread=new SyncThrowableThread<>(new Callable<Void>(){
      @Override public Void call() throws InterruptedException {
        SPISynchronousQueueUtil.notifySynchronousQueue(spiUUID,mockSPI);
        return null;
      }
    }
);
    _syncThrowableThread.start();
  }
  if (_throwException) {
    throw new ProcessException("ProcessException");
  }
  DefaultNoticeableFuture<T> defaultNoticeableFuture=new DefaultNoticeableFuture<>();
  defaultNoticeableFuture.set((T)mockSPI);
  try {
    return new LocalProcessChannel<T>(defaultNoticeableFuture,new ObjectOutputStream(new DummyOutputStream()),new AsyncBroker<Long,Serializable>());
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
}
