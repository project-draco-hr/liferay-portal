{
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(),Level.OFF)){
    try {
      _testSPIProvider.createSPI(_spiConfiguration);
    }
 catch (    PortalResiliencyException pre) {
      Assert.assertEquals("SPI synchronous queue waiting timeout. Forcibly " + "cancelled SPI process launch.",pre.getMessage());
      Assert.assertNull(pre.getCause());
    }
    _mockProcessExecutor.setRegisterBack(true);
    SPI spi=_testSPIProvider.createSPI(_spiConfiguration);
    Assert.assertSame(RemoteSPIProxy.class,spi.getClass());
    try {
      _testSPIProvider.createSPI(_spiConfiguration);
    }
 catch (    PortalResiliencyException pre) {
      Assert.assertEquals("Unable to register SPI " + spi + ". Forcibly cancelled SPI process launch.",pre.getMessage());
      Assert.assertNull(pre.getCause());
    }
    _mockProcessExecutor.setInterrupt(true);
    _mockProcessExecutor.setRegisterBack(false);
    try {
      _testSPIProvider.createSPI(_spiConfiguration);
    }
 catch (    PortalResiliencyException pre) {
      Assert.assertEquals("Interrupted on waiting SPI process, registering back " + "RMI stub",pre.getMessage());
      Throwable throwable=pre.getCause();
      Assert.assertSame(InterruptedException.class,throwable.getClass());
    }
    _mockProcessExecutor.setInterrupt(false);
    _mockProcessExecutor.setRegisterBack(false);
    _mockProcessExecutor.setThrowException(true);
    try {
      _testSPIProvider.createSPI(_spiConfiguration);
    }
 catch (    PortalResiliencyException pre) {
      Assert.assertEquals("Unable to launch SPI process",pre.getMessage());
      Throwable throwable=pre.getCause();
      Assert.assertSame(ProcessException.class,throwable.getClass());
      Assert.assertEquals("ProcessException",throwable.getMessage());
    }
  }
 }
