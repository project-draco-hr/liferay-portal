{
  boolean track=false;
  Enumeration<URL> enumeration=bundle.findEntries("/META-INF","taglib-mappings.properties",true);
  Set<String> trackedKeySet=new HashSet<>();
  if (enumeration != null) {
    while (enumeration.hasMoreElements()) {
      URL url=enumeration.nextElement();
      try (InputStream inputStream=url.openStream()){
        Properties properties=PropertiesUtil.load(inputStream,StringPool.UTF8);
        Map<String,String> map=PropertiesUtil.toMap(properties);
        _taglibMappings.putAll(map);
        trackedKeySet.addAll(map.keySet());
        track=true;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  }
  BundleWiring bundleWiring=bundle.adapt(BundleWiring.class);
  List<BundleCapability> bundleCapabilities=bundleWiring.getCapabilities("osgi.extender");
  for (  BundleCapability bundleCapability : bundleCapabilities) {
    Map<String,Object> attributes=bundleCapability.getAttributes();
    Object value=attributes.get("osgi.extender");
    if (value.equals("jsp.taglib")) {
      Bundle[] bundles=ArrayUtil.append(_freeMarkerBundleClassloader.getBundles(),bundle);
      _freeMarkerBundleClassloader=new FreeMarkerBundleClassloader(bundles);
      track=true;
      break;
    }
  }
  if (track) {
    return trackedKeySet;
  }
  return null;
}
