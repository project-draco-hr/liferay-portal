{
  if (throwable == null) {
    if (Validator.isNotNull(message)) {
      log.error(message);
      return;
    }
    throw new IllegalArgumentException("Throwable or message must be set");
  }
  Throwable causeThrowable=throwable;
  while (causeThrowable.getCause() != null) {
    causeThrowable=causeThrowable.getCause();
  }
  StackTraceElement[] stackTraceElements=causeThrowable.getStackTrace();
  if (stackTraceElements.length <= STACK_TRACE_LENGTH) {
    if (Validator.isNotNull(message)) {
      log.error(message,causeThrowable);
    }
 else {
      log.error(causeThrowable);
    }
    return;
  }
  int count=0;
  List<StackTraceElement> stackTraceElementsList=new ArrayList<>();
  for (  StackTraceElement stackTraceElement : stackTraceElements) {
    String className=stackTraceElement.getClassName();
    boolean addElement=true;
    if (REMOVE_UNKNOWN_SOURCE && (stackTraceElement.getLineNumber() < 0)) {
      addElement=false;
    }
    if (className.startsWith("$") || className.startsWith("java.lang.reflect.") || className.startsWith("org.springframework.")|| className.startsWith("sun.reflect.")) {
      addElement=false;
    }
    if (addElement) {
      stackTraceElementsList.add(stackTraceElement);
      count++;
    }
    if (count >= STACK_TRACE_LENGTH) {
      break;
    }
  }
  stackTraceElements=stackTraceElementsList.toArray(new StackTraceElement[stackTraceElementsList.size()]);
  causeThrowable.setStackTrace(stackTraceElements);
  if (Validator.isNotNull(message)) {
    log.error(message,causeThrowable);
  }
 else {
    log.error(causeThrowable);
  }
}
