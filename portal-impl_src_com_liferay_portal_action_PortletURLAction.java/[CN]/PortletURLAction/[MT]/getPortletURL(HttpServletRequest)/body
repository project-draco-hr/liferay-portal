{
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  String cacheability=ParamUtil.getString(request,"cacheability");
  boolean copyCurrentRenderParameters=ParamUtil.getBoolean(request,"copyCurrentRenderParameters");
  long doAsUserId=ParamUtil.getLong(request,"doAsUserId");
  String doAsUserLanguageId=ParamUtil.getString(request,"doAsUserLanguageId");
  boolean encrypt=ParamUtil.getBoolean(request,"encrypt");
  boolean escapeXml=ParamUtil.getBoolean(request,"escapeXml");
  String lifecycle=ParamUtil.getString(request,"lifecycle");
  String name=ParamUtil.getString(request,"name");
  boolean portletConfiguration=ParamUtil.getBoolean(request,"portletConfiguration");
  String portletId=ParamUtil.getString(request,"portletId");
  String portletMode=ParamUtil.getString(request,"portletMode");
  String resourceId=ParamUtil.getString(request,"resourceId");
  String returnToFullPageURL=ParamUtil.getString(request,"returnToFullPageURL");
  boolean secure=ParamUtil.getBoolean(request,"secure");
  String windowState=ParamUtil.getString(request,"windowState");
  LiferayPortletURL liferayPortletURL=PortletURLFactoryUtil.create(request,portletId,themeDisplay.getPlid(),lifecycle);
  if (Validator.isNotNull(cacheability)) {
    liferayPortletURL.setCacheability(cacheability);
  }
  liferayPortletURL.setCopyCurrentRenderParameters(copyCurrentRenderParameters);
  if (doAsUserId > 0) {
    liferayPortletURL.setDoAsUserId(doAsUserId);
  }
  if (Validator.isNotNull(doAsUserLanguageId)) {
    liferayPortletURL.setDoAsUserLanguageId(doAsUserLanguageId);
  }
  liferayPortletURL.setEncrypt(encrypt);
  liferayPortletURL.setEscapeXml(escapeXml);
  if (lifecycle.equals(PortletRequest.ACTION_PHASE) && Validator.isNotNull(name)) {
    liferayPortletURL.setParameter(ActionRequest.ACTION_NAME,name);
  }
  liferayPortletURL.setPortletId(portletId);
  if (portletConfiguration) {
    String portletResource=ParamUtil.getString(request,"portletResource");
    String previewWidth=ParamUtil.getString(request,"previewWidth");
    liferayPortletURL.setParameter("struts_action","/portlet_configuration/edit_configuration");
    liferayPortletURL.setParameter("returnToFullPageURL",returnToFullPageURL);
    liferayPortletURL.setParameter("portletResource",portletResource);
    liferayPortletURL.setParameter("previewWidth",previewWidth);
  }
  if (Validator.isNotNull(portletMode)) {
    liferayPortletURL.setPortletMode(PortletModeFactory.getPortletMode(portletMode));
  }
  if (Validator.isNotNull(resourceId)) {
    liferayPortletURL.setResourceID(resourceId);
  }
  if (!themeDisplay.isStateMaximized()) {
    if (Validator.isNotNull(returnToFullPageURL)) {
      liferayPortletURL.setParameter("returnToFullPageURL",returnToFullPageURL);
    }
  }
  liferayPortletURL.setSecure(secure);
  if (Validator.isNotNull(windowState)) {
    liferayPortletURL.setWindowState(WindowStateFactory.getWindowState(windowState));
  }
  String parameterMapString=ParamUtil.getString(request,"parameterMap");
  if (Validator.isNotNull(parameterMapString)) {
    Map<String,String> parameterMap=(Map<String,String>)JSONFactoryUtil.deserialize(parameterMapString);
    Iterator<String> itr=parameterMap.keySet().iterator();
    while (itr.hasNext()) {
      String paramName=itr.next();
      String paramValue=parameterMap.get(paramName);
      liferayPortletURL.setParameter(paramName,paramValue);
    }
  }
  return liferayPortletURL.toString();
}
