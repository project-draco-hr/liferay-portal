{
  long pk=ServiceTestUtil.nextLong();
  SocialActivityLimit newSocialActivityLimit=_persistence.create(pk);
  newSocialActivityLimit.setGroupId(ServiceTestUtil.nextLong());
  newSocialActivityLimit.setCompanyId(ServiceTestUtil.nextLong());
  newSocialActivityLimit.setUserId(ServiceTestUtil.nextLong());
  newSocialActivityLimit.setClassNameId(ServiceTestUtil.nextLong());
  newSocialActivityLimit.setClassPK(ServiceTestUtil.nextLong());
  newSocialActivityLimit.setActivityType(ServiceTestUtil.nextInt());
  newSocialActivityLimit.setActivityCounterName(ServiceTestUtil.randomString());
  newSocialActivityLimit.setValue(ServiceTestUtil.randomString());
  _persistence.update(newSocialActivityLimit,false);
  SocialActivityLimit existingSocialActivityLimit=_persistence.findByPrimaryKey(newSocialActivityLimit.getPrimaryKey());
  Assert.assertEquals(existingSocialActivityLimit.getActivityLimitId(),newSocialActivityLimit.getActivityLimitId());
  Assert.assertEquals(existingSocialActivityLimit.getGroupId(),newSocialActivityLimit.getGroupId());
  Assert.assertEquals(existingSocialActivityLimit.getCompanyId(),newSocialActivityLimit.getCompanyId());
  Assert.assertEquals(existingSocialActivityLimit.getUserId(),newSocialActivityLimit.getUserId());
  Assert.assertEquals(existingSocialActivityLimit.getClassNameId(),newSocialActivityLimit.getClassNameId());
  Assert.assertEquals(existingSocialActivityLimit.getClassPK(),newSocialActivityLimit.getClassPK());
  Assert.assertEquals(existingSocialActivityLimit.getActivityType(),newSocialActivityLimit.getActivityType());
  Assert.assertEquals(existingSocialActivityLimit.getActivityCounterName(),newSocialActivityLimit.getActivityCounterName());
  Assert.assertEquals(existingSocialActivityLimit.getValue(),newSocialActivityLimit.getValue());
}
