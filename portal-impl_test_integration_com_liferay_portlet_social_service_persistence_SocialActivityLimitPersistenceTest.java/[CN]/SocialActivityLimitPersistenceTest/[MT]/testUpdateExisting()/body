{
  long pk=RandomTestUtil.nextLong();
  SocialActivityLimit newSocialActivityLimit=_persistence.create(pk);
  newSocialActivityLimit.setGroupId(RandomTestUtil.nextLong());
  newSocialActivityLimit.setCompanyId(RandomTestUtil.nextLong());
  newSocialActivityLimit.setUserId(RandomTestUtil.nextLong());
  newSocialActivityLimit.setClassNameId(RandomTestUtil.nextLong());
  newSocialActivityLimit.setClassPK(RandomTestUtil.nextLong());
  newSocialActivityLimit.setActivityType(RandomTestUtil.nextInt());
  newSocialActivityLimit.setActivityCounterName(RandomTestUtil.randomString());
  newSocialActivityLimit.setValue(RandomTestUtil.randomString());
  _models.add(_persistence.update(newSocialActivityLimit));
  SocialActivityLimit existingSocialActivityLimit=_persistence.findByPrimaryKey(newSocialActivityLimit.getPrimaryKey());
  Assert.assertEquals(existingSocialActivityLimit.getActivityLimitId(),newSocialActivityLimit.getActivityLimitId());
  Assert.assertEquals(existingSocialActivityLimit.getGroupId(),newSocialActivityLimit.getGroupId());
  Assert.assertEquals(existingSocialActivityLimit.getCompanyId(),newSocialActivityLimit.getCompanyId());
  Assert.assertEquals(existingSocialActivityLimit.getUserId(),newSocialActivityLimit.getUserId());
  Assert.assertEquals(existingSocialActivityLimit.getClassNameId(),newSocialActivityLimit.getClassNameId());
  Assert.assertEquals(existingSocialActivityLimit.getClassPK(),newSocialActivityLimit.getClassPK());
  Assert.assertEquals(existingSocialActivityLimit.getActivityType(),newSocialActivityLimit.getActivityType());
  Assert.assertEquals(existingSocialActivityLimit.getActivityCounterName(),newSocialActivityLimit.getActivityCounterName());
  Assert.assertEquals(existingSocialActivityLimit.getValue(),newSocialActivityLimit.getValue());
}
