{
  Annotation annotation=ServiceBeanAopCacheManager.getAnnotation(methodInvocation,_annotationClass,_nullAnnotation);
  if (annotation != null) {
    return (T)annotation;
  }
  Method method=methodInvocation.getMethod();
  ServiceBeanMethodInvocation serviceBeanMethodInvocation=(ServiceBeanMethodInvocation)methodInvocation;
  Class<?> targetClass=serviceBeanMethodInvocation.getTargetClass();
  List<Annotation> annotations=AnnotationLocator.locate(method,targetClass);
  Iterator<Annotation> iterator=annotations.iterator();
  while (iterator.hasNext()) {
    Annotation curAnnotation=iterator.next();
    if (!serviceBeanAopCacheManager.isRegisteredAnnotationClass(curAnnotation.annotationType())) {
      iterator.remove();
    }
  }
  ServiceBeanAopCacheManager.putAnnotations(methodInvocation,annotations.toArray(new Annotation[annotations.size()]));
  Set<Class<? extends Annotation>> annotationClasses=new HashSet<>();
  annotation=_nullAnnotation;
  for (  Annotation curAnnotation : annotations) {
    Class<? extends Annotation> annotationClass=curAnnotation.annotationType();
    if (annotationClass == _annotationClass) {
      annotation=curAnnotation;
    }
    annotationClasses.add(annotationClass);
  }
  Map<Class<? extends Annotation>,AnnotationChainableMethodAdvice<?>[]> annotationChainableMethodAdvices=serviceBeanAopCacheManager.getRegisteredAnnotationChainableMethodAdvices();
  for (  Map.Entry<Class<? extends Annotation>,AnnotationChainableMethodAdvice<?>[]> entry : annotationChainableMethodAdvices.entrySet()) {
    Class<? extends Annotation> annotationClass=entry.getKey();
    AnnotationChainableMethodAdvice<?>[] annotationChainableMethodAdvicesArray=entry.getValue();
    if (annotationClasses.contains(annotationClass) || (annotationChainableMethodAdvicesArray == null)) {
      continue;
    }
    for (    AnnotationChainableMethodAdvice<?> annotationChainableMethodAdvice : annotationChainableMethodAdvicesArray) {
      serviceBeanAopCacheManager.removeMethodInterceptor(methodInvocation,annotationChainableMethodAdvice);
    }
  }
  return (T)annotation;
}
