{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long proposalId=ParamUtil.getLong(actionRequest,"proposalId");
  String description=ParamUtil.getString(actionRequest,"description");
  if (proposalId <= 0) {
    long groupId=ParamUtil.getLong(actionRequest,"groupId");
    long reviewUserId=ParamUtil.getLong(actionRequest,"reviewUserId");
    String className=ParamUtil.getString(actionRequest,"className");
    String classPK=ParamUtil.getString(actionRequest,"classPK");
    String name=StringPool.BLANK;
    if (className.equals(Layout.class.getName())) {
      long plid=GetterUtil.getLong(classPK);
      Layout layout=LayoutLocalServiceUtil.getLayout(plid);
      name=layout.getName(themeDisplay.getLocale());
    }
 else     if (className.equals(Portlet.class.getName())) {
      String portletId=classPK.substring(classPK.indexOf(PortletConstants.LAYOUT_SEPARATOR) + PortletConstants.LAYOUT_SEPARATOR.length());
      name=PortalUtil.getPortletTitle(portletId,themeDisplay.getLocale());
    }
    boolean addCommunityPermissions=true;
    boolean addGuestPermissions=true;
    TasksProposalServiceUtil.addProposal(groupId,className,classPK,name,description,reviewUserId,addCommunityPermissions,addGuestPermissions);
  }
 else {
    int dueDateMonth=ParamUtil.getInteger(actionRequest,"dueDateMonth");
    int dueDateDay=ParamUtil.getInteger(actionRequest,"dueDateDay");
    int dueDateYear=ParamUtil.getInteger(actionRequest,"dueDateYear");
    int dueDateHour=ParamUtil.getInteger(actionRequest,"dueDateHour");
    int dueDateMinute=ParamUtil.getInteger(actionRequest,"dueDateMinute");
    TasksProposalServiceUtil.updateProposal(proposalId,description,dueDateMonth,dueDateDay,dueDateYear,dueDateHour,dueDateMinute);
    long groupId=ParamUtil.getLong(actionRequest,"groupId");
    Group group=GroupLocalServiceUtil.getGroup(groupId);
    int workflowStages=group.getWorkflowStages();
    long[][] userIdsPerStage=new long[workflowStages][0];
    for (int i=2; i <= workflowStages; i++) {
      long[] userIds=StringUtil.split(ParamUtil.getString(actionRequest,"reviewUserIds_" + i),0L);
      userIdsPerStage[i - 2]=userIds;
    }
    TasksReviewServiceUtil.updateReviews(proposalId,userIdsPerStage);
  }
}
