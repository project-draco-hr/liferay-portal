{
  Object[] finderArgs=new Object[]{groupId,receiverUserId,status};
  Object result=null;
  if (retrieveFromCache) {
    result=finderCache.getResult(FINDER_PATH_FETCH_BY_G_R_S,finderArgs,this);
  }
  if (result instanceof MemberRequest) {
    MemberRequest memberRequest=(MemberRequest)result;
    if ((groupId != memberRequest.getGroupId()) || (receiverUserId != memberRequest.getReceiverUserId()) || (status != memberRequest.getStatus())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(5);
    query.append(_SQL_SELECT_MEMBERREQUEST_WHERE);
    query.append(_FINDER_COLUMN_G_R_S_GROUPID_2);
    query.append(_FINDER_COLUMN_G_R_S_RECEIVERUSERID_2);
    query.append(_FINDER_COLUMN_G_R_S_STATUS_2);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      qPos.add(receiverUserId);
      qPos.add(status);
      List<MemberRequest> list=q.list();
      if (list.isEmpty()) {
        finderCache.putResult(FINDER_PATH_FETCH_BY_G_R_S,finderArgs,list);
      }
 else {
        if ((list.size() > 1) && _log.isWarnEnabled()) {
          _log.warn("MemberRequestPersistenceImpl.fetchByG_R_S(long, long, int, boolean) with parameters (" + StringUtil.merge(finderArgs) + ") yields a result set with more than 1 result. This violates the logical unique restriction. There is no order guarantee on which result is returned by this finder.");
        }
        MemberRequest memberRequest=list.get(0);
        result=memberRequest;
        cacheResult(memberRequest);
        if ((memberRequest.getGroupId() != groupId) || (memberRequest.getReceiverUserId() != receiverUserId) || (memberRequest.getStatus() != status)) {
          finderCache.putResult(FINDER_PATH_FETCH_BY_G_R_S,finderArgs,memberRequest);
        }
      }
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_FETCH_BY_G_R_S,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (MemberRequest)result;
  }
}
