{
  Object[] finderArgs=new Object[]{key};
  Object result=null;
  if (retrieveFromCache) {
    result=finderCache.getResult(FINDER_PATH_FETCH_BY_KEY,finderArgs,this);
  }
  if (result instanceof MemberRequest) {
    MemberRequest memberRequest=(MemberRequest)result;
    if (!Validator.equals(key,memberRequest.getKey())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(3);
    query.append(_SQL_SELECT_MEMBERREQUEST_WHERE);
    boolean bindKey=false;
    if (key == null) {
      query.append(_FINDER_COLUMN_KEY_KEY_1);
    }
 else     if (key.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_KEY_KEY_3);
    }
 else {
      bindKey=true;
      query.append(_FINDER_COLUMN_KEY_KEY_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindKey) {
        qPos.add(key);
      }
      List<MemberRequest> list=q.list();
      if (list.isEmpty()) {
        finderCache.putResult(FINDER_PATH_FETCH_BY_KEY,finderArgs,list);
      }
 else {
        if ((list.size() > 1) && _log.isWarnEnabled()) {
          _log.warn("MemberRequestPersistenceImpl.fetchByKey(String, boolean) with parameters (" + StringUtil.merge(finderArgs) + ") yields a result set with more than 1 result. This violates the logical unique restriction. There is no order guarantee on which result is returned by this finder.");
        }
        MemberRequest memberRequest=list.get(0);
        result=memberRequest;
        cacheResult(memberRequest);
        if ((memberRequest.getKey() == null) || !memberRequest.getKey().equals(key)) {
          finderCache.putResult(FINDER_PATH_FETCH_BY_KEY,finderArgs,memberRequest);
        }
      }
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_FETCH_BY_KEY,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (MemberRequest)result;
  }
}
