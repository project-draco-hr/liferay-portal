{
  _checkRepositories(repositoryURL);
  Searcher searcher=null;
  try {
    HitsImpl hits=new HitsImpl();
    BooleanQuery contextQuery=new BooleanQuery();
    LuceneUtil.addRequiredTerm(contextQuery,LuceneFields.PORTLET_ID,PluginPackageIndexer.PORTLET_ID);
    BooleanQuery fullQuery=new BooleanQuery();
    fullQuery.add(contextQuery,BooleanClause.Occur.MUST);
    if (Validator.isNotNull(keywords)) {
      BooleanQuery searchQuery=new BooleanQuery();
      LuceneUtil.addTerm(searchQuery,LuceneFields.TITLE,keywords);
      LuceneUtil.addTerm(searchQuery,LuceneFields.CONTENT,keywords);
      fullQuery.add(searchQuery,BooleanClause.Occur.MUST);
    }
    if (Validator.isNotNull(type)) {
      BooleanQuery searchQuery=new BooleanQuery();
      LuceneUtil.addExactTerm(searchQuery,"type",type);
      fullQuery.add(searchQuery,BooleanClause.Occur.MUST);
    }
    if (Validator.isNotNull(tag)) {
      BooleanQuery searchQuery=new BooleanQuery();
      LuceneUtil.addExactTerm(searchQuery,"tag",tag);
      fullQuery.add(searchQuery,BooleanClause.Occur.MUST);
    }
    if (Validator.isNotNull(repositoryURL)) {
      BooleanQuery searchQuery=new BooleanQuery();
      Query query=new TermQuery(new Term("repositoryURL",repositoryURL));
      searchQuery.add(query,BooleanClause.Occur.SHOULD);
      fullQuery.add(searchQuery,BooleanClause.Occur.MUST);
    }
    if (Validator.isNotNull(license)) {
      BooleanQuery searchQuery=new BooleanQuery();
      LuceneUtil.addExactTerm(searchQuery,"license",license);
      fullQuery.add(searchQuery,BooleanClause.Occur.MUST);
    }
    if (Validator.isNotNull(status) && !status.equals("all")) {
      BooleanQuery searchQuery=new BooleanQuery();
      if (status.equals(PluginPackageImpl.STATUS_NOT_INSTALLED_OR_OLDER_VERSION_INSTALLED)) {
        LuceneUtil.addExactTerm(searchQuery,"status",PluginPackageImpl.STATUS_NOT_INSTALLED);
        LuceneUtil.addExactTerm(searchQuery,"status",PluginPackageImpl.STATUS_OLDER_VERSION_INSTALLED);
      }
 else {
        LuceneUtil.addExactTerm(searchQuery,"status",status);
      }
      fullQuery.add(searchQuery,BooleanClause.Occur.MUST);
    }
    searcher=LuceneUtil.getSearcher(CompanyConstants.SYSTEM);
    hits.recordHits(searcher.search(fullQuery),searcher);
    return hits;
  }
 catch (  Exception e) {
    return LuceneUtil.closeSearcher(searcher,keywords,e);
  }
}
