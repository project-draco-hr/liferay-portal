{
  List<String> supportedPluginTypes=Arrays.asList(getSupportedTypes());
  if (_log.isDebugEnabled()) {
    _log.debug("Loading plugin repository " + repositoryURL + ":\n"+ xml);
  }
  RemotePluginPackageRepository pluginPackageRepository=new RemotePluginPackageRepository(repositoryURL);
  if (xml == null) {
    return pluginPackageRepository;
  }
  Document document=SAXReaderUtil.read(xml);
  Element rootElement=document.getRootElement();
  Properties settings=_readProperties(rootElement.element("settings"),"setting");
  pluginPackageRepository.setSettings(settings);
  List<Element> pluginPackageElements=rootElement.elements("plugin-package");
  for (  Element pluginPackageElement : pluginPackageElements) {
    PluginPackage pluginPackage=_readPluginPackageXml(pluginPackageElement);
    if (!_isCurrentVersionSupported(pluginPackage.getLiferayVersions())) {
      continue;
    }
    boolean containsSupportedTypes=false;
    List<String> pluginTypes=pluginPackage.getTypes();
    for (    String pluginType : pluginTypes) {
      if (supportedPluginTypes.contains(pluginType)) {
        containsSupportedTypes=true;
        break;
      }
    }
    if (!containsSupportedTypes) {
      continue;
    }
    pluginPackage.setRepository(pluginPackageRepository);
    pluginPackageRepository.addPluginPackage(pluginPackage);
    _indexPluginPackage(pluginPackage);
  }
  return pluginPackageRepository;
}
