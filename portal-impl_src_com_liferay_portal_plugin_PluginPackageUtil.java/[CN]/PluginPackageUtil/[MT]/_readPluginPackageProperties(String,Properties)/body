{
  int pos=displayName.indexOf("-portlet");
  String pluginType=Plugin.TYPE_PORTLET;
  if (pos == -1) {
    pos=displayName.indexOf("-ext");
    pluginType=Plugin.TYPE_EXT;
  }
  if (pos == -1) {
    pos=displayName.indexOf("-hook");
    pluginType=Plugin.TYPE_HOOK;
  }
  if (pos == -1) {
    pos=displayName.indexOf("-layouttpl");
    pluginType=Plugin.TYPE_LAYOUT_TEMPLATE;
  }
  if (pos == -1) {
    pos=displayName.indexOf("-theme");
    pluginType=Plugin.TYPE_THEME;
  }
  if (pos == -1) {
    pos=displayName.indexOf("-web");
    pluginType=Plugin.TYPE_WEB;
  }
  if (pos == -1) {
    return null;
  }
  String displayPrefix=displayName.substring(0,pos);
  String moduleGroupId=GetterUtil.getString(properties.getProperty("module-group-id"));
  String moduleArtifactId=displayPrefix + "-" + pluginType;
  String moduleVersion=GetterUtil.getString(properties.getProperty("module-version"));
  if (Validator.isNull(moduleVersion)) {
    int moduleVersionPos=pos + pluginType.length() + 2;
    if (displayName.length() > moduleVersionPos) {
      moduleVersion=displayName.substring(moduleVersionPos);
    }
 else {
      moduleVersion=ReleaseInfo.getVersion();
    }
  }
  String moduleId=moduleGroupId + "/" + moduleArtifactId+ "/"+ moduleVersion+ "/war";
  String pluginName=GetterUtil.getString(properties.getProperty("name"));
  String deploymentContext=GetterUtil.getString(properties.getProperty("recommended-deployment-context"),moduleArtifactId);
  String author=GetterUtil.getString(properties.getProperty("author"));
  List<String> types=new ArrayList<>();
  types.add(pluginType);
  List<License> licenses=new ArrayList<>();
  String[] licensesArray=StringUtil.split(properties.getProperty("licenses"));
  for (int i=0; i < licensesArray.length; i++) {
    License license=new License();
    license.setName(licensesArray[i].trim());
    license.setOsiApproved(true);
    licenses.add(license);
  }
  List<String> liferayVersions=new ArrayList<>();
  String[] liferayVersionsArray=StringUtil.split(properties.getProperty("liferay-versions"));
  for (  String liferayVersion : liferayVersionsArray) {
    liferayVersions.add(liferayVersion.trim());
  }
  if (liferayVersions.isEmpty()) {
    liferayVersions.add(ReleaseInfo.getVersion() + "+");
  }
  List<String> tags=new ArrayList<>();
  String[] tagsArray=StringUtil.split(properties.getProperty("tags"));
  for (  String tag : tagsArray) {
    tags.add(tag.trim());
  }
  String shortDescription=GetterUtil.getString(properties.getProperty("short-description"));
  String longDescription=GetterUtil.getString(properties.getProperty("long-description"));
  String changeLog=GetterUtil.getString(properties.getProperty("change-log"));
  String pageURL=GetterUtil.getString(properties.getProperty("page-url"));
  String downloadURL=GetterUtil.getString(properties.getProperty("download-url"));
  List<String> requiredDeploymentContexts=ListUtil.fromArray(StringUtil.split(properties.getProperty("required-deployment-contexts")));
  PluginPackage pluginPackage=new PluginPackageImpl(moduleId);
  pluginPackage.setName(pluginName);
  pluginPackage.setRecommendedDeploymentContext(deploymentContext);
  pluginPackage.setAuthor(author);
  pluginPackage.setTypes(types);
  pluginPackage.setLicenses(licenses);
  pluginPackage.setLiferayVersions(liferayVersions);
  pluginPackage.setTags(tags);
  pluginPackage.setShortDescription(shortDescription);
  pluginPackage.setLongDescription(longDescription);
  pluginPackage.setChangeLog(changeLog);
  pluginPackage.setPageURL(pageURL);
  pluginPackage.setDownloadURL(downloadURL);
  pluginPackage.setRequiredDeploymentContexts(requiredDeploymentContexts);
  return pluginPackage;
}
