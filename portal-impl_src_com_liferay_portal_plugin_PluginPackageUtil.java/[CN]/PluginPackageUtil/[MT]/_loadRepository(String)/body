{
  RemotePluginPackageRepository repository=null;
  StringBundler sb=new StringBundler(8);
  if (!repositoryURL.startsWith(Http.HTTP_WITH_SLASH) && !repositoryURL.startsWith(Http.HTTPS_WITH_SLASH)) {
    sb.append(Http.HTTP_WITH_SLASH);
  }
  sb.append(repositoryURL);
  sb.append(StringPool.SLASH);
  sb.append(PluginPackage.REPOSITORY_XML_FILENAME_PREFIX);
  sb.append(StringPool.DASH);
  sb.append(ReleaseInfo.getVersion());
  sb.append(StringPool.PERIOD);
  sb.append(PluginPackage.REPOSITORY_XML_FILENAME_EXTENSION);
  String pluginsXmlURL=sb.toString();
  try {
    Http.Options options=new Http.Options();
    options.setLocation(pluginsXmlURL);
    options.setPost(false);
    byte[] bytes=HttpUtil.URLtoByteArray(options);
    Http.Response response=options.getResponse();
    int responseCode=response.getResponseCode();
    if (responseCode != HttpServletResponse.SC_OK) {
      if (_log.isDebugEnabled()) {
        _log.debug("A repository for version " + ReleaseInfo.getVersion() + " was not found. Checking general repository");
      }
      sb.setIndex(0);
      sb.append(repositoryURL);
      sb.append(StringPool.SLASH);
      sb.append(PluginPackage.REPOSITORY_XML_FILENAME_PREFIX);
      sb.append(StringPool.PERIOD);
      sb.append(PluginPackage.REPOSITORY_XML_FILENAME_EXTENSION);
      pluginsXmlURL=sb.toString();
      options=new Http.Options();
      options.setLocation(pluginsXmlURL);
      options.setPost(false);
      bytes=HttpUtil.URLtoByteArray(options);
      response=options.getResponse();
      if (responseCode != HttpServletResponse.SC_OK) {
        throw new PluginPackageException("Unable to download file " + pluginsXmlURL + " because of response code "+ responseCode);
      }
    }
    if (ArrayUtil.isNotEmpty(bytes)) {
      repository=_parseRepositoryXml(new String(bytes),repositoryURL);
      _repositoryCache.put(repositoryURL,repository);
      _availableTagsCache.addAll(repository.getTags());
      _lastUpdateDate=new Date();
      _updateAvailable=null;
      return repository;
    }
    _lastUpdateDate=new Date();
    throw new PluginPackageException("Download returned 0 bytes");
  }
 catch (  MalformedURLException murle) {
    _repositoryCache.remove(repositoryURL);
    throw new PluginPackageException("Invalid URL " + pluginsXmlURL,murle);
  }
catch (  IOException ioe) {
    _repositoryCache.remove(repositoryURL);
    throw new PluginPackageException("Unable to communicate with repository " + repositoryURL,ioe);
  }
catch (  DocumentException de) {
    _repositoryCache.remove(repositoryURL);
    throw new PluginPackageException("Unable to parse plugin list for repository " + repositoryURL,de);
  }
}
