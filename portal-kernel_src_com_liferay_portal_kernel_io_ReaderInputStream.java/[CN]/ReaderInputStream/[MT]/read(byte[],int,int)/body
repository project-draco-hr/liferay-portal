{
  if (bytes == null) {
    throw new NullPointerException();
  }
 else   if ((offset < 0) || (length < 0) || (length > (bytes.length - offset))) {
    throw new IndexOutOfBoundsException();
  }
 else   if (length == 0) {
    return 0;
  }
  int originalLength=length;
  while (length > 0) {
    int blockSize=Math.min(_outputBuffer.remaining(),length);
    if (blockSize > 0) {
      _outputBuffer.get(bytes,offset,blockSize);
      length-=blockSize;
      offset+=blockSize;
      if (length == 0) {
        break;
      }
    }
    int inputPosition=_inputBuffer.position();
    int result=_reader.read(_inputBuffer.array(),inputPosition,_inputBuffer.remaining());
    if (result != -1) {
      _inputBuffer.position(inputPosition + result);
    }
    _inputBuffer.flip();
    int inputRemaining=_inputBuffer.remaining();
    if (inputRemaining <= 0) {
      break;
    }
    if ((inputRemaining * _maxBytesPerChar) < length) {
      ByteBuffer byteBuffer=ByteBuffer.wrap(bytes,offset,length);
      _charsetEncoder.encode(_inputBuffer,byteBuffer,true);
      int outputRemaining=byteBuffer.remaining();
      offset+=length - outputRemaining;
      length=outputRemaining;
    }
 else {
      _outputBuffer.clear();
      _charsetEncoder.encode(_inputBuffer,_outputBuffer,true);
      _outputBuffer.flip();
    }
    _inputBuffer.compact();
  }
  int result=originalLength - length;
  if (result == 0) {
    return -1;
  }
  return result;
}
