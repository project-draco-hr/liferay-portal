{
  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);
  FileEntry fileEntry=null;
  PortletConfig portletConfig=getPortletConfig(actionRequest);
  try {
    UploadException uploadException=(UploadException)actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION);
    if (uploadException != null) {
      if (uploadException.isExceededLiferayFileItemSizeLimit()) {
        throw new LiferayFileItemException();
      }
 else       if (uploadException.isExceededSizeLimit()) {
        throw new FileSizeException(uploadException.getCause());
      }
      throw new PortalException(uploadException.getCause());
    }
 else     if (cmd.equals(Constants.ADD) || cmd.equals(Constants.ADD_DYNAMIC) || cmd.equals(Constants.UPDATE)|| cmd.equals(Constants.UPDATE_AND_CHECKIN)) {
      fileEntry=updateFileEntry(portletConfig,actionRequest,actionResponse);
    }
 else     if (cmd.equals(Constants.ADD_MULTIPLE)) {
      addMultipleFileEntries(portletConfig,actionRequest,actionResponse);
      hideDefaultSuccessMessage(actionRequest);
    }
 else     if (cmd.equals(Constants.ADD_TEMP)) {
      addTempFileEntry(actionRequest,actionResponse);
    }
 else     if (cmd.equals(Constants.DELETE)) {
      deleteFileEntry(actionRequest,false);
    }
 else     if (cmd.equals(Constants.DELETE_TEMP)) {
      deleteTempFileEntry(actionRequest,actionResponse);
    }
 else     if (cmd.equals(Constants.CANCEL_CHECKOUT)) {
      cancelFileEntriesCheckOut(actionRequest);
    }
 else     if (cmd.equals(Constants.CHECKIN)) {
      checkInFileEntries(actionRequest);
    }
 else     if (cmd.equals(Constants.CHECKOUT)) {
      checkOutFileEntries(actionRequest);
    }
 else     if (cmd.equals(Constants.MOVE_TO_TRASH)) {
      deleteFileEntry(actionRequest,true);
    }
 else     if (cmd.equals(Constants.RESTORE)) {
      restoreTrashEntries(actionRequest);
    }
 else     if (cmd.equals(Constants.REVERT)) {
      revertFileEntry(actionRequest);
    }
    WindowState windowState=actionRequest.getWindowState();
    if (cmd.equals(Constants.ADD_TEMP) || cmd.equals(Constants.DELETE_TEMP)) {
      actionResponse.setRenderParameter("mvcPath","/null.jsp");
    }
 else     if (cmd.equals(Constants.PREVIEW)) {
    }
 else     if (!windowState.equals(LiferayWindowState.POP_UP)) {
    }
 else {
      String redirect=ParamUtil.getString(actionRequest,"redirect");
      int workflowAction=ParamUtil.getInteger(actionRequest,"workflowAction",WorkflowConstants.ACTION_SAVE_DRAFT);
      if ((fileEntry != null) && (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT)) {
        redirect=getSaveAndContinueRedirect(portletConfig,actionRequest,fileEntry,redirect);
        sendRedirect(actionRequest,actionResponse,redirect);
      }
 else {
        if (windowState.equals(LiferayWindowState.POP_UP)) {
          redirect=PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest,"redirect"));
          if (Validator.isNotNull(redirect)) {
            if (cmd.equals(Constants.ADD) && (fileEntry != null)) {
              String portletId=HttpUtil.getParameter(redirect,"p_p_id",false);
              String namespace=PortalUtil.getPortletNamespace(portletId);
              redirect=HttpUtil.addParameter(redirect,namespace + "className",DLFileEntry.class.getName());
              redirect=HttpUtil.addParameter(redirect,namespace + "classPK",fileEntry.getFileEntryId());
            }
            sendRedirect(actionRequest,actionResponse,redirect);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    handleUploadException(portletConfig,actionRequest,actionResponse,cmd,e);
  }
}
