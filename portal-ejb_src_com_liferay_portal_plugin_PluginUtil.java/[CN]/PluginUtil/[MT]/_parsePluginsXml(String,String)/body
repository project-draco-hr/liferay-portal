{
  List supportedPluginTypes=Arrays.asList(getSupportedTypes());
  _log.debug("Plugins: " + xml);
  PluginRepository plugins=new PluginRepository();
  if (xml == null) {
    return plugins;
  }
  SAXReader reader=SAXReaderFactory.getInstance();
  Document doc=reader.read(new XMLSafeReader(xml));
  Element root=doc.getRootElement();
  Iterator itr1=root.elements().iterator();
  while (itr1.hasNext()) {
    Element pluginElm=(Element)itr1.next();
    String pluginName=pluginElm.elementText("name");
    if (_log.isDebugEnabled()) {
      _log.debug("Reading plugin definition " + pluginName);
    }
    Plugin plugin=new PluginImpl(GetterUtil.getString(pluginElm.elementText("module-id")));
    List liferayVersions=_readList(pluginElm.element("liferay-versions"),"liferay-version");
    String type=GetterUtil.getString(pluginElm.elementText("type"));
    if (!_isCurrentVersionSupported(liferayVersions) || !supportedPluginTypes.contains(type)) {
      continue;
    }
    plugin.setName(_readText(pluginElm.elementText("name")));
    plugin.setAuthor(_readText(pluginElm.elementText("author")));
    plugin.setType(type);
    plugin.setLicenses(_readLicenseList(pluginElm.element("licenses"),"license"));
    plugin.setLiferayVersions(liferayVersions);
    if (pluginElm.element("tags") != null) {
      plugin.setTags(_readList(pluginElm.element("tags"),"tag"));
    }
    plugin.setShortDescription(_readText(pluginElm.elementText("short-description")));
    plugin.setLongDescription(_readHtml(pluginElm.elementText("long-description")));
    plugin.setPageURL(_readText(pluginElm.elementText("page-url")));
    plugin.setRepositoryURL(repositoryURL);
    plugin.setRecommendedWARName(_readText(pluginElm.elementText("recommended-war-name")));
    if (pluginElm.element("screenshots") != null) {
      plugin.setScreenshotURLs(_readList(pluginElm.element("screenshots"),"screenshot-url"));
    }
    plugins.addPlugin(plugin);
  }
  return plugins;
}
