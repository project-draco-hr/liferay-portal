{
  _log.debug("Plugins: " + xml);
  PluginRepository plugins=new PluginRepository();
  if (xml == null) {
    return plugins;
  }
  SAXReader reader=SAXReaderFactory.getInstance();
  Document doc=reader.read(new XMLSafeReader(xml));
  Element root=doc.getRootElement();
  Iterator itr1=root.elements().iterator();
  while (itr1.hasNext()) {
    Element pluginElm=(Element)itr1.next();
    String pluginName=pluginElm.elementText("name");
    if (_log.isDebugEnabled()) {
      _log.debug("Reading plugin definition " + pluginName);
    }
    Plugin plugin=new PluginImpl();
    List liferayVersions=_readElementList(pluginElm.element("liferay-versions"),"liferay-version");
    if (!_isCurrentVersionSupported(liferayVersions)) {
      continue;
    }
    plugin.setRepositoryURL(repositoryURL);
    plugin.setName(GetterUtil.getString(pluginElm.elementText("name"),plugin.getName()));
    plugin.setModuleId(GetterUtil.getString(pluginElm.elementText("module-id"),plugin.getModuleId()));
    plugin.setRecommendedWARName(GetterUtil.getString(pluginElm.elementText("recommended-war-name"),plugin.getRecommendedWARName()));
    plugin.setType(GetterUtil.getString(pluginElm.elementText("type"),plugin.getType()));
    plugin.setTags(_readElementList(pluginElm.element("tags"),"tag"));
    plugin.setShortDescription(GetterUtil.getString(pluginElm.elementText("short-description"),plugin.getShortDescription()));
    plugin.setLongDescription(GetterUtil.getString(pluginElm.elementText("long-description"),plugin.getLongDescription()));
    plugin.setPageURL(GetterUtil.getString(pluginElm.elementText("page-url"),plugin.getPageURL()));
    plugin.setScreenshotURLs(_readElementList(pluginElm.element("screenshots"),"screenshot-url"));
    plugin.setAuthor(GetterUtil.getString(pluginElm.elementText("author"),plugin.getAuthor()));
    plugin.setLicenses(_readElementList(pluginElm.element("licenses"),"license"));
    plugin.setLiferayVersions(liferayVersions);
    plugins.addPlugin(plugin);
  }
  return plugins;
}
