{
  _emptyMVCCommand=emptyMVCCommand;
  _mvcComandPostFix=mvcCommandPostFix;
  if (Validator.isNotNull(packagePrefix) && !packagePrefix.endsWith(StringPool.PERIOD)) {
    packagePrefix=packagePrefix + StringPool.PERIOD;
  }
  _packagePrefix=packagePrefix;
  _serviceTrackerMap=ServiceTrackerCollections.openSingleValueMap(mvcCommandClass,"(&(javax.portlet.name=" + portletName + ")"+ "(mvc.command.name=*))",new ServiceReferenceMapper<String,MVCCommand>(){
    @Override public void map(    ServiceReference<MVCCommand> serviceReference,    Emitter<String> emitter){
      List<String> mvcCommandNames=StringPlus.asList(serviceReference.getProperty("mvc.command.name"));
      for (      String mvcCommandName : mvcCommandNames) {
        emitter.emit(mvcCommandName);
      }
    }
  }
);
}
