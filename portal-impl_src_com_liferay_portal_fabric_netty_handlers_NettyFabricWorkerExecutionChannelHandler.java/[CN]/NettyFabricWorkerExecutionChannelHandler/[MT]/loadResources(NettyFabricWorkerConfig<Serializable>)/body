{
  Map<Path,Path> mergedResources=new HashMap<Path,Path>();
  ProcessConfig processConfig=nettyFabricWorkerConfig.getProcessConfig();
  final Map<Path,Path> bootstrapResources=new LinkedHashMap<Path,Path>();
  for (  String pathString : StringUtil.split(processConfig.getBootstrapClassPath(),File.pathSeparatorChar)) {
    bootstrapResources.put(Paths.get(pathString),null);
  }
  mergedResources.putAll(bootstrapResources);
  final Map<Path,Path> runtimeResources=new LinkedHashMap<Path,Path>();
  for (  String pathString : StringUtil.split(processConfig.getRuntimeClassPath(),File.pathSeparatorChar)) {
    runtimeResources.put(Paths.get(pathString),null);
  }
  mergedResources.putAll(runtimeResources);
  final Map<Path,Path> inputResources=nettyFabricWorkerConfig.getInputResourceMap();
  mergedResources.putAll(inputResources);
  return new NoticeableFutureConverter<LoadedResources,Map<Path,Path>>(_repository.getFiles(mergedResources,false)){
    @Override protected LoadedResources convert(    Map<Path,Path> mergedResources) throws IOException {
      Map<Path,Path> loadedInputResources=new HashMap<Path,Path>();
      List<Path> missedInputResources=new ArrayList<Path>();
      for (      Path path : inputResources.keySet()) {
        Path loadedInputResource=mergedResources.get(path);
        if (loadedInputResource == null) {
          missedInputResources.add(path);
        }
 else {
          loadedInputResources.put(path,loadedInputResource);
        }
      }
      if (!missedInputResources.isEmpty()) {
        throw new IOException("Unable to get input resources :" + missedInputResources);
      }
      List<Path> loadedBootstrapResources=new ArrayList<Path>();
      List<Path> missedBootstrapResources=new ArrayList<Path>();
      for (      Path path : bootstrapResources.keySet()) {
        Path loadedBootstrapResource=mergedResources.get(path);
        if (loadedBootstrapResource == null) {
          missedBootstrapResources.add(path);
        }
 else {
          loadedBootstrapResources.add(loadedBootstrapResource);
        }
      }
      if (!missedBootstrapResources.isEmpty() && _log.isWarnEnabled()) {
        _log.warn("Incomplete bootstrap classpath loaded, missed :" + missedBootstrapResources);
      }
      List<Path> loadedRuntimeResources=new ArrayList<Path>();
      List<Path> missedRuntimeResources=new ArrayList<Path>();
      for (      Path path : runtimeResources.keySet()) {
        Path loadedRuntimeResource=mergedResources.get(path);
        if (loadedRuntimeResource == null) {
          missedRuntimeResources.add(path);
        }
 else {
          loadedRuntimeResources.add(loadedRuntimeResource);
        }
      }
      if (!missedRuntimeResources.isEmpty() && _log.isWarnEnabled()) {
        _log.warn("Incomplete runtime classpath loaded, missed :" + missedRuntimeResources);
      }
      return new LoadedResources(loadedInputResources,StringUtil.merge(loadedBootstrapResources,File.pathSeparator),StringUtil.merge(loadedRuntimeResources,File.pathSeparator));
    }
  }
;
}
