{
  try {
    long companyId=PortalUtil.getCompanyId(request);
    User user=PortalUtil.getUser(request);
    if (user == null) {
      Company company=CompanyLocalServiceUtil.getCompany(companyId);
      user=company.getDefaultUser();
    }
    long userId=user.getUserId();
    PermissionChecker permissionChecker=null;
    PrincipalThreadLocal.setName(userId);
    permissionChecker=PermissionCheckerFactoryUtil.create(user,true);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    String path=HttpUtil.fixPath(request.getPathInfo());
    String fullPath=request.getServletPath() + StringPool.SLASH + path;
    String[] pathArray=StringUtil.split(path,StringPool.SLASH);
    StringBundler sb=new StringBundler();
    if (pathArray.length == 0) {
      LinkedHashMap<String,Object> groupParams=new LinkedHashMap<String,Object>();
      groupParams.put("usersGroups",new Long(userId));
      List<Group> groups=GroupLocalServiceUtil.search(companyId,null,null,groupParams,QueryUtil.ALL_POS,QueryUtil.ALL_POS);
      try {
        Group group=GroupLocalServiceUtil.getUserGroup(companyId,userId);
        groups.add(group);
      }
 catch (      NoSuchGroupException nsge) {
      }
      groups=ListUtil.sort(groups,new GroupFriendlyURLComparator());
      appendHtmlHeader(sb,StringPool.SLASH);
      for (      Group group : groups) {
        String name=HttpUtil.fixPath(group.getFriendlyURL());
        appendFolderEntry(sb,fullPath,name,null,group.getDescription());
      }
      appendHtmlFooter(sb);
    }
 else {
      long groupId=getGroupId(companyId,pathArray[0]);
      long folderId=DLFolderConstants.DEFAULT_PARENT_FOLDER_ID;
      if (pathArray.length > 1) {
        for (int i=1; i < pathArray.length; i++) {
          String name=pathArray[i];
          try {
            DLFolder folder=DLFolderLocalServiceUtil.getFolder(groupId,folderId,name);
            folderId=folder.getFolderId();
            DLFolderPermission.check(permissionChecker,folder,ActionKeys.VIEW);
          }
 catch (          NoSuchFolderException nsfe) {
            if (i != pathArray.length - 1) {
              throw nsfe;
            }
            DLFileEntry fileEntry=DLFileEntryLocalServiceUtil.getFileEntryByTitle(groupId,folderId,name);
            DLFileEntryPermission.check(permissionChecker,fileEntry,ActionKeys.VIEW);
            InputStream is=DLFileEntryLocalServiceUtil.getFileAsStream(companyId,userId,groupId,folderId,fileEntry.getName());
            String contentType=MimeTypesUtil.getContentType(fileEntry.getTitle());
            response.setContentType(contentType);
            response.setStatus(HttpServletResponse.SC_OK);
            ServletResponseUtil.write(response,is);
            return;
          }
        }
      }
      DLFileEntry indexFileEntry=getIndexFileEntry(permissionChecker,groupId,folderId);
      if (indexFileEntry != null) {
        InputStream is=DLFileEntryLocalServiceUtil.getFileAsStream(companyId,userId,groupId,folderId,indexFileEntry.getName());
        response.setContentType(ContentTypes.TEXT_HTML_UTF8);
        response.setStatus(HttpServletResponse.SC_OK);
        ServletResponseUtil.write(response,is);
      }
      String pathEncoded=StringPool.BLANK;
      for (      String pathSegment : pathArray) {
        pathEncoded+=StringPool.SLASH + HttpUtil.encodeURL(pathSegment,true);
      }
      appendHtmlHeader(sb,pathEncoded);
      List<Object> entries=DLFolderLocalServiceUtil.getFoldersAndFileEntriesAndFileShortcuts(groupId,folderId,StatusConstants.APPROVED,QueryUtil.ALL_POS,QueryUtil.ALL_POS);
      appendFolderEntry(sb,fullPath,"..",null,"");
      for (      Object entry : entries) {
        if (entry instanceof DLFolder) {
          DLFolder folder=(DLFolder)entry;
          if (DLFolderPermission.contains(permissionChecker,folder,ActionKeys.VIEW)) {
            appendFolderEntry(sb,fullPath,folder.getName(),folder.getModifiedDate(),folder.getDescription());
          }
        }
 else         if (entry instanceof DLFileEntry) {
          DLFileEntry fileEntry=(DLFileEntry)entry;
          if (DLFileEntryPermission.contains(permissionChecker,fileEntry,ActionKeys.VIEW)) {
            String size=String.valueOf(fileEntry.getSize());
            if (fileEntry.getSize() > 1024) {
              size=TextFormatter.formatKB(fileEntry.getSize(),PortalUtil.getLocale(request)) + "k";
            }
            appendFileEntry(sb,fullPath,fileEntry.getTitle(),fileEntry.getModifiedDate(),size,fileEntry.getDescription());
          }
        }
      }
      appendHtmlFooter(sb);
    }
    response.setContentType(ContentTypes.TEXT_HTML_UTF8);
    response.setStatus(HttpServletResponse.SC_OK);
    ServletResponseUtil.write(response,sb.toString());
  }
 catch (  Exception e) {
    PortalUtil.sendError(e,request,response);
  }
}
