{
  Pointer<Sass_File_Context> sassFileContextPointer=null;
  try {
    File inputFile=new File(inputFileName);
    String includeDirNames=includeDirName + File.pathSeparator + inputFile.getParent();
    if ((sourceMapFileName == null) || sourceMapFileName.equals("")) {
      sourceMapFileName=getOutputFileName(inputFileName) + ".map";
    }
    sassFileContextPointer=createSassFileContext(inputFileName,includeDirNames,generateSourceMap,sourceMapFileName);
    Pointer<Sass_Context> sassContextPointer=LiferaysassLibrary.sassFileContextGetContext(sassFileContextPointer);
    int errorStatus=LiferaysassLibrary.sassContextGetErrorStatus(sassContextPointer);
    if (errorStatus != 0) {
      Pointer<Byte> errorMessagePointer=LiferaysassLibrary.sassContextGetErrorMessage(sassContextPointer);
      throw new JniSassCompilerException(errorMessagePointer.getCString());
    }
    Pointer<Byte> outputPointer=LiferaysassLibrary.sassContextGetOutputString(sassContextPointer);
    if (generateSourceMap) {
      try {
        File sourceMapFile=new File(sourceMapFileName);
        Pointer<Byte> sourceMapOutputPointer=LiferaysassLibrary.sassContextGetSourceMapString(sassContextPointer);
        write(sourceMapFile,sourceMapOutputPointer.getCString());
      }
 catch (      Exception e) {
        System.out.println("Unable to create source map");
      }
    }
    if (outputPointer == null) {
      throw new JniSassCompilerException("Null output");
    }
    return outputPointer.getCString();
  }
  finally {
    try {
      if (sassFileContextPointer != null) {
        LiferaysassLibrary.sassDeleteFileContext(sassFileContextPointer);
      }
    }
 catch (    Throwable t) {
      throw new JniSassCompilerException(t);
    }
  }
}
