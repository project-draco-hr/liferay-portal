{
  if (attribute == null) {
    return null;
  }
  try {
    if (type == ExpandoColumnConstants.BOOLEAN) {
      return Boolean.parseBoolean(attribute);
    }
 else     if (type == ExpandoColumnConstants.DOUBLE) {
      return Double.parseDouble(attribute);
    }
 else     if (type == ExpandoColumnConstants.FLOAT) {
      return Float.parseFloat(attribute);
    }
 else     if (type == ExpandoColumnConstants.INTEGER) {
      return Integer.parseInt(attribute);
    }
 else     if (type == ExpandoColumnConstants.LONG) {
      return Long.parseLong(attribute);
    }
 else     if (type == ExpandoColumnConstants.SHORT) {
      return Long.parseLong(attribute);
    }
 else     if (type == ExpandoColumnConstants.BOOLEAN_ARRAY) {
      String[] vals=attribute.split(StringPool.COMMA);
      Boolean[] parsed=new Boolean[vals.length];
      for (int i=0; i < vals.length; i++) {
        parsed[i]=Boolean.parseBoolean(vals[i]);
      }
      return parsed;
    }
 else     if (type == ExpandoColumnConstants.DOUBLE_ARRAY) {
      String[] vals=attribute.split(StringPool.COMMA);
      Double[] parsed=new Double[vals.length];
      for (int i=0; i < vals.length; i++) {
        parsed[i]=Double.parseDouble(vals[i]);
      }
      return parsed;
    }
 else     if (type == ExpandoColumnConstants.FLOAT_ARRAY) {
      String[] vals=attribute.split(StringPool.COMMA);
      Float[] parsed=new Float[vals.length];
      for (int i=0; i < vals.length; i++) {
        parsed[i]=Float.parseFloat(vals[i]);
      }
      return parsed;
    }
 else     if (type == ExpandoColumnConstants.INTEGER_ARRAY) {
      String[] vals=attribute.split(StringPool.COMMA);
      Integer[] parsed=new Integer[vals.length];
      for (int i=0; i < vals.length; i++) {
        parsed[i]=Integer.parseInt(vals[i]);
      }
      return parsed;
    }
 else     if (type == ExpandoColumnConstants.LONG_ARRAY) {
      String[] vals=attribute.split(StringPool.COMMA);
      Long[] parsed=new Long[vals.length];
      for (int i=0; i < vals.length; i++) {
        parsed[i]=Long.parseLong(vals[i]);
      }
      return parsed;
    }
 else     if (type == ExpandoColumnConstants.SHORT_ARRAY) {
      String[] vals=attribute.split(StringPool.COMMA);
      Short[] parsed=new Short[vals.length];
      for (int i=0; i < vals.length; i++) {
        parsed[i]=Short.parseShort(vals[i]);
      }
      return parsed;
    }
 else     if (type == ExpandoColumnConstants.STRING_ARRAY) {
      return attribute.split(StringPool.COMMA);
    }
 else     if (type == ExpandoColumnConstants.DATE) {
      SimpleDateFormat dateFormatter=new SimpleDateFormat(_DEFAULT_DATE_FORMAT);
      return dateFormatter.parse(attribute);
    }
 else     if (type == ExpandoColumnConstants.DATE_ARRAY) {
      String[] vals=attribute.split(StringPool.COMMA);
      Date[] parsed=new Date[vals.length];
      for (int i=0; i < vals.length; i++) {
        SimpleDateFormat dateFormatter=new SimpleDateFormat(_DEFAULT_DATE_FORMAT);
        parsed[i]=dateFormatter.parse(vals[i]);
      }
      return parsed;
    }
 else {
      return attribute;
    }
  }
 catch (  Exception e) {
    _log.warn(e);
    return null;
  }
}
