{
  args=arg;
  String tok;
  dieLevel=NO_DIE_LEVEL;
  while ((tok=nextArg()) != null) {
    if (tok.equals(SWITCH_VERBOSE)) {
      verbose=true;
      showSuccess=true;
      listErrors=true;
    }
 else     if (tok.equals(SWITCH_OUTPUT_DIR)) {
      tok=nextArg();
      setOutputDir(tok);
    }
 else     if (tok.equals(SWITCH_PACKAGE_NAME)) {
      targetPackage=nextArg();
    }
 else     if (tok.equals(SWITCH_COMPILE)) {
      compile=true;
    }
 else     if (tok.equals(SWITCH_CLASS_NAME)) {
      targetClassName=nextArg();
    }
 else     if (tok.equals(SWITCH_URI_BASE)) {
      uriBase=nextArg();
    }
 else     if (tok.equals(SWITCH_URI_ROOT)) {
      setUriroot(nextArg());
    }
 else     if (tok.equals(SWITCH_GENERATE_CLASSES)) {
      compile=true;
    }
 else     if (tok.equals(SWITCH_FILE_WEBAPP)) {
      setUriroot(nextArg());
    }
 else     if (tok.equals(SHOW_SUCCESS)) {
      showSuccess=true;
    }
 else     if (tok.equals(LIST_ERRORS)) {
      listErrors=true;
    }
 else     if (tok.equals(SWITCH_WEBAPP_INC)) {
      webxmlFile=nextArg();
      if (webxmlFile != null) {
        webxmlLevel=INC_WEBXML;
      }
    }
 else     if (tok.equals(SWITCH_WEBAPP_XML)) {
      webxmlFile=nextArg();
      if (webxmlFile != null) {
        webxmlLevel=ALL_WEBXML;
      }
    }
 else     if (tok.equals(SWITCH_MAPPED)) {
      mappedFile=true;
    }
 else     if (tok.equals(SWITCH_XPOWERED_BY)) {
      xpoweredBy=true;
    }
 else     if (tok.equals(SWITCH_TRIM_SPACES)) {
      setTrimSpaces(true);
    }
 else     if (tok.equals(SWITCH_CLASSPATH)) {
      setClassPath(nextArg());
    }
 else     if (tok.startsWith(SWITCH_DIE)) {
      try {
        dieLevel=Integer.parseInt(tok.substring(SWITCH_DIE.length()));
      }
 catch (      NumberFormatException nfe) {
        dieLevel=DEFAULT_DIE_LEVEL;
      }
    }
 else     if (tok.equals(SWITCH_HELP)) {
      helpNeeded=true;
    }
 else     if (tok.equals(SWITCH_SOURCE)) {
      setCompilerSourceVM(nextArg());
    }
 else     if (tok.equals(SWITCH_TARGET)) {
      setCompilerTargetVM(nextArg());
    }
 else     if (tok.equals(SWITCH_SMAP)) {
      smapSuppressed=false;
    }
 else     if (tok.equals(SWITCH_DUMP_SMAP)) {
      smapDumped=true;
      smapSuppressed=false;
    }
 else     if (tok.equals(SWITCH_SCHEMAS_PREFIX)) {
      setSchemaResourcePrefix(nextArg());
    }
 else     if (tok.equals(SWITCH_DTDS_PREFIX)) {
      setDtdResourcePrefix(nextArg());
    }
 else     if (tok.equals(SWITCH_VALIDATE)) {
      setValidateXml(true);
    }
 else     if (tok.equals(SWITCH_IGNORE_JSP_FRAGMENTS)) {
      setIgnoreJspFragmentErrors(true);
    }
 else     if (tok.equals(SWITCH_DISABLE_POOLING)) {
      setPoolingEnabled(false);
    }
 else {
      if (tok.startsWith("-")) {
        throw new JasperException("Unrecognized option: " + tok + ".  Use -help for help.");
      }
      if (!fullstop) {
        argPos--;
      }
      break;
    }
  }
  while (true) {
    String file=nextFile();
    if (file == null)     break;
    pages.addElement(file);
  }
}
