{
  ClassLoader originalClassLoader=null;
  String jspUri=file.replace('\\','/');
  try {
    if (scratchDir == null) {
      String temp=System.getProperty("java.io.tmpdir");
      if (temp == null) {
        temp="";
      }
      scratchDir=new File(new File(temp).getAbsolutePath());
    }
    JspCompilationContext clctxt=new JspCompilationContext(jspUri,false,this,context,null,rctxt);
    if ((targetClassName != null) && (targetClassName.length() > 0)) {
      clctxt.setServletClassName(targetClassName);
      targetClassName=null;
    }
    if (targetPackage != null) {
      clctxt.setServletPackageName(targetPackage);
    }
    originalClassLoader=Thread.currentThread().getContextClassLoader();
    if (loader == null) {
      initClassLoader(clctxt);
    }
    Thread.currentThread().setContextClassLoader(loader);
    clctxt.setClassLoader(loader);
    clctxt.setClassPath(classPath);
    Compiler clc=clctxt.createCompiler(true);
    if (clc.isOutDated(compile)) {
      clc.compile(compile);
    }
    if (ignoreJspFragmentErrors) {
      PageInfo pi=clc.getPageInfo();
      if (pi != null) {
        List<String> deps=pi.getDependants();
        if (deps != null) {
          Iterator<String> it=deps.iterator();
          if (it != null) {
            while (it.hasNext()) {
              dependents.add(it.next());
            }
          }
        }
        clc.setPageInfo(null);
      }
    }
    generateWebMapping(file,clctxt);
    if (showSuccess) {
      log.info("Built File: " + file);
    }
  }
 catch (  JasperException je) {
    Throwable rootCause=je;
    while (rootCause instanceof JasperException && ((JasperException)rootCause).getRootCause() != null) {
      rootCause=((JasperException)rootCause).getRootCause();
    }
    if (listErrors && rootCause != je) {
      log.log(Level.SEVERE,Localizer.getMessage("jspc.error.generalException",file),rootCause);
    }
    if (getFailOnError() && !ignoreJspFragmentErrors) {
      throw je;
    }
 else {
      if (listErrors && !ignoreJspFragmentErrors) {
        log.severe(je.getMessage());
      }
      jspErrors.put(jspUri,je);
    }
  }
catch (  Exception e) {
    if ((e instanceof FileNotFoundException) && log.isLoggable(Level.WARNING)) {
      log.warning(Localizer.getMessage("jspc.error.fileDoesNotExist",e.getMessage()));
    }
    throw new JasperException(e);
  }
 finally {
    if (originalClassLoader != null) {
      Thread.currentThread().setContextClassLoader(originalClassLoader);
    }
  }
}
