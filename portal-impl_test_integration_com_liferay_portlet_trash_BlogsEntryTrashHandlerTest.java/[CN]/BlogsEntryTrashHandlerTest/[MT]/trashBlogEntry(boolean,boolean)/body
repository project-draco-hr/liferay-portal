{
  Group group=ServiceTestUtil.addGroup();
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext();
  serviceContext.setScopeGroupId(group.getGroupId());
  int initialBlogsEntriesCount=getBlogsEntriesNotInTrashCount(group.getGroupId());
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  int initialBlogsEntriesSearchCount=searchBlogsEntriesCount(group.getGroupId());
  int initialTrashEntriesSearchCount=searchTrashEntriesCount("Title",serviceContext);
  BlogsEntry blogsEntry=addBlogsEntry(group,approved,serviceContext);
  int oldStatus=blogsEntry.getStatus();
  Assert.assertEquals(initialBlogsEntriesCount + 1,getBlogsEntriesNotInTrashCount(group.getGroupId()));
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  if (approved) {
    Assert.assertTrue(isAssetEntryVisible(blogsEntry.getEntryId()));
    Assert.assertEquals(initialBlogsEntriesSearchCount + 1,searchBlogsEntriesCount(group.getGroupId()));
  }
 else {
    Assert.assertFalse(isAssetEntryVisible(blogsEntry.getEntryId()));
    Assert.assertEquals(initialBlogsEntriesSearchCount,searchBlogsEntriesCount(group.getGroupId()));
  }
  Assert.assertEquals(initialTrashEntriesSearchCount,searchTrashEntriesCount("Title",serviceContext));
  BlogsEntryServiceUtil.moveEntryToTrash(blogsEntry.getEntryId());
  TrashEntry trashEntry=TrashEntryLocalServiceUtil.getEntry(BlogsEntry.class.getName(),blogsEntry.getEntryId());
  Assert.assertEquals(blogsEntry.getEntryId(),trashEntry.getClassPK());
  Assert.assertEquals(WorkflowConstants.STATUS_IN_TRASH,blogsEntry.getStatus());
  Assert.assertEquals(initialBlogsEntriesCount,getBlogsEntriesNotInTrashCount(group.getGroupId()));
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  Assert.assertFalse(isAssetEntryVisible(blogsEntry.getEntryId()));
  Assert.assertEquals(initialBlogsEntriesSearchCount,searchBlogsEntriesCount(group.getGroupId()));
  Assert.assertEquals(initialTrashEntriesSearchCount + 1,searchTrashEntriesCount("Title",serviceContext));
  TrashHandler trashHandler=TrashHandlerRegistryUtil.getTrashHandler(blogsEntry.getModelClassName());
  if (delete) {
    trashHandler.deleteTrashEntry(blogsEntry.getEntryId());
    Assert.assertEquals(initialBlogsEntriesCount,getBlogsEntriesNotInTrashCount(group.getGroupId()));
    Assert.assertNull(fetchAssetEntry(blogsEntry.getEntryId()));
    Assert.assertEquals(initialBlogsEntriesSearchCount,searchBlogsEntriesCount(group.getGroupId()));
    Assert.assertEquals(initialTrashEntriesSearchCount,searchTrashEntriesCount("Title",serviceContext));
  }
 else {
    trashHandler.restoreTrashEntry(blogsEntry.getEntryId());
    blogsEntry=BlogsEntryServiceUtil.getEntry(blogsEntry.getEntryId());
    Assert.assertEquals(oldStatus,blogsEntry.getStatus());
    Assert.assertEquals(initialBlogsEntriesCount + 1,getBlogsEntriesNotInTrashCount(group.getGroupId()));
    if (approved) {
      Assert.assertTrue(isAssetEntryVisible(blogsEntry.getEntryId()));
      Assert.assertEquals(initialBlogsEntriesSearchCount + 1,searchBlogsEntriesCount(group.getGroupId()));
    }
 else {
      Assert.assertFalse(isAssetEntryVisible(blogsEntry.getEntryId()));
      Assert.assertEquals(initialBlogsEntriesSearchCount,searchBlogsEntriesCount(group.getGroupId()));
    }
    Assert.assertEquals(initialTrashEntriesSearchCount,searchTrashEntriesCount("Title",serviceContext));
    trashHandler.deleteTrashEntry(blogsEntry.getEntryId());
  }
}
