{
  StringBuilder sb=new StringBuilder();
  sb.append("<h1>");
  sb.append(project.getProperty("top.level.result.message"));
  sb.append("</h1>");
  sb.append("<p>Build Time: ");
  sb.append(project.getProperty("top.level.build.time"));
  sb.append("</p>");
  String rebaseBranchGitCommit=project.getProperty("rebase.branch.git.commit");
  if (!rebaseBranchGitCommit.equals("")) {
    sb.append("<h4>Base Branch:</h4>");
    sb.append("<p>Branch Name: ");
    sb.append("<a href=\"https://github.com/liferay/");
    sb.append(project.getProperty("repository"));
    sb.append("/tree/");
    sb.append(project.getProperty("branch.name"));
    sb.append("\">");
    sb.append(project.getProperty("branch.name"));
    sb.append("</a><br />");
    sb.append("Branch GIT ID: <a href=\"https://github.com/liferay/");
    sb.append(project.getProperty("repository"));
    sb.append("/commit/");
    sb.append(rebaseBranchGitCommit);
    sb.append("\">");
    sb.append(rebaseBranchGitCommit);
    sb.append("</a></p>");
  }
  sb.append("<h4>Task Summary:</h4>");
  sb.append("<ul>");
  String buildURL=project.getProperty("build.url");
  String progressiveText=JenkinsResultsParserUtil.toString(JenkinsResultsParserUtil.getLocalURL(buildURL + "/logText/progressiveText"),false);
  String[] consoleSnippets=progressiveText.split("Executing subrepository task ");
  for (int i=1; i < consoleSnippets.length; i++) {
    sb.append("<li><strong><a href=\"");
    sb.append(project.getProperty("top.level.shared.dir.url"));
    sb.append("/");
    String consoleSnippet=consoleSnippets[i];
    String taskName=consoleSnippet.substring(0,consoleSnippet.indexOf("\n"));
    JenkinsResultsParserUtil.write(new File(project.getProperty("top.level.shared.dir") + "/" + taskName+ ".log"),consoleSnippet);
    sb.append(taskName);
    sb.append(".log");
    sb.append("\">");
    sb.append(taskName);
    sb.append("</a></strong> ");
    sb.append("- ");
    SubrepositoryTask subRepositoryTask=_getSubrepositoryTask(buildURL,consoleSnippet);
    String result=subRepositoryTask.getResult();
    sb.append(result);
    if (result.equals("SUCCESS")) {
      sb.append(" :white_check_mark:");
    }
 else {
      if (result.equals("ABORTED")) {
        sb.append(" :no_entry:");
      }
 else       if (result.equals("FAILURE")) {
        sb.append(" :x:");
      }
      sb.append(subRepositoryTask.getGitHubMessage());
    }
    sb.append("</li>");
  }
  sb.append("</ul><h5>For more details click <a href=\"");
  sb.append(buildURL);
  sb.append("\">here</a>.</h5>");
  project.setProperty("report.html.content",sb.toString());
}
