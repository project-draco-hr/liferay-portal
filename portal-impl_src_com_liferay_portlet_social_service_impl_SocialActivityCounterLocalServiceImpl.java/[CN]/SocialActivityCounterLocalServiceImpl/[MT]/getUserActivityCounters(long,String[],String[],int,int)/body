{
  List<Long> userIds=socialActivityCounterFinder.findU_ByG_N(groupId,rankingNames,start,end);
  if (userIds.isEmpty()) {
    return Collections.emptyList();
  }
  Tuple[] userActivityCounters=new Tuple[userIds.size()];
  List<SocialActivityCounter> activityCounters=SocialActivityCounterFinderUtil.findAC_By_G_C_C_N_S_E(groupId,userIds,selectedNames,QueryUtil.ALL_POS,QueryUtil.ALL_POS);
  long userId=0;
  Map<String,SocialActivityCounter> activityCountersMap=null;
  for (  SocialActivityCounter activityCounter : activityCounters) {
    if (userId != activityCounter.getClassPK()) {
      userId=activityCounter.getClassPK();
      activityCountersMap=new HashMap<String,SocialActivityCounter>();
      Tuple userActivityCounter=new Tuple(userId,activityCountersMap);
      for (int i=0; i < userIds.size(); i++) {
        Number number=(Number)userIds.get(i);
        if (number.longValue() == userId) {
          userActivityCounters[i]=userActivityCounter;
          break;
        }
      }
    }
    activityCountersMap.put(activityCounter.getName(),activityCounter);
  }
  return Arrays.asList(userActivityCounters);
}
