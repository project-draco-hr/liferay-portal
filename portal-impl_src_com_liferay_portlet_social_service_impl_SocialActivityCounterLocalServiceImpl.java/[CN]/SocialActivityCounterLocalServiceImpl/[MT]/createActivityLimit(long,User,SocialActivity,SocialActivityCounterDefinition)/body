{
  final long classPK=getLimitClassPK(activity,activityCounterDefinition);
  String lockKey=StringUtil.merge(new Object[]{groupId,user.getUserId(),activity.getClassNameId(),classPK,activity.getType(),activityCounterDefinition.getName()},StringPool.POUND);
  LockProtectedAction<SocialActivityLimit> lockProtectedAction=new LockProtectedAction<SocialActivityLimit>(SocialActivityLimit.class,lockKey,PropsValues.SOCIAL_ACTIVITY_LOCK_TIMEOUT,PropsValues.SOCIAL_ACTIVITY_LOCK_RETRY_DELAY){
    @Override protected SocialActivityLimit performProtectedAction() throws PortalException, SystemException {
      SocialActivityLimit activityLimit=socialActivityLimitPersistence.fetchByG_U_C_C_A_A(groupId,user.getUserId(),activity.getClassNameId(),classPK,activity.getType(),activityCounterDefinition.getName());
      if (activityLimit == null) {
        activityLimit=socialActivityLimitLocalService.addActivityLimit(user.getUserId(),activity.getGroupId(),activity.getClassNameId(),classPK,activity.getType(),activityCounterDefinition.getName(),activityCounterDefinition.getLimitPeriod());
      }
      return activityLimit;
    }
  }
;
  lockProtectedAction.performAction();
  socialActivityLimitPersistence.cacheResult(lockProtectedAction.getReturnValue());
}
