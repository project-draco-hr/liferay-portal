{
  SocialActivityCounter activityCounter=null;
  String lockKey=getLockKey(groupId,classNameId,classPK,name,ownerType);
  Lock lock=null;
  while (true) {
    try {
      lock=lockLocalService.lock(SocialActivityCounter.class.getName(),lockKey,lockKey,false);
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to acquire activity counter lock. Retrying.");
      }
      continue;
    }
    activityCounter=fetchLatestActivityCounter(groupId,classNameId,classPK,name,ownerType,false);
    if (activityCounter == null) {
      if (!lock.isNew()) {
        continue;
      }
      Group group=groupPersistence.findByPrimaryKey(groupId);
      long activityCounterId=counterLocalService.increment();
      activityCounter=socialActivityCounterPersistence.create(activityCounterId);
      activityCounter.setGroupId(groupId);
      activityCounter.setCompanyId(group.getCompanyId());
      activityCounter.setClassNameId(classNameId);
      activityCounter.setClassPK(classPK);
      activityCounter.setName(name);
      activityCounter.setOwnerType(ownerType);
      activityCounter.setCurrentValue(currentValue);
      activityCounter.setTotalValue(totalValue);
      activityCounter.setStartPeriod(SocialCounterPeriodUtil.getStartPeriod());
      activityCounter.setEndPeriod(SocialActivityCounterConstants.END_PERIOD_UNDEFINED);
      socialActivityCounterPersistence.update(activityCounter,false);
    }
    if (lock.isNew()) {
      lockLocalService.unlock(SocialActivityCounter.class.getName(),lockKey);
    }
    break;
  }
  return activityCounter;
}
