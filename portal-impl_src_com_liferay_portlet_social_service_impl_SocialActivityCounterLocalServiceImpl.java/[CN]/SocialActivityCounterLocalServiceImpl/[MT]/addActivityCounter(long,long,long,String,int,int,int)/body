{
  SocialActivityCounter activityCounter=null;
  String lockKey=getLockKey(groupId,classNameId,classPK,name,ownerType);
  Lock lock=null;
  while (true) {
    try {
      lock=lockLocalService.lock(SocialActivityCounter.class.getName(),lockKey,lockKey,false);
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to acquire activity counter lock. Retrying.");
      }
      continue;
    }
    if (lock.isNew()) {
      try {
        activityCounter=socialActivityCounterLocalService.createActivityCounter(groupId,classNameId,classPK,name,ownerType,currentValue,totalValue);
      }
  finally {
        lockLocalService.unlock(SocialActivityCounter.class.getName(),lockKey,lockKey,false);
      }
      break;
    }
    long elapsedTime=System.currentTimeMillis() - lock.getCreateDate().getTime();
    if (elapsedTime >= _lockTimeout) {
      lockLocalService.unlock(SocialActivityCounter.class.getName(),lockKey,lock.getOwner(),false);
      if (_log.isWarnEnabled()) {
        _log.warn("Forcibly removed timeout Lock : " + lock + ". Please increase the "+ _lockTimeoutKey+ " value, if this is a false remove.");
      }
    }
 else {
      try {
        Thread.sleep(_lockRetryDelay);
      }
 catch (      InterruptedException ie) {
        if (_log.isWarnEnabled()) {
          _log.warn("Interrupted from Lock retry delay.",ie);
        }
      }
    }
  }
  return activityCounter;
}
