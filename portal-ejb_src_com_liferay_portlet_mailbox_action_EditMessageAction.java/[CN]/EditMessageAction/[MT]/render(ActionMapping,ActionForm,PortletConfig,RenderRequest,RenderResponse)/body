{
  String composeAction=ParamUtil.getString(req,"composeAction");
  if ("replyAll".equals(composeAction)) {
  }
  if ("forward".equals(composeAction) || "reply".equals(composeAction)) {
    long messageId=ParamUtil.getLong(req,"messageId");
    String folderId=ParamUtil.getString(req,"folderId");
    RenderRequestImpl reqImpl=(RenderRequestImpl)req;
    HttpServletRequest svltReq=reqImpl.getHttpServletRequest();
    MailMessage mm=MailUtil.getMessage(svltReq.getSession(),folderId,messageId);
    User user=PortalUtil.getUser(req);
    DateFormat dateFormatter=DateFormats.getDateTime(user.getLocale(),user.getTimeZone());
    req.setAttribute(WebKeys.MAIL_MESSAGE,_buildBody(mm,dateFormatter));
    if ("reply".equals(composeAction)) {
      String userEmail=PortalUtil.getUser(req).getEmailAddress();
      InternetAddress[] tos=(InternetAddress[])mm.getTo();
      InternetAddress[] ccs=(InternetAddress[])mm.getCc();
      InternetAddress[] rtos=(InternetAddress[])mm.getReplyTo();
      tos=InternetAddressUtil.removeEntries(tos,userEmail);
      ccs=InternetAddressUtil.removeEntries(ccs,userEmail);
      String tosStr=InternetAddressUtil.toString(tos);
      String rtosStr=InternetAddressUtil.toString(rtos);
      String ccsStr=InternetAddressUtil.toString(ccs);
      if (Validator.isNotNull(rtosStr)) {
        tosStr=rtosStr + StringPool.COMMA + StringPool.SPACE+ tosStr;
      }
      String[] recipients={tosStr,ccsStr};
      req.setAttribute(WebKeys.MAIL_RECIPIENTS,recipients);
      req.setAttribute(WebKeys.MAIL_SUBJECT,"Re: " + _removeSubjectPrefix(mm.getSubject()));
    }
 else {
      req.setAttribute(WebKeys.MAIL_SUBJECT,"Fw: " + _removeSubjectPrefix(mm.getSubject()));
      req.setAttribute(WebKeys.MAIL_ATTACHMENTS,mm.getRemoteAttachments());
    }
  }
  return mapping.findForward(getForward(req,"portlet.mailbox.edit_message"));
}
