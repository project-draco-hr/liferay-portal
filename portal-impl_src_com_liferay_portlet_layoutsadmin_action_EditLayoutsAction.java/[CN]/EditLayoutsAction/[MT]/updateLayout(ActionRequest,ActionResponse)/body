{
  UploadPortletRequest uploadPortletRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String cmd=ParamUtil.getString(uploadPortletRequest,Constants.CMD);
  long groupId=ParamUtil.getLong(actionRequest,"groupId");
  long liveGroupId=ParamUtil.getLong(actionRequest,"liveGroupId");
  long stagingGroupId=ParamUtil.getLong(actionRequest,"stagingGroupId");
  boolean privateLayout=ParamUtil.getBoolean(actionRequest,"privateLayout");
  long layoutId=ParamUtil.getLong(actionRequest,"layoutId");
  long parentLayoutId=ParamUtil.getLong(uploadPortletRequest,"parentLayoutId");
  Map<Locale,String> nameMap=LocalizationUtil.getLocalizationMap(actionRequest,"name");
  Map<Locale,String> titleMap=LocalizationUtil.getLocalizationMap(actionRequest,"title");
  Map<Locale,String> descriptionMap=LocalizationUtil.getLocalizationMap(actionRequest,"description");
  Map<Locale,String> keywordsMap=LocalizationUtil.getLocalizationMap(actionRequest,"keywords");
  Map<Locale,String> robotsMap=LocalizationUtil.getLocalizationMap(actionRequest,"robots");
  String type=ParamUtil.getString(uploadPortletRequest,"type");
  boolean hidden=ParamUtil.getBoolean(uploadPortletRequest,"hidden");
  String friendlyURL=ParamUtil.getString(uploadPortletRequest,"friendlyURL");
  boolean iconImage=ParamUtil.getBoolean(uploadPortletRequest,"iconImage");
  byte[] iconBytes=getIconBytes(uploadPortletRequest,"iconFileName");
  long layoutPrototypeId=ParamUtil.getLong(uploadPortletRequest,"layoutPrototypeId");
  boolean inheritFromParentLayoutId=ParamUtil.getBoolean(uploadPortletRequest,"inheritFromParentLayoutId");
  long copyLayoutId=ParamUtil.getLong(uploadPortletRequest,"copyLayoutId");
  String layoutTemplateId=ParamUtil.getString(uploadPortletRequest,"layoutTemplateId",PropsValues.DEFAULT_LAYOUT_TEMPLATE_ID);
  ServiceContext serviceContext=ServiceContextFactory.getInstance(Layout.class.getName(),actionRequest);
  Layout layout=null;
  UnicodeProperties layoutTypeSettingsProperties=null;
  String oldFriendlyURL=StringPool.BLANK;
  if (cmd.equals(Constants.ADD)) {
    if (inheritFromParentLayoutId && (parentLayoutId > 0)) {
      Layout parentLayout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,parentLayoutId);
      layout=LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,nameMap,titleMap,descriptionMap,keywordsMap,robotsMap,parentLayout.getType(),hidden,friendlyURL,serviceContext);
      LayoutServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),parentLayout.getTypeSettings());
      if (parentLayout.isTypePortlet()) {
        ActionUtil.copyPreferences(actionRequest,layout,parentLayout);
        SitesUtil.copyLookAndFeel(layout,parentLayout);
      }
    }
 else     if (layoutPrototypeId > 0) {
      LayoutPrototype layoutPrototype=LayoutPrototypeServiceUtil.getLayoutPrototype(layoutPrototypeId);
      serviceContext.setAttribute("layoutPrototypeLinkEnabled",true);
      serviceContext.setAttribute("layoutPrototypeUuid",layoutPrototype.getUuid());
      layout=LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,nameMap,titleMap,descriptionMap,keywordsMap,robotsMap,LayoutConstants.TYPE_PORTLET,hidden,friendlyURL,serviceContext);
    }
 else {
      layout=LayoutServiceUtil.addLayout(groupId,privateLayout,parentLayoutId,nameMap,titleMap,descriptionMap,keywordsMap,robotsMap,type,hidden,friendlyURL,serviceContext);
    }
    layoutTypeSettingsProperties=layout.getTypeSettingsProperties();
  }
 else {
    layout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,layoutId);
    oldFriendlyURL=layout.getFriendlyURL();
    layout=LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getParentLayoutId(),nameMap,titleMap,descriptionMap,keywordsMap,robotsMap,type,hidden,friendlyURL,Boolean.valueOf(iconImage),iconBytes,serviceContext);
    layoutTypeSettingsProperties=layout.getTypeSettingsProperties();
    if (oldFriendlyURL.equals(layout.getFriendlyURL())) {
      oldFriendlyURL=StringPool.BLANK;
    }
    UnicodeProperties formTypeSettingsProperties=PropertiesParamUtil.getProperties(actionRequest,"TypeSettingsProperties--");
    if (type.equals(LayoutConstants.TYPE_PORTLET)) {
      LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
      layoutTypePortlet.setLayoutTemplateId(themeDisplay.getUserId(),layoutTemplateId);
      if ((copyLayoutId > 0) && (copyLayoutId != layout.getLayoutId())) {
        try {
          Layout copyLayout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,copyLayoutId);
          if (copyLayout.isTypePortlet()) {
            layoutTypeSettingsProperties=copyLayout.getTypeSettingsProperties();
            ActionUtil.copyPreferences(actionRequest,layout,copyLayout);
            SitesUtil.copyLookAndFeel(layout,copyLayout);
          }
        }
 catch (        NoSuchLayoutException nsle) {
        }
      }
 else {
        layoutTypeSettingsProperties.putAll(formTypeSettingsProperties);
        LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getTypeSettings());
      }
    }
 else {
      layout.setTypeSettingsProperties(formTypeSettingsProperties);
      layoutTypeSettingsProperties.putAll(layout.getTypeSettingsProperties());
      LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,layout.getTypeSettings());
    }
    HttpServletResponse response=PortalUtil.getHttpServletResponse(actionResponse);
    LayoutSettings layoutSettings=LayoutSettings.getInstance(layout);
    EventsProcessorUtil.process(PropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,layoutSettings.getConfigurationActionUpdate(),uploadPortletRequest,response);
  }
  updateLookAndFeel(actionRequest,themeDisplay.getCompanyId(),liveGroupId,stagingGroupId,privateLayout,layout.getLayoutId(),layoutTypeSettingsProperties);
  return new Object[]{layout,oldFriendlyURL};
}
