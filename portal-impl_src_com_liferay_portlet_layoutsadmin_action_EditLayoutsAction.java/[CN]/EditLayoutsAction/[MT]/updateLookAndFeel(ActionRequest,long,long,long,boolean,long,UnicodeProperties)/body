{
  String[] devices=StringUtil.split(ParamUtil.getString(actionRequest,"devices"));
  for (  String device : devices) {
    String themeId=ParamUtil.getString(actionRequest,device + "ThemeId");
    String colorSchemeId=ParamUtil.getString(actionRequest,device + "ColorSchemeId");
    String css=ParamUtil.getString(actionRequest,device + "Css");
    boolean wapTheme=device.equals("wap");
    boolean inheritLookAndFeel=ParamUtil.getBoolean(actionRequest,device + "InheritLookAndFeel");
    if (inheritLookAndFeel) {
      themeId=ThemeImpl.getDefaultRegularThemeId(companyId);
      colorSchemeId=StringPool.BLANK;
      deleteThemeSettings(typeSettingsProperties,device);
    }
 else     if (Validator.isNotNull(themeId)) {
      Theme theme=ThemeLocalServiceUtil.getTheme(companyId,themeId,wapTheme);
      if (!theme.hasColorSchemes()) {
        colorSchemeId=StringPool.BLANK;
      }
      if (Validator.isNull(colorSchemeId)) {
        ColorScheme colorScheme=ThemeLocalServiceUtil.getColorScheme(companyId,themeId,colorSchemeId,wapTheme);
        colorSchemeId=colorScheme.getColorSchemeId();
      }
      UnicodeProperties themeSettingsProperties=PropertiesParamUtil.getProperties(actionRequest,device + "ThemeSettingsProperties--");
      for (      String key : themeSettingsProperties.keySet()) {
        String value=themeSettingsProperties.get(key);
        typeSettingsProperties.setProperty(ThemeSettingImpl.namespaceProperty(device,key),value);
      }
    }
    long groupId=liveGroupId;
    if (stagingGroupId > 0) {
      groupId=stagingGroupId;
    }
    LayoutServiceUtil.updateLayout(groupId,privateLayout,layoutId,typeSettingsProperties.toString());
    LayoutServiceUtil.updateLookAndFeel(groupId,privateLayout,layoutId,themeId,colorSchemeId,css,wapTheme);
  }
}
