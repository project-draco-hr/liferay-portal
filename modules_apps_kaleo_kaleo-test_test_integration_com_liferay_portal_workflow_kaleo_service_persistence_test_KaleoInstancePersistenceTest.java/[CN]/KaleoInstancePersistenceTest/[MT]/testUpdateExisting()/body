{
  long pk=RandomTestUtil.nextLong();
  KaleoInstance newKaleoInstance=_persistence.create(pk);
  newKaleoInstance.setGroupId(RandomTestUtil.nextLong());
  newKaleoInstance.setCompanyId(RandomTestUtil.nextLong());
  newKaleoInstance.setUserId(RandomTestUtil.nextLong());
  newKaleoInstance.setUserName(RandomTestUtil.randomString());
  newKaleoInstance.setCreateDate(RandomTestUtil.nextDate());
  newKaleoInstance.setModifiedDate(RandomTestUtil.nextDate());
  newKaleoInstance.setKaleoDefinitionId(RandomTestUtil.nextLong());
  newKaleoInstance.setKaleoDefinitionName(RandomTestUtil.randomString());
  newKaleoInstance.setKaleoDefinitionVersion(RandomTestUtil.nextInt());
  newKaleoInstance.setRootKaleoInstanceTokenId(RandomTestUtil.nextLong());
  newKaleoInstance.setClassName(RandomTestUtil.randomString());
  newKaleoInstance.setClassPK(RandomTestUtil.nextLong());
  newKaleoInstance.setCompleted(RandomTestUtil.randomBoolean());
  newKaleoInstance.setCompletionDate(RandomTestUtil.nextDate());
  newKaleoInstance.setWorkflowContext(RandomTestUtil.randomString());
  _kaleoInstances.add(_persistence.update(newKaleoInstance));
  KaleoInstance existingKaleoInstance=_persistence.findByPrimaryKey(newKaleoInstance.getPrimaryKey());
  Assert.assertEquals(existingKaleoInstance.getKaleoInstanceId(),newKaleoInstance.getKaleoInstanceId());
  Assert.assertEquals(existingKaleoInstance.getGroupId(),newKaleoInstance.getGroupId());
  Assert.assertEquals(existingKaleoInstance.getCompanyId(),newKaleoInstance.getCompanyId());
  Assert.assertEquals(existingKaleoInstance.getUserId(),newKaleoInstance.getUserId());
  Assert.assertEquals(existingKaleoInstance.getUserName(),newKaleoInstance.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoInstance.getCreateDate()),Time.getShortTimestamp(newKaleoInstance.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoInstance.getModifiedDate()),Time.getShortTimestamp(newKaleoInstance.getModifiedDate()));
  Assert.assertEquals(existingKaleoInstance.getKaleoDefinitionId(),newKaleoInstance.getKaleoDefinitionId());
  Assert.assertEquals(existingKaleoInstance.getKaleoDefinitionName(),newKaleoInstance.getKaleoDefinitionName());
  Assert.assertEquals(existingKaleoInstance.getKaleoDefinitionVersion(),newKaleoInstance.getKaleoDefinitionVersion());
  Assert.assertEquals(existingKaleoInstance.getRootKaleoInstanceTokenId(),newKaleoInstance.getRootKaleoInstanceTokenId());
  Assert.assertEquals(existingKaleoInstance.getClassName(),newKaleoInstance.getClassName());
  Assert.assertEquals(existingKaleoInstance.getClassPK(),newKaleoInstance.getClassPK());
  Assert.assertEquals(existingKaleoInstance.getCompleted(),newKaleoInstance.getCompleted());
  Assert.assertEquals(Time.getShortTimestamp(existingKaleoInstance.getCompletionDate()),Time.getShortTimestamp(newKaleoInstance.getCompletionDate()));
  Assert.assertEquals(existingKaleoInstance.getWorkflowContext(),newKaleoInstance.getWorkflowContext());
}
