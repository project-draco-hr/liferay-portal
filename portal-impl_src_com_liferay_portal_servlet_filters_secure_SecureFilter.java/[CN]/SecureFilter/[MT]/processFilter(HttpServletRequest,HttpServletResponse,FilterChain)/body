{
  String remoteAddr=request.getRemoteAddr();
  if (AccessControlUtil.isAccessAllowed(request,_hostsAllowed)) {
    if (_log.isDebugEnabled()) {
      _log.debug("Access allowed for " + remoteAddr);
    }
  }
 else {
    if (_log.isWarnEnabled()) {
      _log.warn("Access denied for " + remoteAddr);
    }
    response.sendError(HttpServletResponse.SC_FORBIDDEN,"Access denied for " + remoteAddr);
    return;
  }
  if (_log.isDebugEnabled()) {
    if (_httpsRequired) {
      _log.debug("https is required");
    }
 else {
      _log.debug("https is not required");
    }
  }
  if (_httpsRequired && !request.isSecure()) {
    if (_log.isDebugEnabled()) {
      String completeURL=HttpUtil.getCompleteURL(request);
      _log.debug("Securing " + completeURL);
    }
    StringBundler redirectURL=new StringBundler(5);
    redirectURL.append(Http.HTTPS_WITH_SLASH);
    redirectURL.append(request.getServerName());
    redirectURL.append(request.getServletPath());
    String queryString=request.getQueryString();
    if (Validator.isNotNull(queryString)) {
      redirectURL.append(StringPool.QUESTION);
      redirectURL.append(request.getQueryString());
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Redirect to " + redirectURL);
    }
    response.sendRedirect(redirectURL.toString());
  }
 else {
    String completeURL=HttpUtil.getCompleteURL(request);
    if (_log.isDebugEnabled()) {
      _log.debug("Not securing " + completeURL);
    }
    User user=null;
    try {
      user=PortalUtil.initUser(request);
    }
 catch (    NoSuchUserException nsue) {
      response.sendRedirect(completeURL);
      return;
    }
    initThreadLocals(user);
    if (!user.isDefaultUser()) {
      request=setCredentials(request,request.getSession(),user.getUserId(),null);
    }
 else {
      if (_digestAuthEnabled) {
        request=digestAuth(request,response);
      }
 else       if (_basicAuthEnabled) {
        request=basicAuth(request,response);
      }
    }
    if (request != null) {
      Class<?> clazz=getClass();
      processFilter(clazz.getName(),request,response,filterChain);
    }
  }
}
