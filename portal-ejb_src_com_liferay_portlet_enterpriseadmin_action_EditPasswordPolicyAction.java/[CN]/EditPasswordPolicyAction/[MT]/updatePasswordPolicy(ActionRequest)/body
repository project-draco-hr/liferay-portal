{
  long passwordPolicyId=ParamUtil.getLong(req,"passwordPolicyId");
  String name=ParamUtil.getString(req,"name");
  String description=ParamUtil.getString(req,"description");
  boolean changeable=ParamUtil.getBoolean(req,"changeable");
  boolean changeRequired=ParamUtil.getBoolean(req,"changeRequired");
  long minAge=ParamUtil.getLong(req,"minAge");
  boolean checkSyntax=ParamUtil.getBoolean(req,"checkSyntax");
  boolean allowDictionaryWords=ParamUtil.getBoolean(req,"allowDictionaryWords");
  int minLength=ParamUtil.getInteger(req,"minLength");
  boolean history=ParamUtil.getBoolean(req,"history");
  int historyCount=ParamUtil.getInteger(req,"historyCount");
  boolean expireable=ParamUtil.getBoolean(req,"expireable");
  long maxAge=ParamUtil.getLong(req,"maxAge");
  long warningTime=ParamUtil.getLong(req,"warningTime");
  int graceLimit=ParamUtil.getInteger(req,"graceLimit");
  boolean lockout=ParamUtil.getBoolean(req,"lockout");
  int maxFailure=ParamUtil.getInteger(req,"maxFailure");
  long lockoutDuration=ParamUtil.getLong(req,"lockoutDuration");
  long resetFailureCount=ParamUtil.getLong(req,"resetFailureCount");
  if (passwordPolicyId <= 0) {
    PasswordPolicyServiceUtil.addPasswordPolicy(name,description,changeable,changeRequired,minAge,checkSyntax,allowDictionaryWords,minLength,history,historyCount,expireable,maxAge,warningTime,graceLimit,lockout,maxFailure,lockoutDuration,resetFailureCount);
  }
 else {
    PasswordPolicyServiceUtil.updatePasswordPolicy(passwordPolicyId,name,description,changeable,changeRequired,minAge,checkSyntax,allowDictionaryWords,minLength,history,historyCount,expireable,maxAge,warningTime,graceLimit,lockout,maxFailure,lockoutDuration,resetFailureCount);
  }
}
