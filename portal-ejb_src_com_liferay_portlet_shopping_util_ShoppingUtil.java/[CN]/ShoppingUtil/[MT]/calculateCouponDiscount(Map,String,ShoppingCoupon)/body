{
  double discount=0.0;
  if ((coupon == null) || !coupon.isActive() || !coupon.hasValidDateRange()) {
    return discount;
  }
  String[] categoryIds=StringUtil.split(coupon.getLimitCategories());
  String[] skus=StringUtil.split(coupon.getLimitSkus());
  if ((categoryIds.length > 0) || (skus.length > 0)) {
    Set categoryIdsSet=new HashSet();
    for (int i=0; i < categoryIds.length; i++) {
      categoryIdsSet.add(categoryIds[i]);
    }
    Set skusSet=new HashSet();
    for (int i=0; i < skus.length; i++) {
      skusSet.add(skus[i]);
    }
    Map newItems=new HashMap();
    Iterator itr=items.entrySet().iterator();
    while (itr.hasNext()) {
      Map.Entry entry=(Map.Entry)itr.next();
      ShoppingCartItem cartItem=(ShoppingCartItem)entry.getKey();
      Integer count=(Integer)entry.getValue();
      ShoppingItem item=cartItem.getItem();
      if (((categoryIdsSet.size() > 0) && (categoryIdsSet.contains(item.getCategoryId()))) || ((skusSet.size() > 0) && (skusSet.contains(item.getSku())))) {
        newItems.put(cartItem,count);
      }
    }
    items=newItems;
  }
  double actualSubtotal=calculateActualSubtotal(items);
  if ((coupon.getMinOrder() > 0) && (coupon.getMinOrder() > actualSubtotal)) {
    return discount;
  }
  String type=coupon.getDiscountType();
  if (type.equals(ShoppingCoupon.DISCOUNT_TYPE_PERCENTAGE)) {
    discount=actualSubtotal * coupon.getDiscount();
  }
 else   if (type.equals(ShoppingCoupon.DISCOUNT_TYPE_ACTUAL)) {
    discount=coupon.getDiscount();
  }
 else   if (type.equals(ShoppingCoupon.DISCOUNT_TYPE_FREE_SHIPPING)) {
    discount=calculateShipping(items);
  }
 else   if (type.equals(ShoppingCoupon.DISCOUNT_TYPE_TAX_FREE)) {
    if (stateId != null) {
      discount=calculateTax(items,stateId);
    }
  }
  return discount;
}
