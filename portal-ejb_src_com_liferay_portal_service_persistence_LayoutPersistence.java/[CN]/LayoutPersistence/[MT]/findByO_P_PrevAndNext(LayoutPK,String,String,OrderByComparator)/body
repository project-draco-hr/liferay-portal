{
  Layout layout=findByPrimaryKey(layoutPK);
  int count=countByO_P(ownerId,parentLayoutId);
  Session session=null;
  try {
    session=openSession();
    StringBuffer query=new StringBuffer();
    query.append("FROM com.liferay.portal.model.Layout WHERE ");
    if (ownerId == null) {
      query.append("ownerId IS NULL");
    }
 else {
      query.append("ownerId = ?");
    }
    query.append(" AND ");
    if (parentLayoutId == null) {
      query.append("parentLayoutId IS NULL");
    }
 else {
      query.append("parentLayoutId = ?");
    }
    query.append(" ");
    if (obc != null) {
      query.append("ORDER BY ");
      query.append(obc.getOrderBy());
    }
 else {
      query.append("ORDER BY ");
      query.append("parentLayoutId ASC").append(", ");
      query.append("priority ASC");
    }
    Query q=session.createQuery(query.toString());
    q.setCacheable(true);
    int queryPos=0;
    if (ownerId != null) {
      q.setString(queryPos++,ownerId);
    }
    if (parentLayoutId != null) {
      q.setString(queryPos++,parentLayoutId);
    }
    Object[] objArray=QueryUtil.getPrevAndNext(q,count,obc,layout);
    Layout[] array=new LayoutImpl[3];
    array[0]=(Layout)objArray[0];
    array[1]=(Layout)objArray[1];
    array[2]=(Layout)objArray[2];
    return array;
  }
 catch (  HibernateException he) {
    throw new SystemException(he);
  }
 finally {
    closeSession(session);
  }
}
