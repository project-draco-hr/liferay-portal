{
  UploadPortletRequest uploadRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  String cmd=ParamUtil.getString(uploadRequest,Constants.CMD);
  long groupId=ParamUtil.getLong(uploadRequest,"groupId");
  String templateId=ParamUtil.getString(uploadRequest,"templateId");
  boolean autoTemplateId=ParamUtil.getBoolean(uploadRequest,"autoTemplateId");
  String structureId=ParamUtil.getString(uploadRequest,"structureId");
  String name=ParamUtil.getString(uploadRequest,"name");
  String description=ParamUtil.getString(uploadRequest,"description");
  String xsl=ParamUtil.getString(uploadRequest,"xsl");
  String xslContent=JS.decodeURIComponent(ParamUtil.getString(uploadRequest,"xslContent"));
  boolean formatXsl=ParamUtil.getBoolean(uploadRequest,"formatXsl");
  if (Validator.isNull(xsl)) {
    xsl=xslContent;
  }
  String langType=ParamUtil.getString(uploadRequest,"langType",JournalTemplateConstants.LANG_TYPE_XSL);
  boolean cacheable=ParamUtil.getBoolean(uploadRequest,"cacheable");
  boolean smallImage=ParamUtil.getBoolean(uploadRequest,"smallImage");
  String smallImageURL=ParamUtil.getString(uploadRequest,"smallImageURL");
  File smallFile=uploadRequest.getFile("smallFile");
  ServiceContext serviceContext=ServiceContextFactory.getInstance(JournalTemplate.class.getName(),actionRequest);
  JournalTemplate template=null;
  if (cmd.equals(Constants.ADD)) {
    template=JournalTemplateServiceUtil.addTemplate(groupId,templateId,autoTemplateId,structureId,name,description,xsl,formatXsl,langType,cacheable,smallImage,smallImageURL,smallFile,serviceContext);
  }
 else {
    template=JournalTemplateServiceUtil.updateTemplate(groupId,templateId,structureId,name,description,xsl,formatXsl,langType,cacheable,smallImage,smallImageURL,smallFile,serviceContext);
  }
  JournalUtil.addRecentTemplate(actionRequest,template);
  return template;
}
