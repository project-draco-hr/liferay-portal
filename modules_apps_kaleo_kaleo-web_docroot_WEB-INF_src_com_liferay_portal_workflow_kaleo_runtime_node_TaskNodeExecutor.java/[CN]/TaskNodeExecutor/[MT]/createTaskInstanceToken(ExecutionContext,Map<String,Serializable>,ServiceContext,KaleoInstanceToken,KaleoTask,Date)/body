{
  Collection<KaleoTaskAssignment> configuredKaleoTaskAssignments=kaleoTask.getKaleoTaskAssignments();
  Collection<KaleoTaskAssignment> kaleoTaskAssignments=new ArrayList<>();
  for (  KaleoTaskAssignment configuredKaleoTaskAssignment : configuredKaleoTaskAssignments) {
    String[] assigneeScriptRequiredContexts=StringUtil.split(configuredKaleoTaskAssignment.getAssigneeScriptRequiredContexts());
    ClassLoader[] classLoaders=ClassLoaderUtil.getClassLoaders(assigneeScriptRequiredContexts);
    Collection<KaleoTaskAssignment> calculatedKaleoTaskAssignments=_taskAssignmentSelector.calculateTaskAssignments(configuredKaleoTaskAssignment,executionContext,classLoaders);
    kaleoTaskAssignments.addAll(calculatedKaleoTaskAssignments);
  }
  if (kaleoTaskAssignments.isEmpty()) {
    Collection<KaleoTaskAssignment> organizationKaleoTaskAssignments=getOrganizationKaleoTaskAssignments(configuredKaleoTaskAssignments,executionContext);
    kaleoTaskAssignments.addAll(organizationKaleoTaskAssignments);
  }
  return kaleoTaskInstanceTokenLocalService.addKaleoTaskInstanceToken(kaleoInstanceToken.getKaleoInstanceTokenId(),kaleoTask.getKaleoTaskId(),kaleoTask.getName(),kaleoTaskAssignments,dueDate,workflowContext,serviceContext);
}
