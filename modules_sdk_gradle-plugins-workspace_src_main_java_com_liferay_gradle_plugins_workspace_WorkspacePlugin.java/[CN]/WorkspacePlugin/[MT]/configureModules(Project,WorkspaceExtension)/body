{
  final Project modulesProject=GradleUtil.getProject(project,workspaceExtension.getModulesDir());
  modulesProject.subprojects(new Action<Project>(){
    @Override public void execute(    Project subproject){
      Set<Project> subprojects=subproject.getSubprojects();
      if ((subprojects != null) && (subprojects.size() > 0)) {
        return;
      }
      RepositoryHandler repositoryHandler=subproject.getRepositories();
      repositoryHandler.maven(new Action<MavenArtifactRepository>(){
        @Override public void execute(        MavenArtifactRepository mavenArtifactRepository){
          mavenArtifactRepository.setUrl(_REPOSITORY_URL);
        }
      }
);
      GradleUtil.applyPlugin(subproject,LiferayPlugin.class);
      Zip zip=(Zip)GradleUtil.getTask(project,"distBundle");
      zip.into("deploy",new Closure<Void>(null){
        @SuppressWarnings("unused") public void doCall(        CopySourceSpec copySourceSpec){
          copySourceSpec.from(JavaPlugin.JAR_TASK_NAME);
        }
      }
);
      LiferayExtension liferayExtension=GradleUtil.getExtension(subproject,LiferayExtension.class);
      liferayExtension.setAppServerParentDir(workspaceExtension.getHomeDir());
    }
  }
);
}
