{
  try {
    long companyId=PortalUtil.getCompanyId(request);
    boolean enabled=PrefsPropsUtil.getBoolean(companyId,PropsKeys.OPEN_SSO_AUTH_ENABLED,PropsValues.OPEN_SSO_AUTH_ENABLED);
    String loginUrl=PrefsPropsUtil.getString(companyId,PropsKeys.OPEN_SSO_LOGIN_URL,PropsValues.OPEN_SSO_LOGIN_URL);
    String logoutUrl=PrefsPropsUtil.getString(companyId,PropsKeys.OPEN_SSO_LOGOUT_URL,PropsValues.OPEN_SSO_LOGOUT_URL);
    String serviceUrl=PrefsPropsUtil.getString(companyId,PropsKeys.OPEN_SSO_SERVICE_URL,PropsValues.OPEN_SSO_SERVICE_URL);
    if (!enabled || Validator.isNull(loginUrl) || Validator.isNull(logoutUrl)|| Validator.isNull(serviceUrl)) {
      processFilter(OpenSSOFilter.class,request,response,chain);
      return;
    }
    String requestURI=GetterUtil.getString(request.getRequestURI());
    if (requestURI.endsWith("/portal/logout")) {
      HttpSession httpSes=request.getSession();
      httpSes.invalidate();
      response.sendRedirect(logoutUrl);
    }
 else {
      boolean authenticated=false;
      try {
        authenticated=OpenSSOUtil.isAuthenticated(request,serviceUrl);
      }
 catch (      Exception e) {
        _log.error(e,e);
        processFilter(OpenSSOFilter.class,request,response,chain);
        return;
      }
      if (authenticated) {
        String newSubjectId=OpenSSOUtil.getSubjectId(request,serviceUrl);
        HttpSession httpSes=request.getSession();
        String oldSubjectId=(String)httpSes.getAttribute(_SUBJECT_ID_KEY);
        if (oldSubjectId == null) {
          httpSes.setAttribute(_SUBJECT_ID_KEY,newSubjectId);
        }
 else         if (!newSubjectId.equals(oldSubjectId)) {
          httpSes.invalidate();
          httpSes=request.getSession();
          httpSes.setAttribute(_SUBJECT_ID_KEY,newSubjectId);
        }
        processFilter(OpenSSOFilter.class,request,response,chain);
      }
 else {
        response.sendRedirect(loginUrl);
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
}
