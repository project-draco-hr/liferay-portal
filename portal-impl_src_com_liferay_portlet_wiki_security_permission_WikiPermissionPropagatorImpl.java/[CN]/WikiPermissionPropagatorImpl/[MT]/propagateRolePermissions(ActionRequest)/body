{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String selResourceNode="com.liferay.portlet.wiki.model.WikiNode";
  String selResourcePage="com.liferay.portlet.wiki.model.WikiPage";
  String resourcePrimKeyNode=ParamUtil.getString(actionRequest,"resourcePrimKey");
  Long nodeId=Long.parseLong(resourcePrimKeyNode);
  List<String> nodeActionList=ResourceActionsUtil.getModelResourceActions(selResourceNode);
  List<String> pageActionList=ResourceActionsUtil.getModelResourceActions(selResourcePage);
  List<String> pageActionExclusive=ListUtil.copy(pageActionList);
  List<String> pageNodeActionsShared=new ArrayList<String>();
  long[] roleIds=StringUtil.split(ParamUtil.getString(actionRequest,"rolesSearchContainerPrimaryKeys"),0L);
  for (  String pageActionId : pageActionList) {
    boolean actionIdFound=false;
    for (    String nodeActionId : nodeActionList) {
      if (nodeActionId.equals(pageActionId)) {
        actionIdFound=true;
      }
    }
    if (actionIdFound) {
      pageActionExclusive.remove(pageActionId);
      pageNodeActionsShared.add(pageActionId);
    }
  }
  int count=WikiPageLocalServiceUtil.getPagesCount(nodeId);
  List<WikiPage> nodePages=WikiPageLocalServiceUtil.getPages(nodeId,0,count);
  for (  WikiPage currentPage : nodePages) {
    String resourcePrimKeyPage=String.valueOf(currentPage.getResourcePrimKey());
    for (    long roleId : roleIds) {
      List<String> actionIdsFinal=new ArrayList<String>();
      List<String> nodeActionIds=ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(themeDisplay.getCompanyId(),selResourceNode,ResourceConstants.SCOPE_INDIVIDUAL,resourcePrimKeyNode,roleId,nodeActionList);
      List<String> pageActionIds=ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(themeDisplay.getCompanyId(),selResourcePage,ResourceConstants.SCOPE_INDIVIDUAL,resourcePrimKeyPage,roleId,pageActionList);
      for (      String actionId : pageActionIds) {
        boolean actionIdFound=false;
        for (        String pageExclusiveActionId : pageActionExclusive) {
          if (actionId.equals(pageExclusiveActionId)) {
            actionIdFound=true;
          }
        }
        if (actionIdFound) {
          actionIdsFinal.add(actionId);
        }
      }
      for (      String actionId : nodeActionIds) {
        boolean actionIdFound=false;
        for (        String pageNodeActionShared : pageNodeActionsShared) {
          if (actionId.equals(pageNodeActionShared)) {
            actionIdFound=true;
          }
        }
        if (actionIdFound) {
          actionIdsFinal.add(actionId);
        }
      }
      String[] actionIds=actionIdsFinal.toArray(new String[]{});
      ResourcePermissionServiceUtil.setIndividualResourcePermissions(themeDisplay.getScopeGroupId(),themeDisplay.getCompanyId(),selResourcePage,resourcePrimKeyPage,roleId,actionIds);
    }
  }
}
