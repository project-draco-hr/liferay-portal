{
  ColorModel colorModel=renderedOp.getColorModel();
  SampleModel sampleModel=renderedOp.getSampleModel();
  if (colorModel instanceof IndexColorModel) {
    IndexColorModel indexColorModel=(IndexColorModel)colorModel;
    int mapSize=indexColorModel.getMapSize();
    byte[][] data=new byte[4][mapSize];
    indexColorModel.getReds(data[0]);
    indexColorModel.getGreens(data[1]);
    indexColorModel.getBlues(data[2]);
    indexColorModel.getAlphas(data[3]);
    LookupTableJAI lookupTableJAI=new LookupTableJAI(data);
    renderedOp=LookupDescriptor.create(renderedOp,lookupTableJAI,null);
  }
 else   if (sampleModel.getNumBands() == 2) {
    int bandsCount=4;
    int width=renderedOp.getWidth();
    int height=renderedOp.getHeight();
    Raster oldData=renderedOp.getData();
    DataBuffer oldDataBuffer=oldData.getDataBuffer();
    List<Byte> byteList=new ArrayList<Byte>(width * height * bandsCount);
    List<Byte> tempByteList=new ArrayList<Byte>(4);
    for (int i=0; i < oldDataBuffer.getSize(); i++) {
      int mod=(i + 1) % 2;
      int elemPos=i;
      if (mod == 0) {
        tempByteList.add((byte)oldDataBuffer.getElem(elemPos - 1));
        tempByteList.add((byte)oldDataBuffer.getElem(elemPos - 1));
      }
      tempByteList.add((byte)oldDataBuffer.getElem(elemPos));
      if (mod == 0) {
        Collections.reverse(tempByteList);
        byteList.addAll(tempByteList);
        tempByteList.clear();
      }
    }
    byte[] data=new byte[byteList.size()];
    for (int i=0; i < byteList.size(); i++) {
      data[i]=byteList.get(i);
    }
    DataBuffer dataBuffer=new DataBufferByte(data,data.length);
    SampleModel newSampleModel=RasterFactory.createPixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,bandsCount);
    ColorModel newColorModel=PlanarImage.createColorModel(newSampleModel);
    Raster raster=RasterFactory.createWritableRaster(newSampleModel,dataBuffer,new Point(0,0));
    TiledImage tiledImage=new TiledImage(0,0,width,height,0,0,newSampleModel,newColorModel);
    tiledImage.setData(raster);
    return tiledImage;
  }
 else   if (colorModel.getTransparency() != Transparency.TRANSLUCENT) {
    int bandsCount=4;
    int width=renderedOp.getWidth();
    int height=renderedOp.getHeight();
    Raster oldData=renderedOp.getData();
    DataBuffer oldDataBuffer=oldData.getDataBuffer();
    List<Byte> byteList=new ArrayList<Byte>(width * height * bandsCount);
    List<Byte> tempByteList=new ArrayList<Byte>(4);
    for (int i=0; i < oldDataBuffer.getSize(); i++) {
      int mod=(i + 1) % 3;
      int elemPos=i;
      tempByteList.add((byte)oldDataBuffer.getElem(elemPos));
      if (mod == 0) {
        tempByteList.add((byte)255);
        Collections.reverse(tempByteList);
        byteList.addAll(tempByteList);
        tempByteList.clear();
      }
    }
    byte[] data=new byte[byteList.size()];
    for (int i=0; i < byteList.size(); i++) {
      data[i]=byteList.get(i);
    }
    DataBuffer dataBuffer=new DataBufferByte(data,data.length);
    SampleModel newSampleModel=RasterFactory.createPixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,bandsCount);
    ColorModel newColorModel=PlanarImage.createColorModel(newSampleModel);
    Raster raster=RasterFactory.createWritableRaster(newSampleModel,dataBuffer,new Point(0,0));
    TiledImage tiledImage=new TiledImage(0,0,width,height,0,0,newSampleModel,newColorModel);
    tiledImage.setData(raster);
    return tiledImage;
  }
 else {
  }
  return renderedOp;
}
