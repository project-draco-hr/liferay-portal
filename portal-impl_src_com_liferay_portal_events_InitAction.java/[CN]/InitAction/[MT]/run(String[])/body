{
  StopWatch stopWatch=null;
  if (_PRINT_TIME) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  String userLanguage=SystemProperties.get("user.language");
  String userCountry=SystemProperties.get("user.country");
  String userVariant=SystemProperties.get("user.variant");
  LocaleUtil.setDefault(userLanguage,userCountry,userVariant);
  String userTimeZone=SystemProperties.get("user.timezone");
  TimeZoneUtil.setDefault(userTimeZone);
  try {
    PortalClassLoaderUtil.setClassLoader(Thread.currentThread().getContextClassLoader());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (GetterUtil.getBoolean(SystemProperties.get("log4j.configure.on.startup"),true)) {
    ClassLoader classLoader=getClass().getClassLoader();
    Log4JUtil.configureLog4J(classLoader.getResource("META-INF/portal-log4j.xml"));
    Log4JUtil.configureLog4J(classLoader.getResource("META-INF/portal-log4j-ext.xml"));
  }
  try {
    LogFactoryUtil.setLogFactory(new CommonsLogFactoryImpl());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  SystemProperties.set(PropsUtil.RESOURCE_REPOSITORIES_ROOT,PropsUtil.get(PropsUtil.RESOURCE_REPOSITORIES_ROOT));
  BeanLocatorUtil.setBeanLocator(new BeanLocatorImpl());
  JavaProps.isJDK5();
  if ((GetterUtil.getBoolean(PropsUtil.get(PropsUtil.PORTAL_CONFIGURATION))) && (ServerDetector.isJBoss() || ServerDetector.isPramati() || ServerDetector.isWebLogic())) {
    PortalConfiguration portalConfig=new PortalConfiguration(Configuration.getConfiguration());
    Configuration.setConfiguration(portalConfig);
  }
  LiferayResourceLoader.setListeners(PropsUtil.getArray(PropsUtil.VELOCITY_ENGINE_RESOURCE_LISTENERS));
  ExtendedProperties props=new ExtendedProperties();
  props.setProperty(RuntimeConstants.RESOURCE_LOADER,"servlet");
  props.setProperty("servlet." + RuntimeConstants.RESOURCE_LOADER + ".class",LiferayResourceLoader.class.getName());
  props.setProperty(RuntimeConstants.RESOURCE_MANAGER_CLASS,PropsUtil.get(PropsUtil.VELOCITY_ENGINE_RESOURCE_MANAGER));
  props.setProperty(RuntimeConstants.RESOURCE_MANAGER_CACHE_CLASS,PropsUtil.get(PropsUtil.VELOCITY_ENGINE_RESOURCE_MANAGER_CACHE));
  props.setProperty("velocimacro.library",PropsUtil.get(PropsUtil.VELOCITY_ENGINE_VELOCIMACRO_LIBRARY));
  props.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,PropsUtil.get(PropsUtil.VELOCITY_ENGINE_LOGGER));
  props.setProperty("runtime.log.logsystem.log4j.category",PropsUtil.get(PropsUtil.VELOCITY_ENGINE_LOGGER_CATEGORY));
  Velocity.setExtendedProperties(props);
  try {
    Velocity.init();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (_PRINT_TIME) {
    System.out.println("InitAction takes " + stopWatch.getTime() + " ms");
  }
}
