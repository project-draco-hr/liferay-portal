{
  String userLanguage=SystemProperties.get("user.language");
  String userCountry=SystemProperties.get("user.country");
  String userVariant=SystemProperties.get("user.variant");
  if (Validator.isNull(userVariant)) {
    Locale.setDefault(new Locale(userLanguage,userCountry));
  }
 else {
    Locale.setDefault(new Locale(userLanguage,userCountry,userVariant));
  }
  TimeZone.setDefault(TimeZone.getTimeZone(SystemProperties.get("user.timezone")));
  try {
    PortalClassLoaderUtil.setClassLoader(Thread.currentThread().getContextClassLoader());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (GetterUtil.getBoolean(SystemProperties.get("log4j.configure.on.startup"),true) && !ServerDetector.isSun()) {
    ClassLoader classLoader=getClass().getClassLoader();
    configureLog4J(classLoader.getResource("META-INF/portal-log4j.xml"));
    configureLog4J(classLoader.getResource("META-INF/portal-log4j-ext.xml"));
  }
  try {
    LogFactoryUtil.setLogFactory(new CommonsLogFactoryImpl());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  BeanLocatorUtil.setBeanLocator(new BeanLocatorImpl());
  JavaProps.isJDK5();
  if ((GetterUtil.getBoolean(PropsUtil.get(PropsUtil.PORTAL_CONFIGURATION))) && (ServerDetector.isJBoss() || ServerDetector.isPramati() || ServerDetector.isSun()|| ServerDetector.isWebLogic())) {
    PortalConfiguration portalConfig=new PortalConfiguration(Configuration.getConfiguration());
    Configuration.setConfiguration(portalConfig);
  }
  try {
    File repositoryRoot=new File(JCRFactoryImpl.REPOSITORY_ROOT);
    if (!repositoryRoot.exists()) {
      repositoryRoot.mkdirs();
      File tempFile=new File(SystemProperties.get(SystemProperties.TMP_DIR) + File.separator + Time.getTimestamp());
      String repositoryXmlPath="com/liferay/portal/jcr/jackrabbit/dependencies/" + "repository-ext.xml";
      ClassLoader classLoader=getClass().getClassLoader();
      if (classLoader.getResource(repositoryXmlPath) == null) {
        repositoryXmlPath="com/liferay/portal/jcr/jackrabbit/dependencies/" + "repository.xml";
      }
      String content=StringUtil.read(classLoader,repositoryXmlPath);
      FileUtil.write(tempFile,content);
      FileUtil.copyFile(tempFile,new File(JCRFactoryImpl.CONFIG_FILE_PATH));
      tempFile.delete();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  LiferayResourceLoader.setListeners(PropsUtil.getArray(PropsUtil.VELOCITY_ENGINE_RESOURCE_LISTENERS));
  ExtendedProperties props=new ExtendedProperties();
  props.setProperty(RuntimeConstants.RESOURCE_LOADER,"servlet");
  props.setProperty("servlet." + RuntimeConstants.RESOURCE_LOADER + ".class",LiferayResourceLoader.class.getName());
  props.setProperty(RuntimeConstants.RESOURCE_MANAGER_CLASS,PropsUtil.get(PropsUtil.VELOCITY_ENGINE_RESOURCE_MANAGER));
  props.setProperty(RuntimeConstants.RESOURCE_MANAGER_CACHE_CLASS,PropsUtil.get(PropsUtil.VELOCITY_ENGINE_RESOURCE_MANAGER_CACHE));
  props.setProperty("velocimacro.library",PropsUtil.get(PropsUtil.VELOCITY_ENGINE_VELOCIMACRO_LIBRARY));
  props.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,PropsUtil.get(PropsUtil.VELOCITY_ENGINE_LOGGER));
  props.setProperty("runtime.log.logsystem.log4j.category",PropsUtil.get(PropsUtil.VELOCITY_ENGINE_LOGGER_CATEGORY));
  Velocity.setExtendedProperties(props);
  try {
    Velocity.init();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
