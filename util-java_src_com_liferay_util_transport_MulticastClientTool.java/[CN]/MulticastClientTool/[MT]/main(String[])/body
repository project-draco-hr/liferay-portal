{
  try {
    Map<String,Object> argsMap=processArgs(args);
    Integer port=(Integer)argsMap.get("port");
    String host=(String)argsMap.get("host");
    final Boolean gzip=(Boolean)argsMap.get("gzip");
    final Boolean shortData=(Boolean)argsMap.get("short");
    DatagramHandler handler=new DatagramHandler(){
      public void process(      DatagramPacket packet){
        byte payload[]=packet.getData();
        if (gzip.booleanValue()) {
          byte ungzipped[]=new byte[0];
          try {
            GZIPInputStream inputStream=new GZIPInputStream(new ByteArrayInputStream(payload));
            ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(payload.length);
            byte buffer[]=new byte[1500];
            int bytesRead=0;
            do {
              if (bytesRead == -1) {
                break;
              }
              bytesRead=inputStream.read(buffer,0,1500);
              if (bytesRead != -1) {
                byteArrayOutputStream.write(buffer,0,bytesRead);
              }
            }
 while (true);
            ungzipped=byteArrayOutputStream.toByteArray();
            inputStream.close();
            byteArrayOutputStream.close();
            payload=ungzipped;
          }
 catch (          IOException e) {
            _log.error(e);
          }
        }
        if (shortData.booleanValue()) {
          byte[] temp=new byte[96];
          System.arraycopy(payload,0,temp,0,96);
          payload=temp;
        }
        StringBuilder sb=new StringBuilder();
        sb.append("[");
        sb.append(packet.getSocketAddress());
        sb.append("] ");
        sb.append(new String(payload));
        _log.info(sb);
      }
      public void errorReceived(      Throwable t){
        _log.error(t);
      }
    }
;
    MulticastTransport transport=new MulticastTransport(handler,host,port);
    if (shortData.booleanValue()) {
      _log.info("Truncating to 96 bytes.");
    }
    _log.info("Started up and waiting...");
    transport.connect();
synchronized (transport) {
      transport.wait();
    }
  }
 catch (  Exception e) {
    _log.error(e);
    System.err.println("Usage: java -classpath " + "util-java.jar:commons-logging.jar " + "com.liferay.util.transport.MulticastClientTool [-g] [-s] "+ "-h [multicastAddress] -p [port]");
    System.exit(1);
  }
}
