{
  long pk=RandomTestUtil.nextLong();
  ResourceTypePermission newResourceTypePermission=_persistence.create(pk);
  newResourceTypePermission.setMvccVersion(RandomTestUtil.nextLong());
  newResourceTypePermission.setCompanyId(RandomTestUtil.nextLong());
  newResourceTypePermission.setGroupId(RandomTestUtil.nextLong());
  newResourceTypePermission.setName(RandomTestUtil.randomString());
  newResourceTypePermission.setRoleId(RandomTestUtil.nextLong());
  newResourceTypePermission.setActionIds(RandomTestUtil.nextLong());
  _models.add(_persistence.update(newResourceTypePermission));
  ResourceTypePermission existingResourceTypePermission=_persistence.findByPrimaryKey(newResourceTypePermission.getPrimaryKey());
  Assert.assertEquals(existingResourceTypePermission.getMvccVersion(),newResourceTypePermission.getMvccVersion());
  Assert.assertEquals(existingResourceTypePermission.getResourceTypePermissionId(),newResourceTypePermission.getResourceTypePermissionId());
  Assert.assertEquals(existingResourceTypePermission.getCompanyId(),newResourceTypePermission.getCompanyId());
  Assert.assertEquals(existingResourceTypePermission.getGroupId(),newResourceTypePermission.getGroupId());
  Assert.assertEquals(existingResourceTypePermission.getName(),newResourceTypePermission.getName());
  Assert.assertEquals(existingResourceTypePermission.getRoleId(),newResourceTypePermission.getRoleId());
  Assert.assertEquals(existingResourceTypePermission.getActionIds(),newResourceTypePermission.getActionIds());
}
