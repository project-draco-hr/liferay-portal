{
  String systemDefaultLanguageId=LocaleUtil.toLanguageId(LocaleUtil.getDefault());
  if (!Validator.isXml(xml)) {
    if (useDefault || requestedLanguageId.equals(systemDefaultLanguageId)) {
      return xml;
    }
 else {
      return defaultValue;
    }
  }
  String value=_getCachedValue(xml,requestedLanguageId,useDefault);
  if (value != null) {
    return value;
  }
  value=defaultValue;
  String priorityLanguageId=null;
  Locale requestedLocale=LocaleUtil.fromLanguageId(requestedLanguageId);
  if (useDefault && LanguageUtil.isDuplicateLanguageCode(requestedLocale.getLanguage())) {
    Locale priorityLocale=LanguageUtil.getLocale(requestedLocale.getLanguage());
    if (!requestedLanguageId.equals(priorityLanguageId)) {
      priorityLanguageId=LocaleUtil.toLanguageId(priorityLocale);
    }
  }
  XMLStreamReader xmlStreamReader=null;
  ClassLoader portalClassLoader=ClassLoaderUtil.getPortalClassLoader();
  ClassLoader contextClassLoader=ClassLoaderUtil.getContextClassLoader();
  try {
    if (contextClassLoader != portalClassLoader) {
      ClassLoaderUtil.setContextClassLoader(portalClassLoader);
    }
    XMLInputFactory xmlInputFactory=XMLInputFactory.newInstance();
    xmlStreamReader=xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml));
    String defaultLanguageId=StringPool.BLANK;
    if (xmlStreamReader.hasNext()) {
      xmlStreamReader.nextTag();
      defaultLanguageId=xmlStreamReader.getAttributeValue(null,_DEFAULT_LOCALE);
      if (Validator.isNull(defaultLanguageId)) {
        defaultLanguageId=systemDefaultLanguageId;
      }
    }
    String priorityValue=defaultValue;
    while (xmlStreamReader.hasNext()) {
      int event=xmlStreamReader.next();
      if (event == XMLStreamConstants.START_ELEMENT) {
        String languageId=xmlStreamReader.getAttributeValue(null,_LANGUAGE_ID);
        if (Validator.isNull(languageId)) {
          languageId=defaultLanguageId;
        }
        if (languageId.equals(defaultLanguageId) || languageId.equals(priorityLanguageId) || languageId.equals(requestedLanguageId)) {
          String text=xmlStreamReader.getElementText();
          if (languageId.equals(defaultLanguageId)) {
            defaultValue=text;
          }
          if (languageId.equals(priorityLanguageId)) {
            priorityValue=text;
          }
          if (languageId.equals(requestedLanguageId)) {
            value=text;
          }
          if (Validator.isNotNull(value)) {
            break;
          }
        }
      }
 else       if (event == XMLStreamConstants.END_DOCUMENT) {
        break;
      }
    }
    if (useDefault && Validator.isNotNull(priorityLanguageId) && Validator.isNull(value)&& Validator.isNotNull(priorityValue)) {
      value=priorityValue;
    }
    if (useDefault && Validator.isNull(value)) {
      value=defaultValue;
    }
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e,e);
    }
  }
 finally {
    if (contextClassLoader != portalClassLoader) {
      ClassLoaderUtil.setContextClassLoader(contextClassLoader);
    }
    if (xmlStreamReader != null) {
      try {
        xmlStreamReader.close();
      }
 catch (      Exception e) {
      }
    }
  }
  _setCachedValue(xml,requestedLanguageId,useDefault,value);
  return value;
}
