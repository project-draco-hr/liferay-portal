{
  Session session=null;
  try {
    session=openSession();
    StringBundler sb=new StringBundler(5);
    sb.append(StringPool.OPEN_PARENTHESIS);
    String sql=CustomSQLUtil.get(FIND_BY_G_F);
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,JournalFolder.class.getName(),"JournalFolder.folderId",groupId);
    }
    sb.append(sql);
    sb.append(") UNION ALL (");
    sb.append(getArticlesSQL(groupId,inlineSQLHelper));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    sql=updateSQL(sb.toString(),folderId);
    sql=CustomSQLUtil.replaceOrderBy(sql,obc);
    SQLQuery q=session.createSQLQuery(sql);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    if (folderId >= 0) {
      qPos.add(folderId);
    }
    qPos.add(groupId);
    if (folderId >= 0) {
      qPos.add(folderId);
    }
    List<Object> models=new ArrayList<Object>();
    Iterator<Object[]> itr=(Iterator<Object[]>)QueryUtil.iterate(q,getDialect(),start,end);
    while (itr.hasNext()) {
      Object[] array=itr.next();
      BigInteger curFolderId=(BigInteger)array[0];
      BigInteger modelFolder=(BigInteger)array[4];
      Object obj=null;
      if (modelFolder.intValue() == 1) {
        obj=JournalFolderUtil.findByPrimaryKey(curFolderId.intValue());
      }
 else {
        String articleId=(String)array[5];
        Double version=(Double)array[6];
        obj=JournalArticleUtil.findByG_A_V(groupId,articleId,version);
      }
      models.add(obj);
    }
    return models;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
