{
  Object[] finderArgs=new Object[]{repoGroupId,repoArtifactId};
  Object result=null;
  if (retrieveFromCache) {
    result=finderCache.getResult(FINDER_PATH_FETCH_BY_RG_RA,finderArgs,this);
  }
  if (result instanceof SCProductEntry) {
    SCProductEntry scProductEntry=(SCProductEntry)result;
    if (!Validator.equals(repoGroupId,scProductEntry.getRepoGroupId()) || !Validator.equals(repoArtifactId,scProductEntry.getRepoArtifactId())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_SCPRODUCTENTRY_WHERE);
    boolean bindRepoGroupId=false;
    if (repoGroupId == null) {
      query.append(_FINDER_COLUMN_RG_RA_REPOGROUPID_1);
    }
 else     if (repoGroupId.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_RG_RA_REPOGROUPID_3);
    }
 else {
      bindRepoGroupId=true;
      query.append(_FINDER_COLUMN_RG_RA_REPOGROUPID_2);
    }
    boolean bindRepoArtifactId=false;
    if (repoArtifactId == null) {
      query.append(_FINDER_COLUMN_RG_RA_REPOARTIFACTID_1);
    }
 else     if (repoArtifactId.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_RG_RA_REPOARTIFACTID_3);
    }
 else {
      bindRepoArtifactId=true;
      query.append(_FINDER_COLUMN_RG_RA_REPOARTIFACTID_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindRepoGroupId) {
        qPos.add(StringUtil.toLowerCase(repoGroupId));
      }
      if (bindRepoArtifactId) {
        qPos.add(StringUtil.toLowerCase(repoArtifactId));
      }
      List<SCProductEntry> list=q.list();
      if (list.isEmpty()) {
        finderCache.putResult(FINDER_PATH_FETCH_BY_RG_RA,finderArgs,list);
      }
 else {
        if ((list.size() > 1) && _log.isWarnEnabled()) {
          _log.warn("SCProductEntryPersistenceImpl.fetchByRG_RA(String, String, boolean) with parameters (" + StringUtil.merge(finderArgs) + ") yields a result set with more than 1 result. This violates the logical unique restriction. There is no order guarantee on which result is returned by this finder.");
        }
        SCProductEntry scProductEntry=list.get(0);
        result=scProductEntry;
        cacheResult(scProductEntry);
        if ((scProductEntry.getRepoGroupId() == null) || !scProductEntry.getRepoGroupId().equals(repoGroupId) || (scProductEntry.getRepoArtifactId() == null)|| !scProductEntry.getRepoArtifactId().equals(repoArtifactId)) {
          finderCache.putResult(FINDER_PATH_FETCH_BY_RG_RA,finderArgs,scProductEntry);
        }
      }
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_FETCH_BY_RG_RA,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (SCProductEntry)result;
  }
}
