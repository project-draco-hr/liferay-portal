{
  XMLSecurityTest xmlInputFactoryTest=new XMLSecurityTest(){
    @Override public void run(    String xml) throws Exception {
      XMLEventReader xmlEventReader=_secureXMLFactoryProvider.newXMLInputFactory().createXMLEventReader(new StringReader(xml));
      while (xmlEventReader.hasNext()) {
        xmlEventReader.next();
      }
    }
  }
;
  runXMLSecurityTest(xmlInputFactoryTest,_xmlBombBillionLaughsXML,OutOfMemoryError.class,"Billion Laughs XML attack doesn't work!",null,"Vulnerable to Billion Laughs XML attack!");
  runXMLSecurityTest(xmlInputFactoryTest,_xmlBombQuadraticBlowupXML,OutOfMemoryError.class,"Quadratic Blowup XML attack doesn't work!",null,"Vulnerable to Quadratic Blowup XML attack!");
  runXMLSecurityTest(xmlInputFactoryTest,_xxeGeneralEntitiesXML,ConnectException.class,"General Entities XXE attack using SYSTEM entity doesn't work!",null,"Vulnerable to General Entities XXE attack using SYSTEM entity!");
  runXMLSecurityTest(xmlInputFactoryTest,_xxeGeneralEntitiesXML2,ConnectException.class,"General Entities XXE attack using PUBLIC entity doesn't work!",null,"Vulnerable to  General Entities XXE attack using PUBLIC entity!");
  runXMLSecurityTest(xmlInputFactoryTest,_xxeParameterEntitiesXML,ConnectException.class,"Parameter Entities XXE using SYSTEM entity doesn't work!",null,"Vulnerable to Parameter Entities XXE using SYSTEM entity!");
  runXMLSecurityTest(xmlInputFactoryTest,_xxeParameterEntitiesXML2,ConnectException.class,"Parameter Entities XXE attack using PUBLIC entity doesn't work!",null,"Vulnerable to Parameter Entities XXE attack using PUBLIC entity!");
}
