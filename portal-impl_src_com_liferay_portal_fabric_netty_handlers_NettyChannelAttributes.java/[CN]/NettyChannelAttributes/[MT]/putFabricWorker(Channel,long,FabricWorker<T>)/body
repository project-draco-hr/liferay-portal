{
  Attribute<Map<Long,FabricWorker<?>>> attribute=channel.attr(_fabricWorkersKey);
  Map<Long,FabricWorker<?>> fabricWorkers=attribute.get();
  if (fabricWorkers == null) {
    fabricWorkers=new ConcurrentHashMap<Long,FabricWorker<?>>();
    Map<Long,FabricWorker<?>> previousFabricWorkers=attribute.setIfAbsent(fabricWorkers);
    if (previousFabricWorkers != null) {
      fabricWorkers=previousFabricWorkers;
    }
  }
  fabricWorkers.put(id,fabricWorker);
  NoticeableFuture<T> noticeableFuture=fabricWorker.getProcessNoticeableFuture();
  final Map<Long,FabricWorker<?>> fabricWorkersRef=fabricWorkers;
  noticeableFuture.addFutureListener(new FutureListener<T>(){
    @Override public void complete(    Future<T> future){
      fabricWorkersRef.remove(id);
    }
  }
);
}
