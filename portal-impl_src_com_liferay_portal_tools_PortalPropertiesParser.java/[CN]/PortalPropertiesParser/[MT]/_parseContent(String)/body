{
  List<PropertyData> propertyDataList=new ArrayList<PropertyData>();
  String[] lines=StringUtil.split(content,"\n");
  PropertyData propertyData=new PropertyData();
  boolean hidden;
  for (int i=0; i < lines.length; i++) {
    String line=lines[i];
    line=line.trim();
    hidden=false;
    if ((line.length() >= 1) && (line.charAt(0) == '#')) {
      if ((line.length() >= 2) && (line.charAt(1) != ' ')) {
        line=line.substring(1);
        hidden=true;
      }
 else {
        propertyData.description+=line.substring(1) + '\n';
        continue;
      }
    }
    int equalNdx=line.indexOf('=');
    if (equalNdx == -1) {
      continue;
    }
    propertyData.name=line.substring(0,equalNdx);
    propertyData.anchor=nameToAnchor(propertyData.name + '+' + i);
    propertyData.hidden=hidden;
    propertyData.prefix=_makePrefix(propertyData.name,PARAM_MIN_LEFT,PARAM_DEEP_RIGHT);
    String value=line.substring(equalNdx + 1);
    while (value.endsWith("\\")) {
      value=value.substring(0,value.length() - 1);
      i++;
      value+=lines[i].trim();
    }
    propertyData.value=value;
    if (propertyData.description.length() == 0) {
      if (propertyDataList.isEmpty() == false) {
        PropertyData previousData=propertyDataList.get(propertyDataList.size() - 1);
        if (previousData.name.equals(propertyData.name)) {
          if (previousData.value.equals(propertyData.value)) {
            propertyData=new PropertyData();
            continue;
          }
          previousData.alternativeValues.add(propertyData.value);
          propertyData=new PropertyData();
          continue;
        }
      }
    }
    propertyDataList.add(propertyData);
    propertyData=new PropertyData();
  }
  return propertyDataList;
}
