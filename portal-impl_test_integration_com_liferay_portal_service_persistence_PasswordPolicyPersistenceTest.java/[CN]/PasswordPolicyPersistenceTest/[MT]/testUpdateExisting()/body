{
  long pk=RandomTestUtil.nextLong();
  PasswordPolicy newPasswordPolicy=_persistence.create(pk);
  newPasswordPolicy.setMvccVersion(RandomTestUtil.nextLong());
  newPasswordPolicy.setUuid(RandomTestUtil.randomString());
  newPasswordPolicy.setCompanyId(RandomTestUtil.nextLong());
  newPasswordPolicy.setUserId(RandomTestUtil.nextLong());
  newPasswordPolicy.setUserName(RandomTestUtil.randomString());
  newPasswordPolicy.setCreateDate(RandomTestUtil.nextDate());
  newPasswordPolicy.setModifiedDate(RandomTestUtil.nextDate());
  newPasswordPolicy.setDefaultPolicy(RandomTestUtil.randomBoolean());
  newPasswordPolicy.setName(RandomTestUtil.randomString());
  newPasswordPolicy.setDescription(RandomTestUtil.randomString());
  newPasswordPolicy.setChangeable(RandomTestUtil.randomBoolean());
  newPasswordPolicy.setChangeRequired(RandomTestUtil.randomBoolean());
  newPasswordPolicy.setMinAge(RandomTestUtil.nextLong());
  newPasswordPolicy.setCheckSyntax(RandomTestUtil.randomBoolean());
  newPasswordPolicy.setAllowDictionaryWords(RandomTestUtil.randomBoolean());
  newPasswordPolicy.setMinAlphanumeric(RandomTestUtil.nextInt());
  newPasswordPolicy.setMinLength(RandomTestUtil.nextInt());
  newPasswordPolicy.setMinLowerCase(RandomTestUtil.nextInt());
  newPasswordPolicy.setMinNumbers(RandomTestUtil.nextInt());
  newPasswordPolicy.setMinSymbols(RandomTestUtil.nextInt());
  newPasswordPolicy.setMinUpperCase(RandomTestUtil.nextInt());
  newPasswordPolicy.setRegex(RandomTestUtil.randomString());
  newPasswordPolicy.setHistory(RandomTestUtil.randomBoolean());
  newPasswordPolicy.setHistoryCount(RandomTestUtil.nextInt());
  newPasswordPolicy.setExpireable(RandomTestUtil.randomBoolean());
  newPasswordPolicy.setMaxAge(RandomTestUtil.nextLong());
  newPasswordPolicy.setWarningTime(RandomTestUtil.nextLong());
  newPasswordPolicy.setGraceLimit(RandomTestUtil.nextInt());
  newPasswordPolicy.setLockout(RandomTestUtil.randomBoolean());
  newPasswordPolicy.setMaxFailure(RandomTestUtil.nextInt());
  newPasswordPolicy.setLockoutDuration(RandomTestUtil.nextLong());
  newPasswordPolicy.setRequireUnlock(RandomTestUtil.randomBoolean());
  newPasswordPolicy.setResetFailureCount(RandomTestUtil.nextLong());
  newPasswordPolicy.setResetTicketMaxAge(RandomTestUtil.nextLong());
  _persistence.update(newPasswordPolicy);
  PasswordPolicy existingPasswordPolicy=_persistence.findByPrimaryKey(newPasswordPolicy.getPrimaryKey());
  Assert.assertEquals(existingPasswordPolicy.getMvccVersion(),newPasswordPolicy.getMvccVersion());
  Assert.assertEquals(existingPasswordPolicy.getUuid(),newPasswordPolicy.getUuid());
  Assert.assertEquals(existingPasswordPolicy.getPasswordPolicyId(),newPasswordPolicy.getPasswordPolicyId());
  Assert.assertEquals(existingPasswordPolicy.getCompanyId(),newPasswordPolicy.getCompanyId());
  Assert.assertEquals(existingPasswordPolicy.getUserId(),newPasswordPolicy.getUserId());
  Assert.assertEquals(existingPasswordPolicy.getUserName(),newPasswordPolicy.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingPasswordPolicy.getCreateDate()),Time.getShortTimestamp(newPasswordPolicy.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingPasswordPolicy.getModifiedDate()),Time.getShortTimestamp(newPasswordPolicy.getModifiedDate()));
  Assert.assertEquals(existingPasswordPolicy.getDefaultPolicy(),newPasswordPolicy.getDefaultPolicy());
  Assert.assertEquals(existingPasswordPolicy.getName(),newPasswordPolicy.getName());
  Assert.assertEquals(existingPasswordPolicy.getDescription(),newPasswordPolicy.getDescription());
  Assert.assertEquals(existingPasswordPolicy.getChangeable(),newPasswordPolicy.getChangeable());
  Assert.assertEquals(existingPasswordPolicy.getChangeRequired(),newPasswordPolicy.getChangeRequired());
  Assert.assertEquals(existingPasswordPolicy.getMinAge(),newPasswordPolicy.getMinAge());
  Assert.assertEquals(existingPasswordPolicy.getCheckSyntax(),newPasswordPolicy.getCheckSyntax());
  Assert.assertEquals(existingPasswordPolicy.getAllowDictionaryWords(),newPasswordPolicy.getAllowDictionaryWords());
  Assert.assertEquals(existingPasswordPolicy.getMinAlphanumeric(),newPasswordPolicy.getMinAlphanumeric());
  Assert.assertEquals(existingPasswordPolicy.getMinLength(),newPasswordPolicy.getMinLength());
  Assert.assertEquals(existingPasswordPolicy.getMinLowerCase(),newPasswordPolicy.getMinLowerCase());
  Assert.assertEquals(existingPasswordPolicy.getMinNumbers(),newPasswordPolicy.getMinNumbers());
  Assert.assertEquals(existingPasswordPolicy.getMinSymbols(),newPasswordPolicy.getMinSymbols());
  Assert.assertEquals(existingPasswordPolicy.getMinUpperCase(),newPasswordPolicy.getMinUpperCase());
  Assert.assertEquals(existingPasswordPolicy.getRegex(),newPasswordPolicy.getRegex());
  Assert.assertEquals(existingPasswordPolicy.getHistory(),newPasswordPolicy.getHistory());
  Assert.assertEquals(existingPasswordPolicy.getHistoryCount(),newPasswordPolicy.getHistoryCount());
  Assert.assertEquals(existingPasswordPolicy.getExpireable(),newPasswordPolicy.getExpireable());
  Assert.assertEquals(existingPasswordPolicy.getMaxAge(),newPasswordPolicy.getMaxAge());
  Assert.assertEquals(existingPasswordPolicy.getWarningTime(),newPasswordPolicy.getWarningTime());
  Assert.assertEquals(existingPasswordPolicy.getGraceLimit(),newPasswordPolicy.getGraceLimit());
  Assert.assertEquals(existingPasswordPolicy.getLockout(),newPasswordPolicy.getLockout());
  Assert.assertEquals(existingPasswordPolicy.getMaxFailure(),newPasswordPolicy.getMaxFailure());
  Assert.assertEquals(existingPasswordPolicy.getLockoutDuration(),newPasswordPolicy.getLockoutDuration());
  Assert.assertEquals(existingPasswordPolicy.getRequireUnlock(),newPasswordPolicy.getRequireUnlock());
  Assert.assertEquals(existingPasswordPolicy.getResetFailureCount(),newPasswordPolicy.getResetFailureCount());
  Assert.assertEquals(existingPasswordPolicy.getResetTicketMaxAge(),newPasswordPolicy.getResetTicketMaxAge());
}
