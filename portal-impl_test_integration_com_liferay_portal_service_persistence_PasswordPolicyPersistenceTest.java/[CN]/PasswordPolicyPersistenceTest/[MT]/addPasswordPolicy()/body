{
  long pk=ServiceTestUtil.nextLong();
  PasswordPolicy passwordPolicy=_persistence.create(pk);
  passwordPolicy.setCompanyId(ServiceTestUtil.nextLong());
  passwordPolicy.setUserId(ServiceTestUtil.nextLong());
  passwordPolicy.setUserName(ServiceTestUtil.randomString());
  passwordPolicy.setCreateDate(ServiceTestUtil.nextDate());
  passwordPolicy.setModifiedDate(ServiceTestUtil.nextDate());
  passwordPolicy.setDefaultPolicy(ServiceTestUtil.randomBoolean());
  passwordPolicy.setName(ServiceTestUtil.randomString());
  passwordPolicy.setDescription(ServiceTestUtil.randomString());
  passwordPolicy.setChangeable(ServiceTestUtil.randomBoolean());
  passwordPolicy.setChangeRequired(ServiceTestUtil.randomBoolean());
  passwordPolicy.setMinAge(ServiceTestUtil.nextLong());
  passwordPolicy.setCheckSyntax(ServiceTestUtil.randomBoolean());
  passwordPolicy.setAllowDictionaryWords(ServiceTestUtil.randomBoolean());
  passwordPolicy.setMinAlphanumeric(ServiceTestUtil.nextInt());
  passwordPolicy.setMinLength(ServiceTestUtil.nextInt());
  passwordPolicy.setMinLowerCase(ServiceTestUtil.nextInt());
  passwordPolicy.setMinNumbers(ServiceTestUtil.nextInt());
  passwordPolicy.setMinSymbols(ServiceTestUtil.nextInt());
  passwordPolicy.setMinUpperCase(ServiceTestUtil.nextInt());
  passwordPolicy.setRegex(ServiceTestUtil.randomString());
  passwordPolicy.setHistory(ServiceTestUtil.randomBoolean());
  passwordPolicy.setHistoryCount(ServiceTestUtil.nextInt());
  passwordPolicy.setExpireable(ServiceTestUtil.randomBoolean());
  passwordPolicy.setMaxAge(ServiceTestUtil.nextLong());
  passwordPolicy.setWarningTime(ServiceTestUtil.nextLong());
  passwordPolicy.setGraceLimit(ServiceTestUtil.nextInt());
  passwordPolicy.setLockout(ServiceTestUtil.randomBoolean());
  passwordPolicy.setMaxFailure(ServiceTestUtil.nextInt());
  passwordPolicy.setLockoutDuration(ServiceTestUtil.nextLong());
  passwordPolicy.setRequireUnlock(ServiceTestUtil.randomBoolean());
  passwordPolicy.setResetFailureCount(ServiceTestUtil.nextLong());
  passwordPolicy.setResetTicketMaxAge(ServiceTestUtil.nextLong());
  _persistence.update(passwordPolicy);
  return passwordPolicy;
}
