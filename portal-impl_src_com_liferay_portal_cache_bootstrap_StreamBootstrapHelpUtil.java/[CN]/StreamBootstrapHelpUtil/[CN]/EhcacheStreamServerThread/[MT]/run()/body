{
  Socket socket=null;
  try {
    try {
      socket=_serverSocket.accept();
    }
 catch (    SocketTimeoutException ste) {
      if (_log.isDebugEnabled()) {
        _log.debug("Terminating the socket thread " + getName() + " that the client requested but never used");
      }
      return;
    }
 finally {
      _serverSocket.close();
    }
    socket.shutdownInput();
    ObjectOutputStream objectOutputStream=new AnnotatedObjectOutputStream(socket.getOutputStream());
    PortalCacheManager<? extends Serializable,?> portalCacheManager=PortalCacheProvider.getPortalCacheManager(_portalCacheManagerName);
    for (    String portalCacheName : _portalCacheNames) {
      PortalCache<Serializable,Serializable> portalCache=(PortalCache<Serializable,Serializable>)portalCacheManager.getCache(portalCacheName);
      if (portalCache == null) {
        _skipBootstrapThreadLocal.set(Boolean.TRUE);
        try {
          portalCacheManager.getCache(portalCacheName);
        }
  finally {
          _skipBootstrapThreadLocal.remove();
        }
        continue;
      }
      objectOutputStream.writeObject(portalCacheName);
      List<Serializable> keys=portalCache.getKeys();
      for (      Serializable key : keys) {
        Serializable value=portalCache.get(key);
        CacheElement cacheElement=new CacheElement(key,value);
        objectOutputStream.writeObject(cacheElement);
      }
    }
    objectOutputStream.writeObject(_COMMAND_SOCKET_CLOSE);
    objectOutputStream.close();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
  }
}
