{
  outputOpenTag(charBuffer,writer,_MARKER_STYLE_OPEN);
  int length=KMPSearch.search(charBuffer,_MARKER_STYLE_CLOSE,_MARKER_STYLE_CLOSE_NEXTS);
  if (length == -1) {
    if (_log.isWarnEnabled()) {
      _log.warn("Missing </style>");
    }
    return;
  }
  if (length == 0) {
    outputCloseTag(charBuffer,writer,_MARKER_STYLE_CLOSE);
    return;
  }
  String content=extractContent(charBuffer,length);
  String minifiedContent=content;
  if (PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SIZE > 0) {
    CacheKeyGenerator cacheKeyGenerator=CacheKeyGeneratorUtil.getCacheKeyGenerator(StripFilter.class.getName());
    String key=String.valueOf(cacheKeyGenerator.getCacheKey(content));
    minifiedContent=_minifierCache.get(key);
    if (minifiedContent == null) {
      if (PropsValues.STRIP_CSS_SASS_ENABLED) {
        try {
          content=DynamicCSSUtil.parseSass(_servletContext,request,null,content);
        }
 catch (        ScriptingException se) {
          _log.error("Unable to parse SASS on CSS " + key,se);
          if (_log.isDebugEnabled()) {
            _log.debug(content);
          }
          if (response != null) {
            response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_NO_CACHE_VALUE);
          }
        }
      }
      minifiedContent=MinifierUtil.minifyCss(content);
      boolean skipCache=false;
      for (      String skipCss : PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SKIP_CSS) {
        if (minifiedContent.contains(skipCss)) {
          skipCache=true;
          break;
        }
      }
      if (!skipCache) {
        _minifierCache.put(key,minifiedContent);
      }
    }
  }
  if (Validator.isNotNull(minifiedContent)) {
    writer.write(minifiedContent);
  }
  outputCloseTag(charBuffer,writer,_MARKER_STYLE_CLOSE);
}
