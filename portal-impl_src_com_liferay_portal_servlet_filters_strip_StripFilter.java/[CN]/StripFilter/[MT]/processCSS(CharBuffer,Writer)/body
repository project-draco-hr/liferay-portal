{
  outputOpenTag(charBuffer,writer,_MARKER_STYLE_OPEN);
  int length=KMPSearch.search(charBuffer,_MARKER_STYLE_CLOSE,_MARKER_STYLE_CLOSE_NEXTS);
  if (length == -1) {
    _log.error("Missing </style>");
    return;
  }
  if (length == 0) {
    outputCloseTag(charBuffer,writer,_MARKER_STYLE_CLOSE);
    return;
  }
  String content=charBuffer.subSequence(0,length).toString();
  int position=charBuffer.position();
  charBuffer.position(position + length);
  String minifiedContent=content;
  if (PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SIZE > 0) {
    String key=String.valueOf(content.hashCode());
    minifiedContent=_minifierCache.get(key);
    if (minifiedContent == null) {
      minifiedContent=MinifierUtil.minifyCss(content);
      boolean skipCache=false;
      for (      String skipCss : PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SKIP_CSS) {
        if (minifiedContent.contains(skipCss)) {
          skipCache=true;
          break;
        }
      }
      if (!skipCache) {
        _minifierCache.put(key,minifiedContent);
      }
    }
  }
  if (!Validator.isNull(minifiedContent)) {
    writer.write(minifiedContent);
  }
  outputCloseTag(charBuffer,writer,_MARKER_STYLE_CLOSE);
}
