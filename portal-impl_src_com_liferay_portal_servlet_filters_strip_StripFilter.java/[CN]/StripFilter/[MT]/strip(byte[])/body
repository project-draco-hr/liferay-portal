{
  UnsyncByteArrayOutputStream newBytes=new UnsyncByteArrayOutputStream((int)(oldByteArray.length * _COMPRESSION_RATE));
  int count=countContinuousWhiteSpace(oldByteArray,0);
  for (int i=count; i < oldByteArray.length; i++) {
    byte b=oldByteArray[i];
    char c=(char)b;
    if (c == CharPool.LESS_THAN) {
      if (hasMarker(oldByteArray,i,_MARKER_PRE_OPEN)) {
        i=processPre(oldByteArray,newBytes,i) - 1;
        continue;
      }
 else       if (hasMarker(oldByteArray,i,_MARKER_TEXTAREA_OPEN)) {
        i=processTextArea(oldByteArray,newBytes,i) - 1;
        continue;
      }
 else       if (hasMarker(oldByteArray,i,_MARKER_JS_OPEN)) {
        i=processJavaScript(oldByteArray,newBytes,i,_MARKER_JS_OPEN) - 1;
        continue;
      }
 else       if (hasMarker(oldByteArray,i,_MARKER_SCRIPT_OPEN)) {
        i=processJavaScript(oldByteArray,newBytes,i,_MARKER_SCRIPT_OPEN) - 1;
        continue;
      }
 else       if (hasMarker(oldByteArray,i,_MARKER_STYLE_OPEN)) {
        i=processCSS(oldByteArray,newBytes,i) - 1;
        continue;
      }
    }
 else     if (c == CharPool.GREATER_THAN) {
      newBytes.write(c);
      int spaceCount=countContinuousWhiteSpace(oldByteArray,i + 1);
      if (spaceCount > 0) {
        i=i + spaceCount;
        newBytes.write(CharPool.SPACE);
      }
      continue;
    }
    int spaceCount=countContinuousWhiteSpace(oldByteArray,i);
    if (spaceCount > 0) {
      newBytes.write(CharPool.SPACE);
      i=i + spaceCount - 1;
    }
 else {
      newBytes.write(b);
    }
  }
  return newBytes.toByteArray();
}
