{
  _serviceTracker=new ServiceTracker<>(bundleContext,ServletContextHelper.class,new ServiceTrackerCustomizer<ServletContextHelper,ServiceRegistration<Filter>>(){
    @Override public ServiceRegistration<Filter> addingService(    ServiceReference<ServletContextHelper> serviceReference){
      ServletContextHelper servletContextHelper=bundleContext.getService(serviceReference);
      Filter filter=new LanguageFilter(servletContextHelper);
      Hashtable<String,Object> properties=new Hashtable<>();
      Object contextName=serviceReference.getProperty(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_NAME);
      properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT,contextName);
      properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN,new String[]{"*.css","*.js"});
      properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_NAME,"Language Filter");
      properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER,new String[]{DispatcherType.ASYNC.toString(),DispatcherType.FORWARD.toString(),DispatcherType.INCLUDE.toString(),DispatcherType.REQUEST.toString()});
      return bundleContext.registerService(Filter.class,filter,properties);
    }
    @Override public void modifiedService(    ServiceReference<ServletContextHelper> reference,    ServiceRegistration<Filter> serviceRegistration){
      removedService(reference,serviceRegistration);
      addingService(reference);
    }
    @Override public void removedService(    ServiceReference<ServletContextHelper> reference,    ServiceRegistration<Filter> serviceRegistration){
      serviceRegistration.unregister();
      bundleContext.ungetService(reference);
    }
  }
);
  _serviceTracker.open();
}
