{
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.INFO);
  try {
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    ClusterMasterExecutorImpl clusterMasterExecutorImpl=new ClusterMasterExecutorImpl();
    ClusterExecutor mockClusterExecutor=new MockClusterExecutor(true);
    clusterMasterExecutorImpl.setClusterExecutor(mockClusterExecutor);
    clusterMasterExecutorImpl.initialize();
    String otherOwner=AddressSerializerUtil.serialize(_OTHER_ADDRESS);
    _mockLockLocalService.setLock(otherOwner);
    String owner=clusterMasterExecutorImpl.getMasterAddressString();
    Assert.assertEquals(_LOCAL_ADDRESS,AddressSerializerUtil.deserialize(owner));
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    String message=logRecord.getMessage();
    Assert.assertEquals("Lock currently held by " + otherOwner,message);
    logRecord=logRecords.get(1);
    message=logRecord.getMessage();
    Assert.assertEquals("Reattempting to acquire the cluster master lock",message);
    logRecords=captureHandler.resetLogLevel(Level.INFO);
    _mockLockLocalService.setLock(null);
    owner=clusterMasterExecutorImpl.getMasterAddressString();
    Assert.assertEquals(_LOCAL_ADDRESS,AddressSerializerUtil.deserialize(owner));
    Assert.assertEquals(2,logRecords.size());
    logRecord=logRecords.get(0);
    Assert.assertEquals("Unable to acquire the cluster master lock",logRecord.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    _mockLockLocalService.setLock(null);
    owner=clusterMasterExecutorImpl.getMasterAddressString();
    Assert.assertEquals(_LOCAL_ADDRESS,AddressSerializerUtil.deserialize(owner));
    Assert.assertTrue(logRecords.isEmpty());
  }
  finally {
    captureHandler.close();
  }
}
