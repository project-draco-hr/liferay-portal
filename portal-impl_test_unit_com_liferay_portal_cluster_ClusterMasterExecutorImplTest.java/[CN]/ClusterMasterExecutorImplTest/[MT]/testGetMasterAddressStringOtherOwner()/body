{
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.INFO);
  try {
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    ClusterMasterExecutorImpl clusterMasterExecutorImpl=new ClusterMasterExecutorImpl();
    ClusterExecutor mockClusterExecutor=new MockClusterExecutor(true);
    clusterMasterExecutorImpl.setClusterExecutor(mockClusterExecutor);
    clusterMasterExecutorImpl.initialize();
    long otherTime=_TEST_TIME + 1;
    Address otherAddress=new AddressImpl(new MockAddress(otherTime));
    String otherOwner=AddressSerializerUtil.serialize(otherAddress);
    MockLockLocalService.setLock(otherOwner);
    String owner=clusterMasterExecutorImpl.getMasterAddressString();
    _TEST_OWNER=AddressSerializerUtil.serialize(_TEST_ADDRESS);
    Assert.assertEquals(_TEST_OWNER,owner);
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    String message=logRecord.getMessage();
    Assert.assertEquals("Lock currently held by " + otherOwner,message);
    logRecord=logRecords.get(1);
    message=logRecord.getMessage();
    Assert.assertEquals("Reattempting to acquire the cluster master lock",message);
    logRecords=captureHandler.resetLogLevel(Level.INFO);
    MockLockLocalService.setLock(null);
    owner=clusterMasterExecutorImpl.getMasterAddressString();
    Assert.assertEquals(_TEST_OWNER,owner);
    Assert.assertEquals(2,logRecords.size());
    logRecord=logRecords.get(0);
    Assert.assertEquals("Unable to acquire the cluster master lock",logRecord.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    MockLockLocalService.setLock(null);
    owner=clusterMasterExecutorImpl.getMasterAddressString();
    Assert.assertEquals(_TEST_OWNER,owner);
    Assert.assertTrue(logRecords.isEmpty());
  }
  finally {
    captureHandler.close();
  }
}
