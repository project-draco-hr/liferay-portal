{
  ClusterMasterExecutorImpl clusterMasterExecutorImpl=new ClusterMasterExecutorImpl();
  clusterMasterExecutorImpl.setClusterExecutor(new MockClusterExecutor(true));
  clusterMasterExecutorImpl.initialize();
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.INFO)){
    String otherOwner=AddressSerializerUtil.serialize(_OTHER_ADDRESS);
    _mockLockLocalService.setLock(otherOwner);
    Assert.assertEquals(_LOCAL_ADDRESS,AddressSerializerUtil.deserialize(clusterMasterExecutorImpl.getMasterAddressString()));
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Lock currently held by " + otherOwner,logRecord.getMessage());
    logRecord=logRecords.get(1);
    Assert.assertEquals("Reattempting to acquire the cluster master lock",logRecord.getMessage());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.INFO)){
    _mockLockLocalService.setLock(null);
    Assert.assertEquals(_LOCAL_ADDRESS,AddressSerializerUtil.deserialize(clusterMasterExecutorImpl.getMasterAddressString()));
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Unable to acquire the cluster master lock",logRecord.getMessage());
    logRecord=logRecords.get(1);
    Assert.assertEquals("Reattempting to acquire the cluster master lock",logRecord.getMessage());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.OFF)){
    _mockLockLocalService.setLock(null);
    Assert.assertEquals(_LOCAL_ADDRESS,AddressSerializerUtil.deserialize(clusterMasterExecutorImpl.getMasterAddressString()));
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
  }
 }
