{
  ClusterMasterExecutorImpl clusterMasterExecutorImpl=new ClusterMasterExecutorImpl();
  clusterMasterExecutorImpl.setClusterExecutor(new MockClusterExecutor(true));
  clusterMasterExecutorImpl.initialize();
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.INFO);
  try {
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    String otherOwner=AddressSerializerUtil.serialize(_OTHER_ADDRESS);
    _mockLockLocalService.setLock(otherOwner);
    String owner=clusterMasterExecutorImpl.getMasterAddressString();
    Assert.assertEquals(_LOCAL_ADDRESS,AddressSerializerUtil.deserialize(owner));
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord1=logRecords.get(0);
    LogRecord logRecord2=logRecords.get(1);
    Assert.assertEquals("Lock currently held by " + otherOwner,logRecord1.getMessage());
    Assert.assertEquals("Reattempting to acquire the cluster master lock",logRecord2.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.INFO);
    _mockLockLocalService.setLock(null);
    owner=clusterMasterExecutorImpl.getMasterAddressString();
    Assert.assertEquals(_LOCAL_ADDRESS,AddressSerializerUtil.deserialize(owner));
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Unable to acquire the cluster master lock",logRecord.getMessage());
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    _mockLockLocalService.setLock(null);
    owner=clusterMasterExecutorImpl.getMasterAddressString();
    Assert.assertEquals(_LOCAL_ADDRESS,AddressSerializerUtil.deserialize(owner));
    Assert.assertTrue(logRecords.isEmpty());
  }
  finally {
    captureHandler.close();
  }
}
