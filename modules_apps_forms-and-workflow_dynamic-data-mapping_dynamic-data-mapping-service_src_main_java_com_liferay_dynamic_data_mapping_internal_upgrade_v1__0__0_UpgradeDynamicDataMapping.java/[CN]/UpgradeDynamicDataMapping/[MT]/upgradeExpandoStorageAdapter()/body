{
  try (LoggingTimer loggingTimer=new LoggingTimer()){
    StringBundler sb1=new StringBundler(6);
    sb1.append("select DDMStructure.*, DDMStorageLink.* from ");
    sb1.append("DDMStorageLink inner join DDMStructure on ");
    sb1.append("DDMStorageLink.structureId = ");
    sb1.append("DDMStructure.structureId where ");
    sb1.append("DDMStructure.storageType = 'expando'");
    StringBundler sb2=new StringBundler(4);
    sb2.append("insert into DDMContent (uuid_, contentId, groupId, ");
    sb2.append("companyId, userId, userName, createDate, ");
    sb2.append("modifiedDate, name, description, data_) values (?, ");
    sb2.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    StringBundler sb3=new StringBundler(2);
    sb3.append("update DDMStorageLink set classNameId = ? where ");
    sb3.append("classNameId = ? and classPK = ?");
    try (PreparedStatement ps1=connection.prepareStatement(sb1.toString());PreparedStatement ps2=AutoBatchPreparedStatementUtil.concurrentAutoBatch(connection,sb2.toString());PreparedStatement ps3=AutoBatchPreparedStatementUtil.concurrentAutoBatch(connection,sb3.toString());ResultSet rs=ps1.executeQuery()){
      Set<Long> expandoRowIds=new HashSet<>();
      while (rs.next()) {
        long groupId=rs.getLong("groupId");
        long companyId=rs.getLong("companyId");
        long userId=rs.getLong("userId");
        String userName=rs.getString("userName");
        Timestamp createDate=rs.getTimestamp("createDate");
        long expandoRowId=rs.getLong("classPK");
        Map<String,String> expandoValuesMap=getExpandoValuesMap(expandoRowId);
        String xml=toXML(expandoValuesMap);
        ps2.setString(1,PortalUUIDUtil.generate());
        ps2.setLong(2,expandoRowId);
        ps2.setLong(3,groupId);
        ps2.setLong(4,companyId);
        ps2.setLong(5,userId);
        ps2.setString(6,userName);
        ps2.setTimestamp(7,createDate);
        ps2.setTimestamp(8,createDate);
        ps2.setString(9,DDMStorageLink.class.getName());
        ps2.setString(10,null);
        ps2.setString(11,xml);
        ps2.addBatch();
        ps3.setLong(1,_ddmContentClassNameId);
        ps3.setLong(2,_expandoStorageAdapterClassNameId);
        ps3.setLong(3,expandoRowId);
        ps3.addBatch();
        expandoRowIds.add(expandoRowId);
      }
      if (expandoRowIds.isEmpty()) {
        return;
      }
      ps2.executeBatch();
      ps3.executeBatch();
      updateDDMStructureStorageType();
      deleteExpandoData(expandoRowIds);
    }
   }
 }
