{
  Tuple tuple=service(Method.MKCOL,"ccsrc",null,null);
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  for (int i=0; i < 10; i++) {
    tuple=service(Method.PUT,"ccsrc/foo." + i,null,_TEST_CONTENT.getBytes());
    assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  }
  tuple=service(Method.MKCOL,"ccsrc/subcoll",null,null);
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.COPY,"ccsrc",null,"ccdest",-1,false);
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.COPY,"ccsrc",null,"ccdest2",-1,false);
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.COPY,"ccsrc",null,"ccdest2",-1,false);
  assertEquals(HttpServletResponse.SC_PRECONDITION_FAILED,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.COPY,"ccsrc",null,"ccdest",-1,true);
  assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
  tuple=service(Method.DELETE,"ccsrc",null,null);
  assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
  for (int i=0; i < 10; i++) {
    tuple=service(Method.DELETE,"ccdest/foo." + i,null,null);
    assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
  }
  tuple=service(Method.DELETE,"ccdest/subcoll",null,null);
  assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
  tuple=service(Method.DELETE,"ccdest",null,null);
  assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
  tuple=service(Method.DELETE,"ccdest2",null,null);
  assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
}
