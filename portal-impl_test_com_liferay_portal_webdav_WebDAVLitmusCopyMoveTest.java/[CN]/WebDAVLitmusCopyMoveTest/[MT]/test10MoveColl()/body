{
  Tuple tuple=service(Method.MKCOL,"mvsrc",null,null);
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  for (int i=0; i < 10; i++) {
    tuple=service(Method.PUT,"mvsrc/foo." + i,null,_TEST_CONTENT.getBytes());
    assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  }
  tuple=service(Method.PUT,"mvnoncoll",null,_TEST_CONTENT.getBytes());
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  tuple=service(Method.MKCOL,"mvsrc/subcoll",null,null);
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.COPY,"mvsrc",null,"mvdest2",-1,false);
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.MOVE,"mvsrc",null,"mvdest",-1,false);
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.MOVE,"mvdest",null,"mvdest2",-1,false);
  assertEquals(HttpServletResponse.SC_PRECONDITION_FAILED,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.MOVE,"mvdest2",null,"mvdest",-1,true);
  assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.COPY,"mvdest",null,"mvdest2",-1,false);
  assertEquals(HttpServletResponse.SC_CREATED,getStatusCode(tuple));
  for (int i=0; i < 10; i++) {
    tuple=service(Method.DELETE,"mvdest/foo." + i,null,null);
    assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
  }
  tuple=service(Method.DELETE,"mvdest/subcoll",null,null);
  assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
  tuple=serviceCopyOrMove(Method.MOVE,"mvdest2",null,"mvnoncoll",-1,true);
  assertEquals(HttpServletResponse.SC_NO_CONTENT,getStatusCode(tuple));
}
