{
  Session session=null;
  try {
    session=openSession();
    StringBundler sb=new StringBundler(5);
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(CustomSQLUtil.get(FIND_O_BY_C_PO));
    sb.append(") UNION ALL (");
    String sql=CustomSQLUtil.get(FIND_U_BY_C_S_O);
    int status=queryDefinition.getStatus();
    if (status == WorkflowConstants.STATUS_ANY) {
      sql=StringUtil.replace(sql,"(User_.status = ?) AND",StringPool.BLANK);
    }
    sb.append(sql);
    sb.append(StringPool.CLOSE_PARENTHESIS);
    sql=sb.toString();
    sql=CustomSQLUtil.replaceOrderBy(sql,queryDefinition.getOrderByComparator());
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addScalar("organizationId",Type.LONG);
    q.addScalar("userId",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    qPos.add(parentOrganizationId);
    qPos.add(companyId);
    if (status != WorkflowConstants.STATUS_ANY) {
      qPos.add(queryDefinition.getStatus());
    }
    qPos.add(parentOrganizationId);
    List<Object> models=new ArrayList<>();
    Iterator<Object[]> itr=(Iterator<Object[]>)QueryUtil.iterate(q,getDialect(),queryDefinition.getStart(),queryDefinition.getEnd());
    while (itr.hasNext()) {
      Object[] array=itr.next();
      long organizationId=(Long)array[0];
      Object obj=null;
      if (organizationId > 0) {
        obj=OrganizationUtil.findByPrimaryKey(organizationId);
      }
 else {
        long userId=(Long)array[1];
        obj=UserUtil.findByPrimaryKey(userId);
      }
      models.add(obj);
    }
    return models;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
