{
  long pk=RandomTestUtil.nextLong();
  SocialActivityAchievement newSocialActivityAchievement=_persistence.create(pk);
  newSocialActivityAchievement.setGroupId(RandomTestUtil.nextLong());
  newSocialActivityAchievement.setCompanyId(RandomTestUtil.nextLong());
  newSocialActivityAchievement.setUserId(RandomTestUtil.nextLong());
  newSocialActivityAchievement.setCreateDate(RandomTestUtil.nextLong());
  newSocialActivityAchievement.setName(RandomTestUtil.randomString());
  newSocialActivityAchievement.setFirstInGroup(RandomTestUtil.randomBoolean());
  _models.add(_persistence.update(newSocialActivityAchievement));
  SocialActivityAchievement existingSocialActivityAchievement=_persistence.findByPrimaryKey(newSocialActivityAchievement.getPrimaryKey());
  Assert.assertEquals(existingSocialActivityAchievement.getActivityAchievementId(),newSocialActivityAchievement.getActivityAchievementId());
  Assert.assertEquals(existingSocialActivityAchievement.getGroupId(),newSocialActivityAchievement.getGroupId());
  Assert.assertEquals(existingSocialActivityAchievement.getCompanyId(),newSocialActivityAchievement.getCompanyId());
  Assert.assertEquals(existingSocialActivityAchievement.getUserId(),newSocialActivityAchievement.getUserId());
  Assert.assertEquals(existingSocialActivityAchievement.getCreateDate(),newSocialActivityAchievement.getCreateDate());
  Assert.assertEquals(existingSocialActivityAchievement.getName(),newSocialActivityAchievement.getName());
  Assert.assertEquals(existingSocialActivityAchievement.getFirstInGroup(),newSocialActivityAchievement.getFirstInGroup());
}
