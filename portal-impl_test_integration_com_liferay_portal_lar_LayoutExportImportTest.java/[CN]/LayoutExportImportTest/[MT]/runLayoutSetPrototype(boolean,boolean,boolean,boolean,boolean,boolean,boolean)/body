{
  LayoutSetPrototype layoutSetPrototype=ServiceTestUtil.addLayoutSetPrototype(ServiceTestUtil.randomString());
  Group layoutSetPrototypeGroup=layoutSetPrototype.getGroup();
  int layoutSetPrototypeLayoutsCount=LayoutLocalServiceUtil.getLayoutsCount(layoutSetPrototypeGroup,true);
  Layout layoutSetPrototypeLayout1=ServiceTestUtil.addLayout(layoutSetPrototypeGroup.getGroupId(),ServiceTestUtil.randomString(),true);
  Layout layoutSetPrototypeLayout2=ServiceTestUtil.addLayout(layoutSetPrototypeGroup.getGroupId(),ServiceTestUtil.randomString(),true);
  Group group=GroupTestUtil.addGroup();
  SitesUtil.updateLayoutSetPrototypesLinks(group,layoutSetPrototype.getLayoutSetPrototypeId(),0,layoutSetLinkEnabled,false);
  propagateChanges(group);
  int groupLayoutsCount=LayoutLocalServiceUtil.getLayoutsCount(group,false);
  Assert.assertEquals(layoutSetPrototypeLayoutsCount + 2,groupLayoutsCount);
  Layout layout1=LayoutLocalServiceUtil.getFriendlyURLLayout(group.getGroupId(),false,layoutSetPrototypeLayout1.getFriendlyURL());
  Layout layout2=LayoutLocalServiceUtil.getFriendlyURLLayout(group.getGroupId(),false,layoutSetPrototypeLayout2.getFriendlyURL());
  if (addPage) {
    if (!useLayoutPrototype || layoutPrototypeToLayoutSetPrototype) {
      Thread.sleep(2000);
    }
    Layout layout=null;
    if (useLayoutPrototype) {
      LayoutPrototype layoutPrototype=ServiceTestUtil.addLayoutPrototype(ServiceTestUtil.randomString());
      Layout layoutPrototypeLayout=layoutPrototype.getLayout();
      updateLayoutTemplateId(layoutPrototypeLayout,"2_2_columns");
      if (layoutPrototypeToLayoutSetPrototype) {
        Layout layoutSetPrototypeLayout=ServiceTestUtil.addLayout(layoutSetPrototypeGroup.getGroupId(),ServiceTestUtil.randomString(),true,layoutPrototype,layoutLinkEnabled);
        layoutSetPrototypeLayout=propagateChanges(layoutSetPrototypeLayout);
        propagateChanges(group);
        layout=LayoutLocalServiceUtil.getFriendlyURLLayout(group.getGroupId(),false,layoutSetPrototypeLayout.getFriendlyURL());
      }
 else {
        layout=ServiceTestUtil.addLayout(group.getGroupId(),ServiceTestUtil.randomString(),false,layoutPrototype,layoutLinkEnabled);
      }
      if (layoutLinkEnabled) {
        layout=propagateChanges(layout);
      }
      updateLayoutTemplateId(layoutPrototypeLayout,"1_column");
      if (layoutLinkEnabled) {
        Assert.assertEquals("2_2_columns",getLayoutTemplateId(layout));
        layout=propagateChanges(layout);
      }
    }
 else {
      layout=ServiceTestUtil.addLayout(layoutSetPrototypeGroup.getGroupId(),ServiceTestUtil.randomString(),true);
    }
    if (!useLayoutPrototype) {
      groupLayoutsCount=LayoutLocalServiceUtil.getLayoutsCount(group,false);
      Assert.assertEquals(layoutSetPrototypeLayoutsCount + 2,groupLayoutsCount);
    }
    propagateChanges(group);
    groupLayoutsCount=LayoutLocalServiceUtil.getLayoutsCount(group,false);
    if (layoutSetLinkEnabled) {
      Assert.assertEquals(layoutSetPrototypeLayoutsCount + 3,groupLayoutsCount);
      if (useLayoutPrototype) {
        if (layoutLinkEnabled) {
          Assert.assertEquals("1_column",getLayoutTemplateId(layout));
        }
 else {
          Assert.assertEquals("2_2_columns",getLayoutTemplateId(layout));
        }
      }
    }
    if (deletePage) {
      LayoutLocalServiceUtil.deleteLayout(layout,true,ServiceTestUtil.getServiceContext());
      groupLayoutsCount=LayoutLocalServiceUtil.getLayoutsCount(group,false);
      if (layoutSetLinkEnabled) {
        if (!useLayoutPrototype) {
          Assert.assertEquals(layoutSetPrototypeLayoutsCount + 3,groupLayoutsCount);
          propagateChanges(group);
        }
        groupLayoutsCount=LayoutLocalServiceUtil.getLayoutsCount(group,false);
      }
      Assert.assertEquals(layoutSetPrototypeLayoutsCount + 2,groupLayoutsCount);
    }
  }
  if (reset) {
    SitesUtil.resetPrototype(layout1);
    SitesUtil.resetPrototype(layout2);
    propagateChanges(group);
    layout1=updateLayoutTemplateId(layout1,"1_column");
    Assert.assertTrue(SitesUtil.isLayoutModifiedSinceLastMerge(layout1));
    Assert.assertFalse(SitesUtil.isLayoutModifiedSinceLastMerge(layout2));
    layout2=updateLayoutTemplateId(layout2,"1_column");
    SitesUtil.resetPrototype(layout1);
    layout1=propagateChanges(layout1);
    Assert.assertFalse(SitesUtil.isLayoutModifiedSinceLastMerge(layout1));
    Assert.assertTrue(SitesUtil.isLayoutModifiedSinceLastMerge(layout2));
  }
}
