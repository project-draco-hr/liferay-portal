{
  try {
    MirageJournalFeed mirageJournalFeed=(MirageJournalFeed)contentFeed;
    JournalFeed feed=mirageJournalFeed.getFeed();
    String uuid=feed.getUuid();
    long userId=feed.getUserId();
    long groupId=feed.getGroupId();
    String feedId=feed.getFeedId();
    boolean autoFeedId=mirageJournalFeed.isAutoFeedId();
    String name=feed.getName();
    String description=feed.getDescription();
    String type=feed.getType();
    String structureId=feed.getStructureId();
    String templateId=feed.getTemplateId();
    String rendererTemplateId=feed.getRendererTemplateId();
    int delta=feed.getDelta();
    String orderByCol=feed.getOrderByCol();
    String orderByType=feed.getOrderByType();
    String targetLayoutFriendlyUrl=feed.getTargetLayoutFriendlyUrl();
    String targetPortletId=feed.getTargetPortletId();
    String contentField=feed.getContentField();
    String feedType=feed.getFeedType();
    double feedVersion=feed.getFeedVersion();
    User user=UserUtil.findByPrimaryKey(userId);
    feedId=feedId.trim().toUpperCase();
    Date now=new Date();
    validate(user.getCompanyId(),groupId,feedId,autoFeedId,name,description,structureId,targetLayoutFriendlyUrl,contentField);
    if (autoFeedId) {
      feedId=String.valueOf(CounterLocalServiceUtil.increment());
    }
    long id=CounterLocalServiceUtil.increment();
    JournalFeed returnFeed=JournalFeedUtil.create(id);
    returnFeed.setUuid(uuid);
    returnFeed.setGroupId(groupId);
    returnFeed.setCompanyId(user.getCompanyId());
    returnFeed.setUserId(user.getUserId());
    returnFeed.setUserName(user.getFullName());
    returnFeed.setCreateDate(now);
    returnFeed.setModifiedDate(now);
    returnFeed.setFeedId(feedId);
    returnFeed.setName(name);
    returnFeed.setDescription(description);
    returnFeed.setType(type);
    returnFeed.setStructureId(structureId);
    returnFeed.setTemplateId(templateId);
    returnFeed.setRendererTemplateId(rendererTemplateId);
    returnFeed.setDelta(delta);
    returnFeed.setOrderByCol(orderByCol);
    returnFeed.setOrderByType(orderByType);
    returnFeed.setTargetLayoutFriendlyUrl(targetLayoutFriendlyUrl);
    returnFeed.setTargetPortletId(targetPortletId);
    returnFeed.setContentField(contentField);
    if (Validator.isNull(feedType)) {
      returnFeed.setFeedType(RSSUtil.DEFAULT_TYPE);
      returnFeed.setFeedVersion(RSSUtil.DEFAULT_VERSION);
    }
 else {
      returnFeed.setFeedType(feedType);
      returnFeed.setFeedVersion(feedVersion);
    }
    JournalFeedUtil.update(returnFeed,false);
    mirageJournalFeed.setFeed(returnFeed);
  }
 catch (  PortalException pe) {
    throw new CMSException(pe.getMessage(),pe);
  }
catch (  SystemException se) {
    throw new CMSException(se.getMessage(),se);
  }
}
