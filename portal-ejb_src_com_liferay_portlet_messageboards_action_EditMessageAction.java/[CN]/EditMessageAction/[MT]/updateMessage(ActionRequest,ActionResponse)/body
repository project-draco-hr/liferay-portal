{
  String messageId=ParamUtil.getString(req,"messageId");
  String categoryId=ParamUtil.getString(req,"categoryId");
  String threadId=ParamUtil.getString(req,"threadId");
  String parentMessageId=ParamUtil.getString(req,"parentMessageId");
  String subject=ParamUtil.getString(req,"subject");
  String body=ParamUtil.getString(req,"body");
  boolean attachments=ParamUtil.getBoolean(req,"attachments");
  List files=new ArrayList();
  if (attachments) {
    UploadPortletRequest uploadReq=PortalUtil.getUploadPortletRequest(req);
    for (int i=1; i <= 5; i++) {
      File file=uploadReq.getFile("msgFile" + i);
      String fileName=uploadReq.getFileName("msgFile" + i);
      byte[] bytes=FileUtil.getBytes(file);
      if (bytes != null && bytes.length > 0) {
        ObjectValuePair ovp=new ObjectValuePair(fileName,bytes);
        files.add(ovp);
      }
    }
  }
  boolean anonymous=ParamUtil.getBoolean(req,"anonymous");
  boolean addCommunityPermissions=ParamUtil.getBoolean(req,"addCommunityPermissions");
  boolean addGuestPermissions=ParamUtil.getBoolean(req,"addGuestPermissions");
  MBMessage message=null;
  if (Validator.isNull(messageId)) {
    CaptchaUtil.check(req);
    if (Validator.isNull(threadId)) {
      message=MBMessageServiceUtil.addMessage(categoryId,subject,body,files,anonymous,req.getPreferences(),addCommunityPermissions,addGuestPermissions);
    }
 else {
      message=MBMessageServiceUtil.addMessage(categoryId,threadId,parentMessageId,subject,body,files,anonymous,req.getPreferences(),addCommunityPermissions,addGuestPermissions);
    }
  }
 else {
    message=MBMessageServiceUtil.updateMessage(messageId,categoryId,subject,body,files,req.getPreferences());
  }
  PortletURL portletURL=((ActionResponseImpl)res).createRenderURL();
  portletURL.setParameter("struts_action","/message_boards/view_message");
  portletURL.setParameter("messageId",message.getMessageId());
  res.sendRedirect(portletURL.toString());
}
