{
  Path remoteFilePath=Paths.get("remoteFile");
  Path cachedLocalFilePath=Paths.get("cacheLocalFile");
  Map<Path,Path> pathMap=_nettyRepository.pathMap;
  pathMap.put(remoteFilePath,cachedLocalFilePath);
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(),Level.FINEST)){
    NoticeableFuture<Path> noticeableFuture=_nettyRepository.getFile(_embeddedChannel,remoteFilePath,Paths.get("localFile"),false,false);
    _asyncBroker.takeWithResult(remoteFilePath,new FileResponse(remoteFilePath,FileResponse.FILE_NOT_MODIFIED,0,false));
    Assert.assertSame(cachedLocalFilePath,noticeableFuture.get());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Fetching remote file " + remoteFilePath,logRecord.getMessage());
    logRecord=logRecords.get(1);
    Assert.assertEquals("Remote file " + remoteFilePath + " is not modified, use cached local file "+ cachedLocalFilePath,logRecord.getMessage());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(),Level.OFF)){
    NoticeableFuture<Path> noticeableFuture=_nettyRepository.getFile(_embeddedChannel,remoteFilePath,Paths.get("localFile"),false,false);
    _asyncBroker.takeWithResult(remoteFilePath,new FileResponse(remoteFilePath,FileResponse.FILE_NOT_MODIFIED,0,false));
    Assert.assertSame(cachedLocalFilePath,noticeableFuture.get());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
  }
 }
