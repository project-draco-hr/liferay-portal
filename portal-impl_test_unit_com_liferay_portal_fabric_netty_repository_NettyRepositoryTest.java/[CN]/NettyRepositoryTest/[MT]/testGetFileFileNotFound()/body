{
  Path remoteFilePath=Paths.get("remoteFile");
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(),Level.WARNING);
  try {
    NoticeableFuture<Path> noticeableFuture=_nettyRepository.getFile(_embeddedChannel,remoteFilePath,Paths.get("localFile"),false,false);
    _asyncBroker.takeWithResult(remoteFilePath,new FileResponse(remoteFilePath,FileResponse.FILE_NOT_FOUND,0,false));
    Assert.assertNull(noticeableFuture.get());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Remote file " + remoteFilePath + " is not found",logRecord.getMessage());
  }
  finally {
    captureHandler.close();
  }
  captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(),Level.OFF);
  try {
    NoticeableFuture<Path> noticeableFuture=_nettyRepository.getFile(_embeddedChannel,remoteFilePath,Paths.get("localFile"),false,false);
    _asyncBroker.takeWithResult(remoteFilePath,new FileResponse(remoteFilePath,FileResponse.FILE_NOT_FOUND,0,false));
    Assert.assertNull(noticeableFuture.get());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
  }
  finally {
    captureHandler.close();
  }
}
