{
  Path remoteFilePath=Paths.get("remoteFile");
  Path tempFilePath=FileServerTestUtil.createFileWithData(Paths.get("tempFile"));
  Map<Path,Path> pathMap=_nettyRepository.pathMap;
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(),Level.FINEST);
  try {
    NoticeableFuture<Path> noticeableFuture=_nettyRepository.getFile(remoteFilePath,null,false);
    FileResponse fileResponse=new FileResponse(remoteFilePath,System.currentTimeMillis(),0,false);
    fileResponse.setLocalFile(tempFilePath);
    _asyncBroker.takeWithResult(remoteFilePath,fileResponse);
    Path localFilePath=FileServerTestUtil.registerForCleanUp(noticeableFuture.get());
    Assert.assertNotNull(localFilePath);
    Assert.assertTrue(Files.notExists(tempFilePath));
    Assert.assertTrue(Files.exists(localFilePath));
    Assert.assertEquals(1,pathMap.size());
    Assert.assertSame(localFilePath,pathMap.get(remoteFilePath));
    Files.delete(localFilePath);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Fetching remote file " + remoteFilePath,logRecord.getMessage());
    logRecord=logRecords.get(1);
    Assert.assertEquals("Fetched remote file " + remoteFilePath + " to "+ localFilePath,logRecord.getMessage());
  }
  finally {
    captureHandler.close();
    pathMap.clear();
  }
  FileServerTestUtil.createFileWithData(tempFilePath);
  Path localFilePath=FileServerTestUtil.registerForCleanUp(Paths.get("localFile"));
  captureHandler=JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(),Level.OFF);
  try {
    NoticeableFuture<Path> noticeableFuture=_nettyRepository.getFile(remoteFilePath,localFilePath,false);
    FileResponse fileResponse=new FileResponse(remoteFilePath,System.currentTimeMillis(),0,false);
    fileResponse.setLocalFile(tempFilePath);
    _asyncBroker.takeWithResult(remoteFilePath,fileResponse);
    Assert.assertSame(localFilePath,noticeableFuture.get());
    Assert.assertTrue(Files.notExists(tempFilePath));
    Assert.assertTrue(Files.exists(localFilePath));
    Assert.assertTrue(pathMap.isEmpty());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
  }
  finally {
    captureHandler.close();
  }
}
