{
  Object value=null;
  int t=type.intValue();
  if (t == Types.BIGINT) {
    try {
      value=GetterUtil.getLong(rs.getLong(name));
    }
 catch (    SQLException sqle) {
      value=GetterUtil.getLong(rs.getString(name));
    }
  }
 else   if (t == Types.BOOLEAN) {
    value=GetterUtil.getBoolean(rs.getBoolean(name));
  }
 else   if (t == Types.CLOB) {
    try {
      Clob clob=rs.getClob(name);
      if (clob == null) {
        value=StringPool.BLANK;
      }
 else {
        UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(clob.getCharacterStream());
        StringBundler sb=new StringBundler();
        String line=null;
        while ((line=unsyncBufferedReader.readLine()) != null) {
          if (sb.length() != 0) {
            sb.append(SAFE_NEWLINE_CHARACTER);
          }
          sb.append(line);
        }
        value=sb.toString();
      }
    }
 catch (    Exception e) {
      value=GetterUtil.getString(rs.getString(name));
    }
  }
 else   if (t == Types.DOUBLE) {
    value=GetterUtil.getDouble(rs.getDouble(name));
  }
 else   if (t == Types.FLOAT) {
    value=GetterUtil.getFloat(rs.getFloat(name));
  }
 else   if (t == Types.INTEGER) {
    value=GetterUtil.getInteger(rs.getInt(name));
  }
 else   if (t == Types.SMALLINT) {
    value=GetterUtil.getShort(rs.getShort(name));
  }
 else   if (t == Types.TIMESTAMP) {
    try {
      value=rs.getTimestamp(name);
    }
 catch (    Exception e) {
    }
    if (value == null) {
      value=StringPool.NULL;
    }
  }
 else   if (t == Types.VARCHAR) {
    value=GetterUtil.getString(rs.getString(name));
  }
 else {
    throw new UpgradeException("Upgrade code using unsupported class type " + type);
  }
  return value;
}
