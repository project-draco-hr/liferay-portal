{
  Company company=companyPersistence.remove(companyId);
  accountLocalService.deleteAccount(company.getAccountId());
  DeleteGroupActionableDynamicQuery deleteGroupActionableDynamicQuery=new DeleteGroupActionableDynamicQuery();
  deleteGroupActionableDynamicQuery.setCompanyId(companyId);
  deleteGroupActionableDynamicQuery.performActions();
  String[] systemGroups=PortalUtil.getSystemGroups();
  for (  String groupName : systemGroups) {
    Group group=groupLocalService.getGroup(companyId,groupName);
    deleteGroupActionableDynamicQuery.deleteGroup(group);
  }
  Group companyGroup=groupLocalService.getCompanyGroup(companyId);
  deleteGroupActionableDynamicQuery.deleteGroup(companyGroup);
  ActionableDynamicQuery layoutPrototypeActionableDynamicQuery=layoutPrototypeLocalService.getActionableDynamicQuery();
  layoutPrototypeActionableDynamicQuery.setCompanyId(companyId);
  layoutPrototypeActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod(){
    @Override public void performAction(    Object object) throws PortalException {
      LayoutPrototype layoutPrototype=(LayoutPrototype)object;
      layoutPrototypeLocalService.deleteLayoutPrototype(layoutPrototype);
    }
  }
);
  layoutPrototypeActionableDynamicQuery.performActions();
  ActionableDynamicQuery layoutSetPrototypeActionableDynamicQuery=layoutSetPrototypeLocalService.getActionableDynamicQuery();
  layoutSetPrototypeActionableDynamicQuery.setCompanyId(companyId);
  layoutSetPrototypeActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod(){
    @Override public void performAction(    Object object) throws PortalException {
      LayoutSetPrototype layoutSetPrototype=(LayoutSetPrototype)object;
      layoutSetPrototypeLocalService.deleteLayoutSetPrototype(layoutSetPrototype);
    }
  }
);
  layoutSetPrototypeActionableDynamicQuery.performActions();
  DeleteOrganizationActionableDynamicQuery deleteOrganizationActionableDynamicQuery=new DeleteOrganizationActionableDynamicQuery();
  deleteOrganizationActionableDynamicQuery.setCompanyId(companyId);
  deleteOrganizationActionableDynamicQuery.performActions();
  ActionableDynamicQuery roleActionableDynamicQuery=roleLocalService.getActionableDynamicQuery();
  roleActionableDynamicQuery.setCompanyId(companyId);
  roleActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod(){
    @Override public void performAction(    Object object) throws PortalException {
      Role role=(Role)object;
      roleLocalService.deleteRole(role);
    }
  }
);
  roleActionableDynamicQuery.performActions();
  passwordPolicyLocalService.deleteNondefaultPasswordPolicies(companyId);
  PasswordPolicy defaultPasswordPolicy=passwordPolicyLocalService.getDefaultPasswordPolicy(companyId);
  if (defaultPasswordPolicy != null) {
    passwordPolicyLocalService.deletePasswordPolicy(defaultPasswordPolicy);
  }
  PortalPreferences portalPreferences=portalPreferencesPersistence.findByO_O(companyId,PortletKeys.PREFS_OWNER_TYPE_COMPANY);
  portalPreferencesLocalService.deletePortalPreferences(portalPreferences);
  List<Portlet> portlets=portletPersistence.findByCompanyId(companyId);
  for (  Portlet portlet : portlets) {
    portletLocalService.deletePortlet(portlet.getId());
  }
  portletLocalService.removeCompanyPortletsPool(companyId);
  ActionableDynamicQuery userActionableDynamicQuery=userLocalService.getActionableDynamicQuery();
  userActionableDynamicQuery.setCompanyId(companyId);
  userActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod(){
    @Override public void performAction(    Object object) throws PortalException {
      User user=(User)object;
      if (!user.isDefaultUser()) {
        userLocalService.deleteUser(user.getUserId());
      }
    }
  }
);
  userActionableDynamicQuery.performActions();
  User defaultUser=userLocalService.getDefaultUser(companyId);
  userLocalService.deleteUser(defaultUser);
  VirtualHost companyVirtualHost=virtualHostLocalService.fetchVirtualHost(companyId,0);
  virtualHostLocalService.deleteVirtualHost(companyVirtualHost);
  Callable<Void> callable=new Callable<Void>(){
    @Override public Void call() throws Exception {
      PortalInstances.removeCompany(companyId);
      return null;
    }
  }
;
  TransactionCommitCallbackRegistryUtil.registerCallback(callable);
  return company;
}
