{
  Company company=companyPersistence.findByPrimaryKey(companyId);
  company.setActive(false);
  companyPersistence.update(company);
  int usersCount=userLocalService.getCompanyUsersCount(companyId);
  for (int i=0; i < usersCount; ) {
    int start=i;
    int end=i + PropsValues.COMPANY_DELETE_BATCH_SIZE;
    if (end > usersCount) {
      end=usersCount;
    }
    i=end;
    List<User> users=userLocalService.getCompanyUsers(companyId,start,end);
    for (    User user : users) {
      if (!user.isDefaultUser()) {
        userLocalService.deleteUser(user.getUserId());
      }
    }
  }
  int organizationsCount=organizationLocalService.getOrganizationsCount(companyId,OrganizationConstants.DEFAULT_PARENT_ORGANIZATION_ID);
  for (int i=0; i < organizationsCount; ) {
    int start=i;
    int end=i + PropsValues.COMPANY_DELETE_BATCH_SIZE;
    if (end > organizationsCount) {
      end=organizationsCount;
    }
    i=end;
    List<Organization> organizations=organizationLocalService.getOrganizations(companyId,OrganizationConstants.DEFAULT_PARENT_ORGANIZATION_ID,start,end);
    for (    Organization organization : organizations) {
      deleteOrganization(organization);
    }
  }
  int siteGroupsCount=groupLocalService.getGroupsCount(companyId,GroupConstants.DEFAULT_PARENT_GROUP_ID,true);
  for (int i=0; i < siteGroupsCount; ) {
    int start=i;
    int end=i + PropsValues.COMPANY_DELETE_BATCH_SIZE;
    if (end > siteGroupsCount) {
      end=siteGroupsCount;
    }
    i=end;
    List<Group> siteGroups=groupLocalService.getGroups(companyId,GroupConstants.DEFAULT_PARENT_GROUP_ID,true,start,end);
    for (    Group group : siteGroups) {
      if (!PortalUtil.isSystemGroup(group.getName()) && !group.isCompany()) {
        deleteGroup(group);
      }
    }
  }
  String[] systemGroups=PortalUtil.getSystemGroups();
  for (  String groupName : systemGroups) {
    Group group=groupLocalService.getGroup(companyId,groupName);
    deleteGroup(group);
  }
  Group companyGroup=groupLocalService.getCompanyGroup(companyId);
  deleteGroup(companyGroup);
  List<LayoutPrototype> layoutPrototypes=layoutPrototypeLocalService.search(companyId,null,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  for (  LayoutPrototype layoutPrototype : layoutPrototypes) {
    layoutPrototypeLocalService.deleteLayoutPrototype(layoutPrototype);
  }
  List<LayoutSetPrototype> layoutSetPrototypes=layoutSetPrototypeLocalService.search(companyId,null,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  for (  LayoutSetPrototype layoutSetPrototype : layoutSetPrototypes) {
    layoutSetPrototypeLocalService.deleteLayoutSetPrototype(layoutSetPrototype);
  }
  User defaultUser=userLocalService.getDefaultUser(companyId);
  userLocalService.deleteUser(defaultUser);
  List<Role> roles=roleLocalService.getRoles(companyId);
  for (  Role role : roles) {
    roleLocalService.deleteRole(role);
  }
  passwordPolicyLocalService.deleteNondefaultPasswordPolicies(companyId);
  PasswordPolicy defaultPasswordPolicy=passwordPolicyLocalService.getDefaultPasswordPolicy(companyId);
  passwordPolicyLocalService.deletePasswordPolicy(defaultPasswordPolicy);
  List<Portlet> portlets=portletPersistence.findByCompanyId(companyId);
  for (  Portlet portlet : portlets) {
    portletLocalService.deletePortlet(portlet.getId());
  }
  portletLocalService.removeCompanyPortletsPool(companyId);
  PortalPreferences portalPreferences=portalPreferencesPersistence.findByO_O(companyId,PortletKeys.PREFS_OWNER_TYPE_COMPANY);
  portalPreferencesLocalService.deletePortalPreferences(portalPreferences);
  VirtualHost companyVirtualHost=virtualHostLocalService.fetchVirtualHost(companyId,0);
  virtualHostLocalService.deleteVirtualHost(companyVirtualHost);
  accountLocalService.deleteAccount(company.getAccountId());
  Shard shard=shardLocalService.getShard(Company.class.getName(),company.getCompanyId());
  shardLocalService.deleteShard(shard);
  company=companyPersistence.remove(companyId);
  PortalInstances.removeCompany(companyId);
  return company;
}
