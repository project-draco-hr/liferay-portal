{
  Date now=new Date();
  Company company=companyPersistence.fetchByWebId(webId);
  if (company == null) {
    String name=webId;
    String legalName=null;
    String legalId=null;
    String legalType=null;
    String sicCode=null;
    String tickerSymbol=null;
    String industry=null;
    String type=null;
    String size=null;
    long companyId=counterLocalService.increment();
    company=companyPersistence.create(companyId);
    try {
      company.setKey(Base64.objectToString(Encryptor.generateKey()));
    }
 catch (    EncryptorException ee) {
      throw new SystemException(ee);
    }
    company.setWebId(webId);
    company.setMx(mx);
    company.setActive(true);
    companyPersistence.update(company,false);
    shardLocalService.addShard(Company.class.getName(),companyId,shardName);
    updateAccount(company,name,legalName,legalId,legalType,sicCode,tickerSymbol,industry,type,size);
    if (webId.equals(PropsValues.COMPANY_DEFAULT_WEB_ID)) {
      updateVirtualHost(companyId,_DEFAULT_VIRTUAL_HOST);
    }
    if (webId.equals("liferay.net")) {
      company=companyPersistence.findByWebId(webId);
      updateVirtualHost(companyId,"demo.liferay.net");
      updateSecurity(companyId,CompanyConstants.AUTH_TYPE_EA,true,true,true,true,false,true);
      PortletPreferences preferences=PrefsPropsUtil.getPreferences(companyId);
      try {
        preferences.setValue(PropsKeys.ADMIN_EMAIL_FROM_NAME,"Liferay Demo");
        preferences.setValue(PropsKeys.ADMIN_EMAIL_FROM_ADDRESS,"test@liferay.net");
        preferences.store();
      }
 catch (      IOException ioe) {
        throw new SystemException(ioe);
      }
catch (      PortletException pe) {
        throw new SystemException(pe);
      }
    }
  }
 else {
    try {
      shardLocalService.getShard(Company.class.getName(),company.getCompanyId());
    }
 catch (    NoSuchShardException nsse) {
      shardLocalService.addShard(Company.class.getName(),company.getCompanyId(),shardName);
    }
  }
  long companyId=company.getCompanyId();
  checkCompanyKey(companyId);
  User defaultUser=null;
  try {
    defaultUser=userLocalService.getDefaultUser(companyId);
    if (!defaultUser.isAgreedToTermsOfUse()) {
      defaultUser.setAgreedToTermsOfUse(true);
      userPersistence.update(defaultUser,false);
    }
  }
 catch (  NoSuchUserException nsue) {
    long userId=counterLocalService.increment();
    defaultUser=userPersistence.create(userId);
    defaultUser.setCompanyId(companyId);
    defaultUser.setCreateDate(now);
    defaultUser.setModifiedDate(now);
    defaultUser.setDefaultUser(true);
    defaultUser.setContactId(counterLocalService.increment());
    defaultUser.setPassword("password");
    defaultUser.setScreenName(String.valueOf(defaultUser.getUserId()));
    defaultUser.setEmailAddress("default@" + company.getMx());
    if (Validator.isNotNull(PropsValues.COMPANY_DEFAULT_LOCALE)) {
      defaultUser.setLanguageId(PropsValues.COMPANY_DEFAULT_LOCALE);
    }
 else {
      Locale locale=LocaleUtil.getDefault();
      defaultUser.setLanguageId(locale.toString());
    }
    if (Validator.isNotNull(PropsValues.COMPANY_DEFAULT_TIME_ZONE)) {
      defaultUser.setTimeZoneId(PropsValues.COMPANY_DEFAULT_TIME_ZONE);
    }
 else {
      TimeZone timeZone=TimeZoneUtil.getDefault();
      defaultUser.setTimeZoneId(timeZone.getID());
    }
    defaultUser.setGreeting(LanguageUtil.format(defaultUser.getLocale(),"welcome-x",StringPool.BLANK,false));
    defaultUser.setLoginDate(now);
    defaultUser.setFailedLoginAttempts(0);
    defaultUser.setAgreedToTermsOfUse(true);
    defaultUser.setStatus(WorkflowConstants.STATUS_APPROVED);
    userPersistence.update(defaultUser,false);
    Contact defaultContact=contactPersistence.create(defaultUser.getContactId());
    defaultContact.setCompanyId(defaultUser.getCompanyId());
    defaultContact.setUserId(defaultUser.getUserId());
    defaultContact.setUserName(StringPool.BLANK);
    defaultContact.setCreateDate(now);
    defaultContact.setModifiedDate(now);
    defaultContact.setClassName(User.class.getName());
    defaultContact.setClassPK(defaultUser.getUserId());
    defaultContact.setAccountId(company.getAccountId());
    defaultContact.setParentContactId(ContactConstants.DEFAULT_PARENT_CONTACT_ID);
    defaultContact.setFirstName(StringPool.BLANK);
    defaultContact.setMiddleName(StringPool.BLANK);
    defaultContact.setLastName(StringPool.BLANK);
    defaultContact.setMale(true);
    defaultContact.setBirthday(now);
    contactPersistence.update(defaultContact,false);
  }
  roleLocalService.checkSystemRoles(companyId);
  groupLocalService.checkSystemGroups(companyId);
  groupLocalService.checkCompanyGroup(companyId);
  passwordPolicyLocalService.checkDefaultPasswordPolicy(companyId);
  Role guestRole=roleLocalService.getRole(companyId,RoleConstants.GUEST);
  roleLocalService.setUserRoles(defaultUser.getUserId(),new long[]{guestRole.getRoleId()});
  if (userPersistence.countByCompanyId(companyId) == 1) {
    String emailAddress=PropsValues.DEFAULT_ADMIN_EMAIL_ADDRESS_PREFIX + "@" + mx;
    userLocalService.addDefaultAdminUser(companyId,PropsValues.DEFAULT_ADMIN_SCREEN_NAME,emailAddress,defaultUser.getLocale(),PropsValues.DEFAULT_ADMIN_FIRST_NAME,PropsValues.DEFAULT_ADMIN_MIDDLE_NAME,PropsValues.DEFAULT_ADMIN_LAST_NAME);
  }
  portletLocalService.checkPortlets(companyId);
  return company;
}
