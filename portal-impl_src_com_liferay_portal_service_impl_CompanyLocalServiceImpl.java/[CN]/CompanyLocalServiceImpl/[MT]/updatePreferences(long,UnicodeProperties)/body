{
  PortletPreferences portletPreferences=PrefsPropsUtil.getPreferences(companyId);
  try {
    String newLanguageIds=properties.getProperty(PropsKeys.LOCALES);
    if (Validator.isNotNull(newLanguageIds)) {
      String oldLanguageIds=portletPreferences.getValue(PropsKeys.LOCALES,StringPool.BLANK);
      if (!Validator.equals(oldLanguageIds,newLanguageIds)) {
        validateLanguageIds(newLanguageIds);
        LanguageUtil.resetAvailableLocales(companyId);
        Date now=new Date();
        for (        LayoutSetPrototype layoutSetPrototype : layoutSetPrototypeLocalService.getLayoutSetPrototypes(companyId)) {
          layoutSetPrototype.setModifiedDate(now);
          layoutSetPrototypeLocalService.updateLayoutSetPrototype(layoutSetPrototype);
        }
      }
    }
    List<String> resetKeys=new ArrayList<>();
    for (    Map.Entry<String,String> entry : properties.entrySet()) {
      String key=entry.getKey();
      String value=entry.getValue();
      if (value.equals(Portal.TEMP_OBFUSCATION_VALUE)) {
        continue;
      }
      String propsUtilValue=PropsUtil.get(key);
      if (!value.equals(propsUtilValue)) {
        portletPreferences.setValue(key,value);
      }
 else {
        String portletPreferencesValue=portletPreferences.getValue(key,null);
        if (portletPreferencesValue != null) {
          resetKeys.add(key);
        }
      }
    }
    for (    String key : resetKeys) {
      portletPreferences.reset(key);
    }
    portletPreferences.store();
  }
 catch (  LocaleException le) {
    throw le;
  }
catch (  Exception e) {
    throw new SystemException(e);
  }
}
