{
  Date now=new Date();
  Company company=companyPersistence.fetchByWebId(webId);
  if (company == null) {
    String virtualHost=webId;
    if (webId.equals(PropsValues.COMPANY_DEFAULT_WEB_ID)) {
      virtualHost=PortalInstances.DEFAULT_VIRTUAL_HOST;
    }
    String name=webId;
    String legalName=null;
    String legalId=null;
    String legalType=null;
    String sicCode=null;
    String tickerSymbol=null;
    String industry=null;
    String type=null;
    String size=null;
    long companyId=counterLocalService.increment();
    company=companyPersistence.create(companyId);
    try {
      company.setKeyObj(Encryptor.generateKey());
    }
 catch (    EncryptorException ee) {
      throw new SystemException(ee);
    }
    company.setWebId(webId);
    company.setVirtualHost(virtualHost);
    company.setMx(mx);
    companyPersistence.update(company,false);
    updateCompany(companyId,virtualHost,mx,name,legalName,legalId,legalType,sicCode,tickerSymbol,industry,type,size);
    if (webId.equals("liferay.net")) {
      company=companyPersistence.findByWebId(webId);
      company.setVirtualHost("demo.liferay.net");
      companyPersistence.update(company,false);
      updateSecurity(companyId,CompanyConstants.AUTH_TYPE_EA,true,true,true,true,false,true);
      PortletPreferences preferences=PrefsPropsUtil.getPreferences(companyId);
      try {
        preferences.setValue(PropsKeys.ADMIN_EMAIL_FROM_NAME,"Liferay Demo");
        preferences.setValue(PropsKeys.ADMIN_EMAIL_FROM_ADDRESS,"test@liferay.net");
        preferences.store();
      }
 catch (      IOException ioe) {
        throw new SystemException(ioe);
      }
catch (      PortletException pe) {
        throw new SystemException(pe);
      }
    }
  }
  long companyId=company.getCompanyId();
  checkCompanyKey(companyId);
  User defaultUser=null;
  try {
    defaultUser=userLocalService.getDefaultUser(companyId);
    if (!defaultUser.isAgreedToTermsOfUse()) {
      defaultUser.setAgreedToTermsOfUse(true);
      userPersistence.update(defaultUser,false);
    }
  }
 catch (  NoSuchUserException nsue) {
    long userId=counterLocalService.increment();
    defaultUser=userPersistence.create(userId);
    defaultUser.setCompanyId(companyId);
    defaultUser.setCreateDate(now);
    defaultUser.setModifiedDate(now);
    defaultUser.setDefaultUser(true);
    defaultUser.setContactId(counterLocalService.increment());
    defaultUser.setPassword("password");
    defaultUser.setScreenName(String.valueOf(defaultUser.getUserId()));
    defaultUser.setEmailAddress("default@" + company.getMx());
    defaultUser.setLanguageId(null);
    defaultUser.setTimeZoneId(null);
    defaultUser.setGreeting(LanguageUtil.format(companyId,defaultUser.getLocale(),"welcome-x",StringPool.BLANK));
    defaultUser.setLoginDate(now);
    defaultUser.setFailedLoginAttempts(0);
    defaultUser.setAgreedToTermsOfUse(true);
    defaultUser.setActive(true);
    userPersistence.update(defaultUser,false);
    Contact defaultContact=contactPersistence.create(defaultUser.getContactId());
    defaultContact.setCompanyId(defaultUser.getCompanyId());
    defaultContact.setUserId(defaultUser.getUserId());
    defaultContact.setUserName(StringPool.BLANK);
    defaultContact.setCreateDate(now);
    defaultContact.setModifiedDate(now);
    defaultContact.setAccountId(company.getAccountId());
    defaultContact.setParentContactId(ContactConstants.DEFAULT_PARENT_CONTACT_ID);
    defaultContact.setFirstName(StringPool.BLANK);
    defaultContact.setMiddleName(StringPool.BLANK);
    defaultContact.setLastName(StringPool.BLANK);
    defaultContact.setMale(true);
    defaultContact.setBirthday(now);
    contactPersistence.update(defaultContact,false);
  }
  roleLocalService.checkSystemRoles(companyId);
  groupLocalService.checkSystemGroups(companyId);
  passwordPolicyLocalService.checkDefaultPasswordPolicy(companyId);
  Role guestRole=roleLocalService.getRole(companyId,RoleConstants.GUEST);
  roleLocalService.setUserRoles(defaultUser.getUserId(),new long[]{guestRole.getRoleId()});
  if (userPersistence.countByCompanyId(companyId) == 1) {
    long creatorUserId=0;
    boolean autoPassword=false;
    String password1=PropsValues.DEFAULT_ADMIN_PASSWORD;
    String password2=password1;
    boolean autoScreenName=false;
    String screenName=PropsValues.DEFAULT_ADMIN_SCREEN_NAME;
    String emailAddress=PropsValues.DEFAULT_ADMIN_EMAIL_ADDRESS_PREFIX + "@" + mx;
    Locale locale=defaultUser.getLocale();
    String firstName=PropsValues.DEFAULT_ADMIN_FIRST_NAME;
    String middleName=PropsValues.DEFAULT_ADMIN_MIDDLE_NAME;
    String lastName=PropsValues.DEFAULT_ADMIN_LAST_NAME;
    int prefixId=0;
    int suffixId=0;
    boolean male=true;
    int birthdayMonth=Calendar.JANUARY;
    int birthdayDay=1;
    int birthdayYear=1970;
    String jobTitle=StringPool.BLANK;
    long[] organizationIds=new long[0];
    User user=userLocalService.addUser(creatorUserId,companyId,autoPassword,password1,password2,autoScreenName,screenName,emailAddress,locale,firstName,middleName,lastName,prefixId,suffixId,male,birthdayMonth,birthdayDay,birthdayYear,jobTitle,organizationIds,false);
    Group guestGroup=groupLocalService.getGroup(companyId,GroupConstants.GUEST);
    long[] groupIds=new long[]{guestGroup.getGroupId()};
    groupLocalService.addUserGroups(user.getUserId(),groupIds);
    Role adminRole=roleLocalService.getRole(companyId,RoleConstants.ADMINISTRATOR);
    Role powerUserRole=roleLocalService.getRole(companyId,RoleConstants.POWER_USER);
    long[] roleIds=new long[]{adminRole.getRoleId(),powerUserRole.getRoleId()};
    roleLocalService.setUserRoles(user.getUserId(),roleIds);
  }
  return company;
}
