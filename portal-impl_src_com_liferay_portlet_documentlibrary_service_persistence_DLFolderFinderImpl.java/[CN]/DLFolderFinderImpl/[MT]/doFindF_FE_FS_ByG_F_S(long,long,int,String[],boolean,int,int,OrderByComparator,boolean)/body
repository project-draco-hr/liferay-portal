{
  Session session=null;
  try {
    session=openSession();
    StringBundler sb=new StringBundler(7);
    sb.append("SELECT * FROM (");
    String sql=CustomSQLUtil.get(FIND_F_BY_G_M_F);
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,DLFolder.class.getName(),"DLFolder.folderId",groupId);
    }
    sb.append(sql);
    sb.append(" UNION ALL ");
    sql=CustomSQLUtil.get(FIND_FE_BY_G_F_S);
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,DLFileEntry.class.getName(),"DLFileEntry.fileEntryId",groupId);
    }
    sb.append(sql);
    if ((mimeTypes != null) && (mimeTypes.length > 0)) {
      for (int i=0; i < mimeTypes.length; i++) {
        if (i == 0) {
          sb.append(" AND (");
        }
 else {
          sb.append(" OR");
        }
        sb.append(" DLFileEntry.mimeType = '");
        sb.append(mimeTypes[i]);
        sb.append("'");
      }
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    sb.append(" UNION ALL ");
    sql=CustomSQLUtil.get(FIND_FS_BY_G_F_S);
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,DLFileShortcut.class.getName(),"DLFileShortcut.fileShortcutId",groupId);
    }
    sb.append(sql);
    if ((mimeTypes != null) && (mimeTypes.length > 0)) {
      for (int i=0; i < mimeTypes.length; i++) {
        if (i == 0) {
          sb.append(" AND (");
        }
 else {
          sb.append(" OR");
        }
        sb.append(" mimeType = '");
        sb.append(mimeTypes[i]);
        sb.append("'");
      }
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    sb.append(") TEMP_TABLE ORDER BY modelFolder DESC, title ASC");
    sql=sb.toString();
    if (includeMountFolders) {
      sql=StringUtil.replace(sql,"(DLFolder.mountPoint = ?) AND","");
    }
    sql=StringUtil.replace(sql,"[$FOLDER_PARENT_FOLDER_ID$]",getFolderId(folderId,"DLFolder"));
    sql=StringUtil.replace(sql,"[$FILE_ENTRY_FOLDER_ID$]",getFolderId(folderId,"DLFileEntry"));
    sql=StringUtil.replace(sql,"[$FILE_SHORTCUT_FOLDER_ID$]",getFolderId(folderId,"DLFileShortcut"));
    if (status == WorkflowConstants.STATUS_ANY) {
      sql=StringUtil.replace(sql,"(DLFileVersion.status = ?) AND","");
    }
    sql=CustomSQLUtil.replaceOrderBy(sql,obc);
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("modelFolderId",Type.LONG);
    q.addScalar("name",Type.STRING);
    q.addScalar("title",Type.STRING);
    q.addScalar("fileShortcutId",Type.LONG);
    q.addScalar("modelFolder",Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    if (!includeMountFolders) {
      qPos.add(false);
    }
    qPos.add(folderId);
    qPos.add(groupId);
    if (status != WorkflowConstants.STATUS_ANY) {
      qPos.add(status);
    }
    qPos.add(folderId);
    qPos.add(groupId);
    qPos.add(folderId);
    List<Object> models=new ArrayList<Object>();
    Iterator<Object[]> itr=(Iterator<Object[]>)QueryUtil.iterate(q,getDialect(),start,end);
    while (itr.hasNext()) {
      Object[] array=itr.next();
      long curFolderId=(Long)array[0];
      String name=(String)array[1];
      long fileShortcutId=(Long)array[3];
      long modelFolder=(Long)array[4];
      Object obj=null;
      if (modelFolder == 1) {
        obj=DLFolderUtil.findByPrimaryKey(curFolderId);
      }
 else       if (fileShortcutId > 0) {
        obj=DLFileShortcutUtil.findByPrimaryKey(fileShortcutId);
      }
 else {
        obj=DLFileEntryUtil.findByG_F_N(groupId,curFolderId,name);
      }
      models.add(obj);
    }
    return models;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
