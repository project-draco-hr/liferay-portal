{
  boolean enabled=ParamUtil.getBoolean(req,"enabled");
  boolean required=ParamUtil.getBoolean(req,"required");
  String baseProviderURL=ParamUtil.getString(req,"baseProviderURL");
  String baseDN=ParamUtil.getString(req,"baseDN");
  String principal=ParamUtil.getString(req,"principal");
  String credentials=ParamUtil.getString(req,"credentials");
  String searchFilter=ParamUtil.getString(req,"searchFilter");
  String userDefaultObjectClasses=ParamUtil.getString(req,"userDefaultObjectClasses");
  String userMappings="screenName=" + ParamUtil.getString(req,"userMappingScreenName") + "\npassword="+ ParamUtil.getString(req,"userMappingPassword")+ "\nemailAddress="+ ParamUtil.getString(req,"userMappingEmailAddress")+ "\nfullName="+ ParamUtil.getString(req,"userMappingFullName")+ "\nfirstName="+ ParamUtil.getString(req,"userMappingFirstName")+ "\nlastName="+ ParamUtil.getString(req,"userMappingLastName")+ "\njobTitle="+ ParamUtil.getString(req,"userMappingJobTitle")+ "\ngroup="+ ParamUtil.getString(req,"userMappingGroup");
  String groupMappings="groupName=" + ParamUtil.getString(req,"groupMappingGroupName") + "\ndescription="+ ParamUtil.getString(req,"groupMappingDescription")+ "\nuser="+ ParamUtil.getString(req,"groupMappingUser");
  boolean importEnabled=ParamUtil.getBoolean(req,"importEnabled");
  boolean importOnStartup=ParamUtil.getBoolean(req,"importOnStartup");
  long importInterval=ParamUtil.getLong(req,"importInterval");
  String importUserSearchFilter=ParamUtil.getString(req,"importUserSearchFilter");
  String importGroupSearchFilter=ParamUtil.getString(req,"importGroupSearchFilter");
  boolean exportEnabled=ParamUtil.getBoolean(req,"exportEnabled");
  String usersDN=ParamUtil.getString(req,"usersDN");
  String groupsDN=ParamUtil.getString(req,"groupsDN");
  boolean passwordPolicyEnabled=ParamUtil.getBoolean(req,"passwordPolicyEnabled");
  try {
    if (enabled) {
      String fullProviderURL=LDAPUtil.getFullProviderURL(baseProviderURL,baseDN);
      PortalLDAPUtil.getContext(companyId,fullProviderURL,principal,credentials);
    }
  }
 catch (  Exception e) {
    SessionErrors.add(req,"ldapAuthentication");
    return;
  }
  prefs.setValue(PropsUtil.LDAP_AUTH_ENABLED,String.valueOf(enabled));
  prefs.setValue(PropsUtil.LDAP_AUTH_REQUIRED,String.valueOf(required));
  prefs.setValue(PropsUtil.LDAP_BASE_PROVIDER_URL,baseProviderURL);
  prefs.setValue(PropsUtil.LDAP_BASE_DN,baseDN);
  prefs.setValue(PropsUtil.LDAP_SECURITY_PRINCIPAL,principal);
  prefs.setValue(PropsUtil.LDAP_SECURITY_CREDENTIALS,credentials);
  prefs.setValue(PropsUtil.LDAP_AUTH_SEARCH_FILTER,searchFilter);
  prefs.setValue(PropsUtil.LDAP_USER_DEFAULT_OBJECT_CLASSES,userDefaultObjectClasses);
  prefs.setValue(PropsUtil.LDAP_USER_MAPPINGS,userMappings);
  prefs.setValue(PropsUtil.LDAP_GROUP_MAPPINGS,groupMappings);
  prefs.setValue(PropsUtil.LDAP_IMPORT_ENABLED,String.valueOf(importEnabled));
  prefs.setValue(PropsUtil.LDAP_IMPORT_ON_STARTUP,String.valueOf(importOnStartup));
  prefs.setValue(PropsUtil.LDAP_IMPORT_INTERVAL,String.valueOf(importInterval));
  prefs.setValue(PropsUtil.LDAP_IMPORT_USER_SEARCH_FILTER,importUserSearchFilter);
  prefs.setValue(PropsUtil.LDAP_IMPORT_GROUP_SEARCH_FILTER,importGroupSearchFilter);
  prefs.setValue(PropsUtil.LDAP_EXPORT_ENABLED,String.valueOf(exportEnabled));
  prefs.setValue(PropsUtil.LDAP_USERS_DN,usersDN);
  prefs.setValue(PropsUtil.LDAP_GROUPS_DN,groupsDN);
  prefs.setValue(PropsUtil.LDAP_PASSWORD_POLICY_ENABLED,String.valueOf(passwordPolicyEnabled));
  prefs.store();
}
