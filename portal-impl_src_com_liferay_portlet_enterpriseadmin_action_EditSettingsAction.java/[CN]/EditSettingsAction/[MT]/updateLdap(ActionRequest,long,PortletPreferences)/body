{
  boolean enabled=ParamUtil.getBoolean(actionRequest,"enabled");
  boolean required=ParamUtil.getBoolean(actionRequest,"required");
  String baseProviderURL=ParamUtil.getString(actionRequest,"baseProviderURL");
  String baseDN=ParamUtil.getString(actionRequest,"baseDN");
  String principal=ParamUtil.getString(actionRequest,"principal");
  String credentials=ParamUtil.getString(actionRequest,"credentials");
  String searchFilter=ParamUtil.getString(actionRequest,"searchFilter");
  String userDefaultObjectClasses=ParamUtil.getString(actionRequest,"userDefaultObjectClasses");
  String userMappings="screenName=" + ParamUtil.getString(actionRequest,"userMappingScreenName") + "\npassword="+ ParamUtil.getString(actionRequest,"userMappingPassword")+ "\nemailAddress="+ ParamUtil.getString(actionRequest,"userMappingEmailAddress")+ "\nfullName="+ ParamUtil.getString(actionRequest,"userMappingFullName")+ "\nfirstName="+ ParamUtil.getString(actionRequest,"userMappingFirstName")+ "\nlastName="+ ParamUtil.getString(actionRequest,"userMappingLastName")+ "\njobTitle="+ ParamUtil.getString(actionRequest,"userMappingJobTitle")+ "\ngroup="+ ParamUtil.getString(actionRequest,"userMappingGroup");
  String groupMappings="groupName=" + ParamUtil.getString(actionRequest,"groupMappingGroupName") + "\ndescription="+ ParamUtil.getString(actionRequest,"groupMappingDescription")+ "\nuser="+ ParamUtil.getString(actionRequest,"groupMappingUser");
  boolean importEnabled=ParamUtil.getBoolean(actionRequest,"importEnabled");
  boolean importOnStartup=ParamUtil.getBoolean(actionRequest,"importOnStartup");
  long importInterval=ParamUtil.getLong(actionRequest,"importInterval");
  String importUserSearchFilter=ParamUtil.getString(actionRequest,"importUserSearchFilter");
  String importGroupSearchFilter=ParamUtil.getString(actionRequest,"importGroupSearchFilter");
  boolean exportEnabled=ParamUtil.getBoolean(actionRequest,"exportEnabled");
  String usersDN=ParamUtil.getString(actionRequest,"usersDN");
  String groupsDN=ParamUtil.getString(actionRequest,"groupsDN");
  boolean passwordPolicyEnabled=ParamUtil.getBoolean(actionRequest,"passwordPolicyEnabled");
  try {
    if (enabled) {
      String fullProviderURL=LDAPUtil.getFullProviderURL(baseProviderURL,baseDN);
      PortalLDAPUtil.getContext(companyId,fullProviderURL,principal,credentials);
    }
  }
 catch (  Exception e) {
    SessionErrors.add(actionRequest,"ldapAuthentication");
    return;
  }
  preferences.setValue(PropsKeys.LDAP_AUTH_ENABLED,String.valueOf(enabled));
  preferences.setValue(PropsKeys.LDAP_AUTH_REQUIRED,String.valueOf(required));
  preferences.setValue(PropsKeys.LDAP_BASE_PROVIDER_URL,baseProviderURL);
  preferences.setValue(PropsKeys.LDAP_BASE_DN,baseDN);
  preferences.setValue(PropsKeys.LDAP_SECURITY_PRINCIPAL,principal);
  preferences.setValue(PropsKeys.LDAP_SECURITY_CREDENTIALS,credentials);
  preferences.setValue(PropsKeys.LDAP_AUTH_SEARCH_FILTER,searchFilter);
  preferences.setValue(PropsKeys.LDAP_USER_DEFAULT_OBJECT_CLASSES,userDefaultObjectClasses);
  preferences.setValue(PropsKeys.LDAP_USER_MAPPINGS,userMappings);
  preferences.setValue(PropsKeys.LDAP_GROUP_MAPPINGS,groupMappings);
  preferences.setValue(PropsKeys.LDAP_IMPORT_ENABLED,String.valueOf(importEnabled));
  preferences.setValue(PropsKeys.LDAP_IMPORT_ON_STARTUP,String.valueOf(importOnStartup));
  preferences.setValue(PropsKeys.LDAP_IMPORT_INTERVAL,String.valueOf(importInterval));
  preferences.setValue(PropsKeys.LDAP_IMPORT_USER_SEARCH_FILTER,importUserSearchFilter);
  preferences.setValue(PropsKeys.LDAP_IMPORT_GROUP_SEARCH_FILTER,importGroupSearchFilter);
  preferences.setValue(PropsKeys.LDAP_EXPORT_ENABLED,String.valueOf(exportEnabled));
  preferences.setValue(PropsKeys.LDAP_USERS_DN,usersDN);
  preferences.setValue(PropsKeys.LDAP_GROUPS_DN,groupsDN);
  preferences.setValue(PropsKeys.LDAP_PASSWORD_POLICY_ENABLED,String.valueOf(passwordPolicyEnabled));
  preferences.store();
}
