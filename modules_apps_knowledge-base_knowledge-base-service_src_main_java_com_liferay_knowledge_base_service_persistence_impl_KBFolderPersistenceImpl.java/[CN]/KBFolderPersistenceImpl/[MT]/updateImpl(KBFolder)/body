{
  kbFolder=toUnwrappedModel(kbFolder);
  boolean isNew=kbFolder.isNew();
  KBFolderModelImpl kbFolderModelImpl=(KBFolderModelImpl)kbFolder;
  if (Validator.isNull(kbFolder.getUuid())) {
    String uuid=PortalUUIDUtil.generate();
    kbFolder.setUuid(uuid);
  }
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  Date now=new Date();
  if (isNew && (kbFolder.getCreateDate() == null)) {
    if (serviceContext == null) {
      kbFolder.setCreateDate(now);
    }
 else {
      kbFolder.setCreateDate(serviceContext.getCreateDate(now));
    }
  }
  if (!kbFolderModelImpl.hasSetModifiedDate()) {
    if (serviceContext == null) {
      kbFolder.setModifiedDate(now);
    }
 else {
      kbFolder.setModifiedDate(serviceContext.getModifiedDate(now));
    }
  }
  Session session=null;
  try {
    session=openSession();
    if (kbFolder.isNew()) {
      session.save(kbFolder);
      kbFolder.setNew(false);
    }
 else {
      kbFolder=(KBFolder)session.merge(kbFolder);
    }
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
  finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
  if (isNew || !KBFolderModelImpl.COLUMN_BITMASK_ENABLED) {
    finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
  }
 else {
    if ((kbFolderModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{kbFolderModelImpl.getOriginalUuid()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID,args);
      args=new Object[]{kbFolderModelImpl.getUuid()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID,args);
    }
    if ((kbFolderModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{kbFolderModelImpl.getOriginalUuid(),kbFolderModelImpl.getOriginalCompanyId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C,args);
      args=new Object[]{kbFolderModelImpl.getUuid(),kbFolderModelImpl.getCompanyId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C,args);
    }
    if ((kbFolderModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_P.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{kbFolderModelImpl.getOriginalGroupId(),kbFolderModelImpl.getOriginalParentKBFolderId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_P,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_P,args);
      args=new Object[]{kbFolderModelImpl.getGroupId(),kbFolderModelImpl.getParentKBFolderId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_P,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_P,args);
    }
  }
  entityCache.putResult(KBFolderModelImpl.ENTITY_CACHE_ENABLED,KBFolderImpl.class,kbFolder.getPrimaryKey(),kbFolder,false);
  clearUniqueFindersCache(kbFolderModelImpl);
  cacheUniqueFindersCache(kbFolderModelImpl,isNew);
  kbFolder.resetOriginalValues();
  return kbFolder;
}
