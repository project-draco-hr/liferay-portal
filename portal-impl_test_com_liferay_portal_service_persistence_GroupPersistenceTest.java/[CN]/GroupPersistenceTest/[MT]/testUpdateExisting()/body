{
  long pk=nextLong();
  Group newGroup=_persistence.create(pk);
  newGroup.setCompanyId(nextLong());
  newGroup.setCreatorUserId(nextLong());
  newGroup.setClassNameId(nextLong());
  newGroup.setClassPK(nextLong());
  newGroup.setParentGroupId(nextLong());
  newGroup.setLiveGroupId(nextLong());
  newGroup.setName(randomString());
  newGroup.setDescription(randomString());
  newGroup.setType(nextInt());
  newGroup.setTypeSettings(randomString());
  newGroup.setFriendlyURL(randomString());
  newGroup.setActive(randomBoolean());
  _persistence.update(newGroup);
  Group existingGroup=_persistence.findByPrimaryKey(newGroup.getPrimaryKey());
  assertEquals(existingGroup.getGroupId(),newGroup.getGroupId());
  assertEquals(existingGroup.getCompanyId(),newGroup.getCompanyId());
  assertEquals(existingGroup.getCreatorUserId(),newGroup.getCreatorUserId());
  assertEquals(existingGroup.getClassNameId(),newGroup.getClassNameId());
  assertEquals(existingGroup.getClassPK(),newGroup.getClassPK());
  assertEquals(existingGroup.getParentGroupId(),newGroup.getParentGroupId());
  assertEquals(existingGroup.getLiveGroupId(),newGroup.getLiveGroupId());
  assertEquals(existingGroup.getName(),newGroup.getName());
  assertEquals(existingGroup.getDescription(),newGroup.getDescription());
  assertEquals(existingGroup.getType(),newGroup.getType());
  assertEquals(existingGroup.getTypeSettings(),newGroup.getTypeSettings());
  assertEquals(existingGroup.getFriendlyURL(),newGroup.getFriendlyURL());
  assertEquals(existingGroup.getActive(),newGroup.getActive());
}
