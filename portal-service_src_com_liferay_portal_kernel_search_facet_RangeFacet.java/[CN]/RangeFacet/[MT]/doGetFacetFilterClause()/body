{
  SearchContext searchContext=getSearchContext();
  FacetConfiguration facetConfiguration=getFacetConfiguration();
  JSONObject dataJSONObject=facetConfiguration.getData();
  String start=StringPool.BLANK;
  String end=StringPool.BLANK;
  if (isStatic() && dataJSONObject.has("ranges")) {
    JSONArray rangesJSONArray=dataJSONObject.getJSONArray("ranges");
    JSONObject rangeJSONObject=rangesJSONArray.getJSONObject(0);
    String rangeString=rangeJSONObject.getString("range");
    String[] range=RangeParserUtil.parserRange(rangeString);
    start=range[0];
    end=range[1];
  }
  String rangeParam=GetterUtil.getString(searchContext.getAttribute(getFieldId()));
  if (!isStatic() && Validator.isNotNull(rangeParam)) {
    String[] range=RangeParserUtil.parserRange(rangeParam);
    start=range[0];
    end=range[1];
  }
  if (Validator.isNull(start) && Validator.isNull(end)) {
    return null;
  }
  if (Validator.isNotNull(start) && Validator.isNotNull(end) && (start.compareTo(end) > 0)) {
    throw new IllegalArgumentException("End value must be greater than start value");
  }
  String startString=StringPool.STAR;
  if (Validator.isNotNull(start)) {
    startString=start;
  }
  String endString=StringPool.STAR;
  if (Validator.isNotNull(end)) {
    endString=end;
  }
  RangeTermFilter rangeTermFilter=new RangeTermFilter(getFieldName(),true,true,startString,endString);
  return BooleanClauseFactoryUtil.createFilter(searchContext,rangeTermFilter,BooleanClauseOccur.MUST);
}
