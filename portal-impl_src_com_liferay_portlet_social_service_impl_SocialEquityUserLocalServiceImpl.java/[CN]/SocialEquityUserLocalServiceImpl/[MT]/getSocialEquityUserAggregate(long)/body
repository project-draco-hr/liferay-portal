{
  SocialEquityUser socialEquityUser=new SocialEquityUserImpl();
  DynamicQuery query=DynamicQueryFactoryUtil.forClass(SocialEquityUser.class);
  ProjectionList projections=ProjectionFactoryUtil.projectionList();
  projections.add(ProjectionFactoryUtil.sum("contributionK"));
  projections.add(ProjectionFactoryUtil.sum("contributionB"));
  projections.add(ProjectionFactoryUtil.sum("participationK"));
  projections.add(ProjectionFactoryUtil.sum("participationB"));
  query.setProjection(projections);
  query.add(RestrictionsFactoryUtil.eq("userId",userId));
  List<?> result=dynamicQuery(query);
  Object[] values=(Object[])result.get(0);
  if (values[0] != null)   socialEquityUser.setContributionK((Double)values[0]);
  if (values[1] != null)   socialEquityUser.setContributionB((Double)values[1]);
  if (values[2] != null)   socialEquityUser.setParticipationK((Double)values[2]);
  if (values[3] != null)   socialEquityUser.setParticipationB((Double)values[3]);
  return socialEquityUser;
}
