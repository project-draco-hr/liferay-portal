{
  final ActionableDynamicQuery actionableDynamicQuery=BookmarksEntryLocalServiceUtil.getActionableDynamicQuery();
  actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      Property folderIdProperty=PropertyFactoryUtil.forName("folderId");
      dynamicQuery.add(folderIdProperty.eq(folderId));
      Property statusProperty=PropertyFactoryUtil.forName("status");
      Integer[] statuses={WorkflowConstants.STATUS_APPROVED,WorkflowConstants.STATUS_IN_TRASH};
      dynamicQuery.add(statusProperty.in(statuses));
    }
  }
);
  actionableDynamicQuery.setCompanyId(companyId);
  actionableDynamicQuery.setGroupId(groupId);
  actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod(){
    @Override public void performAction(    Object object) throws PortalException {
      BookmarksEntry entry=(BookmarksEntry)object;
      try {
        Document document=getDocument(entry);
        actionableDynamicQuery.addDocument(document);
      }
 catch (      PortalException e) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to index bookmark entry: " + entry.getEntryId() + " - "+ entry.getName(),e);
        }
      }
    }
  }
);
  actionableDynamicQuery.setSearchEngineId(getSearchEngineId());
  actionableDynamicQuery.performActions();
}
