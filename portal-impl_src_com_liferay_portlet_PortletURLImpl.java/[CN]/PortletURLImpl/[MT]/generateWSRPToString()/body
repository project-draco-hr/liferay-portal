{
  StringBundler sb=new StringBundler("wsrp_rewrite?");
  sb.append("wsrp-urlType");
  sb.append(StringPool.EQUAL);
  if (_lifecycle.equals(PortletRequest.ACTION_PHASE)) {
    sb.append(HttpUtil.encodeURL("blockingAction"));
  }
 else   if (_lifecycle.equals(PortletRequest.RENDER_PHASE)) {
    sb.append(HttpUtil.encodeURL("render"));
  }
 else   if (_lifecycle.equals(PortletRequest.RESOURCE_PHASE)) {
    sb.append(HttpUtil.encodeURL("resource"));
  }
  sb.append(StringPool.AMPERSAND);
  if (_windowStateString != null) {
    sb.append("wsrp-windowState");
    sb.append(StringPool.EQUAL);
    sb.append(HttpUtil.encodeURL("wsrp:" + _windowStateString));
    sb.append(StringPool.AMPERSAND);
  }
  if (_portletModeString != null) {
    sb.append("wsrp-mode");
    sb.append(StringPool.EQUAL);
    sb.append(HttpUtil.encodeURL("wsrp:" + _portletModeString));
    sb.append(StringPool.AMPERSAND);
  }
  if (_resourceID != null) {
    sb.append("wsrp-resourceID");
    sb.append(StringPool.EQUAL);
    sb.append(HttpUtil.encodeURL(_resourceID));
    sb.append(StringPool.AMPERSAND);
  }
  if (_lifecycle.equals(PortletRequest.RESOURCE_PHASE)) {
    sb.append("wsrp-resourceCacheability");
    sb.append(StringPool.EQUAL);
    sb.append(HttpUtil.encodeURL(_cacheability));
    sb.append(StringPool.AMPERSAND);
  }
  if (PropsValues.PORTLET_URL_ANCHOR_ENABLE) {
    if (_anchor && (_windowStateString != null) && !_windowStateString.equals(WindowState.MAXIMIZED.toString())&& !_windowStateString.equals(LiferayWindowState.EXCLUSIVE.toString())&& !_windowStateString.equals(LiferayWindowState.POP_UP.toString())) {
      sb.append("wsrp-fragmentID");
      sb.append(StringPool.EQUAL);
      sb.append("#p_");
      sb.append(_portletId);
      sb.append(StringPool.AMPERSAND);
    }
  }
  if (_copyCurrentRenderParameters) {
    mergeRenderParameters();
  }
  StringBundler parameterSb=new StringBundler();
  int previousSbIndex=sb.index();
  for (  Map.Entry<String,String[]> entry : _params.entrySet()) {
    String name=entry.getKey();
    String[] values=entry.getValue();
    if (isParameterIncludedInPath(name)) {
      continue;
    }
    String publicRenderParameterName=getPublicRenderParameterName(name);
    if (Validator.isNotNull(publicRenderParameterName)) {
      name=publicRenderParameterName;
    }
    name=prependNamespace(name);
    for (    String value : values) {
      parameterSb.append(name);
      parameterSb.append(StringPool.EQUAL);
      parameterSb.append(HttpUtil.encodeURL(value));
      parameterSb.append(StringPool.AMPERSAND);
    }
  }
  if (sb.index() > previousSbIndex) {
    sb.setIndex(sb.index() - 1);
  }
  sb.append("wsrp-navigationalState");
  sb.append(StringPool.EQUAL);
  byte[] parameterBytes=null;
  try {
    String parameterString=parameterSb.toString();
    parameterBytes=parameterString.getBytes(StringPool.UTF8);
  }
 catch (  UnsupportedEncodingException uee) {
    if (_log.isWarnEnabled()) {
      _log.warn(uee,uee);
    }
  }
  String navigationalState=Base64.toURLSafe(Base64.encode(parameterBytes));
  sb.append(navigationalState);
  sb.append("/wsrp_rewrite");
  return sb.toString();
}
