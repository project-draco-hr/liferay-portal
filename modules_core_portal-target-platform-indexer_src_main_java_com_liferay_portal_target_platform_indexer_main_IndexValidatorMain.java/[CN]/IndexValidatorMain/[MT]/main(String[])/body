{
  if ((args == null) || (args.length == 0)) {
    System.err.println("== Usage: <cmd> <list of index files or directories " + "containing index files>");
    return;
  }
  Boolean includeTargetPlatform=Boolean.getBoolean("include.target.platform");
  String moduleFrameworkBaseDirName=System.getProperty("module.framework.base.dir");
  if (includeTargetPlatform && (moduleFrameworkBaseDirName == null)) {
    System.err.println("== -Dmodule.framework.base.dir must be set when " + "-Dinclude.target.platform is set.");
    return;
  }
  List<URI> indexURIs=new ArrayList<>();
  for (  String arg : args) {
    File file=new File(arg);
    if (!file.exists() || !file.canRead()) {
      continue;
    }
    if (!file.isDirectory()) {
      String name=file.getName();
      if (name.endsWith(".xml") || name.endsWith(".xml.gz")) {
        indexURIs.add(file.toURI());
      }
      continue;
    }
    File[] childFiles=file.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        if (name.endsWith(".xml") || name.endsWith(".xml.gz")) {
          return true;
        }
        return false;
      }
    }
);
    for (    File childFile : childFiles) {
      if (childFile.exists() && childFile.canRead()) {
        indexURIs.add(childFile.toURI());
      }
    }
  }
  if (indexURIs.isEmpty()) {
    System.err.println("== No index files found in " + Arrays.toString(args));
    return;
  }
  List<URI> targetPlatformIndexURIs=new ArrayList<>();
  File targetPlatformDir=new File(moduleFrameworkBaseDirName,Indexer.DIR_NAME_TARGET_PLATFORM);
  if (targetPlatformDir.exists() && targetPlatformDir.canRead()) {
    File[] indexFiles=targetPlatformDir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        if (name.endsWith(".xml") || name.endsWith(".xml.gz")) {
          return true;
        }
        return false;
      }
    }
);
    for (    File indexFile : indexFiles) {
      targetPlatformIndexURIs.add(indexFile.toURI());
    }
  }
  DefaultIndexValidator defaultIndexValidator=new DefaultIndexValidator(targetPlatformIndexURIs);
  long start=System.currentTimeMillis();
  try {
    List<String> messages=defaultIndexValidator.validate(indexURIs);
    if (!messages.isEmpty()) {
      System.out.println("== Validation errors");
      for (      String message : messages) {
        System.out.println("== " + message);
      }
    }
 else {
      System.out.println("== Successfully validated");
    }
  }
  finally {
    long duration=System.currentTimeMillis() - start;
    System.out.printf("== Time %02d:%02ds\n",MILLISECONDS.toMinutes(duration),MILLISECONDS.toSeconds(duration % Time.MINUTE));
  }
}
