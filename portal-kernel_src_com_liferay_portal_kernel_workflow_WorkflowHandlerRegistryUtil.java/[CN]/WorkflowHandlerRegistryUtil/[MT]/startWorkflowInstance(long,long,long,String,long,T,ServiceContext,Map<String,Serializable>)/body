{
  if (serviceContext.getWorkflowAction() != WorkflowConstants.ACTION_PUBLISH) {
    return model;
  }
  final WorkflowHandler<T> workflowHandler=getWorkflowHandler(className);
  if (workflowHandler == null) {
    if (WorkflowThreadLocal.isEnabled()) {
      throw new WorkflowException("No workflow handler found for " + className);
    }
    return model;
  }
  boolean hasWorkflowInstanceInProgress=_instance._hasWorkflowInstanceInProgress(companyId,groupId,className,classPK);
  if (hasWorkflowInstanceInProgress) {
    if (_log.isWarnEnabled()) {
      _log.warn("Workflow already started for class " + className + " with primary key "+ classPK+ " in group "+ groupId);
    }
    return model;
  }
  WorkflowDefinitionLink workflowDefinitionLink=null;
  if (WorkflowThreadLocal.isEnabled() && WorkflowEngineManagerUtil.isDeployed()) {
    workflowDefinitionLink=workflowHandler.getWorkflowDefinitionLink(companyId,groupId,classPK);
  }
  int status=WorkflowConstants.STATUS_PENDING;
  if (workflowDefinitionLink == null) {
    status=WorkflowConstants.STATUS_APPROVED;
  }
  workflowContext=new HashMap<>(workflowContext);
  workflowContext.put(WorkflowConstants.CONTEXT_COMPANY_ID,String.valueOf(companyId));
  workflowContext.put(WorkflowConstants.CONTEXT_GROUP_ID,String.valueOf(groupId));
  workflowContext.put(WorkflowConstants.CONTEXT_USER_ID,String.valueOf(userId));
  workflowContext.put(WorkflowConstants.CONTEXT_ENTRY_CLASS_NAME,className);
  workflowContext.put(WorkflowConstants.CONTEXT_ENTRY_CLASS_PK,String.valueOf(classPK));
  workflowContext.put(WorkflowConstants.CONTEXT_ENTRY_TYPE,workflowHandler.getType(LocaleUtil.getDefault()));
  workflowContext.put(WorkflowConstants.CONTEXT_SERVICE_CONTEXT,serviceContext);
  workflowContext.put(WorkflowConstants.CONTEXT_TASK_COMMENTS,GetterUtil.getString(serviceContext.getAttribute("comments")));
  T updatedModel=workflowHandler.updateStatus(status,workflowContext);
  if (workflowDefinitionLink != null) {
    final Map<String,Serializable> tempWorkflowContext=workflowContext;
    TransactionCommitCallbackUtil.registerCallback(new Callable<Void>(){
      @Override public Void call() throws Exception {
        workflowHandler.startWorkflowInstance(companyId,groupId,userId,classPK,model,tempWorkflowContext);
        return null;
      }
    }
);
  }
  return updatedModel;
}
