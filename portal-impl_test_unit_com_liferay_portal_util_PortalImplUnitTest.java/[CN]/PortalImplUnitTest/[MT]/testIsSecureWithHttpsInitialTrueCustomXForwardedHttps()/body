{
  boolean companySecurityAuthRequiresHttps=PropsValues.COMPANY_SECURITY_AUTH_REQUIRES_HTTPS;
  boolean sessionEnablePhishingProtection=PropsValues.SESSION_ENABLE_PHISHING_PROTECTION;
  boolean webServerForwardedProtocolEnabled=PropsValues.WEB_SERVER_FORWARDED_PROTOCOL_ENABLED;
  String webServerForwardedProtocolEnabledHeader=PropsValues.WEB_SERVER_FORWARDED_PROTOCOL_HEADER;
  try {
    setPropsValuesValue("COMPANY_SECURITY_AUTH_REQUIRES_HTTPS",true);
    setPropsValuesValue("SESSION_ENABLE_PHISHING_PROTECTION",false);
    setPropsValuesValue("WEB_SERVER_FORWARDED_PROTOCOL_ENABLED",true);
    setPropsValuesValue("WEB_SERVER_FORWARDED_PROTOCOL_HEADER","X-Forwarded-Custom-Proto");
    MockHttpServletRequest mockHttpServletRequest=new MockHttpServletRequest();
    mockHttpServletRequest.addHeader("X-Forwarded-Custom-Proto","https");
    mockHttpServletRequest.setSecure(false);
    Assert.assertTrue(_portalImpl.isSecure(mockHttpServletRequest));
  }
  finally {
    setPropsValuesValue("COMPANY_SECURITY_AUTH_REQUIRES_HTTPS",companySecurityAuthRequiresHttps);
    setPropsValuesValue("SESSION_ENABLE_PHISHING_PROTECTION",sessionEnablePhishingProtection);
    setPropsValuesValue("WEB_SERVER_FORWARDED_PROTOCOL_ENABLED",webServerForwardedProtocolEnabled);
    setPropsValuesValue("WEB_SERVER_FORWARDED_PROTOCOL_HEADER",webServerForwardedProtocolEnabledHeader);
  }
}
