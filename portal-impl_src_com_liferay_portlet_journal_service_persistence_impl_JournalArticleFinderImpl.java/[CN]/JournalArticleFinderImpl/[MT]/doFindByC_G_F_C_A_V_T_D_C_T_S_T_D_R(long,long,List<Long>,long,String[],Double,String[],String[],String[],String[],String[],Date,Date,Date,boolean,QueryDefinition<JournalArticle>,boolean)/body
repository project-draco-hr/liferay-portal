{
  articleIds=CustomSQLUtil.keywords(articleIds,false);
  titles=CustomSQLUtil.keywords(titles);
  descriptions=CustomSQLUtil.keywords(descriptions,false);
  contents=CustomSQLUtil.keywords(contents,false);
  ddmStructureKeys=CustomSQLUtil.keywords(ddmStructureKeys,false);
  ddmTemplateKeys=CustomSQLUtil.keywords(ddmTemplateKeys,false);
  Timestamp displayDateGT_TS=CalendarUtil.getTimestamp(displayDateGT);
  Timestamp displayDateLT_TS=CalendarUtil.getTimestamp(displayDateLT);
  Timestamp reviewDate_TS=CalendarUtil.getTimestamp(reviewDate);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_G_F_C_A_V_T_D_C_T_S_T_D_R,queryDefinition,"JournalArticle");
    sql=replaceStatusJoin(sql,queryDefinition);
    if (groupId <= 0) {
      sql=StringUtil.replace(sql,"(JournalArticle.groupId = ?) AND",StringPool.BLANK);
    }
    if (folderIds.isEmpty()) {
      sql=StringUtil.replace(sql,"([$FOLDER_ID$]) AND",StringPool.BLANK);
    }
 else {
      sql=StringUtil.replace(sql,"[$FOLDER_ID$]",getFolderIds(folderIds,JournalArticleImpl.TABLE_NAME));
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"JournalArticle.articleId",StringPool.LIKE,false,articleIds);
    if ((version == null) || (version <= 0)) {
      sql=StringUtil.replace(sql,"(JournalArticle.version = ?) [$AND_OR_CONNECTOR$]",StringPool.BLANK);
    }
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(JournalArticle.title)",StringPool.LIKE,false,titles);
    sql=CustomSQLUtil.replaceKeywords(sql,"JournalArticle.description",StringPool.LIKE,false,descriptions);
    sql=CustomSQLUtil.replaceKeywords(sql,"JournalArticle.content",StringPool.LIKE,false,contents);
    sql=replaceStructureTemplate(sql,ddmStructureKeys,ddmTemplateKeys);
    if (!isNullArray(ddmStructureKeys)) {
      sql=CustomSQLUtil.replaceKeywords(sql,"JournalArticle.DDMStructureKey",StringPool.LIKE,false,ddmStructureKeys);
    }
    if (!isNullArray(ddmTemplateKeys)) {
      sql=CustomSQLUtil.replaceKeywords(sql,"JournalArticle.DDMTemplateKey",StringPool.LIKE,false,ddmTemplateKeys);
    }
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    sql=CustomSQLUtil.replaceOrderBy(sql,queryDefinition.getOrderByComparator("JournalArticle"));
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,JournalArticle.class.getName(),"JournalArticle.resourcePrimKey",groupId);
      sql=StringUtil.replace(sql,"(companyId","(JournalArticle.companyId");
    }
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addEntity(JournalArticleImpl.TABLE_NAME,JournalArticleImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    if (groupId > 0) {
      qPos.add(groupId);
    }
    for (    long folderId : folderIds) {
      qPos.add(folderId);
    }
    qPos.add(classNameId);
    qPos.add(queryDefinition.getStatus());
    if (!isNullArray(ddmStructureKeys)) {
      qPos.add(ddmStructureKeys,2);
    }
    if (!isNullArray(ddmTemplateKeys)) {
      qPos.add(ddmTemplateKeys,2);
    }
    qPos.add(articleIds,2);
    if ((version != null) && (version > 0)) {
      qPos.add(version);
    }
    qPos.add(titles,2);
    qPos.add(descriptions,2);
    qPos.add(contents,2);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateGT_TS);
    qPos.add(displayDateLT_TS);
    qPos.add(displayDateLT_TS);
    qPos.add(reviewDate_TS);
    qPos.add(reviewDate_TS);
    return (List<JournalArticle>)QueryUtil.list(q,getDialect(),queryDefinition.getStart(),queryDefinition.getEnd());
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
