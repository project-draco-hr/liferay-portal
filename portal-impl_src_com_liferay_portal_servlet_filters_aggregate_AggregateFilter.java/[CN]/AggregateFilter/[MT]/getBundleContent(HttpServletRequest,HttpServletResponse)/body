{
  String minifierType=ParamUtil.getString(request,"minifierType");
  String bundleId=ParamUtil.getString(request,"bundleId",ParamUtil.getString(request,"minifierBundleId"));
  if (Validator.isNull(minifierType) || Validator.isNull(bundleId) || !ArrayUtil.contains(PropsValues.JAVASCRIPT_BUNDLE_IDS,bundleId)) {
    return null;
  }
  String bundleDirName=PropsUtil.get(PropsKeys.JAVASCRIPT_BUNDLE_DIR,new Filter(bundleId));
  ServletContext portalWebResourcesServletContext=PortalWebResourcesUtil.getServletContext(PortalWebResourceConstants.RESOURCE_TYPE_JS);
  URL bundleDirURL=portalWebResourcesServletContext.getResource(bundleDirName);
  if (bundleDirURL == null) {
    return null;
  }
  String cacheFileName=bundleId;
  String[] fileNames=JavaScriptBundleUtil.getFileNames(bundleId);
  File cacheFile=new File(_tempDir,cacheFileName);
  if (cacheFile.exists()) {
    boolean staleCache=false;
    for (    String fileName : fileNames) {
      long lastModified=FileTimestampUtil.getTimestamp(portalWebResourcesServletContext,bundleDirName.concat(StringPool.SLASH).concat(fileName));
      if (lastModified > cacheFile.lastModified()) {
        staleCache=true;
        break;
      }
    }
    if (!staleCache) {
      response.setContentType(ContentTypes.TEXT_JAVASCRIPT);
      return cacheFile;
    }
  }
  if (_log.isInfoEnabled()) {
    _log.info("Aggregating JavaScript bundle " + bundleId);
  }
  String content=null;
  if (fileNames.length == 0) {
    content=StringPool.BLANK;
  }
 else {
    content=aggregateJavaScript(new ServletPaths(portalWebResourcesServletContext,bundleDirName),fileNames);
  }
  response.setContentType(ContentTypes.TEXT_JAVASCRIPT);
  FileUtil.write(cacheFile,content);
  return content;
}
