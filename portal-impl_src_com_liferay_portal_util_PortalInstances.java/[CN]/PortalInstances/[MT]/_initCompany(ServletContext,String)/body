{
  if (_log.isDebugEnabled()) {
    _log.debug("Begin initializing company with web id " + webId);
  }
  long companyId=0;
  try {
    Company company=CompanyLocalServiceUtil.checkCompany(webId);
    companyId=company.getCompanyId();
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  CompanyThreadLocal.setCompanyId(companyId);
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize display");
  }
  try {
    String xml=Http.URLtoString(ctx.getResource("/WEB-INF/liferay-display.xml"));
    PortletCategory portletCategory=(PortletCategory)WebAppPool.get(String.valueOf(companyId),WebKeys.PORTLET_CATEGORY);
    if (portletCategory == null) {
      portletCategory=new PortletCategory();
    }
    PortletCategory newPortletCategory=PortletLocalServiceUtil.getEARDisplay(xml);
    portletCategory.merge(newPortletCategory);
    WebAppPool.put(String.valueOf(companyId),WebKeys.PORTLET_CATEGORY,portletCategory);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Check journal content search");
  }
  if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.JOURNAL_SYNC_CONTENT_SEARCH_ON_STARTUP))) {
    try {
      JournalContentSearchLocalServiceUtil.checkContentSearches(companyId);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Scheduler");
  }
  try {
    if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.SCHEDULER_ENABLED))) {
      Iterator itr=PortletLocalServiceUtil.getPortlets(companyId).iterator();
      while (itr.hasNext()) {
        Portlet portlet=(Portlet)itr.next();
        String className=portlet.getSchedulerClass();
        if (portlet.isActive() && Validator.isNotNull(className)) {
          Scheduler scheduler=(Scheduler)InstancePool.get(className);
          scheduler.schedule();
        }
      }
    }
  }
 catch (  ObjectAlreadyExistsException oaee) {
  }
catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("SMTP message listener");
  }
  try {
    Iterator itr=PortletLocalServiceUtil.getPortlets(companyId).iterator();
    while (itr.hasNext()) {
      Portlet portlet=(Portlet)itr.next();
      MessageListener smtpMessageListener=portlet.getSmtpMessageListener();
      if (portlet.isActive() && (smtpMessageListener != null)) {
        SMTPServerUtil.addListener(smtpMessageListener);
      }
    }
  }
 catch (  ObjectAlreadyExistsException oaee) {
  }
catch (  Exception e) {
    _log.error(e,e);
  }
  try {
    if (PortalLDAPUtil.isImportOnStartup(companyId)) {
      PortalLDAPUtil.importFromLDAP(companyId);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Message resources");
  }
  MultiMessageResources messageResources=(MultiMessageResources)ctx.getAttribute(Globals.MESSAGES_KEY);
  messageResources.setServletContext(ctx);
  WebAppPool.put(String.valueOf(companyId),Globals.MESSAGES_KEY,messageResources);
  if (_log.isDebugEnabled()) {
    _log.debug("Process application startup events");
  }
  try {
    EventsProcessor.process(PropsUtil.getArray(PropsUtil.APPLICATION_STARTUP_EVENTS),new String[]{String.valueOf(companyId)});
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("End initializing company with web id " + webId + " and company id "+ companyId);
  }
  addCompanyId(companyId);
  return companyId;
}
