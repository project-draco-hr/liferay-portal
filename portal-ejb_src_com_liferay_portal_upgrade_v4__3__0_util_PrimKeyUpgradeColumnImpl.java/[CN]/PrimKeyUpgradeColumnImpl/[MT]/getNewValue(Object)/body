{
  String primKey=(String)oldValue;
  if (_scopeColumn.isScopeIndividual() && primKey.startsWith(StringPool.OPEN_CURLY_BRACE) && primKey.endsWith(StringPool.CLOSE_CURLY_BRACE)) {
    String[] parts=StringUtil.split(primKey.substring(1,primKey.length() - 1),StringPool.COMMA + StringPool.SPACE);
    for (int i=0; i < parts.length; i++) {
      String[] kvp=StringUtil.split(parts[i],StringPool.EQUAL);
      Iterator itr=_keyMapperList.iterator();
      while (itr.hasNext()) {
        Object[] keyMapper=(Object[])itr.next();
        if (kvp[0].equals(keyMapper[0])) {
          ValueMapper vm=(ValueMapper)keyMapper[1];
          Object value=null;
          if (Validator.isNumber(kvp[1])) {
            value=new Long(kvp[1]);
          }
 else {
            value=(String)kvp[1];
          }
          kvp[1]=String.valueOf(vm.getNewValue(value));
          parts[i]=StringUtil.merge(kvp,StringPool.EQUAL);
        }
      }
    }
    primKey=StringPool.OPEN_CURLY_BRACE + StringUtil.merge(parts,StringPool.COMMA + StringPool.SPACE) + StringPool.CLOSE_CURLY_BRACE;
  }
  return primKey;
}
