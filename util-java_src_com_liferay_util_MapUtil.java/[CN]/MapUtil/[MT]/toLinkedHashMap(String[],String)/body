{
  LinkedHashMap map=new LinkedHashMap();
  for (int i=0; i < params.length; i++) {
    String[] kvp=StringUtil.split(params[i],delimiter);
    if (kvp.length == 2) {
      map.put(kvp[0],kvp[1]);
    }
 else     if (kvp.length == 3) {
      String type=kvp[2];
      if (type.equalsIgnoreCase("boolean") || type.equals(Boolean.class.getName())) {
        map.put(kvp[0],new Boolean(kvp[1]));
      }
 else       if (type.equalsIgnoreCase("double") || type.equals(Double.class.getName())) {
        map.put(kvp[0],new Double(kvp[1]));
      }
 else       if (type.equalsIgnoreCase("int") || type.equals(Integer.class.getName())) {
        map.put(kvp[0],new Integer(kvp[1]));
      }
 else       if (type.equalsIgnoreCase("long") || type.equals(Long.class.getName())) {
        map.put(kvp[0],new Long(kvp[1]));
      }
 else       if (type.equalsIgnoreCase("short") || type.equals(Short.class.getName())) {
        map.put(kvp[0],new Short(kvp[1]));
      }
 else       if (type.equals(String.class.getName())) {
        map.put(kvp[0],kvp[1]);
      }
 else {
        try {
          Class klass=Class.forName(type);
          Constructor stringConstructor=klass.getConstructor(new Class[]{String.class});
          map.put(kvp[0],stringConstructor.newInstance(kvp[1]));
        }
 catch (        Exception e) {
          _log.error(e,e);
        }
      }
    }
  }
  return map;
}
