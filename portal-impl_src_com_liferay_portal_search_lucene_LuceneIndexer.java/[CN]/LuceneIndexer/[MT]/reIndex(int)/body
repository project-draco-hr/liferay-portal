{
  ShardedUtil.pushCompanyService(_companyId);
  try {
    if (PropsValues.INDEX_READ_ONLY) {
      return;
    }
    if (_log.isInfoEnabled()) {
      _log.info("Reindexing Lucene started");
    }
    if (delay < 0) {
      delay=0;
    }
    try {
      if (delay > 0) {
        Thread.sleep(Time.SECOND * delay);
      }
    }
 catch (    InterruptedException ie) {
    }
    StopWatch stopWatch1=null;
    if (_log.isInfoEnabled()) {
      stopWatch1=new StopWatch();
      stopWatch1.start();
    }
    LuceneUtil.delete(_companyId);
    try {
      IndexWriter writer=LuceneUtil.getWriter(_companyId,true);
      LuceneUtil.write(writer);
    }
 catch (    IOException ioe) {
      _log.error(ioe.getMessage(),ioe);
    }
    String[] indexIds=new String[]{String.valueOf(_companyId)};
    try {
      List<Portlet> portlets=PortletLocalServiceUtil.getPortlets(_companyId);
      portlets=ListUtil.sort(portlets,new PortletLuceneComparator());
      for (      Portlet portlet : portlets) {
        if (!portlet.isActive()) {
          continue;
        }
        Indexer indexer=portlet.getIndexerInstance();
        if (indexer == null) {
          continue;
        }
        String indexerClass=portlet.getIndexerClass();
        StopWatch stopWatch2=null;
        if (_log.isInfoEnabled()) {
          stopWatch2=new StopWatch();
          stopWatch2.start();
        }
        if (_log.isInfoEnabled()) {
          _log.info("Reindexing with " + indexerClass + " started");
        }
        indexer.reIndex(indexIds);
        if (_log.isInfoEnabled()) {
          _log.info("Reindexing with " + indexerClass + " completed in "+ (stopWatch2.getTime() / Time.SECOND)+ " seconds");
        }
      }
      if (_log.isInfoEnabled()) {
        _log.info("Reindexing Lucene completed in " + (stopWatch1.getTime() / Time.SECOND) + " seconds");
      }
    }
 catch (    Exception e) {
      _log.error("Error encountered while reindexing",e);
      if (_log.isInfoEnabled()) {
        _log.info("Reindexing Lucene failed");
      }
    }
    _finished=true;
  }
  finally {
    ShardedUtil.popCompanyService();
  }
}
