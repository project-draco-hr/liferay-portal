{
  long userId=portletDataContext.getUserId(article.getUserUuid());
  JournalCreationStrategy creationStrategy=JournalCreationStrategyFactory.getInstance();
  long authorId=creationStrategy.getAuthorUserId(portletDataContext,article);
  if (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {
    userId=authorId;
  }
  User user=UserLocalServiceUtil.getUser(userId);
  Map<Long,Long> folderIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(JournalFolder.class);
  long folderId=MapUtil.getLong(folderIds,article.getFolderId(),article.getFolderId());
  String articleId=article.getArticleId();
  boolean autoArticleId=false;
  if (Validator.isNumber(articleId) || (JournalArticleLocalServiceUtil.fetchArticle(portletDataContext.getScopeGroupId(),articleId,JournalArticleConstants.VERSION_DEFAULT) != null)) {
    autoArticleId=true;
  }
  Map<String,String> articleIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalArticle.class + ".articleId");
  String newArticleId=articleIds.get(articleId);
  if (Validator.isNotNull(newArticleId)) {
    articleId=newArticleId;
    autoArticleId=false;
  }
  String content=article.getContent();
  content=ExportImportHelperUtil.replaceImportContentReferences(portletDataContext,article,content);
  article.setContent(content);
  String newContent=creationStrategy.getTransformedContent(portletDataContext,article);
  if (newContent != JournalCreationStrategy.ARTICLE_CONTENT_UNCHANGED) {
    article.setContent(newContent);
  }
  Date displayDate=article.getDisplayDate();
  int displayDateMonth=0;
  int displayDateDay=0;
  int displayDateYear=0;
  int displayDateHour=0;
  int displayDateMinute=0;
  if (displayDate != null) {
    Calendar displayCal=CalendarFactoryUtil.getCalendar(user.getTimeZone());
    displayCal.setTime(displayDate);
    displayDateMonth=displayCal.get(Calendar.MONTH);
    displayDateDay=displayCal.get(Calendar.DATE);
    displayDateYear=displayCal.get(Calendar.YEAR);
    displayDateHour=displayCal.get(Calendar.HOUR);
    displayDateMinute=displayCal.get(Calendar.MINUTE);
    if (displayCal.get(Calendar.AM_PM) == Calendar.PM) {
      displayDateHour+=12;
    }
  }
  Date expirationDate=article.getExpirationDate();
  int expirationDateMonth=0;
  int expirationDateDay=0;
  int expirationDateYear=0;
  int expirationDateHour=0;
  int expirationDateMinute=0;
  boolean neverExpire=true;
  if (expirationDate != null) {
    Calendar expirationCal=CalendarFactoryUtil.getCalendar(user.getTimeZone());
    expirationCal.setTime(expirationDate);
    expirationDateMonth=expirationCal.get(Calendar.MONTH);
    expirationDateDay=expirationCal.get(Calendar.DATE);
    expirationDateYear=expirationCal.get(Calendar.YEAR);
    expirationDateHour=expirationCal.get(Calendar.HOUR);
    expirationDateMinute=expirationCal.get(Calendar.MINUTE);
    neverExpire=false;
    if (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {
      expirationDateHour+=12;
    }
  }
  Date reviewDate=article.getReviewDate();
  int reviewDateMonth=0;
  int reviewDateDay=0;
  int reviewDateYear=0;
  int reviewDateHour=0;
  int reviewDateMinute=0;
  boolean neverReview=true;
  if (reviewDate != null) {
    Calendar reviewCal=CalendarFactoryUtil.getCalendar(user.getTimeZone());
    reviewCal.setTime(reviewDate);
    reviewDateMonth=reviewCal.get(Calendar.MONTH);
    reviewDateDay=reviewCal.get(Calendar.DATE);
    reviewDateYear=reviewCal.get(Calendar.YEAR);
    reviewDateHour=reviewCal.get(Calendar.HOUR);
    reviewDateMinute=reviewCal.get(Calendar.MINUTE);
    neverReview=false;
    if (reviewCal.get(Calendar.AM_PM) == Calendar.PM) {
      reviewDateHour+=12;
    }
  }
  Map<String,String> ddmStructureKeys=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(DDMStructure.class + ".ddmStructureKey");
  String parentDDMStructureKey=MapUtil.getString(ddmStructureKeys,article.getStructureId(),article.getStructureId());
  Map<String,Long> ddmStructureIds=(Map<String,Long>)portletDataContext.getNewPrimaryKeysMap(DDMStructure.class);
  long ddmStructureId=0;
  if (article.getClassNameId() != 0) {
    ddmStructureId=ddmStructureIds.get(article.getClassPK());
  }
  Map<String,String> ddmTemplateKeys=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(DDMTemplate.class + ".ddmTemplateKey");
  String parentDDMTemplateKey=MapUtil.getString(ddmTemplateKeys,article.getTemplateId(),article.getTemplateId());
  File smallFile=null;
  try {
    Element articleElement=portletDataContext.getImportDataStagedModelElement(article);
    if (article.isSmallImage()) {
      String smallImagePath=articleElement.attributeValue("small-image-path");
      if (Validator.isNotNull(article.getSmallImageURL())) {
        String smallImageURL=ExportImportHelperUtil.replaceImportContentReferences(portletDataContext,article,article.getSmallImageURL());
        article.setSmallImageURL(smallImageURL);
      }
 else       if (Validator.isNotNull(smallImagePath)) {
        byte[] bytes=portletDataContext.getZipEntryAsByteArray(smallImagePath);
        if (bytes != null) {
          smallFile=FileUtil.createTempFile(article.getSmallImageType());
          FileUtil.write(smallFile,bytes);
        }
      }
    }
    Map<String,byte[]> images=new HashMap<String,byte[]>();
    List<Element> imagesElements=portletDataContext.getReferenceDataElements(article,Image.class);
    for (    Element imageElement : imagesElements) {
      String imagePath=imageElement.attributeValue("path");
      String fileName=imageElement.attributeValue("file-name");
      images.put(fileName,portletDataContext.getZipEntryAsByteArray(imagePath));
    }
    String articleURL=null;
    boolean addGroupPermissions=creationStrategy.addGroupPermissions(portletDataContext,article);
    boolean addGuestPermissions=creationStrategy.addGuestPermissions(portletDataContext,article);
    ServiceContext serviceContext=portletDataContext.createServiceContext(article);
    serviceContext.setAddGroupPermissions(addGroupPermissions);
    serviceContext.setAddGuestPermissions(addGuestPermissions);
    if ((article.getStatus() != WorkflowConstants.STATUS_APPROVED) && (article.getStatus() != WorkflowConstants.STATUS_SCHEDULED)) {
      serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
    }
    JournalArticle importedArticle=null;
    String articleResourceUuid=articleElement.attributeValue("article-resource-uuid");
    if (portletDataContext.isDataStrategyMirror()) {
      serviceContext.setUuid(article.getUuid());
      serviceContext.setAttribute("articleResourceUuid",articleResourceUuid);
      serviceContext.setAttribute("urlTitle",article.getUrlTitle());
      boolean preloaded=GetterUtil.getBoolean(articleElement.attributeValue("preloaded"));
      JournalArticle existingArticle=fetchExistingArticle(article.getUuid(),articleResourceUuid,portletDataContext.getScopeGroupId(),articleId,newArticleId,article.getVersion(),preloaded);
      if (existingArticle == null) {
        importedArticle=JournalArticleLocalServiceUtil.addArticle(userId,portletDataContext.getScopeGroupId(),folderId,article.getClassNameId(),ddmStructureId,articleId,autoArticleId,article.getVersion(),article.getTitleMap(),article.getDescriptionMap(),article.getContent(),article.getType(),parentDDMStructureKey,parentDDMTemplateKey,article.getLayoutUuid(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,article.isIndexable(),article.isSmallImage(),article.getSmallImageURL(),smallFile,images,articleURL,serviceContext);
      }
 else {
        importedArticle=JournalArticleLocalServiceUtil.updateArticle(userId,existingArticle.getGroupId(),folderId,existingArticle.getArticleId(),article.getVersion(),article.getTitleMap(),article.getDescriptionMap(),article.getContent(),article.getType(),parentDDMStructureKey,parentDDMTemplateKey,article.getLayoutUuid(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,article.isIndexable(),article.isSmallImage(),article.getSmallImageURL(),smallFile,images,articleURL,serviceContext);
      }
    }
 else {
      importedArticle=JournalArticleLocalServiceUtil.addArticle(userId,portletDataContext.getScopeGroupId(),folderId,article.getClassNameId(),ddmStructureId,articleId,autoArticleId,article.getVersion(),article.getTitleMap(),article.getDescriptionMap(),article.getContent(),article.getType(),parentDDMStructureKey,parentDDMTemplateKey,article.getLayoutUuid(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,article.isIndexable(),article.isSmallImage(),article.getSmallImageURL(),smallFile,images,articleURL,serviceContext);
    }
    portletDataContext.importClassedModel(article,importedArticle);
    if (Validator.isNull(newArticleId)) {
      articleIds.put(article.getArticleId(),importedArticle.getArticleId());
    }
  }
  finally {
    if (smallFile != null) {
      smallFile.delete();
    }
  }
}
