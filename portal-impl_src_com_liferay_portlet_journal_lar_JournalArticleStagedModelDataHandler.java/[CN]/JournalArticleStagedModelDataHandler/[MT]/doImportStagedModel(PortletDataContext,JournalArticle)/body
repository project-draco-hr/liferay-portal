{
  prepareLanguagesForImport(article);
  long userId=portletDataContext.getUserId(article.getUserUuid());
  JournalCreationStrategy creationStrategy=JournalCreationStrategyFactory.getInstance();
  long authorId=creationStrategy.getAuthorUserId(portletDataContext,article);
  if (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {
    userId=authorId;
  }
  User user=UserLocalServiceUtil.getUser(userId);
  Map<Long,Long> folderIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(JournalFolder.class);
  if (article.getFolderId() != JournalFolderConstants.DEFAULT_PARENT_FOLDER_ID) {
    String folderPath=ExportImportPathUtil.getModelPath(portletDataContext,JournalFolder.class.getName(),article.getFolderId());
    JournalFolder folder=(JournalFolder)portletDataContext.getZipEntryAsObject(folderPath);
    StagedModelDataHandlerUtil.importStagedModel(portletDataContext,folder);
  }
  long folderId=MapUtil.getLong(folderIds,article.getFolderId(),article.getFolderId());
  String articleId=article.getArticleId();
  boolean autoArticleId=false;
  if (Validator.isNumber(articleId) || (JournalArticleLocalServiceUtil.fetchArticle(portletDataContext.getScopeGroupId(),articleId,JournalArticleConstants.VERSION_DEFAULT) != null)) {
    autoArticleId=true;
  }
  Map<String,String> articleIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalArticle.class + ".articleId");
  String newArticleId=articleIds.get(articleId);
  if (Validator.isNotNull(newArticleId)) {
    articleId=newArticleId;
    autoArticleId=false;
  }
  String content=article.getContent();
  Element articleElement=portletDataContext.getImportDataStagedModelElement(article);
  content=ExportImportHelperUtil.replaceImportContentReferences(portletDataContext,articleElement,content,true);
  article.setContent(content);
  String newContent=creationStrategy.getTransformedContent(portletDataContext,article);
  if (newContent != JournalCreationStrategy.ARTICLE_CONTENT_UNCHANGED) {
    article.setContent(newContent);
  }
  Date displayDate=article.getDisplayDate();
  int displayDateMonth=0;
  int displayDateDay=0;
  int displayDateYear=0;
  int displayDateHour=0;
  int displayDateMinute=0;
  if (displayDate != null) {
    Calendar displayCal=CalendarFactoryUtil.getCalendar(user.getTimeZone());
    displayCal.setTime(displayDate);
    displayDateMonth=displayCal.get(Calendar.MONTH);
    displayDateDay=displayCal.get(Calendar.DATE);
    displayDateYear=displayCal.get(Calendar.YEAR);
    displayDateHour=displayCal.get(Calendar.HOUR);
    displayDateMinute=displayCal.get(Calendar.MINUTE);
    if (displayCal.get(Calendar.AM_PM) == Calendar.PM) {
      displayDateHour+=12;
    }
  }
  Date expirationDate=article.getExpirationDate();
  int expirationDateMonth=0;
  int expirationDateDay=0;
  int expirationDateYear=0;
  int expirationDateHour=0;
  int expirationDateMinute=0;
  boolean neverExpire=true;
  if (expirationDate != null) {
    Calendar expirationCal=CalendarFactoryUtil.getCalendar(user.getTimeZone());
    expirationCal.setTime(expirationDate);
    expirationDateMonth=expirationCal.get(Calendar.MONTH);
    expirationDateDay=expirationCal.get(Calendar.DATE);
    expirationDateYear=expirationCal.get(Calendar.YEAR);
    expirationDateHour=expirationCal.get(Calendar.HOUR);
    expirationDateMinute=expirationCal.get(Calendar.MINUTE);
    neverExpire=false;
    if (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {
      expirationDateHour+=12;
    }
  }
  Date reviewDate=article.getReviewDate();
  int reviewDateMonth=0;
  int reviewDateDay=0;
  int reviewDateYear=0;
  int reviewDateHour=0;
  int reviewDateMinute=0;
  boolean neverReview=true;
  if (reviewDate != null) {
    Calendar reviewCal=CalendarFactoryUtil.getCalendar(user.getTimeZone());
    reviewCal.setTime(reviewDate);
    reviewDateMonth=reviewCal.get(Calendar.MONTH);
    reviewDateDay=reviewCal.get(Calendar.DATE);
    reviewDateYear=reviewCal.get(Calendar.YEAR);
    reviewDateHour=reviewCal.get(Calendar.HOUR);
    reviewDateMinute=reviewCal.get(Calendar.MINUTE);
    neverReview=false;
    if (reviewCal.get(Calendar.AM_PM) == Calendar.PM) {
      reviewDateHour+=12;
    }
  }
  String parentDDMStructureKey=StringPool.BLANK;
  long ddmStructureId=0;
  List<Element> structureElements=portletDataContext.getReferenceDataElements(article,DDMStructure.class);
  if (!structureElements.isEmpty()) {
    Element structureElement=structureElements.get(0);
    String structurePath=structureElement.attributeValue("path");
    DDMStructure ddmStructure=(DDMStructure)portletDataContext.getZipEntryAsObject(structurePath);
    DDMStructure existingDDMStructure=DDMStructureLocalServiceUtil.fetchDDMStructureByUuidAndGroupId(ddmStructure.getUuid(),portletDataContext.getScopeGroupId());
    if (existingDDMStructure == null) {
      existingDDMStructure=DDMStructureLocalServiceUtil.fetchDDMStructureByUuidAndGroupId(ddmStructure.getUuid(),portletDataContext.getCompanyGroupId());
    }
    if (existingDDMStructure == null) {
      StagedModelDataHandlerUtil.importStagedModel(portletDataContext,ddmStructure);
      Map<Long,Long> ddmStructureIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DDMStructure.class);
      ddmStructureId=MapUtil.getLong(ddmStructureIds,ddmStructure.getStructureId(),ddmStructure.getStructureId());
      existingDDMStructure=DDMStructureLocalServiceUtil.getDDMStructure(ddmStructureId);
    }
    if (existingDDMStructure == null) {
      if (_log.isWarnEnabled()) {
        StringBundler sb=new StringBundler();
        sb.append("Structure ");
        sb.append(article.getStructureId());
        sb.append(" is missing for article ");
        sb.append(article.getArticleId());
        sb.append(", skipping this article.");
        _log.warn(sb.toString());
      }
      return;
    }
    parentDDMStructureKey=existingDDMStructure.getStructureKey();
  }
  String parentDDMTemplateKey=StringPool.BLANK;
  List<Element> ddmTemplateElements=portletDataContext.getReferenceDataElements(article,DDMTemplate.class);
  if (!ddmTemplateElements.isEmpty()) {
    Element templateElement=ddmTemplateElements.get(0);
    String ddmTemplatePath=templateElement.attributeValue("path");
    DDMTemplate ddmTemplate=(DDMTemplate)portletDataContext.getZipEntryAsObject(ddmTemplatePath);
    DDMTemplate existingDDMTemplate=DDMTemplateLocalServiceUtil.fetchDDMTemplateByUuidAndGroupId(ddmTemplate.getUuid(),portletDataContext.getScopeGroupId());
    if (existingDDMTemplate == null) {
      existingDDMTemplate=DDMTemplateLocalServiceUtil.fetchDDMTemplateByUuidAndGroupId(ddmTemplate.getUuid(),portletDataContext.getCompanyGroupId());
    }
    if (existingDDMTemplate == null) {
      StagedModelDataHandlerUtil.importStagedModel(portletDataContext,ddmTemplate);
      Map<Long,Long> ddmTemplateIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DDMTemplate.class);
      long ddmTemplateId=MapUtil.getLong(ddmTemplateIds,ddmTemplate.getTemplateId(),ddmTemplate.getTemplateId());
      existingDDMTemplate=DDMTemplateLocalServiceUtil.getDDMTemplate(ddmTemplateId);
    }
    if (existingDDMTemplate == null) {
      if (_log.isWarnEnabled()) {
        StringBundler sb=new StringBundler();
        sb.append("Template ");
        sb.append(article.getTemplateId());
        sb.append(" is missing for article ");
        sb.append(article.getArticleId());
        sb.append(", skipping this article.");
        _log.warn(sb.toString());
      }
      return;
    }
    parentDDMTemplateKey=existingDDMTemplate.getTemplateKey();
  }
  File smallFile=null;
  if (article.isSmallImage()) {
    String smallImagePath=articleElement.attributeValue("small-image-path");
    if (Validator.isNotNull(article.getSmallImageURL())) {
      String smallImageURL=ExportImportHelperUtil.replaceImportContentReferences(portletDataContext,articleElement,article.getSmallImageURL(),true);
      article.setSmallImageURL(smallImageURL);
    }
 else     if (Validator.isNotNull(smallImagePath)) {
      byte[] bytes=portletDataContext.getZipEntryAsByteArray(smallImagePath);
      if (bytes != null) {
        smallFile=FileUtil.createTempFile(article.getSmallImageType());
        FileUtil.write(smallFile,bytes);
      }
    }
  }
  Map<String,byte[]> images=new HashMap<String,byte[]>();
  List<Element> imagesElements=portletDataContext.getReferenceDataElements(article,Image.class);
  for (  Element imageElement : imagesElements) {
    String imagePath=imageElement.attributeValue("path");
    String fileName=imageElement.attributeValue("file-name");
    images.put(fileName,portletDataContext.getZipEntryAsByteArray(imagePath));
  }
  String articleURL=null;
  boolean addGroupPermissions=creationStrategy.addGroupPermissions(portletDataContext,article);
  boolean addGuestPermissions=creationStrategy.addGuestPermissions(portletDataContext,article);
  ServiceContext serviceContext=portletDataContext.createServiceContext(article,JournalPortletDataHandler.NAMESPACE);
  serviceContext.setAddGroupPermissions(addGroupPermissions);
  serviceContext.setAddGuestPermissions(addGuestPermissions);
  if (article.getStatus() != WorkflowConstants.STATUS_APPROVED) {
    serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
  }
  JournalArticle importedArticle=null;
  String articleResourceUuid=articleElement.attributeValue("article-resource-uuid");
  if (portletDataContext.isDataStrategyMirror()) {
    JournalArticleResource articleResource=JournalArticleResourceLocalServiceUtil.fetchJournalArticleResourceByUuidAndGroupId(articleResourceUuid,portletDataContext.getScopeGroupId());
    if (articleResource == null) {
      articleResource=JournalArticleResourceLocalServiceUtil.fetchJournalArticleResourceByUuidAndGroupId(articleResourceUuid,portletDataContext.getCompanyGroupId());
    }
    serviceContext.setUuid(articleResourceUuid);
    serviceContext.setAttribute("urlTitle",article.getUrlTitle());
    JournalArticle existingArticle=null;
    if (articleResource != null) {
      try {
        existingArticle=JournalArticleLocalServiceUtil.getLatestArticle(articleResource.getResourcePrimKey(),WorkflowConstants.STATUS_ANY,false);
      }
 catch (      NoSuchArticleException nsae) {
      }
    }
    if (existingArticle == null) {
      existingArticle=JournalArticleLocalServiceUtil.fetchArticle(portletDataContext.getScopeGroupId(),newArticleId,article.getVersion());
    }
    if (existingArticle == null) {
      importedArticle=JournalArticleLocalServiceUtil.addArticle(userId,portletDataContext.getScopeGroupId(),folderId,article.getClassNameId(),ddmStructureId,articleId,autoArticleId,article.getVersion(),article.getTitleMap(),article.getDescriptionMap(),article.getContent(),article.getType(),parentDDMStructureKey,parentDDMTemplateKey,article.getLayoutUuid(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,article.isIndexable(),article.isSmallImage(),article.getSmallImageURL(),smallFile,images,articleURL,serviceContext);
    }
 else {
      if (portletDataContext.isCompanyStagedGroupedModel(existingArticle)) {
        return;
      }
      importedArticle=JournalArticleLocalServiceUtil.updateArticle(userId,existingArticle.getGroupId(),folderId,existingArticle.getArticleId(),article.getVersion(),article.getTitleMap(),article.getDescriptionMap(),article.getContent(),article.getType(),parentDDMStructureKey,parentDDMTemplateKey,article.getLayoutUuid(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,article.isIndexable(),article.isSmallImage(),article.getSmallImageURL(),smallFile,images,articleURL,serviceContext);
    }
  }
 else {
    importedArticle=JournalArticleLocalServiceUtil.addArticle(userId,portletDataContext.getScopeGroupId(),folderId,article.getClassNameId(),ddmStructureId,articleId,autoArticleId,article.getVersion(),article.getTitleMap(),article.getDescriptionMap(),article.getContent(),article.getType(),parentDDMStructureKey,parentDDMTemplateKey,article.getLayoutUuid(),displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,article.isIndexable(),article.isSmallImage(),article.getSmallImageURL(),smallFile,images,articleURL,serviceContext);
  }
  if (smallFile != null) {
    smallFile.delete();
  }
  portletDataContext.importClassedModel(article,importedArticle,JournalPortletDataHandler.NAMESPACE);
  if (Validator.isNull(newArticleId)) {
    articleIds.put(article.getArticleId(),importedArticle.getArticleId());
  }
}
