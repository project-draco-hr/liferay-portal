{
  importMissingGroupReference(portletDataContext,referenceElement);
  String articleResourceUuid=referenceElement.attributeValue("article-resource-uuid");
  Map<Long,Long> groupIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(Group.class);
  long liveGroupId=GetterUtil.getLong(referenceElement.attributeValue("live-group-id"));
  liveGroupId=MapUtil.getLong(groupIds,liveGroupId,liveGroupId);
  String articleArticleId=referenceElement.attributeValue("article-id");
  boolean preloaded=GetterUtil.getBoolean(referenceElement.attributeValue("preloaded"));
  JournalArticle existingArticle=null;
  try {
    existingArticle=fetchExistingArticle(articleResourceUuid,liveGroupId,articleArticleId,null,0.0,preloaded);
  }
 catch (  SystemException se) {
    throw new PortletDataException(se);
  }
  Map<String,String> articleArticleIds=(Map<String,String>)portletDataContext.getNewPrimaryKeysMap(JournalArticle.class + ".articleId");
  articleArticleIds.put(articleArticleId,existingArticle.getArticleId());
  Map<Long,Long> articleIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(JournalArticle.class);
  long articleId=GetterUtil.getLong(referenceElement.attributeValue("class-pk"));
  articleIds.put(articleId,existingArticle.getId());
}
