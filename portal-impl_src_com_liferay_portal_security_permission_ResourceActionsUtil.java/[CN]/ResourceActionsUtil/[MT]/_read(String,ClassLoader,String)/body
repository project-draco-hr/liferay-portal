{
  String xml=null;
  try {
    xml=StringUtil.read(classLoader,source);
  }
 catch (  Exception e) {
    _log.warn("Cannot load " + source);
  }
  if (xml == null) {
    return;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Loading " + source);
  }
  SAXReader reader=new SAXReader();
  Document doc=reader.read(new StringReader(xml));
  Element root=doc.getRootElement();
  Iterator itr1=root.elements("resource").iterator();
  while (itr1.hasNext()) {
    Element resource=(Element)itr1.next();
    String file=resource.attributeValue("file");
    _read(servletContextName,classLoader,file);
  }
  itr1=root.elements("portlet-resource").iterator();
  while (itr1.hasNext()) {
    Element resource=(Element)itr1.next();
    String name=resource.elementText("portlet-name");
    if (servletContextName != null) {
      name=name + PortletImpl.WAR_SEPARATOR + servletContextName;
    }
    name=PortalUtil.getJsSafePortletId(name);
    List actions=_getActions(_portletResourceActions,name);
    Element supports=resource.element("supports");
    Iterator itr2=supports.elements("action-key").iterator();
    while (itr2.hasNext()) {
      Element actionKey=(Element)itr2.next();
      String actionKeyText=actionKey.getText();
      if (Validator.isNotNull(actionKeyText)) {
        actions.add(actionKeyText);
      }
    }
    if (!name.equals(PortletKeys.PORTAL)) {
      _checkPortletActions(actions);
    }
    List layoutManagerDefaultActions=_getActions(_portletResourceLayoutManagerDefaultActions,name);
    Element layoutManagerDefaults=resource.element("layout-manager-defaults");
    if (layoutManagerDefaults != null && layoutManagerDefaults.elements("action-key").size() > 0) {
      itr2=layoutManagerDefaults.elements("action-key").iterator();
      while (itr2.hasNext()) {
        Element actionKey=(Element)itr2.next();
        String actionKeyText=actionKey.getText();
        if (Validator.isNotNull(actionKeyText)) {
          layoutManagerDefaultActions.add(actionKeyText);
        }
      }
    }
 else {
      itr2=actions.iterator();
      while (itr2.hasNext()) {
        String actionKeyText=(String)itr2.next();
        if (Validator.isNotNull(actionKeyText)) {
          layoutManagerDefaultActions.add(actionKeyText);
        }
      }
    }
    List communityDefaultActions=_getActions(_portletResourceCommunityDefaultActions,name);
    Element communityDefaults=resource.element("community-defaults");
    itr2=communityDefaults.elements("action-key").iterator();
    while (itr2.hasNext()) {
      Element actionKey=(Element)itr2.next();
      String actionKeyText=actionKey.getText();
      if (Validator.isNotNull(actionKeyText)) {
        communityDefaultActions.add(actionKeyText);
      }
    }
    List guestDefaultActions=_getActions(_portletResourceGuestDefaultActions,name);
    Element guestDefaults=resource.element("guest-defaults");
    itr2=guestDefaults.elements("action-key").iterator();
    while (itr2.hasNext()) {
      Element actionKey=(Element)itr2.next();
      String actionKeyText=actionKey.getText();
      if (Validator.isNotNull(actionKeyText)) {
        guestDefaultActions.add(actionKeyText);
      }
    }
    List guestUnsupportedActions=_getActions(_portletResourceGuestUnsupportedActions,name);
    Element guestUnsupported=resource.element("guest-unsupported");
    itr2=guestUnsupported.elements("action-key").iterator();
    while (itr2.hasNext()) {
      Element actionKey=(Element)itr2.next();
      String actionKeyText=actionKey.getText();
      if (Validator.isNotNull(actionKeyText)) {
        guestUnsupportedActions.add(actionKeyText);
      }
    }
    _checkGuestUnsupportedActions(guestUnsupportedActions,guestDefaultActions);
  }
  itr1=root.elements("model-resource").iterator();
  while (itr1.hasNext()) {
    Element resource=(Element)itr1.next();
    String name=resource.elementText("model-name");
    Element portletRef=resource.element("portlet-ref");
    Iterator itr2=portletRef.elements("portlet-name").iterator();
    while (itr2.hasNext()) {
      Element portletName=(Element)itr2.next();
      String portletNameString=portletName.getText();
      if (servletContextName != null) {
        portletNameString=portletNameString + PortletImpl.WAR_SEPARATOR + servletContextName;
      }
      portletNameString=PortalUtil.getJsSafePortletId(portletNameString);
      Set modelResources=(Set)_portletModelResources.get(portletNameString);
      if (modelResources == null) {
        modelResources=new HashSet();
        _portletModelResources.put(portletNameString,modelResources);
      }
      modelResources.add(name);
      Set portletResources=(Set)_modelPortletResources.get(name);
      if (portletResources == null) {
        portletResources=new HashSet();
        _modelPortletResources.put(name,portletResources);
      }
      portletResources.add(portletNameString);
    }
    List actions=_getActions(_modelResourceActions,name);
    Element supports=resource.element("supports");
    itr2=supports.elements("action-key").iterator();
    while (itr2.hasNext()) {
      Element actionKey=(Element)itr2.next();
      String actionKeyText=actionKey.getText();
      if (Validator.isNotNull(actionKeyText)) {
        actions.add(actionKeyText);
      }
    }
    List communityDefaultActions=_getActions(_modelResourceCommunityDefaultActions,name);
    Element communityDefaults=resource.element("community-defaults");
    itr2=communityDefaults.elements("action-key").iterator();
    while (itr2.hasNext()) {
      Element actionKey=(Element)itr2.next();
      String actionKeyText=actionKey.getText();
      if (Validator.isNotNull(actionKeyText)) {
        communityDefaultActions.add(actionKeyText);
      }
    }
    List guestDefaultActions=_getActions(_modelResourceGuestDefaultActions,name);
    Element guestDefaults=resource.element("guest-defaults");
    itr2=guestDefaults.elements("action-key").iterator();
    while (itr2.hasNext()) {
      Element actionKey=(Element)itr2.next();
      String actionKeyText=actionKey.getText();
      if (Validator.isNotNull(actionKeyText)) {
        guestDefaultActions.add(actionKeyText);
      }
    }
    List guestUnsupportedActions=_getActions(_modelResourceGuestUnsupportedActions,name);
    Element guestUnsupported=resource.element("guest-unsupported");
    itr2=guestUnsupported.elements("action-key").iterator();
    while (itr2.hasNext()) {
      Element actionKey=(Element)itr2.next();
      String actionKeyText=actionKey.getText();
      if (Validator.isNotNull(actionKeyText)) {
        guestUnsupportedActions.add(actionKeyText);
      }
    }
    _checkGuestUnsupportedActions(guestUnsupportedActions,guestDefaultActions);
  }
}
