{
  content=StringUtil.replace(content," >\n",">\n");
  content=sortLiferayVariables(content);
  Matcher matcher=_singleParameterTagPattern.matcher(content);
  while (matcher.find()) {
    String match=matcher.group();
    String replacement=match;
    String group1=matcher.group(1);
    String group2=matcher.group(2);
    if (group2 != null) {
      replacement=StringUtil.replaceFirst(replacement,group1 + StringPool.SPACE,group1);
    }
    String group3=matcher.group(3);
    if (group3.startsWith(StringPool.SPACE)) {
      replacement=StringUtil.replaceLast(replacement,group3,group3.substring(1));
    }
    content=StringUtil.replace(content,match,replacement);
  }
  matcher=_multiParameterTagPattern.matcher(content);
  while (matcher.find()) {
    String match=matcher.group();
    if (match.contains("><")) {
      continue;
    }
    String strippedMatch=stripQuotes(match,CharPool.QUOTE);
    if (StringUtil.count(strippedMatch,StringPool.EQUAL) <= 1) {
      continue;
    }
    String replacement=match;
    String tabs=matcher.group(1);
    int x=-1;
    while (true) {
      x=replacement.indexOf(StringPool.EQUAL,x + tabs.length() + 2);
      if (x == -1) {
        break;
      }
      if (ToolsUtil.isInsideQuotes(replacement,x)) {
        continue;
      }
      int y=replacement.lastIndexOf(StringPool.SPACE,x);
      if (y == -1) {
        break;
      }
      replacement=replacement.substring(0,y) + StringPool.NEW_LINE + tabs+ StringPool.TAB+ replacement.substring(y + 1);
    }
    if (!match.equals(replacement)) {
      replacement=StringUtil.replaceLast(replacement,"/>",StringPool.NEW_LINE + tabs + "/>");
      content=StringUtil.replace(content,match,replacement);
    }
  }
  return formatFTL(fileName,content);
}
