{
  subscription=toUnwrappedModel(subscription);
  boolean isNew=subscription.isNew();
  SubscriptionModelImpl subscriptionModelImpl=(SubscriptionModelImpl)subscription;
  Session session=null;
  try {
    session=openSession();
    if (subscription.isNew()) {
      session.save(subscription);
      subscription.setNew(false);
    }
 else {
      session.merge(subscription);
    }
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
  FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
  if (isNew || !SubscriptionModelImpl.COLUMN_BITMASK_ENABLED) {
    FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
  }
 else {
    if ((subscriptionModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_USERID.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{Long.valueOf(subscriptionModelImpl.getOriginalUserId())};
      FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_USERID,args);
      FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_USERID,args);
      args=new Object[]{Long.valueOf(subscriptionModelImpl.getUserId())};
      FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_USERID,args);
      FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_USERID,args);
    }
    if ((subscriptionModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_U_C.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{Long.valueOf(subscriptionModelImpl.getOriginalUserId()),Long.valueOf(subscriptionModelImpl.getOriginalClassNameId())};
      FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_U_C,args);
      FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_U_C,args);
      args=new Object[]{Long.valueOf(subscriptionModelImpl.getUserId()),Long.valueOf(subscriptionModelImpl.getClassNameId())};
      FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_U_C,args);
      FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_U_C,args);
    }
    if ((subscriptionModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_C_C_C.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{Long.valueOf(subscriptionModelImpl.getOriginalCompanyId()),Long.valueOf(subscriptionModelImpl.getOriginalClassNameId()),Long.valueOf(subscriptionModelImpl.getOriginalClassPK())};
      FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_C_C_C,args);
      FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_C_C_C,args);
      args=new Object[]{Long.valueOf(subscriptionModelImpl.getCompanyId()),Long.valueOf(subscriptionModelImpl.getClassNameId()),Long.valueOf(subscriptionModelImpl.getClassPK())};
      FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_C_C_C,args);
      FinderCacheUtil.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_C_C_C,args);
    }
  }
  EntityCacheUtil.putResult(SubscriptionModelImpl.ENTITY_CACHE_ENABLED,SubscriptionImpl.class,subscription.getPrimaryKey(),subscription);
  if (isNew) {
    FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_C_U_C_C,new Object[]{Long.valueOf(subscription.getCompanyId()),Long.valueOf(subscription.getUserId()),Long.valueOf(subscription.getClassNameId()),Long.valueOf(subscription.getClassPK())},subscription);
  }
 else {
    if ((subscriptionModelImpl.getColumnBitmask() & FINDER_PATH_FETCH_BY_C_U_C_C.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{Long.valueOf(subscriptionModelImpl.getOriginalCompanyId()),Long.valueOf(subscriptionModelImpl.getOriginalUserId()),Long.valueOf(subscriptionModelImpl.getOriginalClassNameId()),Long.valueOf(subscriptionModelImpl.getOriginalClassPK())};
      FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_C_U_C_C,args);
      FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_C_U_C_C,args);
      FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_C_U_C_C,new Object[]{Long.valueOf(subscription.getCompanyId()),Long.valueOf(subscription.getUserId()),Long.valueOf(subscription.getClassNameId()),Long.valueOf(subscription.getClassPK())},subscription);
    }
  }
  return subscription;
}
