{
  StringBuilder sb=new StringBuilder();
  boolean isCDATA=false;
  int lineNumber=1;
  BufferedReader bufferedReader=new BufferedReader(new StringReader(FileUtil.read(filePath)));
  String line=null;
  while ((line=bufferedReader.readLine()) != null) {
    Matcher matcher=_tagPattern.matcher(line);
    if (line.contains("<![CDATA[") || isCDATA) {
      if (line.contains("]]>")) {
        isCDATA=false;
      }
 else {
        isCDATA=true;
      }
      if (line.contains("<![CDATA[") && matcher.find()) {
        for (        String reservedTag : _reservedTags) {
          if (line.contains("<" + reservedTag)) {
            line=StringUtil.replace(line,matcher.group(),matcher.group() + " line-number=\"" + lineNumber+ "\"");
            break;
          }
        }
      }
      lineNumber++;
      sb.append(line);
      continue;
    }
 else     if (matcher.find()) {
      boolean tagFound=false;
      for (      String reservedTag : _reservedTags) {
        if (line.contains("<" + reservedTag)) {
          line=StringUtil.replace(line,matcher.group(),matcher.group() + " line-number=\"" + lineNumber+ "\"");
          tagFound=true;
          break;
        }
      }
      if (!tagFound) {
        int x=line.indexOf("<");
        int y=line.indexOf(" ",x);
        if (y == -1) {
          y=line.indexOf(">");
          if (y == -1) {
            y=line.indexOf(">");
          }
        }
        String tagName=line.substring(x + 1,y);
        throw new PoshiRunnerException("\nBUILD FAILED: Invaild \"" + tagName + "\" tag\n"+ filePath+ ":"+ lineNumber);
      }
    }
    sb.append(line);
    lineNumber++;
  }
  String content=sb.toString();
  InputStream inputStream=new ByteArrayInputStream(content.getBytes("UTF-8"));
  SAXReader saxReader=new SAXReader();
  Document document=saxReader.read(inputStream);
  Element rootElement=document.getRootElement();
  PoshiRunnerValidation.validate(rootElement,filePath);
  return rootElement;
}
