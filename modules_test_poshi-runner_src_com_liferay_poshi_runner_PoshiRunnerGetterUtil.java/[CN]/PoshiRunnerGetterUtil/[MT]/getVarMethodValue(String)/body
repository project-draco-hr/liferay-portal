{
  int x=classCommandName.indexOf("(");
  int y=classCommandName.lastIndexOf(")");
  String[] parameters=null;
  if ((x + 1) < y) {
    String parameterString=classCommandName.substring(x + 1,y);
    Matcher matcher=_parameterPattern.matcher(parameterString);
    List<String> params=new ArrayList<>();
    while (matcher.find()) {
      String parameterValue=matcher.group();
      if (parameterValue.startsWith("'") && parameterValue.endsWith("'")) {
        parameterValue=parameterValue.substring(1,parameterValue.length() - 1);
      }
 else       if (parameterValue.contains("#")) {
        parameterValue=PoshiRunnerContext.getPathLocator(parameterValue);
      }
      params.add(parameterValue);
    }
    parameters=params.toArray(new String[params.size()]);
  }
  String className=getClassNameFromClassCommandName(classCommandName);
  String commandName=getCommandNameFromClassCommandName(classCommandName);
  if (className.equals("MathUtil")) {
    Integer[] integers=new Integer[parameters.length];
    for (int i=0; i < parameters.length; i++) {
      integers[i]=Integer.parseInt(parameters[i].trim());
    }
    Method[] methods=MathUtil.class.getDeclaredMethods();
    for (    Method method : methods) {
      String methodName=method.getName();
      if (methodName.equals(commandName)) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (parameterTypes.length > 1) {
          Object returnObject=method.invoke(null,(Object[])integers);
          return returnObject.toString();
        }
 else {
          Object returnObject=method.invoke(null,new Object[]{integers});
          return returnObject.toString();
        }
      }
    }
  }
 else {
    List<Class<?>> parameterClasses=new ArrayList<>();
    if (parameters != null) {
      for (int i=0; i < parameters.length; i++) {
        parameterClasses.add(String.class);
      }
    }
    Class<?> clazz=null;
    Object object=null;
    if (className.equals("selenium")) {
      LiferaySelenium liferaySelenium=SeleniumUtil.getSelenium();
      clazz=liferaySelenium.getClass();
      object=liferaySelenium;
    }
 else {
      try {
        clazz=Class.forName("com.liferay.poshi.runner.util." + className);
      }
 catch (      Exception e) {
        throw new Exception("No such class " + className,e);
      }
    }
    Method method=clazz.getMethod(commandName,parameterClasses.toArray(new Class[parameterClasses.size()]));
    Object returnObject=method.invoke(object,(Object[])parameters);
    return returnObject.toString();
  }
  return null;
}
