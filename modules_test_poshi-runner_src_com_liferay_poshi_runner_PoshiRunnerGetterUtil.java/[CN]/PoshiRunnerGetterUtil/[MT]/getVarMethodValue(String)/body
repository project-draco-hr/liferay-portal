{
  int x=classCommandName.indexOf("(");
  int y=classCommandName.lastIndexOf(")");
  String[] parameters=null;
  if (y > (x + 1)) {
    String parameterString=classCommandName.substring(x + 1,y);
    if (parameterString.contains("#")) {
      parameters=new String[]{PoshiRunnerContext.getPathLocator(parameterString)};
    }
 else {
      parameters=parameterString.split(",");
      if (parameterString.endsWith(",")) {
        List<String> params=new ArrayList<>();
        for (        String parameter : parameters) {
          params.add(parameter);
        }
        params.add("");
        parameters=params.toArray(new String[params.size()]);
      }
    }
  }
  String className=getClassNameFromClassCommandName(classCommandName);
  String commandName=getCommandNameFromClassCommandName(classCommandName);
  if (className.equals("MathUtil")) {
    Integer[] integers=new Integer[parameters.length];
    for (int i=0; i < parameters.length; i++) {
      integers[i]=Integer.parseInt(parameters[i].trim());
    }
    Method[] methods=MathUtil.class.getDeclaredMethods();
    for (    Method method : methods) {
      String methodName=method.getName();
      try {
        if (methodName.equals(commandName)) {
          Class<?>[] parameterTypes=method.getParameterTypes();
          if (parameterTypes.length > 1) {
            Object returnObject=method.invoke(null,(Object[])integers);
            return returnObject.toString();
          }
 else {
            Object returnObject=method.invoke(null,new Object[]{integers});
            return returnObject.toString();
          }
        }
      }
 catch (      Exception e) {
        throw new PoshiRunnerException(e);
      }
    }
  }
 else {
    List<Class<?>> parameterClasses=new ArrayList<>();
    if (parameters != null) {
      for (int i=0; i < parameters.length; i++) {
        if (parameters[i].length() != 1) {
          parameters[i]=parameters[i].trim();
        }
        parameters[i]=parameters[i].replaceAll("\"","");
        parameters[i]=parameters[i].replaceAll("'","");
        parameterClasses.add(String.class);
      }
    }
    Class<?> clazz=null;
    Object object=null;
    if (className.equals("selenium")) {
      LiferaySelenium liferaySelenium=SeleniumUtil.getSelenium();
      clazz=liferaySelenium.getClass();
      object=liferaySelenium;
    }
 else {
      try {
        clazz=Class.forName("com.liferay.poshi.runner.util." + className);
      }
 catch (      Exception e) {
        throw new PoshiRunnerException("\nBUILD FAILED: No such class " + className,e);
      }
    }
    try {
      Method method=clazz.getMethod(commandName,parameterClasses.toArray(new Class[parameterClasses.size()]));
      Object returnObject=method.invoke(object,(Object[])parameters);
      return returnObject.toString();
    }
 catch (    Exception e) {
      throw new PoshiRunnerException(e);
    }
  }
  return null;
}
