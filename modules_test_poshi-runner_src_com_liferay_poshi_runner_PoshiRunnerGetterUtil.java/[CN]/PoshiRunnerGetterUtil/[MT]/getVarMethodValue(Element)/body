{
  String classCommandName=PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("method"));
  String commandName=getCommandNameFromClassCommandName(classCommandName);
  Matcher matcher=_parameterPattern.matcher(commandName);
  String[] parameters=null;
  while (matcher.find()) {
    String parameterString=matcher.group(1);
    parameterString=parameterString.replaceAll("\"","");
    parameters=parameterString.split(",");
  }
  commandName=commandName.replaceAll("(\\(.*\\))+","");
  LiferaySelenium liferaySelenium=SeleniumUtil.getSelenium();
  Class clazz=liferaySelenium.getClass();
  Object object=liferaySelenium;
  String className=getClassNameFromClassCommandName(classCommandName);
  if (!className.equals("selenium")) {
    clazz=Class.forName("com.liferay.poshi.runner.util." + className);
    object=null;
  }
  if (className.equals("MathUtil")) {
    Integer[] integer=new Integer[parameters.length];
    for (int i=0; i < parameters.length; i++) {
      integer[i]=Integer.parseInt(parameters[i].trim());
    }
    Method[] mathMethods=MathUtil.class.getDeclaredMethods();
    for (    Method mathMethod : mathMethods) {
      if (mathMethod.getName().equals(commandName)) {
        Class[] parameterTypes=mathMethod.getParameterTypes();
        Method method=MathUtil.class.getMethod(commandName,parameterTypes);
        if (parameterTypes.length > 1) {
          Object obj=method.invoke(object,integer);
          return obj.toString();
        }
 else {
          Object obj=method.invoke(object,new Object[]{integer});
          return obj.toString();
        }
      }
    }
  }
 else {
    List<Class> parameterClasses=new ArrayList<>();
    if (parameters != null) {
      for (int i=0; i < parameters.length; i++) {
        parameters[i]=parameters[i].trim();
        parameterClasses.add(String.class);
      }
    }
    Method method=clazz.getMethod(commandName,parameterClasses.toArray(new Class[parameterClasses.size()]));
    method.setAccessible(true);
    Object obj=method.invoke(object,parameters);
    return obj.toString();
  }
  return null;
}
