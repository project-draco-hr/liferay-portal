{
  String classCommandName=PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("method"));
  Matcher matcher=_parameterPattern.matcher(classCommandName);
  String[] parameters=null;
  while (matcher.find()) {
    String parameterString=matcher.group(1);
    parameterString=parameterString.replaceAll("\"","");
    parameters=parameterString.split(",");
  }
  String className=getClassNameFromClassCommandName(classCommandName);
  String commandName=getCommandNameFromClassCommandName(classCommandName);
  if (className.equals("MathUtil")) {
    Integer[] integers=new Integer[parameters.length];
    for (int i=0; i < parameters.length; i++) {
      integers[i]=Integer.parseInt(parameters[i].trim());
    }
    Method[] methods=MathUtil.class.getDeclaredMethods();
    for (    Method method : methods) {
      String methodName=method.getName();
      if (methodName.equals(commandName)) {
        Class[] parameterTypes=method.getParameterTypes();
        if (parameterTypes.length > 1) {
          Object returnObject=method.invoke(null,integers);
          return returnObject.toString();
        }
 else {
          Object returnObject=method.invoke(null,new Object[]{integers});
          return returnObject.toString();
        }
      }
    }
  }
 else {
    List<Class> parameterClasses=new ArrayList<>();
    if (parameters != null) {
      for (int i=0; i < parameters.length; i++) {
        parameters[i]=parameters[i].trim();
        parameterClasses.add(String.class);
      }
    }
    Class clazz=null;
    Object object=null;
    if (className.equals("selenium")) {
      LiferaySelenium liferaySelenium=SeleniumUtil.getSelenium();
      clazz=liferaySelenium.getClass();
      object=liferaySelenium;
    }
 else {
      clazz=Class.forName("com.liferay.poshi.runner.util." + className);
    }
    Method method=clazz.getMethod(commandName,parameterClasses.toArray(new Class[parameterClasses.size()]));
    Object returnObject=method.invoke(object,parameters);
    return returnObject.toString();
  }
  return null;
}
