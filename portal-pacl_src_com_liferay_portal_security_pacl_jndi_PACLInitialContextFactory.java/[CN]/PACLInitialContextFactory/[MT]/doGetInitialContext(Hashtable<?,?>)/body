{
  InitialContextFactory initialContextFactory=null;
  if (_initialContextFactoryBuilder != null) {
    if (_log.isDebugEnabled()) {
      _log.debug("Use " + _initialContextFactoryBuilder.getClass() + " to instantiate initial context factory");
    }
    initialContextFactory=_initialContextFactoryBuilder.createInitialContextFactory(environment);
  }
 else {
    if (environment == null) {
      environment=_environment;
    }
    String initialContextFactoryClassName=null;
    if (environment != null) {
      initialContextFactoryClassName=(String)environment.get(Context.INITIAL_CONTEXT_FACTORY);
      if (_log.isDebugEnabled()) {
        _log.debug("Environment initial context factory " + initialContextFactoryClassName);
      }
    }
    if (initialContextFactoryClassName == null) {
      initialContextFactoryClassName=System.getProperty(Context.INITIAL_CONTEXT_FACTORY);
      if (_log.isDebugEnabled()) {
        _log.debug("System initial context factory " + initialContextFactoryClassName);
      }
    }
    if (_log.isDebugEnabled()) {
      _log.debug("Instantiating " + initialContextFactoryClassName);
    }
    initialContextFactory=(InitialContextFactory)InstanceFactory.newInstance(initialContextFactoryClassName);
  }
  Context context=initialContextFactory.getInitialContext(environment);
  PACLPolicy paclPolicy=PACLUtil.getPACLPolicy();
  if (paclPolicy == null) {
    return context;
  }
  context=DoPrivilegedFactory.wrap(new SchemeAwareContextWrapper(context));
  paclPolicy=DoPrivilegedFactory.wrap(paclPolicy);
  return new PACLContext(context,paclPolicy);
}
