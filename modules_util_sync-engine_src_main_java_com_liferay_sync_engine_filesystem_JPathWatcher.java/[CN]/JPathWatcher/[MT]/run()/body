{
  while (true) {
    try {
      if (_watchService == null) {
        break;
      }
      WatchKey watchKey=null;
      try {
        watchKey=_watchService.take();
      }
 catch (      ClosedWatchServiceException cwse) {
        if (!SyncEngine.isRunning()) {
          break;
        }
        _logger.error(cwse.getMessage(),cwse);
        continue;
      }
catch (      Exception e) {
        if (_logger.isTraceEnabled()) {
          _logger.trace(e.getMessage(),e);
        }
        continue;
      }
      Path parentFilePath=_filePaths.get(watchKey);
      if (parentFilePath == null) {
        continue;
      }
      List<WatchEvent<?>> watchEvents=watchKey.pollEvents();
      for (int i=0; i < watchEvents.size(); i++) {
        WatchEvent<Path> watchEvent=(WatchEvent<Path>)watchEvents.get(i);
        PathImpl pathImpl=(PathImpl)watchEvent.context();
        if (pathImpl == null) {
          continue;
        }
        WatchEvent.Kind<?> kind=watchEvent.kind();
        Path childFilePath=parentFilePath.resolve(pathImpl.toString());
        processWatchEvent(kind.name(),childFilePath);
      }
      processFailedFilePaths();
      if (!watchKey.reset()) {
        Path filePath=_filePaths.remove(watchKey);
        if (_logger.isTraceEnabled()) {
          _logger.trace("Unregistered file path {}",filePath);
        }
        processMissingFilePath(filePath);
        if (_filePaths.isEmpty()) {
          break;
        }
      }
    }
 catch (    Exception e) {
      _logger.error(e.getMessage(),e);
    }
  }
}
