{
  FileUtil fileUtil=new FileUtil();
  fileUtil.setFile(new FileImpl(){
    @Override public File createTempFile(){
      try {
        return File.createTempFile(SPIAgentRequestTest.class.getName(),null);
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
  }
);
  MemoryPortalCacheManager<Serializable,Serializable> memoryPortalCacheManager=new MemoryPortalCacheManager<Serializable,Serializable>();
  memoryPortalCacheManager.afterPropertiesSet();
  MultiVMPoolImpl multiVMPoolImpl=new MultiVMPoolImpl();
  multiVMPoolImpl.setPortalCacheManager(memoryPortalCacheManager);
  MultiVMPoolUtil multiVMPoolUtil=new MultiVMPoolUtil();
  multiVMPoolUtil.setMultiVMPool(multiVMPoolImpl);
  PortalUtil portalUtil=new PortalUtil();
  portalUtil.setPortal(new PortalImpl());
  ThreadLocalDistributor threadLocalDistributor=new ThreadLocalDistributor();
  threadLocalDistributor.setThreadLocalSources(Arrays.asList(new KeyValuePair(SPIAgentRequestTest.class.getName(),"_threadLocal")));
  threadLocalDistributor.afterPropertiesSet();
  _mockHttpServletRequest=new MockHttpServletRequest(){
    @Override public Enumeration<String> getHeaderNames(){
      Enumeration<String> headerNameEnumeration=super.getHeaderNames();
      List<String> headerNames=ListUtil.fromEnumeration(headerNameEnumeration);
      headerNames.add(_HEADER_NAME_3);
      return Collections.enumeration(headerNames);
    }
    @Override public Map<String,String[]> getParameterMap(){
      Map<String,String[]> parameterMap=new LinkedHashMap<String,String[]>(super.getParameterMap());
      parameterMap.put(_PARAMETER_NAME_3,new String[0]);
      return parameterMap;
    }
  }
;
  _mockHttpServletRequest.addHeader(_HEADER_NAME_1,_HEADER_VALUE_1);
  _mockHttpServletRequest.addHeader(_HEADER_NAME_1,_HEADER_VALUE_2);
  _mockHttpServletRequest.addHeader(_HEADER_NAME_2,_HEADER_VALUE_3);
  _mockHttpServletRequest.addHeader(_HEADER_NAME_2,_HEADER_VALUE_4);
  _mockHttpServletRequest.addParameter(_PARAMETER_NAME_1,_PARAMETER_VALUE_1);
  _mockHttpServletRequest.addParameter(_PARAMETER_NAME_1,_PARAMETER_VALUE_2);
  _mockHttpServletRequest.addParameter(_PARAMETER_NAME_2,_PARAMETER_VALUE_3);
  _mockHttpServletRequest.addParameter(_PARAMETER_NAME_2,_PARAMETER_VALUE_4);
  _mockHttpServletRequest.setCookies(_cookie1,_cookie2);
  _mockHttpServletRequest.setServerName(_SERVER_NAME);
  _mockHttpServletRequest.setServerPort(_SERVER_PORT);
  Portlet portlet=new PortletImpl(){
    @Override public String getContextName(){
      return "SERVLET_CONTEXT_NAME";
    }
  }
;
  _mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_PORTLET,portlet);
  RequestAttributes.setRequestAttributes(_mockHttpServletRequest);
  HttpSession session=_mockHttpServletRequest.getSession();
  session.setAttribute(_SESSION_ATTRIBUTE_NAME_1,_SESSION_ATTRIBUTE_VALUE_1);
  session.setAttribute(_SESSION_ATTRIBUTE_NAME_2,_SESSION_ATTRIBUTE_VALUE_2);
  session.setAttribute(_SESSION_ATTRIBUTE_NAME_3,_SESSION_ATTRIBUTE_VALUE_3);
}
