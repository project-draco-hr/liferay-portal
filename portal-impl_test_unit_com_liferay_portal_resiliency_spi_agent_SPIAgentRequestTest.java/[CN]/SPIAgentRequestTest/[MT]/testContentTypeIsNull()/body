{
  String threadLocalValue="threadLocalValue";
  _threadLocal.set(threadLocalValue);
  SPIAgentRequest spiAgentRequest=new SPIAgentRequest(_mockHttpServletRequest);
  _threadLocal.remove();
  Map<String,Serializable> originalSessionAttributes=spiAgentRequest.getOriginalSessionAttributes();
  Assert.assertEquals(2,originalSessionAttributes.size());
  Assert.assertEquals(_sessionAttributeValue1,originalSessionAttributes.get(_sessionAttributeName1));
  Assert.assertEquals(_sessionAttributeValue2,originalSessionAttributes.get(_sessionAttributeName2));
  HttpServletRequest populatedHttpServletRequest=spiAgentRequest.populateRequest(new MockHttpServletRequest());
  Cookie[] cookies=populatedHttpServletRequest.getCookies();
  Assert.assertEquals(2,cookies.length);
  Assert.assertSame(_cookie1,cookies[0]);
  Assert.assertSame(_cookie2,cookies[1]);
  Assert.assertEquals(_headerValue1,populatedHttpServletRequest.getHeader(_headerName1));
  Assert.assertEquals(_headerValue3,populatedHttpServletRequest.getHeader(_headerName2));
  Assert.assertNull(populatedHttpServletRequest.getHeader(_headerName3));
  Assert.assertNull(populatedHttpServletRequest.getHeader(_headerName4));
  List<String> headerNames=ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames());
  Assert.assertEquals(3,headerNames.size());
  Assert.assertTrue(headerNames.contains(_headerName1.toLowerCase()));
  Assert.assertTrue(headerNames.contains(_headerName2.toLowerCase()));
  Assert.assertTrue(headerNames.contains(_headerName3.toLowerCase()));
  List<String> headers=ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_headerName1));
  Assert.assertEquals(2,headers.size());
  Assert.assertEquals(_headerValue1,headers.get(0));
  Assert.assertEquals(_headerValue2,headers.get(1));
  headers=ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_headerName2));
  Assert.assertEquals(2,headers.size());
  Assert.assertEquals(_headerValue3,headers.get(0));
  Assert.assertEquals(_headerValue4,headers.get(1));
  headers=ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_headerName3));
  Assert.assertTrue(headers.isEmpty());
  headers=ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_headerName4));
  Assert.assertTrue(headers.isEmpty());
  Map<String,String[]> parameterMap=populatedHttpServletRequest.getParameterMap();
  Assert.assertEquals(3,parameterMap.size());
  String[] parameter1=parameterMap.get(_parameterName1);
  Assert.assertEquals(2,parameter1.length);
  Assert.assertEquals(_parameterValue1,parameter1[0]);
  Assert.assertEquals(_parameterValue2,parameter1[1]);
  String[] parameter2=parameterMap.get(_parameterName2);
  Assert.assertEquals(2,parameter2.length);
  Assert.assertEquals(_parameterValue3,parameter2[0]);
  Assert.assertEquals(_parameterValue4,parameter2[1]);
  String[] parameter3=parameterMap.get(_parameterName3);
  Assert.assertEquals(0,parameter3.length);
  Assert.assertEquals(_parameterValue1,populatedHttpServletRequest.getParameter(_parameterName1));
  Assert.assertEquals(_parameterValue3,populatedHttpServletRequest.getParameter(_parameterName2));
  Assert.assertNull(populatedHttpServletRequest.getParameter(_parameterName3));
  Assert.assertNull(populatedHttpServletRequest.getParameter(_parameterName4));
  List<String> parameterNames=ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames());
  Assert.assertEquals(3,parameterNames.size());
  Assert.assertEquals(_parameterName1,parameterNames.get(0));
  Assert.assertEquals(_parameterName2,parameterNames.get(1));
  Assert.assertEquals(_parameterName3,parameterNames.get(2));
  parameter1=populatedHttpServletRequest.getParameterValues(_parameterName1);
  Assert.assertEquals(2,parameter1.length);
  Assert.assertEquals(_parameterValue1,parameter1[0]);
  Assert.assertEquals(_parameterValue2,parameter1[1]);
  parameter2=populatedHttpServletRequest.getParameterValues(_parameterName2);
  Assert.assertEquals(2,parameter2.length);
  Assert.assertEquals(_parameterValue3,parameter2[0]);
  Assert.assertEquals(_parameterValue4,parameter2[1]);
  parameter3=populatedHttpServletRequest.getParameterValues(_parameterName3);
  Assert.assertEquals(0,parameter3.length);
  Assert.assertEquals(_serverName,populatedHttpServletRequest.getServerName());
  Assert.assertEquals(_serverPort,populatedHttpServletRequest.getServerPort());
  Assert.assertEquals(threadLocalValue,_threadLocal.get());
  MockHttpSession mockHttpSession=new MockHttpSession();
  spiAgentRequest.populateSessionAttributes(mockHttpSession);
  List<String> attributeNames=ListUtil.fromEnumeration(mockHttpSession.getAttributeNames());
  Assert.assertEquals(2,attributeNames.size());
  Assert.assertTrue(attributeNames.contains(_sessionAttributeName1));
  Assert.assertTrue(attributeNames.contains(_sessionAttributeName2));
  Assert.assertEquals(_sessionAttributeValue1,mockHttpSession.getAttribute(_sessionAttributeName1));
  Assert.assertEquals(_sessionAttributeValue2,mockHttpSession.getAttribute(_sessionAttributeName2));
  StringBundler sb=new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4);
  sb.append("{cookies=[");
  for (  Cookie cookie : cookies) {
    sb.append(CookieUtil.toString(cookie));
    sb.append(", ");
  }
  sb.setIndex(sb.index() - 1);
  sb.append("], distributedRequestAttributes=");
  sb.append(spiAgentRequest.distributedRequestAttributes);
  sb.append(", _headerMap=");
  sb.append(spiAgentRequest.headerMap);
  sb.append(", _multipartParameterMap=null");
  sb.append(", originalSessionAttributes=");
  sb.append(spiAgentRequest.getOriginalSessionAttributes());
  sb.append(", parameterMap={");
  for (  Map.Entry<String,String[]> entry : parameterMap.entrySet()) {
    sb.append(entry.getKey());
    sb.append("=");
    sb.append(Arrays.toString(entry.getValue()));
    sb.append(", ");
  }
  sb.setIndex(sb.index() - 1);
  sb.append("}, _regularParameterMap=null");
  sb.append(", _serverName=");
  sb.append(_serverName);
  sb.append(", _serverPort=");
  sb.append(_serverPort);
  sb.append("}");
  Assert.assertEquals(sb.toString(),spiAgentRequest.toString());
  _mockHttpServletRequest.setCookies(null);
  spiAgentRequest=new SPIAgentRequest(_mockHttpServletRequest);
  sb=new StringBundler(13 + parameterMap.size() * 4);
  sb.append("{cookies=[], distributedRequestAttributes=");
  sb.append(spiAgentRequest.distributedRequestAttributes);
  sb.append(", _headerMap=");
  sb.append(spiAgentRequest.headerMap);
  sb.append(", _multipartParameterMap=null");
  sb.append(", originalSessionAttributes=");
  sb.append(spiAgentRequest.getOriginalSessionAttributes());
  sb.append(", parameterMap={");
  for (  Map.Entry<String,String[]> entry : parameterMap.entrySet()) {
    sb.append(entry.getKey());
    sb.append("=");
    sb.append(Arrays.toString(entry.getValue()));
    sb.append(", ");
  }
  sb.setIndex(sb.index() - 1);
  sb.append("}, _regularParameterMap=null");
  sb.append(", _serverName=");
  sb.append(_serverName);
  sb.append(", _serverPort=");
  sb.append(_serverPort);
  sb.append("}");
  Assert.assertEquals(sb.toString(),spiAgentRequest.toString());
}
