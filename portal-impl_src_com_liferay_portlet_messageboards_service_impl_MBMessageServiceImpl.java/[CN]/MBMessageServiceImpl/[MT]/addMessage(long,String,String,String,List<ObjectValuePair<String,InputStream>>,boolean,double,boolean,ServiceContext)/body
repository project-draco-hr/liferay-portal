{
  MBMessage parentMessage=mbMessagePersistence.findByPrimaryKey(parentMessageId);
  checkReplyToPermission(parentMessage.getGroupId(),parentMessage.getCategoryId(),parentMessageId);
  boolean preview=ParamUtil.getBoolean(serviceContext,"preview");
  int workFlowAction=serviceContext.getWorkflowAction();
  if ((workFlowAction == WorkflowConstants.STATUS_DRAFT) && !preview && !serviceContext.isSignedIn()) {
    MBMessagePermission.check(getPermissionChecker(),parentMessageId,ActionKeys.UPDATE);
  }
  if (LockHelperUtil.isLocked(MBThread.class.getName(),parentMessage.getThreadId())) {
    throw new LockedThreadException();
  }
  if (!MBCategoryPermission.contains(getPermissionChecker(),parentMessage.getGroupId(),parentMessage.getCategoryId(),ActionKeys.ADD_FILE)) {
    inputStreamOVPs=Collections.emptyList();
  }
  if (!MBCategoryPermission.contains(getPermissionChecker(),parentMessage.getGroupId(),parentMessage.getCategoryId(),ActionKeys.UPDATE_THREAD_PRIORITY)) {
    priority=MBThreadConstants.PRIORITY_NOT_GIVEN;
  }
  return mbMessageLocalService.addMessage(getGuestOrUserId(),null,parentMessage.getGroupId(),parentMessage.getCategoryId(),parentMessage.getThreadId(),parentMessageId,subject,body,format,inputStreamOVPs,anonymous,priority,allowPingbacks,serviceContext);
}
