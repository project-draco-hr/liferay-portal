{
  MBMessage message=mbMessagePersistence.findByPrimaryKey(messageId);
  boolean preview=ParamUtil.getBoolean(serviceContext,"preview");
  if (preview && MBMessagePermission.contains(getPermissionChecker(),message,ActionKeys.UPDATE)) {
    checkReplyToPermission(message.getGroupId(),message.getCategoryId(),message.getParentMessageId());
  }
 else {
    MBMessagePermission.check(getPermissionChecker(),messageId,ActionKeys.UPDATE);
  }
  if (LockManagerUtil.isLocked(MBThread.class.getName(),message.getThreadId())) {
    StringBundler sb=new StringBundler(5);
    sb.append("Thread is locked for class name ");
    sb.append(MBThread.class.getName());
    sb.append(" and class PK ");
    sb.append(message.getThreadId());
    throw new LockedThreadException(sb.toString());
  }
  if (!MBCategoryPermission.contains(getPermissionChecker(),message.getGroupId(),message.getCategoryId(),ActionKeys.ADD_FILE)) {
    inputStreamOVPs=Collections.emptyList();
  }
  if (!MBCategoryPermission.contains(getPermissionChecker(),message.getGroupId(),message.getCategoryId(),ActionKeys.UPDATE_THREAD_PRIORITY)) {
    MBThread thread=mbThreadLocalService.getThread(message.getThreadId());
    priority=thread.getPriority();
  }
  return mbMessageLocalService.updateMessage(getGuestOrUserId(),messageId,subject,body,inputStreamOVPs,existingFiles,priority,allowPingbacks,serviceContext);
}
