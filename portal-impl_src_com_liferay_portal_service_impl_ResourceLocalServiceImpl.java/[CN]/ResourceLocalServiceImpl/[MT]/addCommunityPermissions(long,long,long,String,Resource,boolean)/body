{
  StopWatch stopWatch=null;
  if (_log.isDebugEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  Group group=groupPersistence.findByPrimaryKey(groupId);
  long resourceId=resource.getResourceId();
  String primKey=resource.getPrimKey();
  logAddCommunityPermissions(groupId,name,resourceId,stopWatch,1);
  List<String> actions=null;
  if (portletActions) {
    actions=ResourceActionsUtil.getPortletResourceCommunityDefaultActions(name);
  }
 else {
    actions=ResourceActionsUtil.getModelResourceCommunityDefaultActions(name);
  }
  logAddCommunityPermissions(groupId,name,resourceId,stopWatch,2);
  String[] actionIds=actions.toArray(new String[actions.size()]);
  List<Permission> communityPermissionsList=permissionLocalService.getPermissions(group.getCompanyId(),actionIds,resourceId);
  logAddCommunityPermissions(groupId,name,resourceId,stopWatch,3);
  PermissionsListFilter permissionsListFilter=PermissionsListFilterFactory.getInstance();
  communityPermissionsList=permissionsListFilter.filterCommunityPermissions(companyId,groupId,userId,name,primKey,portletActions,communityPermissionsList);
  logAddCommunityPermissions(groupId,name,resourceId,stopWatch,4);
  if (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM == 5) {
    Role role=null;
    if (group.isLayout()) {
      Layout layout=layoutLocalService.getLayout(group.getClassPK());
      group=layout.getGroup();
    }
    if (group.isCommunity()) {
      role=RoleLocalServiceUtil.getRole(companyId,RoleNames.COMMUNITY_MEMBER);
    }
 else     if (group.isOrganization()) {
      role=RoleLocalServiceUtil.getRole(companyId,RoleNames.ORGANIZATION_MEMBER);
    }
 else     if (group.isUser() || group.isUserGroup()) {
      role=RoleLocalServiceUtil.getRole(companyId,RoleNames.POWER_USER);
    }
    rolePersistence.addPermissions(role.getRoleId(),communityPermissionsList);
  }
 else {
    groupPersistence.addPermissions(groupId,communityPermissionsList);
  }
  logAddCommunityPermissions(groupId,name,resourceId,stopWatch,5);
}
