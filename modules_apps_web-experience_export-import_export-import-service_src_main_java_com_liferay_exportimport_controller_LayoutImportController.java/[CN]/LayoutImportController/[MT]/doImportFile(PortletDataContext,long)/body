{
  Map<String,String[]> parameterMap=portletDataContext.getParameterMap();
  Group group=_groupLocalService.getGroup(portletDataContext.getGroupId());
  String layoutsImportMode=MapUtil.getString(parameterMap,PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE,PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_MERGE_BY_LAYOUT_UUID);
  boolean permissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  if (group.isLayoutSetPrototype()) {
    parameterMap.put(PortletDataHandlerKeys.LAYOUT_SET_PROTOTYPE_LINK_ENABLED,new String[]{Boolean.FALSE.toString()});
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Import permissions " + permissions);
  }
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  LayoutCache layoutCache=new LayoutCache();
  long companyId=portletDataContext.getCompanyId();
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  if (serviceContext == null) {
    serviceContext=new ServiceContext();
  }
  serviceContext.setCompanyId(companyId);
  serviceContext.setSignedIn(false);
  serviceContext.setUserId(userId);
  ServiceContextThreadLocal.pushServiceContext(serviceContext);
  validateFile(companyId,portletDataContext.getGroupId(),parameterMap,portletDataContext.getZipReader());
  Map<Long,Long> groupIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(Group.class);
  groupIds.put(portletDataContext.getSourceGroupId(),portletDataContext.getGroupId());
  ManifestSummary manifestSummary=ExportImportHelperUtil.getManifestSummary(portletDataContext);
  portletDataContext.setManifestSummary(manifestSummary);
  Element rootElement=portletDataContext.getImportDataRootElement();
  Element headerElement=rootElement.element("header");
  String layoutSetPrototypeUuid=headerElement.attributeValue("layout-set-prototype-uuid");
  String larType=headerElement.attributeValue("type");
  portletDataContext.setType(larType);
  if (group.isLayoutPrototype() && larType.equals("layout-prototype")) {
    parameterMap.put(PortletDataHandlerKeys.DELETE_MISSING_LAYOUTS,new String[]{Boolean.FALSE.toString()});
    LayoutPrototype layoutPrototype=_layoutPrototypeLocalService.getLayoutPrototype(group.getClassPK());
    String layoutPrototypeUuid=GetterUtil.getString(headerElement.attributeValue("type-uuid"));
    LayoutPrototype existingLayoutPrototype=null;
    if (Validator.isNotNull(layoutPrototypeUuid)) {
      try {
        existingLayoutPrototype=_layoutPrototypeLocalService.getLayoutPrototypeByUuidAndCompanyId(layoutPrototypeUuid,companyId);
      }
 catch (      NoSuchLayoutPrototypeException nslpe) {
      }
    }
    if (existingLayoutPrototype == null) {
      List<Layout> layouts=_layoutLocalService.getLayoutsByLayoutPrototypeUuid(layoutPrototype.getUuid());
      layoutPrototype.setUuid(layoutPrototypeUuid);
      _layoutPrototypeLocalService.updateLayoutPrototype(layoutPrototype);
      for (      Layout layout : layouts) {
        layout.setLayoutPrototypeUuid(layoutPrototypeUuid);
        _layoutLocalService.updateLayout(layout);
      }
    }
  }
 else   if (group.isLayoutSetPrototype() && larType.equals("layout-set-prototype")) {
    parameterMap.put(PortletDataHandlerKeys.LAYOUT_SET_PROTOTYPE_SETTINGS,new String[]{Boolean.TRUE.toString()});
    LayoutSetPrototype layoutSetPrototype=_layoutSetPrototypeLocalService.getLayoutSetPrototype(group.getClassPK());
    String importedLayoutSetPrototypeUuid=GetterUtil.getString(headerElement.attributeValue("type-uuid"));
    LayoutSetPrototype existingLayoutSetPrototype=null;
    if (Validator.isNotNull(importedLayoutSetPrototypeUuid)) {
      try {
        existingLayoutSetPrototype=_layoutSetPrototypeLocalService.getLayoutSetPrototypeByUuidAndCompanyId(importedLayoutSetPrototypeUuid,companyId);
      }
 catch (      NoSuchLayoutSetPrototypeException nslspe) {
      }
    }
    if (existingLayoutSetPrototype == null) {
      List<LayoutSet> layoutSets=_layoutSetLocalService.getLayoutSetsByLayoutSetPrototypeUuid(layoutSetPrototype.getUuid());
      layoutSetPrototype.setUuid(importedLayoutSetPrototypeUuid);
      _layoutSetPrototypeLocalService.updateLayoutSetPrototype(layoutSetPrototype);
      for (      LayoutSet curLayoutSet : layoutSets) {
        curLayoutSet.setLayoutSetPrototypeUuid(importedLayoutSetPrototypeUuid);
        _layoutSetLocalService.updateLayoutSet(curLayoutSet);
      }
    }
  }
 else   if (larType.equals("layout-set-prototype")) {
    parameterMap.put(PortletDataHandlerKeys.LAYOUT_SET_PROTOTYPE_SETTINGS,new String[]{Boolean.TRUE.toString()});
    layoutSetPrototypeUuid=GetterUtil.getString(headerElement.attributeValue("type-uuid"));
  }
  Element portletsElement=rootElement.element("site-portlets");
  List<Element> portletElements=portletsElement.elements("portlet");
  if (permissions) {
    for (    Element portletElement : portletElements) {
      String portletPath=portletElement.attributeValue("path");
      Document portletDocument=SAXReaderUtil.read(portletDataContext.getZipEntryAsString(portletPath));
      _permissionImporter.checkRoles(layoutCache,companyId,portletDataContext.getGroupId(),userId,portletDocument.getRootElement());
    }
    _permissionImporter.readPortletDataPermissions(portletDataContext);
  }
  if (!layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) {
    _portletImportController.readExpandoTables(portletDataContext);
  }
  _portletImportController.readLocks(portletDataContext);
  Element groupsElement=portletDataContext.getImportDataGroupElement(StagedGroup.class);
  for (  Element groupElement : groupsElement.elements()) {
    StagedModelDataHandlerUtil.importStagedModel(portletDataContext,groupElement);
  }
  _portletImportController.importAssetLinks(portletDataContext);
  _groupLocalService.updateSite(portletDataContext.getGroupId(),true);
  if (_log.isInfoEnabled()) {
    _log.info("Importing layouts takes " + stopWatch.getTime() + " ms");
  }
  ZipReader zipReader=portletDataContext.getZipReader();
  zipReader.close();
}
