{
  if (!file.exists() || file.isDirectory()) {
    return;
  }
  Jar jar=new Jar(file);
  jar.setDoNotTouchManifest();
  analyzer.addClose(jar);
  String wabLibPath="WEB-INF/lib/" + file.getName();
  wab.putResource(wabLibPath,new JarResource(jar));
  Manifest manifest=null;
  try {
    manifest=jar.getManifest();
    if (manifest == null) {
      if (_log.isDebugEnabled()) {
        _log.debug("No manifest found for: " + jar.getName());
      }
      return;
    }
    Attributes attributes=manifest.getMainAttributes();
    String classPathHeader=attributes.getValue("Class-Path");
    if (Validator.isNull(classPathHeader)) {
      if (_log.isDebugEnabled()) {
        _log.debug("No Class-Path header found: " + jar.getName());
      }
      return;
    }
    Collection<String> classPathHeaderParts=Analyzer.split(classPathHeader,",");
    for (    String classPathHeaderPart : classPathHeaderParts) {
      File subFile=Analyzer.getFile(file.getParentFile(),classPathHeaderPart);
      if (!subFile.exists() || !subFile.getParentFile().equals(file.getParentFile())) {
        analyzer.warning("Invalid Class-Path entry %s in %s, must " + "exist and must reside in same directory",subFile,file);
      }
 else {
        wabLibPath="WEB-INF/lib/" + subFile.getName();
        appendProperty(analyzer,Constants.BUNDLE_CLASSPATH,wabLibPath);
        addWabLib(analyzer,wab,subFile);
      }
    }
  }
 catch (  Exception e) {
    _log.error("Cannot load manifest for: " + jar.getName(),e);
  }
}
