{
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext(_group.getGroupId());
  SearchContext searchContext=ServiceTestUtil.getSearchContext(_group.getGroupId());
  JournalFolder folder=JournalTestUtil.addFolder(_group.getGroupId(),ServiceTestUtil.randomString());
  int initialBaseModelsSearchCount=searchCount(_group.getGroupId(),searchContext);
  String content="Liferay Architectural Approach";
  JournalArticle article=JournalTestUtil.addArticleWithWorkflow(_group.getGroupId(),folder.getFolderId(),"title",content,true);
  Assert.assertEquals(initialBaseModelsSearchCount + 1,searchCount(_group.getGroupId(),searchContext));
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_PUBLISH);
  article=JournalTestUtil.updateArticle(article,article.getTitle(),content,serviceContext);
  Assert.assertEquals(initialBaseModelsSearchCount + 2,searchCount(_group.getGroupId(),false,WorkflowConstants.STATUS_ANY,searchContext));
  if (delete) {
    if (all) {
      JournalArticleLocalServiceUtil.deleteArticle(_group.getGroupId(),article.getArticleId(),serviceContext);
      Assert.assertEquals(initialBaseModelsSearchCount,searchCount(_group.getGroupId(),false,WorkflowConstants.STATUS_ANY,searchContext));
    }
 else {
      JournalArticleLocalServiceUtil.deleteArticle(article);
      Assert.assertEquals(initialBaseModelsSearchCount + 1,searchCount(_group.getGroupId(),false,WorkflowConstants.STATUS_ANY,searchContext));
    }
  }
 else {
    if (all) {
      JournalArticleLocalServiceUtil.expireArticle(TestPropsValues.getUserId(),_group.getGroupId(),article.getArticleId(),article.getUrlTitle(),serviceContext);
    }
 else {
      JournalArticleLocalServiceUtil.expireArticle(TestPropsValues.getUserId(),_group.getGroupId(),article.getArticleId(),article.getVersion(),article.getUrlTitle(),serviceContext);
    }
    Assert.assertEquals(initialBaseModelsSearchCount + 2,searchCount(_group.getGroupId(),false,WorkflowConstants.STATUS_ANY,searchContext));
  }
}
