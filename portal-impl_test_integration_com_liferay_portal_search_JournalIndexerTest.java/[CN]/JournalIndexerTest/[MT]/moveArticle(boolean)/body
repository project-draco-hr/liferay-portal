{
  SearchContext searchContext1=ServiceTestUtil.getSearchContext(_group.getGroupId());
  searchContext1.setKeywords("Architectural");
  JournalFolder folder1=JournalTestUtil.addFolder(_group.getGroupId(),ServiceTestUtil.randomString());
  searchContext1.setFolderIds(new long[]{folder1.getFolderId()});
  int initialSearchCount1=searchCount(_group.getGroupId(),searchContext1);
  SearchContext searchContext2=ServiceTestUtil.getSearchContext(_group.getGroupId());
  searchContext2.setKeywords("Architectural");
  JournalFolder folder2=JournalTestUtil.addFolder(_group.getGroupId(),ServiceTestUtil.randomString());
  searchContext2.setFolderIds(new long[]{folder2.getFolderId()});
  int initialSearchCount2=searchCount(_group.getGroupId(),searchContext2);
  JournalArticle article=JournalTestUtil.addArticleWithWorkflow(_group.getGroupId(),folder1.getFolderId(),"title","Liferay Architectural Approach",true);
  Assert.assertEquals(initialSearchCount1 + 1,searchCount(_group.getGroupId(),searchContext1));
  if (moveToTrash) {
    JournalFolderLocalServiceUtil.moveFolderToTrash(TestPropsValues.getUserId(),folder1.getFolderId());
    Assert.assertEquals(initialSearchCount1,searchCount(_group.getGroupId(),searchContext1));
    ServiceContext serviceContext=ServiceTestUtil.getServiceContext(_group.getGroupId());
    JournalArticleLocalServiceUtil.moveArticleFromTrash(TestPropsValues.getUserId(),_group.getGroupId(),article,folder2.getFolderId(),serviceContext);
  }
 else {
    JournalArticleLocalServiceUtil.moveArticle(_group.getGroupId(),article.getArticleId(),folder2.getFolderId());
  }
  Assert.assertEquals(initialSearchCount1,searchCount(_group.getGroupId(),searchContext1));
  Assert.assertEquals(initialSearchCount2 + 1,searchCount(_group.getGroupId(),searchContext2));
}
