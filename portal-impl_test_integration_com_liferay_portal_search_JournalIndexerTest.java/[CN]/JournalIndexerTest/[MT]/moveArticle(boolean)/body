{
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext(_group.getGroupId());
  JournalFolder folder=JournalTestUtil.addFolder(_group.getGroupId(),ServiceTestUtil.randomString());
  JournalFolder newFolder=JournalTestUtil.addFolder(_group.getGroupId(),ServiceTestUtil.randomString());
  SearchContext searchContext1=ServiceTestUtil.getSearchContext(_group.getGroupId());
  searchContext1.setKeywords("Architectural");
  searchContext1.setFolderIds(new long[]{folder.getFolderId()});
  SearchContext searchContext2=ServiceTestUtil.getSearchContext(_group.getGroupId());
  searchContext2.setKeywords("Architectural");
  searchContext2.setFolderIds(new long[]{newFolder.getFolderId()});
  int initialBaseModelsSearchCountFolders1=searchCount(_group.getGroupId(),searchContext1);
  int initialBaseModelsSearchCountFolders2=searchCount(_group.getGroupId(),searchContext2);
  JournalArticle article=JournalTestUtil.addArticleWithWorkflow(_group.getGroupId(),folder.getFolderId(),"title","Liferay Architectural Approach",true);
  Assert.assertEquals(initialBaseModelsSearchCountFolders1 + 1,searchCount(_group.getGroupId(),searchContext1));
  if (moveToTrash) {
    JournalArticleLocalServiceUtil.moveArticleToTrash(TestPropsValues.getUserId(),article);
    Assert.assertEquals(initialBaseModelsSearchCountFolders1,searchCount(_group.getGroupId(),searchContext1));
    JournalArticleLocalServiceUtil.moveArticleFromTrash(TestPropsValues.getUserId(),_group.getGroupId(),article,newFolder.getFolderId(),serviceContext);
  }
 else {
    JournalArticleLocalServiceUtil.moveArticle(_group.getGroupId(),article.getArticleId(),newFolder.getFolderId());
  }
  Assert.assertEquals(initialBaseModelsSearchCountFolders1,searchCount(_group.getGroupId(),searchContext1));
  Assert.assertEquals(initialBaseModelsSearchCountFolders2 + 1,searchCount(_group.getGroupId(),searchContext2));
}
