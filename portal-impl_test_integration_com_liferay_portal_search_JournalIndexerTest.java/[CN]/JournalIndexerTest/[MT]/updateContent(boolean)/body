{
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext(_group.getGroupId());
  SearchContext searchContext1=ServiceTestUtil.getSearchContext(_group.getGroupId());
  searchContext1.setKeywords("Architectural");
  SearchContext searchContext2=ServiceTestUtil.getSearchContext(_group.getGroupId());
  searchContext2.setKeywords("Liferay");
  int initialBaseModelsSearchCountKeywords1=searchCount(_group.getGroupId(),searchContext1);
  int initialBaseModelsSearchCountKeywords2=searchCount(_group.getGroupId(),searchContext2);
  JournalFolder folder=JournalTestUtil.addFolder(_group.getGroupId(),ServiceTestUtil.randomString());
  String content="Liferay Architectural Approach";
  JournalArticle article=null;
  if (basicContent) {
    article=JournalTestUtil.addArticleWithWorkflow(_group.getGroupId(),folder.getFolderId(),"title",content,true);
  }
 else {
    article=addJournalWithDDMStructure(folder.getFolderId(),content,serviceContext);
  }
  Assert.assertEquals(initialBaseModelsSearchCountKeywords1 + 1,searchCount(_group.getGroupId(),searchContext1));
  if (basicContent) {
    content=JournalTestUtil.createLocalizedContent("Architectural Approach",LocaleUtil.getDefault());
  }
 else {
    content=DDMStructureTestUtil.getSampleStructuredContent("name","Architectural Approach");
  }
  JournalArticleLocalServiceUtil.updateContent(_group.getGroupId(),article.getArticleId(),article.getVersion(),content);
  Assert.assertEquals(initialBaseModelsSearchCountKeywords1 + 1,searchCount(_group.getGroupId(),searchContext1));
  Assert.assertEquals(initialBaseModelsSearchCountKeywords2,searchCount(_group.getGroupId(),searchContext2));
}
