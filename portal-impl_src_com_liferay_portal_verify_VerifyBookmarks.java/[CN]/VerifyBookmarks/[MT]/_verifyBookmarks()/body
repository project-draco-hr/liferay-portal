{
  long classNameId=ClassNameLocalServiceUtil.getClassName(BookmarksEntry.class.getName()).getClassNameId();
  DetachedCriteria existingTagsAssetEntriesIds=DetachedCriteria.forClass(TagsAssetImpl.class,"ta").add(Property.forName("ta.classNameId").eq(new Long(classNameId))).setProjection(Property.forName("ta.classPK"));
  DetachedCriteria entriesWithMissingTagsAssets=DetachedCriteria.forClass(BookmarksEntryImpl.class,"bm").add(Restrictions.not(Subqueries.propertyIn("bm.entryId",existingTagsAssetEntriesIds)));
  DynamicQueryInitializer dqi=new DynamicQueryInitializerImpl(entriesWithMissingTagsAssets);
  try {
    List entries=BookmarksEntryLocalServiceUtil.dynamicQuery(dqi);
    if (_log.isDebugEnabled()) {
      _log.debug("Processing " + entries.size() + " entries");
    }
    for (int i=0; i < entries.size(); i++) {
      BookmarksEntry entry=(BookmarksEntry)entries.get(i);
      TagsAssetLocalServiceUtil.updateAsset(entry.getUserId(),BookmarksEntry.class.getName(),entry.getEntryId(),new String[0],null,null,null,null,ContentTypes.TEXT_PLAIN,entry.getName(),entry.getComments(),entry.getComments(),entry.getUrl(),0,0);
    }
  }
 catch (  SystemException se) {
    _log.error(se);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("TagsAssets verified for Bookmarks entries");
  }
}
