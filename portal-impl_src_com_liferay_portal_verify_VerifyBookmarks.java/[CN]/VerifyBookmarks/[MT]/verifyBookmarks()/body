{
  long classNameId=PortalUtil.getClassNameId(BookmarksEntry.class.getName());
  DetachedCriteria entriesWithTagsAssets=DetachedCriteria.forClass(TagsAssetImpl.class,"tagsAsset");
  entriesWithTagsAssets=entriesWithTagsAssets.add(Property.forName("tagsAsset.classNameId").eq(new Long(classNameId)));
  entriesWithTagsAssets=entriesWithTagsAssets.setProjection(Property.forName("tagsAsset.classPK"));
  DetachedCriteria entriesWithoutTagsAssets=DetachedCriteria.forClass(BookmarksEntryImpl.class,"bookmarksEntry");
  entriesWithoutTagsAssets=entriesWithoutTagsAssets.add(Restrictions.not(Subqueries.propertyIn("bookmarksEntry.entryId",entriesWithTagsAssets)));
  DynamicQueryInitializer dqi=new DynamicQueryInitializerImpl(entriesWithoutTagsAssets);
  List entries=BookmarksEntryLocalServiceUtil.dynamicQuery(dqi);
  if (_log.isDebugEnabled()) {
    _log.debug("Processing " + entries.size() + " entries with no tags assets");
  }
  for (int i=0; i < entries.size(); i++) {
    BookmarksEntry entry=(BookmarksEntry)entries.get(i);
    BookmarksEntryLocalServiceUtil.updateTagsAsset(entry,new String[0]);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Tags assets verified for entries");
  }
}
