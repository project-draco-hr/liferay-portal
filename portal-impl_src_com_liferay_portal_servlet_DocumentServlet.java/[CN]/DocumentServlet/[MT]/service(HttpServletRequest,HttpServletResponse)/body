{
  InputStream is=null;
  try {
    long companyId=PortalInstances.getCompanyId(request);
    CompanyThreadLocal.setCompanyId(companyId);
    long userId=PortalUtil.getUserId(request);
    if (userId == 0) {
      Company company=CompanyLocalServiceUtil.getCompany(companyId);
      userId=company.getDefaultUser().getUserId();
    }
    PermissionChecker permissionChecker=null;
    PrincipalThreadLocal.setName(userId);
    User user=UserLocalServiceUtil.getUserById(userId);
    permissionChecker=PermissionCheckerFactoryUtil.create(user,true);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    String path=request.getPathInfo();
    if (path.startsWith(StringPool.SLASH)) {
      path=path.substring(1);
    }
    if (path.endsWith(StringPool.SLASH)) {
      path=path.substring(0,path.length() - 1);
    }
    String[] pathArray=StringUtil.split(path,StringPool.SLASH);
    if (pathArray.length > 0 && pathArray.length <= 3) {
      long groupId=0;
      long folderId=0;
      String name=null;
      String fileName=null;
      DLFileEntry fileEntry=null;
      if (pathArray.length == 1) {
        long fileShortcutId=GetterUtil.getLong(pathArray[0]);
        DLFileShortcut fileShortcut=DLFileShortcutServiceUtil.getFileShortcut(fileShortcutId);
        groupId=fileShortcut.getGroupId();
        folderId=fileShortcut.getToFolderId();
        name=fileShortcut.getToName();
        fileEntry=DLFileEntryLocalServiceUtil.getFileEntry(groupId,folderId,name);
        fileName=fileEntry.getTitle();
      }
 else       if (pathArray.length == 2) {
        groupId=GetterUtil.getLong(pathArray[0]);
        fileEntry=DLFileEntryLocalServiceUtil.getFileEntryByUuidAndGroupId(pathArray[1],groupId);
        folderId=fileEntry.getFolderId();
        fileName=fileEntry.getTitle();
        name=fileEntry.getName();
      }
 else {
        groupId=GetterUtil.getLong(pathArray[0]);
        folderId=GetterUtil.getLong(pathArray[1]);
        fileName=HttpUtil.decodeURL(pathArray[2],true);
        fileEntry=DLFileEntryServiceUtil.getFileEntryByTitle(groupId,folderId,fileName);
        name=fileEntry.getName();
      }
      if (fileEntry != null) {
        DLFileEntryPermission.check(permissionChecker,fileEntry,ActionKeys.VIEW);
        double version=ParamUtil.getDouble(request,"version");
        String targetExtension=ParamUtil.getString(request,"targetExtension");
        if (version == 0) {
          if (fileEntry.getVersion() > 0) {
            version=fileEntry.getVersion();
          }
 else {
            throw new NoSuchFileEntryException();
          }
        }
        is=DLFileEntryLocalServiceUtil.getFileAsStream(companyId,userId,groupId,folderId,name,version);
        boolean converted=false;
        if (Validator.isNotNull(targetExtension)) {
          String id=DocumentConversionUtil.getTempFileId(fileEntry.getFileEntryId(),version);
          String sourceExtension=FileUtil.getExtension(fileName);
          InputStream convertedIS=DocumentConversionUtil.convert(id,is,sourceExtension,targetExtension);
          if ((convertedIS != null) && (convertedIS != is)) {
            StringBuilder sb=new StringBuilder();
            sb.append(FileUtil.stripExtension(fileName));
            sb.append(StringPool.PERIOD);
            sb.append(targetExtension);
            fileName=sb.toString();
            is=convertedIS;
            converted=true;
          }
        }
        int contentLength=0;
        if (!converted) {
          if (version >= fileEntry.getVersion()) {
            contentLength=fileEntry.getSize();
          }
 else {
            DLFileVersion fileVersion=DLFileVersionLocalServiceUtil.getFileVersion(groupId,folderId,name,version);
            contentLength=fileVersion.getSize();
          }
        }
        String contentType=MimeTypesUtil.getContentType(fileName);
        ServletResponseUtil.sendFile(response,fileName,is,contentLength,contentType);
        return;
      }
    }
    throw new NoSuchFileEntryException();
  }
 catch (  NoSuchFileEntryException nsfee) {
    PortalUtil.sendError(HttpServletResponse.SC_NOT_FOUND,nsfee,request,response);
  }
catch (  Exception e) {
    PortalUtil.sendError(e,request,response);
  }
 finally {
    ServletResponseUtil.cleanUp(is);
  }
}
