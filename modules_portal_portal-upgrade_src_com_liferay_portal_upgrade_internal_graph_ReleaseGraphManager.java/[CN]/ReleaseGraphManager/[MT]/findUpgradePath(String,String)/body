{
  if (!_directedGraph.containsVertex(from)) {
    throw new IllegalArgumentException("There is no path starting in " + from);
  }
  if (!_directedGraph.containsVertex(to)) {
    throw new IllegalArgumentException("There is no path starting in " + to);
  }
  DijkstraShortestPath<String,UpgradeProcessEdge> dijkstraShortestPath=new DijkstraShortestPath<>(_directedGraph,from,to);
  List<UpgradeProcessEdge> pathEdgeList=dijkstraShortestPath.getPathEdgeList();
  if (pathEdgeList == null) {
    throw new IllegalArgumentException("There is no path between " + from + " and "+ to);
  }
  return ListUtil.toList(pathEdgeList,new Accessor<UpgradeProcessEdge,UpgradeInfo>(){
    @Override public UpgradeInfo get(    UpgradeProcessEdge upgradeProcessEdge){
      return upgradeProcessEdge._upgradeInfo;
    }
    @Override public Class<UpgradeInfo> getAttributeClass(){
      return UpgradeInfo.class;
    }
    @Override public Class<UpgradeProcessEdge> getTypeClass(){
      return UpgradeProcessEdge.class;
    }
  }
);
}
