{
  if (!_directedGraph.containsVertex(fromVersionString)) {
    throw new IllegalArgumentException("There is no path for " + fromVersionString);
  }
  if (!_directedGraph.containsVertex(toVersionString)) {
    throw new IllegalArgumentException("There is no path for " + toVersionString);
  }
  DijkstraShortestPath<String,UpgradeProcessEdge> dijkstraShortestPath=new DijkstraShortestPath<>(_directedGraph,fromVersionString,toVersionString);
  List<UpgradeProcessEdge> upgradeProcessEdges=dijkstraShortestPath.getPathEdgeList();
  if (upgradeProcessEdges == null) {
    throw new IllegalArgumentException("There is no path between " + fromVersionString + " and "+ toVersionString);
  }
  return ListUtil.toList(upgradeProcessEdges,new Accessor<UpgradeProcessEdge,UpgradeInfo>(){
    @Override public UpgradeInfo get(    UpgradeProcessEdge upgradeProcessEdge){
      return upgradeProcessEdge.getUpgradeInfo();
    }
    @Override public Class<UpgradeInfo> getAttributeClass(){
      return UpgradeInfo.class;
    }
    @Override public Class<UpgradeProcessEdge> getTypeClass(){
      return UpgradeProcessEdge.class;
    }
  }
);
}
