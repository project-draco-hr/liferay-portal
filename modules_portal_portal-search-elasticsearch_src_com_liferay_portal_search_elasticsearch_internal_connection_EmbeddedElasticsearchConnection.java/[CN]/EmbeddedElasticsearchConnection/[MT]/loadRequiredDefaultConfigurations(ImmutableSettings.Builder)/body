{
  builder.put("bootstrap.mlockall",elasticsearchConfiguration.bootstrapMlockAll());
  builder.put("cluster.name",elasticsearchConfiguration.clusterName());
  builder.put("discovery.zen.ping.multicast.enabled",false);
  builder.put("http.cors.enabled",elasticsearchConfiguration.httpCORSEnabled());
  builder.put("http.enabled",elasticsearchConfiguration.httpEnabled());
  builder.put("index.number_of_replicas",0);
  builder.put("index.number_of_shards",1);
  String networkBindHost=elasticsearchConfiguration.networkBindHost();
  if (Validator.isNotNull(networkBindHost)) {
    builder.put("network.bind.host",networkBindHost);
  }
  String networkHost=elasticsearchConfiguration.networkHost();
  if (Validator.isNotNull(networkHost)) {
    builder.put("network.host",networkHost);
  }
  String networkPublishHost=elasticsearchConfiguration.networkPublishHost();
  if (Validator.isNotNull(networkPublishHost)) {
    builder.put("network.publish.host",networkPublishHost);
  }
  builder.put("node.client",false);
  builder.put("node.data",true);
  builder.put("node.local",true);
  builder.put("path.data",_props.get(PropsKeys.LIFERAY_HOME) + "/data/elasticsearch/indices");
  builder.put("path.logs",_props.get(PropsKeys.LIFERAY_HOME) + "/logs");
  builder.put("path.plugins",_props.get(PropsKeys.LIFERAY_HOME) + "/data/elasticsearch/plugins");
  builder.put("path.repo",_props.get(PropsKeys.LIFERAY_HOME) + "/data/elasticsearch/repo");
  builder.put("path.work",SystemProperties.get(SystemProperties.TMP_DIR));
  String transportTcpPort=elasticsearchConfiguration.transportTcpPort();
  if (Validator.isNotNull(transportTcpPort)) {
    builder.put("transport.tcp.port",transportTcpPort);
  }
  if (PortalRunMode.isTestMode()) {
    builder.put("index.refresh_interval","1ms");
    builder.put("index.store.type","memory");
    builder.put("index.translog.flush_threshold_ops","1");
    builder.put("index.translog.interval","1ms");
  }
}
