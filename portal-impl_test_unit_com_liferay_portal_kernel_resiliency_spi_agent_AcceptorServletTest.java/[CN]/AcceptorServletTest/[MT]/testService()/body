{
  final AtomicBoolean failOnForward=new AtomicBoolean();
  final AtomicReference<String> forwardPathReference=new AtomicReference<String>();
  final IOException ioException=new IOException("Unable to forward");
  MockServletContext mockServletContext=new MockServletContext(){
    @Override public RequestDispatcher getRequestDispatcher(    final String path){
      return new RequestDispatcher(){
        @Override public void forward(        ServletRequest servletRequest,        ServletResponse servletResponse) throws IOException {
          forwardPathReference.set(path);
          if (failOnForward.get()) {
            throw ioException;
          }
        }
        @Override public void include(        ServletRequest servletRequest,        ServletResponse servletResponse){
        }
      }
;
    }
  }
;
  mockServletContext.setContextPath("/");
  AcceptorServlet acceptorServlet=new AcceptorServlet();
  acceptorServlet.init(new MockServletConfig(mockServletContext));
  MockHttpServletRequest mockHttpServletRequest=new MockHttpServletRequest();
  mockHttpServletRequest.setServerPort(1234);
  MockHttpServletResponse mockHttpServletResponse=new MockHttpServletResponse();
  acceptorServlet.service(mockHttpServletRequest,mockHttpServletResponse);
  Assert.assertEquals("/c/portal/resiliency",forwardPathReference.get());
  Assert.assertSame(mockHttpServletRequest,_recordSPIAgent._originalRequest1);
  Assert.assertSame(mockHttpServletRequest,_recordSPIAgent._originalRequest2);
  Assert.assertSame(mockHttpServletResponse,_recordSPIAgent._originalResponse);
  Assert.assertNull(_recordSPIAgent._exception);
  Assert.assertTrue(_mockHttpSession.isInvalid());
  _pathContext="/liferay-portal";
  mockServletContext.registerContext(_pathContext,mockServletContext);
  acceptorServlet.service(mockHttpServletRequest,mockHttpServletResponse);
  Assert.assertEquals("/c/portal/resiliency",forwardPathReference.get());
  Assert.assertSame(mockHttpServletRequest,_recordSPIAgent._originalRequest1);
  Assert.assertSame(mockHttpServletRequest,_recordSPIAgent._originalRequest2);
  Assert.assertSame(mockHttpServletResponse,_recordSPIAgent._originalResponse);
  Assert.assertNull(_recordSPIAgent._exception);
  Assert.assertTrue(_mockHttpSession.isInvalid());
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(AcceptorServlet.class.getName(),Level.SEVERE)){
    _recordSPIAgent.setIOExceptionOnPrepareRequest(true);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    try {
      acceptorServlet.service(mockHttpServletRequest,mockHttpServletResponse);
      Assert.fail();
    }
 catch (    IOException ioe) {
      Assert.assertEquals("IOException on prepare request",ioe.getMessage());
    }
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Throwable throwable=logRecord.getThrown();
    Assert.assertSame(IOException.class,throwable.getClass());
    Assert.assertEquals("IOException on prepare request",throwable.getMessage());
    _recordSPIAgent.setIOExceptionOnPrepareRequest(false);
    _recordSPIAgent.setRuntimeExceptionOnPrepareRequest(true);
    logRecords=captureHandler.resetLogLevel(Level.SEVERE);
    try {
      acceptorServlet.service(mockHttpServletRequest,mockHttpServletResponse);
      Assert.fail();
    }
 catch (    RuntimeException re) {
      Assert.assertEquals("RuntimeException on prepare request",re.getMessage());
    }
    Assert.assertEquals(1,logRecords.size());
    logRecord=logRecords.get(0);
    throwable=logRecord.getThrown();
    Assert.assertSame(RuntimeException.class,throwable.getClass());
    Assert.assertEquals("RuntimeException on prepare request",throwable.getMessage());
  }
   _recordSPIAgent.setRuntimeExceptionOnPrepareRequest(false);
  failOnForward.set(true);
  acceptorServlet.service(mockHttpServletRequest,mockHttpServletResponse);
  Assert.assertEquals("/c/portal/resiliency",forwardPathReference.get());
  Assert.assertSame(mockHttpServletRequest,_recordSPIAgent._originalRequest1);
  Assert.assertSame(mockHttpServletRequest,_recordSPIAgent._originalRequest2);
  Assert.assertSame(mockHttpServletResponse,_recordSPIAgent._originalResponse);
  Assert.assertSame(ioException,_recordSPIAgent._exception);
  Assert.assertTrue(_mockHttpSession.isInvalid());
}
