{
  final DynamicQuery dynamicQuery=DynamicQueryFactoryUtil.forClass(_clazz,_classLoader);
  Property property=PropertyFactoryUtil.forName(_primaryKeyPropertyName);
  dynamicQuery.add(property.gt(previousPrimaryKey));
  dynamicQuery.setLimit(0,_interval);
  dynamicQuery.addOrder(OrderFactoryUtil.asc(_primaryKeyPropertyName));
  addDefaultCriteria(dynamicQuery);
  addCriteria(dynamicQuery);
  Callable<Long> performActionsCallable=new Callable<Long>(){
    @Override public Long call() throws Exception {
      List<Object> objects=(List<Object>)executeDynamicQuery(_dynamicQueryMethod,dynamicQuery);
      if (objects.isEmpty()) {
        return -1L;
      }
      for (      Object object : objects) {
        performAction(object);
      }
      if (objects.size() < _interval) {
        return -1L;
      }
      BaseModel<?> baseModel=(BaseModel<?>)objects.get(objects.size() - 1);
      return (Long)baseModel.getPrimaryKeyObj();
    }
  }
;
  TransactionAttribute transactionAttribute=getTransactionAttribute();
  try {
    if (transactionAttribute == null) {
      return performActionsCallable.call();
    }
 else {
      return TransactionInvokerUtil.invoke(transactionAttribute,performActionsCallable);
    }
  }
 catch (  Throwable t) {
    if (t instanceof PortalException) {
      throw (PortalException)t;
    }
    if (t instanceof SystemException) {
      throw (SystemException)t;
    }
    throw new SystemException(t);
  }
 finally {
    indexInterval();
  }
}
