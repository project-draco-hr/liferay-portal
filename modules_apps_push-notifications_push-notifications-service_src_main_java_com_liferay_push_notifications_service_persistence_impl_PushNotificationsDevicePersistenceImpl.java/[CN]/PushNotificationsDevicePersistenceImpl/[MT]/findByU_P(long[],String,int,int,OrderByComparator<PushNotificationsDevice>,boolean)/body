{
  if (userIds == null) {
    userIds=new long[0];
  }
 else   if (userIds.length > 1) {
    userIds=ArrayUtil.unique(userIds);
    Arrays.sort(userIds);
  }
  if (userIds.length == 1) {
    return findByU_P(userIds[0],platform,start,end,orderByComparator);
  }
  boolean pagination=true;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    pagination=false;
    finderArgs=new Object[]{StringUtil.merge(userIds),platform};
  }
 else {
    finderArgs=new Object[]{StringUtil.merge(userIds),platform,start,end,orderByComparator};
  }
  List<PushNotificationsDevice> list=null;
  if (retrieveFromCache) {
    list=(List<PushNotificationsDevice>)finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_U_P,finderArgs,this);
    if ((list != null) && !list.isEmpty()) {
      for (      PushNotificationsDevice pushNotificationsDevice : list) {
        if (!ArrayUtil.contains(userIds,pushNotificationsDevice.getUserId()) || !Objects.equals(platform,pushNotificationsDevice.getPlatform())) {
          list=null;
          break;
        }
      }
    }
  }
  if (list == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_SELECT_PUSHNOTIFICATIONSDEVICE_WHERE);
    if (userIds.length > 0) {
      query.append(StringPool.OPEN_PARENTHESIS);
      query.append(_FINDER_COLUMN_U_P_USERID_7);
      query.append(StringUtil.merge(userIds));
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(WHERE_AND);
    }
    boolean bindPlatform=false;
    if (platform == null) {
      query.append(_FINDER_COLUMN_U_P_PLATFORM_1);
    }
 else     if (platform.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_U_P_PLATFORM_3);
    }
 else {
      bindPlatform=true;
      query.append(_FINDER_COLUMN_U_P_PLATFORM_2);
    }
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else     if (pagination) {
      query.append(PushNotificationsDeviceModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindPlatform) {
        qPos.add(platform);
      }
      if (!pagination) {
        list=(List<PushNotificationsDevice>)QueryUtil.list(q,getDialect(),start,end,false);
        Collections.sort(list);
        list=Collections.unmodifiableList(list);
      }
 else {
        list=(List<PushNotificationsDevice>)QueryUtil.list(q,getDialect(),start,end);
      }
      cacheResult(list);
      finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_U_P,finderArgs,list);
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_U_P,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return list;
}
