{
  if (userIds == null) {
    userIds=new long[0];
  }
 else   if (userIds.length > 1) {
    userIds=ArrayUtil.unique(userIds);
    Arrays.sort(userIds);
  }
  Object[] finderArgs=new Object[]{StringUtil.merge(userIds),platform};
  Long count=(Long)finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_U_P,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_COUNT_PUSHNOTIFICATIONSDEVICE_WHERE);
    if (userIds.length > 0) {
      query.append(StringPool.OPEN_PARENTHESIS);
      query.append(_FINDER_COLUMN_U_P_USERID_7);
      query.append(StringUtil.merge(userIds));
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(WHERE_AND);
    }
    boolean bindPlatform=false;
    if (platform == null) {
      query.append(_FINDER_COLUMN_U_P_PLATFORM_1);
    }
 else     if (platform.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_U_P_PLATFORM_3);
    }
 else {
      bindPlatform=true;
      query.append(_FINDER_COLUMN_U_P_PLATFORM_2);
    }
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindPlatform) {
        qPos.add(platform);
      }
      count=(Long)q.uniqueResult();
      finderCache.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_U_P,finderArgs,count);
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_U_P,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return count.intValue();
}
