{
  boolean pagination=true;
  FinderPath finderPath=null;
  Object[] finderArgs=null;
  finderPath=FINDER_PATH_WITH_PAGINATION_FIND_BY_G_LIKEN;
  finderArgs=new Object[]{groupId,name,start,end,orderByComparator};
  List<AssetTag> list=(List<AssetTag>)FinderCacheUtil.getResult(finderPath,finderArgs,this);
  if ((list != null) && !list.isEmpty()) {
    for (    AssetTag assetTag : list) {
      if ((groupId != assetTag.getGroupId()) || !StringUtil.wildcardMatches(assetTag.getName(),name,CharPool.UNDERLINE,CharPool.PERCENT,CharPool.BACK_SLASH,true)) {
        list=null;
        break;
      }
    }
  }
  if (list == null) {
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(4 + (orderByComparator.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(4);
    }
    query.append(_SQL_SELECT_ASSETTAG_WHERE);
    query.append(_FINDER_COLUMN_G_LIKEN_GROUPID_2);
    boolean bindName=false;
    if (name == null) {
      query.append(_FINDER_COLUMN_G_LIKEN_NAME_1);
    }
 else     if (name.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_LIKEN_NAME_3);
    }
 else {
      bindName=true;
      query.append(_FINDER_COLUMN_G_LIKEN_NAME_2);
    }
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else     if (pagination) {
      query.append(AssetTagModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      if (bindName) {
        qPos.add(name);
      }
      if (!pagination) {
        list=(List<AssetTag>)QueryUtil.list(q,getDialect(),start,end,false);
        Collections.sort(list);
        list=Collections.unmodifiableList(list);
      }
 else {
        list=(List<AssetTag>)QueryUtil.list(q,getDialect(),start,end);
      }
      cacheResult(list);
      FinderCacheUtil.putResult(finderPath,finderArgs,list);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(finderPath,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return list;
}
