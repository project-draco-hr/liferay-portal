{
  if (groupIds == null) {
    groupIds=new long[0];
  }
 else {
    groupIds=ArrayUtil.unique(groupIds);
  }
  if (groupIds.length == 1) {
    return findByG_LikeN(groupIds[0],name,start,end,orderByComparator);
  }
  boolean pagination=true;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    pagination=false;
    finderArgs=new Object[]{StringUtil.merge(groupIds),name};
  }
 else {
    finderArgs=new Object[]{StringUtil.merge(groupIds),name,start,end,orderByComparator};
  }
  List<AssetTag> list=(List<AssetTag>)FinderCacheUtil.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_G_LIKEN,finderArgs,this);
  if ((list != null) && !list.isEmpty()) {
    for (    AssetTag assetTag : list) {
      if (!ArrayUtil.contains(groupIds,assetTag.getGroupId()) || !StringUtil.wildcardMatches(assetTag.getName(),name,CharPool.UNDERLINE,CharPool.PERCENT,CharPool.BACK_SLASH,true)) {
        list=null;
        break;
      }
    }
  }
  if (list == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_SELECT_ASSETTAG_WHERE);
    if (groupIds.length > 0) {
      query.append(StringPool.OPEN_PARENTHESIS);
      query.append(_FINDER_COLUMN_G_LIKEN_GROUPID_7);
      query.append(StringUtil.merge(groupIds));
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(WHERE_AND);
    }
    boolean bindName=false;
    if (name == null) {
      query.append(_FINDER_COLUMN_G_LIKEN_NAME_1);
    }
 else     if (name.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_LIKEN_NAME_3);
    }
 else {
      bindName=true;
      query.append(_FINDER_COLUMN_G_LIKEN_NAME_2);
    }
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else     if (pagination) {
      query.append(AssetTagModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindName) {
        qPos.add(name);
      }
      if (!pagination) {
        list=(List<AssetTag>)QueryUtil.list(q,getDialect(),start,end,false);
        Collections.sort(list);
        list=Collections.unmodifiableList(list);
      }
 else {
        list=(List<AssetTag>)QueryUtil.list(q,getDialect(),start,end);
      }
      cacheResult(list);
      FinderCacheUtil.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_G_LIKEN,finderArgs,list);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_G_LIKEN,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return list;
}
