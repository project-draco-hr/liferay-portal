{
  Set themeIds=new HashSet();
  if (xml == null) {
    return themeIds;
  }
  SAXReader reader=SAXReaderFactory.getInstance();
  Document doc=reader.read(new StringReader(xml));
  Element root=doc.getRootElement();
  Set compatibleVersions=new HashSet();
  Element compatibilityEl=root.element("compatibility");
  if (compatibilityEl != null) {
    Iterator itr=compatibilityEl.elements("version").iterator();
    while (itr.hasNext()) {
      Element versionEl=(Element)itr.next();
      String version=versionEl.getTextTrim();
      version=_getVersion(version);
      compatibleVersions.add(version);
    }
  }
  if (!compatibleVersions.contains(_getVersion(ReleaseInfo.getVersion()))) {
    _log.error("Themes in this WAR are not compatible with " + ReleaseInfo.getServerInfo());
    return themeIds;
  }
  ThemeCompanyLimit companyLimit=null;
  Element companyLimitEl=root.element("company-limit");
  if (companyLimitEl != null) {
    companyLimit=new ThemeCompanyLimit();
    Element companyIncludesEl=companyLimitEl.element("company-includes");
    if (companyIncludesEl != null) {
      companyLimit.setIncludes(_getCompanyLimitIncludes(companyIncludesEl));
    }
    Element companyExcludesEl=companyLimitEl.element("company-excludes");
    if (companyExcludesEl != null) {
      companyLimit.setExcludes(_getCompanyLimitExcludes(companyExcludesEl));
    }
  }
  Iterator itr1=root.elements("theme").iterator();
  while (itr1.hasNext()) {
    Element theme=(Element)itr1.next();
    String themeId=theme.attributeValue("id");
    if (servletContextName != null) {
      themeId=themeId + PortletImpl.WAR_SEPARATOR + servletContextName;
    }
    themeId=PortalUtil.getJsSafePortletName(themeId);
    themeIds.add(themeId);
    Theme themeModel=(Theme)_themes.get(themeId);
    if (themeModel == null) {
      themeModel=new ThemeImpl(themeId);
      _themes.put(themeId,themeModel);
    }
    if (companyLimit != null) {
      _themeCompanyLimits.put(themeId,companyLimit);
    }
    if (servletContextName != null) {
      themeModel.setServletContextName(servletContextName);
    }
    themeModel.setName(GetterUtil.getString(theme.attributeValue("name"),themeModel.getName()));
    themeModel.setRootPath(GetterUtil.getString(theme.elementText("root-path"),themeModel.getRootPath()));
    themeModel.setTemplatesPath(GetterUtil.getString(theme.elementText("templates-path"),themeModel.getTemplatesPath()));
    themeModel.setImagesPath(GetterUtil.getString(theme.elementText("images-path"),themeModel.getImagesPath()));
    themeModel.setTemplateExtension(GetterUtil.getString(theme.elementText("template-extension"),themeModel.getTemplateExtension()));
    themeModel.setEnableDragAndDrop(GetterUtil.getBoolean(theme.elementText("enable-drag-and-drop"),themeModel.isEnableDragAndDrop()));
    Element settingsEl=theme.element("settings");
    if (settingsEl != null) {
      Iterator itr2=settingsEl.elements("setting").iterator();
      while (itr2.hasNext()) {
        Element settingEl=(Element)itr2.next();
        String key=settingEl.attributeValue("key");
        String value=settingEl.attributeValue("value");
        themeModel.setSetting(key,value);
      }
    }
    _readColorSchemes(theme,themeModel.getColorSchemesMap());
    _readColorSchemes(theme,themeModel.getColorSchemesMap());
    Element layoutTemplatesEl=theme.element("layout-templates");
    if (layoutTemplatesEl != null) {
      Element standardEl=layoutTemplatesEl.element("standard");
      if (standardEl != null) {
        LayoutTemplateLocalUtil.readLayoutTemplate(null,ctx,null,standardEl,true,themeId);
      }
      Element customEl=layoutTemplatesEl.element("custom");
      if (customEl != null) {
        LayoutTemplateLocalUtil.readLayoutTemplate(null,ctx,null,customEl,false,themeId);
      }
    }
  }
  return themeIds;
}
