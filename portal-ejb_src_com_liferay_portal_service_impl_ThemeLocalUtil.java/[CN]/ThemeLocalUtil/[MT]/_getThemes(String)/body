{
  Map themes=(Map)_themesPool.get(companyId);
  if (themes == null) {
    themes=CollectionFactory.getSyncHashMap();
    Iterator itr=_themes.entrySet().iterator();
    while (itr.hasNext()) {
      Map.Entry entry=(Map.Entry)itr.next();
      String themeId=(String)entry.getKey();
      Theme theme=(Theme)entry.getValue();
      boolean available=true;
      ThemeCompanyLimit companyLimit=(ThemeCompanyLimit)_themeCompanyLimits.get(themeId);
      if (_log.isDebugEnabled()) {
        _log.debug("Check if theme " + themeId + " is available for "+ companyId);
      }
      if (companyLimit != null) {
        List includes=companyLimit.getIncludes();
        List excludes=companyLimit.getExcludes();
        if ((includes.size() != 0) && (excludes.size() != 0)) {
          if (_log.isDebugEnabled()) {
            _log.debug("Check includes and excludes");
          }
          available=companyLimit.isIncluded(companyId);
          if (available) {
            available=!companyLimit.isExcluded(companyId);
          }
        }
 else         if ((includes.size() == 0) && (excludes.size() != 0)) {
          if (_log.isDebugEnabled()) {
            _log.debug("Check excludes");
          }
          available=!companyLimit.isExcluded(companyId);
        }
 else         if ((includes.size() != 0) && (excludes.size() == 0)) {
          if (_log.isDebugEnabled()) {
            _log.debug("Check includes");
          }
          available=companyLimit.isIncluded(companyId);
        }
 else {
          if (_log.isDebugEnabled()) {
            _log.debug("No includes or excludes set");
          }
          available=true;
        }
      }
      if (_log.isDebugEnabled()) {
        _log.debug("Theme " + themeId + " is "+ (!available ? "NOT " : "")+ "available for "+ companyId);
      }
      if (available) {
        themes.put(themeId,theme);
      }
    }
    _themesPool.put(companyId,themes);
  }
  return themes;
}
