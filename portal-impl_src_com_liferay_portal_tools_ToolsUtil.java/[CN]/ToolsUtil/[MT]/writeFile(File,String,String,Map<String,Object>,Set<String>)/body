{
  String packagePath=getPackagePath(file);
  String className=file.getName();
  className=className.substring(0,className.length() - 5);
  ImportsFormatter importsFormatter=new JavaImportsFormatter();
  content=importsFormatter.format(content,packagePath,className);
  File tempFile=new File(_TMP_DIR,"ServiceBuilder.temp");
  _write(tempFile,content);
  StringBuffer sb=new StringBuffer();
  Jalopy jalopy=new Jalopy();
  jalopy.setFileFormat(FileFormat.UNIX);
  jalopy.setInput(tempFile);
  jalopy.setOutput(sb);
  File jalopyXmlFile=new File("tools/jalopy.xml");
  if (!jalopyXmlFile.exists()) {
    jalopyXmlFile=new File("../tools/jalopy.xml");
  }
  if (!jalopyXmlFile.exists()) {
    jalopyXmlFile=new File("misc/jalopy.xml");
  }
  if (!jalopyXmlFile.exists()) {
    jalopyXmlFile=new File("../misc/jalopy.xml");
  }
  if (!jalopyXmlFile.exists()) {
    jalopyXmlFile=new File("../../misc/jalopy.xml");
  }
  if (jalopyXmlFile.exists()) {
    Jalopy.setConvention(jalopyXmlFile);
  }
 else {
    URL url=_readJalopyXmlFromClassLoader();
    Jalopy.setConvention(url);
  }
  if (jalopySettings == null) {
    jalopySettings=new HashMap<>();
  }
  Environment env=Environment.getInstance();
  author=GetterUtil.getString((String)jalopySettings.get("author"),author);
  env.set("author",author);
  boolean failOnFormatError=MapUtil.getBoolean(jalopySettings,"failOnFormatError");
  env.set("fileName",file.getName());
  Convention convention=Convention.getInstance();
  String classMask="/**\n * @author $author$\n*/";
  convention.put(ConventionKeys.COMMENT_JAVADOC_TEMPLATE_CLASS,env.interpolate(classMask));
  convention.put(ConventionKeys.COMMENT_JAVADOC_TEMPLATE_INTERFACE,env.interpolate(classMask));
  boolean formatSuccess=jalopy.format();
  String newContent=sb.toString();
  newContent=newContent.replaceFirst("(?m)^[ \t]*((?:package|import) .*;)\\s*^[ \t]*/\\*\\*","$1\n\n/**");
  writeFileRaw(file,newContent,modifiedFileNames);
  tempFile.deleteOnExit();
  if (failOnFormatError && !formatSuccess) {
    throw new IOException("Unable to beautify " + file);
  }
}
