{
  Document document=_getContentDocument(fileName);
  Element rootElement=document.getRootElement();
  Element authorElement=null;
  Element namespaceElement=null;
  Map<String,Element> entityElements=new TreeMap<>();
  Map<String,Element> exceptionElements=new TreeMap<>();
  List<Element> elements=rootElement.elements();
  for (  Element element : elements) {
    String elementName=element.getName();
    if (elementName.equals("author")) {
      element.detach();
      if (authorElement != null) {
        throw new IllegalArgumentException("There can only be one author element");
      }
      authorElement=element;
    }
 else     if (elementName.equals("namespace")) {
      element.detach();
      if (namespaceElement != null) {
        throw new IllegalArgumentException("There can only be one namespace element");
      }
      namespaceElement=element;
    }
 else     if (elementName.equals("entity")) {
      element.detach();
      String name=element.attributeValue("name");
      entityElements.put(StringUtil.toLowerCase(name),element);
    }
 else     if (elementName.equals("exceptions")) {
      element.detach();
      List<Element> exceptionElementsList=element.elements("exception");
      for (      Element exceptionElement : exceptionElementsList) {
        exceptionElement.detach();
        exceptionElements.put(exceptionElement.getText(),exceptionElement);
      }
    }
  }
  if (authorElement != null) {
    rootElement.add(authorElement);
  }
  if (namespaceElement == null) {
    throw new IllegalArgumentException("The namespace element is required");
  }
 else {
    rootElement.add(namespaceElement);
  }
  _addElements(rootElement,entityElements);
  if (!exceptionElements.isEmpty()) {
    Element exceptionsElement=rootElement.addElement("exceptions");
    _addElements(exceptionsElement,exceptionElements);
  }
  return document.asXML();
}
