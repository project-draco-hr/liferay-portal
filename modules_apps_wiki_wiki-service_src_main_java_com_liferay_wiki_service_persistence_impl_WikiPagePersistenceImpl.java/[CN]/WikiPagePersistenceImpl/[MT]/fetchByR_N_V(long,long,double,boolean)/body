{
  Object[] finderArgs=new Object[]{resourcePrimKey,nodeId,version};
  Object result=null;
  if (retrieveFromCache) {
    result=finderCache.getResult(FINDER_PATH_FETCH_BY_R_N_V,finderArgs,this);
  }
  if (result instanceof WikiPage) {
    WikiPage wikiPage=(WikiPage)result;
    if ((resourcePrimKey != wikiPage.getResourcePrimKey()) || (nodeId != wikiPage.getNodeId()) || (version != wikiPage.getVersion())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(5);
    query.append(_SQL_SELECT_WIKIPAGE_WHERE);
    query.append(_FINDER_COLUMN_R_N_V_RESOURCEPRIMKEY_2);
    query.append(_FINDER_COLUMN_R_N_V_NODEID_2);
    query.append(_FINDER_COLUMN_R_N_V_VERSION_2);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(resourcePrimKey);
      qPos.add(nodeId);
      qPos.add(version);
      List<WikiPage> list=q.list();
      if (list.isEmpty()) {
        finderCache.putResult(FINDER_PATH_FETCH_BY_R_N_V,finderArgs,list);
      }
 else {
        WikiPage wikiPage=list.get(0);
        result=wikiPage;
        cacheResult(wikiPage);
        if ((wikiPage.getResourcePrimKey() != resourcePrimKey) || (wikiPage.getNodeId() != nodeId) || (wikiPage.getVersion() != version)) {
          finderCache.putResult(FINDER_PATH_FETCH_BY_R_N_V,finderArgs,wikiPage);
        }
      }
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_FETCH_BY_R_N_V,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (WikiPage)result;
  }
}
