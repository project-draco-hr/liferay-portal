{
  String cmd=ParamUtil.getString(req,Constants.CMD);
  if (!cmd.equals(Constants.UPDATE)) {
    return;
  }
  String rootFolderId=ParamUtil.getString(req,"rootFolderId");
  boolean showBreadcrumbs=ParamUtil.getBoolean(req,"showBreadcrumbs");
  boolean showFoldersSearch=ParamUtil.getBoolean(req,"showFoldersSearch");
  boolean showSubfolders=ParamUtil.getBoolean(req,"showSubfolders");
  int foldersPerPage=ParamUtil.getInteger(req,"foldersPerPage");
  String folderColumns=ParamUtil.getString(req,"folderColumns");
  boolean showFileEntriesSearch=ParamUtil.getBoolean(req,"showFileEntriesSearch");
  int fileEntriesPerPage=ParamUtil.getInteger(req,"fileEntriesPerPage");
  String fileEntryColumns=ParamUtil.getString(req,"fileEntryColumns");
  String portletResource=ParamUtil.getString(req,"portletResource");
  PortletPreferences prefs=PortletPreferencesFactory.getPortletSetup(req,portletResource,true,true);
  if (Validator.isNull(rootFolderId)) {
    SessionErrors.add(req,"rootFolderIdInvalid");
    return;
  }
 else   if (!rootFolderId.equals(DLFolderImpl.DEFAULT_PARENT_FOLDER_ID)) {
    try {
      DLFolderLocalServiceUtil.getFolder(rootFolderId);
    }
 catch (    NoSuchFolderException e) {
      SessionErrors.add(req,"rootFolderIdInvalid");
    }
  }
  prefs.setValue("rootFolderId",rootFolderId);
  prefs.setValue("showBreadcrumbs",String.valueOf(showBreadcrumbs));
  prefs.setValue("showFoldersSearch",String.valueOf(showFoldersSearch));
  prefs.setValue("showSubfolders",String.valueOf(showSubfolders));
  prefs.setValue("foldersPerPage",String.valueOf(foldersPerPage));
  prefs.setValue("folderColumns",folderColumns);
  prefs.setValue("showFileEntriesSearch",String.valueOf(showFileEntriesSearch));
  prefs.setValue("fileEntriesPerPage",String.valueOf(fileEntriesPerPage));
  prefs.setValue("fileEntryColumns",fileEntryColumns);
  if (SessionErrors.isEmpty(req)) {
    prefs.store();
    SessionMessages.add(req,config.getPortletName() + ".doConfigure");
  }
}
