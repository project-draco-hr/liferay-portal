{
  FabricWorker<Serializable> fabricWorker=new LocalFabricWorker<Serializable>(new EmbeddedProcessChannel<Serializable>(new DefaultNoticeableFuture<Serializable>()){
    @Override public <V extends Serializable>NoticeableFuture<V> write(    ProcessCallable<V> processCallable){
      return new DefaultNoticeableFuture<V>();
    }
  }
);
  NettyChannelAttributes.putFabricWorker(_embeddedChannel,0,fabricWorker);
  NettyFabricWorkerBridgeRPCCallable<Serializable> nettyFabricWorkerBridgeRPCCallable=new NettyFabricWorkerBridgeRPCCallable<Serializable>(0,new ProcessCallable<Serializable>(){
    @Override public Serializable call(){
      return null;
    }
  }
,0);
  NoticeableFuture<Serializable> noticeableFuture=nettyFabricWorkerBridgeRPCCallable.call();
  Assert.assertTrue(noticeableFuture.isCancelled());
}
