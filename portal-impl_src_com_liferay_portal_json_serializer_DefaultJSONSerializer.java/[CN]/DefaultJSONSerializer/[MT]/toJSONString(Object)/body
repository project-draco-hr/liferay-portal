{
  JSONObject jsonObject=JSONFactoryUtil.createJSONObject();
  ClassDescriptor cd=ClassIntrospector.lookup(object.getClass());
  Method[] getters=cd.getAllBeanGetters();
  for (  Method getter : getters) {
    String propertyName=getter.getName();
    if (propertyName.startsWith("is")) {
      propertyName=propertyName.substring(2);
    }
 else {
      propertyName=propertyName.substring(3);
    }
    propertyName=jodd.util.StringUtil.uncapitalize(propertyName);
    Class propertyType=getter.getReturnType();
    if (propertyType.equals(boolean.class) || propertyType.equals(Boolean.class)) {
      Boolean value=(Boolean)_invokeGetter(getter,object);
      if (value == null) {
        jsonObject.put(propertyName,"null");
      }
 else {
        jsonObject.put(propertyName,value.booleanValue());
      }
      continue;
    }
    if (propertyType.equals(long.class) || propertyType.equals(Long.class)) {
      Long value=(Long)_invokeGetter(getter,object);
      if (value == null) {
        jsonObject.put(propertyName,"null");
      }
 else {
        jsonObject.put(propertyName,value.longValue());
      }
      continue;
    }
    if (propertyType.equals(int.class) || propertyType.equals(Integer.class)) {
      Integer value=(Integer)_invokeGetter(getter,object);
      if (value == null) {
        jsonObject.put(propertyName,"null");
      }
 else {
        jsonObject.put(propertyName,value.intValue());
      }
      continue;
    }
    if (propertyType.equals(float.class) || propertyType.equals(Float.class)) {
      Float value=(Float)_invokeGetter(getter,object);
      if (value == null) {
        jsonObject.put(propertyName,"null");
      }
 else {
        jsonObject.put(propertyName,value.floatValue());
      }
      continue;
    }
    if (propertyType.equals(double.class) || propertyType.equals(Double.class)) {
      Double value=(Double)_invokeGetter(getter,object);
      if (value == null) {
        jsonObject.put(propertyName,"null");
      }
 else {
        jsonObject.put(propertyName,value.doubleValue());
      }
      continue;
    }
    if (propertyType.equals(String.class)) {
      String value=(String)_invokeGetter(getter,object);
      jsonObject.put(propertyName,value);
      continue;
    }
    if (ReflectUtil.isSubclass(propertyType,Date.class)) {
      Date value=(Date)_invokeGetter(getter,object);
      if (value == null) {
        jsonObject.put(propertyName,"null");
      }
 else {
        jsonObject.put(propertyName,String.valueOf(value.getTime()));
      }
      continue;
    }
  }
  return jsonObject.toString();
}
