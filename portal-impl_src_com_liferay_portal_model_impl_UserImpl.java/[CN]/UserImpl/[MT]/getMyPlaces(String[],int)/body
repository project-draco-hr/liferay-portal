{
  if (isDefaultUser()) {
    return Collections.emptyList();
  }
  ThreadLocalCache<List<Group>> threadLocalCache=ThreadLocalCacheManager.getThreadLocalCache(Lifecycle.REQUEST,_GET_MY_PLACES_CACHE_NAME);
  String key=StringUtil.toHexString(max);
  if ((classNames != null) && (classNames.length > 0)) {
    key=StringUtil.merge(classNames).concat(StringPool.POUND).concat(key);
  }
  List<Group> myPlaces=threadLocalCache.get(key);
  if (myPlaces != null) {
    return myPlaces;
  }
  myPlaces=new UniqueList<Group>();
  int start=QueryUtil.ALL_POS;
  int end=QueryUtil.ALL_POS;
  if (max != QueryUtil.ALL_POS) {
    start=0;
    end=max;
  }
  if ((classNames == null) || ArrayUtil.contains(classNames,Group.class.getName())) {
    LinkedHashMap<String,Object> groupParams=new LinkedHashMap<String,Object>();
    groupParams.put("usersGroups",new Long(getUserId()));
    myPlaces.addAll(GroupLocalServiceUtil.search(getCompanyId(),null,null,groupParams,start,end));
  }
  if ((classNames == null) || ArrayUtil.contains(classNames,Organization.class.getName())) {
    LinkedHashMap<String,Object> organizationParams=new LinkedHashMap<String,Object>();
    organizationParams.put("usersOrgs",new Long(getUserId()));
    List<Organization> userOrgs=OrganizationLocalServiceUtil.search(getCompanyId(),OrganizationConstants.ANY_PARENT_ORGANIZATION_ID,null,null,null,null,organizationParams,start,end);
    for (    Organization organization : userOrgs) {
      myPlaces.add(0,organization.getGroup());
      if (!PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {
        for (        Organization ancestorOrganization : organization.getAncestors()) {
          myPlaces.add(0,ancestorOrganization.getGroup());
        }
      }
    }
  }
  if ((classNames == null) || ArrayUtil.contains(classNames,User.class.getName())) {
    if (PropsValues.LAYOUT_USER_PRIVATE_LAYOUTS_ENABLED || PropsValues.LAYOUT_USER_PUBLIC_LAYOUTS_ENABLED) {
      Group userGroup=getGroup();
      myPlaces.add(0,userGroup);
    }
  }
  if ((max != QueryUtil.ALL_POS) && (myPlaces.size() > max)) {
    myPlaces=ListUtil.subList(myPlaces,start,end);
  }
  Group controlPanelGroup=GroupLocalServiceUtil.getGroup(getCompanyId(),GroupConstants.CONTROL_PANEL);
  myPlaces.add(controlPanelGroup);
  myPlaces=Collections.unmodifiableList(myPlaces);
  threadLocalCache.put(key,myPlaces);
  return myPlaces;
}
