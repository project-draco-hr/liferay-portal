{
  List<Group> myPlaces=new UniqueList<Group>();
  try {
    if (isDefaultUser()) {
      return myPlaces;
    }
    int start=QueryUtil.ALL_POS;
    int end=QueryUtil.ALL_POS;
    if (max != QueryUtil.ALL_POS) {
      start=0;
      end=max;
    }
    LinkedHashMap<String,Object> groupParams=new LinkedHashMap<String,Object>();
    groupParams.put("usersGroups",new Long(getUserId()));
    myPlaces.addAll(GroupLocalServiceUtil.search(getCompanyId(),null,null,groupParams,start,end));
    List<Organization> userOrgs=OrganizationLocalServiceUtil.getUserOrganizations(getUserId(),start,end);
    for (    Organization organization : userOrgs) {
      myPlaces.add(0,organization.getGroup());
      if (!PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) {
        for (        Organization ancestorOrganization : organization.getAncestors()) {
          myPlaces.add(0,ancestorOrganization.getGroup());
        }
      }
    }
    if (PropsValues.LAYOUT_USER_PRIVATE_LAYOUTS_ENABLED || PropsValues.LAYOUT_USER_PUBLIC_LAYOUTS_ENABLED) {
      Group userGroup=getGroup();
      myPlaces.add(0,userGroup);
    }
    if ((max != QueryUtil.ALL_POS) && (myPlaces.size() > max)) {
      myPlaces=ListUtil.subList(myPlaces,start,end);
    }
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e,e);
    }
  }
  return myPlaces;
}
