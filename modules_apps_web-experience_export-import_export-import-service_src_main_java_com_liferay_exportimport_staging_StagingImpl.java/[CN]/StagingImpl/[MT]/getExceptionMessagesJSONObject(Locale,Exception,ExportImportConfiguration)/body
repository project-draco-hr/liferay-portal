{
  JSONObject exceptionMessagesJSONObject=JSONFactoryUtil.createJSONObject();
  String errorMessage=StringPool.BLANK;
  JSONArray errorMessagesJSONArray=null;
  int errorType=0;
  JSONArray warningMessagesJSONArray=null;
  if (e instanceof DuplicateFileEntryException) {
    errorMessage=LanguageUtil.get(locale,"please-enter-a-unique-document-name");
    errorType=ServletResponseConstants.SC_DUPLICATE_FILE_EXCEPTION;
  }
 else   if (e instanceof FileExtensionException) {
    errorMessage=LanguageUtil.format(locale,"document-names-must-end-with-one-of-the-following-extensions",".lar",false);
    errorType=ServletResponseConstants.SC_FILE_EXTENSION_EXCEPTION;
  }
 else   if (e instanceof FileNameException) {
    errorMessage=LanguageUtil.get(locale,"please-enter-a-file-with-a-valid-file-name");
    errorType=ServletResponseConstants.SC_FILE_NAME_EXCEPTION;
  }
 else   if (e instanceof FileSizeException || e instanceof LARFileSizeException) {
    long fileMaxSize=PropsValues.DL_FILE_MAX_SIZE;
    try {
      fileMaxSize=PrefsPropsUtil.getLong(PropsKeys.DL_FILE_MAX_SIZE);
      if (fileMaxSize == 0) {
        fileMaxSize=PrefsPropsUtil.getLong(PropsKeys.UPLOAD_SERVLET_REQUEST_IMPL_MAX_SIZE);
      }
    }
 catch (    Exception e1) {
    }
    if ((exportImportConfiguration != null) && ((exportImportConfiguration.getType() == ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_LOCAL) || (exportImportConfiguration.getType() == ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_REMOTE) || (exportImportConfiguration.getType() == ExportImportConfigurationConstants.TYPE_PUBLISH_PORTLET))) {
      errorMessage=LanguageUtil.get(locale,"file-size-limit-exceeded.-please-ensure-that-the-file-" + "does-not-exceed-the-file-size-limit-in-both-the-" + "live-environment-and-the-staging-environment");
    }
 else {
      errorMessage=LanguageUtil.format(locale,"please-enter-a-file-with-a-valid-file-size-no-larger-" + "than-x",TextFormatter.formatStorageSize(fileMaxSize,locale),false);
    }
    errorType=ServletResponseConstants.SC_FILE_SIZE_EXCEPTION;
  }
 else   if (e instanceof LARTypeException) {
    LARTypeException lte=(LARTypeException)e;
    errorMessage=LanguageUtil.format(locale,"please-import-a-lar-file-of-the-correct-type-x",lte.getMessage());
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
  }
 else   if (e instanceof LARFileException) {
    errorMessage=LanguageUtil.get(locale,"please-specify-a-lar-file-to-import");
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
  }
 else   if (e instanceof LayoutPrototypeException) {
    LayoutPrototypeException lpe=(LayoutPrototypeException)e;
    StringBundler sb=new StringBundler(4);
    sb.append("the-lar-file-could-not-be-imported-because-it-");
    sb.append("requires-page-templates-or-site-templates-that-could-");
    sb.append("not-be-found.-please-import-the-following-templates-");
    sb.append("manually");
    errorMessage=LanguageUtil.get(locale,sb.toString());
    errorMessagesJSONArray=JSONFactoryUtil.createJSONArray();
    List<Tuple> missingLayoutPrototypes=lpe.getMissingLayoutPrototypes();
    for (    Tuple missingLayoutPrototype : missingLayoutPrototypes) {
      JSONObject errorMessageJSONObject=JSONFactoryUtil.createJSONObject();
      String layoutPrototypeUuid=(String)missingLayoutPrototype.getObject(1);
      errorMessageJSONObject.put("info",layoutPrototypeUuid);
      String layoutPrototypeName=(String)missingLayoutPrototype.getObject(2);
      errorMessageJSONObject.put("name",layoutPrototypeName);
      String layoutPrototypeClassName=(String)missingLayoutPrototype.getObject(0);
      errorMessageJSONObject.put("type",ResourceActionsUtil.getModelResource(locale,layoutPrototypeClassName));
      errorMessagesJSONArray.put(errorMessageJSONObject);
    }
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
  }
 else   if (e instanceof LocaleException) {
    LocaleException le=(LocaleException)e;
    errorMessage=LanguageUtil.format(locale,"the-available-languages-in-the-lar-file-x-do-not-match-the-" + "site's-available-languages-x",new String[]{StringUtil.merge(le.getSourceAvailableLocales(),StringPool.COMMA_AND_SPACE),StringUtil.merge(le.getTargetAvailableLocales(),StringPool.COMMA_AND_SPACE)},false);
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
  }
 else   if (e instanceof MissingReferenceException) {
    MissingReferenceException mre=(MissingReferenceException)e;
    if ((exportImportConfiguration != null) && ((exportImportConfiguration.getType() == ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_LOCAL) || (exportImportConfiguration.getType() == ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_REMOTE) || (exportImportConfiguration.getType() == ExportImportConfigurationConstants.TYPE_PUBLISH_PORTLET))) {
      errorMessage=LanguageUtil.get(locale,"there-are-missing-references-that-could-not-be-found-in-" + "the-live-environment-the-following-elements-are-" + "published-from-their-own-site");
    }
 else {
      errorMessage=LanguageUtil.get(locale,"there-are-missing-references-that-could-not-be-found-in-" + "the-current-site");
    }
    MissingReferences missingReferences=mre.getMissingReferences();
    errorMessagesJSONArray=getErrorMessagesJSONArray(locale,missingReferences.getDependencyMissingReferences());
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
    warningMessagesJSONArray=getWarningMessagesJSONArray(locale,missingReferences.getWeakMissingReferences());
  }
 else   if (e instanceof PortletDataException) {
    PortletDataException pde=(PortletDataException)e;
    StagedModel stagedModel=pde.getStagedModel();
    String referrerClassName=StringPool.BLANK;
    String referrerDisplayName=StringPool.BLANK;
    if (stagedModel != null) {
      StagedModelType stagedModelType=stagedModel.getStagedModelType();
      referrerClassName=stagedModelType.getClassName();
      referrerDisplayName=StagedModelDataHandlerUtil.getDisplayName(stagedModel);
    }
    if (pde.getType() == PortletDataException.INVALID_GROUP) {
      errorMessage=LanguageUtil.format(locale,"the-x-x-could-not-be-exported-because-it-is-not-in-the-" + "currently-exported-group",new String[]{ResourceActionsUtil.getModelResource(locale,referrerClassName),referrerDisplayName},false);
    }
 else     if (pde.getType() == PortletDataException.MISSING_DEPENDENCY) {
      errorMessage=LanguageUtil.format(locale,"the-x-x-has-missing-references-that-could-not-be-found-" + "during-the-export",new String[]{ResourceActionsUtil.getModelResource(locale,referrerClassName),referrerDisplayName},false);
    }
 else     if (pde.getType() == PortletDataException.STATUS_IN_TRASH) {
      errorMessage=LanguageUtil.format(locale,"the-x-x-could-not-be-exported-because-it-is-in-the-" + "recycle-bin",new String[]{ResourceActionsUtil.getModelResource(locale,referrerClassName),referrerDisplayName},false);
    }
 else     if (pde.getType() == PortletDataException.STATUS_UNAVAILABLE) {
      errorMessage=LanguageUtil.format(locale,"the-x-x-could-not-be-exported-because-its-workflow-" + "status-is-not-exportable",new String[]{ResourceActionsUtil.getModelResource(locale,referrerClassName),referrerDisplayName},false);
    }
 else {
      errorMessage=e.getLocalizedMessage();
    }
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
  }
 else   if (e instanceof PortletIdException) {
    errorMessage=LanguageUtil.get(locale,"please-import-a-lar-file-for-the-current-portlet");
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
  }
 else {
    errorMessage=e.getLocalizedMessage();
    errorType=ServletResponseConstants.SC_FILE_CUSTOM_EXCEPTION;
  }
  exceptionMessagesJSONObject.put("message",errorMessage);
  if ((errorMessagesJSONArray != null) && (errorMessagesJSONArray.length() > 0)) {
    exceptionMessagesJSONObject.put("messageListItems",errorMessagesJSONArray);
  }
  exceptionMessagesJSONObject.put("status",errorType);
  if ((warningMessagesJSONArray != null) && (warningMessagesJSONArray.length() > 0)) {
    exceptionMessagesJSONObject.put("warningMessages",warningMessagesJSONArray);
  }
  return exceptionMessagesJSONObject;
}
