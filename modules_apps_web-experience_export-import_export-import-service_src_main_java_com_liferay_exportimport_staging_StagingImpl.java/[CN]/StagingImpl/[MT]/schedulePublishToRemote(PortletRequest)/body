{
  long groupId=ParamUtil.getLong(portletRequest,"groupId");
  Group group=_groupLocalService.getGroup(groupId);
  UnicodeProperties groupTypeSettingsProperties=group.getTypeSettingsProperties();
  boolean privateLayout=false;
  Map<Long,Boolean> layoutIdMap=null;
  Map<String,String[]> parameterMap=null;
  String remoteAddress=null;
  int remotePort=0;
  String remotePathContext=null;
  boolean secureConnection=false;
  boolean remotePrivateLayout=false;
  long exportImportConfigurationId=ParamUtil.getLong(portletRequest,"exportImportConfigurationId");
  if (exportImportConfigurationId > 0) {
    ExportImportConfiguration exportImportConfiguration=_exportImportConfigurationLocalService.fetchExportImportConfiguration(exportImportConfigurationId);
    if (exportImportConfiguration != null) {
      Map<String,Serializable> settingsMap=exportImportConfiguration.getSettingsMap();
      privateLayout=MapUtil.getBoolean(settingsMap,"privateLayout");
      layoutIdMap=(Map<Long,Boolean>)settingsMap.get("layoutIdMap");
      parameterMap=(Map<String,String[]>)settingsMap.get("parameterMap");
      remoteAddress=MapUtil.getString(settingsMap,"remoteAddress");
      remotePort=MapUtil.getInteger(settingsMap,"remotePort");
      remotePathContext=MapUtil.getString(settingsMap,"remotePathContext");
      secureConnection=MapUtil.getBoolean(settingsMap,"secureConnection");
      remotePrivateLayout=MapUtil.getBoolean(settingsMap,"remotePrivateLayout");
    }
  }
  if (parameterMap == null) {
    privateLayout=getPrivateLayout(portletRequest);
    layoutIdMap=ExportImportHelperUtil.getLayoutIdMap(portletRequest);
    parameterMap=ExportImportConfigurationParameterMapFactory.buildParameterMap(portletRequest);
    remoteAddress=ParamUtil.getString(portletRequest,"remoteAddress",groupTypeSettingsProperties.getProperty("remoteAddress"));
    remotePort=ParamUtil.getInteger(portletRequest,"remotePort",GetterUtil.getInteger(groupTypeSettingsProperties.getProperty("remotePort")));
    remotePathContext=ParamUtil.getString(portletRequest,"remotePathContext",groupTypeSettingsProperties.getProperty("remotePathContext"));
    secureConnection=ParamUtil.getBoolean(portletRequest,"secureConnection",GetterUtil.getBoolean(groupTypeSettingsProperties.getProperty("secureConnection")));
    remotePrivateLayout=ParamUtil.getBoolean(portletRequest,"remotePrivateLayout");
  }
  remoteAddress=stripProtocolFromRemoteAddress(remoteAddress);
  long remoteGroupId=ParamUtil.getLong(portletRequest,"remoteGroupId",GetterUtil.getLong(groupTypeSettingsProperties.getProperty("remoteGroupId")));
  validateRemote(groupId,remoteAddress,remotePort,remotePathContext,secureConnection,remoteGroupId);
  String groupName=getSchedulerGroupName(DestinationNames.LAYOUTS_REMOTE_PUBLISHER,groupId);
  int recurrenceType=ParamUtil.getInteger(portletRequest,"recurrenceType");
  Calendar startCalendar=ExportImportDateUtil.getCalendar(portletRequest,"schedulerStartDate",true);
  String cronText=SchedulerEngineHelperUtil.getCronText(portletRequest,startCalendar,true,recurrenceType);
  Date schedulerEndDate=null;
  int endDateType=ParamUtil.getInteger(portletRequest,"endDateType");
  if (endDateType == 1) {
    Calendar endCalendar=ExportImportDateUtil.getCalendar(portletRequest,"schedulerEndDate",true);
    schedulerEndDate=endCalendar.getTime();
  }
  String name=ParamUtil.getString(portletRequest,"name");
  _layoutService.schedulePublishToRemote(groupId,privateLayout,layoutIdMap,parameterMap,remoteAddress,remotePort,remotePathContext,secureConnection,remoteGroupId,remotePrivateLayout,null,null,groupName,cronText,startCalendar.getTime(),schedulerEndDate,name);
}
