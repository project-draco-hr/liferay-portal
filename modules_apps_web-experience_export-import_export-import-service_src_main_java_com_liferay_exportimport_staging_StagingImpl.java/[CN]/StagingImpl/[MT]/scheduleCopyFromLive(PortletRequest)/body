{
  long stagingGroupId=ParamUtil.getLong(portletRequest,"stagingGroupId");
  Group stagingGroup=_groupLocalService.getGroup(stagingGroupId);
  long liveGroupId=stagingGroup.getLiveGroupId();
  Map<String,String[]> parameterMap=ExportImportConfigurationParameterMapFactory.buildParameterMap(portletRequest);
  long sourceGroupId=liveGroupId;
  long targetGroupId=stagingGroupId;
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  boolean privateLayout=getPrivateLayout(portletRequest);
  long[] layoutIds=ExportImportHelperUtil.getLayoutIds(portletRequest,targetGroupId);
  String name=ParamUtil.getString(portletRequest,"name");
  String groupName=getSchedulerGroupName(DestinationNames.LAYOUTS_LOCAL_PUBLISHER,targetGroupId);
  int recurrenceType=ParamUtil.getInteger(portletRequest,"recurrenceType");
  Calendar startCalendar=ExportImportDateUtil.getCalendar(portletRequest,"schedulerStartDate",true);
  String cronText=SchedulerEngineHelperUtil.getCronText(portletRequest,startCalendar,true,recurrenceType);
  Date schedulerEndDate=null;
  int endDateType=ParamUtil.getInteger(portletRequest,"endDateType");
  if (endDateType == 1) {
    Calendar endCalendar=ExportImportDateUtil.getCalendar(portletRequest,"schedulerEndDate",true);
    schedulerEndDate=endCalendar.getTime();
  }
  _layoutService.schedulePublishToLive(sourceGroupId,targetGroupId,privateLayout,layoutIds,parameterMap,groupName,cronText,startCalendar.getTime(),schedulerEndDate,name);
}
