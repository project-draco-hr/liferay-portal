{
  ServletContext servletContext=ServletContextPool.get(PortalUtil.getPathContext());
  if (servletContext == null) {
    servletContext=new AutoDeployMockServletContext(getResourceBasePath(),new FileSystemResourceLoader());
    ServletContextPool.put(PortalUtil.getPathContext(),servletContext);
  }
  HotDeployUtil.reset();
  HotDeployUtil.registerListener(new HookHotDeployListener());
  HotDeployUtil.setCapturePrematureEvents(false);
  PortalLifecycleUtil.flushInits();
  Class<?> clazz=testContext.getClazz();
  ClassLoader classLoader=clazz.getClassLoader();
  MockServletContext mockServletContext=new MockServletContext(new PACLResourceLoader(classLoader));
  mockServletContext.setServletContextName("a-test-hook");
  HotDeployEvent hotDeployEvent=new HotDeployEvent(mockServletContext,classLoader);
  HotDeployUtil.fireDeployEvent(hotDeployEvent);
  PortletContextLoaderListener portletContextLoaderListener=new PortletContextLoaderListener();
  try {
    PortletClassLoaderUtil.setClassLoader(hotDeployEvent.getContextClassLoader());
    PortletClassLoaderUtil.setServletContextName(hotDeployEvent.getServletContextName());
    portletContextLoaderListener.contextInitialized(new ServletContextEvent(mockServletContext));
  }
  finally {
    PortletClassLoaderUtil.setClassLoader(null);
    PortletClassLoaderUtil.setServletContextName(null);
  }
  _hotDeployEvents.put(clazz,hotDeployEvent);
}
