{
  UploadPortletRequest uploadPortletRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  String cmd=ParamUtil.getString(uploadPortletRequest,Constants.CMD);
  long groupId=ParamUtil.getLong(uploadPortletRequest,"groupId");
  long folderId=ParamUtil.getLong(uploadPortletRequest,"folderId");
  long classNameId=ParamUtil.getLong(uploadPortletRequest,"classNameId");
  long classPK=ParamUtil.getLong(uploadPortletRequest,"classPK");
  String articleId=ParamUtil.getString(uploadPortletRequest,"articleId");
  boolean autoArticleId=ParamUtil.getBoolean(uploadPortletRequest,"autoArticleId");
  double version=ParamUtil.getDouble(uploadPortletRequest,"version");
  boolean localized=ParamUtil.getBoolean(uploadPortletRequest,"localized");
  String defaultLanguageId=ParamUtil.getString(uploadPortletRequest,"defaultLanguageId");
  Locale defaultLocale=LocaleUtil.fromLanguageId(defaultLanguageId);
  String toLanguageId=ParamUtil.getString(uploadPortletRequest,"toLanguageId");
  Locale toLocale=null;
  String title=StringPool.BLANK;
  String description=StringPool.BLANK;
  if (Validator.isNull(toLanguageId)) {
    title=ParamUtil.getString(uploadPortletRequest,"title_" + defaultLanguageId);
    description=ParamUtil.getString(uploadPortletRequest,"description_" + defaultLanguageId);
  }
 else {
    toLocale=LocaleUtil.fromLanguageId(toLanguageId);
    title=ParamUtil.getString(uploadPortletRequest,"title_" + toLanguageId);
    description=ParamUtil.getString(uploadPortletRequest,"description_" + toLanguageId);
  }
  String content=ParamUtil.getString(uploadPortletRequest,"articleContent");
  Map<String,byte[]> images=new HashMap<String,byte[]>();
  ServiceContext serviceContext=ServiceContextFactory.getInstance(JournalArticle.class.getName(),uploadPortletRequest);
  String structureId=ParamUtil.getString(uploadPortletRequest,"structureId");
  DDMStructure ddmStructure=null;
  if (Validator.isNotNull(structureId)) {
    ddmStructure=DDMStructureLocalServiceUtil.getStructure(PortalUtil.getSiteGroupId(groupId),PortalUtil.getClassNameId(JournalArticle.class),structureId,true);
    String languageId=toLanguageId;
    if (Validator.isNull(languageId)) {
      languageId=defaultLanguageId;
    }
    Object[] contentAndImages=ActionUtil.getContentAndImages(ddmStructure,LocaleUtil.fromLanguageId(languageId),serviceContext);
    content=(String)contentAndImages[0];
    images=(HashMap<String,byte[]>)contentAndImages[1];
  }
  Boolean fileItemThresholdSizeExceeded=(Boolean)uploadPortletRequest.getAttribute(WebKeys.FILE_ITEM_THRESHOLD_SIZE_EXCEEDED);
  if ((fileItemThresholdSizeExceeded != null) && fileItemThresholdSizeExceeded.booleanValue()) {
    throw new ArticleContentSizeException();
  }
  String type=ParamUtil.getString(uploadPortletRequest,"type");
  String templateId=ParamUtil.getString(uploadPortletRequest,"templateId");
  String layoutUuid=ParamUtil.getString(uploadPortletRequest,"layoutUuid");
  Layout targetLayout=LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(layoutUuid,groupId,false);
  if (targetLayout == null) {
    targetLayout=LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(layoutUuid,groupId,true);
  }
  if (targetLayout == null) {
    layoutUuid=null;
  }
  int displayDateMonth=ParamUtil.getInteger(uploadPortletRequest,"displayDateMonth");
  int displayDateDay=ParamUtil.getInteger(uploadPortletRequest,"displayDateDay");
  int displayDateYear=ParamUtil.getInteger(uploadPortletRequest,"displayDateYear");
  int displayDateHour=ParamUtil.getInteger(uploadPortletRequest,"displayDateHour");
  int displayDateMinute=ParamUtil.getInteger(uploadPortletRequest,"displayDateMinute");
  int displayDateAmPm=ParamUtil.getInteger(uploadPortletRequest,"displayDateAmPm");
  if (displayDateAmPm == Calendar.PM) {
    displayDateHour+=12;
  }
  int expirationDateMonth=ParamUtil.getInteger(uploadPortletRequest,"expirationDateMonth");
  int expirationDateDay=ParamUtil.getInteger(uploadPortletRequest,"expirationDateDay");
  int expirationDateYear=ParamUtil.getInteger(uploadPortletRequest,"expirationDateYear");
  int expirationDateHour=ParamUtil.getInteger(uploadPortletRequest,"expirationDateHour");
  int expirationDateMinute=ParamUtil.getInteger(uploadPortletRequest,"expirationDateMinute");
  int expirationDateAmPm=ParamUtil.getInteger(uploadPortletRequest,"expirationDateAmPm");
  boolean neverExpire=ParamUtil.getBoolean(uploadPortletRequest,"neverExpire");
  if (expirationDateAmPm == Calendar.PM) {
    expirationDateHour+=12;
  }
  int reviewDateMonth=ParamUtil.getInteger(uploadPortletRequest,"reviewDateMonth");
  int reviewDateDay=ParamUtil.getInteger(uploadPortletRequest,"reviewDateDay");
  int reviewDateYear=ParamUtil.getInteger(uploadPortletRequest,"reviewDateYear");
  int reviewDateHour=ParamUtil.getInteger(uploadPortletRequest,"reviewDateHour");
  int reviewDateMinute=ParamUtil.getInteger(uploadPortletRequest,"reviewDateMinute");
  int reviewDateAmPm=ParamUtil.getInteger(uploadPortletRequest,"reviewDateAmPm");
  boolean neverReview=ParamUtil.getBoolean(uploadPortletRequest,"neverReview");
  if (reviewDateAmPm == Calendar.PM) {
    reviewDateHour+=12;
  }
  boolean indexable=ParamUtil.getBoolean(uploadPortletRequest,"indexable");
  boolean smallImage=ParamUtil.getBoolean(uploadPortletRequest,"smallImage");
  String smallImageURL=ParamUtil.getString(uploadPortletRequest,"smallImageURL");
  File smallFile=uploadPortletRequest.getFile("smallFile");
  String articleURL=ParamUtil.getString(uploadPortletRequest,"articleURL");
  serviceContext.setAttribute("defaultLanguageId",defaultLanguageId);
  JournalArticle article=null;
  String oldUrlTitle=StringPool.BLANK;
  if (cmd.equals(Constants.ADD)) {
    Map<Locale,String> titleMap=new HashMap<Locale,String>();
    titleMap.put(defaultLocale,title);
    Map<Locale,String> descriptionMap=new HashMap<Locale,String>();
    descriptionMap.put(defaultLocale,description);
    if (Validator.isNull(structureId)) {
      content=LocalizationUtil.updateLocalization(StringPool.BLANK,"static-content",content,defaultLanguageId,defaultLanguageId,true,localized);
    }
    article=JournalArticleServiceUtil.addArticle(groupId,folderId,classNameId,classPK,articleId,autoArticleId,titleMap,descriptionMap,content,type,structureId,templateId,layoutUuid,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,indexable,smallImage,smallImageURL,smallFile,images,articleURL,serviceContext);
    AssetPublisherUtil.addAndStoreSelection(actionRequest,JournalArticle.class.getName(),article.getResourcePrimKey(),-1);
  }
 else {
    JournalArticle curArticle=JournalArticleServiceUtil.getArticle(groupId,articleId,version);
    if (Validator.isNull(structureId)) {
      if (!curArticle.isTemplateDriven()) {
        String curContent=StringPool.BLANK;
        curContent=curArticle.getContent();
        if (cmd.equals(Constants.TRANSLATE)) {
          content=LocalizationUtil.updateLocalization(curContent,"static-content",content,toLanguageId,defaultLanguageId,true,true);
        }
 else {
          content=LocalizationUtil.updateLocalization(curContent,"static-content",content,defaultLanguageId,defaultLanguageId,true,localized);
        }
      }
    }
 else {
      if (curArticle.isTemplateDriven()) {
        Fields newFields=DDMUtil.getFields(ddmStructure.getStructureId(),serviceContext);
        Fields existingFields=JournalConverterUtil.getDDMFields(ddmStructure,curArticle.getContent());
        Fields mergedFields=DDMUtil.mergeFields(newFields,existingFields);
        content=JournalConverterUtil.getContent(ddmStructure,mergedFields);
      }
    }
    article=JournalArticleServiceUtil.getArticle(groupId,articleId,version);
    Map<Locale,String> titleMap=article.getTitleMap();
    Map<Locale,String> descriptionMap=article.getDescriptionMap();
    String tempOldUrlTitle=article.getUrlTitle();
    if (cmd.equals(Constants.PREVIEW) || cmd.equals(Constants.UPDATE)) {
      titleMap.put(defaultLocale,title);
      descriptionMap.put(defaultLocale,description);
      article=JournalArticleServiceUtil.updateArticle(groupId,folderId,articleId,version,titleMap,descriptionMap,content,type,structureId,templateId,layoutUuid,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,indexable,smallImage,smallImageURL,smallFile,images,articleURL,serviceContext);
    }
 else     if (cmd.equals(Constants.TRANSLATE)) {
      article=JournalArticleServiceUtil.updateArticleTranslation(groupId,articleId,version,toLocale,title,description,content,images,serviceContext);
    }
    if (!tempOldUrlTitle.equals(article.getUrlTitle())) {
      oldUrlTitle=tempOldUrlTitle;
    }
  }
  JournalUtil.addRecentArticle(actionRequest,article);
  PortletPreferences portletPreferences=getStrictPortletSetup(actionRequest);
  if (portletPreferences != null) {
    portletPreferences.setValue("groupId",String.valueOf(article.getGroupId()));
    portletPreferences.setValue("articleId",article.getArticleId());
    portletPreferences.store();
    String portletResource=ParamUtil.getString(actionRequest,"portletResource");
    updateContentSearch(actionRequest,portletResource,article.getArticleId());
  }
  return new Object[]{article,oldUrlTitle};
}
