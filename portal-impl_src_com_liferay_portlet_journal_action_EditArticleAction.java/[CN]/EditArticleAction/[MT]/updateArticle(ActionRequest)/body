{
  UploadPortletRequest uploadRequest=PortalUtil.getUploadPortletRequest(actionRequest);
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String cmd=ParamUtil.getString(uploadRequest,Constants.CMD);
  long groupId=ParamUtil.getLong(uploadRequest,"groupId");
  String articleId=ParamUtil.getString(uploadRequest,"articleId");
  boolean autoArticleId=ParamUtil.getBoolean(uploadRequest,"autoArticleId");
  double version=ParamUtil.getDouble(uploadRequest,"version");
  String title=ParamUtil.getString(uploadRequest,"title");
  String description=ParamUtil.getString(uploadRequest,"description");
  String content=ParamUtil.getString(uploadRequest,"content");
  String type=ParamUtil.getString(uploadRequest,"type");
  String structureId=ParamUtil.getString(uploadRequest,"structureId");
  String templateId=ParamUtil.getString(uploadRequest,"templateId");
  String lastLanguageId=ParamUtil.getString(uploadRequest,"lastLanguageId");
  String defaultLanguageId=ParamUtil.getString(uploadRequest,"defaultLanguageId");
  int displayDateMonth=ParamUtil.getInteger(uploadRequest,"displayDateMonth");
  int displayDateDay=ParamUtil.getInteger(uploadRequest,"displayDateDay");
  int displayDateYear=ParamUtil.getInteger(uploadRequest,"displayDateYear");
  int displayDateHour=ParamUtil.getInteger(uploadRequest,"displayDateHour");
  int displayDateMinute=ParamUtil.getInteger(uploadRequest,"displayDateMinute");
  int displayDateAmPm=ParamUtil.getInteger(uploadRequest,"displayDateAmPm");
  if (displayDateAmPm == Calendar.PM) {
    displayDateHour+=12;
  }
  int expirationDateMonth=ParamUtil.getInteger(uploadRequest,"expirationDateMonth");
  int expirationDateDay=ParamUtil.getInteger(uploadRequest,"expirationDateDay");
  int expirationDateYear=ParamUtil.getInteger(uploadRequest,"expirationDateYear");
  int expirationDateHour=ParamUtil.getInteger(uploadRequest,"expirationDateHour");
  int expirationDateMinute=ParamUtil.getInteger(uploadRequest,"expirationDateMinute");
  int expirationDateAmPm=ParamUtil.getInteger(uploadRequest,"expirationDateAmPm");
  boolean neverExpire=ParamUtil.getBoolean(uploadRequest,"neverExpire");
  if (expirationDateAmPm == Calendar.PM) {
    expirationDateHour+=12;
  }
  int reviewDateMonth=ParamUtil.getInteger(uploadRequest,"reviewDateMonth");
  int reviewDateDay=ParamUtil.getInteger(uploadRequest,"reviewDateDay");
  int reviewDateYear=ParamUtil.getInteger(uploadRequest,"reviewDateYear");
  int reviewDateHour=ParamUtil.getInteger(uploadRequest,"reviewDateHour");
  int reviewDateMinute=ParamUtil.getInteger(uploadRequest,"reviewDateMinute");
  int reviewDateAmPm=ParamUtil.getInteger(uploadRequest,"reviewDateAmPm");
  boolean neverReview=ParamUtil.getBoolean(uploadRequest,"neverReview");
  if (reviewDateAmPm == Calendar.PM) {
    reviewDateHour+=12;
  }
  boolean indexable=ParamUtil.getBoolean(uploadRequest,"indexable");
  boolean smallImage=ParamUtil.getBoolean(uploadRequest,"smallImage");
  String smallImageURL=ParamUtil.getString(uploadRequest,"smallImageURL");
  File smallFile=uploadRequest.getFile("smallFile");
  Map<String,byte[]> images=getImages(uploadRequest);
  String articleURL=ParamUtil.getString(uploadRequest,"articleURL");
  ServiceContext serviceContext=ServiceContextFactory.getInstance(JournalArticle.class.getName(),actionRequest);
  JournalArticle article=null;
  String oldUrlTitle=StringPool.BLANK;
  if (cmd.equals(Constants.ADD)) {
    if (Validator.isNull(structureId)) {
      content=LocalizationUtil.updateLocalization(StringPool.BLANK,"static-content",content,lastLanguageId,defaultLanguageId,true);
    }
    article=JournalArticleServiceUtil.addArticle(groupId,articleId,autoArticleId,title,description,content,type,structureId,templateId,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,indexable,smallImage,smallImageURL,smallFile,images,articleURL,serviceContext);
    AssetPublisherUtil.addAndStoreSelection(actionRequest,JournalArticle.class.getName(),article.getResourcePrimKey(),-1);
  }
 else {
    JournalArticle curArticle=JournalArticleServiceUtil.getArticle(groupId,articleId,version);
    if (Validator.isNull(structureId)) {
      if (!curArticle.isTemplateDriven()) {
        String curContent=StringPool.BLANK;
        boolean localized=ParamUtil.getBoolean(uploadRequest,"localized");
        if (localized) {
          curContent=curArticle.getContent();
        }
        content=LocalizationUtil.updateLocalization(curContent,"static-content",content,lastLanguageId,defaultLanguageId,true);
      }
    }
 else {
      if (curArticle.isTemplateDriven()) {
        JournalStructure structure=null;
        try {
          structure=JournalStructureLocalServiceUtil.getStructure(groupId,structureId);
        }
 catch (        NoSuchStructureException nsse) {
          structure=JournalStructureLocalServiceUtil.getStructure(themeDisplay.getCompanyGroupId(),structureId);
        }
        content=JournalUtil.mergeArticleContent(curArticle.getContent(),content);
        content=JournalUtil.removeOldContent(content,structure.getMergedXsd());
      }
    }
    article=JournalArticleServiceUtil.getArticle(groupId,articleId,version);
    String tempOldUrlTitle=article.getUrlTitle();
    article=JournalArticleServiceUtil.updateArticle(groupId,articleId,version,title,description,content,type,structureId,templateId,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,neverExpire,reviewDateMonth,reviewDateDay,reviewDateYear,reviewDateHour,reviewDateMinute,neverReview,indexable,smallImage,smallImageURL,smallFile,images,articleURL,serviceContext);
    if (!tempOldUrlTitle.equals(article.getUrlTitle())) {
      oldUrlTitle=tempOldUrlTitle;
    }
  }
  JournalUtil.addRecentArticle(actionRequest,article);
  String portletResource=ParamUtil.getString(uploadRequest,"portletResource");
  if (Validator.isNotNull(portletResource)) {
    PortletPreferences preferences=PortletPreferencesFactoryUtil.getPortletSetup(uploadRequest,portletResource);
    preferences.setValue("groupId",String.valueOf(article.getGroupId()));
    preferences.setValue("articleId",article.getArticleId());
    preferences.store();
    updateContentSearch(actionRequest,portletResource,article.getArticleId());
  }
  return new Object[]{article,oldUrlTitle};
}
