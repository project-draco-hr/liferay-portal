{
  if (exception.isEmpty()) {
    return false;
  }
  int pos=exception.indexOf("$");
  if (pos > 0) {
    exception=exception.substring(0,pos);
  }
  boolean retryInProgress=ConnectionRetryUtil.retryInProgress(getSyncAccountId());
  if (!retryInProgress && _logger.isDebugEnabled()) {
    _logger.debug("Handling exception {}",exception);
  }
  if (exception.equals("com.liferay.portal.lock.exception.DuplicateLockException")) {
    SyncFile syncFile=getLocalSyncFile();
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_DUPLICATE_LOCK);
    SyncFileService.update(syncFile);
  }
 else   if (exception.equals("com.liferay.portal.kernel.upload.UploadException") || exception.contains("SizeLimitExceededException")) {
    SyncFile syncFile=getLocalSyncFile();
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_EXCEEDED_SIZE_LIMIT);
    SyncFileService.update(syncFile);
  }
 else   if (exception.equals("com.liferay.portal.security.auth.PrincipalException")) {
    SyncFileService.setStatuses(getLocalSyncFile(),SyncFile.STATE_ERROR,SyncFile.UI_EVENT_INVALID_PERMISSIONS);
  }
 else   if (exception.equals("com.liferay.portlet.documentlibrary.exception." + "FileExtensionException")) {
    SyncFile syncFile=getLocalSyncFile();
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_FILE_EXTENSION);
    SyncFileService.update(syncFile);
  }
 else   if (exception.equals("com.liferay.portlet.documentlibrary.exception." + "FileNameException") || exception.equals("com.liferay.portlet.documentlibrary.exception." + "FolderNameException")) {
    SyncFile syncFile=getLocalSyncFile();
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_FILE_NAME);
    SyncFileService.update(syncFile);
  }
 else   if (exception.equals("com.liferay.portlet.documentlibrary.exception." + "NoSuchFileEntryException") || exception.equals("com.liferay.portlet.documentlibrary.exception." + "NoSuchFolderException")) {
    SyncFile syncFile=getLocalSyncFile();
    Path filePath=Paths.get(syncFile.getFilePathName());
    if (Files.exists(filePath)) {
      Watcher watcher=WatcherRegistry.getWatcher(getSyncAccountId());
      List<String> deletedFilePathNames=watcher.getDeletedFilePathNames();
      deletedFilePathNames.add(syncFile.getFilePathName());
      FileUtil.deleteFile(filePath);
    }
    SyncFileService.deleteSyncFile(syncFile,false);
  }
 else   if (exception.equals("com.liferay.sync.SyncClientMinBuildException")) {
    retryServerConnection(SyncAccount.UI_EVENT_MIN_BUILD_REQUIREMENT_FAILED);
  }
 else   if (exception.equals("com.liferay.sync.SyncServicesUnavailableException")) {
    retryServerConnection(SyncAccount.UI_EVENT_SYNC_SERVICES_NOT_ACTIVE);
  }
 else   if (exception.equals("com.liferay.sync.SyncSiteUnavailableException")) {
    handleSiteDeactivatedException();
  }
 else   if (exception.equals("com.liferay.portal.kernel.jsonwebservice." + "NoSuchJSONWebServiceException")) {
    retryServerConnection(SyncAccount.UI_EVENT_SYNC_WEB_MISSING);
  }
 else   if (exception.equals("Authenticated access required") || exception.equals("java.lang.SecurityException")) {
    retryServerConnection(SyncAccount.UI_EVENT_AUTHENTICATION_EXCEPTION);
  }
 else {
    if (retryInProgress && _logger.isDebugEnabled()) {
      _logger.debug("Handling exception {}",exception);
    }
    SyncFile syncFile=getLocalSyncFile();
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_NONE);
    SyncFileService.update(syncFile);
  }
  return true;
}
