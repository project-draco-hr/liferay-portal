{
  if (exception.isEmpty()) {
    return false;
  }
  String innerException="";
  if (exception.contains("$")) {
    String[] exceptionParts=exception.split("$");
    exception=exceptionParts[0];
    innerException=exceptionParts[1];
  }
  boolean retryInProgress=ConnectionRetryUtil.retryInProgress(getSyncAccountId());
  if (!retryInProgress && _logger.isDebugEnabled()) {
    _logger.debug("Handling exception {}",exception);
  }
  if (exception.equals("Authenticated access required") || exception.equals("java.lang.SecurityException")) {
    throw new HttpResponseException(HttpStatus.SC_UNAUTHORIZED,"Authenticated access required");
  }
 else   if (exception.endsWith("DuplicateLockException")) {
    SyncFile syncFile=getLocalSyncFile();
    if (syncFile == null) {
      return true;
    }
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_DUPLICATE_LOCK);
    SyncFileService.update(syncFile);
  }
 else   if (exception.endsWith("FileExtensionException")) {
    SyncFile syncFile=getLocalSyncFile();
    if (syncFile == null) {
      return true;
    }
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_FILE_EXTENSION);
    SyncFileService.update(syncFile);
  }
 else   if (exception.endsWith("FileNameException") || exception.endsWith("FolderNameException")) {
    SyncFile syncFile=getLocalSyncFile();
    if (syncFile == null) {
      return true;
    }
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_FILE_NAME);
    SyncFileService.update(syncFile);
  }
 else   if (exception.endsWith("NoSuchFileEntryException") || exception.endsWith("NoSuchFolderException")) {
    SyncFile syncFile=getLocalSyncFile();
    if (syncFile == null) {
      return true;
    }
    Path filePath=Paths.get(syncFile.getFilePathName());
    if (Files.exists(filePath)) {
      Watcher watcher=WatcherManager.getWatcher(getSyncAccountId());
      watcher.addDeletedFilePathName(syncFile.getFilePathName());
      FileUtil.deleteFile(filePath);
    }
    SyncFileService.deleteSyncFile(syncFile,false);
  }
 else   if (exception.endsWith("NoSuchJSONWebServiceException")) {
    retryServerConnection(SyncAccount.UI_EVENT_SYNC_WEB_MISSING);
  }
 else   if (exception.endsWith("PrincipalException")) {
    SyncFile syncFile=getLocalSyncFile();
    if (syncFile == null) {
      return true;
    }
    SyncFileService.setStatuses(syncFile,SyncFile.STATE_ERROR,SyncFile.UI_EVENT_INVALID_PERMISSIONS);
  }
 else   if (exception.endsWith("SyncClientMinBuildException")) {
    retryServerConnection(SyncAccount.UI_EVENT_MIN_BUILD_REQUIREMENT_FAILED);
  }
 else   if (exception.endsWith("SyncDeviceActiveException")) {
    retryServerConnection(SyncAccount.UI_EVENT_SYNC_ACCOUNT_NOT_ACTIVE);
  }
 else   if (exception.endsWith("SyncDeviceWipeException")) {
    SyncAccountService.deleteSyncAccount(getSyncAccountId(),false);
  }
 else   if (exception.endsWith("SyncServicesUnavailableException")) {
    retryServerConnection(SyncAccount.UI_EVENT_SYNC_SERVICES_NOT_ACTIVE);
  }
 else   if (exception.endsWith("SyncSiteUnavailableException")) {
    handleSiteDeactivatedException();
  }
 else   if (exception.endsWith("UploadException") || innerException.equals("SizeLimitExceededException")) {
    SyncFile syncFile=getLocalSyncFile();
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_EXCEEDED_SIZE_LIMIT);
    SyncFileService.update(syncFile);
  }
 else {
    if (retryInProgress && _logger.isDebugEnabled()) {
      _logger.debug("Handling exception {}",exception);
    }
    SyncFile syncFile=getLocalSyncFile();
    syncFile.setState(SyncFile.STATE_ERROR);
    syncFile.setUiEvent(SyncFile.UI_EVENT_NONE);
    SyncFileService.update(syncFile);
  }
  return true;
}
