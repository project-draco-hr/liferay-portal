{
  CollectionNode row=new CollectionNode();
  TableCellNode tc=null;
  try {
{
      int cnt87=0;
      loop87:       do {
        int alt87=3;
        int LA87_0=input.LA(1);
        if ((LA87_0 == PIPE)) {
          int LA87_2=input.LA(2);
          if (((input.LA(1) == PIPE && input.LA(2) == PIPE || (input.LA(1) == PIPE && input.LA(2) == PIPE && input.LA(2) == EQUAL)))) {
            alt87=1;
          }
 else           if ((true)) {
            alt87=2;
          }
        }
switch (alt87) {
case 1:
{
            if (!(input.LA(1) == PIPE && input.LA(2) == PIPE)) {
              if (backtracking > 0) {
                failed=true;
                return row;
              }
              throw new FailedPredicateException(input,"table_row"," input.LA(1) == PIPE && input.LA(2) == PIPE ");
            }
            pushFollow(FOLLOW_table_cell_in_table_row2351);
            table_cell();
            _fsp--;
            if (failed)             return row;
            if (backtracking == 0) {
              CollectionNode cn=new CollectionNode();
              cn.add(new UnformattedTextNode(" "));
              TableCellNode space=new TableDataNode(cn);
              row.add(space);
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_table_cell_in_table_row2364);
        tc=table_cell();
        _fsp--;
        if (failed)         return row;
        if (backtracking == 0) {
          row.add(tc);
        }
      }
    break;
default :
  if (cnt87 >= 1)   break loop87;
if (backtracking > 0) {
  failed=true;
  return row;
}
EarlyExitException eee=new EarlyExitException(87,input);
throw eee;
}
cnt87++;
}
 while (true);
pushFollow(FOLLOW_table_rowseparator_in_table_row2374);
table_rowseparator();
_fsp--;
if (failed) return row;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return row;
}
