{
  LayoutTestUtil.addLayout(_group);
  LayoutTestUtil.addLayout(_group,true);
  JournalTestUtil.addArticle(_group.getGroupId(),RandomTestUtil.randomString(),RandomTestUtil.randomString());
  enableLocalStaging(false);
  Assert.assertEquals(1,JournalArticleLocalServiceUtil.getArticlesCount(_group.getGroupId()));
  Map<String,String[]> parameterMap=ExportImportConfigurationParameterMapFactory.buildParameterMap();
  String userIdStrategyString=MapUtil.getString(parameterMap,PortletDataHandlerKeys.USER_ID_STRATEGY);
  UserIdStrategy userIdStrategy=ExportImportHelperUtil.getUserIdStrategy(TestPropsValues.getUserId(),userIdStrategyString);
  String includePattern=String.valueOf(_group.getGroupId()) + "*.lar";
  String[] larFileNames=FileUtil.find(SystemProperties.get(SystemProperties.TMP_DIR),includePattern,null);
  Arrays.sort(larFileNames);
  File larFile=new File(larFileNames[larFileNames.length - 1]);
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(larFile);
  PortletDataContext portletDataContext=PortletDataContextFactoryUtil.createImportPortletDataContext(_group.getCompanyId(),_group.getGroupId(),parameterMap,userIdStrategy,zipReader);
  String journalPortletPath=ExportImportPathUtil.getPortletPath(portletDataContext,JournalPortletKeys.JOURNAL);
  String portletData=portletDataContext.getZipEntryAsString(journalPortletPath + StringPool.SLASH + _group.getGroupId()+ "/portlet-data.xml");
  Document document=SAXReaderUtil.read(portletData);
  portletDataContext.setImportDataRootElement(document.getRootElement());
  Element journalElement=portletDataContext.getImportDataGroupElement(JournalArticle.class);
  List<Element> journalStagedModelElements=journalElement.elements("staged-model");
  Assert.assertEquals(0,journalStagedModelElements.size());
}
