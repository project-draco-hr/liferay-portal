{
  _parameterNames=new ArrayList<>();
  _parameterTypes=new ArrayList<>();
  if (!isConstructor() && !isMethod()) {
    return;
  }
  int x=-1;
  if (isPrivate()) {
    x=_content.indexOf("\tprivate ");
  }
 else   if (isProtected()) {
    x=_content.indexOf("\tprotected ");
  }
 else   if (isPublic()) {
    x=_content.indexOf("\tpublic ");
  }
  if (x == -1) {
    return;
  }
  x=_content.indexOf(CharPool.OPEN_PARENTHESIS,x);
  int y=x;
  String parameters=StringPool.BLANK;
  while (true) {
    y=_content.indexOf(CharPool.CLOSE_PARENTHESIS,y + 1);
    if (y == -1) {
      return;
    }
    parameters=_content.substring(x + 1,y);
    int closeParenthesesCount=StringUtil.count(parameters,StringPool.CLOSE_PARENTHESIS);
    int openParenthesesCount=StringUtil.count(parameters,StringPool.OPEN_PARENTHESIS);
    if (closeParenthesesCount == openParenthesesCount) {
      break;
    }
  }
  parameters=StringUtil.replace(parameters,new String[]{StringPool.TAB,StringPool.NEW_LINE},new String[]{StringPool.BLANK,StringPool.SPACE});
  for (x=0; ; ) {
    parameters=StringUtil.trim(parameters);
    if (parameters.startsWith(StringPool.AT)) {
      parameters=stripAnnotation(parameters);
    }
    if (parameters.startsWith("final ")) {
      parameters=parameters.substring(6);
    }
    x=parameters.indexOf(CharPool.SPACE,x + 1);
    if (x == -1) {
      return;
    }
    String parameterType=parameters.substring(0,x);
    int greaterThanCount=StringUtil.count(parameterType,StringPool.GREATER_THAN);
    int lessThanCount=StringUtil.count(parameterType,StringPool.LESS_THAN);
    if (greaterThanCount != lessThanCount) {
      continue;
    }
    _parameterTypes.add(parameterType);
    y=parameters.indexOf(CharPool.COMMA,x);
    if (y == -1) {
      _parameterNames.add(parameters.substring(x + 1));
      return;
    }
    _parameterNames.add(parameters.substring(x + 1,y));
    parameters=parameters.substring(y + 1);
    x=0;
  }
}
