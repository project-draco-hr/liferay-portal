{
  final Method method=ReflectionTestUtil.getMethod(TestInterceptedClass.class,"method",parameterTypes);
  return new MethodInvocation(){
    @Override public Object[] getArguments(){
      return arguments;
    }
    @Override public Method getMethod(){
      return method;
    }
    @Override public AccessibleObject getStaticPart(){
      throw new UnsupportedOperationException();
    }
    @Override public Object getThis(){
      throw new UnsupportedOperationException();
    }
    @Override public Object proceed() throws Throwable {
      ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
      Assert.assertEquals(expectedOriginalServiceContext,_serviceContext == serviceContext);
      return null;
    }
  }
;
}
