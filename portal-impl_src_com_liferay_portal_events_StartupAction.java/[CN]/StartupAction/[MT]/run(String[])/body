{
  try {
    System.out.println("Starting " + ReleaseInfo.getReleaseInfo());
    try {
      LockServiceUtil.clear();
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new ShutdownHook()));
    ApplicationContext context=SpringUtil.getContext();
    String[] beanDefinitionNames=context.getBeanDefinitionNames();
    for (int i=0; i < beanDefinitionNames.length; i++) {
      String beanDefinitionName=beanDefinitionNames[i];
      BeanLocatorUtil.locate(beanDefinitionName,false);
    }
    try {
      PortalJNDIUtil.getDataSource();
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
    try {
      PortalJNDIUtil.getMailSession();
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn(e.getMessage());
      }
    }
    CacheRegistry.setActive(false);
    int buildNumber=ReleaseLocalServiceUtil.getBuildNumberOrCreate();
    if (buildNumber < ReleaseInfo.RELEASE_4_2_1_BUILD_NUMBER) {
      String msg="You must first upgrade to Liferay Portal 4.2.1";
      _log.fatal(msg);
      throw new RuntimeException(msg);
    }
    boolean ranUpgradeProcess=false;
    String[] upgradeProcesses=PropsUtil.getArray(PropsUtil.UPGRADE_PROCESSES);
    for (int i=0; i < upgradeProcesses.length; i++) {
      if (_log.isDebugEnabled()) {
        _log.debug("Initializing upgrade " + upgradeProcesses[i]);
      }
      UpgradeProcess upgradeProcess=(UpgradeProcess)InstancePool.get(upgradeProcesses[i]);
      if (upgradeProcess != null) {
        if ((upgradeProcess.getThreshold() == 0) || (upgradeProcess.getThreshold() > buildNumber)) {
          if (_log.isInfoEnabled()) {
            _log.info("Running upgrade " + upgradeProcesses[i]);
          }
          upgradeProcess.upgrade();
          if (_log.isInfoEnabled()) {
            _log.info("Finished upgrade " + upgradeProcesses[i]);
          }
          ranUpgradeProcess=true;
        }
 else {
          if (_log.isDebugEnabled()) {
            _log.debug("Upgrade threshold " + upgradeProcess.getThreshold() + " will not trigger upgrade");
            _log.debug("Skipping upgrade " + upgradeProcesses[i]);
          }
        }
      }
 else {
        _log.error(upgradeProcesses[i] + " cannot be found");
      }
    }
    ClassNameLocalServiceUtil.checkClassNames();
    deleteTemporaryImages();
    if (ranUpgradeProcess) {
      DBUtil.getInstance().runSQLTemplate("indexes.sql",false);
    }
    CacheRegistry.setActive(true);
    MultiVMPoolUtil.clear();
    Release release=ReleaseLocalServiceUtil.getRelease();
    int verifyFrequency=GetterUtil.getInteger(PropsUtil.get(PropsUtil.VERIFY_FREQUENCY));
    boolean verified=release.isVerified();
    if ((verifyFrequency == VerifyProcess.ALWAYS) || ((verifyFrequency == VerifyProcess.ONCE) && !verified) || (ranUpgradeProcess)) {
      String[] verifyProcesses=PropsUtil.getArray(PropsUtil.VERIFY_PROCESSES);
      for (int i=0; i < verifyProcesses.length; i++) {
        if (_log.isDebugEnabled()) {
          _log.debug("Initializing verification " + verifyProcesses[i]);
        }
        try {
          VerifyProcess verifyProcess=(VerifyProcess)Class.forName(verifyProcesses[i]).newInstance();
          if (_log.isInfoEnabled()) {
            _log.info("Running verification " + verifyProcesses[i]);
          }
          verifyProcess.verify();
          if (_log.isInfoEnabled()) {
            _log.info("Finished verification " + verifyProcesses[i]);
          }
          verified=true;
        }
 catch (        ClassNotFoundException cnfe) {
          _log.error(verifyProcesses[i] + " cannot be found");
        }
catch (        InstantiationException ie) {
          _log.error(verifyProcesses[i] + " cannot be initiated");
        }
      }
    }
    ReleaseLocalServiceUtil.updateRelease(verified);
  }
 catch (  RuntimeException re) {
    throw re;
  }
catch (  Exception e) {
    throw new ActionException(e);
  }
 finally {
    LuceneUtil.checkLuceneDir(CompanyImpl.SYSTEM);
  }
}
