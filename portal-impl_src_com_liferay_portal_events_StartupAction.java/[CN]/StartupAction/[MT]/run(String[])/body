{
  try {
    System.out.println("Starting " + ReleaseInfo.getReleaseInfo());
    BeanLocatorUtil.setBeanLocator(new BeanLocatorImpl());
    try {
      LockServiceUtil.clear();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new ShutdownHook()));
    CacheRegistry.setActive(false);
    ClassNameLocalServiceUtil.checkClassNames();
    Release release=ReleaseLocalServiceUtil.getRelease();
    if (release.getBuildNumber() < 3500) {
      _log.error("You must first upgrade to Liferay Portal 4.2.x");
      System.exit(0);
    }
    int buildNumber=release.getBuildNumber();
    String[] upgradeProcesses=PropsUtil.getArray(PropsUtil.UPGRADE_PROCESSES);
    for (int i=0; i < upgradeProcesses.length; i++) {
      if (_log.isDebugEnabled()) {
        _log.debug("Initializing upgrade " + upgradeProcesses[i]);
      }
      try {
        UpgradeProcess upgradeProcess=(UpgradeProcess)Class.forName(upgradeProcesses[i]).newInstance();
        if ((upgradeProcess.getThreshold() == 0) || (upgradeProcess.getThreshold() >= buildNumber)) {
          if (_log.isInfoEnabled()) {
            _log.info("Running upgrade " + upgradeProcesses[i]);
          }
          upgradeProcess.upgrade();
          if (_log.isInfoEnabled()) {
            _log.info("Finished upgrade " + upgradeProcesses[i]);
          }
        }
 else {
          if (_log.isDebugEnabled()) {
            _log.debug("Upgrade threshold " + upgradeProcess.getThreshold() + " will not trigger upgrade");
            _log.debug("Skipping upgrade " + upgradeProcesses[i]);
          }
        }
      }
 catch (      ClassNotFoundException cnfe) {
        _log.error(upgradeProcesses[i] + " cannot be found");
      }
catch (      InstantiationException ie) {
        _log.error(upgradeProcesses[i] + " cannot be initiated");
      }
    }
    CacheRegistry.setActive(true);
    ClusterPool.clear();
    deleteTemporaryImages();
    int verifyFrequency=GetterUtil.getInteger(PropsUtil.get(PropsUtil.VERIFY_FREQUENCY));
    boolean verified=release.isVerified();
    if ((verifyFrequency == VerifyProcess.ALWAYS) || ((verifyFrequency == VerifyProcess.ONCE) && !verified)) {
      String[] verifyProcesses=PropsUtil.getArray(PropsUtil.VERIFY_PROCESSES);
      for (int i=0; i < verifyProcesses.length; i++) {
        if (_log.isDebugEnabled()) {
          _log.debug("Initializing verification " + verifyProcesses[i]);
        }
        try {
          VerifyProcess verifyProcess=(VerifyProcess)Class.forName(verifyProcesses[i]).newInstance();
          if (_log.isInfoEnabled()) {
            _log.info("Running verification " + verifyProcesses[i]);
          }
          verifyProcess.verify();
          if (_log.isInfoEnabled()) {
            _log.info("Finished verification " + verifyProcesses[i]);
          }
          verified=true;
        }
 catch (        ClassNotFoundException cnfe) {
          _log.error(verifyProcesses[i] + " cannot be found");
        }
catch (        InstantiationException ie) {
          _log.error(verifyProcesses[i] + " cannot be initiated");
        }
      }
    }
    ReleaseLocalServiceUtil.updateRelease(verified);
  }
 catch (  Exception e) {
    throw new ActionException(e);
  }
}
