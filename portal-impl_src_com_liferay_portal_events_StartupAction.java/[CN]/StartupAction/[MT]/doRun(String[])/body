{
  System.out.println("Starting " + ReleaseInfo.getReleaseInfo());
  DistributedRegistry.registerDistributed(ComponentConstants.COMPONENT_CONTEXT,Direction.DUPLEX,MatchType.POSTFIX);
  DistributedRegistry.registerDistributed(MimeResponse.MARKUP_HEAD_ELEMENT,Direction.DUPLEX,MatchType.EXACT);
  DistributedRegistry.registerDistributed(PortletRequest.LIFECYCLE_PHASE,Direction.DUPLEX,MatchType.EXACT);
  DistributedRegistry.registerDistributed(WebKeys.class);
  Intraband intraband=MPIHelperUtil.getIntraband();
  intraband.registerDatagramReceiveHandler(SystemDataType.MAILBOX.getValue(),new MailboxDatagramReceiveHandler());
  MessageBus messageBus=(MessageBus)PortalBeanLocatorUtil.locate(MessageBus.class.getName());
  intraband.registerDatagramReceiveHandler(SystemDataType.MESSAGE.getValue(),new MessageDatagramReceiveHandler(messageBus));
  intraband.registerDatagramReceiveHandler(SystemDataType.PROXY.getValue(),new IntrabandProxyDatagramReceiveHandler());
  intraband.registerDatagramReceiveHandler(SystemDataType.RPC.getValue(),new RPCDatagramReceiveHandler());
  if (PropsValues.PORTAL_FABRIC_ENABLED) {
    FabricServerUtil.start();
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Add shutdown hook");
  }
  Runtime runtime=Runtime.getRuntime();
  runtime.addShutdownHook(new Thread(new ShutdownHook()));
  IndexerRegistryUtil.register(new MBMessageIndexer());
  IndexerRegistryUtil.register(new PluginPackageIndexer());
  if (_log.isDebugEnabled()) {
    _log.debug("Upgrade database");
  }
  DBUpgrader.upgrade();
  if (_log.isDebugEnabled()) {
    _log.debug("Clear locks");
  }
  try {
    LockLocalServiceUtil.clear();
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to clear locks because Lock table does not exist");
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize message bus");
  }
  MessageSender messageSender=(MessageSender)PortalBeanLocatorUtil.locate(MessageSender.class.getName());
  SynchronousMessageSender synchronousMessageSender=(SynchronousMessageSender)PortalBeanLocatorUtil.locate(SynchronousMessageSender.class.getName());
  MessageBusUtil.init(DoPrivilegedUtil.wrap(messageBus),DoPrivilegedUtil.wrap(messageSender),DoPrivilegedUtil.wrap(synchronousMessageSender));
  ClusterLinkUtil.initialize();
  ClusterExecutorUtil.initialize();
  if (!SPIUtil.isSPI()) {
    ClusterMasterExecutorUtil.initialize();
  }
  ClusterLinkBootstrapLoaderHelperUtil.start();
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize scheduler engine lifecycle");
  }
  SchedulerEngineHelperUtil.initialize();
  if (_log.isDebugEnabled()) {
    _log.debug("Verify database");
  }
  DBUpgrader.verify();
  if (!ClusterMasterExecutorUtil.isEnabled()) {
    BackgroundTaskLocalServiceUtil.cleanUpBackgroundTasks();
  }
  JspFactorySwapper.swap();
  CachedLoggerProvider.install();
  if (PropsValues.TCK_URL) {
    StrutsActionRegistryUtil.register("/portal/tck",new TCKStrutsAction());
  }
}
