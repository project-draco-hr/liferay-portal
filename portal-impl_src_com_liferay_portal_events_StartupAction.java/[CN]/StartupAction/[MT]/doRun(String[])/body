{
  System.out.println("Starting " + ReleaseInfo.getReleaseInfo());
  if (_log.isInfoEnabled() && !PatcherUtil.hasInconsistentPatchLevels()) {
    String installedPatches=StringUtil.merge(PatcherUtil.getInstalledPatches(),StringPool.COMMA_AND_SPACE);
    if (Validator.isNull(installedPatches)) {
      _log.info("There are no patches installed");
    }
 else {
      _log.info("The following patches are installed: " + installedPatches);
    }
  }
  ServiceDependencyManager portalResiliencyServiceDependencyManager=new ServiceDependencyManager();
  portalResiliencyServiceDependencyManager.registerDependencies(MessageBus.class,PortalExecutorManager.class);
  portalResiliencyServiceDependencyManager.addServiceDependencyListener(new PortalResiliencyServiceDependencyLister());
  if (_log.isDebugEnabled()) {
    _log.debug("Add shutdown hook");
  }
  Runtime runtime=Runtime.getRuntime();
  runtime.addShutdownHook(new Thread(new ShutdownHook()));
  ServiceDependencyManager indexerRegistryServiceDependencyManager=new ServiceDependencyManager();
  indexerRegistryServiceDependencyManager.registerDependencies(IndexerRegistry.class);
  indexerRegistryServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener(){
    @Override public void dependenciesFulfilled(){
      IndexerRegistryUtil.register(new MBMessageIndexer());
      IndexerRegistryUtil.register(new PluginPackageIndexer());
    }
    @Override public void destroy(){
    }
  }
);
  DB db=DBFactoryUtil.getDB();
  String dbType=db.getType();
  if (dbType.equals(DB.TYPE_MYSQL) && GetterUtil.getFloat(db.getVersionString()) < 5.6F) {
    if (_log.isWarnEnabled()) {
      _log.warn("Please upgrade to MySQL 5.6.4+. Portal will drop off " + "support to all MySQL releases before 5.6.4 soon!");
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Upgrade database");
  }
  DBUpgrader.upgrade();
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize scheduler engine lifecycle");
  }
  ServiceDependencyManager schedulerServiceDependencyManager=new ServiceDependencyManager();
  schedulerServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener(){
    @Override public void dependenciesFulfilled(){
      SchedulerLifecycle schedulerLifecycle=new SchedulerLifecycle();
      schedulerLifecycle.registerPortalLifecycle(PortalLifecycle.METHOD_INIT);
    }
    @Override public void destroy(){
    }
  }
);
  final Registry registry=RegistryUtil.getRegistry();
  Filter filter=registry.getFilter("(objectClass=com.liferay.portal.scheduler.quartz.internal." + "QuartzSchemaManager)");
  schedulerServiceDependencyManager.registerDependencies(new Class[]{SchedulerEngineHelper.class},new Filter[]{filter});
  if (_log.isDebugEnabled()) {
    _log.debug("Verify database");
  }
  DBUpgrader.verify();
  ServiceDependencyManager clusterMasterExecutorServiceDependencyManager=new ServiceDependencyManager();
  clusterMasterExecutorServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener(){
    @Override public void dependenciesFulfilled(){
      ClusterMasterExecutor clusterMasterExecutor=registry.getService(ClusterMasterExecutor.class);
      if (!clusterMasterExecutor.isEnabled()) {
        BackgroundTaskManagerUtil.cleanUpBackgroundTasks();
      }
 else {
        clusterMasterExecutor.notifyMasterTokenTransitionListeners();
      }
    }
    @Override public void destroy(){
    }
  }
);
  clusterMasterExecutorServiceDependencyManager.registerDependencies(BackgroundTaskManager.class,ClusterExecutor.class,ClusterMasterExecutor.class);
  JspFactorySwapper.swap();
  CachedLoggerProvider.install();
}
