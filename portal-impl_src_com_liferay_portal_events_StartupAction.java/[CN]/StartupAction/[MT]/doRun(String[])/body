{
  Class<?> clazz=getClass();
  ClassLoader classLoader=clazz.getClassLoader();
  try (InputStream inputStream=classLoader.getResourceAsStream("com/liferay/portal/events/dependencies/startup.txt")){
    System.out.println(IOUtils.toString(inputStream));
  }
   System.out.println("Starting " + ReleaseInfo.getReleaseInfo() + "\n");
  if (_log.isInfoEnabled() && !PatcherUtil.hasInconsistentPatchLevels()) {
    String installedPatches=StringUtil.merge(PatcherUtil.getInstalledPatches(),StringPool.COMMA_AND_SPACE);
    if (Validator.isNull(installedPatches)) {
      _log.info("There are no patches installed");
    }
 else {
      _log.info("The following patches are installed: " + installedPatches);
    }
  }
  ServiceDependencyManager portalResiliencyServiceDependencyManager=new ServiceDependencyManager();
  portalResiliencyServiceDependencyManager.addServiceDependencyListener(new PortalResiliencyServiceDependencyLister());
  portalResiliencyServiceDependencyManager.registerDependencies(MessageBus.class,PortalExecutorManager.class);
  if (_log.isDebugEnabled()) {
    _log.debug("Add shutdown hook");
  }
  Runtime runtime=Runtime.getRuntime();
  runtime.addShutdownHook(new Thread(new ShutdownHook()));
  ServiceDependencyManager indexerRegistryServiceDependencyManager=new ServiceDependencyManager();
  indexerRegistryServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener(){
    @Override public void dependenciesFulfilled(){
      IndexerRegistryUtil.register(new MBMessageIndexer());
      IndexerRegistryUtil.register(new PluginPackageIndexer());
    }
    @Override public void destroy(){
    }
  }
);
  indexerRegistryServiceDependencyManager.registerDependencies(IndexerRegistry.class);
  DB db=DBManagerUtil.getDB();
  if ((db.getDBType() == DBType.MYSQL) && GetterUtil.getFloat(db.getVersionString()) < 5.6F) {
    _log.error("Please upgrade to at least MySQL 5.6.4. The portal no " + "longer supports older versions of MySQL.");
    System.exit(1);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Check required build number");
  }
  DBUpgrader.checkRequiredBuildNumber(ReleaseInfo.getParentBuildNumber());
  Registry registry=RegistryUtil.getRegistry();
  Map<String,Object> properties=new HashMap<>();
  properties.put("module.service.lifecycle",ModuleServiceLifecycle.LIFECYCLE_VALUE_DATABASE_INITIALIZED);
  properties.put("service.vendor",ReleaseInfo.getVendor());
  properties.put("service.version",ReleaseInfo.getVersion());
  final ServiceRegistration<ModuleServiceLifecycle> moduleServiceLifecycleServiceRegistration=registry.registerService(ModuleServiceLifecycle.class,new ModuleServiceLifecycle(){
  }
,properties);
  PortalLifecycleUtil.register(new BasePortalLifecycle(){
    @Override protected void doPortalDestroy(){
      moduleServiceLifecycleServiceRegistration.unregister();
    }
    @Override protected void doPortalInit(){
    }
  }
,PortalLifecycle.METHOD_DESTROY);
  if (_log.isDebugEnabled()) {
    _log.debug("Check class names");
  }
  ClassNameLocalServiceUtil.checkClassNames();
  if (_log.isDebugEnabled()) {
    _log.debug("Check resource actions");
  }
  ResourceActionLocalServiceUtil.checkResourceActions();
  if (_log.isDebugEnabled()) {
    _log.debug("Verify database");
  }
  DBUpgrader.verify();
  JspFactorySwapper.swap();
  CachedLoggerProvider.install();
}
