{
  System.out.println("Starting " + ReleaseInfo.getReleaseInfo());
  if (_log.isDebugEnabled()) {
    _log.debug("Clear locks");
  }
  try {
    LockLocalServiceUtil.clear();
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to clear locks because Lock table does not exist");
    }
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Add shutdown hook");
  }
  Runtime runtime=Runtime.getRuntime();
  runtime.addShutdownHook(new Thread(new ShutdownHook()));
  String portalSecurityManagerStrategy=PropsValues.PORTAL_SECURITY_MANAGER_STRATEGY;
  SecurityManager securityManager=System.getSecurityManager();
  if (portalSecurityManagerStrategy.equals("smart")) {
    if (ServerDetector.isWebSphere()) {
      portalSecurityManagerStrategy="none";
    }
 else {
      portalSecurityManagerStrategy="default";
    }
  }
  if (portalSecurityManagerStrategy.equals("liferay")) {
    Thread currentThread=Thread.currentThread();
    PortalSecurityManager portalSecurityManager=new PortalSecurityManager(securityManager,currentThread.getContextClassLoader());
    System.setSecurityManager(portalSecurityManager);
  }
 else   if (portalSecurityManagerStrategy.equals("none")) {
    System.setSecurityManager(null);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize template manager");
  }
  TemplateManagerUtil.init();
  IndexerRegistryUtil.register(new MBIndexer());
  IndexerRegistryUtil.register(new PluginPackageIndexer());
  if (_log.isDebugEnabled()) {
    _log.debug("Upgrade database");
  }
  DBUpgrader.upgrade();
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize message bus");
  }
  MessageBus messageBus=(MessageBus)PortalBeanLocatorUtil.locate(MessageBus.class.getName());
  MessageSender messageSender=(MessageSender)PortalBeanLocatorUtil.locate(MessageSender.class.getName());
  SynchronousMessageSender synchronousMessageSender=(SynchronousMessageSender)PortalBeanLocatorUtil.locate(SynchronousMessageSender.class.getName());
  MessageBusUtil.init(messageBus,messageSender,synchronousMessageSender);
  ClusterExecutorUtil.initialize();
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize scheduler engine lifecycle");
  }
  SchedulerEngineUtil.initialize();
  if (_log.isDebugEnabled()) {
    _log.debug("Verify database");
  }
  DBUpgrader.verify();
  JspFactorySwapper.swap();
  CachedLoggerProvider.install();
}
