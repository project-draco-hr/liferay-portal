{
  System.out.println("Starting " + ReleaseInfo.getReleaseInfo());
  if (_log.isDebugEnabled()) {
    _log.debug("Clear locks");
  }
  boolean enabled=PortalSecurityManagerThreadLocal.isEnabled();
  try {
    PortalSecurityManagerThreadLocal.setEnabled(false);
    LockLocalServiceUtil.clear();
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to clear locks because Lock table does not exist");
    }
  }
 finally {
    PortalSecurityManagerThreadLocal.setEnabled(enabled);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Add shutdown hook");
  }
  Runtime runtime=Runtime.getRuntime();
  runtime.addShutdownHook(new Thread(new ShutdownHook()));
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize template manager");
  }
  TemplateManagerUtil.init();
  IndexerRegistryUtil.register(new MBMessageIndexer());
  IndexerRegistryUtil.register(new PluginPackageIndexer());
  if (_log.isDebugEnabled()) {
    _log.debug("Upgrade database");
  }
  enabled=PortalSecurityManagerThreadLocal.isEnabled();
  try {
    PortalSecurityManagerThreadLocal.setEnabled(false);
    DBUpgrader.upgrade();
  }
  finally {
    PortalSecurityManagerThreadLocal.setEnabled(enabled);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize message bus");
  }
  MessageBus messageBus=(MessageBus)PortalBeanLocatorUtil.locate(MessageBus.class.getName());
  MessageSender messageSender=(MessageSender)PortalBeanLocatorUtil.locate(MessageSender.class.getName());
  SynchronousMessageSender synchronousMessageSender=(SynchronousMessageSender)PortalBeanLocatorUtil.locate(SynchronousMessageSender.class.getName());
  MessageBusUtil.init(messageBus,messageSender,synchronousMessageSender);
  ClusterExecutorUtil.initialize();
  if (_log.isDebugEnabled()) {
    _log.debug("Initialize scheduler engine lifecycle");
  }
  SchedulerEngineHelperUtil.initialize();
  if (_log.isDebugEnabled()) {
    _log.debug("Verify database");
  }
  DBUpgrader.verify();
  JspFactorySwapper.swap();
  CachedLoggerProvider.install();
}
