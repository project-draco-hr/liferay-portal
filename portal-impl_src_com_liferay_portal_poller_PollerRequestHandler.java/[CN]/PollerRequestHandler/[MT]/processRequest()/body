{
  if (Validator.isNull(_pollerRequestString)) {
    return false;
  }
  Map<String,Object>[] pollerRequestChunks=(Map<String,Object>[])JSONFactoryUtil.deserialize(_pollerRequestString);
  PollerHeader pollerHeader=getPollerHeader(pollerRequestChunks);
  if (pollerHeader == null) {
    return false;
  }
  Set<String> portletIdsWithChunks=null;
  if (_receiveRequest) {
    portletIdsWithChunks=new HashSet<String>();
    boolean suspendPolling=false;
    if (pollerHeader.isStartPolling()) {
      BrowserTrackerLocalServiceUtil.updateBrowserTracker(pollerHeader.getUserId(),pollerHeader.getBrowserKey());
    }
 else {
      BrowserTracker browserTracker=BrowserTrackerLocalServiceUtil.getBrowserTracker(pollerHeader.getUserId(),pollerHeader.getBrowserKey());
      if (browserTracker.getBrowserKey() != pollerHeader.getBrowserKey()) {
        suspendPolling=true;
      }
    }
    JSONObject pollerResponseChunkJSONObject=JSONFactoryUtil.createJSONObject();
    pollerResponseChunkJSONObject.put("userId",pollerHeader.getUserId());
    pollerResponseChunkJSONObject.put("initialRequest",pollerHeader.isInitialRequest());
    pollerResponseChunkJSONObject.put("suspendPolling",suspendPolling);
    _pollerResponseWriter.write(pollerResponseChunkJSONObject);
  }
  for (int i=1; i < pollerRequestChunks.length; i++) {
    Map<String,Object> pollerRequestChunk=pollerRequestChunks[i];
    String portletId=(String)pollerRequestChunk.get("portletId");
    Map<String,String> parameterMap=getData(pollerRequestChunk);
    String chunkId=(String)pollerRequestChunk.get("chunkId");
    try {
      addPollerRequest(portletIdsWithChunks,pollerHeader,portletId,parameterMap,chunkId);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  processRequests();
  if (!_receiveRequest) {
    return true;
  }
  clearRequests();
  for (  String portletId : pollerHeader.getPortletIds()) {
    if (portletIdsWithChunks.contains(portletId)) {
      continue;
    }
    try {
      addPollerRequest(portletIdsWithChunks,pollerHeader,portletId,new HashMap<String,String>(),null);
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  processRequests();
  if (!_receiveRequest) {
    shutdown();
  }
  return true;
}
