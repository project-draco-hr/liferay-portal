{
  if (!PropsValues.ORGANIZATIONS_INDEXER_ENABLED || !PropsValues.ORGANIZATIONS_SEARCH_WITH_INDEX) {
    String parentOrganizationIdComparator=StringPool.EQUAL;
    if (parentOrganizationId == OrganizationConstants.ANY_PARENT_ORGANIZATION_ID) {
      parentOrganizationIdComparator=StringPool.NOT_EQUAL;
    }
    return organizationFinder.countByKeywords(companyId,parentOrganizationId,parentOrganizationIdComparator,keywords,type,regionId,countryId,params);
  }
  try {
    String name=null;
    String street=null;
    String city=null;
    String zip=null;
    boolean andOperator=false;
    if (Validator.isNotNull(keywords)) {
      name=keywords;
      street=keywords;
      city=keywords;
      zip=keywords;
    }
 else {
      andOperator=true;
    }
    if (params != null) {
      params.put("keywords",keywords);
    }
    Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(Organization.class);
    SearchContext searchContext=buildSearchContext(companyId,parentOrganizationId,name,type,street,city,zip,regionId,countryId,params,andOperator,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    Hits hits=indexer.search(searchContext);
    return hits.getLength();
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
}
