{
  if (((userLocalService.getOrganizationUsersCount(organization.getOrganizationId(),WorkflowConstants.STATUS_APPROVED) > 0) || (organizationPersistence.countByC_P(organization.getCompanyId(),organization.getOrganizationId()) > 0)) && !CompanyThreadLocal.isDeleteInProcess()) {
    throw new RequiredOrganizationException();
  }
  assetEntryLocalService.deleteEntry(Organization.class.getName(),organization.getOrganizationId());
  addressLocalService.deleteAddresses(organization.getCompanyId(),Organization.class.getName(),organization.getOrganizationId());
  emailAddressLocalService.deleteEmailAddresses(organization.getCompanyId(),Organization.class.getName(),organization.getOrganizationId());
  expandoRowLocalService.deleteRows(organization.getOrganizationId());
  passwordPolicyRelLocalService.deletePasswordPolicyRel(Organization.class.getName(),organization.getOrganizationId());
  phoneLocalService.deletePhones(organization.getCompanyId(),Organization.class.getName(),organization.getOrganizationId());
  websiteLocalService.deleteWebsites(organization.getCompanyId(),Organization.class.getName(),organization.getOrganizationId());
  Group group=organization.getGroup();
  if (group.isSite()) {
    group.setSite(false);
    groupPersistence.update(group);
  }
  groupLocalService.deleteGroup(group);
  String name=Organization.class.getName();
  resourceLocalService.deleteResource(organization.getCompanyId(),name,ResourceConstants.SCOPE_INDIVIDUAL,organization.getOrganizationId());
  organizationPersistence.remove(organization);
  PermissionCacheUtil.clearCache();
  return organization;
}
