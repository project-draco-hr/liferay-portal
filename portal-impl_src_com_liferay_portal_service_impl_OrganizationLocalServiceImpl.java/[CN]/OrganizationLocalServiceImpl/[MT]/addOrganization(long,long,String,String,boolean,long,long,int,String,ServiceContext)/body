{
  User user=userPersistence.findByPrimaryKey(userId);
  parentOrganizationId=getParentOrganizationId(user.getCompanyId(),parentOrganizationId);
  recursable=true;
  validate(user.getCompanyId(),parentOrganizationId,name,type,countryId,statusId);
  long organizationId=counterLocalService.increment();
  Organization organization=organizationPersistence.create(organizationId);
  organization.setCompanyId(user.getCompanyId());
  organization.setParentOrganizationId(parentOrganizationId);
  organization.setName(name);
  organization.setType(type);
  organization.setRecursable(recursable);
  organization.setRegionId(regionId);
  organization.setCountryId(countryId);
  organization.setStatusId(statusId);
  organization.setComments(comments);
  organizationPersistence.update(organization,false);
  Group group=groupLocalService.addGroup(userId,Organization.class.getName(),organizationId,null,null,0,null,true,null);
  if (PropsValues.ORGANIZATIONS_ASSIGNMENT_AUTO) {
    Role role=roleLocalService.getRole(organization.getCompanyId(),RoleConstants.ORGANIZATION_OWNER);
    userGroupRoleLocalService.addUserGroupRoles(userId,group.getGroupId(),new long[]{role.getRoleId()});
    userPersistence.addOrganization(userId,organizationId);
  }
  addOrganizationResources(userId,organization);
  if (serviceContext != null) {
    updateAsset(userId,organization,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  }
  ExpandoBridge expandoBridge=organization.getExpandoBridge();
  expandoBridge.setAttributes(serviceContext);
  Indexer indexer=IndexerRegistryUtil.getIndexer(Organization.class);
  indexer.reindex(organization);
  return organization;
}
