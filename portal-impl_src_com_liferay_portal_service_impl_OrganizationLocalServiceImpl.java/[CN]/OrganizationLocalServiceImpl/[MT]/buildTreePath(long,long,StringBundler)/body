{
  DynamicQuery dynamicQuery=DynamicQueryFactoryUtil.forClass(Organization.class);
  dynamicQuery.setProjection(ProjectionFactoryUtil.property("organizationId"));
  Property companyIdProperty=PropertyFactoryUtil.forName("companyId");
  dynamicQuery.add(companyIdProperty.eq(companyId));
  Property parentOrganizationIdProperty=PropertyFactoryUtil.forName("parentOrganizationId");
  dynamicQuery.add(parentOrganizationIdProperty.eq(parentOrganizationId));
  int start=0;
  while (true) {
    int end=start + PropsValues.BULK_OPERATIONS_CHUNK_SIZE;
    dynamicQuery.setLimit(start,end);
    List<Long> organizationIds=(List<Long>)dynamicQuery(dynamicQuery);
    if (organizationIds.isEmpty()) {
      break;
    }
    for (    Long organizationId : organizationIds) {
      path.append(organizationId);
      path.append(StringPool.SLASH);
      buildTreePath(companyId,organizationId,path);
      Organization organization=organizationPersistence.findByPrimaryKey(organizationId);
      organization.setTreePath(path.toString());
      organizationPersistence.update(organization);
      path.setIndex(path.index() - 2);
    }
    start=end;
  }
}
