{
  Matcher matcher=stringUtilReplacePattern.matcher(content);
  while (matcher.find()) {
    String replaceCall=matcher.group();
    int x=replaceCall.length();
    while (true) {
      x=replaceCall.lastIndexOf(StringPool.CLOSE_PARENTHESIS,x - 1);
      replaceCall=replaceCall.substring(0,x + 1);
      if (getLevel(replaceCall) == 0) {
        break;
      }
    }
    x=replaceCall.indexOf(StringPool.OPEN_PARENTHESIS);
    String parameters=replaceCall.substring(x + 1,replaceCall.length() - 1);
    List<String> parametersList=new ArrayList<>();
    x=-1;
    while (true) {
      x=parameters.indexOf(StringPool.COMMA,x + 1);
      if (x == -1) {
        parametersList.add(StringUtil.trim(parameters));
        break;
      }
      if (ToolsUtil.isInsideQuotes(parameters,x)) {
        continue;
      }
      String linePart=parameters.substring(0,x);
      if (getLevel(linePart) == 0) {
        parametersList.add(StringUtil.trim(linePart));
        parameters=parameters.substring(x + 1);
        x=-1;
      }
    }
    if (parametersList.size() != 3) {
      return;
    }
    String secondParameter=parametersList.get(1);
    Matcher singleLengthMatcher=singleLengthStringPattern.matcher(secondParameter);
    if (!singleLengthMatcher.find()) {
      continue;
    }
    String fieldName=singleLengthMatcher.group(2);
    if (fieldName != null) {
      Field field=StringPool.class.getDeclaredField(fieldName);
      String value=(String)field.get(null);
      if (value.length() != 1) {
        continue;
      }
    }
    String method=matcher.group(1);
    StringBundler sb=new StringBundler(8);
    sb.append("Use StringUtil.");
    sb.append(method);
    sb.append("(String, char, char) or StringUtil.");
    sb.append(method);
    sb.append("(String, char, String) instead: ");
    sb.append(fileName);
    sb.append(StringPool.SPACE);
    sb.append(getLineCount(content,matcher.start()));
    processErrorMessage(fileName,sb.toString());
  }
}
