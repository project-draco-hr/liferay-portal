{
  Matcher matcher=stringUtilReplacePattern.matcher(content);
  while (matcher.find()) {
    List<String> parametersList=getParameterList(matcher.group());
    if (parametersList.size() != 3) {
      return;
    }
    String secondParameter=parametersList.get(1);
    Matcher singleLengthMatcher=singleLengthStringPattern.matcher(secondParameter);
    if (!singleLengthMatcher.find()) {
      continue;
    }
    String fieldName=singleLengthMatcher.group(2);
    if (fieldName != null) {
      Field field=StringPool.class.getDeclaredField(fieldName);
      String value=(String)field.get(null);
      if (value.length() != 1) {
        continue;
      }
    }
    String method=matcher.group(1);
    StringBundler sb=new StringBundler(5);
    sb.append("Use StringUtil.");
    sb.append(method);
    sb.append("(String, char, char) or StringUtil.");
    sb.append(method);
    sb.append("(String, char, String) instead");
    processMessage(fileName,sb.toString(),getLineCount(content,matcher.start()));
  }
}
