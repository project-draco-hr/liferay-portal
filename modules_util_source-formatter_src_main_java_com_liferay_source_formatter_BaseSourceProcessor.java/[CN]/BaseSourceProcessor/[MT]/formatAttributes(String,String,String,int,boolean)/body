{
  String s=tag;
  int y=s.indexOf(CharPool.SPACE);
  if (y == -1) {
    return line;
  }
  String tagName=s.substring(1,y);
  s=s.substring(y + 1);
  String previousAttribute=null;
  String previousAttributeAndValue=null;
  boolean wrongOrder=false;
  for (int x=0; ; ) {
    x=s.indexOf(CharPool.EQUAL);
    if ((x == -1) || (s.length() <= (x + 1))) {
      return line;
    }
    String attribute=s.substring(0,x);
    String trimmedAttribute=StringUtil.trim(attribute);
    if (!isAttributName(trimmedAttribute)) {
      return line;
    }
    if (!attribute.equals(trimmedAttribute)) {
      return StringUtil.replace(line,attribute + "=",trimmedAttribute + "=");
    }
    if (Validator.isNotNull(previousAttribute) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) {
      wrongOrder=true;
    }
    s=s.substring(x + 1);
    char delimeter=s.charAt(0);
    if ((delimeter != CharPool.APOSTROPHE) && (delimeter != CharPool.QUOTE)) {
      if (delimeter == CharPool.SPACE) {
        return StringUtil.replace(line,attribute + "= ",attribute + "=");
      }
      if (delimeter != CharPool.AMPERSAND) {
        processMessage(fileName,"delimeter",lineCount);
      }
      return line;
    }
    s=s.substring(1);
    String value=null;
    y=-1;
    while (true) {
      y=s.indexOf(delimeter,y + 1);
      if ((y == -1) || (s.length() <= (y + 1))) {
        return line;
      }
      value=s.substring(0,y);
      if (value.startsWith("<%")) {
        if (getLevel(value,"<%","%>") == 0) {
          break;
        }
      }
 else       if (getLevel(value,StringPool.LESS_THAN,StringPool.GREATER_THAN) == 0) {
        break;
      }
    }
    if (delimeter == CharPool.APOSTROPHE) {
      if (escapeQuotes) {
        String newValue=StringUtil.replace(value,StringPool.QUOTE,"&quot;");
        return StringUtil.replace(line,StringPool.APOSTROPHE + value + StringPool.APOSTROPHE,StringPool.QUOTE + newValue + StringPool.QUOTE);
      }
      if (!value.contains(StringPool.QUOTE) || !tagName.contains(StringPool.COLON)) {
        return StringUtil.replace(line,StringPool.APOSTROPHE + value + StringPool.APOSTROPHE,StringPool.QUOTE + value + StringPool.QUOTE);
      }
    }
    if ((delimeter == CharPool.QUOTE) && value.contains(StringPool.QUOTE) && tagName.contains(StringPool.COLON)) {
      return StringUtil.replace(line,StringPool.QUOTE + value + StringPool.QUOTE,StringPool.APOSTROPHE + value + StringPool.APOSTROPHE);
    }
    StringBundler sb=new StringBundler(5);
    sb.append(attribute);
    sb.append(StringPool.EQUAL);
    sb.append(delimeter);
    sb.append(value);
    sb.append(delimeter);
    String currentAttributeAndValue=sb.toString();
    if (!tagName.contains(StringPool.COLON)) {
      String newLine=sortHTMLAttributes(line,value,currentAttributeAndValue);
      if (!newLine.equals(line)) {
        return newLine;
      }
    }
    String newLine=formatTagAttributeType(line,tagName,currentAttributeAndValue);
    if (!newLine.equals(line)) {
      return newLine;
    }
    if (wrongOrder) {
      if ((StringUtil.count(line,currentAttributeAndValue) == 1) && (StringUtil.count(line,previousAttributeAndValue) == 1)) {
        line=StringUtil.replaceFirst(line,previousAttributeAndValue,currentAttributeAndValue);
        return StringUtil.replaceLast(line,currentAttributeAndValue,previousAttributeAndValue);
      }
      return line;
    }
    s=s.substring(y + 1);
    if (s.startsWith(StringPool.GREATER_THAN)) {
      return line;
    }
    s=StringUtil.trimLeading(s);
    previousAttribute=attribute;
    previousAttributeAndValue=currentAttributeAndValue;
  }
}
