{
  Matcher matcher=sbAppendPattern.matcher(content);
  matcherIteration:   while (matcher.find()) {
    String appendValue=stripQuotes(matcher.group(2),CharPool.QUOTE);
    appendValue=StringUtil.replace(appendValue,"+\n","+ ");
    if (!appendValue.contains(" + ")) {
      continue;
    }
    String[] appendValueParts=StringUtil.split(appendValue," + ");
    for (    String appendValuePart : appendValueParts) {
      if ((getLevel(appendValuePart) != 0) || Validator.isNumber(appendValuePart)) {
        continue matcherIteration;
      }
    }
    processMessage(fileName,"Incorrect use of '+' inside StringBundler",getLineCount(content,matcher.start(1)));
  }
  matcher=sbAppendWithStartingSpacePattern.matcher(content);
  while (matcher.find()) {
    String firstLine=matcher.group(1);
    if (firstLine.endsWith("\\n\");")) {
      continue;
    }
    if ((maxLineLength != -1) && (getLineLength(firstLine) >= maxLineLength)) {
      processMessage(fileName,"Do not append string starting with space to StringBundler",getLineCount(content,matcher.start(3)));
    }
 else {
      content=StringUtil.replaceFirst(content,"\");\n"," \");\n",matcher.start(2));
      content=StringUtil.replaceFirst(content,"(\" ","(\"",matcher.start(3));
    }
  }
  return content;
}
