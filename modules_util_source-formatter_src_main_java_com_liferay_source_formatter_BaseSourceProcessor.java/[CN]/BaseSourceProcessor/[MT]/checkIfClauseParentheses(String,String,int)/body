{
  int quoteCount=StringUtil.count(ifClause,CharPool.QUOTE);
  if ((quoteCount % 2) == 1) {
    return;
  }
  ifClause=stripQuotes(ifClause);
  if (ifClause.contains(StringPool.DOUBLE_SLASH) || ifClause.contains("/*") || ifClause.contains("*/")) {
    return;
  }
  if (hasRedundantParentheses(ifClause,"||","&&") || hasRedundantParentheses(ifClause,"&&","||")) {
    processMessage(fileName,"Redundant parentheses in if-statement",lineCount);
    return;
  }
  int previousParenthesisPos=-1;
  for (int i=0; i < ifClause.length(); i++) {
    char c=ifClause.charAt(i);
    if ((c != CharPool.OPEN_PARENTHESIS) && (c != CharPool.CLOSE_PARENTHESIS)) {
      continue;
    }
    if (previousParenthesisPos != -1) {
      String s=ifClause.substring(previousParenthesisPos + 1,i);
      if (hasMissingParentheses(s)) {
        processMessage(fileName,"Missing parentheses in if-statement",lineCount);
        return;
      }
    }
    if (previousParenthesisPos == -1) {
      previousParenthesisPos=i;
      continue;
    }
    previousParenthesisPos=i;
    if (c != CharPool.OPEN_PARENTHESIS) {
      continue;
    }
    char previousChar=ifClause.charAt(i - 1);
    if ((previousChar != CharPool.OPEN_PARENTHESIS) && (previousChar != CharPool.SPACE)) {
      continue;
    }
    int j=i;
    while (true) {
      j=ifClause.indexOf(StringPool.CLOSE_PARENTHESIS,j + 1);
      String s=ifClause.substring(i + 1,j);
      if (getLevel(s) == 0) {
        char nextChar=ifClause.charAt(j + 1);
        if (((previousChar == CharPool.OPEN_PARENTHESIS) && (nextChar == CharPool.CLOSE_PARENTHESIS)) || (((nextChar == CharPool.CLOSE_PARENTHESIS) || (nextChar == CharPool.SPACE)) && hasRedundantParentheses(s))) {
          processMessage(fileName,"Redundant parentheses in if-statement",lineCount);
        }
        break;
      }
    }
  }
}
