{
  String originalLinePart=linePart;
  linePart=formatIncorrectSyntax(linePart,"catch(","catch (",true);
  linePart=formatIncorrectSyntax(linePart,"else{","else {",true);
  linePart=formatIncorrectSyntax(linePart,"for(","for (",true);
  linePart=formatIncorrectSyntax(linePart,"if(","if (",true);
  linePart=formatIncorrectSyntax(linePart,"while(","while (",true);
  linePart=formatIncorrectSyntax(linePart,"List <","List<",false);
  linePart=formatIncorrectSyntax(linePart,"){",") {",false);
  linePart=formatIncorrectSyntax(linePart,"]{","] {",false);
  if (javaSource) {
    linePart=formatIncorrectSyntax(linePart," [","[",false);
    linePart=formatIncorrectSyntax(linePart,"{ ","{",false);
    linePart=formatIncorrectSyntax(linePart," }","}",false);
    linePart=formatIncorrectSyntax(linePart," )",")",false);
    linePart=formatIncorrectSyntax(linePart,"( ","(",false);
  }
  if (!linePart.startsWith("##")) {
    for (int x=0; ; ) {
      x=linePart.indexOf(StringPool.DOUBLE_SPACE,x + 1);
      if (x == -1) {
        break;
      }
      if (ToolsUtil.isInsideQuotes(linePart,x)) {
        continue;
      }
      linePart=StringUtil.replaceFirst(linePart,StringPool.DOUBLE_SPACE,StringPool.SPACE,x);
    }
  }
  if (!javaSource) {
    line=StringUtil.replace(line,originalLinePart,linePart);
    return formatIncorrectSyntax(line,StringPool.SPACE + StringPool.TAB,StringPool.TAB,false);
  }
  for (int x=0; ; ) {
    x=linePart.indexOf(CharPool.EQUAL,x + 1);
    if (x == -1) {
      break;
    }
    if (ToolsUtil.isInsideQuotes(linePart,x)) {
      continue;
    }
    char c=linePart.charAt(x - 1);
    if (Character.isLetterOrDigit(c)) {
      linePart=StringUtil.replaceFirst(linePart,"="," =",x);
      break;
    }
    if (x == (linePart.length() - 1)) {
      break;
    }
    c=linePart.charAt(x + 1);
    if (Character.isLetterOrDigit(c)) {
      linePart=StringUtil.replaceFirst(linePart,"=","= ",x);
      break;
    }
  }
  if (!line.contains(StringPool.DOUBLE_SLASH)) {
    while (linePart.contains(StringPool.TAB)) {
      linePart=StringUtil.replaceLast(linePart,StringPool.TAB,StringPool.SPACE);
    }
  }
  if (line.contains(StringPool.DOUBLE_SLASH)) {
    line=StringUtil.replace(line,originalLinePart,linePart);
    return formatIncorrectSyntax(line,StringPool.SPACE + StringPool.TAB,StringPool.TAB,false);
  }
  int pos=linePart.indexOf(") ");
  if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT)&& !ToolsUtil.isInsideQuotes(linePart,pos)) {
    String linePart2=linePart.substring(pos + 2);
    if (Character.isLetter(linePart2.charAt(0)) && !linePart2.startsWith("default") && !linePart2.startsWith("instanceof")&& !linePart2.startsWith("throws")) {
      linePart=StringUtil.replaceFirst(linePart,StringPool.SPACE,StringPool.BLANK,pos);
    }
  }
  pos=linePart.indexOf(" (");
  if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart,pos)&& (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) {
    linePart=StringUtil.replaceFirst(linePart," (","(",pos);
  }
  for (int x=-1; ; ) {
    int posComma=linePart.indexOf(CharPool.COMMA,x + 1);
    int posSemicolon=linePart.indexOf(CharPool.SEMICOLON,x + 1);
    if ((posComma == -1) && (posSemicolon == -1)) {
      break;
    }
    x=Math.min(posComma,posSemicolon);
    if (x == -1) {
      x=Math.max(posComma,posSemicolon);
    }
    if (ToolsUtil.isInsideQuotes(linePart,x)) {
      continue;
    }
    if (linePart.length() > (x + 1)) {
      char nextChar=linePart.charAt(x + 1);
      if ((nextChar != CharPool.APOSTROPHE) && (nextChar != CharPool.CLOSE_PARENTHESIS) && (nextChar != CharPool.SPACE)&& (nextChar != CharPool.STAR)) {
        linePart=StringUtil.insert(linePart,StringPool.SPACE,x + 1);
      }
    }
    if (x > 0) {
      char previousChar=linePart.charAt(x - 1);
      if (previousChar == CharPool.SPACE) {
        linePart=linePart.substring(0,x - 1).concat(linePart.substring(x));
      }
    }
  }
  line=StringUtil.replace(line,originalLinePart,linePart);
  return formatIncorrectSyntax(line,StringPool.SPACE + StringPool.TAB,StringPool.TAB,false);
}
