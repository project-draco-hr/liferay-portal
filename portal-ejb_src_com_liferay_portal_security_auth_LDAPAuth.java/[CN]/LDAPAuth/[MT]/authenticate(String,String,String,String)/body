{
  boolean enabled=PrefsPropsUtil.getBoolean(companyId,PropsUtil.AUTH_IMPL_LDAP_ENABLED);
  if (!enabled) {
    if (_log.isDebugEnabled()) {
      _log.debug("Authenticator is not enabled");
    }
    return SUCCESS;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Authenticator is enabled");
  }
  Properties env=new Properties();
  String baseProviderURL=PrefsPropsUtil.getString(companyId,PropsUtil.AUTH_IMPL_LDAP_BASE_PROVIDER_URL);
  String baseDN=PrefsPropsUtil.getString(companyId,PropsUtil.AUTH_IMPL_LDAP_BASE_DN);
  env.put(Context.INITIAL_CONTEXT_FACTORY,PrefsPropsUtil.getString(companyId,PropsUtil.AUTH_IMPL_LDAP_FACTORY_INITIAL));
  env.put(Context.PROVIDER_URL,LDAPUtil.getFullProviderURL(baseProviderURL,baseDN));
  env.put(Context.SECURITY_PRINCIPAL,PrefsPropsUtil.getString(companyId,PropsUtil.AUTH_IMPL_LDAP_SECURITY_PRINCIPAL));
  env.put(Context.SECURITY_CREDENTIALS,PrefsPropsUtil.getString(companyId,PropsUtil.AUTH_IMPL_LDAP_SECURITY_CREDENTIALS));
  if (_log.isDebugEnabled()) {
    LogUtil.log(_log,env);
  }
  LdapContext ctx=null;
  try {
    ctx=new InitialLdapContext(env,null);
  }
 catch (  Exception e) {
    if (_log.isDebugEnabled()) {
      _log.debug("Failed to bind to the LDAP server");
    }
    return SUCCESS;
  }
  String filter=PrefsPropsUtil.getString(companyId,PropsUtil.AUTH_IMPL_LDAP_SEARCH_FILTER);
  if (_log.isDebugEnabled()) {
    _log.debug("Search filter before transformation " + filter);
  }
  filter=StringUtil.replace(filter,new String[]{"@company_id@","@email_address@","@user_id@"},new String[]{companyId,emailAddress,userId});
  if (_log.isDebugEnabled()) {
    _log.debug("Search filter after transformation " + filter);
  }
  try {
    SearchControls cons=new SearchControls(SearchControls.SUBTREE_SCOPE,1,0,null,false,false);
    NamingEnumeration enu=ctx.search(StringPool.BLANK,filter,cons);
    if (enu.hasMore()) {
      if (_log.isDebugEnabled()) {
        _log.debug("Search filter returned at least one result");
      }
      Binding binding=(Binding)enu.next();
      Attributes attrs=ctx.getAttributes(binding.getName());
      Properties userMappings=PropertiesUtil.load(PrefsPropsUtil.getString(companyId,PropsUtil.AUTH_IMPL_LDAP_USER_MAPPINGS));
      if (_log.isDebugEnabled()) {
        LogUtil.log(_log,userMappings);
      }
      String creatorUserId=null;
      boolean autoUserId=false;
      if (Validator.isNull(userId)) {
        userId=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("userId"));
      }
      boolean autoPassword=false;
      String password1=password;
      String password2=password;
      boolean passwordReset=false;
      if (Validator.isNull(emailAddress)) {
        emailAddress=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("emailAddress"));
      }
      Locale locale=Locale.US;
      String firstName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("firstName"));
      String middleName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("middleName"));
      String lastName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("lastName"));
      if (Validator.isNull(firstName) || Validator.isNull(lastName)) {
        String fullName=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("fullName"));
        String[] names=LDAPUtil.splitFullName(fullName);
        firstName=names[0];
        middleName=names[1];
        lastName=names[2];
      }
      String nickName=null;
      String prefixId=null;
      String suffixId=null;
      boolean male=true;
      int birthdayMonth=Calendar.JANUARY;
      int birthdayDay=1;
      int birthdayYear=1970;
      String jobTitle=LDAPUtil.getAttributeValue(attrs,userMappings.getProperty("jobTitle"));
      String organizationId=null;
      String locationId=null;
      boolean sendEmail=false;
      Attribute userPassword=attrs.get("userPassword");
      boolean authenticated=_authenticate(ctx,env,binding,baseDN,userPassword,password,companyId,userId,emailAddress);
      if (!authenticated) {
        return _authenticateRequired(companyId,userId,emailAddress,DNE);
      }
      LDAPImportUtil.addOrUpdateUser(creatorUserId,companyId,autoUserId,userId,autoPassword,password1,password2,passwordReset,emailAddress,locale,firstName,middleName,lastName,nickName,prefixId,suffixId,male,birthdayMonth,birthdayDay,birthdayYear,jobTitle,organizationId,locationId,sendEmail,true,false);
    }
 else {
      if (_log.isDebugEnabled()) {
        _log.debug("Search filter did not return any results");
      }
      return _authenticateRequired(companyId,userId,emailAddress,DNE);
    }
  }
 catch (  Exception e) {
    _log.warn("Problem accessing LDAP server");
    return _authenticateRequired(companyId,userId,emailAddress,FAILURE);
  }
  return SUCCESS;
}
