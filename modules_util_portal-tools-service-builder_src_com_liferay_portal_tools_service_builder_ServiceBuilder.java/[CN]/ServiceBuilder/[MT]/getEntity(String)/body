{
  Entity entity=_entityPool.get(name);
  if (entity != null) {
    return entity;
  }
  int pos=name.lastIndexOf(".");
  if (pos == -1) {
    pos=_ejbList.indexOf(new Entity(name));
    if (pos == -1) {
      throw new ServiceBuilderException("Unable to find " + name + " in "+ ListUtil.toString(_ejbList,Entity.NAME_ACCESSOR));
    }
    entity=_ejbList.get(pos);
    _entityPool.put(name,entity);
    return entity;
  }
  String refPackage=name.substring(0,pos);
  String refEntity=name.substring(pos + 1);
  if (refPackage.equals(_packagePath)) {
    pos=_ejbList.indexOf(new Entity(refEntity));
    if (pos == -1) {
      throw new ServiceBuilderException("Unable to find " + refEntity + " in "+ ListUtil.toString(_ejbList,Entity.NAME_ACCESSOR));
    }
    entity=_ejbList.get(pos);
    _entityPool.put(name,entity);
    return entity;
  }
  String refPackageDirName=StringUtil.replace(refPackage,".","/");
  String refFileName=_implDirName + "/" + refPackageDirName+ "/service.xml";
  File refFile=new File(refFileName);
  boolean useTempFile=false;
  if (!refFile.exists()) {
    refFileName=String.valueOf(System.currentTimeMillis());
    refFile=new File(_TMP_DIR,refFileName);
    ClassLoader classLoader=getClass().getClassLoader();
    String refContent=null;
    try {
      refContent=StringUtil.read(classLoader,refPackageDirName + "/service.xml");
    }
 catch (    IOException ioe) {
      throw new ServiceBuilderException("Unable to find " + refEntity + " in "+ ListUtil.toString(_ejbList,Entity.NAME_ACCESSOR));
    }
    _write(refFile,refContent);
    useTempFile=true;
  }
  ServiceBuilder serviceBuilder=new ServiceBuilder(_apiDirName,_autoImportDefaultReferences,_autoNamespaceTables,_beanLocatorUtil,_buildNumber,_buildNumberIncrement,_hbmFileName,_implDirName,refFile.getAbsolutePath(),_modelHintsFileName,_osgiModule,_pluginName,_propsUtil,_readOnlyPrefixes,_resourceActionModels,_resourcesDirName,_springFileName,_springNamespaces,_sqlDirName,_sqlFileName,_sqlIndexesFileName,_sqlSequencesFileName,_targetEntityName,_testDirName,false);
  entity=serviceBuilder.getEntity(refEntity);
  entity.setPortalReference(useTempFile);
  _entityPool.put(name,entity);
  _modifiedFileNames.addAll(serviceBuilder.getModifiedFileNames());
  if (useTempFile) {
    refFile.deleteOnExit();
  }
  return entity;
}
