{
  File sqlDir=new File(_sqlDirName);
  if (!sqlDir.exists()) {
    return;
  }
  File sqlFile=new File(_sqlDirName + "/" + _sqlSequencesFileName);
  if (!sqlFile.exists()) {
    _touch(sqlFile);
  }
  Set<String> sequenceSQLs=new TreeSet<>();
  try (UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new FileReader(sqlFile))){
    while (true) {
      String sequenceSQL=unsyncBufferedReader.readLine();
      if (sequenceSQL == null) {
        break;
      }
      if (Validator.isNotNull(sequenceSQL)) {
        sequenceSQLs.add(sequenceSQL);
      }
    }
  }
   for (int i=0; i < _ejbList.size(); i++) {
    Entity entity=_ejbList.get(i);
    if (!_isTargetEntity(entity)) {
      continue;
    }
    if (!entity.isDefaultDataSource()) {
      continue;
    }
    List<EntityColumn> columnList=entity.getColumnList();
    for (int j=0; j < columnList.size(); j++) {
      EntityColumn column=columnList.get(j);
      if ("sequence".equals(column.getIdType())) {
        StringBundler sb=new StringBundler();
        String sequenceName=column.getIdParam();
        if (sequenceName.length() > 30) {
          sequenceName=sequenceName.substring(0,30);
        }
        sb.append("create sequence ");
        sb.append(sequenceName);
        sb.append(";");
        String sequenceSQL=sb.toString();
        if (!sequenceSQLs.contains(sequenceSQL)) {
          sequenceSQLs.add(sequenceSQL);
        }
      }
    }
  }
  StringBundler sb=new StringBundler(sequenceSQLs.size() * 2);
  for (  String sequenceSQL : sequenceSQLs) {
    sb.append(sequenceSQL);
    sb.append("\n");
  }
  if (!sequenceSQLs.isEmpty()) {
    sb.setIndex(sb.index() - 1);
  }
  writeFileRaw(sqlFile,sb.toString(),_modifiedFileNames);
}
