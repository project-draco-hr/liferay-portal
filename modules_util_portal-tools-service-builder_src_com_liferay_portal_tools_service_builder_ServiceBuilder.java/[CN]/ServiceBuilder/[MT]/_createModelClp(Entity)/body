{
  if (Validator.isNull(_pluginName)) {
    return;
  }
  JavaClass modelImplJavaClass=_getJavaClass(_outputPath + "/model/impl/" + entity.getName()+ "Impl.java");
  Map<String,JavaMethod> methods=new HashMap<>();
  for (  JavaMethod method : modelImplJavaClass.getMethods()) {
    methods.put(method.getDeclarationSignature(false),method);
  }
  Type superClass=modelImplJavaClass.getSuperClass();
  String superClassValue=superClass.getValue();
  while (!superClassValue.endsWith("BaseModelImpl")) {
    int pos=superClassValue.lastIndexOf(StringPool.PERIOD);
    if (pos > 0) {
      superClassValue=superClassValue.substring(pos + 1);
    }
    JavaClass javaClass=_getJavaClass(_outputPath + "/model/impl/" + superClassValue+ ".java");
    for (    JavaMethod method : _getMethods(javaClass)) {
      methods.remove(method.getDeclarationSignature(false));
    }
    superClass=javaClass.getSuperClass();
    superClassValue=superClass.getValue();
  }
  Map<String,Object> context=_getContext();
  context.put("entity",entity);
  context.put("methods",methods.values());
  String content=_processTemplate(_tplModelClp,context);
  File modelFile=new File(_serviceOutputPath + "/model/" + entity.getName()+ "Clp.java");
  ToolsUtil.writeFile(modelFile,content,_author,_modifiedFileNames);
}
