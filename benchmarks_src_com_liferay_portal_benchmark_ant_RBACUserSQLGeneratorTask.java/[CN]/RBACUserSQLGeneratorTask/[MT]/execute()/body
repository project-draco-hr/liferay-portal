{
  super.execute();
  initialize();
  log("Generating " + _numUsers + " users for "+ _version+ " on "+ _database);
  Writer sqlWriter=null;
  Writer testLoginWriter=null;
  try {
    sqlWriter=new BufferedWriter(new FileWriter(_sqlOutput));
    testLoginWriter=new BufferedWriter(new FileWriter(_testLoginOutput));
    int counter=0;
    ModelBuilderContext context=new ModelBuilderContext();
    for (    String lastName : _lastNames) {
      for (      String firstName : _firstNames) {
        context.put(ModelBuilderConstants.FIRST_NAME_KEY,firstName);
        context.put(ModelBuilderConstants.LAST_NAME_KEY,lastName);
        context.put(ModelBuilderConstants.PASSWORD_KEY,_defaultPassword);
        context.put(ModelBuilderConstants.DOMAIN_KEY,_domain);
        Map<String,Object> templateContext=_builder.createProducts(context);
        FreeMarkerUtil.process(_createUserSQLTemplate,templateContext,sqlWriter);
        FreeMarkerUtil.process(_userListTemplate,templateContext,testLoginWriter);
        counter++;
        if (counter >= _numUsers) {
          return;
        }
        testLoginWriter.flush();
        sqlWriter.flush();
      }
    }
    Map<String,Object> counters=new HashMap<String,Object>();
    counters.put("counters",_idGenerator.report());
    FreeMarkerUtil.process(_updateIdTemplate,counters,sqlWriter);
    sqlWriter.flush();
  }
 catch (  Exception e) {
    throw new BuildException(e);
  }
 finally {
    log("Completed users.  " + _idGenerator.report());
    if (testLoginWriter != null) {
      try {
        testLoginWriter.flush();
        testLoginWriter.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (sqlWriter != null) {
      try {
        sqlWriter.flush();
        sqlWriter.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}
