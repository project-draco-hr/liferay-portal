{
  if (types == null) {
    types=new String[0];
  }
 else   if (types.length > 1) {
    types=ArrayUtil.distinct(types,NULL_SAFE_STRING_COMPARATOR);
    Arrays.sort(types,NULL_SAFE_STRING_COMPARATOR);
  }
  if (types.length == 1) {
    return findByR_P_T(repositoryId,parentFolderId,types[0],start,end,orderByComparator);
  }
  boolean pagination=true;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    pagination=false;
    finderArgs=new Object[]{repositoryId,parentFolderId,StringUtil.merge(types)};
  }
 else {
    finderArgs=new Object[]{repositoryId,parentFolderId,StringUtil.merge(types),start,end,orderByComparator};
  }
  List<SyncDLObject> list=null;
  if (retrieveFromCache) {
    list=(List<SyncDLObject>)finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_R_P_T,finderArgs,this);
    if ((list != null) && !list.isEmpty()) {
      for (      SyncDLObject syncDLObject : list) {
        if ((repositoryId != syncDLObject.getRepositoryId()) || (parentFolderId != syncDLObject.getParentFolderId()) || !ArrayUtil.contains(types,syncDLObject.getType())) {
          list=null;
          break;
        }
      }
    }
  }
  if (list == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_SELECT_SYNCDLOBJECT_WHERE);
    query.append(_FINDER_COLUMN_R_P_T_REPOSITORYID_2);
    query.append(_FINDER_COLUMN_R_P_T_PARENTFOLDERID_2);
    if (types.length > 0) {
      query.append(StringPool.OPEN_PARENTHESIS);
      for (int i=0; i < types.length; i++) {
        String type=types[i];
        if (type == null) {
          query.append(_FINDER_COLUMN_R_P_T_TYPE_1);
        }
 else         if (type.equals(StringPool.BLANK)) {
          query.append(_FINDER_COLUMN_R_P_T_TYPE_3);
        }
 else {
          query.append(_FINDER_COLUMN_R_P_T_TYPE_2);
        }
        if ((i + 1) < types.length) {
          query.append(WHERE_OR);
        }
      }
      query.append(StringPool.CLOSE_PARENTHESIS);
    }
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else     if (pagination) {
      query.append(SyncDLObjectModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(repositoryId);
      qPos.add(parentFolderId);
      for (      String type : types) {
        if ((type != null) && !type.isEmpty()) {
          qPos.add(type);
        }
      }
      if (!pagination) {
        list=(List<SyncDLObject>)QueryUtil.list(q,getDialect(),start,end,false);
        Collections.sort(list);
        list=Collections.unmodifiableList(list);
      }
 else {
        list=(List<SyncDLObject>)QueryUtil.list(q,getDialect(),start,end);
      }
      cacheResult(list);
      finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_R_P_T,finderArgs,list);
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_R_P_T,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return list;
}
