{
  if (!MapUtil.getBoolean(_parameterMap,PortletDataHandlerKeys.PERMISSIONS)) {
    return;
  }
  List<KeyValuePair> permissions=_permissionsMap.get(getPrimaryKeyString(resourceName,resourcePK));
  if (permissions == null) {
    return;
  }
  Map<Long,Set<String>> existingRoleIdsToActionIds=ExportImportPermissionUtil.getRoleIdsToActionIds(_companyId,resourceName,resourcePK);
  Map<Long,String[]> importedRoleIdsToActionIds=new HashMap<>();
  for (  KeyValuePair permission : permissions) {
    String roleName=permission.getKey();
    Role role=null;
    Team team=null;
    if (ExportImportPermissionUtil.isTeamRoleName(roleName)) {
      roleName=roleName.substring(ExportImportPermissionUtil.ROLE_TEAM_PREFIX.length());
      try {
        team=TeamLocalServiceUtil.getTeam(_groupId,roleName);
      }
 catch (      NoSuchTeamException nste) {
        if (_log.isWarnEnabled()) {
          _log.warn("Team " + roleName + " does not exist");
        }
        continue;
      }
    }
    try {
      if (team != null) {
        role=RoleLocalServiceUtil.getTeamRole(_companyId,team.getTeamId());
      }
 else {
        role=RoleLocalServiceUtil.getRole(_companyId,roleName);
      }
    }
 catch (    NoSuchRoleException nsre) {
      if (_log.isWarnEnabled()) {
        _log.warn("Role " + roleName + " does not exist");
      }
      continue;
    }
    if (isPrivateLayout() && resourceName.equals(Layout.class.getName()) && roleName.equals(RoleConstants.GUEST)) {
      continue;
    }
    String[] actionIds=StringUtil.split(permission.getValue());
    importedRoleIdsToActionIds.put(role.getRoleId(),actionIds);
  }
  Map<Long,String[]> roleIdsToActionIds=ExportImportPermissionUtil.mergeImportedPermissionsWithExistingPermissions(existingRoleIdsToActionIds,importedRoleIdsToActionIds);
  ExportImportPermissionUtil.updateResourcePermissions(_companyId,_groupId,resourceName,newResourcePK,roleIdsToActionIds);
}
