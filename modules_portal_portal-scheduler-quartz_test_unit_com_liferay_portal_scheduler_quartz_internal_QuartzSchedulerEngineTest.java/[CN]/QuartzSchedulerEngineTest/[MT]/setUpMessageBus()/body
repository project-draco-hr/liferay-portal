{
  MessageBus messageBus=Mockito.mock(MessageBus.class);
  _synchronousDestination=new SynchronousDestination();
  _synchronousDestination.setName(_TEST_DESTINATION_NAME);
  messageBus.addDestination(_synchronousDestination);
  Mockito.when(messageBus.getDestination(Matchers.anyString())).then(new Answer<Destination>(){
    @Override public Destination answer(    InvocationOnMock invocationOnMock) throws Throwable {
      String destinationName=(String)invocationOnMock.getArguments()[0];
      if (!Validator.equals(_synchronousDestination.getName(),destinationName)) {
        throw new IllegalArgumentException("Invalid destination: " + destinationName);
      }
      return _synchronousDestination;
    }
  }
);
  Mockito.when(messageBus.registerMessageListener(Matchers.anyString(),Matchers.any(MessageListener.class))).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {
      _synchronousDestination.register((MessageListener)invocationOnMock.getArguments()[1]);
      return true;
    }
  }
);
  Mockito.when(messageBus.unregisterMessageListener(Matchers.anyString(),Matchers.any(MessageListener.class))).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {
      _synchronousDestination.unregister((MessageListener)invocationOnMock.getArguments()[1]);
      return true;
    }
  }
);
  return messageBus;
}
