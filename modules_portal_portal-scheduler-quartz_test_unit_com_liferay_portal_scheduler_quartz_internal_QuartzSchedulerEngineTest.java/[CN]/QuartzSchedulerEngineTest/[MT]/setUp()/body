{
  Thread currentThread=Thread.currentThread();
  ClassLoader currentClassLoader=currentThread.getContextClassLoader();
  PortalClassLoaderUtil.setClassLoader(currentClassLoader);
  _jsonFactory=Mockito.mock(JSONFactory.class);
  Mockito.when(_jsonFactory.deserialize(Mockito.anyString())).then(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      String base64=(String)invocationOnMock.getArguments()[0];
      byte[] bytes=Base64.decode(base64);
      ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
      ObjectInputStream ois=new ObjectInputStream(bais);
      return ois.readObject();
    }
  }
);
  Mockito.when(_jsonFactory.serialize(Mockito.anyObject())).then(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocationOnMock) throws Throwable {
      Object obj=invocationOnMock.getArguments()[0];
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      ObjectOutputStream oos=new ObjectOutputStream(baos);
      oos.writeObject(obj);
      byte[] bytes=baos.toByteArray();
      oos.close();
      return Base64.encode(bytes);
    }
  }
);
  MessageBus messageBus=Mockito.mock(MessageBus.class);
  Mockito.when(messageBus.getDestination(Matchers.anyString())).then(new Answer<Destination>(){
    @Override public Destination answer(    InvocationOnMock invocationOnMock) throws Throwable {
      String destinationName=(String)invocationOnMock.getArguments()[0];
      if (!Validator.equals(_synchronousDestination.getName(),destinationName)) {
        throw new IllegalArgumentException("Invalid destination: " + destinationName);
      }
      return _synchronousDestination;
    }
  }
);
  Mockito.when(messageBus.registerMessageListener(Matchers.anyString(),Matchers.any(MessageListener.class))).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {
      _synchronousDestination.register((MessageListener)invocationOnMock.getArguments()[1]);
      return true;
    }
  }
);
  Mockito.when(messageBus.unregisterMessageListener(Matchers.anyString(),Matchers.any(MessageListener.class))).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {
      _synchronousDestination.unregister((MessageListener)invocationOnMock.getArguments()[1]);
      return true;
    }
  }
);
  _synchronousDestination=new SynchronousDestination();
  _synchronousDestination.setName(_TEST_DESTINATION_NAME);
  messageBus.addDestination(_synchronousDestination);
  PortalUUID portalUUID=Mockito.mock(PortalUUID.class);
  Mockito.when(portalUUID.generate()).then(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocationOnMock) throws Throwable {
      UUID uuid=new UUID(SecureRandomUtil.nextLong(),SecureRandomUtil.nextLong());
      return uuid.toString();
    }
  }
);
  PortalUUIDUtil portalUUIDUtil=new PortalUUIDUtil();
  portalUUIDUtil.setPortalUUID(portalUUID);
  Props props=Mockito.mock(Props.class);
  Mockito.when(props.get(PropsKeys.SCHEDULER_ENABLED)).thenReturn("true");
  PortletLocalService portletLocalService=Mockito.mock(PortletLocalService.class);
  Mockito.when(portletLocalService.getPortletById(Mockito.anyString())).then(new Answer<Portlet>(){
    @Override public Portlet answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ServletContext servletContext=Mockito.mock(ServletContext.class);
      Mockito.when(servletContext.getClassLoader()).thenReturn(Thread.currentThread().getContextClassLoader());
      PortletApp portletApp=Mockito.mock(PortletApp.class);
      Mockito.when(portletApp.getServletContext()).thenReturn(servletContext);
      Portlet portlet=Mockito.mock(Portlet.class);
      Mockito.when(portlet.getPortletApp()).thenReturn(portletApp);
      return portlet;
    }
  }
);
  Mockito.when(props.get(PropsKeys.SCHEDULER_ENABLED)).thenReturn("true");
  _quartzSchedulerEngine=new QuartzSchedulerEngine();
  _quartzSchedulerEngine.setJsonFactory(_jsonFactory);
  _quartzSchedulerEngine.setMessageBus(messageBus);
  _quartzSchedulerEngine.setPortletLocalService(portletLocalService);
  _quartzSchedulerEngine.setProps(props);
  ReflectionTestUtil.setFieldValue(_quartzSchedulerEngine,"_memoryScheduler",new MockScheduler(StorageType.MEMORY,_MEMORY_TEST_GROUP_NAME));
  ReflectionTestUtil.setFieldValue(_quartzSchedulerEngine,"_persistedScheduler",new MockScheduler(StorageType.PERSISTED,_PERSISTED_TEST_GROUP_NAME));
  _quartzSchedulerEngine.start();
}
