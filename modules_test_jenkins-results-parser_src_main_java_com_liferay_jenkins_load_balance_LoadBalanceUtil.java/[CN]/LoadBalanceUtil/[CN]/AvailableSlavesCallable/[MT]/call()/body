{
  JSONObject computerJSONObject=null;
  JSONObject queueJSONObject=null;
  try {
    computerJSONObject=JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(url + "/computer/api/json?pretty&tree=computer" + "[displayName,idle,offline]"),false,5000);
    queueJSONObject=JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(url + "/queue/api/json?pretty"),false,5000);
  }
 catch (  Exception e) {
    System.out.println("Unable to read " + url);
    return null;
  }
  JSONArray jsonArray=computerJSONObject.getJSONArray("computer");
  int idle=0;
  for (int i=0; i < jsonArray.length(); i++) {
    JSONObject idleJSONObject=jsonArray.getJSONObject(i);
    if (idleJSONObject.getBoolean("idle") && !idleJSONObject.getBoolean("offline")) {
      String displayName=idleJSONObject.getString("displayName");
      if (!displayName.equals("master")) {
        idle++;
      }
    }
  }
  int queue=0;
  if (queueJSONObject.has("items")) {
    JSONArray itemsJsonArray=queueJSONObject.getJSONArray("items");
    queue=itemsJsonArray.length();
  }
  int available=idle - queue;
  if (recentJobs != null) {
    available-=recentJobs;
  }
  StringBuilder sb=new StringBuilder();
  sb.append("{available=");
  sb.append(available);
  sb.append(", idle=");
  sb.append(idle);
  sb.append(", queue=");
  sb.append(queue);
  sb.append(", recentJobs=");
  sb.append(recentJobs);
  sb.append(", url=");
  sb.append(url);
  sb.append("}");
  System.out.println(sb.toString());
  return available;
}
