{
  String baseInvocationUrl=project.getProperty("base.invocation.url");
  String hostNamePrefix=getHostNamePrefix(baseInvocationUrl);
  if (hostNamePrefix.equals(baseInvocationUrl)) {
    return baseInvocationUrl;
  }
  int maxHostNames=calculateMaxHostNames(project,hostNamePrefix);
  File file=new File(project.getProperty("jenkins.shared.dir") + "/" + hostNamePrefix+ ".semaphore");
  waitForTurn(file,maxHostNames);
  JenkinsResultsParserUtil.write(file,myHostName);
  try {
    List<String> hostNameList=new ArrayList<>(maxHostNames);
    List<FutureTask<Integer>> taskList=new ArrayList<>(maxHostNames);
    startParallelTasks(hostNameList,hostNamePrefix,maxHostNames,project,taskList);
    List<Integer> badIndicies=new ArrayList<>(taskList.size());
    List<Integer> maxIndicies=new ArrayList<>(taskList.size());
    int maxResult=0;
    for (int i=0; i < taskList.size(); i++) {
      FutureTask<Integer> task=taskList.get(i);
      Integer result=task.get();
      System.out.println(hostNameList.get(i) + " : " + result);
      if (result == -1) {
        badIndicies.add(i);
        continue;
      }
      if (result > maxResult) {
        maxResult=result;
        maxIndicies.clear();
      }
      if (result >= maxResult) {
        maxIndicies.add(i);
      }
    }
    if (badIndicies.size() == maxHostNames) {
      throw new IllegalStateException("SEVERE: All hosts failed to respond.");
    }
    int x=-1;
    if (maxIndicies.size() > 0) {
      x=maxIndicies.get(getRandomValue(0,maxIndicies.size() - 1));
    }
 else {
      while (true) {
        x=getRandomValue(0,maxHostNames - 1);
        if (badIndicies.contains(x)) {
          continue;
        }
        break;
      }
    }
    System.out.println("Most available master: " + hostNameList.get(x) + " with "+ maxResult+ " available slaves.");
    return hostNameList.get(x);
  }
  finally {
    JenkinsResultsParserUtil.write(file,"");
  }
}
