{
  final Registry registry=RegistryUtil.getRegistry();
  final Holder<ServiceReferenceServiceTuple<S>> tupleHolder=new Holder<ServiceReferenceServiceTuple<S>>();
  _serviceReferenceMapper.map(serviceReference,new ServiceReferenceMapper.Emitter<K>(){
    @Override public void emit(    K key){
      ServiceTrackerBucket<S,R> serviceTrackerBucket=_serviceTrackerBuckets.get(key);
      if (serviceTrackerBucket == null) {
        ServiceTrackerBucket<S,R> newServiceTrackerBucket=_serviceTrackerMapBucketFactory.create();
        serviceTrackerBucket=_serviceTrackerBuckets.putIfAbsent(key,newServiceTrackerBucket);
        if (serviceTrackerBucket == null) {
          serviceTrackerBucket=newServiceTrackerBucket;
        }
      }
      ServiceReferenceServiceTuple<S> serviceReferenceServiceTuple=tupleHolder.get();
      if (serviceReferenceServiceTuple == null) {
        S service=registry.getService(serviceReference);
        serviceReferenceServiceTuple=new ServiceReferenceServiceTuple<S>(serviceReference,service);
        tupleHolder.set(serviceReferenceServiceTuple);
      }
      serviceTrackerBucket.store(serviceReferenceServiceTuple);
    }
  }
);
  return tupleHolder.get();
}
