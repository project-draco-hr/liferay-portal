{
  final Holder<ServiceReferenceServiceTuple<SR,TS>> holder=new Holder<ServiceReferenceServiceTuple<SR,TS>>();
  _serviceReferenceMapper.map(serviceReference,new ServiceReferenceMapper.Emitter<K>(){
    @Override public void emit(    K key){
      ServiceTrackerBucket<SR,TS,R> serviceTrackerBucket=_serviceTrackerBuckets.get(key);
      if (serviceTrackerBucket == null) {
        ServiceTrackerBucket<SR,TS,R> newServiceTrackerBucket=_serviceTrackerMapBucketFactory.create();
        serviceTrackerBucket=_serviceTrackerBuckets.putIfAbsent(key,newServiceTrackerBucket);
        if (serviceTrackerBucket == null) {
          serviceTrackerBucket=newServiceTrackerBucket;
        }
      }
      ServiceReferenceServiceTuple<SR,TS> serviceReferenceServiceTuple=holder.get();
      if (serviceReferenceServiceTuple == null) {
        TS service=_serviceTrackerCustomizer.addingService(serviceReference);
        serviceReferenceServiceTuple=new ServiceReferenceServiceTuple<SR,TS>(serviceReference,service);
        holder.set(serviceReferenceServiceTuple);
      }
      serviceTrackerBucket.store(serviceReferenceServiceTuple);
    }
  }
);
  return holder.get();
}
