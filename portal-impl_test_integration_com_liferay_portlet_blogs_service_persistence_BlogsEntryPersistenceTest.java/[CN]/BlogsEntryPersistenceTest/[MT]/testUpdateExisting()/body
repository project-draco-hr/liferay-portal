{
  long pk=ServiceTestUtil.nextLong();
  BlogsEntry newBlogsEntry=_persistence.create(pk);
  newBlogsEntry.setUuid(ServiceTestUtil.randomString());
  newBlogsEntry.setGroupId(ServiceTestUtil.nextLong());
  newBlogsEntry.setCompanyId(ServiceTestUtil.nextLong());
  newBlogsEntry.setUserId(ServiceTestUtil.nextLong());
  newBlogsEntry.setUserName(ServiceTestUtil.randomString());
  newBlogsEntry.setCreateDate(ServiceTestUtil.nextDate());
  newBlogsEntry.setModifiedDate(ServiceTestUtil.nextDate());
  newBlogsEntry.setTitle(ServiceTestUtil.randomString());
  newBlogsEntry.setUrlTitle(ServiceTestUtil.randomString());
  newBlogsEntry.setDescription(ServiceTestUtil.randomString());
  newBlogsEntry.setContent(ServiceTestUtil.randomString());
  newBlogsEntry.setDisplayDate(ServiceTestUtil.nextDate());
  newBlogsEntry.setAllowPingbacks(ServiceTestUtil.randomBoolean());
  newBlogsEntry.setAllowTrackbacks(ServiceTestUtil.randomBoolean());
  newBlogsEntry.setTrackbacks(ServiceTestUtil.randomString());
  newBlogsEntry.setSmallImage(ServiceTestUtil.randomBoolean());
  newBlogsEntry.setSmallImageId(ServiceTestUtil.nextLong());
  newBlogsEntry.setSmallImageURL(ServiceTestUtil.randomString());
  newBlogsEntry.setStatus(ServiceTestUtil.nextInt());
  newBlogsEntry.setStatusByUserId(ServiceTestUtil.nextLong());
  newBlogsEntry.setStatusByUserName(ServiceTestUtil.randomString());
  newBlogsEntry.setStatusDate(ServiceTestUtil.nextDate());
  _persistence.update(newBlogsEntry);
  BlogsEntry existingBlogsEntry=_persistence.findByPrimaryKey(newBlogsEntry.getPrimaryKey());
  Assert.assertEquals(existingBlogsEntry.getUuid(),newBlogsEntry.getUuid());
  Assert.assertEquals(existingBlogsEntry.getEntryId(),newBlogsEntry.getEntryId());
  Assert.assertEquals(existingBlogsEntry.getGroupId(),newBlogsEntry.getGroupId());
  Assert.assertEquals(existingBlogsEntry.getCompanyId(),newBlogsEntry.getCompanyId());
  Assert.assertEquals(existingBlogsEntry.getUserId(),newBlogsEntry.getUserId());
  Assert.assertEquals(existingBlogsEntry.getUserName(),newBlogsEntry.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingBlogsEntry.getCreateDate()),Time.getShortTimestamp(newBlogsEntry.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingBlogsEntry.getModifiedDate()),Time.getShortTimestamp(newBlogsEntry.getModifiedDate()));
  Assert.assertEquals(existingBlogsEntry.getTitle(),newBlogsEntry.getTitle());
  Assert.assertEquals(existingBlogsEntry.getUrlTitle(),newBlogsEntry.getUrlTitle());
  Assert.assertEquals(existingBlogsEntry.getDescription(),newBlogsEntry.getDescription());
  Assert.assertEquals(existingBlogsEntry.getContent(),newBlogsEntry.getContent());
  Assert.assertEquals(Time.getShortTimestamp(existingBlogsEntry.getDisplayDate()),Time.getShortTimestamp(newBlogsEntry.getDisplayDate()));
  Assert.assertEquals(existingBlogsEntry.getAllowPingbacks(),newBlogsEntry.getAllowPingbacks());
  Assert.assertEquals(existingBlogsEntry.getAllowTrackbacks(),newBlogsEntry.getAllowTrackbacks());
  Assert.assertEquals(existingBlogsEntry.getTrackbacks(),newBlogsEntry.getTrackbacks());
  Assert.assertEquals(existingBlogsEntry.getSmallImage(),newBlogsEntry.getSmallImage());
  Assert.assertEquals(existingBlogsEntry.getSmallImageId(),newBlogsEntry.getSmallImageId());
  Assert.assertEquals(existingBlogsEntry.getSmallImageURL(),newBlogsEntry.getSmallImageURL());
  Assert.assertEquals(existingBlogsEntry.getStatus(),newBlogsEntry.getStatus());
  Assert.assertEquals(existingBlogsEntry.getStatusByUserId(),newBlogsEntry.getStatusByUserId());
  Assert.assertEquals(existingBlogsEntry.getStatusByUserName(),newBlogsEntry.getStatusByUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingBlogsEntry.getStatusDate()),Time.getShortTimestamp(newBlogsEntry.getStatusDate()));
}
