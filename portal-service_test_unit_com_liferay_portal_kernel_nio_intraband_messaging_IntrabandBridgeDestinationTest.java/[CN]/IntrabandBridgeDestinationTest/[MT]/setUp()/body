{
  _messageBus=new DefaultMessageBus();
  MessageBusUtil.init(_messageBus,null,null);
  _baseDestination=new SynchronousDestination();
  _baseDestination.setName(IntrabandBridgeDestinationTest.class.getName());
  _intrabandBridgeDestination=new IntrabandBridgeDestination(_baseDestination);
  _mockIntraband=new MockIntraband(){
    @Override public Datagram sendSyncDatagram(    RegistrationReference registrationReference,    Datagram datagram) throws IOException {
      if (_throwRuntimeException) {
        throw new IOException("Unable to send");
      }
      ByteBuffer byteBuffer=datagram.getDataByteBuffer();
      try {
        MessageRoutingBag receivedMessageRoutingBag=MessageRoutingBag.fromByteArray(byteBuffer.array());
        Message receivedMessage=receivedMessageRoutingBag.getMessage();
        receivedMessage.put(_RECEIVE_KEY,_RECEIVE_VALUE);
        return Datagram.createResponseDatagram(datagram,receivedMessageRoutingBag.toByteArray());
      }
 catch (      ClassNotFoundException cnfe) {
        throw new IOException(cnfe);
      }
    }
  }
;
  _mockRegistrationReference=new MockRegistrationReference(_mockIntraband);
}
