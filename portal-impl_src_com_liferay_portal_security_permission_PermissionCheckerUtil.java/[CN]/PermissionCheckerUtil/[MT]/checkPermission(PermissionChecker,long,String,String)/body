{
  if (name.equals(BlogsEntry.class.getName())) {
    BlogsEntryPermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(BookmarksEntry.class.getName())) {
    BookmarksEntryPermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(BookmarksFolder.class.getName())) {
    BookmarksFolderPermission.check(permissionChecker,groupId,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(CalEvent.class.getName())) {
    CalEventPermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(DLFileEntry.class.getName())) {
    DLFileEntryPermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(DLFolder.class.getName())) {
    DLFolderPermission.check(permissionChecker,groupId,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(Group.class.getName())) {
    GroupPermissionUtil.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(JournalArticle.class.getName())) {
    JournalArticlePermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(JournalFeed.class.getName())) {
    JournalFeedPermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(JournalStructure.class.getName())) {
    JournalStructurePermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(JournalTemplate.class.getName())) {
    JournalTemplatePermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(Layout.class.getName())) {
    LayoutPermissionUtil.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(MBCategory.class.getName())) {
    MBCategoryPermission.check(permissionChecker,groupId,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(MBMessage.class.getName())) {
    MBMessagePermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(PollsQuestion.class.getName())) {
    PollsQuestionPermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(SCFrameworkVersion.class.getName())) {
    SCFrameworkVersionPermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(SCProductEntry.class.getName())) {
    SCProductEntryPermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(ShoppingCategory.class.getName())) {
    ShoppingCategoryPermission.check(permissionChecker,groupId,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(ShoppingItem.class.getName())) {
    ShoppingItemPermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(Team.class.getName())) {
    long teamId=GetterUtil.getLong(primKey);
    Team team=TeamServiceUtil.getTeam(teamId);
    GroupPermissionUtil.check(permissionChecker,team.getGroupId(),ActionKeys.MANAGE_TEAMS);
  }
 else   if (name.equals(User.class.getName())) {
    long userId=GetterUtil.getLong(primKey);
    User user=UserServiceUtil.getUserById(userId);
    UserPermissionUtil.check(permissionChecker,userId,user.getOrganizationIds(),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(WikiNode.class.getName())) {
    WikiNodePermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if (name.equals(WikiPage.class.getName())) {
    WikiPagePermission.check(permissionChecker,GetterUtil.getLong(primKey),ActionKeys.PERMISSIONS);
  }
 else   if ((primKey != null) && (primKey.indexOf(PortletConstants.LAYOUT_SEPARATOR) != -1)) {
    int pos=primKey.indexOf(PortletConstants.LAYOUT_SEPARATOR);
    long plid=GetterUtil.getLong(primKey.substring(0,pos));
    String portletId=primKey.substring(pos + PortletConstants.LAYOUT_SEPARATOR.length());
    PortletPermissionUtil.check(permissionChecker,plid,portletId,ActionKeys.CONFIGURATION);
  }
 else   if (!permissionChecker.hasPermission(groupId,name,primKey,ActionKeys.PERMISSIONS)) {
    Role role=null;
    if (name.equals(Role.class.getName())) {
      long roleId=GetterUtil.getLong(primKey);
      role=RoleServiceUtil.getRole(roleId);
    }
    if ((role != null) && role.isTeam()) {
      Team team=TeamServiceUtil.getTeam(role.getClassPK());
      TeamPermissionUtil.check(permissionChecker,team.getTeamId(),ActionKeys.PERMISSIONS);
    }
 else {
      List<String> resourceActions=ResourceActionsUtil.getResourceActions(name);
      if (!resourceActions.contains(ActionKeys.DEFINE_PERMISSIONS) || !permissionChecker.hasPermission(groupId,name,primKey,ActionKeys.DEFINE_PERMISSIONS)) {
        throw new PrincipalException();
      }
    }
  }
}
