{
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    con=HibernateUtil.getConnection();
    ps=con.prepareStatement(_UPGRADE_USER);
    rs=ps.executeQuery();
    while (rs.next()) {
      String userId=rs.getString("userId");
      String companyId=rs.getString("companyId");
      String password=StringPool.BLANK;
      String firstName=rs.getString("firstName");
      String middleName=rs.getString("middleName");
      String lastName=rs.getString("lastName");
      String nickName=rs.getString("nickName");
      boolean male=rs.getBoolean("male");
      Timestamp birthday=rs.getTimestamp("birthday");
      String emailAddress=rs.getString("emailAddress");
      String smsId=rs.getString("smsId");
      String aimId=rs.getString("aimId");
      String icqId=rs.getString("icqId");
      String msnId=rs.getString("msnId");
      String ymId=rs.getString("ymId");
      String languageId=rs.getString("languageId");
      String timeZoneId=rs.getString("timeZoneId");
      String greeting=rs.getString("greeting");
      String resolution=rs.getString("resolution");
      String comments=rs.getString("comments");
      String prefixId=StringPool.BLANK;
      String suffixId=StringPool.BLANK;
      Calendar birthdayCal=new GregorianCalendar();
      birthdayCal.setTime(birthday);
      int birthdayMonth=birthdayCal.get(Calendar.MONTH);
      int birthdayDay=birthdayCal.get(Calendar.DATE);
      int birthdayYear=birthdayCal.get(Calendar.YEAR);
      String smsSn=smsId;
      String aimSn=aimId;
      String icqSn=icqId;
      String jabberSn=null;
      String msnSn=msnId;
      String skypeSn=null;
      String ymSn=ymId;
      String jobTitle=StringPool.BLANK;
      String organizationId=null;
      String locationId=null;
      _log.debug("Upgrading user " + userId);
      User user=UserLocalServiceUtil.getUserById(userId);
      user=UserLocalServiceUtil.updateUser(userId,password,emailAddress,languageId,timeZoneId,greeting,resolution,comments,firstName,middleName,lastName,nickName,prefixId,suffixId,male,birthdayMonth,birthdayDay,birthdayYear,smsSn,aimSn,icqSn,jabberSn,msnSn,skypeSn,ymSn,jobTitle,organizationId,locationId);
      Contact contact=user.getContact();
      List addresses=AddressLocalServiceUtil.getAddresses(companyId,User.class.getName(),userId);
      AddressLocalServiceUtil.deleteAddresses(companyId,User.class.getName(),userId);
      for (int i=0; i < addresses.size(); i++) {
        Address address=(Address)addresses.get(i);
        AddressLocalServiceUtil.addAddress(userId,Contact.class.getName(),contact.getContactId(),address.getStreet1(),address.getStreet2(),address.getStreet3(),address.getCity(),address.getZip(),address.getRegionId(),address.getCountryId(),address.getTypeId(),address.isMailing(),address.isPrimary());
      }
      if (!UserImpl.isDefaultUser(userId)) {
        GroupLocalServiceUtil.addGroup(user.getUserId(),User.class.getName(),user.getPrimaryKey().toString(),null,null,null,null);
      }
    }
  }
  finally {
    DataAccess.cleanUp(con,ps,rs);
  }
}
