{
  DB db=DBFactoryUtil.getDB();
  if (!db.getType().equals(DB.TYPE_ORACLE)) {
    return;
  }
  boolean checkNewLine=false;
  List<JournalArticle> articles=JournalArticleLocalServiceUtil.getArticles(DEFAULT_GROUP_ID,0,NUM_OF_ARTICLES);
  for (  JournalArticle article : articles) {
    String content=article.getContent();
    if ((content != null) && (content.indexOf("\\n") != -1)) {
      articles=JournalArticleLocalServiceUtil.getArticles(DEFAULT_GROUP_ID);
      for (int j=0; j < articles.size(); j++) {
        article=articles.get(j);
        JournalArticleLocalServiceUtil.checkNewLine(article.getGroupId(),article.getArticleId(),article.getVersion());
      }
      checkNewLine=true;
      break;
    }
  }
  if (!checkNewLine) {
    if (_log.isInfoEnabled()) {
      _log.debug("Do not fix oracle new line");
    }
    return;
  }
 else {
    if (_log.isInfoEnabled()) {
      _log.info("Fix oracle new line");
    }
  }
  List<JournalStructure> structures=JournalStructureLocalServiceUtil.getStructures(DEFAULT_GROUP_ID,0,1);
  if (structures.size() == 1) {
    JournalStructure structure=structures.get(0);
    String xsd=structure.getXsd();
    if ((xsd != null) && (xsd.indexOf("\\n") != -1)) {
      structures=JournalStructureLocalServiceUtil.getStructures(DEFAULT_GROUP_ID);
      for (int i=0; i < structures.size(); i++) {
        structure=structures.get(i);
        JournalStructureLocalServiceUtil.checkNewLine(structure.getGroupId(),structure.getStructureId());
      }
    }
  }
  List<JournalTemplate> templates=JournalTemplateLocalServiceUtil.getTemplates(DEFAULT_GROUP_ID,0,1);
  if (templates.size() == 1) {
    JournalTemplate template=templates.get(0);
    String xsl=template.getXsl();
    if ((xsl != null) && (xsl.indexOf("\\n") != -1)) {
      templates=JournalTemplateLocalServiceUtil.getTemplates(DEFAULT_GROUP_ID);
      for (int i=0; i < templates.size(); i++) {
        template=templates.get(i);
        JournalTemplateLocalServiceUtil.checkNewLine(template.getGroupId(),template.getTemplateId());
      }
    }
  }
}
