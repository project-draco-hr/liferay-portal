{
  if (Validator.isNull(expressionString)) {
    return Collections.emptyMap();
  }
  _expression=expressionString;
  _variableMap=new HashMap<>();
  Matcher matcher=_stringPattern.matcher(_expression);
  while (matcher.find()) {
    createVariable(matcher.group(1));
  }
  com.udojava.evalex.Expression expression=new com.udojava.evalex.Expression(_expression);
  Iterator<String> tokenIterator=expression.getExpressionTokenizer();
  while (tokenIterator.hasNext()) {
    String token=tokenIterator.next();
    Matcher tokenMatcher=_operatorsPattern.matcher(token);
    if (!tokenMatcher.matches() && !isFunction(token)) {
      Matcher variableMatcher=_variablePattern.matcher(token);
      if (variableMatcher.matches()) {
        if (!_variableMap.containsKey(token)) {
          _variableMap.put(token,token);
        }
      }
 else {
        createVariable(token);
      }
    }
  }
  return _variableMap;
}
