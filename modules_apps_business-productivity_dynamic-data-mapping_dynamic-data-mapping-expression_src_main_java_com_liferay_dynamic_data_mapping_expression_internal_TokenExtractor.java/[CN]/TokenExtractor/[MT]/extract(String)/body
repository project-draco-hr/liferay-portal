{
  if (Validator.isNull(expressionString)) {
    return Collections.emptyMap();
  }
  try {
    _expression=expressionString;
    _variableMap=new HashMap<>();
    Matcher matcher=_stringPattern.matcher(_expression);
    while (matcher.find()) {
      createVariable(matcher.group(1),true);
    }
    com.udojava.evalex.Expression expression=new com.udojava.evalex.Expression(_expression);
    Iterator<String> tokenIterator=expression.getExpressionTokenizer();
    while (tokenIterator.hasNext()) {
      String token=tokenIterator.next();
      if (ArrayUtil.contains(_FUNCTIONS,StringUtil.toLowerCase(token)) && !ArrayUtil.contains(_ALLOWED_FUNCTIONS,StringUtil.toLowerCase(token))) {
        throw new DDMExpressionEvaluationException("Function not allowed.");
      }
      Matcher tokenMatcher=_operatorsPattern.matcher(token);
      if (!tokenMatcher.matches() && !ArrayUtil.contains(_FUNCTIONS,StringUtil.toLowerCase(token)) && !ArrayUtil.contains(_BOOLEAN_CONSTANTS,StringUtil.toLowerCase(token))) {
        Matcher variableMatcher=_variablePattern.matcher(token);
        if (variableMatcher.matches()) {
          if (!_variableMap.containsKey(token)) {
            _variableMap.put(token,token);
          }
        }
 else {
          createVariable(token,false);
        }
      }
    }
    return _variableMap;
  }
 catch (  DDMExpressionEvaluationException ddmeee) {
    throw ddmeee;
  }
catch (  ExpressionException ee) {
    throw new DDMExpressionEvaluationException(ee);
  }
}
