{
  return new Predicate<DateValue>(){
    public boolean apply(    DateValue date){
      Weekday dow=Weekday.valueOf(date);
      int nDays;
      Weekday dow0;
      int instance;
      if (weeksInYear) {
        nDays=TimeUtils.yearLength(date.year());
        dow0=Weekday.firstDayOfWeekInMonth(date.year(),1);
        instance=TimeUtils.dayOfYear(date.year(),date.month(),date.day());
      }
 else {
        nDays=TimeUtils.monthLength(date.year(),date.month());
        dow0=Weekday.firstDayOfWeekInMonth(date.year(),date.month());
        instance=date.day() - 1;
      }
      int dateWeekNo;
      if (wkst.javaDayNum <= dow.javaDayNum) {
        dateWeekNo=1 + (instance / 7);
      }
 else {
        dateWeekNo=(instance / 7);
      }
      for (int i=days.length; --i >= 0; ) {
        WeekdayNum day=days[i];
        if (day.wday == dow) {
          int weekNo=day.num;
          if (0 == weekNo) {
            return true;
          }
          if (weekNo < 0) {
            weekNo=Util.invertWeekdayNum(day,dow0,nDays);
          }
          if (dateWeekNo == weekNo) {
            return true;
          }
        }
      }
      return false;
    }
  }
;
}
