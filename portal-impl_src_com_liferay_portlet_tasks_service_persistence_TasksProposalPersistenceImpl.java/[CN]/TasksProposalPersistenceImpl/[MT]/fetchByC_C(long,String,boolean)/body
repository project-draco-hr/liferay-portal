{
  Object[] finderArgs=new Object[]{classNameId,classPK};
  Object result=null;
  if (retrieveFromCache) {
    result=FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_C_C,finderArgs,this);
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_TASKSPROPOSAL_WHERE);
    query.append(_FINDER_COLUMN_C_C_CLASSNAMEID_2);
    if (classPK == null) {
      query.append(_FINDER_COLUMN_C_C_CLASSPK_1);
    }
 else {
      if (classPK.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_C_C_CLASSPK_3);
      }
 else {
        query.append(_FINDER_COLUMN_C_C_CLASSPK_2);
      }
    }
    query.append(TasksProposalModelImpl.ORDER_BY_JPQL);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(classNameId);
      if (classPK != null) {
        qPos.add(classPK);
      }
      List<TasksProposal> list=q.list();
      result=list;
      TasksProposal tasksProposal=null;
      if (list.isEmpty()) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_C_C,finderArgs,list);
      }
 else {
        tasksProposal=list.get(0);
        cacheResult(tasksProposal);
        if ((tasksProposal.getClassNameId() != classNameId) || (tasksProposal.getClassPK() == null) || !tasksProposal.getClassPK().equals(classPK)) {
          FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_C_C,finderArgs,tasksProposal);
        }
      }
      return tasksProposal;
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (result == null) {
        FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_C_C,finderArgs);
      }
      closeSession(session);
    }
  }
 else {
    if (result instanceof List<?>) {
      return null;
    }
 else {
      return (TasksProposal)result;
    }
  }
}
