{
  Transactional annotation=annotatedElement.getAnnotation(Transactional.class);
  if (annotation == null) {
    return null;
  }
  RuleBasedTransactionAttribute ruleBasedTransactionAttribute=new RuleBasedTransactionAttribute();
  ruleBasedTransactionAttribute.setIsolationLevel(annotation.isolation().value());
  ruleBasedTransactionAttribute.setPropagationBehavior(annotation.propagation().value());
  ruleBasedTransactionAttribute.setReadOnly(annotation.readOnly());
  ruleBasedTransactionAttribute.setTimeout(annotation.timeout());
  List<RollbackRuleAttribute> rollBackAttributes=new ArrayList<RollbackRuleAttribute>();
  Class<?>[] rollbackFor=annotation.rollbackFor();
  for (int i=0; i < rollbackFor.length; i++) {
    RollbackRuleAttribute rollbackRuleAttribute=new RollbackRuleAttribute(rollbackFor[i]);
    rollBackAttributes.add(rollbackRuleAttribute);
  }
  String[] rollbackForClassName=annotation.rollbackForClassName();
  for (int i=0; i < rollbackForClassName.length; i++) {
    RollbackRuleAttribute rollbackRuleAttribute=new RollbackRuleAttribute(rollbackForClassName[i]);
    rollBackAttributes.add(rollbackRuleAttribute);
  }
  Class<?>[] noRollbackFor=annotation.noRollbackFor();
  for (int i=0; i < noRollbackFor.length; ++i) {
    NoRollbackRuleAttribute noRollbackRuleAttribute=new NoRollbackRuleAttribute(noRollbackFor[i]);
    rollBackAttributes.add(noRollbackRuleAttribute);
  }
  String[] noRollbackForClassName=annotation.noRollbackForClassName();
  for (int i=0; i < noRollbackForClassName.length; ++i) {
    NoRollbackRuleAttribute noRollbackRuleAttribute=new NoRollbackRuleAttribute(noRollbackForClassName[i]);
    rollBackAttributes.add(noRollbackRuleAttribute);
  }
  ruleBasedTransactionAttribute.getRollbackRules().addAll(rollBackAttributes);
  return ruleBasedTransactionAttribute;
}
