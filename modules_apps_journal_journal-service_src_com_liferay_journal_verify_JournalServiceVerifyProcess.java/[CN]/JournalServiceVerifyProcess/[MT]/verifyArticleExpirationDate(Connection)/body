{
  if (!JournalServiceConfigurationValues.JOURNAL_ARTICLE_EXPIRE_ALL_VERSIONS) {
    return;
  }
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    StringBundler sb=new StringBundler(15);
    sb.append("select JournalArticle.* from JournalArticle left ");
    sb.append("join JournalArticle tempJournalArticle on ");
    sb.append("(JournalArticle.groupId = tempJournalArticle.groupId) ");
    sb.append("and (JournalArticle.articleId = ");
    sb.append("tempJournalArticle.articleId) and ");
    sb.append("(JournalArticle.version < tempJournalArticle.version) ");
    sb.append("and (JournalArticle.status = ");
    sb.append("tempJournalArticle.status) where ");
    sb.append("(JournalArticle.classNameId = ");
    sb.append(JournalArticleConstants.CLASSNAME_ID_DEFAULT);
    sb.append(") and (tempJournalArticle.version is null) and ");
    sb.append("(JournalArticle.expirationDate is not null) and ");
    sb.append("(JournalArticle.status = ");
    sb.append(WorkflowConstants.STATUS_APPROVED);
    sb.append(")");
    ps=con.prepareStatement(sb.toString());
    rs=ps.executeQuery();
    while (rs.next()) {
      long groupId=rs.getLong("groupId");
      long articleId=rs.getLong("articleId");
      Timestamp expirationDate=rs.getTimestamp("expirationDate");
      int status=rs.getInt("status");
      updateExpirationDate(con,groupId,articleId,expirationDate,status);
    }
  }
  finally {
    DataAccess.cleanUp(null,ps,rs);
  }
}
