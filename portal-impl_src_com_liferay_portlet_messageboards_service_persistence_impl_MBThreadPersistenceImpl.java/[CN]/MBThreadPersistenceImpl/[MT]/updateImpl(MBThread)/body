{
  mbThread=toUnwrappedModel(mbThread);
  boolean isNew=mbThread.isNew();
  MBThreadModelImpl mbThreadModelImpl=(MBThreadModelImpl)mbThread;
  if (Validator.isNull(mbThread.getUuid())) {
    String uuid=PortalUUIDUtil.generate();
    mbThread.setUuid(uuid);
  }
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  Date now=new Date();
  if (isNew && (mbThread.getCreateDate() == null)) {
    if (serviceContext == null) {
      mbThread.setCreateDate(now);
    }
 else {
      mbThread.setCreateDate(serviceContext.getCreateDate(now));
    }
  }
  if (!mbThreadModelImpl.hasSetModifiedDate()) {
    if (serviceContext == null) {
      mbThread.setModifiedDate(now);
    }
 else {
      mbThread.setModifiedDate(serviceContext.getModifiedDate(now));
    }
  }
  Session session=null;
  try {
    session=openSession();
    if (mbThread.isNew()) {
      session.save(mbThread);
      mbThread.setNew(false);
    }
 else {
      mbThread=(MBThread)session.merge(mbThread);
    }
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
  finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
  if (isNew || !MBThreadModelImpl.COLUMN_BITMASK_ENABLED) {
    finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
  }
 else {
    if ((mbThreadModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{mbThreadModelImpl.getOriginalUuid()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID,args);
      args=new Object[]{mbThreadModelImpl.getUuid()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID,args);
    }
    if ((mbThreadModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{mbThreadModelImpl.getOriginalUuid(),mbThreadModelImpl.getOriginalCompanyId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C,args);
      args=new Object[]{mbThreadModelImpl.getUuid(),mbThreadModelImpl.getCompanyId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_UUID_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_UUID_C,args);
    }
    if ((mbThreadModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_GROUPID.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{mbThreadModelImpl.getOriginalGroupId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_GROUPID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_GROUPID,args);
      args=new Object[]{mbThreadModelImpl.getGroupId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_GROUPID,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_GROUPID,args);
    }
    if ((mbThreadModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_C.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{mbThreadModelImpl.getOriginalGroupId(),mbThreadModelImpl.getOriginalCategoryId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_C,args);
      args=new Object[]{mbThreadModelImpl.getGroupId(),mbThreadModelImpl.getCategoryId()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_C,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_C,args);
    }
    if ((mbThreadModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_S.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{mbThreadModelImpl.getOriginalGroupId(),mbThreadModelImpl.getOriginalStatus()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_S,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_S,args);
      args=new Object[]{mbThreadModelImpl.getGroupId(),mbThreadModelImpl.getStatus()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_S,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_S,args);
    }
    if ((mbThreadModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_C_P.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{mbThreadModelImpl.getOriginalCategoryId(),mbThreadModelImpl.getOriginalPriority()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_C_P,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_C_P,args);
      args=new Object[]{mbThreadModelImpl.getCategoryId(),mbThreadModelImpl.getPriority()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_C_P,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_C_P,args);
    }
    if ((mbThreadModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_L_P.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{mbThreadModelImpl.getOriginalLastPostDate(),mbThreadModelImpl.getOriginalPriority()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_L_P,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_L_P,args);
      args=new Object[]{mbThreadModelImpl.getLastPostDate(),mbThreadModelImpl.getPriority()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_L_P,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_L_P,args);
    }
    if ((mbThreadModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_C_L.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{mbThreadModelImpl.getOriginalGroupId(),mbThreadModelImpl.getOriginalCategoryId(),mbThreadModelImpl.getOriginalLastPostDate()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_C_L,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_C_L,args);
      args=new Object[]{mbThreadModelImpl.getGroupId(),mbThreadModelImpl.getCategoryId(),mbThreadModelImpl.getLastPostDate()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_C_L,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_C_L,args);
    }
    if ((mbThreadModelImpl.getColumnBitmask() & FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_C_S.getColumnBitmask()) != 0) {
      Object[] args=new Object[]{mbThreadModelImpl.getOriginalGroupId(),mbThreadModelImpl.getOriginalCategoryId(),mbThreadModelImpl.getOriginalStatus()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_C_S,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_C_S,args);
      args=new Object[]{mbThreadModelImpl.getGroupId(),mbThreadModelImpl.getCategoryId(),mbThreadModelImpl.getStatus()};
      finderCache.removeResult(FINDER_PATH_COUNT_BY_G_C_S,args);
      finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_G_C_S,args);
    }
  }
  entityCache.putResult(MBThreadModelImpl.ENTITY_CACHE_ENABLED,MBThreadImpl.class,mbThread.getPrimaryKey(),mbThread,false);
  clearUniqueFindersCache(mbThreadModelImpl);
  cacheUniqueFindersCache(mbThreadModelImpl,isNew);
  mbThread.resetOriginalValues();
  return mbThread;
}
