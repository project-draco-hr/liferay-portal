{
  List portlets=new ArrayList();
  String scpId=PortletServiceImpl.class.getName() + "." + _SHARED_KEY;
  Map portletsPool=(Map)SimpleCachePool.get(scpId);
  if (portletsPool == null) {
    portletsPool=CollectionFactory.getSyncHashMap();
    SimpleCachePool.put(scpId,portletsPool);
  }
  try {
    List servletPatterns=_readWebXML(xmls[2]);
    Set portletIds=_readPortletXML(servletContextName,xmls[0],portletsPool,servletPatterns);
    Set liferayPortletIds=_readLiferayPortletXML(servletContextName,xmls[1],portletsPool);
    Iterator itr=portletIds.iterator();
    while (itr.hasNext()) {
      String portletId=(String)itr.next();
      if (!liferayPortletIds.contains(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in portlet.xml but does not "+ "have a matching entry in liferay-portlet.xml");
      }
    }
    itr=liferayPortletIds.iterator();
    while (itr.hasNext()) {
      String portletId=(String)itr.next();
      if (!portletIds.contains(portletId)) {
        _log.warn("Portlet with the name " + portletId + " is described in liferay-portlet.xml but does "+ "not have a matching entry in portlet.xml");
      }
    }
    itr=portletIds.iterator();
    while (itr.hasNext()) {
      String portletId=(String)itr.next();
      Portlet portlet=(Portlet)_getPortletsPool().get(portletId);
      portlets.add(portlet);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  SimpleCachePool.remove(PortletServiceImpl.class.getName());
  SimpleCachePool.remove(PortletServiceImpl.class.getName() + ".companyPortletsPool");
  return portlets;
}
