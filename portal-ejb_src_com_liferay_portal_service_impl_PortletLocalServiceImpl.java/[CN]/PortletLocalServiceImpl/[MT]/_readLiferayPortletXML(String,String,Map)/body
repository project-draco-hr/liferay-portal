{
  Set liferayPortletIds=new HashSet();
  if (xml == null) {
    return liferayPortletIds;
  }
  SAXReader reader=SAXReaderFactory.getInstance();
  Document doc=reader.read(new XMLSafeReader(xml));
  Element root=doc.getRootElement();
  Map roleMappers=new HashMap();
  Iterator itr1=root.elements("role-mapper").iterator();
  while (itr1.hasNext()) {
    Element roleMapper=(Element)itr1.next();
    String roleName=roleMapper.elementText("role-name");
    String roleLink=roleMapper.elementText("role-link");
    roleMappers.put(roleName,roleLink);
  }
  Map customUserAttributes=new HashMap();
  itr1=root.elements("custom-user-attribute").iterator();
  while (itr1.hasNext()) {
    Element customUserAttribute=(Element)itr1.next();
    String customClass=customUserAttribute.elementText("custom-class");
    Iterator itr2=customUserAttribute.elements("name").iterator();
    while (itr2.hasNext()) {
      Element nameEl=(Element)itr2.next();
      String name=nameEl.getText();
      customUserAttributes.put(name,customClass);
    }
  }
  Map friendlyURLPlugins=_getFriendlyURLPlugins();
  itr1=root.elements("portlet").iterator();
  while (itr1.hasNext()) {
    Element portlet=(Element)itr1.next();
    String portletId=portlet.elementText("portlet-name");
    if (servletContextName != null) {
      portletId=portletId + PortletImpl.WAR_SEPARATOR + servletContextName;
    }
    portletId=PortalUtil.getJsSafePortletName(portletId);
    if (_log.isDebugEnabled()) {
      _log.debug("Reading portlet extension " + portletId);
    }
    liferayPortletIds.add(portletId);
    Portlet portletModel=(Portlet)portletsPool.get(portletId);
    if (portletModel != null) {
      portletModel.setStrutsPath(GetterUtil.getString(portlet.elementText("struts-path"),portletModel.getStrutsPath()));
      portletModel.setConfigurationPath(GetterUtil.getString(portlet.elementText("configuration-path"),portletModel.getConfigurationPath()));
      portletModel.setIndexerClass(GetterUtil.getString(portlet.elementText("indexer-class"),portletModel.getIndexerClass()));
      portletModel.setOpenSearchClass(GetterUtil.getString(portlet.elementText("open-search-class"),portletModel.getOpenSearchClass()));
      portletModel.setSchedulerClass(GetterUtil.getString(portlet.elementText("scheduler-class"),portletModel.getSchedulerClass()));
      portletModel.setPortletURLClass(GetterUtil.getString(portlet.elementText("portlet-url-class"),portletModel.getPortletURLClass()));
      portletModel.setFriendlyURLPluginClass(GetterUtil.getString(portlet.elementText("friendly-url-plugin-class"),portletModel.getFriendlyURLPluginClass()));
      if (Validator.isNull(portletModel.getFriendlyURLPluginClass())) {
        friendlyURLPlugins.remove(portletId);
      }
 else {
        friendlyURLPlugins.put(portletId,portletModel.getFriendlyURLPluginClass());
      }
      portletModel.setPortletDataHandlerClass(GetterUtil.getString(portlet.elementText("portlet-data-handler-class"),portletModel.getPortletDataHandlerClass()));
      portletModel.setSmtpMessageListenerClass(GetterUtil.getString(portlet.elementText("smtp-message-listener-class"),portletModel.getSmtpMessageListenerClass()));
      portletModel.setPreferencesCompanyWide(GetterUtil.getBoolean(portlet.elementText("preferences-company-wide"),portletModel.isPreferencesCompanyWide()));
      portletModel.setPreferencesUniquePerLayout(GetterUtil.getBoolean(portlet.elementText("preferences-unique-per-layout"),portletModel.isPreferencesUniquePerLayout()));
      portletModel.setPreferencesOwnedByGroup(GetterUtil.getBoolean(portlet.elementText("preferences-owned-by-group"),portletModel.isPreferencesOwnedByGroup()));
      portletModel.setUseDefaultTemplate(GetterUtil.getBoolean(portlet.elementText("use-default-template"),portletModel.isUseDefaultTemplate()));
      portletModel.setShowPortletAccessDenied(GetterUtil.getBoolean(portlet.elementText("show-portlet-access-denied"),portletModel.isShowPortletAccessDenied()));
      portletModel.setShowPortletInactive(GetterUtil.getBoolean(portlet.elementText("show-portlet-inactive"),portletModel.isShowPortletInactive()));
      portletModel.setActionURLRedirect(GetterUtil.getBoolean(portlet.elementText("action-url-redirect"),portletModel.isActionURLRedirect()));
      portletModel.setRestoreCurrentView(GetterUtil.getBoolean(portlet.elementText("restore-current-view"),portletModel.isRestoreCurrentView()));
      portletModel.setMaximizeEdit(GetterUtil.getBoolean(portlet.elementText("maximize-edit"),portletModel.isMaximizeEdit()));
      portletModel.setMaximizeHelp(GetterUtil.getBoolean(portlet.elementText("maximize-help"),portletModel.isMaximizeHelp()));
      portletModel.setMaximizePrint(GetterUtil.getBoolean(portlet.elementText("maximize-print"),portletModel.isMaximizePrint()));
      portletModel.setLayoutCacheable(GetterUtil.getBoolean(portlet.elementText("layout-cacheable"),portletModel.isLayoutCacheable()));
      portletModel.setInstanceable(GetterUtil.getBoolean(portlet.elementText("instanceable"),portletModel.isInstanceable()));
      portletModel.setPrivateRequestAttributes(GetterUtil.getBoolean(portlet.elementText("private-request-attributes"),portletModel.isPrivateRequestAttributes()));
      portletModel.setPrivateSessionAttributes(GetterUtil.getBoolean(portlet.elementText("private-session-attributes"),portletModel.isPrivateSessionAttributes()));
      portletModel.setRenderWeight(GetterUtil.getInteger(portlet.elementText("render-weight"),portletModel.getRenderWeight()));
      portletModel.setAjaxable(GetterUtil.getBoolean(portlet.elementText("ajaxable"),portletModel.isAjaxable()));
      List headerCssList=portletModel.getHeaderCss();
      Iterator itr2=portlet.elements("header-css").iterator();
      while (itr2.hasNext()) {
        Element headerCssEl=(Element)itr2.next();
        headerCssList.add(headerCssEl.getText());
      }
      List headerJavaScriptList=portletModel.getHeaderJavaScript();
      itr2=portlet.elements("header-javascript").iterator();
      while (itr2.hasNext()) {
        Element headerJavaScriptEl=(Element)itr2.next();
        headerJavaScriptList.add(headerJavaScriptEl.getText());
      }
      portletModel.setAddDefaultResource(GetterUtil.getBoolean(portlet.elementText("add-default-resource"),portletModel.isAddDefaultResource()));
      portletModel.setSystem(GetterUtil.getBoolean(portlet.elementText("system"),portletModel.isSystem()));
      portletModel.setActive(GetterUtil.getBoolean(portlet.elementText("active"),portletModel.isActive()));
      portletModel.setInclude(GetterUtil.getBoolean(portlet.elementText("include"),portletModel.isInclude()));
      if (!portletModel.isAjaxable() && (portletModel.getRenderWeight() < 1)) {
        portletModel.setRenderWeight(1);
      }
      portletModel.getRoleMappers().putAll(roleMappers);
      portletModel.linkRoles();
      portletModel.getCustomUserAttributes().putAll(customUserAttributes);
    }
  }
  Element moduleIdEl=root.element("module-id");
  if (moduleIdEl != null) {
    PluginUtil.registerPlugin(moduleIdEl.getText());
  }
  return liferayPortletIds;
}
