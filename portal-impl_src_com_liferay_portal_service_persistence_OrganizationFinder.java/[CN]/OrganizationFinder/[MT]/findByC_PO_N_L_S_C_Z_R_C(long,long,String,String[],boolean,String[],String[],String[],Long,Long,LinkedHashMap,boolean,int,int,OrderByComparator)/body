{
  names=CustomSQLUtil.keywords(names);
  streets=CustomSQLUtil.keywords(streets);
  cities=CustomSQLUtil.keywords(cities);
  zips=CustomSQLUtil.keywords(zips);
  if (params != null) {
    Long resourceId=(Long)params.get("permissionsResourceId");
    Long groupId=(Long)params.get("permissionsGroupId");
    if (Validator.isNotNull(groupId) && Validator.isNotNull(resourceId)) {
      return _findByPermissions(companyId,parentOrganizationId,parentOrganizationComparator,names,location,streets,cities,zips,regionId,countryId,resourceId.longValue(),groupId.longValue(),andOperator,begin,end,obc);
    }
  }
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_PO_N_L_S_C_Z_R_C);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Organization_.name)",StringPool.LIKE,false,names);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street1)",StringPool.LIKE,true,streets);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street2)",StringPool.LIKE,true,streets);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.street3)",StringPool.LIKE,true,streets);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.city)",StringPool.LIKE,false,cities);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(Address.zip)",StringPool.LIKE,true,zips);
    if (regionId == null) {
      sql=StringUtil.replace(sql,_REGION_ID_SQL,StringPool.BLANK);
    }
    if (countryId == null) {
      sql=StringUtil.replace(sql,_COUNTRY_ID_SQL,StringPool.BLANK);
    }
    sql=StringUtil.replace(sql,"[$JOIN$]",_getJoin(params));
    sql=StringUtil.replace(sql,"[$WHERE$]",_getWhere(params));
    sql=StringUtil.replace(sql,"[$PARENT_ORGANIZATION_ID_COMPARATOR$]",parentOrganizationComparator);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    sql=CustomSQLUtil.replaceOrderBy(sql,obc);
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar("orgId",Hibernate.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    _setJoin(qPos,params);
    qPos.add(companyId);
    qPos.add(parentOrganizationId);
    qPos.add(location);
    qPos.add(names,2);
    qPos.add(streets,6);
    if (regionId != null) {
      qPos.add(regionId);
      qPos.add(regionId);
    }
    if (countryId != null) {
      qPos.add(countryId);
      qPos.add(countryId);
    }
    qPos.add(cities,2);
    qPos.add(zips,2);
    List list=new ArrayList();
    Iterator itr=QueryUtil.iterate(q,HibernateUtil.getDialect(),begin,end);
    while (itr.hasNext()) {
      Long organizationId=(Long)itr.next();
      Organization organization=OrganizationUtil.findByPrimaryKey(organizationId.longValue());
      list.add(organization);
    }
    return list;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
}
