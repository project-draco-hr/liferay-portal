{
  int length=16 + parameterMap.size() * 4;
  if (cookies != null) {
    length+=cookies.length * 2 - 1;
  }
  StringBundler sb=new StringBundler(length);
  sb.append("{cookies=[");
  if (cookies != null) {
    for (    Cookie cookie : cookies) {
      sb.append(CookieUtil.toString(cookie));
      sb.append(", ");
    }
    sb.setIndex(sb.index() - 1);
  }
  sb.append("], distributedRequestAttributes=");
  sb.append(distributedRequestAttributes);
  sb.append(", _headerMap=");
  sb.append(headerMap);
  sb.append(", _multipartParameterMap=");
  sb.append(multipartParameterMap);
  sb.append(", originalSessionAttributes=");
  sb.append(originalSessionAttributes);
  sb.append(", parameterMap={");
  for (  Map.Entry<String,String[]> entry : parameterMap.entrySet()) {
    sb.append(entry.getKey());
    sb.append("=");
    sb.append(Arrays.toString(entry.getValue()));
    sb.append(", ");
  }
  sb.setIndex(sb.index() - 1);
  sb.append("}, _regularParameterMap=");
  sb.append(regularParameterMap);
  sb.append(", _serverName=");
  sb.append(serverName);
  sb.append(", _serverPort=");
  sb.append(serverPort);
  sb.append("}");
  return sb.toString();
}
