{
  Framework framework=null;
  ClassLoader classLoader=TargetPlatformIndexerProcessCallable.class.getClassLoader();
  try (InputStream inputStream=classLoader.getResourceAsStream("META-INF/system.packages.extra.mf")){
    Map<String,String> properties=new HashMap<>();
    properties.put(Constants.FRAMEWORK_STORAGE,tempPath.toString());
    Manifest extraPackagesManifest=new Manifest(inputStream);
    Attributes attributes=extraPackagesManifest.getMainAttributes();
    properties.put(Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA,attributes.getValue("Export-Package"));
    ServiceLoader<FrameworkFactory> serviceLoader=ServiceLoader.load(FrameworkFactory.class);
    FrameworkFactory frameworkFactory=serviceLoader.iterator().next();
    framework=frameworkFactory.newFramework(properties);
    framework.init();
    BundleContext bundleContext=framework.getBundleContext();
    Bundle systemBundle=bundleContext.getBundle(0);
    Class<?> clazz=classLoader.loadClass("com.liferay.portal.target.platform.indexer.internal." + "TargetPlatformIndexer");
    Constructor<?> constructor=clazz.getConstructor(Bundle.class,String[].class);
    Object indexer=constructor.newInstance(systemBundle,_dirNames);
    Method method=clazz.getMethod("index",OutputStream.class);
    UnsyncByteArrayOutputStream unsyncByteArrayOutputStream=new UnsyncByteArrayOutputStream();
    method.invoke(indexer,unsyncByteArrayOutputStream);
    return unsyncByteArrayOutputStream.toByteArray();
  }
 catch (  Exception e) {
    throw new ProcessException(e);
  }
 finally {
    try {
      framework.stop();
    }
 catch (    BundleException be) {
      throw new ProcessException(be);
    }
  }
}
