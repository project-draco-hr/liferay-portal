{
  MockitoAnnotations.initMocks(this);
  when(_portletLocalService.getPortletById(Matchers.anyString())).thenAnswer(new Answer<Portlet>(){
    @Override public Portlet answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      if ("75".equals(args[0])) {
        return _portlet75;
      }
 else       if (PortletKeys.PORTAL.equals(args[0])) {
        return _portletPortal;
      }
      return _portletUndeployed;
    }
  }
);
  mockStatic(PortletLocalServiceUtil.class,new CallsRealMethods());
  stub(method(PortletLocalServiceUtil.class,"getService")).toReturn(_portletLocalService);
  _comboServlet=new ComboServlet();
  _portalServletContext=spy(new MockServletContext());
  ServletConfig servletConfig=new MockServletConfig(_portalServletContext);
  _portalServletContext.setContextPath("portal");
  File tempFile=_temporaryFolder.newFile();
  URI tempFileURI=tempFile.toURI();
  when(_portalServletContext.getResource(Mockito.anyString())).thenReturn(tempFileURI.toURL());
  when(_portletAppPortal.getServletContext()).thenReturn(_portalServletContext);
  when(_portletPortal.getPortletApp()).thenReturn(_portletAppPortal);
  when(_portletPortal.getRootPortletId()).thenReturn(PortletKeys.PORTAL);
  _comboServlet.init(servletConfig);
  _pluginServletContext=spy(new MockServletContext());
  when(_pluginServletContext.getResource(Mockito.anyString())).thenReturn(tempFileURI.toURL());
  when(_portletApp75.getServletContext()).thenReturn(_pluginServletContext);
  when(_portlet75.getPortletApp()).thenReturn(_portletApp75);
  when(_portlet75.getRootPortletId()).thenReturn("75");
  when(_portletUndeployed.isUndeployedPortlet()).thenReturn(true);
}
