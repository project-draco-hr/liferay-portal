{
  MockitoAnnotations.initMocks(this);
  when(_portletLocalService.getPortletById(Matchers.anyString())).thenAnswer(new Answer<Portlet>(){
    @Override public Portlet answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      if (Objects.equals(_TEST_PORTLET_ID,args[0])) {
        return _testPortlet;
      }
 else       if (Objects.equals(PortletKeys.PORTAL,args[0])) {
        return _portalPortlet;
      }
      return _portletUndeployed;
    }
  }
);
  mockStatic(PortletLocalServiceUtil.class,new CallsRealMethods());
  stub(method(PortletLocalServiceUtil.class,"getService")).toReturn(_portletLocalService);
  setUpComboServlet();
  setUpPortalServletContext();
  setUpPortalPortlet();
  setUpPluginServletContext();
  setUpTestPortlet();
  when(_portletUndeployed.isUndeployedPortlet()).thenReturn(true);
  mockStatic(PrefsPropsUtil.class);
  when(PrefsPropsUtil.getStringArray(Mockito.eq(PropsKeys.COMBO_ALLOWED_FILE_EXTENSIONS),Mockito.anyString())).thenReturn(new String[]{".css",".js"});
  _mockHttpServletRequest=new MockHttpServletRequest();
  _mockHttpServletRequest.setLocalAddr("localhost");
  _mockHttpServletRequest.setLocalPort(8080);
  _mockHttpServletRequest.setScheme("http");
  _mockHttpServletResponse=new MockHttpServletResponse();
}
