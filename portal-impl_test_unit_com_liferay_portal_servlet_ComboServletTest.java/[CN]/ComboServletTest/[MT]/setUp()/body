{
  MockitoAnnotations.initMocks(this);
  when(_portletLocalService.getPortletById(Matchers.anyString())).thenAnswer(new Answer<Portlet>(){
    @Override public Portlet answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      if (PortletKeys.ADMIN.equals(args[0])) {
        return _adminPortlet;
      }
 else       if (PortletKeys.PORTAL.equals(args[0])) {
        return _portalPortlet;
      }
      return _portletUndeployed;
    }
  }
);
  mockStatic(PortletLocalServiceUtil.class,new CallsRealMethods());
  stub(method(PortletLocalServiceUtil.class,"getService")).toReturn(_portletLocalService);
  _comboServlet=new ComboServlet();
  _portalServletContext=spy(new MockServletContext());
  ServletConfig servletConfig=new MockServletConfig(_portalServletContext);
  _portalServletContext.setContextPath("portal");
  File tempFile=_temporaryFolder.newFile();
  URI tempFileURI=tempFile.toURI();
  when(_portalServletContext.getResource(Mockito.anyString())).thenReturn(tempFileURI.toURL());
  when(_portalPortletApp.getServletContext()).thenReturn(_portalServletContext);
  when(_portalPortlet.getPortletApp()).thenReturn(_portalPortletApp);
  when(_portalPortlet.getRootPortletId()).thenReturn(PortletKeys.PORTAL);
  _comboServlet.init(servletConfig);
  _pluginServletContext=spy(new MockServletContext());
  when(_pluginServletContext.getResource(Mockito.anyString())).thenReturn(tempFileURI.toURL());
  when(_adminPortletApp.getServletContext()).thenReturn(_pluginServletContext);
  when(_adminPortlet.getPortletApp()).thenReturn(_adminPortletApp);
  when(_adminPortlet.getRootPortletId()).thenReturn("75");
  when(_portletUndeployed.isUndeployedPortlet()).thenReturn(true);
  _mockHttpServletRequest=new MockHttpServletRequest();
  _mockHttpServletRequest.setLocalAddr("localhost");
  _mockHttpServletRequest.setLocalPort(8080);
  _mockHttpServletRequest.setScheme("http");
}
