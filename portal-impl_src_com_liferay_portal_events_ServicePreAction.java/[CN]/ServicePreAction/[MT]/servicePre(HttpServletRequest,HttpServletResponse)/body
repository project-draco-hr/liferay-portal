{
  HttpSession session=request.getSession();
  Company company=PortalUtil.getCompany(request);
  long companyId=company.getCompanyId();
  String cdnHost=null;
  if (request.isSecure()) {
    cdnHost=PortalUtil.getCDNHostHttps();
  }
 else {
    cdnHost=PortalUtil.getCDNHostHttp();
  }
  cdnHost=ParamUtil.getString(request,"cdn_host",cdnHost);
  String portalURL=PortalUtil.getPortalURL(request);
  String contextPath=PortalUtil.getPathContext();
  String friendlyURLPrivateGroupPath=PortalUtil.getPathFriendlyURLPrivateGroup();
  String friendlyURLPrivateUserPath=PortalUtil.getPathFriendlyURLPrivateUser();
  String friendlyURLPublicPath=PortalUtil.getPathFriendlyURLPublic();
  String imagePath=cdnHost.concat(PortalUtil.getPathImage());
  String mainPath=PortalUtil.getPathMain();
  String i18nPath=(String)request.getAttribute(WebKeys.I18N_PATH);
  if (Validator.isNotNull(i18nPath)) {
    if (Validator.isNotNull(contextPath)) {
      String i18nContextPath=contextPath.concat(i18nPath);
      friendlyURLPrivateGroupPath=StringUtil.replaceFirst(friendlyURLPrivateGroupPath,contextPath,i18nContextPath);
      friendlyURLPrivateUserPath=StringUtil.replaceFirst(friendlyURLPrivateUserPath,contextPath,i18nContextPath);
      friendlyURLPublicPath=StringUtil.replaceFirst(friendlyURLPublicPath,contextPath,i18nContextPath);
      mainPath=StringUtil.replaceFirst(mainPath,contextPath,i18nContextPath);
    }
 else {
      friendlyURLPrivateGroupPath=i18nPath.concat(friendlyURLPrivateGroupPath);
      friendlyURLPrivateUserPath=i18nPath.concat(friendlyURLPrivateUserPath);
      friendlyURLPublicPath=i18nPath.concat(friendlyURLPublicPath);
      mainPath=i18nPath.concat(mainPath);
    }
  }
  StringBundler sb=new StringBundler(5);
  sb.append(imagePath);
  sb.append("/company_logo?img_id=");
  sb.append(company.getLogoId());
  sb.append("&t=");
  sb.append(ImageServletTokenUtil.getToken(company.getLogoId()));
  String companyLogo=sb.toString();
  Image companyLogoImage=ImageLocalServiceUtil.getCompanyLogo(company.getLogoId());
  int companyLogoHeight=companyLogoImage.getHeight();
  int companyLogoWidth=companyLogoImage.getWidth();
  String realCompanyLogo=companyLogo;
  int realCompanyLogoHeight=companyLogoHeight;
  int realCompanyLogoWidth=companyLogoWidth;
  User user=null;
  try {
    user=PortalUtil.getUser(request);
  }
 catch (  NoSuchUserException nsue) {
    if (_log.isWarnEnabled()) {
      _log.warn(nsue.getMessage());
    }
    long userId=PortalUtil.getUserId(request);
    if (userId > 0) {
      session.invalidate();
    }
    return;
  }
  boolean signedIn=false;
  if (user == null) {
    user=company.getDefaultUser();
  }
 else   if (!user.isDefaultUser()) {
    signedIn=true;
  }
  User realUser=user;
  Long realUserId=(Long)session.getAttribute(WebKeys.USER_ID);
  if (realUserId != null) {
    if (user.getUserId() != realUserId.longValue()) {
      realUser=UserLocalServiceUtil.getUserById(realUserId.longValue());
    }
  }
  String doAsUserId=ParamUtil.getString(request,"doAsUserId");
  String doAsUserLanguageId=ParamUtil.getString(request,"doAsUserLanguageId");
  long doAsGroupId=ParamUtil.getLong(request,"doAsGroupId");
  long refererPlid=ParamUtil.getLong(request,"refererPlid");
  PermissionChecker permissionChecker=PermissionCheckerFactoryUtil.create(user,true);
  PermissionThreadLocal.setPermissionChecker(permissionChecker);
  Locale locale=(Locale)session.getAttribute(Globals.LOCALE_KEY);
  if (Validator.isNotNull(doAsUserLanguageId)) {
    locale=LocaleUtil.fromLanguageId(doAsUserLanguageId);
  }
  String i18nLanguageId=(String)request.getAttribute(WebKeys.I18N_LANGUAGE_ID);
  if (Validator.isNotNull(i18nLanguageId)) {
    locale=LocaleUtil.fromLanguageId(i18nLanguageId);
  }
 else   if (locale == null) {
    if (signedIn) {
      locale=user.getLocale();
    }
 else {
      String languageId=CookieKeys.getCookie(request,CookieKeys.GUEST_LANGUAGE_ID);
      if (Validator.isNotNull(languageId)) {
        locale=LocaleUtil.fromLanguageId(languageId);
      }
      if ((locale == null) && PropsValues.LOCALE_DEFAULT_REQUEST) {
        locale=request.getLocale();
      }
      if (locale == null) {
        locale=user.getLocale();
      }
      if (Validator.isNull(locale.getCountry())) {
        locale=LanguageUtil.getLocale(locale.getLanguage());
      }
      if (!LanguageUtil.isAvailableLocale(locale)) {
        locale=user.getLocale();
      }
    }
    session.setAttribute(Globals.LOCALE_KEY,locale);
    LanguageUtil.updateCookie(request,response,locale);
  }
  try {
    CookieKeys.validateSupportCookie(request);
  }
 catch (  Exception e) {
    CookieKeys.addSupportCookie(request,response);
  }
  TimeZone timeZone=user.getTimeZone();
  if (timeZone == null) {
    timeZone=company.getTimeZone();
  }
  if (signedIn) {
    updateUserLayouts(user);
  }
  Layout layout=null;
  List<Layout> layouts=null;
  long plid=ParamUtil.getLong(request,"p_l_id");
  if (plid > 0) {
    layout=LayoutLocalServiceUtil.getLayout(plid);
  }
 else {
    long groupId=ParamUtil.getLong(request,"groupId");
    boolean privateLayout=ParamUtil.getBoolean(request,"privateLayout");
    long layoutId=ParamUtil.getLong(request,"layoutId");
    if ((groupId > 0) && layoutId > 0) {
      layout=LayoutLocalServiceUtil.getLayout(groupId,privateLayout,layoutId);
    }
  }
  if (layout != null) {
    try {
      Group group=layout.getGroup();
      if (!signedIn && PropsValues.AUTH_FORWARD_BY_REDIRECT) {
        request.setAttribute(WebKeys.REQUESTED_LAYOUT,layout);
      }
      boolean isViewableCommunity=isViewableGroup(user,layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),permissionChecker);
      if (!isViewableCommunity && group.isStagingGroup()) {
        layout=null;
      }
 else       if (!isViewableCommunity) {
        sb=new StringBundler(6);
        sb.append("User ");
        sb.append(user.getUserId());
        sb.append(" is not allowed to access the ");
        sb.append(layout.isPrivateLayout() ? "private" : "public");
        sb.append(" pages of group ");
        sb.append(layout.getGroupId());
        if (_log.isWarnEnabled()) {
          _log.warn(sb.toString());
        }
        throw new PrincipalException(sb.toString());
      }
 else       if (isViewableCommunity && !LayoutPermissionUtil.contains(permissionChecker,layout,ActionKeys.VIEW)) {
        layout=null;
      }
 else       if (group.isLayoutPrototype()) {
        layouts=new ArrayList<Layout>();
      }
 else {
        layouts=LayoutLocalServiceUtil.getLayouts(layout.getGroupId(),layout.isPrivateLayout(),LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
        if (!group.isControlPanel()) {
          doAsGroupId=0;
        }
      }
    }
 catch (    NoSuchLayoutException nsle) {
    }
  }
  List<Layout> unfilteredLayouts=layouts;
  if (layout == null) {
    Object[] defaultLayout=getDefaultLayout(request,user,signedIn);
    layout=(Layout)defaultLayout[0];
    layouts=(List<Layout>)defaultLayout[1];
    request.setAttribute(WebKeys.LAYOUT_DEFAULT,Boolean.TRUE);
  }
  Object[] viewableLayouts=getViewableLayouts(request,user,permissionChecker,layout,layouts);
  String layoutSetLogo=null;
  layout=(Layout)viewableLayouts[0];
  layouts=(List<Layout>)viewableLayouts[1];
  Group group=null;
  if (layout != null) {
    group=layout.getGroup();
    if (!group.isControlPanel()) {
      rememberVisitedGroupIds(request,group.getGroupId());
    }
  }
  LayoutTypePortlet layoutTypePortlet=null;
  layouts=mergeAdditionalLayouts(request,user,permissionChecker,layout,layouts);
  if (layout != null) {
    if (company.isCommunityLogo()) {
      long logoId=0;
      LayoutSet layoutSet=layout.getLayoutSet();
      if (layoutSet.isLogo()) {
        logoId=layoutSet.getLogoId();
      }
 else {
        LayoutSet siblingLayoutSet=LayoutSetLocalServiceUtil.getLayoutSet(layout.getGroupId(),!layout.isPrivateLayout());
        if (siblingLayoutSet.isLogo()) {
          logoId=siblingLayoutSet.getLogoId();
        }
      }
      if (logoId > 0) {
        sb=new StringBundler(5);
        sb.append(imagePath);
        sb.append("/layout_set_logo?img_id=");
        sb.append(logoId);
        sb.append("&t=");
        sb.append(ImageServletTokenUtil.getToken(logoId));
        layoutSetLogo=sb.toString();
        Image layoutSetLogoImage=ImageLocalServiceUtil.getCompanyLogo(logoId);
        companyLogo=layoutSetLogo;
        companyLogoHeight=layoutSetLogoImage.getHeight();
        companyLogoWidth=layoutSetLogoImage.getWidth();
      }
    }
    plid=layout.getPlid();
    layout=(Layout)((LayoutImpl)layout).clone();
    layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
    LayoutClone layoutClone=LayoutCloneFactory.getInstance();
    if (layoutClone != null) {
      String typeSettings=layoutClone.get(request,plid);
      if (typeSettings != null) {
        UnicodeProperties props=new UnicodeProperties(true);
        props.load(typeSettings);
        String stateMax=props.getProperty(LayoutTypePortletConstants.STATE_MAX);
        String stateMin=props.getProperty(LayoutTypePortletConstants.STATE_MIN);
        String modeAbout=props.getProperty(LayoutTypePortletConstants.MODE_ABOUT);
        String modeConfig=props.getProperty(LayoutTypePortletConstants.MODE_CONFIG);
        String modeEdit=props.getProperty(LayoutTypePortletConstants.MODE_EDIT);
        String modeEditDefaults=props.getProperty(LayoutTypePortletConstants.MODE_EDIT_DEFAULTS);
        String modeEditGuest=props.getProperty(LayoutTypePortletConstants.MODE_EDIT_GUEST);
        String modeHelp=props.getProperty(LayoutTypePortletConstants.MODE_HELP);
        String modePreview=props.getProperty(LayoutTypePortletConstants.MODE_PREVIEW);
        String modePrint=props.getProperty(LayoutTypePortletConstants.MODE_PRINT);
        layoutTypePortlet.setStateMax(stateMax);
        layoutTypePortlet.setStateMin(stateMin);
        layoutTypePortlet.setModeAbout(modeAbout);
        layoutTypePortlet.setModeConfig(modeConfig);
        layoutTypePortlet.setModeEdit(modeEdit);
        layoutTypePortlet.setModeEditDefaults(modeEditDefaults);
        layoutTypePortlet.setModeEditGuest(modeEditGuest);
        layoutTypePortlet.setModeHelp(modeHelp);
        layoutTypePortlet.setModePreview(modePreview);
        layoutTypePortlet.setModePrint(modePrint);
      }
    }
    request.setAttribute(WebKeys.LAYOUT,layout);
    request.setAttribute(WebKeys.LAYOUTS,layouts);
    if (layout.isPrivateLayout()) {
      permissionChecker.setCheckGuest(false);
    }
  }
  long scopeGroupId=PortalUtil.getScopeGroupId(request);
  long parentGroupId;
  try {
    parentGroupId=PortalUtil.getParentGroupId(scopeGroupId);
  }
 catch (  NoSuchGroupException e) {
    Group guestGroup=GroupLocalServiceUtil.getGroup(group.getCompanyId(),GroupConstants.GUEST);
    scopeGroupId=guestGroup.getGroupId();
    doAsGroupId=scopeGroupId;
    parentGroupId=PortalUtil.getParentGroupId(scopeGroupId);
    refererPlid=0;
  }
  Theme theme=null;
  ColorScheme colorScheme=null;
  boolean wapTheme=BrowserSnifferUtil.isWap(request);
  if ((layout != null) && group.isControlPanel()) {
    String themeId=PrefsPropsUtil.getString(companyId,PropsKeys.CONTROL_PANEL_LAYOUT_REGULAR_THEME_ID);
    String colorSchemeId=ColorSchemeImpl.getDefaultRegularColorSchemeId();
    theme=ThemeLocalServiceUtil.getTheme(companyId,themeId,wapTheme);
    colorScheme=ThemeLocalServiceUtil.getColorScheme(companyId,theme.getThemeId(),colorSchemeId,wapTheme);
    if (!wapTheme && theme.isWapTheme()) {
      theme=ThemeLocalServiceUtil.getTheme(companyId,PropsValues.CONTROL_PANEL_LAYOUT_REGULAR_THEME_ID,false);
      colorScheme=ThemeLocalServiceUtil.getColorScheme(companyId,theme.getThemeId(),colorSchemeId,false);
    }
  }
 else   if (layout != null) {
    if (wapTheme) {
      theme=layout.getWapTheme();
      colorScheme=layout.getWapColorScheme();
    }
 else {
      theme=layout.getTheme();
      colorScheme=layout.getColorScheme();
    }
  }
 else {
    String themeId=null;
    String colorSchemeId=null;
    if (wapTheme) {
      themeId=ThemeImpl.getDefaultWapThemeId(companyId);
      colorSchemeId=ColorSchemeImpl.getDefaultWapColorSchemeId();
    }
 else {
      themeId=ThemeImpl.getDefaultRegularThemeId(companyId);
      colorSchemeId=ColorSchemeImpl.getDefaultRegularColorSchemeId();
    }
    theme=ThemeLocalServiceUtil.getTheme(companyId,themeId,wapTheme);
    colorScheme=ThemeLocalServiceUtil.getColorScheme(companyId,theme.getThemeId(),colorSchemeId,wapTheme);
  }
  request.setAttribute(WebKeys.THEME,theme);
  request.setAttribute(WebKeys.COLOR_SCHEME,colorScheme);
  boolean themeCssFastLoad=SessionParamUtil.getBoolean(request,"css_fast_load",PropsValues.THEME_CSS_FAST_LOAD);
  boolean themeImagesFastLoad=SessionParamUtil.getBoolean(request,"images_fast_load",PropsValues.THEME_IMAGES_FAST_LOAD);
  boolean themeJsBarebone=PropsValues.JAVASCRIPT_BAREBONE_ENABLED;
  if (themeJsBarebone) {
    if (signedIn) {
      themeJsBarebone=false;
    }
  }
  boolean themeJsFastLoad=SessionParamUtil.getBoolean(request,"js_fast_load",PropsValues.JAVASCRIPT_FAST_LOAD);
  String lifecycle=ParamUtil.getString(request,"p_p_lifecycle","0");
  boolean isolated=ParamUtil.getBoolean(request,"p_p_isolated");
  String facebookCanvasPageURL=(String)request.getAttribute(WebKeys.FACEBOOK_CANVAS_PAGE_URL);
  boolean widget=false;
  Boolean widgetObj=(Boolean)request.getAttribute(WebKeys.WIDGET);
  if (widgetObj != null) {
    widget=widgetObj.booleanValue();
  }
  ThemeDisplay themeDisplay=ThemeDisplayFactory.create();
  themeDisplay.setCDNHost(cdnHost);
  themeDisplay.setPortalURL(portalURL);
  themeDisplay.setFacebookCanvasPageURL(facebookCanvasPageURL);
  themeDisplay.setWidget(widget);
  themeDisplay.setCompany(company);
  themeDisplay.setCompanyLogo(companyLogo);
  themeDisplay.setCompanyLogoHeight(companyLogoHeight);
  themeDisplay.setCompanyLogoWidth(companyLogoWidth);
  themeDisplay.setRealCompanyLogo(realCompanyLogo);
  themeDisplay.setRealCompanyLogoHeight(realCompanyLogoHeight);
  themeDisplay.setRealCompanyLogoWidth(realCompanyLogoWidth);
  themeDisplay.setUser(user);
  themeDisplay.setRealUser(realUser);
  themeDisplay.setDoAsUserId(doAsUserId);
  themeDisplay.setDoAsUserLanguageId(doAsUserLanguageId);
  themeDisplay.setDoAsGroupId(doAsGroupId);
  themeDisplay.setRefererPlid(refererPlid);
  themeDisplay.setLayoutSetLogo(layoutSetLogo);
  themeDisplay.setLayout(layout);
  themeDisplay.setLayouts(layouts);
  themeDisplay.setUnfilteredLayouts(unfilteredLayouts);
  themeDisplay.setPlid(plid);
  themeDisplay.setLayoutTypePortlet(layoutTypePortlet);
  themeDisplay.setScopeGroupId(scopeGroupId);
  themeDisplay.setParentGroupId(parentGroupId);
  themeDisplay.setSignedIn(signedIn);
  themeDisplay.setPermissionChecker(permissionChecker);
  themeDisplay.setLocale(locale);
  themeDisplay.setLanguageId(LocaleUtil.toLanguageId(locale));
  themeDisplay.setI18nLanguageId(i18nLanguageId);
  themeDisplay.setI18nPath(i18nPath);
  themeDisplay.setTimeZone(timeZone);
  themeDisplay.setLookAndFeel(contextPath,theme,colorScheme);
  themeDisplay.setThemeCssFastLoad(themeCssFastLoad);
  themeDisplay.setThemeImagesFastLoad(themeImagesFastLoad);
  themeDisplay.setThemeJsBarebone(themeJsBarebone);
  themeDisplay.setThemeJsFastLoad(themeJsFastLoad);
  themeDisplay.setServerName(request.getServerName());
  themeDisplay.setServerPort(request.getServerPort());
  themeDisplay.setSecure(request.isSecure());
  themeDisplay.setLifecycle(lifecycle);
  themeDisplay.setLifecycleAction(lifecycle.equals("1"));
  themeDisplay.setLifecycleRender(lifecycle.equals("0"));
  themeDisplay.setLifecycleResource(lifecycle.equals("2"));
  themeDisplay.setStateExclusive(LiferayWindowState.isExclusive(request));
  themeDisplay.setStateMaximized(LiferayWindowState.isMaximized(request));
  themeDisplay.setStatePopUp(LiferayWindowState.isPopUp(request));
  themeDisplay.setIsolated(isolated);
  themeDisplay.setPathApplet(contextPath.concat("/applets"));
  themeDisplay.setPathCms(contextPath.concat("/cms"));
  themeDisplay.setPathContext(contextPath);
  themeDisplay.setPathFlash(contextPath.concat("/flash"));
  themeDisplay.setPathFriendlyURLPrivateGroup(friendlyURLPrivateGroupPath);
  themeDisplay.setPathFriendlyURLPrivateUser(friendlyURLPrivateUserPath);
  themeDisplay.setPathFriendlyURLPublic(friendlyURLPublicPath);
  themeDisplay.setPathImage(imagePath);
  themeDisplay.setPathJavaScript(cdnHost.concat(contextPath).concat("/html/js"));
  themeDisplay.setPathMain(mainPath);
  themeDisplay.setPathSound(contextPath.concat("/html/sound"));
  themeDisplay.setShowAddContentIcon(false);
  themeDisplay.setShowControlPanelIcon(signedIn);
  themeDisplay.setShowHomeIcon(true);
  themeDisplay.setShowMyAccountIcon(signedIn);
  themeDisplay.setShowPageSettingsIcon(false);
  themeDisplay.setShowPortalIcon(true);
  themeDisplay.setShowSignInIcon(!signedIn);
  themeDisplay.setShowSignOutIcon(signedIn);
  themeDisplay.setShowStagingIcon(false);
  String urlControlPanel=friendlyURLPrivateGroupPath.concat(GroupConstants.CONTROL_PANEL_FRIENDLY_URL);
  if (Validator.isNotNull(doAsUserId)) {
    urlControlPanel=HttpUtil.addParameter(urlControlPanel,"doAsUserId",doAsUserId);
  }
  if (scopeGroupId > 0) {
    urlControlPanel=HttpUtil.addParameter(urlControlPanel,"doAsGroupId",scopeGroupId);
  }
  if (refererPlid > 0) {
    urlControlPanel=HttpUtil.addParameter(urlControlPanel,"refererPlid",refererPlid);
  }
 else   if (plid > 0) {
    urlControlPanel=HttpUtil.addParameter(urlControlPanel,"refererPlid",plid);
  }
  themeDisplay.setURLControlPanel(urlControlPanel);
  PortletURL createAccountURL=new PortletURLImpl(request,PortletKeys.LOGIN,plid,PortletRequest.ACTION_PHASE);
  createAccountURL.setWindowState(WindowState.MAXIMIZED);
  createAccountURL.setPortletMode(PortletMode.VIEW);
  createAccountURL.setParameter("saveLastPath","0");
  createAccountURL.setParameter("struts_action","/login/create_account");
  themeDisplay.setURLCreateAccount(createAccountURL);
  String currentURL=PortalUtil.getCurrentURL(request);
  themeDisplay.setURLCurrent(currentURL);
  String urlHome=PortalUtil.getHomeURL(request);
  themeDisplay.setURLHome(urlHome);
  if (layout != null) {
    if (layout.isTypePortlet()) {
      boolean freeformLayout=layoutTypePortlet.getLayoutTemplateId().equals("freeform");
      themeDisplay.setFreeformLayout(freeformLayout);
      boolean hasUpdateLayoutPermission=LayoutPermissionUtil.contains(permissionChecker,layout,ActionKeys.UPDATE);
      if (hasUpdateLayoutPermission) {
        themeDisplay.setShowAddContentIconPermission(true);
        if (!LiferayWindowState.isMaximized(request)) {
          themeDisplay.setShowAddContentIcon(true);
        }
        themeDisplay.setShowLayoutTemplatesIcon(true);
        themeDisplay.setURLAddContent("Liferay.LayoutConfiguration.toggle('".concat(PortletKeys.LAYOUT_CONFIGURATION).concat("');"));
        themeDisplay.setURLLayoutTemplates("Liferay.LayoutConfiguration.showTemplates();");
      }
    }
    boolean hasManageLayoutsPermission=GroupPermissionUtil.contains(permissionChecker,scopeGroupId,ActionKeys.MANAGE_LAYOUTS);
    if (group.isUser()) {
      if ((layout.isPrivateLayout() && !PropsValues.LAYOUT_USER_PRIVATE_LAYOUTS_MODIFIABLE) || (layout.isPublicLayout() && !PropsValues.LAYOUT_USER_PUBLIC_LAYOUTS_MODIFIABLE)) {
        hasManageLayoutsPermission=false;
      }
    }
    if (hasManageLayoutsPermission) {
      themeDisplay.setShowPageSettingsIcon(true);
      PortletURL pageSettingsURL=new PortletURLImpl(request,PortletKeys.LAYOUT_MANAGEMENT,plid,PortletRequest.RENDER_PHASE);
      pageSettingsURL.setWindowState(WindowState.MAXIMIZED);
      pageSettingsURL.setPortletMode(PortletMode.VIEW);
      pageSettingsURL.setParameter("struts_action","/layout_management/edit_pages");
      if (layout.isPrivateLayout()) {
        pageSettingsURL.setParameter("tabs1","private-pages");
      }
 else {
        pageSettingsURL.setParameter("tabs1","public-pages");
      }
      pageSettingsURL.setParameter("redirect",currentURL);
      pageSettingsURL.setParameter("groupId",String.valueOf(scopeGroupId));
      pageSettingsURL.setParameter("selPlid",String.valueOf(plid));
      themeDisplay.setURLPageSettings(pageSettingsURL);
    }
    if (group.hasStagingGroup() && !group.isStagingGroup()) {
      themeDisplay.setShowAddContentIcon(false);
      themeDisplay.setShowLayoutTemplatesIcon(false);
      themeDisplay.setShowPageSettingsIcon(false);
      themeDisplay.setURLPublishToLive(null);
    }
    if (group.isControlPanel()) {
      themeDisplay.setShowPageSettingsIcon(false);
      themeDisplay.setURLPublishToLive(null);
    }
    if (group.isStaged() || group.isStagingGroup()) {
      boolean hasApproveProposalPermission=GroupPermissionUtil.contains(permissionChecker,scopeGroupId,ActionKeys.APPROVE_PROPOSAL);
      boolean hasPublishStagingPermission=GroupPermissionUtil.contains(permissionChecker,scopeGroupId,ActionKeys.PUBLISH_STAGING);
      if (hasApproveProposalPermission || hasManageLayoutsPermission || hasPublishStagingPermission) {
        themeDisplay.setShowStagingIcon(true);
      }
      if (hasPublishStagingPermission) {
        PortletURL publishToLiveURL=new PortletURLImpl(request,PortletKeys.LAYOUT_MANAGEMENT,plid,PortletRequest.RENDER_PHASE);
        publishToLiveURL.setWindowState(LiferayWindowState.EXCLUSIVE);
        publishToLiveURL.setPortletMode(PortletMode.VIEW);
        publishToLiveURL.setParameter("struts_action","/layout_management/export_pages");
        if (layout.isPrivateLayout()) {
          publishToLiveURL.setParameter("tabs1","private-pages");
        }
 else {
          publishToLiveURL.setParameter("tabs1","public-pages");
        }
        publishToLiveURL.setParameter("pagesRedirect",currentURL);
        publishToLiveURL.setParameter("groupId",String.valueOf(scopeGroupId));
        publishToLiveURL.setParameter("selPlid",String.valueOf(plid));
        themeDisplay.setURLPublishToLive(publishToLiveURL);
      }
    }
    String myAccountNamespace=PortalUtil.getPortletNamespace(PortletKeys.MY_ACCOUNT);
    String myAccountRedirect=ParamUtil.getString(request,myAccountNamespace.concat("backURL"),currentURL);
    Group controlPanelGroup=GroupLocalServiceUtil.getGroup(companyId,GroupConstants.CONTROL_PANEL);
    long controlPanelPlid=LayoutLocalServiceUtil.getDefaultPlid(controlPanelGroup.getGroupId(),true);
    PortletURLImpl myAccountURL=new PortletURLImpl(request,PortletKeys.MY_ACCOUNT,controlPanelPlid,PortletRequest.RENDER_PHASE);
    myAccountURL.setWindowState(WindowState.MAXIMIZED);
    myAccountURL.setPortletMode(PortletMode.VIEW);
    myAccountURL.setRefererPlid(plid);
    myAccountURL.setParameter("struts_action","/my_account/edit_user");
    myAccountURL.setParameter("backURL",myAccountRedirect);
    themeDisplay.setURLMyAccount(myAccountURL);
  }
  if ((!user.isActive()) || (PrefsPropsUtil.getBoolean(companyId,PropsKeys.TERMS_OF_USE_REQUIRED) && !user.isAgreedToTermsOfUse())) {
    themeDisplay.setShowAddContentIcon(false);
    themeDisplay.setShowMyAccountIcon(false);
    themeDisplay.setShowPageSettingsIcon(false);
  }
  if (group.isLayoutPrototype()) {
    themeDisplay.setShowControlPanelIcon(false);
    themeDisplay.setShowHomeIcon(false);
    themeDisplay.setShowMyAccountIcon(false);
    themeDisplay.setShowPageSettingsIcon(true);
    themeDisplay.setShowPortalIcon(false);
    themeDisplay.setShowSignInIcon(false);
    themeDisplay.setShowSignOutIcon(false);
    themeDisplay.setShowStagingIcon(false);
  }
  themeDisplay.setURLPortal(portalURL.concat(contextPath));
  String urlSignIn=mainPath.concat("/portal/login");
  if (layout != null) {
    urlSignIn=HttpUtil.addParameter(urlSignIn,"p_l_id",layout.getPlid());
  }
  themeDisplay.setURLSignIn(urlSignIn);
  themeDisplay.setURLSignOut(mainPath.concat("/portal/logout"));
  PortletURL updateManagerURL=new PortletURLImpl(request,PortletKeys.UPDATE_MANAGER,plid,PortletRequest.RENDER_PHASE);
  updateManagerURL.setWindowState(WindowState.MAXIMIZED);
  updateManagerURL.setPortletMode(PortletMode.VIEW);
  updateManagerURL.setParameter("struts_action","/update_manager/view");
  themeDisplay.setURLUpdateManager(updateManagerURL);
  request.setAttribute(WebKeys.THEME_DISPLAY,themeDisplay);
  ServiceContext serviceContext=ServiceContextFactory.getInstance(request);
  ServiceContextThreadLocal.pushServiceContext(serviceContext);
  boolean parallelRenderEnable=true;
  if (layout != null) {
    List<String> portletIds=layoutTypePortlet.getPortletIds();
    if (portletIds.size() == 1) {
      String portletId=portletIds.get(0);
      Portlet portlet=PortletLocalServiceUtil.getPortletById(portletId);
      if ((portlet != null) && !portlet.isAjaxable()) {
        parallelRenderEnable=false;
      }
    }
  }
  Boolean parallelRenderEnableObj=Boolean.valueOf(ParamUtil.getBoolean(request,"p_p_parallel",parallelRenderEnable));
  request.setAttribute(WebKeys.PORTLET_PARALLEL_RENDER,parallelRenderEnableObj);
}
