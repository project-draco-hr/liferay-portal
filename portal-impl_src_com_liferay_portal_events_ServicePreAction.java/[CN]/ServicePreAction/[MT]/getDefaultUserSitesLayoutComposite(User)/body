{
  final LinkedHashMap<String,Object> groupParams=new LinkedHashMap<>();
  groupParams.put("usersGroups",new Long(user.getUserId()));
  int count=GroupLocalServiceUtil.searchCount(user.getCompanyId(),null,null,groupParams);
  IntervalActionProcessor<LayoutComposite> intervalActionProcessor=new IntervalActionProcessor<>(count);
  intervalActionProcessor.setPerformIntervalActionMethod(new IntervalActionProcessor.PerformIntervalActionMethod<LayoutComposite>(){
    @Override public LayoutComposite performIntervalAction(    int start,    int end){
      List<Group> groups=GroupLocalServiceUtil.search(user.getCompanyId(),null,null,groupParams,start,end);
      for (      Group group : groups) {
        List<Layout> layouts=LayoutLocalServiceUtil.getLayouts(group.getGroupId(),true,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
        if (layouts.isEmpty()) {
          layouts=LayoutLocalServiceUtil.getLayouts(group.getGroupId(),false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID);
        }
        if (!layouts.isEmpty()) {
          return new LayoutComposite(layouts.get(0),layouts);
        }
      }
      return null;
    }
  }
);
  LayoutComposite layoutComposite=intervalActionProcessor.performIntervalActions();
  if (layoutComposite == null) {
    return new LayoutComposite(null,new ArrayList<Layout>());
  }
  return layoutComposite;
}
