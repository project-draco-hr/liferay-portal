{
  if ((layouts == null) || layouts.isEmpty()) {
    return new Object[]{layout,layouts};
  }
  Group group=layout.getGroup();
  boolean hasViewLayoutPermission=false;
  boolean hasViewStagingPermission=(group.isStagingGroup() || group.isStagedRemotely()) && GroupPermissionUtil.contains(permissionChecker,group.getGroupId(),ActionKeys.VIEW_STAGING);
  if (LayoutPermissionUtil.contains(permissionChecker,layout,false,ActionKeys.VIEW) || hasViewStagingPermission) {
    hasViewLayoutPermission=true;
  }
  String controlPanelCategory=null;
  if (group.isControlPanel()) {
    controlPanelCategory=ParamUtil.getString(request,"controlPanelCategory");
  }
  List<Layout> accessibleLayouts=new ArrayList<Layout>();
  for (int i=0; i < layouts.size(); i++) {
    Layout curLayout=layouts.get(i);
    if (!curLayout.isHidden() && (LayoutPermissionUtil.contains(permissionChecker,curLayout,controlPanelCategory,false,ActionKeys.VIEW) || hasViewStagingPermission)) {
      if (accessibleLayouts.isEmpty() && !hasViewLayoutPermission) {
        layout=curLayout;
      }
      accessibleLayouts.add(curLayout);
    }
  }
  if (accessibleLayouts.isEmpty()) {
    layouts=null;
    if (!isLoginRequest(request) && !hasViewLayoutPermission) {
      if (user.isDefaultUser() && PropsValues.AUTH_LOGIN_PROMPT_ENABLED) {
        throw new PrincipalException("User is not authenticated");
      }
      SessionErrors.add(request,LayoutPermissionException.class.getName());
    }
  }
 else {
    layouts=accessibleLayouts;
  }
  return new Object[]{layout,layouts};
}
