{
  String templateId=tokens.get("template_id");
  if ((templateId == null) || ((templateId != null) && templateId.equals(_GLOBAL_PROPERTIES))) {
    return s;
  }
  Properties properties=new Properties();
  try {
    Map<String,String> newTokens=new HashMap<String,String>();
    MapUtil.copy(tokens,newTokens);
    newTokens.put("template_id",_GLOBAL_PROPERTIES);
    long groupId=GetterUtil.getLong(tokens.get("group_id"));
    String script=JournalUtil.getTemplateScript(groupId,_GLOBAL_PROPERTIES,newTokens,languageId);
    PropertiesUtil.load(properties,script);
  }
 catch (  Exception e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e);
    }
  }
  if (properties.isEmpty()) {
    return s;
  }
  String[] escapedKeys=new String[properties.size()];
  String[] escapedValues=new String[properties.size()];
  String[] keys=new String[properties.size()];
  String[] values=new String[properties.size()];
  String[] tempEscapedKeys=new String[properties.size()];
  String[] tempEscapedValues=new String[properties.size()];
  int counter=0;
  for (  Map.Entry<Object,Object> entry : properties.entrySet()) {
    String key=(String)entry.getKey();
    String value=(String)entry.getValue();
    String escapedKey=StringPool.AT + StringPool.AT + key+ StringPool.AT+ StringPool.AT;
    String actualKey=StringPool.AT + key + StringPool.AT;
    String tempEscapedKey=TokensTransformerListener.TEMP_ESCAPED_AT_OPEN + key + TokensTransformerListener.TEMP_ESCAPED_AT_CLOSE;
    escapedKeys[counter]=escapedKey;
    escapedValues[counter]=tempEscapedKey;
    keys[counter]=actualKey;
    values[counter]=value;
    tempEscapedKeys[counter]=tempEscapedKey;
    tempEscapedValues[counter]=actualKey;
    counter++;
  }
  s=StringUtil.replace(s,escapedKeys,escapedValues);
  s=StringUtil.replace(s,keys,values);
  s=StringUtil.replace(s,tempEscapedKeys,tempEscapedValues);
  return s;
}
