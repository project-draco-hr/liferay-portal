{
  HttpSession session=request.getSession();
  long companyId=PortalUtil.getCompanyId(request);
  CASConfiguration casCompanyServiceSettings=_settingsFactory.getSettings(CASConfiguration.class,new CompanyServiceSettingsLocator(companyId,CASConstants.SERVICE_NAME));
  String pathInfo=request.getPathInfo();
  Object forceLogout=session.getAttribute(CASWebKeys.CAS_FORCE_LOGOUT);
  if (forceLogout != null) {
    session.removeAttribute(CASWebKeys.CAS_FORCE_LOGOUT);
    String logoutUrl=casCompanyServiceSettings.logoutURL();
    response.sendRedirect(logoutUrl);
    return;
  }
  if (Validator.isNotNull(pathInfo) && pathInfo.contains("/portal/logout")) {
    session.invalidate();
    String logoutUrl=casCompanyServiceSettings.logoutURL();
    response.sendRedirect(logoutUrl);
    return;
  }
 else {
    String login=(String)session.getAttribute(CASWebKeys.CAS_LOGIN);
    if (Validator.isNotNull(login)) {
      processFilter(CASFilter.class,request,response,filterChain);
      return;
    }
    String serverName=casCompanyServiceSettings.serverName();
    String serviceUrl=casCompanyServiceSettings.serviceURL();
    if (Validator.isNull(serviceUrl)) {
      serviceUrl=CommonUtils.constructServiceUrl(request,response,serviceUrl,serverName,"ticket",false);
    }
    String ticket=ParamUtil.getString(request,"ticket");
    if (Validator.isNull(ticket)) {
      String loginUrl=casCompanyServiceSettings.loginURL();
      loginUrl=HttpUtil.addParameter(loginUrl,"service",serviceUrl);
      response.sendRedirect(loginUrl);
      return;
    }
    TicketValidator ticketValidator=getTicketValidator(companyId);
    Assertion assertion=ticketValidator.validate(ticket,serviceUrl);
    if (assertion != null) {
      AttributePrincipal attributePrincipal=assertion.getPrincipal();
      login=attributePrincipal.getName();
      session.setAttribute(CASWebKeys.CAS_LOGIN,login);
    }
  }
  processFilter(CASFilter.class,request,response,filterChain);
}
