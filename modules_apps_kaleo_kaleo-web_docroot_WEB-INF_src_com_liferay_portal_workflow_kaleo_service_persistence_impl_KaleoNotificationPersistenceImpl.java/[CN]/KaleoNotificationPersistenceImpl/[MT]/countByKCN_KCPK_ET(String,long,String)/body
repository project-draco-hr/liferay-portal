{
  FinderPath finderPath=FINDER_PATH_COUNT_BY_KCN_KCPK_ET;
  Object[] finderArgs=new Object[]{kaleoClassName,kaleoClassPK,executionType};
  Long count=(Long)FinderCacheUtil.getResult(finderPath,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_COUNT_KALEONOTIFICATION_WHERE);
    boolean bindKaleoClassName=false;
    if (kaleoClassName == null) {
      query.append(_FINDER_COLUMN_KCN_KCPK_ET_KALEOCLASSNAME_1);
    }
 else     if (kaleoClassName.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_KCN_KCPK_ET_KALEOCLASSNAME_3);
    }
 else {
      bindKaleoClassName=true;
      query.append(_FINDER_COLUMN_KCN_KCPK_ET_KALEOCLASSNAME_2);
    }
    query.append(_FINDER_COLUMN_KCN_KCPK_ET_KALEOCLASSPK_2);
    boolean bindExecutionType=false;
    if (executionType == null) {
      query.append(_FINDER_COLUMN_KCN_KCPK_ET_EXECUTIONTYPE_1);
    }
 else     if (executionType.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_KCN_KCPK_ET_EXECUTIONTYPE_3);
    }
 else {
      bindExecutionType=true;
      query.append(_FINDER_COLUMN_KCN_KCPK_ET_EXECUTIONTYPE_2);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindKaleoClassName) {
        qPos.add(kaleoClassName);
      }
      qPos.add(kaleoClassPK);
      if (bindExecutionType) {
        qPos.add(executionType);
      }
      count=(Long)q.uniqueResult();
      FinderCacheUtil.putResult(finderPath,finderArgs,count);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(finderPath,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return count.intValue();
}
