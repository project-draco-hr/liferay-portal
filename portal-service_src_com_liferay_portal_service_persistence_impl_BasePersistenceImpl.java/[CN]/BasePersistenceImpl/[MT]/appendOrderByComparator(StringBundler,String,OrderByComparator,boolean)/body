{
  TableNameOrderByComparator tableNameOrderByComparator=null;
  if (orderByComparator instanceof TableNameOrderByComparator) {
    tableNameOrderByComparator=(TableNameOrderByComparator)orderByComparator;
    tableNameOrderByComparator=new TableNameOrderByComparator(tableNameOrderByComparator.getWrappedOrderByComparator(),entityAlias);
  }
 else {
    tableNameOrderByComparator=new TableNameOrderByComparator(orderByComparator,entityAlias);
  }
  String orderBy=tableNameOrderByComparator.getOrderBy();
  if (sqlQuery) {
    String[] fields=StringUtil.split(orderBy,CharPool.COMMA);
    StringBundler sb=new StringBundler(fields.length);
    for (int i=0; i < fields.length; ++i) {
      String field=fields[i];
      String[] components=StringUtil.split(field,CharPool.SPACE);
      String orderByField=components[0];
      String orderByDirection=components[1];
      components=StringUtil.split(orderByField,CharPool.PERIOD);
      String orderByTableName=components[0];
      String orderByFieldName=components[1];
      sb.append(orderByTableName);
      sb.append(StringPool.PERIOD);
      sb.append(orderByFieldName);
      Set<String> badColumnNames=getBadColumnNames();
      if (badColumnNames.contains(orderByFieldName)) {
        sb.append(StringPool.UNDERLINE);
      }
      sb.append(StringPool.SPACE);
      sb.append(orderByDirection);
      if (i < (fields.length - 1)) {
        sb.append(StringPool.COMMA);
      }
    }
    orderBy=sb.toString();
  }
  query.append(ORDER_BY_CLAUSE);
  query.append(orderBy);
}
