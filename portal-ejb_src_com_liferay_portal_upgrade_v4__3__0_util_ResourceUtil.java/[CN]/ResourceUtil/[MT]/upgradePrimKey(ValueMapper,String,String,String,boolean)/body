{
  StringMaker sm=new StringMaker();
  sm.append("Upgrading Resource_.primKey with:\n");
  sm.append("\t\tValueMapper: " + pkMapper.getClass().getName() + "\n");
  sm.append("\t\tname:        " + name + "\n");
  sm.append("\t\tscope:       " + scope + "\n");
  sm.append("\t\tlikePk:      " + likePk + "\n");
  sm.append("\t\tisLong:      " + isLong);
  _log.info(sm.toString());
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  Set oldPks=new HashSet();
  try {
    con=HibernateUtil.getConnection();
    if (Validator.isNotNull(name)) {
      ps=con.prepareStatement(_SELECT_PRIMKEY[2]);
      ps.setString(2,name);
    }
 else     if (Validator.isNotNull(likePk)) {
      ps=con.prepareStatement(_SELECT_PRIMKEY[1]);
      ps.setString(2,likePk);
    }
 else {
      ps=con.prepareStatement(_SELECT_PRIMKEY[0]);
    }
    ps.setString(1,scope);
    rs=ps.executeQuery();
    while (rs.next()) {
      oldPks.add(rs.getString("primKey"));
    }
  }
  finally {
    DataAccess.cleanUp(con,ps,rs);
  }
  Set badPks=new HashSet();
  boolean useBatch=false;
  try {
    con=HibernateUtil.getConnection();
    useBatch=con.getMetaData().supportsBatchUpdates();
    if (!useBatch) {
      if (_log.isInfoEnabled()) {
        _log.info("Database does not support batch updates");
      }
    }
    int count=0;
    Iterator itr=oldPks.iterator();
    while (itr.hasNext()) {
      if (count == 0) {
        if (Validator.isNull(name)) {
          ps=con.prepareStatement(_UPDATE_PRIMKEY[0]);
        }
 else {
          ps=con.prepareStatement(_UPDATE_PRIMKEY[1]);
        }
      }
      String oldPk=(String)itr.next();
      String newPk=null;
      try {
        if (isLong) {
          Long longPk=new Long(oldPk);
          newPk=String.valueOf(pkMapper.getNewValue(longPk));
        }
 else {
          newPk=(String)pkMapper.getNewValue(oldPk);
        }
      }
 catch (      StagnantRowException sre) {
        _log.warn("Resource_.primKey has stagnant data where " + "Resource_.name like '" + name + "': "+ sre.getMessage());
        badPks.add(oldPk);
        continue;
      }
      ps.setString(1,newPk);
      ps.setString(2,scope);
      ps.setString(3,oldPk);
      if (Validator.isNotNull(name)) {
        ps.setString(4,name);
      }
      if (useBatch) {
        ps.addBatch();
        if (count == _BATCH_SIZE) {
          ps.executeBatch();
          ps.close();
          count=0;
        }
 else {
          count++;
        }
      }
 else {
        ps.executeUpdate();
        ps.close();
      }
    }
    if (useBatch) {
      if (count != 0) {
        ps.executeBatch();
        ps.close();
      }
    }
  }
  finally {
    DataAccess.cleanUp(con,ps);
  }
  try {
    con=HibernateUtil.getConnection();
    int count=0;
    Iterator itr=badPks.iterator();
    while (itr.hasNext()) {
      if (count == 0) {
        if (Validator.isNull(name)) {
          ps=con.prepareStatement(_CLEAN_PRIMKEY[0]);
        }
 else {
          ps=con.prepareStatement(_CLEAN_PRIMKEY[1]);
        }
      }
      String badPk=(String)itr.next();
      ps.setString(1,scope);
      ps.setString(2,badPk);
      if (Validator.isNotNull(name)) {
        ps.setString(3,name);
      }
      if (useBatch) {
        ps.addBatch();
        if (count == _BATCH_SIZE) {
          ps.executeBatch();
          ps.close();
          count=0;
        }
 else {
          count++;
        }
      }
 else {
        ps.executeUpdate();
        ps.close();
      }
    }
    if (useBatch) {
      if (count != 0) {
        ps.executeBatch();
        ps.close();
      }
    }
  }
  finally {
    DataAccess.cleanUp(con,ps);
  }
}
