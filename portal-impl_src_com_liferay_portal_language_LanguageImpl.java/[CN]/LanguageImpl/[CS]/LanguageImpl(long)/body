{
  String[] languageIds=PropsValues.LOCALES;
  if (companyId != CompanyConstants.SYSTEM) {
    try {
      languageIds=PrefsPropsUtil.getStringArray(companyId,PropsKeys.LOCALES,StringPool.COMMA,PropsValues.LOCALES_ENABLED);
    }
 catch (    SystemException se) {
      languageIds=PropsValues.LOCALES_ENABLED;
    }
  }
  _charEncodings=new HashSet<>();
  _duplicateLanguageCodes=new HashSet<>();
  _localesMap=new HashMap<>(languageIds.length);
  _localesSet=new HashSet<>(languageIds.length);
  for (int i=0; i < languageIds.length; i++) {
    String languageId=languageIds[i];
    Locale locale=LocaleUtil.fromLanguageId(languageId,false);
    _charEncodings.add(locale.toString());
    String language=languageId;
    int pos=languageId.indexOf(CharPool.UNDERLINE);
    if (pos > 0) {
      language=languageId.substring(0,pos);
    }
    if (_localesMap.containsKey(language)) {
      _duplicateLanguageCodes.add(language);
    }
    if (!_localesMap.containsKey(language)) {
      _localesMap.put(language,locale);
    }
    _localesSet.add(locale);
  }
  String[] localesBetaArray=PropsValues.LOCALES_BETA;
  _localesBetaSet=new HashSet<>(localesBetaArray.length);
  for (  String languageId : localesBetaArray) {
    Locale locale=LocaleUtil.fromLanguageId(languageId,false);
    _localesBetaSet.add(locale);
  }
  _supportedLocalesSet=new HashSet<>(_localesSet);
  _supportedLocalesSet.removeAll(_localesBetaSet);
}
