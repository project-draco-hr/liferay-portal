{
  String[] languageIds=null;
  try {
    Group group=GroupLocalServiceUtil.getGroup(groupId);
    UnicodeProperties typeSettingsProperties=group.getTypeSettingsProperties();
    languageIds=StringUtil.split(typeSettingsProperties.getProperty(PropsKeys.LOCALES));
  }
 catch (  Exception e) {
    languageIds=PropsValues.LOCALES_ENABLED;
  }
  Map<String,Locale> groupLanguageCodeLocalesMap=new HashMap<>();
  Map<String,Locale> groupLanguageIdLocalesMap=new HashMap<>();
  for (int i=0; i < languageIds.length; i++) {
    String languageId=languageIds[i];
    Locale locale=LocaleUtil.fromLanguageId(languageId,false);
    String language=languageId;
    int pos=languageId.indexOf(CharPool.UNDERLINE);
    if (pos > 0) {
      language=languageId.substring(0,pos);
    }
    if (!groupLanguageCodeLocalesMap.containsKey(language)) {
      groupLanguageCodeLocalesMap.put(language,locale);
    }
    groupLanguageIdLocalesMap.put(LocaleUtil.toLanguageId(locale),locale);
  }
  _groupLanguageCodeLocalesMapMap.put(groupId,groupLanguageCodeLocalesMap);
  _groupLanguageIdLocalesMap.put(groupId,groupLanguageIdLocalesMap);
  return new ObjectValuePair<>(groupLanguageCodeLocalesMap,groupLanguageIdLocalesMap);
}
