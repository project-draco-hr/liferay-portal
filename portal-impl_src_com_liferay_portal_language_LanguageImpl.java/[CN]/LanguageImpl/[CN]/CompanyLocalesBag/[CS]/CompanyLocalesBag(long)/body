{
  String[] languageIds=PropsValues.LOCALES;
  if (companyId != CompanyConstants.SYSTEM) {
    try {
      languageIds=PrefsPropsUtil.getStringArray(companyId,PropsKeys.LOCALES,StringPool.COMMA,PropsValues.LOCALES_ENABLED);
    }
 catch (    SystemException se) {
      languageIds=PropsValues.LOCALES_ENABLED;
    }
  }
  for (  String languageId : languageIds) {
    Locale locale=LocaleUtil.fromLanguageId(languageId,false);
    String languageCode=languageId;
    int pos=languageId.indexOf(CharPool.UNDERLINE);
    if (pos > 0) {
      languageCode=languageId.substring(0,pos);
    }
    if (_languageCodeLocalesMap.containsKey(languageCode)) {
      _duplicateLanguageCodes.add(languageCode);
    }
 else {
      _languageCodeLocalesMap.put(languageCode,locale);
    }
    _languageIdLocalesMap.put(languageId,locale);
  }
  for (  String languageId : PropsValues.LOCALES_BETA) {
    _localesBetaSet.add(LocaleUtil.fromLanguageId(languageId,false));
  }
  _availableLocales=Collections.unmodifiableSet(new HashSet<>(_languageIdLocalesMap.values()));
  Set<Locale> supportedLocalesSet=new HashSet<>(_languageIdLocalesMap.values());
  supportedLocalesSet.removeAll(_localesBetaSet);
  _supportedLocalesSet=Collections.unmodifiableSet(supportedLocalesSet);
}
