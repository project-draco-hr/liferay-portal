{
  if (_property == null) {
    throw new BuildException("Property attribute is required",getLocation());
  }
  if (_path == null) {
    throw new BuildException("Path attribute is required",getLocation());
  }
  File gitDir=PathUtil.getGitDir(_gitDir,getProject(),getLocation());
  String relativePath=PathUtil.toRelativePath(gitDir,_path);
  try (Repository repository=RepositoryCache.open(FileKey.exact(gitDir,FS.DETECTED))){
    RevWalk revWalk=new RevWalk(repository);
    RevCommit headRevCommit=revWalk.lookupCommit(repository.resolve(Constants.HEAD));
    revWalk.markStart(headRevCommit);
    revWalk.setRevFilter(MaxCountRevFilter.create(2));
    revWalk.setTreeFilter(AndTreeFilter.create(PathFilter.create(relativePath),TreeFilter.ANY_DIFF));
    Iterator<RevCommit> iterator=revWalk.iterator();
    while (iterator.hasNext()) {
      RevCommit revCommit=iterator.next();
      TreeWalk treeWalk=new TreeWalk(repository);
      treeWalk.addTree(revCommit.getTree());
      treeWalk.setRecursive(true);
      if (_ignoreFileName != null) {
        treeWalk.setFilter(AndTreeFilter.create(PathFilter.create(relativePath + "/" + _ignoreFileName),TreeFilter.ANY_DIFF));
      }
      if (!treeWalk.next()) {
        Project currentProject=getProject();
        currentProject.setNewProperty(_property,revCommit.name());
        break;
      }
    }
    revWalk.dispose();
  }
 catch (  Exception e) {
    throw new BuildException("Unable to get head hash for path " + _path,e);
  }
}
