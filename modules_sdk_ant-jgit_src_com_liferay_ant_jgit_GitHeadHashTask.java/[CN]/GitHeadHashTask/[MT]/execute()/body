{
  if (_property == null) {
    throw new BuildException("Property attribute is required",getLocation());
  }
  if (_path == null) {
    throw new BuildException("Path attribute is required",getLocation());
  }
  File gitDir=PathUtil.getGitDir(_gitDir,getProject(),getLocation());
  String relativePath=PathUtil.toRelativePath(gitDir,_path);
  try (Repository repository=RepositoryCache.open(FileKey.exact(gitDir,FS.DETECTED))){
    RevWalk revWalk=new RevWalk(repository);
    RevCommit headRevCommit=revWalk.lookupCommit(repository.resolve(Constants.HEAD));
    revWalk.markStart(headRevCommit);
    if (_ignoreFileName == null) {
      revWalk.setRevFilter(MaxCountRevFilter.create(1));
    }
 else {
      revWalk.setRevFilter(MaxCountRevFilter.create(2));
    }
    revWalk.setTreeFilter(AndTreeFilter.create(PathFilter.create(relativePath),TreeFilter.ANY_DIFF));
    RevCommit revCommit=revWalk.next();
    if (revCommit == null) {
      throw new IllegalStateException("Unable to find any commit under " + _path);
    }
    if ((_ignoreFileName != null) && hasIgnoreFile(repository,revCommit,relativePath)) {
      RevCommit secondRevCommit=revWalk.next();
      if (secondRevCommit != null) {
        revCommit=secondRevCommit;
      }
    }
    Project currentProject=getProject();
    currentProject.setNewProperty(_property,revCommit.name());
    revWalk.dispose();
  }
 catch (  Exception e) {
    throw new BuildException("Unable to get head hash for path " + _path,e);
  }
}
