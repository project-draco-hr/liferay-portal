{
  System.setProperty(_THREAD_ENABLED_KEY,StringPool.FALSE);
  AsyncBroker<String,String> asyncBroker=new AsyncBroker<>();
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(),Level.OFF)){
    asyncBroker.post(_KEY);
    GCUtil.gc(true);
    ReflectionTestUtil.invoke(FinalizeManager.class,"_pollingCleanup",new Class<?>[0]);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(),Level.WARNING)){
    NoticeableFuture<String> noticeableFuture=asyncBroker.post(_KEY);
    String toString=noticeableFuture.toString();
    noticeableFuture=null;
    GCUtil.gc(true);
    ReflectionTestUtil.invoke(FinalizeManager.class,"_pollingCleanup",new Class<?>[0]);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Cancelled orphan noticeable future " + toString + " with key "+ _KEY,logRecord.getMessage());
  }
 }
