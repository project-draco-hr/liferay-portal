{
  long pk=RandomTestUtil.nextLong();
  SACPEntry newSACPEntry=_persistence.create(pk);
  newSACPEntry.setUuid(RandomTestUtil.randomString());
  newSACPEntry.setCompanyId(RandomTestUtil.nextLong());
  newSACPEntry.setUserId(RandomTestUtil.nextLong());
  newSACPEntry.setUserName(RandomTestUtil.randomString());
  newSACPEntry.setCreateDate(RandomTestUtil.nextDate());
  newSACPEntry.setModifiedDate(RandomTestUtil.nextDate());
  newSACPEntry.setName(RandomTestUtil.randomString());
  newSACPEntry.setTitle(RandomTestUtil.randomString());
  _sacpEntries.add(_persistence.update(newSACPEntry));
  SACPEntry existingSACPEntry=_persistence.findByPrimaryKey(newSACPEntry.getPrimaryKey());
  Assert.assertEquals(existingSACPEntry.getUuid(),newSACPEntry.getUuid());
  Assert.assertEquals(existingSACPEntry.getSacpEntryId(),newSACPEntry.getSacpEntryId());
  Assert.assertEquals(existingSACPEntry.getCompanyId(),newSACPEntry.getCompanyId());
  Assert.assertEquals(existingSACPEntry.getUserId(),newSACPEntry.getUserId());
  Assert.assertEquals(existingSACPEntry.getUserName(),newSACPEntry.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingSACPEntry.getCreateDate()),Time.getShortTimestamp(newSACPEntry.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingSACPEntry.getModifiedDate()),Time.getShortTimestamp(newSACPEntry.getModifiedDate()));
  Assert.assertEquals(existingSACPEntry.getName(),newSACPEntry.getName());
  Assert.assertEquals(existingSACPEntry.getTitle(),newSACPEntry.getTitle());
}
