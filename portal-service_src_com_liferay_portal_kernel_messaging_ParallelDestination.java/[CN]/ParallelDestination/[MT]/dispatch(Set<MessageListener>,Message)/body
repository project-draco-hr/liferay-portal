{
  if (!message.contains("companyId")) {
    message.put("companyId",CompanyThreadLocal.getCompanyId());
  }
  if (!message.contains("principalName")) {
    message.put("principalName",PrincipalThreadLocal.getName());
  }
  if (!message.contains("principalPassword")) {
    message.put("principalPassword",PrincipalThreadLocal.getPassword());
  }
  if (!message.contains("permissionChecker")) {
    PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
    message.put("permissionChecker",new TransientValue<PermissionChecker>(permissionChecker));
  }
  ThreadPoolExecutor threadPoolExecutor=getThreadPoolExecutor();
  for (  final MessageListener messageListener : messageListeners) {
    Runnable runnable=new MessageRunnable(message){
      public void run(){
        try {
          long messageCompanyId=message.getLong("companyId");
          if (messageCompanyId > 0) {
            CompanyThreadLocal.setCompanyId(messageCompanyId);
          }
          String messagePrincipalName=message.getString("principalName");
          boolean hasPrincipalName=false;
          if (Validator.isNotNull(messagePrincipalName)) {
            hasPrincipalName=true;
            PrincipalThreadLocal.setName(messagePrincipalName);
          }
          String messagePrincipalPassword=message.getString("principalPassword");
          if (Validator.isNotNull(messagePrincipalPassword)) {
            PrincipalThreadLocal.setPassword(messagePrincipalPassword);
          }
          TransientValue<PermissionChecker> permissionCheckerValue=(TransientValue<PermissionChecker>)message.get("permissionChecker");
          PermissionChecker permissionChecker=permissionCheckerValue.getValue();
          if ((permissionChecker == null) && hasPrincipalName) {
            long userId=PrincipalThreadLocal.getUserId();
            try {
              User user=UserLocalServiceUtil.fetchUser(userId);
              permissionChecker=PermissionCheckerFactoryUtil.create(user);
            }
 catch (            Exception e) {
              throw new RuntimeException(e);
            }
          }
          if (permissionChecker != null) {
            PermissionThreadLocal.setPermissionChecker(permissionChecker);
          }
          Boolean clusterForwardMessage=(Boolean)message.get(ClusterLinkUtil.CLUSTER_FORWARD_MESSAGE);
          if (clusterForwardMessage != null) {
            MessageValuesThreadLocal.setValue(ClusterLinkUtil.CLUSTER_FORWARD_MESSAGE,clusterForwardMessage);
          }
          messageListener.receive(message);
        }
 catch (        MessageListenerException mle) {
          _log.error("Unable to process message " + message,mle);
        }
 finally {
          ThreadLocalCacheManager.clearAll(Lifecycle.REQUEST);
          CentralizedThreadLocal.clearShortLivedThreadLocals();
        }
      }
    }
;
    threadPoolExecutor.execute(runnable);
  }
}
