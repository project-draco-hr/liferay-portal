{
  if (!message.contains("companyId")) {
    message.put("companyId",CompanyThreadLocal.getCompanyId());
  }
  if (!message.contains("principalName")) {
    message.put("principalName",PrincipalThreadLocal.getName());
  }
  if (!message.contains("principalPassword")) {
    message.put("principalPassword",PrincipalThreadLocal.getPassword());
  }
  ThreadPoolExecutor threadPoolExecutor=getThreadPoolExecutor();
  for (  final MessageListener messageListener : messageListeners) {
    Runnable runnable=new MessageRunnable(message){
      public void run(){
        long companyId=CompanyThreadLocal.getCompanyId();
        String principalName=PrincipalThreadLocal.getName();
        String principalPassword=PrincipalThreadLocal.getPassword();
        try {
          long messageCompanyId=message.getLong("companyId");
          if (messageCompanyId > 0) {
            CompanyThreadLocal.setCompanyId(messageCompanyId);
          }
          String messagePrincipalName=message.getString("principalName");
          if (Validator.isNotNull(messagePrincipalName)) {
            PrincipalThreadLocal.setName(messagePrincipalName);
          }
          String messagePrincipalPassword=message.getString("principalPassword");
          if (Validator.isNotNull(messagePrincipalPassword)) {
            PrincipalThreadLocal.setPassword(messagePrincipalPassword);
          }
          messageListener.receive(message);
        }
 catch (        MessageListenerException mle) {
          _log.error("Unable to process message " + message,mle);
        }
 finally {
          CompanyThreadLocal.setCompanyId(companyId);
          PrincipalThreadLocal.setName(principalName);
          PrincipalThreadLocal.setPassword(principalPassword);
          ThreadLocalCacheManager.clearAll(Lifecycle.REQUEST);
          CentralizedThreadLocal.clearShortLivedThreadLocals();
        }
      }
    }
;
    threadPoolExecutor.execute(runnable);
  }
}
