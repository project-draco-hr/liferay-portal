{
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put("AssociateTag",_amazonRankingsConfiguration.amazonAssociateTag());
  parameters.put("AWSAccessKeyId",_amazonRankingsConfiguration.amazonAccessKeyId());
  parameters.put("IdType","ASIN");
  parameters.put("ItemId",_isbn);
  parameters.put("Operation","ItemLookup");
  parameters.put("ResponseGroup","Images,ItemAttributes,Offers,SalesRank");
  parameters.put("Service","AWSECommerceService");
  parameters.put("Timestamp",AmazonRankingsUtil.getTimestamp());
  String urlWithSignature=AmazonSignedRequestsUtil.generateUrlWithSignature(_amazonRankingsConfiguration,parameters);
  String xml=HttpUtil.URLtoString(urlWithSignature);
  Document document=SAXReaderUtil.read(xml);
  Element rootElement=document.getRootElement();
  if (rootElement == null) {
    return null;
  }
  if (hasErrorMessage(rootElement)) {
    return null;
  }
  Element itemsElement=rootElement.element("Items");
  if (itemsElement == null) {
    return null;
  }
  Element requestElement=itemsElement.element("Request");
  if (requestElement != null) {
    Element errorsElement=requestElement.element("Errors");
    if (hasErrorMessage(errorsElement)) {
      return null;
    }
  }
  Element itemElement=itemsElement.element("Item");
  if (itemElement == null) {
    return null;
  }
  Element itemAttributesElement=itemElement.element("ItemAttributes");
  if (itemAttributesElement == null) {
    return null;
  }
  String productName=itemAttributesElement.elementText("Title");
  String catalog=StringPool.BLANK;
  String[] authors=getAuthors(itemAttributesElement);
  String releaseDateAsString=itemAttributesElement.elementText("PublicationDate");
  Date releaseDate=getReleaseDate(releaseDateAsString);
  String manufacturer=itemAttributesElement.elementText("Manufacturer");
  String smallImageURL=getImageURL(itemElement,"SmallImage");
  String mediumImageURL=getImageURL(itemElement,"MediumImage");
  String largeImageURL=getImageURL(itemElement,"LargeImage");
  double listPrice=getPrice(itemAttributesElement.element("ListPrice"));
  double ourPrice=0;
  Element offerListingElement=getOfferListing(itemElement);
  if (offerListingElement != null) {
    ourPrice=getPrice(offerListingElement.element("Price"));
  }
  double usedPrice=0;
  double collectiblePrice=0;
  double thirdPartyNewPrice=0;
  Element offerSummaryElement=itemElement.element("OfferSummary");
  if (offerSummaryElement != null) {
    usedPrice=getPrice(offerSummaryElement.element("LowestUsedPrice"));
    collectiblePrice=getPrice(offerSummaryElement.element("LowestCollectiblePrice"));
    thirdPartyNewPrice=getPrice(offerSummaryElement.element("LowestNewPrice"));
  }
  int salesRank=GetterUtil.getInteger(itemElement.elementText("SalesRank"));
  String media=StringPool.BLANK;
  String availability=getAvailability(offerListingElement);
  return new AmazonRankings(_isbn,productName,catalog,authors,releaseDate,releaseDateAsString,manufacturer,smallImageURL,mediumImageURL,largeImageURL,listPrice,ourPrice,usedPrice,collectiblePrice,thirdPartyNewPrice,salesRank,media,availability);
}
