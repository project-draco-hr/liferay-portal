{
  _schedulerEngineEnabled=GetterUtil.getBoolean(_props.get(PropsKeys.SCHEDULER_ENABLED));
  if (!_schedulerEngineEnabled) {
    return;
  }
  Dictionary<String,Object> properties=componentContext.getProperties();
  _schedulerEngineHelperConfiguration=ConfigurableUtil.createConfigurable(SchedulerEngineHelperConfiguration.class,properties);
  _bundleContext=componentContext.getBundleContext();
  registerDestination(_bundleContext,DestinationConfiguration.DESTINATION_TYPE_PARALLEL,DestinationNames.SCHEDULER_DISPATCH);
  Destination scriptingDestination=registerDestination(_bundleContext,DestinationConfiguration.DESTINATION_TYPE_PARALLEL,DestinationNames.SCHEDULER_SCRIPTING);
  SchedulerEventMessageListenerWrapper schedulerEventMessageListenerWrapper=new SchedulerEventMessageListenerWrapper();
  schedulerEventMessageListenerWrapper.setMessageListener(new ScriptingMessageListener());
  scriptingDestination.register(schedulerEventMessageListenerWrapper);
  _serviceTracker=ServiceTrackerFactory.open(_bundleContext,"(objectClass=" + SchedulerEventMessageListener.class.getName() + ")",new SchedulerEventMessageListenerServiceTrackerCustomizer());
}
