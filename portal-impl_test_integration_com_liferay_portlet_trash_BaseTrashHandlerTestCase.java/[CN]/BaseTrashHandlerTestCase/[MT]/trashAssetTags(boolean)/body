{
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext();
  serviceContext.setScopeGroupId(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  int initialAssetTagsCount=AssetTagLocalServiceUtil.getGroupTagsCount(group.getGroupId());
  String[] assetTagNames=new String[]{"Content","Enterprise","Open","Source","For","Life"};
  serviceContext.setAssetTagNames(assetTagNames);
  baseModel=addBaseModel(parentBaseModel,approved,serviceContext);
  Assert.assertEquals(approved,isAssetEntryVisible(baseModel));
  if (approved) {
    Assert.assertEquals(initialAssetTagsCount + assetTagNames.length,getGroupTagsCount(group.getGroupId()));
  }
 else {
    Assert.assertEquals(initialAssetTagsCount,getGroupTagsCount(group.getGroupId()));
  }
  moveBaseModelToTrash((Long)baseModel.getPrimaryKeyObj());
  baseModel=getBaseModel((Long)baseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialAssetTagsCount,getGroupTagsCount(group.getGroupId()));
  TrashHandler trashHandler=TrashHandlerRegistryUtil.getTrashHandler(getBaseModelClassName());
  trashHandler.restoreTrashEntry(getTrashEntryClassPK(baseModel));
  Assert.assertEquals(approved,isAssetEntryVisible(baseModel));
  if (approved) {
    Assert.assertEquals(initialAssetTagsCount + assetTagNames.length,getGroupTagsCount(group.getGroupId()));
  }
 else {
    Assert.assertEquals(initialAssetTagsCount,getGroupTagsCount(group.getGroupId()));
  }
}
