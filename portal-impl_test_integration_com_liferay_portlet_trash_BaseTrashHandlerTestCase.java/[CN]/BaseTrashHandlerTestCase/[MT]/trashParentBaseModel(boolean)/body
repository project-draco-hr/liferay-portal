{
  Group group=ServiceTestUtil.addGroup();
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext();
  serviceContext.setScopeGroupId(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  int initialBaseModelsCount=getBaseModelsNotInTrashCount(parentBaseModel);
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  BaseModel<?> baseModel=addBaseModel(parentBaseModel,true,serviceContext);
  Assert.assertEquals(initialBaseModelsCount + 1,getBaseModelsNotInTrashCount(parentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  moveBaseModelToTrash((Long)baseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialBaseModelsCount,getBaseModelsNotInTrashCount(parentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  Assert.assertFalse(isInTrashFolder(baseModel));
  moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialTrashEntriesCount + 2,getTrashEntriesCount(group.getGroupId()));
  Assert.assertTrue(isInTrashFolder(baseModel));
  if (isBaseModelMoveableFromTrash()) {
    if (delete) {
      TrashHandler trashHandler=TrashHandlerRegistryUtil.getTrashHandler(getParentBaseModelClassName());
      trashHandler.deleteTrashEntry((Long)parentBaseModel.getPrimaryKeyObj());
      Assert.assertEquals(initialBaseModelsCount,getBaseModelsNotInTrashCount(parentBaseModel));
      Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
    }
 else {
      BaseModel<?> newParentBaseModel=moveBaseModelFromTrash(baseModel,group,serviceContext);
      Assert.assertEquals(initialBaseModelsCount + 1,getBaseModelsNotInTrashCount(newParentBaseModel));
      Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
    }
  }
}
