{
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext();
  serviceContext.setScopeGroupId(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  int initialBaseModelsCount=getNotInTrashBaseModelsCount(parentBaseModel);
  int initialBaseModelsSearchCount=0;
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  int initialTrashEntriesSearchCount=0;
  if (isIndexableBaseModel()) {
    initialBaseModelsSearchCount=searchBaseModelsCount(getBaseModelClass(),group.getGroupId());
    initialTrashEntriesSearchCount=searchTrashEntriesCount(getSearchKeywords(),serviceContext);
  }
  baseModel=addBaseModel(parentBaseModel,true,serviceContext);
  baseModel=updateBaseModel((Long)baseModel.getPrimaryKeyObj(),serviceContext);
  Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(parentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  if (isIndexableBaseModel()) {
    Assert.assertEquals(initialBaseModelsSearchCount + 1,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
    Assert.assertEquals(initialTrashEntriesSearchCount,searchTrashEntriesCount(getSearchKeywords(),serviceContext));
  }
  if (isAssetableModel()) {
    Assert.assertTrue(isAssetEntryVisible(baseModel));
  }
  moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  Assert.assertTrue(isInTrashContainer(baseModel));
  if (isAssetableModel()) {
    Assert.assertFalse(isAssetEntryVisible(baseModel));
  }
  if (isBaseModelMoveableFromTrash()) {
    BaseModel<?> newParentBaseModel=moveBaseModelFromTrash(baseModel,group,serviceContext);
    Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(newParentBaseModel));
    Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  }
}
