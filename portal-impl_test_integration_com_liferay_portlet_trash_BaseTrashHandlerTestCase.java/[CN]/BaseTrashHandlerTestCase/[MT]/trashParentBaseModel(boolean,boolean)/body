{
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  int initialBaseModelsCount=getNotInTrashBaseModelsCount(parentBaseModel);
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  baseModel=addBaseModel(parentBaseModel,true,serviceContext);
  Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(parentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  moveBaseModelToTrash((Long)baseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialBaseModelsCount,getNotInTrashBaseModelsCount(parentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  Assert.assertFalse(isInTrashContainer(baseModel));
  moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialTrashEntriesCount + 2,getTrashEntriesCount(group.getGroupId()));
  Assert.assertTrue(isInTrashContainer(baseModel));
  TrashHandler parentTrashHandler=TrashHandlerRegistryUtil.getTrashHandler(getParentBaseModelClassName());
  if (getBaseModelClassName().equals(getParentBaseModelClassName())) {
    Assert.assertEquals(0,parentTrashHandler.getTrashContainedModelsCount((Long)parentBaseModel.getPrimaryKeyObj()));
    Assert.assertEquals(1,parentTrashHandler.getTrashContainerModelsCount((Long)parentBaseModel.getPrimaryKeyObj()));
  }
 else {
    Assert.assertEquals(1,parentTrashHandler.getTrashContainedModelsCount((Long)parentBaseModel.getPrimaryKeyObj()));
    Assert.assertEquals(0,parentTrashHandler.getTrashContainerModelsCount((Long)parentBaseModel.getPrimaryKeyObj()));
  }
  if (isAssetableModel()) {
    Assert.assertFalse(isAssetEntryVisible(baseModel));
  }
  if (deleteTrashEntries) {
    TrashEntryServiceUtil.deleteEntries(group.getGroupId());
    Assert.assertEquals(0,getTrashEntriesCount(group.getGroupId()));
  }
 else   if (delete) {
    parentTrashHandler.deleteTrashEntry((Long)parentBaseModel.getPrimaryKeyObj());
    Assert.assertEquals(initialBaseModelsCount,getNotInTrashBaseModelsCount(parentBaseModel));
    if (isBaseModelMoveableFromTrash()) {
      Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
      TrashHandler trashHandler=TrashHandlerRegistryUtil.getTrashHandler(getBaseModelClassName());
      trashHandler.deleteTrashEntry(getTrashEntryClassPK(baseModel));
    }
    Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  }
 else   if (isBaseModelMoveableFromTrash()) {
    BaseModel<?> newParentBaseModel=moveBaseModelFromTrash(baseModel,group,serviceContext);
    Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(newParentBaseModel));
    Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
    if (isAssetableModel()) {
      Assert.assertTrue(isAssetEntryVisible(baseModel));
    }
  }
}
