{
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  int initialBaseModelsCount=getNotInTrashBaseModelsCount(parentBaseModel);
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  baseModel=addBaseModel(parentBaseModel,true,serviceContext);
  Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(parentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  moveBaseModelToTrash((Long)baseModel.getPrimaryKeyObj());
  FinderCacheUtil.clearCache();
  Assert.assertEquals(initialBaseModelsCount,getNotInTrashBaseModelsCount(parentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  Assert.assertFalse(isInTrashContainer(baseModel));
  moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialTrashEntriesCount + 2,getTrashEntriesCount(group.getGroupId()));
  Assert.assertTrue(isInTrashContainer(baseModel));
  if (isAssetableModel()) {
    Assert.assertFalse(isAssetEntryVisible(baseModel));
  }
  if (deleteTrashEntries) {
    TrashEntryServiceUtil.deleteEntries(group.getGroupId());
    Assert.assertEquals(0,getTrashEntriesCount(group.getGroupId()));
  }
 else   if (isBaseModelMoveableFromTrash()) {
    if (delete) {
      TrashHandler parentTrashHandler=TrashHandlerRegistryUtil.getTrashHandler(getParentBaseModelClassName());
      parentTrashHandler.deleteTrashEntry((Long)parentBaseModel.getPrimaryKeyObj());
      Assert.assertEquals(initialBaseModelsCount,getNotInTrashBaseModelsCount(parentBaseModel));
      Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
      TrashHandler trashHandler=TrashHandlerRegistryUtil.getTrashHandler(getBaseModelClassName());
      trashHandler.deleteTrashEntry(getTrashEntryClassPK(baseModel));
      Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
    }
 else {
      BaseModel<?> newParentBaseModel=moveBaseModelFromTrash(baseModel,group,serviceContext);
      Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(newParentBaseModel));
      Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
      if (isAssetableModel()) {
        Assert.assertTrue(isAssetEntryVisible(baseModel));
      }
    }
  }
}
