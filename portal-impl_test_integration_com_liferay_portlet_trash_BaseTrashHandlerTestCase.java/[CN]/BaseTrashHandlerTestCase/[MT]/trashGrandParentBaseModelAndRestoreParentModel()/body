{
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> grandParentBaseModel=getParentBaseModel(group,serviceContext);
  int initialBaseModelsCount=getNotInTrashBaseModelsCount(grandParentBaseModel);
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,(Long)grandParentBaseModel.getPrimaryKeyObj(),serviceContext);
  baseModel=addBaseModel(parentBaseModel,true,serviceContext);
  if (getBaseModelClassName().equals(getParentBaseModelClassName())) {
    Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(grandParentBaseModel));
  }
 else {
    Assert.assertEquals(initialBaseModelsCount,getNotInTrashBaseModelsCount(grandParentBaseModel));
  }
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  moveParentBaseModelToTrash((Long)grandParentBaseModel.getPrimaryKeyObj());
  Assert.assertTrue(isInTrashContainer(baseModel));
  Assert.assertTrue(isInTrashContainer(parentBaseModel));
  Assert.assertEquals(initialBaseModelsCount,getNotInTrashBaseModelsCount(grandParentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  TrashHandler parentTrashHandler=TrashHandlerRegistryUtil.getTrashHandler(getParentBaseModelClassName());
  if (isAssetableModel()) {
    Assert.assertFalse(isAssetEntryVisible(baseModel));
  }
  if (isAssetableParentModel()) {
    Assert.assertFalse(isAssetEntryVisible(parentBaseModel));
  }
  parentTrashHandler.restoreTrashEntry(TestPropsValues.getUserId(),(Long)grandParentBaseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  Assert.assertFalse(isInTrashContainer(baseModel));
  Assert.assertFalse(isInTrashContainer(parentBaseModel));
  if (isAssetableModel()) {
    Assert.assertTrue(isAssetEntryVisible(baseModel));
  }
  if (isAssetableParentModel()) {
    Assert.assertTrue(isAssetEntryVisible(parentBaseModel));
  }
}
