{
  Group group=ServiceTestUtil.addGroup();
  ServiceContext serviceContext=ServiceTestUtil.getServiceContext();
  serviceContext.setScopeGroupId(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  int initialBaseModelsCount=getBaseModelsNotInTrashCount(parentBaseModel);
  int initialBaseModelsSearchCount=0;
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  int initialTrashEntriesSearchCount=0;
  if (isIndexableModel()) {
    initialBaseModelsSearchCount=searchBaseModelsCount(getBaseModelClass(),group.getGroupId());
    initialTrashEntriesSearchCount=searchTrashEntriesCount(getSearchKeywords(),serviceContext);
  }
  BaseModel<?> baseModel=addBaseModel(parentBaseModel,approved,serviceContext);
  WorkflowedModel workflowedModel=getWorkflowedModel(baseModel);
  int oldStatus=workflowedModel.getStatus();
  if (isAssetableModel()) {
    Assert.assertEquals(approved,isAssetEntryVisible(baseModel));
  }
  Assert.assertEquals(initialBaseModelsCount + 1,getBaseModelsNotInTrashCount(parentBaseModel));
  if (isIndexableModel()) {
    if (approved) {
      Assert.assertEquals(initialBaseModelsSearchCount + 1,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
    }
 else {
      Assert.assertEquals(initialBaseModelsSearchCount,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
    }
    Assert.assertEquals(initialTrashEntriesSearchCount,searchTrashEntriesCount(getSearchKeywords(),serviceContext));
  }
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  moveBaseModelToTrash((Long)baseModel.getPrimaryKeyObj());
  TrashEntry trashEntry=TrashEntryLocalServiceUtil.getEntry(getBaseModelClassName(),getTrashClassPK(baseModel));
  workflowedModel=getWorkflowedModel(getBaseModel((Long)baseModel.getPrimaryKeyObj()));
  Assert.assertEquals(getTrashClassPK(baseModel),Long.valueOf(trashEntry.getClassPK()));
  Assert.assertEquals(WorkflowConstants.STATUS_IN_TRASH,workflowedModel.getStatus());
  if (isAssetableModel()) {
    Assert.assertFalse(isAssetEntryVisible(baseModel));
  }
  Assert.assertEquals(initialBaseModelsCount,getBaseModelsNotInTrashCount(parentBaseModel));
  if (isIndexableModel()) {
    Assert.assertEquals(initialBaseModelsSearchCount,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
    Assert.assertEquals(initialTrashEntriesSearchCount + 1,searchTrashEntriesCount(getSearchKeywords(),serviceContext));
  }
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  TrashHandler trashHandler=TrashHandlerRegistryUtil.getTrashHandler(getBaseModelClassName());
  if (delete) {
    trashHandler.deleteTrashEntry(getTrashClassPK(baseModel));
    Assert.assertNull(fetchAssetEntry(baseModel));
    Assert.assertEquals(initialBaseModelsCount,getBaseModelsNotInTrashCount(parentBaseModel));
    if (isIndexableModel()) {
      Assert.assertEquals(initialBaseModelsSearchCount,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
      Assert.assertEquals(initialTrashEntriesSearchCount,searchTrashEntriesCount(getSearchKeywords(),serviceContext));
    }
  }
 else {
    trashHandler.restoreTrashEntry(getTrashClassPK(baseModel));
    baseModel=getBaseModel((Long)baseModel.getPrimaryKeyObj());
    workflowedModel=getWorkflowedModel(baseModel);
    Assert.assertEquals(oldStatus,workflowedModel.getStatus());
    if (isAssetableModel()) {
      Assert.assertEquals(approved,isAssetEntryVisible(baseModel));
    }
    Assert.assertEquals(initialBaseModelsCount + 1,getBaseModelsNotInTrashCount(parentBaseModel));
    if (isIndexableModel()) {
      if (approved) {
        Assert.assertEquals(initialBaseModelsSearchCount + 1,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
      }
 else {
        Assert.assertEquals(initialBaseModelsSearchCount,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
      }
      Assert.assertEquals(initialTrashEntriesSearchCount,searchTrashEntriesCount(getSearchKeywords(),serviceContext));
    }
  }
}
