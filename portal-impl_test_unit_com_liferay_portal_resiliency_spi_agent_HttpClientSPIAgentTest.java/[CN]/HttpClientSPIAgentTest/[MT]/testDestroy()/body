{
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(),Level.OFF);
  HttpClientSPIAgent httpClientSPIAgent=new HttpClientSPIAgent(_spiConfiguration,new MockRegistrationReference(new MockIntraband()));
  Queue<Socket> socketBlockingQueue=httpClientSPIAgent.socketBlockingQueue;
  SocketChannel[] socketChannels=IntrabandTestUtil.createSocketChannelPeers();
  FileDescriptor fileDescriptor=_injectFileDescriptor(socketChannels[0]);
  socketBlockingQueue.add(socketChannels[0].socket());
  socketBlockingQueue.add(socketChannels[1].socket());
  httpClientSPIAgent.destroy();
  _closeSocketChannel(socketChannels[0],fileDescriptor);
  Assert.assertTrue(logRecords.isEmpty());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(),Level.WARNING);
  httpClientSPIAgent=new HttpClientSPIAgent(_spiConfiguration,new MockRegistrationReference(new MockIntraband()));
  socketBlockingQueue=httpClientSPIAgent.socketBlockingQueue;
  socketChannels=IntrabandTestUtil.createSocketChannelPeers();
  fileDescriptor=_injectFileDescriptor(socketChannels[0]);
  socketBlockingQueue.add(socketChannels[0].socket());
  socketBlockingQueue.add(socketChannels[1].socket());
  httpClientSPIAgent.destroy();
  _closeSocketChannel(socketChannels[0],fileDescriptor);
  Assert.assertEquals(1,logRecords.size());
  LogRecord logRecord=logRecords.get(0);
  Throwable throwable=logRecord.getThrown();
  Assert.assertSame(IOException.class,throwable.getClass());
}
