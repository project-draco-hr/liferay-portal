{
  ServerSocketChannel serverSocketChannel=SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(),_spiConfiguration.getConnectorPort(),null);
  serverSocketChannel.configureBlocking(true);
  try (ServerSocket serverSocket=serverSocketChannel.socket()){
    SPIConfiguration spiConfiguration=new SPIConfiguration(null,null,serverSocket.getLocalPort(),_spiConfiguration.getBaseDir(),null,null,null);
    HttpClientSPIAgent httpClientSPIAgent=new HttpClientSPIAgent(spiConfiguration,new MockRegistrationReference(new MockIntraband()));
    Socket socket=httpClientSPIAgent.borrowSocket();
    closePeers(socket,serverSocket);
    Queue<Socket> socketBlockingQueue=httpClientSPIAgent.socketBlockingQueue;
    socketBlockingQueue.add(socket);
    socket=httpClientSPIAgent.borrowSocket();
    closePeers(socket,serverSocket);
    socketBlockingQueue.add(new Socket());
    socket=httpClientSPIAgent.borrowSocket();
    closePeers(socket,serverSocket);
    socket=httpClientSPIAgent.borrowSocket();
    socket.shutdownInput();
    socketBlockingQueue.add(socket);
    socket=httpClientSPIAgent.borrowSocket();
    closePeers(socket,serverSocket);
    socket=serverSocket.accept();
    socket.close();
    try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(),Level.OFF)){
      List<LogRecord> logRecords=captureHandler.getLogRecords();
      socket=new Socket(InetAddressUtil.getLoopbackInetAddress(),_spiConfiguration.getConnectorPort());
      socket.shutdownInput();
      SocketImpl socketImpl=swapSocketImpl(socket,null);
      socketBlockingQueue.add(socket);
      socket=httpClientSPIAgent.borrowSocket();
      swapSocketImpl(socket,socketImpl);
      closePeers(socket,serverSocket);
      socket=serverSocket.accept();
      socket.close();
      Assert.assertTrue(logRecords.isEmpty());
      logRecords=captureHandler.resetLogLevel(Level.WARNING);
      socket=new Socket(InetAddressUtil.getLoopbackInetAddress(),_spiConfiguration.getConnectorPort());
      socket.shutdownInput();
      socketImpl=swapSocketImpl(socket,null);
      socketBlockingQueue.add(socket);
      socket=httpClientSPIAgent.borrowSocket();
      swapSocketImpl(socket,socketImpl);
      closePeers(socket,serverSocket);
      socket=serverSocket.accept();
      socket.close();
      Assert.assertEquals(1,logRecords.size());
      LogRecord logRecord=logRecords.get(0);
      Throwable throwable=logRecord.getThrown();
      Assert.assertSame(IOException.class,throwable.getClass());
    }
     socket=httpClientSPIAgent.borrowSocket();
    socket.shutdownOutput();
    socketBlockingQueue.add(socket);
    socket=httpClientSPIAgent.borrowSocket();
    closePeers(socket,serverSocket);
    socket=serverSocket.accept();
    socket.close();
    socket=httpClientSPIAgent.borrowSocket();
    socketBlockingQueue.add(socket);
    Assert.assertSame(socket,httpClientSPIAgent.borrowSocket());
    closePeers(socket,serverSocket);
  }
 }
