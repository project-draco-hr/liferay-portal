{
  ServerSocketChannel serverSocketChannel=SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(),_spiConfiguration.getConnectorPort(),null);
  serverSocketChannel.configureBlocking(true);
  ServerSocket serverSocket=serverSocketChannel.socket();
  SPIConfiguration spiConfiguration=new SPIConfiguration(null,null,serverSocket.getLocalPort(),_spiConfiguration.getBaseDir(),null,null);
  HttpClientSPIAgent httpClientSPIAgent=new HttpClientSPIAgent(spiConfiguration,new MockRegistrationReference(new MockIntraband()));
  Socket socket=httpClientSPIAgent.borrowSocket();
  closePeers(socket,serverSocket);
  Queue<Socket> socketBlockingQueue=httpClientSPIAgent.socketBlockingQueue;
  socketBlockingQueue.add(socket);
  socket=httpClientSPIAgent.borrowSocket();
  closePeers(socket,serverSocket);
  socketBlockingQueue.add(new Socket());
  socket=httpClientSPIAgent.borrowSocket();
  closePeers(socket,serverSocket);
  socket=httpClientSPIAgent.borrowSocket();
  socket.shutdownInput();
  socketBlockingQueue.add(socket);
  socket=httpClientSPIAgent.borrowSocket();
  closePeers(socket,serverSocket);
  socket=serverSocket.accept();
  socket.close();
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(),Level.OFF);
  SocketChannel socketChannel=SocketChannel.open(httpClientSPIAgent.socketAddress);
  socket=socketChannel.socket();
  socket.shutdownInput();
  FileDescriptor fileDescriptor=_injectFileDescriptor(socketChannel);
  socketBlockingQueue.add(socket);
  socket=httpClientSPIAgent.borrowSocket();
  closeSocketChannel(socketChannel,fileDescriptor);
  closePeers(socket,serverSocket);
  socket=serverSocket.accept();
  socket.close();
  Assert.assertTrue(logRecords.isEmpty());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(),Level.WARNING);
  socketChannel=SocketChannel.open(httpClientSPIAgent.socketAddress);
  socket=socketChannel.socket();
  socket.shutdownInput();
  fileDescriptor=_injectFileDescriptor(socketChannel);
  socketBlockingQueue.add(socket);
  socket=httpClientSPIAgent.borrowSocket();
  closeSocketChannel(socketChannel,fileDescriptor);
  closePeers(socket,serverSocket);
  socket=serverSocket.accept();
  socket.close();
  Assert.assertEquals(1,logRecords.size());
  LogRecord logRecord=logRecords.get(0);
  Throwable throwable=logRecord.getThrown();
  Assert.assertSame(IOException.class,throwable.getClass());
  socket=httpClientSPIAgent.borrowSocket();
  socket.shutdownOutput();
  socketBlockingQueue.add(socket);
  socket=httpClientSPIAgent.borrowSocket();
  closePeers(socket,serverSocket);
  socket=serverSocket.accept();
  socket.close();
  socket=httpClientSPIAgent.borrowSocket();
  socketBlockingQueue.add(socket);
  Assert.assertSame(socket,httpClientSPIAgent.borrowSocket());
  closePeers(socket,serverSocket);
  serverSocket.close();
}
