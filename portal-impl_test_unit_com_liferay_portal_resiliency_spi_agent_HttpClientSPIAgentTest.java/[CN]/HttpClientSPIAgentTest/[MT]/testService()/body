{
  HttpClientSPIAgent httpClientSPIAgent=new HttpClientSPIAgent(_spiConfiguration,new MockRegistrationReference(new MockIntraband()));
  try {
    httpClientSPIAgent.service(null,null);
    Assert.fail();
  }
 catch (  PortalResiliencyException pre) {
    Throwable throwable=pre.getCause();
    Assert.assertSame(ConnectException.class,throwable.getClass());
  }
  MockIntraband mockIntraband=new MockIntraband();
  IOException ioException=new IOException();
  mockIntraband.setIOException(ioException);
  httpClientSPIAgent=new HttpClientSPIAgent(_spiConfiguration,new MockRegistrationReference(mockIntraband));
  ServerSocketChannel serverSocketChannel=SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(),_spiConfiguration.getConnectorPort(),null);
  serverSocketChannel.configureBlocking(true);
  SocketChannel socketChannel=SocketChannel.open(httpClientSPIAgent.socketAddress);
  Socket socket=socketChannel.socket();
  Queue<Socket> socketBlockingQueue=httpClientSPIAgent.socketBlockingQueue;
  socketBlockingQueue.add(socket);
  MockHttpServletRequest mockHttpServletRequest=new MockHttpServletRequest();
  mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_PORTLET,_portlet);
  try {
    httpClientSPIAgent.service(mockHttpServletRequest,null);
    Assert.fail();
  }
 catch (  PortalResiliencyException pre) {
    Throwable throwable=pre.getCause();
    Assert.assertSame(IOException.class,throwable.getClass());
    throwable=throwable.getCause();
    Assert.assertSame(MailboxException.class,throwable.getClass());
    Assert.assertSame(ioException,throwable.getCause());
  }
  ServerSocket serverSocket=serverSocketChannel.socket();
  closePeers(socket,serverSocket);
  CaptureHandler captureHandler=null;
  try {
    captureHandler=JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(),Level.OFF);
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    socket=new Socket(InetAddressUtil.getLoopbackInetAddress(),_spiConfiguration.getConnectorPort());
    SocketImpl socketImpl=swapSocketImpl(socket,null);
    httpClientSPIAgent=new HttpClientSPIAgent(_spiConfiguration,new MockRegistrationReference(mockIntraband));
    socketBlockingQueue=httpClientSPIAgent.socketBlockingQueue;
    socketBlockingQueue.add(socket);
    try {
      httpClientSPIAgent.service(mockHttpServletRequest,null);
      Assert.fail();
    }
 catch (    PortalResiliencyException pre) {
      Throwable throwable=pre.getCause();
      Assert.assertSame(IOException.class,throwable.getClass());
    }
    Assert.assertTrue(logRecords.isEmpty());
    swapSocketImpl(socket,socketImpl);
    closePeers(socket,serverSocket);
    logRecords=captureHandler.resetLogLevel(Level.WARNING);
    socket=new Socket(InetAddressUtil.getLoopbackInetAddress(),_spiConfiguration.getConnectorPort());
    socketImpl=swapSocketImpl(socket,null);
    httpClientSPIAgent=new HttpClientSPIAgent(_spiConfiguration,new MockRegistrationReference(mockIntraband));
    socketBlockingQueue=httpClientSPIAgent.socketBlockingQueue;
    socketBlockingQueue.add(socket);
    try {
      httpClientSPIAgent.service(mockHttpServletRequest,null);
      Assert.fail();
    }
 catch (    PortalResiliencyException pre) {
      Throwable throwable=pre.getCause();
      Assert.assertSame(IOException.class,throwable.getClass());
    }
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Throwable throwable=logRecord.getThrown();
    Assert.assertSame(IOException.class,throwable.getClass());
    swapSocketImpl(socket,socketImpl);
  }
  finally {
    if (captureHandler != null) {
      captureHandler.close();
    }
  }
  closePeers(socket,serverSocket);
  socketChannel=SocketChannel.open(httpClientSPIAgent.socketAddress);
  socketChannel.configureBlocking(true);
  mockIntraband=new MockIntraband(){
    @Override protected Datagram processDatagram(    Datagram datagram){
      try {
        long receipt=ReflectionTestUtil.invoke(MailboxUtil.class,"depositMail",new Class<?>[]{ByteBuffer.class},datagram.getDataByteBuffer());
        byte[] receiptData=new byte[8];
        BigEndianCodec.putLong(receiptData,0,receipt);
        return Datagram.createResponseDatagram(datagram,ByteBuffer.wrap(receiptData));
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  httpClientSPIAgent=new HttpClientSPIAgent(_spiConfiguration,new MockRegistrationReference(mockIntraband));
  socketBlockingQueue=httpClientSPIAgent.socketBlockingQueue;
  socket=socketChannel.socket();
  socketBlockingQueue.add(socket);
  Serializer serializer=new Serializer();
  serializer.writeString(_SERVLET_CONTEXT_NAME);
  serializer.writeObject(new SPIAgentResponse(_SERVLET_CONTEXT_NAME));
  long receipt=ReflectionTestUtil.invoke(MailboxUtil.class,"depositMail",new Class<?>[]{ByteBuffer.class},serializer.toByteBuffer());
  Socket remoteSocket=serverSocket.accept();
  OutputStream outputStream=remoteSocket.getOutputStream();
  outputStream.write("HTTP/1.1 200 OK\n\n".getBytes("US-ASCII"));
  byte[] receiptData=new byte[8];
  BigEndianCodec.putLong(receiptData,0,receipt);
  outputStream.write(receiptData);
  outputStream.flush();
  httpClientSPIAgent.service(mockHttpServletRequest,new MockHttpServletResponse());
  socket.close();
  remoteSocket.close();
  serverSocket.close();
}
