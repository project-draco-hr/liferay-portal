{
  _user=UserTestUtil.addUser();
  UserLocalServiceUtil.setGroupUsers(_group.getGroupId(),new long[]{_user.getUserId()});
  PermissionChecker permissionChecker=_getPermissionChecker(_user);
  deployRemotePortlet(_user.getCompanyId(),_NONSITE_PORTLET_RESOURCE_NAME);
  try {
    boolean hasPermission=permissionChecker.hasPermission(0,_NONSITE_PORTLET_RESOURCE_NAME,_NONSITE_PORTLET_RESOURCE_NAME,_ADD_TEST_RESULT_ACTION);
    Assert.assertTrue(hasPermission);
    hasPermission=permissionChecker.hasPermission(0,_NONSITE_ROOT_MODEL_RESOURCE_NAME,_NONSITE_ROOT_MODEL_RESOURCE_NAME,_ADD_TEST_ACTION);
    Assert.assertFalse(hasPermission);
    _role=RoleTestUtil.addRole(RandomTestUtil.randomString(),RoleConstants.TYPE_REGULAR);
    UserLocalServiceUtil.setRoleUsers(_role.getRoleId(),new long[]{_user.getUserId()});
    ResourcePermissionLocalServiceUtil.setResourcePermissions(_user.getCompanyId(),_NONSITE_ROOT_MODEL_RESOURCE_NAME,ResourceConstants.SCOPE_COMPANY,String.valueOf(_user.getCompanyId()),_role.getRoleId(),new String[]{_ADD_TEST_ACTION});
    try {
      hasPermission=permissionChecker.hasPermission(0,_NONSITE_ROOT_MODEL_RESOURCE_NAME,_NONSITE_ROOT_MODEL_RESOURCE_NAME,_ADD_TEST_ACTION);
      Assert.assertTrue(hasPermission);
    }
  finally {
      ResourcePermissionLocalServiceUtil.deleteResourcePermissions(_user.getCompanyId(),_NONSITE_ROOT_MODEL_RESOURCE_NAME,ResourceConstants.SCOPE_COMPANY,_user.getCompanyId());
    }
  }
  finally {
    destroyRemotePortlet(_user.getCompanyId(),_NONSITE_PORTLET_RESOURCE_NAME);
  }
}
