{
  _user=UserTestUtil.addUser();
  _role=RoleTestUtil.addRole("PermissionTestRole",RoleConstants.TYPE_REGULAR);
  UserLocalServiceUtil.setRoleUsers(_role.getRoleId(),new long[]{_user.getUserId()});
  PermissionChecker permissionChecker=_getPermissionChecker(_user);
  long resourceId=12345;
  ResourceLocalServiceUtil.addResources(_user.getCompanyId(),_group.getGroupId(),0,_MODEL_RESOURCE_NAME,resourceId,false,false,false);
  try {
    boolean hasPermission=permissionChecker.hasPermission(_group.getGroupId(),_MODEL_RESOURCE_NAME,resourceId,ActionKeys.DELETE);
    Assert.assertFalse(hasPermission);
    ResourcePermissionLocalServiceUtil.setResourcePermissions(_user.getCompanyId(),_MODEL_RESOURCE_NAME,ResourceConstants.SCOPE_GROUP,String.valueOf(_group.getGroupId()),_role.getRoleId(),new String[]{ActionKeys.DELETE});
    try {
      hasPermission=permissionChecker.hasPermission(_group.getGroupId(),_MODEL_RESOURCE_NAME,resourceId,ActionKeys.DELETE);
      Assert.assertTrue(hasPermission);
    }
  finally {
      ResourcePermissionLocalServiceUtil.deleteResourcePermissions(_user.getCompanyId(),_MODEL_RESOURCE_NAME,ResourceConstants.SCOPE_GROUP,_group.getGroupId());
    }
  }
  finally {
    ResourceLocalServiceUtil.deleteResource(_user.getCompanyId(),_MODEL_RESOURCE_NAME,ResourceConstants.SCOPE_INDIVIDUAL,resourceId);
  }
}
