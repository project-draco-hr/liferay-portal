{
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_S_G_U_P);
    if ((parentCategoryIds == null) || (parentCategoryIds.length == 0)) {
      sql=StringUtil.replace(sql,"(MBCategory.parentCategoryId = ?) AND",StringPool.BLANK);
    }
 else {
      sql=StringUtil.replace(sql,"MBCategory.parentCategoryId = ?","MBCategory.parentCategoryId = " + StringUtil.merge(parentCategoryIds," OR MBCategory.parentCategoryId = "));
    }
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,MBCategory.class.getName(),"MBCategory.categoryId","MBCategory.userId",groupId);
    }
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("MBCategory",MBCategoryImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(PortalUtil.getClassNameId(MBCategory.class.getName()));
    qPos.add(groupId);
    qPos.add(userId);
    List<MBCategory> list=(List<MBCategory>)QueryUtil.list(q,getDialect(),QueryUtil.ALL_POS,QueryUtil.ALL_POS,false);
    try {
      Group group=GroupLocalServiceUtil.getGroup(groupId);
      SubscriptionLocalServiceUtil.getSubscription(group.getCompanyId(),userId,MBCategory.class.getName(),groupId);
      int threadCount=MBThreadLocalServiceUtil.getCategoryThreadsCount(groupId,MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID,WorkflowConstants.STATUS_APPROVED);
      int messageCount=MBMessageLocalServiceUtil.getCategoryMessagesCount(groupId,MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID,WorkflowConstants.STATUS_APPROVED);
      MBCategory category=new MBCategoryImpl();
      category.setCompanyId(group.getCompanyId());
      category.setName(group.getName());
      category.setDescription(group.getDescription());
      category.setThreadCount(threadCount);
      category.setMessageCount(messageCount);
      list.add(category);
    }
 catch (    NoSuchSubscriptionException nsse) {
    }
    return new UnmodifiableList<MBCategory>(ListUtil.subList(list,start,end));
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
