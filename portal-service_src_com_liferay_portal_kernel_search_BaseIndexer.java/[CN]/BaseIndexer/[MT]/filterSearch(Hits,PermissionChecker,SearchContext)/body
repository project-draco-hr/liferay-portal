{
  List<Document> docs=new ArrayList<Document>();
  int excludeDocsSize=0;
  boolean hasMore=false;
  List<Float> scores=new ArrayList<Float>();
  String paginationType=GetterUtil.getString(searchContext.getAttribute("paginationType"),"more");
  int status=GetterUtil.getInteger(searchContext.getAttribute(Field.STATUS),WorkflowConstants.STATUS_APPROVED);
  Document[] documents=hits.getDocs();
  for (int i=0; i < documents.length; i++) {
    try {
      Document document=documents[i];
      String entryClassName=document.get(Field.ENTRY_CLASS_NAME);
      long entryClassPK=GetterUtil.getLong(document.get(Field.ENTRY_CLASS_PK));
      Indexer indexer=IndexerRegistryUtil.getIndexer(entryClassName);
      if ((indexer.isFilterSearch() && indexer.hasPermission(permissionChecker,entryClassName,entryClassPK,ActionKeys.VIEW) && indexer.isVisibleRelatedEntry(entryClassPK,status)) || !indexer.isFilterSearch() || !indexer.isPermissionAware()) {
        docs.add(document);
        scores.add(hits.score(i));
      }
 else {
        excludeDocsSize++;
      }
    }
 catch (    Exception e) {
      excludeDocsSize++;
    }
    if (paginationType.equals("more") && (searchContext.getEnd() > 0) && (searchContext.getEnd() < documents.length)&& (docs.size() >= searchContext.getEnd())) {
      hasMore=true;
      break;
    }
  }
  int length=docs.size();
  if (hasMore) {
    length=documents.length - excludeDocsSize;
  }
  hits.setLength(length);
  if ((searchContext.getStart() != QueryUtil.ALL_POS) && (searchContext.getEnd() != QueryUtil.ALL_POS)) {
    int end=searchContext.getEnd();
    if (end > length) {
      end=length;
    }
    docs=docs.subList(searchContext.getStart(),end);
  }
  hits.setDocs(docs.toArray(new Document[docs.size()]));
  hits.setScores(scores.toArray(new Float[scores.size()]));
  hits.setSearchTime((float)(System.currentTimeMillis() - hits.getStart()) / Time.SECOND);
  return hits;
}
