{
  if (!_executeInSeparateThread) {
    return doEval(allowedClasses,inputObjects,outputNames,scriptFile,script);
  }
  EvalCallable evalCallable=new EvalCallable(allowedClasses,inputObjects,outputNames,scriptFile,script);
  FutureTask<Map<String,Object>> futureTask=new FutureTask<>(evalCallable);
  Thread oneTimeExecutorThread=_threadFactory.newThread(futureTask);
  oneTimeExecutorThread.start();
  try {
    oneTimeExecutorThread.join();
    return futureTask.get();
  }
 catch (  Exception e) {
    futureTask.cancel(true);
    oneTimeExecutorThread.interrupt();
    throw new ScriptingException(e);
  }
}
