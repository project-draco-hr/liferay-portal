{
  PortalClassLoaderUtil.setClassLoader(getClass().getClassLoader());
  RPCDatagramReceiveHandler rpcDatagramReceiveHandler=new RPCDatagramReceiveHandler();
  MockIntraband mockIntraband=new MockIntraband();
  Serializer serializer=new Serializer();
  serializer.writeObject(new TestProcessCallable());
  SystemDataType systemDataType=SystemDataType.RPC;
  rpcDatagramReceiveHandler.doReceive(new MockRegistrationReference(mockIntraband),Datagram.createRequestDatagram(systemDataType.getValue(),serializer.toByteBuffer()));
  Datagram responseDatagram=mockIntraband.getDatagram();
  Deserializer deserializer=new Deserializer(responseDatagram.getDataByteBuffer());
  RPCResponse rpcResponse=deserializer.readObject();
  Assert.assertEquals(TestProcessCallable.class.getName(),rpcResponse.getResult());
  Assert.assertNull(rpcResponse.getException());
  serializer=new Serializer();
  serializer.writeObject(new ErrorTestProcessCallable());
  rpcDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband),Datagram.createRequestDatagram(systemDataType.getValue(),serializer.toByteBuffer()));
  responseDatagram=mockIntraband.getDatagram();
  deserializer=new Deserializer(responseDatagram.getDataByteBuffer());
  rpcResponse=deserializer.readObject();
  Assert.assertNull(rpcResponse.getResult());
  Exception exception=rpcResponse.getException();
  Assert.assertSame(ProcessException.class,exception.getClass());
  Assert.assertEquals("Execution error",exception.getMessage());
}
