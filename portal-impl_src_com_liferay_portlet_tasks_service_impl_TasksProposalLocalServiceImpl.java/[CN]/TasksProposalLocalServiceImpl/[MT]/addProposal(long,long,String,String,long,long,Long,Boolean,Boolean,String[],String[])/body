{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  long id=counterLocalService.increment();
  TasksProposal proposal=tasksProposalPersistence.create(id);
  proposal.setGroupId(groupId);
  proposal.setCompanyId(user.getCompanyId());
  proposal.setUserId(user.getUserId());
  proposal.setUserName(user.getFullName());
  proposal.setCreateDate(now);
  proposal.setModifiedDate(now);
  proposal.setClassNameId(classNameId);
  proposal.setClassPK(classPK);
  proposal.setName(name);
  proposal.setDescription(description);
  proposal=tasksProposalPersistence.update(proposal);
  if ((addCommunityPermissions != null) && (addGuestPermissions != null)) {
    addProposalResources(proposal,addCommunityPermissions.booleanValue(),addGuestPermissions.booleanValue());
  }
 else {
    addProposalResources(proposal,communityPermissions,guestPermissions);
  }
  if (stageOneReviewerId != null && stageOneReviewerId.longValue() > 0) {
    tasksReviewLocalService.addReview(stageOneReviewerId.longValue(),groupId,user.getUserId(),user.getFullName(),proposal.getProposalId(),1,true,true);
  }
  activityTrackerLocalService.addActivityTracker(user.getUserId(),groupId,TasksProposal.class.getName(),proposal.getProposalId(),TasksActivityKeys.PROPOSE,StringPool.BLANK,0);
  return proposal;
}
