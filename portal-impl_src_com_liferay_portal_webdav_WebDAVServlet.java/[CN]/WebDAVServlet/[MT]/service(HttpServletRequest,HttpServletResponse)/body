{
  int status=HttpServletResponse.SC_PRECONDITION_FAILED;
  String userAgent=request.getHeader(HttpHeaders.USER_AGENT);
  if (_log.isDebugEnabled()) {
    _log.debug("User agent " + userAgent);
  }
  try {
    if (isIgnoredResource(request)) {
      status=HttpServletResponse.SC_NOT_FOUND;
      return;
    }
    WebDAVStorage storage=getStorage(request);
    if (storage == null) {
      if (_log.isDebugEnabled()) {
        _log.debug("Invalid WebDAV path " + request.getPathInfo());
      }
      return;
    }
    if (storage.getRootPath() == null) {
      storage.setRootPath(getRootPath(request));
    }
    PermissionChecker permissionChecker=null;
    String remoteUser=request.getRemoteUser();
    if (remoteUser != null) {
      PrincipalThreadLocal.setName(remoteUser);
      long userId=GetterUtil.getLong(remoteUser);
      User user=UserLocalServiceUtil.getUserById(userId);
      permissionChecker=PermissionCheckerFactoryUtil.create(user);
      PermissionThreadLocal.setPermissionChecker(permissionChecker);
    }
    MethodFactory methodFactory=storage.getMethodFactory();
    Method method=methodFactory.create(request);
    try {
      WebDAVRequest webDAVRequest=new WebDAVRequestImpl(storage,request,response,userAgent,permissionChecker);
      status=method.process(webDAVRequest);
    }
 catch (    WebDAVException wdave) {
      boolean logError=false;
      Throwable cause=wdave;
      while (cause != null) {
        if (cause instanceof PrincipalException) {
          logError=true;
        }
        cause=cause.getCause();
      }
      if (logError) {
        _log.error(wdave,wdave);
      }
 else       if (_log.isWarnEnabled()) {
        _log.warn(wdave,wdave);
      }
      status=HttpServletResponse.SC_PRECONDITION_FAILED;
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
 finally {
    response.setStatus(status);
    if (_log.isInfoEnabled()) {
      String xLitmus=GetterUtil.getString(request.getHeader("X-Litmus"));
      if (Validator.isNotNull(xLitmus)) {
        xLitmus+=" ";
      }
      _log.info(xLitmus + request.getMethod() + " "+ request.getRequestURI()+ " "+ status);
    }
  }
}
