{
  String uuid="uuid";
  final SynchronousQueue<SPI> synchronousQueue=SPISynchronousQueueUtil.createSynchronousQueue(uuid);
  FutureTask<SPI> takeSPIFutureTask=new FutureTask<>(new Callable<SPI>(){
    @Override public SPI call() throws InterruptedException {
      return synchronousQueue.take();
    }
  }
);
  Thread takeSPIThread=new Thread(takeSPIFutureTask);
  takeSPIThread.start();
  RegisterCallback registerCallback=new RegisterCallback(uuid,_mockRemoteSPI);
  Assert.assertSame(_mockRemoteSPI,registerCallback.call());
  Assert.assertSame(_mockRemoteSPI,takeSPIFutureTask.get());
  SPISynchronousQueueUtil.createSynchronousQueue(uuid);
  registerCallback=new RegisterCallback(uuid,_mockRemoteSPI);
  Thread currentThread=Thread.currentThread();
  currentThread.interrupt();
  try {
    registerCallback.call();
    Assert.fail();
  }
 catch (  ProcessException pe) {
    Throwable throwable=pe.getCause();
    Assert.assertSame(InterruptedException.class,throwable.getClass());
  }
}
