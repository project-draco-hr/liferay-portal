{
  try (ZipFile zipFile=new ZipFile(lpkgFile)){
    ZipEntry zipEntry=zipFile.getEntry("liferay-marketplace.properties");
    if (zipEntry == null) {
      throw new LPKGVerifyException(lpkgFile + " does not have liferay-marketplace.properties");
    }
    Properties properties=new Properties();
    properties.load(zipFile.getInputStream(zipEntry));
    String symbolicName=properties.getProperty("title");
    if (Validator.isNull(symbolicName)) {
      throw new LPKGVerifyException(lpkgFile + " does not have a valid symbolic name");
    }
    Version version=null;
    String versionString=properties.getProperty("version");
    try {
      version=new Version(versionString);
    }
 catch (    IllegalArgumentException iae) {
      throw new LPKGVerifyException(lpkgFile + " does not have a valid version: " + versionString,iae);
    }
    List<Bundle> oldBundles=new ArrayList<>();
    for (    Bundle bundle : _bundleContext.getBundles()) {
      if (!symbolicName.equals(bundle.getSymbolicName())) {
        continue;
      }
      int value=version.compareTo(bundle.getVersion());
      if (value > 0) {
        oldBundles.add(bundle);
      }
 else       if (value == 0) {
        String path=lpkgFile.getCanonicalPath();
        if (path.equals(bundle.getLocation())) {
          continue;
        }
        throw new LPKGVerifyException("Existing LPKG bundle " + bundle + " has the same "+ "symbolic name and version as LPKG file "+ lpkgFile);
      }
 else {
        throw new LPKGVerifyException("Existing LPKG bundle " + bundle + " is a newer version of LPKG file "+ lpkgFile);
      }
    }
    return oldBundles;
  }
 catch (  IOException ioe) {
    throw new LPKGVerifyException(ioe);
  }
}
