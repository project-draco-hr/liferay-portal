{
  _flickrItemSelectorCriterion=new FlickrItemSelectorCriterion();
  Set<ItemSelectorReturnType> desiredItemSelectorReturnTypes=new HashSet<>();
  desiredItemSelectorReturnTypes.add(_testURLItemSelectorReturnType);
  _flickrItemSelectorCriterion.setDesiredItemSelectorReturnTypes(desiredItemSelectorReturnTypes);
  _itemSelectorImpl=new ItemSelectorImpl();
  _itemSelectorCriterionSerializer.addItemSelectorReturnType(_testFileEntryItemSelectorReturnType);
  _itemSelectorCriterionSerializer.addItemSelectorReturnType(_testStringItemSelectorReturnType);
  _itemSelectorCriterionSerializer.addItemSelectorReturnType(_testURLItemSelectorReturnType);
  _itemSelectorImpl.setItemSelectorCriterionSerializer(_itemSelectorCriterionSerializer);
  _mediaItemSelectorCriterion=new MediaItemSelectorCriterion();
  _mediaItemSelectorCriterion.setFileExtension("jpg");
  _mediaItemSelectorCriterion.setMaxSize(2048);
  desiredItemSelectorReturnTypes=new HashSet<>();
  desiredItemSelectorReturnTypes.add(new TestFileEntryItemSelectorReturnType());
  desiredItemSelectorReturnTypes.add(_testURLItemSelectorReturnType);
  _mediaItemSelectorCriterion.setDesiredItemSelectorReturnTypes(desiredItemSelectorReturnTypes);
  JSONFactoryUtil jsonFactoryUtil=new JSONFactoryUtil();
  jsonFactoryUtil.setJSONFactory(new JSONFactoryImpl());
  PortletURLFactory portletURLFactory=mock(PortletURLFactory.class);
  LiferayPortletURL mockLiferayPortletURL=mock(LiferayPortletURL.class);
  when(portletURLFactory.create(Mockito.any(PortletRequest.class),Mockito.anyString(),Mockito.anyLong(),Mockito.anyString())).thenReturn(mockLiferayPortletURL);
  PortletURLFactoryUtil portletURLFactoryUtil=new PortletURLFactoryUtil();
  portletURLFactoryUtil.setPortletURLFactory(portletURLFactory);
}
