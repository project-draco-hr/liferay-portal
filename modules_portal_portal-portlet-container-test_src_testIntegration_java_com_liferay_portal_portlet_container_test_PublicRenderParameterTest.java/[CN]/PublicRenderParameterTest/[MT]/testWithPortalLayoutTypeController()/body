{
  final String prpName="categoryId";
  final String prpValue=RandomTestUtil.randomString(FriendlyURLRandomizerBumper.INSTANCE,NumericStringRandomizerBumper.INSTANCE,UniqueStringRandomizerBumper.INSTANCE);
  final AtomicBoolean success=new AtomicBoolean(false);
  Dictionary<String,Object> properties=new HashMapDictionary<>();
  properties.put("javax.portlet.supported-public-render-parameter",prpName);
  testPortlet=new TestPortlet(){
    @Override public void render(    RenderRequest renderRequest,    RenderResponse renderResponse) throws IOException, PortletException {
      PrintWriter writer=renderResponse.getWriter();
      String value=renderRequest.getParameter(prpName);
      if (prpValue.equals(value)) {
        success.set(true);
      }
      writer.write(value);
    }
  }
;
  setUpPortlet(testPortlet,properties,TEST_PORTLET_ID);
  HttpServletRequest httpServletRequest=PortletContainerTestUtil.getHttpServletRequest(group,layout);
  PortletURL portletURL=new PortletURLImpl(httpServletRequest,TEST_PORTLET_ID,layout.getPlid(),PortletRequest.RENDER_PHASE);
  portletURL.setParameter(prpName,prpValue);
  String portletURLString=portletURL.toString();
  Assert.assertTrue(portletURLString.contains(PortletQName.PUBLIC_RENDER_PARAMETER_NAMESPACE));
  Response response=PortletContainerTestUtil.request(portletURLString);
  Assert.assertEquals(200,response.getCode());
  Assert.assertTrue(success.get());
}
