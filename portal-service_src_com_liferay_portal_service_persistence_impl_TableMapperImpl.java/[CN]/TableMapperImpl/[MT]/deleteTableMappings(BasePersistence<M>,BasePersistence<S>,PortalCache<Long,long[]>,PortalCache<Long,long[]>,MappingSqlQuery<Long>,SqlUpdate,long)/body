{
  ModelListener<M>[] masterModelListeners=masterBasePersistence.getListeners();
  ModelListener<S>[] slaveModelListeners=slaveBasePersistence.getListeners();
  long[] slavePrimaryKeys=getPrimaryKeys(masterToSlavePortalCache,mappingSqlQuery,masterPrimaryKey,false);
  Class<M> masterModelClass=null;
  Class<S> slaveModelClass=null;
  if ((masterModelListeners.length > 0) || (slaveModelListeners.length > 0)) {
    masterModelClass=masterBasePersistence.getModelClass();
    slaveModelClass=slaveBasePersistence.getModelClass();
    for (    long slavePrimaryKey : slavePrimaryKeys) {
      for (      ModelListener<M> masterModelListener : masterModelListeners) {
        masterModelListener.onBeforeRemoveAssociation(masterPrimaryKey,slaveModelClass.getName(),slavePrimaryKey);
      }
      for (      ModelListener<S> slaveModelListener : slaveModelListeners) {
        slaveModelListener.onBeforeRemoveAssociation(slavePrimaryKey,masterModelClass.getName(),masterPrimaryKey);
      }
    }
  }
  masterToSlavePortalCache.remove(masterPrimaryKey);
  for (  long slavePrimaryKey : slavePrimaryKeys) {
    slaveToMasterPortalCache.remove(slavePrimaryKey);
  }
  int rowCount=0;
  try {
    rowCount=deleteSqlUpdate.update(masterPrimaryKey);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
  if ((masterModelListeners.length > 0) || (slaveModelListeners.length > 0)) {
    for (    long slavePrimaryKey : slavePrimaryKeys) {
      for (      ModelListener<M> masterModelListener : masterModelListeners) {
        masterModelListener.onAfterRemoveAssociation(masterPrimaryKey,slaveModelClass.getName(),slavePrimaryKey);
      }
      for (      ModelListener<S> slaveModelListener : slaveModelListeners) {
        slaveModelListener.onAfterRemoveAssociation(slavePrimaryKey,masterModelClass.getName(),masterPrimaryKey);
      }
    }
  }
  return rowCount;
}
