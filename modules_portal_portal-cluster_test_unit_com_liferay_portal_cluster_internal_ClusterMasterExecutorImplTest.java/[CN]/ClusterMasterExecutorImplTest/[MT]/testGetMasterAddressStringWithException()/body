{
  ClusterMasterExecutorImpl clusterMasterExecutorImpl=createMasterExecutorImpl(true);
  MockClusterExecutor mockClusterExecutor=new MockClusterExecutor(true);
  clusterMasterExecutorImpl.setClusterExecutor(mockClusterExecutor);
  clusterMasterExecutorImpl.initialize();
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.INFO)){
    String otherClusterNodeId="otherClusterNodeId";
    _mockLockLocalService.setLock(otherClusterNodeId);
    Assert.assertEquals(mockClusterExecutor.getLocalClusterNodeId(),clusterMasterExecutorImpl.getMasterClusterNodeId());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Lock currently held by " + otherClusterNodeId,logRecord.getMessage());
    logRecord=logRecords.get(1);
    Assert.assertEquals("Reattempting to acquire the cluster master lock",logRecord.getMessage());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.INFO)){
    _mockLockLocalService.setLock(null);
    Assert.assertEquals(mockClusterExecutor.getLocalClusterNodeId(),clusterMasterExecutorImpl.getMasterClusterNodeId());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(2,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Unable to acquire the cluster master lock",logRecord.getMessage());
    logRecord=logRecords.get(1);
    Assert.assertEquals("Reattempting to acquire the cluster master lock",logRecord.getMessage());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.OFF)){
    _mockLockLocalService.setLock(null);
    Assert.assertEquals(mockClusterExecutor.getLocalClusterNodeId(),clusterMasterExecutorImpl.getMasterClusterNodeId());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
  }
 }
