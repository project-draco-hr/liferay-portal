{
  ClusterMasterExecutorImpl clusterMasterExecutorImpl=createMasterExecutorImpl(true);
  MockClusterExecutor mockClusterExecutor=new MockClusterExecutor(true);
  clusterMasterExecutorImpl.setClusterExecutor(mockClusterExecutor);
  clusterMasterExecutorImpl.initialize();
  List<ClusterEventListener> clusterEventListeners=mockClusterExecutor.getClusterEventListeners();
  Assert.assertEquals(1,clusterEventListeners.size());
  Assert.assertNotNull(_mockLockLocalService.getLock());
  clusterMasterExecutorImpl.deactivate();
  Assert.assertTrue(clusterEventListeners.isEmpty());
  Assert.assertNull(_mockLockLocalService.getLock());
  clusterMasterExecutorImpl=createMasterExecutorImpl(false);
  clusterMasterExecutorImpl.setClusterExecutor(new MockClusterExecutor(false));
  clusterMasterExecutorImpl.initialize();
  clusterMasterExecutorImpl.deactivate();
  clusterMasterExecutorImpl=createMasterExecutorImpl(true);
  clusterMasterExecutorImpl.setClusterExecutor(new MockClusterExecutor(true));
  clusterMasterExecutorImpl.initialize();
  clusterMasterExecutorImpl.setClusterExecutor(new MockClusterExecutor(true));
  clusterMasterExecutorImpl.initialize();
  _mockLockLocalService.setUnlockError(true);
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.WARNING)){
    clusterMasterExecutorImpl.deactivate();
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Unable to destroy the cluster master executor",logRecord.getMessage());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.OFF)){
    clusterMasterExecutorImpl.deactivate();
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
  }
 }
