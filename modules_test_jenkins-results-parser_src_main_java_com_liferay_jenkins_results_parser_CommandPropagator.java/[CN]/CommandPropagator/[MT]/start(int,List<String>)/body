{
  _targetSlaves.clear();
  _targetSlaves.addAll(targetSlaves);
  ExecutorService executorService=Executors.newFixedThreadPool(threadCount);
  System.out.println("Command propagation starting with " + threadCount + " threads.");
  try {
    long start=System.currentTimeMillis();
    for (    String targetSlave : _targetSlaves) {
      executorService.execute(new CommandPropagatorThread(this,targetSlave));
    }
    while ((_finishedSlaves.size() + _errorSlaves.size()) < _targetSlaves.size()) {
      StringBuffer sb=new StringBuffer();
      sb.append("Average thread duration: ");
      sb.append(getAverageThreadDuration());
      sb.append("ms\nBusy slaves:");
      sb.append(_busySlaves.size());
      sb.append("\nFinished slaves:");
      sb.append(_finishedSlaves.size());
      sb.append("\nTarget slaves:");
      sb.append(_targetSlaves.size());
      sb.append("\nTotal duration: ");
      sb.append(System.currentTimeMillis() - start);
      sb.append("\n");
      System.out.println(sb.toString());
      JenkinsResultsParserUtil.sleep(5000);
    }
    System.out.println("Command propagation completed in " + (System.currentTimeMillis() - start) + "ms.");
    if (!_errorSlaves.isEmpty()) {
      System.out.println(_errorSlaves.size() + " slaves failed to respond:\n" + _errorSlaves);
    }
  }
  finally {
    executorService.shutdown();
  }
}
