{
  final TrackedOne trackedOne=new TrackedOne();
  final Collection<Throwable> throwables=new ArrayList<>();
  ServiceTrackerMapListener<String,TrackedOne,List<TrackedOne>> serviceTrackerMapListener=new ServiceTrackerMapListener<String,TrackedOne,List<TrackedOne>>(){
    @Override public void keyEmitted(    ServiceTrackerMap<String,List<TrackedOne>> serviceTrackerMap,    String key,    TrackedOne serviceTrackedOne,    List<TrackedOne> contentTrackedOnes){
      try {
        Assert.assertEquals("aTarget",key);
        Assert.assertEquals(trackedOne,serviceTrackedOne);
        Assert.assertEquals(contentTrackedOnes,Arrays.asList(trackedOne));
      }
 catch (      Throwable t) {
        throwables.add(t);
      }
    }
    @Override public void keyRemoved(    ServiceTrackerMap<String,List<TrackedOne>> serviceTrackerMap,    String key,    TrackedOne serviceTrackedOne,    List<TrackedOne> contentTrackedOnes){
    }
  }
;
  ServiceTrackerMap<String,List<TrackedOne>> serviceTrackerMap=createServiceTrackerMap(serviceTrackerMapListener);
  ServiceRegistration<TrackedOne> serviceRegistration=null;
  try {
    serviceRegistration=registerService(trackedOne,"aTarget");
    for (    Throwable throwable : throwables) {
      throw throwable;
    }
  }
  finally {
    if (serviceRegistration != null) {
      serviceRegistration.unregister();
    }
    serviceTrackerMap.close();
  }
}
