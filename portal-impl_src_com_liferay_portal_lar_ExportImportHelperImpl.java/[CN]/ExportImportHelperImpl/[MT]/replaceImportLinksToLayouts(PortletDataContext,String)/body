{
  List<String> oldLinksToLayout=new ArrayList<>();
  List<String> newLinksToLayout=new ArrayList<>();
  Matcher matcher=_importLinksToLayoutPattern.matcher(content);
  while (matcher.find()) {
    Map<Long,Long> layoutPlids=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(Layout.class);
    long oldPlid=GetterUtil.getLong(matcher.group(4));
    Long newPlid=MapUtil.getLong(layoutPlids,oldPlid);
    Layout layout=LayoutLocalServiceUtil.fetchLayout(newPlid);
    long oldGroupId=GetterUtil.getLong(matcher.group(6));
    long newGroupId=oldGroupId;
    long oldLayoutId=GetterUtil.getLong(matcher.group(1));
    long newLayoutId=oldLayoutId;
    if (layout != null) {
      newGroupId=layout.getGroupId();
      newLayoutId=layout.getLayoutId();
    }
 else     if (_log.isWarnEnabled()) {
      _log.warn("Unable to get layout with plid " + oldPlid);
    }
    String oldLinkToLayout=matcher.group(0);
    String plidSub=StringPool.AT + oldPlid;
    String newLinkToLayout=StringUtil.replaceFirst(oldLinkToLayout,new String[]{plidSub,String.valueOf(oldLayoutId)},new String[]{StringPool.BLANK,String.valueOf(newLayoutId)});
    if ((oldGroupId != 0) && (oldGroupId != newGroupId)) {
      newLinkToLayout=StringUtil.replaceLast(newLinkToLayout,String.valueOf(oldGroupId),String.valueOf(newGroupId));
    }
    oldLinksToLayout.add(oldLinkToLayout);
    newLinksToLayout.add(newLinkToLayout);
  }
  content=StringUtil.replace(content,ArrayUtil.toStringArray(oldLinksToLayout.toArray()),ArrayUtil.toStringArray(newLinksToLayout.toArray()));
  return content;
}
