{
  ActionableDynamicQuery actionableDynamicQuery=new SystemEventActionableDynamicQuery(){
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
      Property groupIdProperty=PropertyFactoryUtil.forName("groupId");
      disjunction.add(groupIdProperty.eq(0));
      disjunction.add(groupIdProperty.eq(portletDataContext.getScopeGroupId()));
      dynamicQuery.add(disjunction);
      Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
      dynamicQuery.add(classNameIdProperty.eq(stagedModelType.getClassNameId()));
      Property referrerClassNameIdProperty=PropertyFactoryUtil.forName("referrerClassNameId");
      dynamicQuery.add(referrerClassNameIdProperty.eq(stagedModelType.getReferrerClassNameId()));
      Property typeProperty=PropertyFactoryUtil.forName("type");
      dynamicQuery.add(typeProperty.eq(SystemEventConstants.TYPE_DELETE));
      _addCreateDateProperty(dynamicQuery);
    }
    @Override protected void performAction(    Object object){
    }
    private void _addCreateDateProperty(    DynamicQuery dynamicQuery){
      if (!portletDataContext.hasDateRange()) {
        return;
      }
      Property createDateProperty=PropertyFactoryUtil.forName("createDate");
      Date startDate=portletDataContext.getStartDate();
      dynamicQuery.add(createDateProperty.ge(startDate));
      Date endDate=portletDataContext.getEndDate();
      dynamicQuery.add(createDateProperty.le(endDate));
    }
  }
;
  actionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());
  return actionableDynamicQuery.performCount();
}
