{
  List<Element> referenceDataElements=portletDataContext.getReferenceDataElements(entityElement,FileEntry.class,PortletDataContext.REFERENCE_TYPE_DEPENDENCY);
  for (  Element referenceDataElement : referenceDataElements) {
    String fileEntryUUID=referenceDataElement.attributeValue("uuid");
    if (fileEntryUUID == null) {
      continue;
    }
    String path=referenceDataElement.attributeValue("path");
    if (!content.contains("[$dl-reference=" + path + "$]")) {
      continue;
    }
    StagedModelDataHandlerUtil.importStagedModel(portletDataContext,referenceDataElement);
    FileEntry fileEntry=null;
    try {
      long groupId=portletDataContext.getScopeGroupId();
      long fileEntryGroupId=GetterUtil.getLong(referenceDataElement.attributeValue("group-id"));
      if (fileEntryGroupId == portletDataContext.getSourceCompanyGroupId()) {
        groupId=portletDataContext.getSourceCompanyGroupId();
      }
      fileEntry=DLAppLocalServiceUtil.getFileEntryByUuidAndGroupId(fileEntryUUID,groupId);
    }
 catch (    NoSuchFileEntryException nsfee) {
      try {
        FileEntry originalFileEntry=(FileEntry)portletDataContext.getZipEntryAsObject(referenceDataElement,path);
        Map<Long,Long> fileEntryIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DLFileEntry.class);
        long originalFileEntryId=fileEntryIds.get(originalFileEntry.getFileEntryId());
        fileEntry=DLAppLocalServiceUtil.getFileEntry(originalFileEntryId);
      }
 catch (      NoSuchFileEntryException nsfee2) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to reference " + path);
        }
        continue;
      }
    }
    String url=DLUtil.getPreviewURL(fileEntry,fileEntry.getFileVersion(),null,StringPool.BLANK,false,false);
    content=StringUtil.replace(content,"[$dl-reference=" + path + "$]",url);
  }
  return content;
}
