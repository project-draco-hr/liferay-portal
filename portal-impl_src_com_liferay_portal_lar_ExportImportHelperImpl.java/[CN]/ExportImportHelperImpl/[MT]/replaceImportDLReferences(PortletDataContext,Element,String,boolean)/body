{
  List<Element> referenceDataElements=portletDataContext.getReferenceDataElements(entityElement,FileEntry.class,PortletDataContext.REFERENCE_TYPE_DEPENDENCY);
  for (  Element referenceDataElement : referenceDataElements) {
    String fileEntryUUID=referenceDataElement.attributeValue("uuid");
    if (fileEntryUUID == null) {
      continue;
    }
    String path=referenceDataElement.attributeValue("path");
    if (!content.contains("[$dl-reference=" + path + "$]")) {
      continue;
    }
    FileEntry fileEntry=(FileEntry)portletDataContext.getZipEntryAsObject(path);
    StagedModelDataHandlerUtil.importStagedModel(portletDataContext,fileEntry);
    Map<Long,Long> fileEntryIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(DLFileEntry.class);
    long importedFileEntryId=MapUtil.getLong(fileEntryIds,fileEntry.getFileEntryId(),fileEntry.getFileEntryId());
    FileEntry importedFileEntry=null;
    try {
      importedFileEntry=DLAppLocalServiceUtil.getFileEntry(importedFileEntryId);
    }
 catch (    NoSuchFileEntryException nsfee) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to reference " + path);
      }
      continue;
    }
    String url=DLUtil.getPreviewURL(importedFileEntry,importedFileEntry.getFileVersion(),null,StringPool.BLANK,false,false);
    content=StringUtil.replace(content,"[$dl-reference=" + path + "$]",url);
  }
  return content;
}
