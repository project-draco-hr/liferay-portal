{
  MethodCache.reset();
  ServletContext servletContext=servletContextEvent.getServletContext();
  Object previousApplicationContext=servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
  servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
  ClassLoader classLoader=PortletClassLoaderUtil.getClassLoader();
  PACLPolicy previousPACLPolicy=PortalSecurityManagerThreadLocal.getPACLPolicy();
  try {
    PACLPolicy paclPolicy=PACLPolicyManager.getPACLPolicy(classLoader);
    PortalSecurityManagerThreadLocal.setPACLPolicy(paclPolicy);
    super.contextInitialized(servletContextEvent);
  }
  finally {
    PortalSecurityManagerThreadLocal.setPACLPolicy(previousPACLPolicy);
  }
  PortletBeanFactoryCleaner.readBeans();
  ApplicationContext applicationContext=WebApplicationContextUtils.getWebApplicationContext(servletContext);
  BeanLocatorImpl beanLocatorImpl=new BeanLocatorImpl(classLoader,applicationContext);
  beanLocatorImpl.setPACLServletContextName(servletContext.getServletContextName());
  try {
    Class<?> beanLocatorUtilClass=Class.forName("com.liferay.util.bean.PortletBeanLocatorUtil",true,classLoader);
    Method setBeanLocatorMethod=beanLocatorUtilClass.getMethod("setBeanLocator",new Class[]{BeanLocator.class});
    setBeanLocatorMethod.invoke(beanLocatorUtilClass,new Object[]{beanLocatorImpl});
    PortletBeanLocatorUtil.setBeanLocator(servletContext.getServletContextName(),beanLocatorImpl);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (previousApplicationContext == null) {
    servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
  }
 else {
    servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,previousApplicationContext);
  }
}
