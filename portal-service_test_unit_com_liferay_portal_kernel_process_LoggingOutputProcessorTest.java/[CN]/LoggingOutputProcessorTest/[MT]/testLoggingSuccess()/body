{
  LoggingOutputProcessor loggingOutputProcessor=new LoggingOutputProcessor();
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(LoggingOutputProcessor.class.getName(),Level.OFF);
  String stdErrString="This is standard error message.";
  byte[] stdErrBytes=stdErrString.getBytes(StringPool.DEFAULT_CHARSET_NAME);
  Assert.assertNull(loggingOutputProcessor.processStdErr(new UnsyncByteArrayInputStream(stdErrBytes)));
  Assert.assertTrue(logRecords.isEmpty());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(LoggingOutputProcessor.class.getName(),Level.SEVERE);
  Assert.assertNull(invokeProcessStdErr(loggingOutputProcessor,new UnsyncByteArrayInputStream(stdErrBytes)));
  Assert.assertEquals(1,logRecords.size());
  LogRecord logRecord=logRecords.get(0);
  Assert.assertEquals(stdErrString,logRecord.getMessage());
  String stdOutString="This is standard out message.";
  byte[] stdOutBytes=stdOutString.getBytes(StringPool.DEFAULT_CHARSET_NAME);
  Assert.assertNull(loggingOutputProcessor.processStdOut(new UnsyncByteArrayInputStream(stdOutBytes)));
  logRecords=JDKLoggerTestUtil.configureJDKLogger(LoggingOutputProcessor.class.getName(),Level.SEVERE);
  Assert.assertTrue(logRecords.isEmpty());
  logRecords=JDKLoggerTestUtil.configureJDKLogger(LoggingOutputProcessor.class.getName(),Level.INFO);
  Assert.assertNull(invokeProcessStdOut(loggingOutputProcessor,new UnsyncByteArrayInputStream(stdOutBytes)));
  Assert.assertEquals(1,logRecords.size());
  logRecord=logRecords.get(0);
  Assert.assertEquals(stdOutString,logRecord.getMessage());
}
