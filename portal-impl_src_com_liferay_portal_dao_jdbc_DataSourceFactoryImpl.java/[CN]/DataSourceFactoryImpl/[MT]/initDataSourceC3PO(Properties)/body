{
  ComboPooledDataSource comboPooledDataSource=new ComboPooledDataSource();
  String identityToken=StringUtil.randomString();
  comboPooledDataSource.setIdentityToken(identityToken);
  Enumeration<String> enu=(Enumeration<String>)properties.propertyNames();
  while (enu.hasMoreElements()) {
    String key=enu.nextElement();
    String value=properties.getProperty(key);
    if (StringUtil.equalsIgnoreCase(key,"driverClassName")) {
      key="driverClass";
    }
 else     if (StringUtil.equalsIgnoreCase(key,"url")) {
      key="jdbcUrl";
    }
 else     if (StringUtil.equalsIgnoreCase(key,"username")) {
      key="user";
    }
    if (isPropertyLiferay(key)) {
      continue;
    }
    if (isPropertyDBCP(key)) {
      continue;
    }
    if (isPropertyHikariCP(key)) {
      continue;
    }
    if (isPropertyTomcat(key)) {
      continue;
    }
    try {
      BeanUtil.setProperty(comboPooledDataSource,key,value);
    }
 catch (    Exception e) {
      if (_log.isWarnEnabled()) {
        _log.warn("Property " + key + " is an invalid C3PO property");
      }
    }
  }
  C3P0ConnectionPoolMetrics connectionPoolMetrics=new C3P0ConnectionPoolMetrics(comboPooledDataSource);
  registerConnectionPoolMetrics(connectionPoolMetrics);
  return comboPooledDataSource;
}
