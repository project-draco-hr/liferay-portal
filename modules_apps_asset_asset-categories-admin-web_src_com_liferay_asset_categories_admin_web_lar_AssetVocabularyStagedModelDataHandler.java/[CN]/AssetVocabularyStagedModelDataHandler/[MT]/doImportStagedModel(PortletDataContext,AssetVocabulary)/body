{
  long userId=portletDataContext.getUserId(vocabulary.getUserUuid());
  ServiceContext serviceContext=createServiceContext(portletDataContext,vocabulary);
  AssetVocabulary importedVocabulary=null;
  AssetVocabulary existingVocabulary=fetchStagedModelByUuidAndGroupId(vocabulary.getUuid(),portletDataContext.getScopeGroupId());
  if (existingVocabulary == null) {
    String name=getVocabularyName(null,portletDataContext.getScopeGroupId(),vocabulary.getName(),2);
    serviceContext.setUuid(vocabulary.getUuid());
    importedVocabulary=AssetVocabularyLocalServiceUtil.addVocabulary(userId,portletDataContext.getScopeGroupId(),StringPool.BLANK,getVocabularyTitleMap(portletDataContext.getScopeGroupId(),vocabulary,name),vocabulary.getDescriptionMap(),vocabulary.getSettings(),serviceContext);
  }
 else {
    String name=getVocabularyName(vocabulary.getUuid(),portletDataContext.getScopeGroupId(),vocabulary.getName(),2);
    importedVocabulary=AssetVocabularyLocalServiceUtil.updateVocabulary(existingVocabulary.getVocabularyId(),StringPool.BLANK,getVocabularyTitleMap(portletDataContext.getScopeGroupId(),vocabulary,name),vocabulary.getDescriptionMap(),vocabulary.getSettings(),serviceContext);
  }
  Map<Long,Long> vocabularyIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(AssetVocabulary.class);
  vocabularyIds.put(vocabulary.getVocabularyId(),importedVocabulary.getVocabularyId());
  portletDataContext.importPermissions(AssetVocabulary.class,vocabulary.getVocabularyId(),importedVocabulary.getVocabularyId());
}
