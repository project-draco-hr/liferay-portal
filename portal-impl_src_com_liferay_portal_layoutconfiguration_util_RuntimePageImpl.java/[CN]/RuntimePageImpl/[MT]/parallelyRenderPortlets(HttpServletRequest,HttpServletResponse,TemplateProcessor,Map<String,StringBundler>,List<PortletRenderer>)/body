{
  ExecutorService executorService=PortalExecutorManagerUtil.getPortalExecutor(RuntimePageImpl.class.getName());
  Map<Future<StringBundler>,PortletRenderer> futures=new HashMap<>(portletRenderers.size());
  for (  PortletRenderer portletRenderer : portletRenderers) {
    if (_log.isDebugEnabled()) {
      Portlet portlet=portletRenderer.getPortlet();
      _log.debug("Submit portlet " + portlet.getPortletId() + " for parallel rendering");
    }
    Callable<StringBundler> renderCallable=portletRenderer.getCallable(request,response);
    Future<StringBundler> future=null;
    try {
      future=executorService.submit(renderCallable);
    }
 catch (    RejectedExecutionException ree) {
      future=new FutureTask<>(renderCallable);
      future.cancel(true);
    }
    futures.put(future,portletRenderer);
  }
  long waitTime=_waitTime;
  for (  Map.Entry<Future<StringBundler>,PortletRenderer> entry : futures.entrySet()) {
    Future<StringBundler> future=entry.getKey();
    PortletRenderer portletRenderer=entry.getValue();
    Portlet portlet=portletRenderer.getPortlet();
    if (future.isCancelled()) {
      if (_log.isDebugEnabled()) {
        _log.debug("Reject portlet " + portlet.getPortletId() + " for parallel rendering");
      }
    }
 else     if ((waitTime > 0) || future.isDone()) {
      try {
        long startTime=System.currentTimeMillis();
        StringBundler sb=future.get(waitTime,TimeUnit.MILLISECONDS);
        long duration=System.currentTimeMillis() - startTime;
        waitTime-=duration;
        contentsMap.put(portlet.getPortletId(),sb);
        portletRenderer.finishParallelRender();
        if (_log.isDebugEnabled()) {
          _log.debug("Parallely rendered portlet " + portlet.getPortletId() + " in "+ duration+ " ms");
        }
        continue;
      }
 catch (      ExecutionException ee) {
        throw ee;
      }
catch (      InterruptedException ie) {
        waitTime=-1;
      }
catch (      TimeoutException te) {
        waitTime=-1;
      }
catch (      CancellationException ce) {
        if (_log.isDebugEnabled()) {
          _log.debug("Asynchronized cancellation detected that should " + "only be caused by a concurrent shutdown of " + "the thread pool",ce);
        }
        return;
      }
      future.cancel(true);
    }
    StringBundler sb=null;
    if (processor.isPortletAjaxRender() && portlet.isAjaxable()) {
      if (_log.isDebugEnabled()) {
        _log.debug("Fall back to ajax rendering of portlet " + portlet.getPortletId());
      }
      sb=portletRenderer.renderAjax(request,response);
    }
 else {
      if (_log.isDebugEnabled()) {
        if (processor.isPortletAjaxRender()) {
          _log.debug("Fall back to an error message for portlet " + portlet.getPortletId() + " since it is not ajaxable");
        }
 else {
          _log.debug("Fall back to an error message for portlet " + portlet.getPortletId() + " since ajax rendering is disabled");
        }
      }
      sb=portletRenderer.renderError(request,response);
    }
    contentsMap.put(portlet.getPortletId(),sb);
    portletRenderer.finishParallelRender();
  }
}
