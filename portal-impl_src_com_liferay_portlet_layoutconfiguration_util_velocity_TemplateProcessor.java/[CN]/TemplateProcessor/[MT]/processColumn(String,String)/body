{
  boolean parallelRenderEnable=PropsValues.LAYOUT_PARALLEL_RENDER_ENABLE;
  if (parallelRenderEnable) {
    if (PropsValues.SESSION_DISABLED) {
      if (_log.isWarnEnabled()) {
        _log.warn("Parallel rendering should be disabled if sessions " + "are disabled");
      }
    }
    Boolean portletParallelRender=(Boolean)_request.getAttribute(com.liferay.portal.util.WebKeys.PORTLET_PARALLEL_RENDER);
    if (Boolean.FALSE.equals(portletParallelRender)) {
      parallelRenderEnable=false;
    }
  }
 else {
    _request.removeAttribute(com.liferay.portal.util.WebKeys.PORTLET_PARALLEL_RENDER);
  }
  ThemeDisplay themeDisplay=(ThemeDisplay)_request.getAttribute(com.liferay.portal.util.WebKeys.THEME_DISPLAY);
  LayoutTypePortlet layoutTypePortlet=themeDisplay.getLayoutTypePortlet();
  List<Portlet> portlets=layoutTypePortlet.getAllPortlets(columnId);
  StringBundler sb=new StringBundler(portlets.size() + 11);
  sb.append("<div class=\"");
  sb.append("portlet-dropzone");
  if (layoutTypePortlet.isCustomizable() && layoutTypePortlet.isColumnDisabled(columnId)) {
    sb.append(" portlet-dropzone-disabled");
  }
  if (layoutTypePortlet.isColumnCustomizable(columnId)) {
    sb.append(" customizable");
  }
  if (portlets.isEmpty()) {
    sb.append(" empty");
  }
  if (Validator.isNotNull(classNames)) {
    sb.append(" ");
    sb.append(classNames);
  }
  sb.append("\" id=\"layout-column_");
  sb.append(columnId);
  sb.append("\">");
  for (int i=0; i < portlets.size(); i++) {
    Portlet portlet=portlets.get(i);
    String queryString=null;
    Integer columnPos=new Integer(i);
    Integer columnCount=new Integer(portlets.size());
    String path=null;
    if (parallelRenderEnable) {
      path="/html/portal/load_render_portlet.jsp";
      if (portlet.getRenderWeight() >= 1) {
        _portletsMap.put(portlet,new Object[]{queryString,columnId,columnPos,columnCount});
      }
    }
    String content=RuntimePortletUtil.processPortlet(_servletContext,_request,_response,portlet,queryString,columnId,columnPos,columnCount,path,false);
    sb.append(content);
  }
  sb.append("</div>");
  return sb.toString();
}
