{
  long proposalId=ParamUtil.getLong(req,"proposalId");
  String description=ParamUtil.getString(req,"description");
  if (proposalId <= 0) {
    long groupId=ParamUtil.getLong(req,"groupId");
    long selPlid=ParamUtil.getLong(req,"selPlid");
    Layout layout=LayoutLocalServiceUtil.getLayout(selPlid);
    long reviewUserId=ParamUtil.getLong(req,"reviewUserId");
    boolean addCommunityPermissions=true;
    boolean addGuestPermissions=true;
    TasksProposalServiceUtil.addProposal(groupId,Layout.class.getName(),layout.getPlid(),layout.getName(LocaleUtil.getDefault()),description,reviewUserId,addCommunityPermissions,addGuestPermissions);
  }
 else {
    int dueDateMonth=ParamUtil.getInteger(req,"dueDateMonth");
    int dueDateDay=ParamUtil.getInteger(req,"dueDateDay");
    int dueDateYear=ParamUtil.getInteger(req,"dueDateYear");
    int dueDateHour=ParamUtil.getInteger(req,"dueDateHour");
    int dueDateMinute=ParamUtil.getInteger(req,"dueDateMinute");
    TasksProposalServiceUtil.updateProposal(proposalId,description,dueDateMonth,dueDateDay,dueDateYear,dueDateHour,dueDateMinute);
    long groupId=ParamUtil.getLong(req,"groupId");
    Group group=GroupLocalServiceUtil.getGroup(groupId);
    int workflowStages=group.getWorkflowStages();
    long[][] userIdsPerStage=new long[workflowStages][0];
    for (int i=2; i <= workflowStages; i++) {
      long[] userIds=StringUtil.split(ParamUtil.getString(req,"reviewUserIds_" + i),0L);
      userIdsPerStage[i - 2]=userIds;
    }
    TasksReviewServiceUtil.updateReviews(proposalId,userIdsPerStage);
  }
}
