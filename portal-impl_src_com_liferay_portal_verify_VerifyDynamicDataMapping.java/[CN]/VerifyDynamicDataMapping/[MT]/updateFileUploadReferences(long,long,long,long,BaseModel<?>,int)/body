{
  Map<String,String> fieldValues=new HashMap<String,String>();
  Fields fields=StorageEngineUtil.getFields(storageId);
  if (!checkUserId(userId)) {
    userId=UserLocalServiceUtil.getDefaultUserId(companyId);
    if (_log.isWarnEnabled()) {
      StringBundler sb=new StringBundler(9);
      sb.append("Using default user (userId=");
      sb.append(userId);
      sb.append(", companyId=");
      sb.append(companyId);
      sb.append(") for model ");
      sb.append(baseModel.getModelClassName());
      sb.append(" with primary key ");
      sb.append(baseModel.getPrimaryKeyObj());
      sb.append(StringPool.PERIOD);
      _log.warn(sb.toString());
    }
  }
  for (  Field field : fields) {
    String dataType=field.getDataType();
    if (!dataType.equals("file-upload") || Validator.isNull(field.getValue())) {
      continue;
    }
    long primaryKey=GetterUtil.getLong(baseModel.getPrimaryKeyObj());
    Folder folder=addFolder(userId,groupId,primaryKey,field.getName());
    String valueString=String.valueOf(field.getValue());
    JSONObject jsonObject=JSONFactoryUtil.createJSONObject(valueString);
    String filePath=getFileUploadPath(baseModel) + StringPool.SLASH + field.getName();
    FileEntry fileEntry=addFileEntry(companyId,userId,groupId,folder.getFolderId(),jsonObject.getString("name"),filePath,status);
    if (fileEntry != null) {
      fieldValues.put(field.getName(),getJSON(fileEntry));
    }
  }
  updateFieldValues(storageId,fieldValues);
}
