{
  super.setAttributes(request);
  Object bean=getBean();
  if (bean == null) {
    bean=pageContext.getAttribute("aui:model-context:bean");
  }
  Class<?> model=getModel();
  if (model == null) {
    model=(Class<?>)pageContext.getAttribute("aui:model-context:model");
  }
  String defaultLanguageId=getDefaultLanguageId();
  if (Validator.isNull(defaultLanguageId)) {
    defaultLanguageId=(String)pageContext.getAttribute("aui:model-context:defaultLanguageId");
  }
  if (Validator.isNull(defaultLanguageId)) {
    if ((model != null) && ModelHintsUtil.hasField(model.getName(),"groupId")) {
      ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
      defaultLanguageId=LocaleUtil.toLanguageId(themeDisplay.getSiteDefaultLocale());
    }
  }
  if (Validator.isNull(defaultLanguageId)) {
    Locale defaultLocale=LocaleUtil.getDefault();
    defaultLanguageId=LocaleUtil.toLanguageId(defaultLocale);
  }
  String name=getName();
  int pos=name.indexOf(StringPool.DOUBLE_DASH);
  if (pos != -1) {
    name=name.substring(pos + 2,name.length() - 2);
  }
  String field=getField();
  if (Validator.isNull(field)) {
    field=getName();
  }
  String formName=getFormName();
  if (formName == null) {
    FormTag formTag=(FormTag)findAncestorWithClass(this,FormTag.class);
    if (formTag != null) {
      formName=formTag.getName();
    }
  }
  String id=getId();
  String type=getType();
  if (Validator.isNull(id)) {
    String fieldParam=getFieldParam();
    if ((model != null) && Validator.isNull(type) && Validator.isNotNull(fieldParam)) {
      id=fieldParam;
    }
 else     if (!Validator.equals(type,"assetTags") && !Validator.equals(type,"radio")) {
      id=name;
    }
 else {
      id=PwdGenerator.getPassword(PwdGenerator.KEY3,4);
    }
  }
  String label=getLabel();
  if (label == null) {
    label=TextFormatter.format(name,TextFormatter.K);
  }
  _forLabel=id;
  _inputName=getName();
  String baseType=null;
  if ((model != null) && Validator.isNull(type)) {
    baseType=ModelHintsUtil.getType(model.getName(),field);
    String fieldParam=getFieldParam();
    if (Validator.isNotNull(fieldParam)) {
      _inputName=fieldParam;
    }
  }
 else   if (Validator.isNotNull(type)) {
    if (Validator.equals(type,"checkbox") || Validator.equals(type,"radio")) {
      baseType=type;
    }
  }
  if (Validator.isNull(baseType)) {
    baseType="text";
  }
  boolean wrappedField=false;
  FieldWrapperTag fieldWrapper=(FieldWrapperTag)findAncestorWithClass(this,FieldWrapperTag.class);
  if (fieldWrapper != null) {
    wrappedField=true;
  }
  setNamespacedAttribute(request,"baseType",baseType);
  setNamespacedAttribute(request,"bean",bean);
  setNamespacedAttribute(request,"defaultLanguageId",defaultLanguageId);
  setNamespacedAttribute(request,"field",field);
  setNamespacedAttribute(request,"forLabel",_forLabel);
  setNamespacedAttribute(request,"formName",formName);
  setNamespacedAttribute(request,"id",id);
  setNamespacedAttribute(request,"label",label);
  setNamespacedAttribute(request,"model",model);
  setNamespacedAttribute(request,"wrappedField",wrappedField);
  request.setAttribute(getAttributeNamespace() + "value",getValue());
  if ((_validators != null) && (_validators.get("required") != null)) {
    setNamespacedAttribute(request,"required",Boolean.TRUE.toString());
  }
}
