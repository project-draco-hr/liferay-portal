{
  Calendar recStartCal=new GregorianCalendar(timeZone);
  recStartCal.setTime(startDate.getTime());
  Recurrence recurrence=new Recurrence(recStartCal,new com.liferay.portal.kernel.cal.Duration(1,0,0,0));
  recurrence.setWeekStart(Calendar.SUNDAY);
  if (recur.getInterval() > 1) {
    recurrence.setInterval(recur.getInterval());
  }
  Calendar until=Calendar.getInstance(timeZone);
  if (recur.getUntil() != null) {
    until.setTime(recur.getUntil());
    recurrence.setUntil(until);
  }
  String frequency=recur.getFrequency();
  if (Recur.DAILY.equals(frequency)) {
    recurrence.setFrequency(Recurrence.DAILY);
    List dayPosList=new ArrayList();
    Iterator itr=recur.getDayList().iterator();
    while (itr.hasNext()) {
      WeekDay weekDay=(WeekDay)itr.next();
      dayPosList.add(new DayAndPosition(toCalendarWeekDay(weekDay),0));
    }
    if (!dayPosList.isEmpty()) {
      recurrence.setByDay((DayAndPosition[])dayPosList.toArray(new DayAndPosition[0]));
    }
  }
 else   if (Recur.WEEKLY.equals(frequency)) {
    recurrence.setFrequency(Recurrence.WEEKLY);
    List dayPosList=new ArrayList();
    Iterator itr=recur.getDayList().iterator();
    while (itr.hasNext()) {
      WeekDay weekDay=(WeekDay)itr.next();
      dayPosList.add(new DayAndPosition(toCalendarWeekDay(weekDay),0));
    }
    if (!dayPosList.isEmpty()) {
      recurrence.setByDay((DayAndPosition[])dayPosList.toArray(new DayAndPosition[0]));
    }
  }
 else   if (Recur.MONTHLY.equals(frequency)) {
    recurrence.setFrequency(Recurrence.MONTHLY);
    Iterator itr=recur.getMonthDayList().iterator();
    if (itr.hasNext()) {
      Integer monthDay=(Integer)itr.next();
      recurrence.setByMonthDay(new int[]{monthDay.intValue()});
    }
    itr=recur.getDayList().iterator();
    if (itr.hasNext()) {
      WeekDay weekDay=(WeekDay)itr.next();
      DayAndPosition[] dayPos={new DayAndPosition(toCalendarWeekDay(weekDay),weekDay.getOffset())};
      recurrence.setByDay(dayPos);
    }
  }
 else   if (Recur.YEARLY.equals(frequency)) {
    recurrence.setFrequency(Recurrence.YEARLY);
  }
  return recurrence;
}
