{
  User user=userPersistence.findByPrimaryKey(userId);
  long groupId=serviceContext.getScopeGroupId();
  Date now=new Date();
  Locale locale=null;
  TimeZone timeZone=null;
  if (timeZoneSensitive) {
    locale=user.getLocale();
    timeZone=user.getTimeZone();
  }
 else {
    locale=LocaleUtil.getDefault();
    timeZone=TimeZoneUtil.getDefault();
  }
  Calendar startDate=CalendarFactoryUtil.getCalendar(timeZone,locale);
  startDate.set(Calendar.MONTH,startDateMonth);
  startDate.set(Calendar.DATE,startDateDay);
  startDate.set(Calendar.YEAR,startDateYear);
  startDate.set(Calendar.HOUR_OF_DAY,startDateHour);
  startDate.set(Calendar.MINUTE,startDateMinute);
  startDate.set(Calendar.SECOND,0);
  startDate.set(Calendar.MILLISECOND,0);
  Calendar endDate=CalendarFactoryUtil.getCalendar(timeZone,locale);
  endDate.set(Calendar.MONTH,endDateMonth);
  endDate.set(Calendar.DATE,endDateDay);
  endDate.set(Calendar.YEAR,endDateYear);
  endDate.set(Calendar.HOUR_OF_DAY,23);
  endDate.set(Calendar.MINUTE,59);
  endDate.set(Calendar.SECOND,59);
  endDate.set(Calendar.MILLISECOND,999);
  if (allDay) {
    startDate.set(Calendar.HOUR_OF_DAY,0);
    startDate.set(Calendar.MINUTE,0);
    durationHour=24;
    durationMinute=0;
  }
  validate(title,startDateMonth,startDateDay,startDateYear,endDateMonth,endDateDay,endDateYear,durationHour,durationMinute,allDay,repeating);
  long eventId=counterLocalService.increment();
  CalEvent event=calEventPersistence.create(eventId);
  event.setUuid(uuid);
  event.setGroupId(groupId);
  event.setCompanyId(user.getCompanyId());
  event.setUserId(user.getUserId());
  event.setUserName(user.getFullName());
  event.setCreateDate(now);
  event.setModifiedDate(now);
  event.setTitle(title);
  event.setDescription(description);
  event.setStartDate(startDate.getTime());
  event.setEndDate(endDate.getTime());
  event.setDurationHour(durationHour);
  event.setDurationMinute(durationMinute);
  event.setAllDay(allDay);
  event.setTimeZoneSensitive(timeZoneSensitive);
  event.setType(type);
  event.setRepeating(repeating);
  event.setRecurrenceObj(recurrence);
  event.setRemindBy(remindBy);
  event.setFirstReminder(firstReminder);
  event.setSecondReminder(secondReminder);
  event.setExpandoBridgeAttributes(serviceContext);
  calEventPersistence.update(event,false);
  if (serviceContext.getAddCommunityPermissions() || serviceContext.getAddGuestPermissions()) {
    addEventResources(event,serviceContext.getAddCommunityPermissions(),serviceContext.getAddGuestPermissions());
  }
 else {
    addEventResources(event,serviceContext.getCommunityPermissions(),serviceContext.getGuestPermissions());
  }
  assetEntryLocalService.updateEntry(userId,groupId,CalEvent.class.getName(),event.getEventId(),serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames(),true,null,null,null,null,ContentTypes.TEXT_HTML,event.getTitle(),event.getDescription(),null,null,0,0,null,false);
  socialActivityLocalService.addActivity(userId,groupId,CalEvent.class.getName(),eventId,CalendarActivityKeys.ADD_EVENT,StringPool.BLANK,0);
  Indexer indexer=IndexerRegistryUtil.getIndexer(CalEvent.class);
  indexer.reindex(event);
  CalEventLocalUtil.clearEventsPool(event.getGroupId());
  return event;
}
