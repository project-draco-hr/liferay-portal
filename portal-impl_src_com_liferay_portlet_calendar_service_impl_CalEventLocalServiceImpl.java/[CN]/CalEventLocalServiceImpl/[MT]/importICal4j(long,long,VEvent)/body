{
  User user=userPersistence.findByPrimaryKey(userId);
  TimeZone timeZone=user.getTimeZone();
  String title=StringPool.BLANK;
  if (event.getSummary() != null) {
    title=event.getSummary().getValue();
  }
  String description=StringPool.BLANK;
  if (event.getDescription() != null) {
    description=event.getDescription().getValue();
  }
  Calendar startDate=Calendar.getInstance(timeZone);
  startDate.setTime(event.getStartDate().getDate());
  Calendar endDate=Calendar.getInstance(timeZone);
  endDate.setTime(event.getEndDate().getDate());
  long diffMillis=endDate.getTimeInMillis() - startDate.getTimeInMillis();
  long durationHours=diffMillis / (60 * 60 * 1000);
  long durationMins=(diffMillis / (60 * 1000)) - (durationHours * 60);
  boolean allDay=false;
  boolean timeZoneSensitive=true;
  String type=StringPool.BLANK;
  boolean repeating=false;
  Recurrence recurrence=null;
  RRule rrule=(RRule)event.getProperty(Property.RRULE);
  if (rrule != null) {
    repeating=true;
    recurrence=toRecurrence(rrule.getRecur(),timeZone,startDate);
    if (recurrence.getUntil() != null) {
      endDate=recurrence.getUntil();
    }
  }
  String remindBy="none";
  int firstReminder=300000;
  int secondReminder=300000;
  boolean addCommunityPermissions=false;
  boolean addGuestPermissions=false;
  addEvent(userId,plid,title,description,startDate.get(Calendar.MONTH),startDate.get(Calendar.DAY_OF_MONTH),startDate.get(Calendar.YEAR),startDate.get(Calendar.HOUR_OF_DAY),startDate.get(Calendar.MINUTE),endDate.get(Calendar.MONTH),endDate.get(Calendar.DAY_OF_MONTH),endDate.get(Calendar.YEAR),(int)durationHours,(int)durationMins,allDay,timeZoneSensitive,type,repeating,recurrence,remindBy,firstReminder,secondReminder,addCommunityPermissions,addGuestPermissions);
}
