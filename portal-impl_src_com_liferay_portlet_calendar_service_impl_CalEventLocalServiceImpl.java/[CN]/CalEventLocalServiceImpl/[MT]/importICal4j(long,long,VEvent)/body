{
  User user=userPersistence.findByPrimaryKey(userId);
  TimeZone timeZone=user.getTimeZone();
  Property timeZoneXProperty=event.getProperty(TimeZoneSensitive.PROPERTY_NAME);
  boolean timeZoneXPropertyValue=true;
  if ((timeZoneXProperty != null) && timeZoneXProperty.getValue().equals("FALSE")) {
    timeZoneXPropertyValue=false;
  }
  String title=StringPool.BLANK;
  if (event.getSummary() != null) {
    title=ModelHintsUtil.trimString(CalEvent.class.getName(),"title",event.getSummary().getValue());
  }
 else {
    title=StringPool.OPEN_PARENTHESIS + LanguageUtil.get(user.getLocale(),"no-title") + StringPool.CLOSE_PARENTHESIS;
  }
  String description=StringPool.BLANK;
  if (event.getDescription() != null) {
    description=event.getDescription().getValue();
  }
  String location=StringPool.BLANK;
  if (event.getLocation() != null) {
    location=event.getLocation().getValue();
  }
  DtStart dtStart=event.getStartDate();
  Calendar startDate=toCalendar(dtStart,timeZone,timeZoneXPropertyValue);
  startDate.setTime(dtStart.getDate());
  DtEnd dtEnd=event.getEndDate(true);
  RRule rrule=(RRule)event.getProperty(Property.RRULE);
  long diffMillis=0;
  long durationHours=24;
  long durationMins=0;
  boolean multiDayEvent=false;
  if (dtEnd != null) {
    diffMillis=dtEnd.getDate().getTime() - startDate.getTimeInMillis();
    durationHours=diffMillis / Time.HOUR;
    durationMins=(diffMillis / Time.MINUTE) - (durationHours * 60);
    if ((durationHours > 24) || ((durationHours == 24) && (durationMins > 0))) {
      durationHours=24;
      durationMins=0;
      multiDayEvent=true;
    }
  }
  boolean allDay=false;
  if (isICal4jDateOnly(event.getStartDate()) || multiDayEvent) {
    allDay=true;
  }
  boolean timeZoneSensitive=true;
  if (allDay || !timeZoneXPropertyValue) {
    timeZoneSensitive=false;
  }
  String type=StringPool.BLANK;
  Property comment=event.getProperty(Property.COMMENT);
  if ((comment != null) && ArrayUtil.contains(CalEventConstants.TYPES,comment.getValue())) {
    type=comment.getValue();
  }
  boolean repeating=false;
  TZSRecurrence recurrence=null;
  if (multiDayEvent) {
    repeating=true;
    Calendar recStartCal=CalendarFactoryUtil.getCalendar(TimeZoneUtil.getTimeZone(StringPool.UTC));
    recStartCal.setTime(startDate.getTime());
    com.liferay.portal.kernel.cal.Duration duration=new com.liferay.portal.kernel.cal.Duration(1,0,0,0);
    recurrence=new TZSRecurrence(recStartCal,duration,Recurrence.DAILY);
    Calendar until=CalendarFactoryUtil.getCalendar(TimeZoneUtil.getTimeZone(StringPool.UTC));
    until.setTimeInMillis(until.getTimeInMillis() + diffMillis);
    recurrence.setUntil(until);
  }
 else   if (rrule != null) {
    repeating=true;
    recurrence=toRecurrence(rrule,startDate);
  }
  int remindBy=CalEventConstants.REMIND_BY_NONE;
  int firstReminder=300000;
  int secondReminder=300000;
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddGroupPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setScopeGroupId(groupId);
  String uuid=null;
  CalEvent existingEvent=null;
  if (event.getUid() != null) {
    Uid uid=event.getUid();
    if (existingEvent == null) {
      uuid=uid.getValue();
      existingEvent=calEventPersistence.fetchByUUID_G(uuid,groupId);
    }
    if (existingEvent == null) {
      uuid=PortalUUIDUtil.generate(uid.getValue().getBytes());
      existingEvent=calEventPersistence.fetchByUUID_G(uuid,groupId);
    }
  }
  int startDateMonth=startDate.get(Calendar.MONTH);
  int startDateDay=startDate.get(Calendar.DAY_OF_MONTH);
  int startDateYear=startDate.get(Calendar.YEAR);
  int startDateHour=startDate.get(Calendar.HOUR_OF_DAY);
  int startDateMinute=startDate.get(Calendar.MINUTE);
  int durationHour=(int)durationHours;
  int durationMinute=(int)durationMins;
  if (existingEvent == null) {
    serviceContext.setUuid(uuid);
    calEventLocalService.addEvent(userId,title,description,location,startDateMonth,startDateDay,startDateYear,startDateHour,startDateMinute,durationHour,durationMinute,allDay,timeZoneSensitive,type,repeating,recurrence,remindBy,firstReminder,secondReminder,serviceContext);
  }
 else {
    calEventLocalService.updateEvent(userId,existingEvent.getEventId(),title,description,location,startDateMonth,startDateDay,startDateYear,startDateHour,startDateMinute,durationHour,durationMinute,allDay,timeZoneSensitive,type,repeating,recurrence,remindBy,firstReminder,secondReminder,serviceContext);
  }
}
