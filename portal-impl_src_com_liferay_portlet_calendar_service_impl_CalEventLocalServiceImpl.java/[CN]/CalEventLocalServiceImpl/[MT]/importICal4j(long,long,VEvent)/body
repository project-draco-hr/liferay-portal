{
  User user=userPersistence.findByPrimaryKey(userId);
  TimeZone timeZone=user.getTimeZone();
  Property timeZoneXProperty=event.getProperty(TimeZoneSensitive.PROPERTY_NAME);
  boolean timeZoneXPropertyValue=true;
  if (Validator.isNotNull(timeZoneXProperty) && timeZoneXProperty.getValue().equals("FALSE")) {
    timeZoneXPropertyValue=false;
  }
  String title=StringPool.BLANK;
  if (event.getSummary() != null) {
    title=event.getSummary().getValue();
  }
  String description=StringPool.BLANK;
  if (event.getDescription() != null) {
    description=event.getDescription().getValue();
  }
  DtStart dtStart=event.getStartDate();
  Calendar startDate=toCalendar(dtStart,timeZone,timeZoneXPropertyValue);
  startDate.setTime(dtStart.getDate());
  Calendar endDate=null;
  DtEnd dtEnd=event.getEndDate(true);
  RRule rrule=(RRule)event.getProperty(Property.RRULE);
  if (Validator.isNotNull(dtEnd)) {
    endDate=toCalendar(dtEnd,timeZone,timeZoneXPropertyValue);
    endDate.setTime(dtEnd.getDate());
  }
 else {
    endDate=(Calendar)startDate.clone();
    endDate.add(Calendar.DATE,1);
  }
  long diffMillis=0;
  long durationHours=24;
  long durationMins=0;
  boolean multiDayEvent=false;
  if (Validator.isNotNull(dtEnd)) {
    diffMillis=dtEnd.getDate().getTime() - startDate.getTimeInMillis();
    durationHours=diffMillis / Time.HOUR;
    durationMins=(diffMillis / Time.MINUTE) - (durationHours * 60);
    if ((durationHours > 24) || ((durationHours == 24) && (durationMins > 0))) {
      durationHours=24;
      durationMins=0;
      multiDayEvent=true;
    }
  }
  boolean allDay=false;
  if (isICal4jDateOnly(event.getStartDate()) || multiDayEvent) {
    allDay=true;
  }
  boolean timeZoneSensitive=true;
  if (allDay || !timeZoneXPropertyValue) {
    timeZoneSensitive=false;
  }
  String type=StringPool.BLANK;
  Property comment=event.getProperty(Property.COMMENT);
  if (Validator.isNotNull(comment) && ArrayUtil.contains(CalEventImpl.TYPES,comment.getValue())) {
    type=comment.getValue();
  }
  boolean repeating=false;
  Recurrence recurrence=null;
  if (multiDayEvent) {
    repeating=true;
    Calendar recStartCal=CalendarFactoryUtil.getCalendar(timeZone);
    recStartCal.setTime(startDate.getTime());
    com.liferay.portal.kernel.cal.Duration duration=new com.liferay.portal.kernel.cal.Duration(1,0,0,0);
    recurrence=new Recurrence(recStartCal,duration,Recurrence.DAILY);
    Calendar until=(Calendar)startDate.clone();
    until.setTimeInMillis(until.getTimeInMillis() + diffMillis);
    recurrence.setUntil(until);
    endDate=recurrence.getUntil();
  }
 else   if (rrule != null) {
    repeating=true;
    recurrence=toRecurrence(rrule.getRecur(),timeZone,startDate);
    if (recurrence.getUntil() != null) {
      endDate=recurrence.getUntil();
    }
  }
  String remindBy="none";
  int firstReminder=300000;
  int secondReminder=300000;
  boolean addCommunityPermissions=false;
  boolean addGuestPermissions=false;
  addEvent(userId,plid,title,description,startDate.get(Calendar.MONTH),startDate.get(Calendar.DAY_OF_MONTH),startDate.get(Calendar.YEAR),startDate.get(Calendar.HOUR_OF_DAY),startDate.get(Calendar.MINUTE),endDate.get(Calendar.MONTH),endDate.get(Calendar.DAY_OF_MONTH),endDate.get(Calendar.YEAR),(int)durationHours,(int)durationMins,allDay,timeZoneSensitive,type,repeating,recurrence,remindBy,firstReminder,secondReminder,addCommunityPermissions,addGuestPermissions);
}
