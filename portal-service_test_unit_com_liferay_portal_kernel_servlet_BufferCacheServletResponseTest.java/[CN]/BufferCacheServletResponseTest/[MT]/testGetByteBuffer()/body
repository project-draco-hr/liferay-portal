{
  StubHttpServletResponse stubHttpServletResponse=new StubHttpServletResponse(){
    @Override public boolean isCommitted(){
      return false;
    }
    @Override public void setCharacterEncoding(    String characterEncoding){
    }
  }
;
  BufferCacheServletResponse bufferCacheServletResponse=new BufferCacheServletResponse(stubHttpServletResponse);
  ByteBuffer byteBuffer=bufferCacheServletResponse.getByteBuffer();
  Assert.assertEquals(0,byteBuffer.limit());
  bufferCacheServletResponse=new BufferCacheServletResponse(stubHttpServletResponse);
  byteBuffer=ByteBuffer.wrap(_TEST_BYTES);
  bufferCacheServletResponse.setByteBuffer(byteBuffer);
  Assert.assertSame(byteBuffer,bufferCacheServletResponse.getByteBuffer());
  ServletOutputStreamAdapter servletOutputStreamAdapter=(ServletOutputStreamAdapter)bufferCacheServletResponse.getOutputStream();
  Assert.assertTrue(servletOutputStreamAdapter.outputStream instanceof DummyOutputStream);
  Assert.assertTrue(bufferCacheServletResponse.calledGetOutputStream);
  bufferCacheServletResponse.setByteBuffer(null);
  Assert.assertFalse(bufferCacheServletResponse.calledGetOutputStream);
  servletOutputStreamAdapter=(ServletOutputStreamAdapter)bufferCacheServletResponse.getOutputStream();
  Assert.assertTrue(servletOutputStreamAdapter.outputStream instanceof UnsyncByteArrayOutputStream);
  Assert.assertTrue(bufferCacheServletResponse.calledGetOutputStream);
  bufferCacheServletResponse=new BufferCacheServletResponse(stubHttpServletResponse);
  CharBuffer charBuffer=CharBuffer.wrap(_TEST_STRING);
  bufferCacheServletResponse.setCharBuffer(charBuffer);
  byteBuffer=bufferCacheServletResponse.getByteBuffer();
  Assert.assertEquals(ByteBuffer.wrap(_TEST_BYTES),byteBuffer);
  Assert.assertEquals(0,charBuffer.position());
  Assert.assertEquals(_TEST_STRING.length(),charBuffer.limit());
  Assert.assertEquals(_TEST_STRING.length(),charBuffer.capacity());
  UnsyncPrintWriter unsyncPrintWriter=(UnsyncPrintWriter)bufferCacheServletResponse.getWriter();
  Field writerField=ReflectionUtil.getDeclaredField(UnsyncPrintWriter.class,"_writer");
  Assert.assertTrue(writerField.get(unsyncPrintWriter) instanceof DummyWriter);
  Assert.assertTrue(bufferCacheServletResponse.calledGetWriter);
  bufferCacheServletResponse.setCharBuffer(null);
  Assert.assertFalse(bufferCacheServletResponse.calledGetWriter);
  unsyncPrintWriter=(UnsyncPrintWriter)bufferCacheServletResponse.getWriter();
  Assert.assertTrue(writerField.get(unsyncPrintWriter) instanceof UnsyncStringWriter);
  Assert.assertTrue(bufferCacheServletResponse.calledGetWriter);
  bufferCacheServletResponse=new BufferCacheServletResponse(stubHttpServletResponse);
  ServletOutputStream servletOutputStream=bufferCacheServletResponse.getOutputStream();
  servletOutputStream.write(_TEST_BYTES);
  byteBuffer=bufferCacheServletResponse.getByteBuffer();
  Assert.assertEquals(ByteBuffer.wrap(_TEST_BYTES),byteBuffer);
  bufferCacheServletResponse=new BufferCacheServletResponse(stubHttpServletResponse);
  bufferCacheServletResponse.setCharacterEncoding(StringPool.UTF8);
  PrintWriter printWriter=bufferCacheServletResponse.getWriter();
  printWriter.write(_TEST_STRING);
  byteBuffer=bufferCacheServletResponse.getByteBuffer();
  Assert.assertEquals(ByteBuffer.wrap(_TEST_BYTES),byteBuffer);
}
