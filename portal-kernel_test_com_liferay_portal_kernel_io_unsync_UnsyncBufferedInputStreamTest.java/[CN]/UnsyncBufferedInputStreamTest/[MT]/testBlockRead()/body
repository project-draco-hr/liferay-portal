{
  int bufferSize=10;
  ByteArrayInputStream bais=new ByteArrayInputStream(testData);
  UnsyncBufferedInputStream unsyncBis=new UnsyncBufferedInputStream(bais,bufferSize);
  assertEquals(testDataSize,bais.available());
  assertEquals(testDataSize,unsyncBis.available());
  assertEquals(0,unsyncBis.read());
  assertEquals(testDataSize - bufferSize,bais.available());
  assertEquals(testDataSize - 1,unsyncBis.available());
  byte[] testBuffer=new byte[5];
  int number=unsyncBis.read(testBuffer);
  assertEquals(testBuffer.length,number);
  for (int i=1; i < testBuffer.length + 1; i++) {
    assertEquals(i,testBuffer[i - 1]);
  }
  assertEquals(6,unsyncBis.read());
  assertEquals(7,unsyncBis.read());
  assertEquals(8,unsyncBis.read());
  assertEquals(9,unsyncBis.read());
  number=unsyncBis.read(testBuffer);
  assertEquals(testBuffer.length,number);
  for (int i=10; i < testBuffer.length + 10; i++) {
    assertEquals(i,testBuffer[i - 10]);
  }
  assertEquals(testDataSize - bufferSize * 2,bais.available());
  assertEquals(testDataSize - 15,unsyncBis.available());
  byte[] testBuffer2=new byte[10];
  number=unsyncBis.read(testBuffer2);
  assertEquals(testBuffer2.length,number);
  for (int i=15; i < testBuffer2.length + 15; i++) {
    assertEquals(i,testBuffer2[i - 15]);
  }
  assertEquals(testDataSize - bufferSize * 3,bais.available());
  assertEquals(testDataSize - 25,unsyncBis.available());
  for (int i=25; i < testDataSize - 5; i++) {
    assertEquals(i & 0xff,unsyncBis.read());
  }
  assertEquals(testDataSize % 5,bais.available());
  assertEquals(5,unsyncBis.available());
  number=unsyncBis.read(testBuffer2);
  assertEquals(5,number);
  assertEquals(-1,unsyncBis.read());
}
