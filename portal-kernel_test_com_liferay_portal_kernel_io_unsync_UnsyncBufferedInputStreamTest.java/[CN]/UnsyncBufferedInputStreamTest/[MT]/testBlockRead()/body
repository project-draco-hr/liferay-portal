{
  ByteArrayInputStream bais=new ByteArrayInputStream(_BUFFER);
  int bufferSize=10;
  UnsyncBufferedInputStream unsyncBis=new UnsyncBufferedInputStream(bais,bufferSize);
  assertEquals(_BUFFER_SIZE,bais.available());
  assertEquals(_BUFFER_SIZE,unsyncBis.available());
  assertEquals(0,unsyncBis.read());
  assertEquals(_BUFFER_SIZE - bufferSize,bais.available());
  assertEquals(_BUFFER_SIZE - 1,unsyncBis.available());
  byte[] buffer=new byte[5];
  int number=unsyncBis.read(buffer);
  assertEquals(buffer.length,number);
  for (int i=1; i < buffer.length + 1; i++) {
    assertEquals(i,buffer[i - 1]);
  }
  assertEquals(6,unsyncBis.read());
  assertEquals(7,unsyncBis.read());
  assertEquals(8,unsyncBis.read());
  assertEquals(9,unsyncBis.read());
  number=unsyncBis.read(buffer);
  assertEquals(buffer.length,number);
  for (int i=10; i < buffer.length + 10; i++) {
    assertEquals(i,buffer[i - 10]);
  }
  assertEquals(_BUFFER_SIZE - bufferSize * 2,bais.available());
  assertEquals(_BUFFER_SIZE - 15,unsyncBis.available());
  buffer=new byte[10];
  number=unsyncBis.read(buffer);
  assertEquals(buffer.length,number);
  for (int i=15; i < buffer.length + 15; i++) {
    assertEquals(i,buffer[i - 15]);
  }
  assertEquals(_BUFFER_SIZE - bufferSize * 3,bais.available());
  assertEquals(_BUFFER_SIZE - 25,unsyncBis.available());
  for (int i=25; i < _BUFFER_SIZE - 5; i++) {
    assertEquals(i & 0xff,unsyncBis.read());
  }
  assertEquals(_BUFFER_SIZE % 5,bais.available());
  assertEquals(5,unsyncBis.available());
  number=unsyncBis.read(buffer);
  assertEquals(5,number);
  assertEquals(-1,unsyncBis.read());
}
