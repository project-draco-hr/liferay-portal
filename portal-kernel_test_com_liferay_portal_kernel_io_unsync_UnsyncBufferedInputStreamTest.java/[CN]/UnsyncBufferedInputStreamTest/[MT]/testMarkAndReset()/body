{
  UnsyncBufferedInputStream ubis=new UnsyncBufferedInputStream(new ByteArrayInputStream(_BUFFER));
  assertEquals(-1,ubis.markIndex);
  int markLimit=10;
  ubis.mark(markLimit);
  assertEquals(0,ubis.markIndex);
  assertEquals(_BUFFER_SIZE,ubis.available());
  assertEquals(0,ubis.read());
  assertEquals(1,ubis.read());
  assertEquals(2,ubis.read());
  assertEquals(3,ubis.index);
  ubis.reset();
  assertEquals(_BUFFER_SIZE,ubis.available());
  assertEquals(0,ubis.read());
  assertEquals(1,ubis.read());
  assertEquals(2,ubis.read());
  assertEquals(3,ubis.index);
  int bufferSize=20;
  ubis=new UnsyncBufferedInputStream(new ByteArrayInputStream(_BUFFER),bufferSize);
  assertEquals(-1,ubis.markIndex);
  ubis.mark(markLimit);
  assertEquals(0,ubis.markIndex);
  for (int i=0; i < bufferSize * 2; i++) {
    assertEquals(i,ubis.read());
  }
  assertEquals(bufferSize,ubis.index);
  assertEquals(_BUFFER_SIZE - bufferSize * 2,ubis.available());
  assertEquals(-1,ubis.markIndex);
  ubis=new UnsyncBufferedInputStream(new ByteArrayInputStream(_BUFFER));
  for (int i=0; i < 4097; i++) {
    assertEquals(i & 0xff,ubis.read());
  }
  ubis.mark(markLimit);
  assertEquals(_BUFFER_SIZE - 4097,ubis.available());
  assertEquals(4097 & 0xff,ubis.read());
  assertEquals(4098 & 0xff,ubis.read());
  assertEquals(_BUFFER_SIZE - 4099,ubis.available());
  ubis.reset();
  assertEquals(_BUFFER_SIZE - 4097,ubis.available());
  assertEquals(4097 & 0xff,ubis.read());
  assertEquals(4098 & 0xff,ubis.read());
  assertEquals(_BUFFER_SIZE - 4099,ubis.available());
  ubis=new UnsyncBufferedInputStream(new ByteArrayInputStream(_BUFFER),5);
  assertEquals(0,ubis.read());
  assertEquals(1,ubis.read());
  ubis.mark(markLimit);
  assertEquals(2,ubis.read());
  assertEquals(3,ubis.read());
  assertEquals(4,ubis.read());
  assertEquals(5,ubis.read());
  ubis.reset();
  assertEquals(2,ubis.read());
  assertEquals(3,ubis.read());
  assertEquals(4,ubis.read());
  assertEquals(5,ubis.read());
}
