{
  try {
    checkPermissions(actionRequest);
  }
 catch (  Exception e) {
    throw new PortletException(e);
  }
  String[] actionNames=ParamUtil.getParameterValues(actionRequest,ActionRequest.ACTION_NAME);
  String actionName=StringUtil.merge(actionNames);
  if (!actionName.contains(StringPool.COMMA)) {
    MVCActionCommand mvcActionCommand=(MVCActionCommand)_mvcActionCommandCache.getMVCCommand(actionName);
    if (mvcActionCommand != MVCActionCommand.EMPTY) {
      if (mvcActionCommand instanceof FormMVCActionCommand) {
        FormMVCActionCommand formMVCActionCommand=(FormMVCActionCommand)mvcActionCommand;
        if (!formMVCActionCommand.validateForm(actionRequest,actionResponse)) {
          return false;
        }
      }
      return mvcActionCommand.processAction(actionRequest,actionResponse);
    }
  }
 else {
    List<MVCActionCommand> mvcActionCommands=(List<MVCActionCommand>)_mvcActionCommandCache.getMVCCommands(actionName);
    if (!mvcActionCommands.isEmpty()) {
      boolean valid=true;
      for (      MVCActionCommand mvcActionCommand : mvcActionCommands) {
        if (mvcActionCommand instanceof FormMVCActionCommand) {
          FormMVCActionCommand formMVCActionCommand=(FormMVCActionCommand)mvcActionCommand;
          valid&=formMVCActionCommand.validateForm(actionRequest,actionResponse);
        }
      }
      if (!valid) {
        return false;
      }
      for (      MVCActionCommand mvcActionCommand : mvcActionCommands) {
        if (!mvcActionCommand.processAction(actionRequest,actionResponse)) {
          return false;
        }
      }
      return true;
    }
  }
  return super.callActionMethod(actionRequest,actionResponse);
}
