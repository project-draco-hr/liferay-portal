{
  String value=getProperty(key);
  if (value != null) {
    int x=value.indexOf(_ENV_PREFIX);
    while (x >= 0) {
      int y=value.indexOf(StringPool.CLOSE_CURLY_BRACE,x);
      String propertyName=value.substring(x + 6,y);
      String propertyValue=GetterUtil.getString(System.getenv(propertyName));
      String fullPropertyName=_ENV_PREFIX + propertyName + StringPool.CLOSE_CURLY_BRACE;
      if (!ArrayUtil.contains(_defaultReadPathsFromArray,fullPropertyName)) {
        _defaultReadPathsFromArray=ArrayUtil.append(_defaultReadPathsFromArray,fullPropertyName);
        _defaultReadPathsToArray=ArrayUtil.append(_defaultReadPathsToArray,propertyValue);
      }
      x=value.indexOf(_ENV_PREFIX,y + 1);
    }
    value=StringUtil.replace(value,_defaultReadPathsFromArray,_defaultReadPathsToArray);
    String[] paths=StringUtil.split(value);
    if (value.contains("${comma}")) {
      for (int i=0; i < paths.length; i++) {
        paths[i]=StringUtil.replace(paths[i],"${comma}",StringPool.COMMA);
      }
    }
    for (    String path : paths) {
      addPermission(path,actions);
    }
  }
  ServletContext servletContext=ServletContextPool.get(PortalContextLoaderListener.getPortalServletContextName());
  if (!actions.equals(FILE_PERMISSION_ACTION_EXECUTE) && (_workDir != null)) {
    addPermission(_workDir,actions);
    addPermission(_workDir + "/-",actions);
    if (ServerDetector.isWebLogic()) {
      addPermission(_workDir + "/../-",actions);
    }
    if (servletContext != null) {
      File tempDir=(File)servletContext.getAttribute(JavaConstants.JAVAX_SERVLET_CONTEXT_TEMPDIR);
      String tempDirAbsolutePath=tempDir.getAbsolutePath();
      if (_log.isDebugEnabled()) {
        _log.debug("Temp directory " + tempDirAbsolutePath);
      }
      if (actions.equals(FILE_PERMISSION_ACTION_READ)) {
        addPermission(tempDirAbsolutePath,actions);
      }
      addPermission(tempDirAbsolutePath + "/-",actions);
    }
  }
  if (!actions.equals(FILE_PERMISSION_ACTION_READ)) {
    return;
  }
  Set<String> paths=new LinkedHashSet<>();
  try {
    File file=new File(System.getProperty("java.home") + "/lib");
    addCanonicalPaths(paths,file);
    ClassLoader classLoader=ClassLoader.getSystemClassLoader();
    Enumeration<URL> enumeration=classLoader.getResources("META-INF/MANIFEST.MF");
    while (enumeration.hasMoreElements()) {
      URL url=enumeration.nextElement();
      URLConnection urlConnection=url.openConnection();
      if (urlConnection instanceof JarURLConnection) {
        JarURLConnection jarURLConnection=(JarURLConnection)url.openConnection();
        URL jarFileURL=jarURLConnection.getJarFileURL();
        String fileName=jarFileURL.getFile();
        int pos=fileName.lastIndexOf(File.separatorChar);
        if (pos != -1) {
          fileName=fileName.substring(0,pos + 1);
        }
        if (ServerDetector.isJetty()) {
          String jettyHome=System.getProperty("jetty.home");
          if (fileName.startsWith(jettyHome)) {
            continue;
          }
        }
        if (ServerDetector.isResin()) {
          String resinHome=System.getProperty("resin.home");
          if (fileName.startsWith(resinHome)) {
            continue;
          }
        }
        addCanonicalPath(paths,fileName);
      }
    }
  }
 catch (  IOException ioe) {
    _log.error(ioe,ioe);
  }
  if (Validator.isNotNull(_GLOBAL_SHARED_LIB_DIR)) {
    paths.add(_GLOBAL_SHARED_LIB_DIR + "-");
  }
  if (_rootDir != null) {
    paths.add(_rootDir);
    paths.add(_rootDir + "-");
  }
  addDefaultReadPaths(paths,ServerDetector.getServerId());
  for (  String path : paths) {
    addPermission(path,actions);
  }
}
