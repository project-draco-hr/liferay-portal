{
  _lock.lock();
  try {
    MPI mpi=spi.getMPI();
    if (mpi != _mpi) {
      if (_log.isWarnEnabled()) {
        _log.warn("Not unregistering SPI " + spi + " with foreign MPI "+ mpi+ " versus "+ _mpi);
      }
      return false;
    }
    String spiProviderName=spi.getSPIProviderName();
    SPIProvider spiProvider=_spiProviders.get(spiProviderName);
    if (spiProvider == null) {
      if (_log.isWarnEnabled()) {
        _log.warn("Not unregistering SPI " + spi + " with unknown SPI provider "+ spiProviderName);
      }
      return false;
    }
    SPIConfiguration spiConfiguration=spi.getSPIConfiguration();
    String spiId=spiConfiguration.getSPIId();
    SPIKey spiKey=new SPIKey(spiProviderName,spiId);
    if (_spis.remove(spiKey,spi)) {
      SPIRegistryUtil.unregisterSPI(spi);
      for (      String servletContextName : spiConfiguration.getServletContextNames()) {
        List<MessagingConfigurator> messagingConfigurators=MessagingConfiguratorRegistry.getMessagingConfigurators(servletContextName);
        if (messagingConfigurators != null) {
          for (          MessagingConfigurator messagingConfigurator : messagingConfigurators) {
            messagingConfigurator.connect();
          }
        }
      }
      if (_log.isInfoEnabled()) {
        _log.info("Unregistered SPI " + spi);
      }
      return true;
    }
 else {
      if (_log.isWarnEnabled()) {
        _log.warn("Not unregistering unregistered SPI " + spi);
      }
      return false;
    }
  }
 catch (  RemoteException re) {
    throw new RuntimeException(re);
  }
 finally {
    _lock.unlock();
  }
}
