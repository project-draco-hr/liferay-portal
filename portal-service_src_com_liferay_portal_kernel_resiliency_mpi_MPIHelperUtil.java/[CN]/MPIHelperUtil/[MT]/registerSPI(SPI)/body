{
  try {
    MPI mpi=spi.getMPI();
    if (mpi != _mpi) {
      if (_log.isWarnEnabled()) {
        _log.warn("Not registering SPI " + spi + " with foreign MPI "+ mpi+ " versus "+ _mpi);
      }
      return false;
    }
    String spiProviderName=spi.getSPIProviderName();
    SPIProviderContainer spiProviderContainer=_spiProviderContainers.get(spiProviderName);
    if (spiProviderContainer == null) {
      if (_log.isWarnEnabled()) {
        _log.warn("Not registering SPI " + spi + " with unknown SPI provider "+ spiProviderName);
      }
      return false;
    }
    SPIConfiguration spiConfiguration=spi.getSPIConfiguration();
    SPI previousSPI=spiProviderContainer.putSPIIfAbsent(spiConfiguration.getSPIId(),spi);
    if (previousSPI != null) {
      if (_log.isWarnEnabled()) {
        _log.warn("Not registering SPI " + spi + " because it duplicates "+ previousSPI);
      }
      return false;
    }
    SPIRegistryUtil.registerSPI(spi);
    for (    String servletContextName : spiConfiguration.getServletContextNames()) {
      List<MessagingConfigurator> messagingConfigurators=MessagingConfiguratorRegistry.getMessagingConfigurators(servletContextName);
      if (messagingConfigurators != null) {
        for (        MessagingConfigurator messagingConfigurator : messagingConfigurators) {
          messagingConfigurator.disconnect();
        }
      }
    }
    if (_log.isInfoEnabled()) {
      _log.info("Registered SPI " + spi);
    }
    return true;
  }
 catch (  RemoteException re) {
    throw new RuntimeException(re);
  }
}
