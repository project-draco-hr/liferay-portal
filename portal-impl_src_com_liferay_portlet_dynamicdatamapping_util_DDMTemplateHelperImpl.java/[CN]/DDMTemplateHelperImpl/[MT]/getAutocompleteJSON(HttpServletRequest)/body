{
  JSONObject jsonObject1=JSONFactoryUtil.createJSONObject();
  TemplateResource templateResource=new StringTemplateResource(_TEMPLATE_ID,_TEMPLATE_SCRIPT);
  Template template=TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL,templateResource,TemplateContextType.STANDARD);
  template.prepare(request);
  JSONObject emptyJsonObject=JSONFactoryUtil.createJSONObject();
  for (  String key : template.getKeys()) {
    JSONObject jsonObject2=JSONFactoryUtil.createJSONObject();
    Object object=template.get(key);
    if (object == null) {
      continue;
    }
    Class<? extends Object> objectClass=object.getClass();
    for (    Field field : objectClass.getFields()) {
      jsonObject2.put(field.getName(),emptyJsonObject);
    }
    for (    Method method : objectClass.getMethods()) {
      Class<?>[] parameterTypes=method.getParameterTypes();
      StringBundler sb=new StringBundler(4 + (parameterTypes.length * 2));
      sb.append(method.getName());
      sb.append(StringPool.OPEN_PARENTHESIS);
      for (      Class parameterType : parameterTypes) {
        sb.append(parameterType.getSimpleName());
        sb.append(StringPool.COMMA_AND_SPACE);
      }
      if (parameterTypes.length > 0) {
        sb.setIndex(sb.index() - 1);
      }
      sb.append(StringPool.CLOSE_PARENTHESIS);
      jsonObject2.put(sb.toString(),emptyJsonObject);
    }
    jsonObject1.put(key,jsonObject2);
  }
  return jsonObject1.toString();
}
