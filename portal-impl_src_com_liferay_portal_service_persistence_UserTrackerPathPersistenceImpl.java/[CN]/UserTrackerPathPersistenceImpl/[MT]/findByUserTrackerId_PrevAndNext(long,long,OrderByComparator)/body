{
  UserTrackerPath userTrackerPath=findByPrimaryKey(userTrackerPathId);
  int count=countByUserTrackerId(userTrackerId);
  Session session=null;
  try {
    session=openSession();
    StringBundler query=null;
    if (obc != null) {
      query=new StringBundler(3 + (obc.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(2);
    }
    query.append(_SQL_SELECT_USERTRACKERPATH_WHERE);
    query.append(_FINDER_COLUMN_USERTRACKERID_USERTRACKERID_2);
    if (obc != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,obc);
    }
    String sql=query.toString();
    Query q=session.createQuery(sql);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(userTrackerId);
    Object[] objArray=QueryUtil.getPrevAndNext(q,count,obc,userTrackerPath);
    UserTrackerPath[] array=new UserTrackerPathImpl[3];
    array[0]=(UserTrackerPath)objArray[0];
    array[1]=(UserTrackerPath)objArray[1];
    array[2]=(UserTrackerPath)objArray[2];
    return array;
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
