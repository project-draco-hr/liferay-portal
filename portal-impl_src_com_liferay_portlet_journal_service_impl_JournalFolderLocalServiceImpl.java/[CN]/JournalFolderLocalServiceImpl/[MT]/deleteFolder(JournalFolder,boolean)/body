{
  List<JournalFolder> folders=journalFolderPersistence.findByG_P(folder.getGroupId(),folder.getFolderId());
  for (  JournalFolder curFolder : folders) {
    if (includeTrashedEntries || !curFolder.isInTrashExplicitly()) {
      journalFolderLocalService.deleteFolder(curFolder,includeTrashedEntries);
    }
  }
  journalFolderPersistence.remove(folder);
  resourceLocalService.deleteResource(folder,ResourceConstants.SCOPE_INDIVIDUAL);
  journalArticleLocalService.deleteArticles(folder.getGroupId(),folder.getFolderId(),includeTrashedEntries);
  assetEntryLocalService.deleteEntry(JournalFolder.class.getName(),folder.getFolderId());
  expandoValueLocalService.deleteValues(JournalFolder.class.getName(),folder.getFolderId());
  if (folder.isInTrashExplicitly()) {
    trashEntryLocalService.deleteEntry(JournalFolder.class.getName(),folder.getFolderId());
  }
 else {
    trashVersionLocalService.deleteTrashVersion(JournalFolder.class.getName(),folder.getFolderId());
  }
  List<DDMStructureRestriction> ddmStructureRestrictions=ddmStructureRestrictionLocalService.getStructureRestrictions(JournalFolder.class.getName(),folder.getFolderId());
  if (ddmStructureRestrictions.isEmpty()) {
    WorkflowDefinitionLink workflowDefinitionLink=workflowDefinitionLinkLocalService.fetchWorkflowDefinitionLink(folder.getCompanyId(),folder.getGroupId(),JournalFolder.class.getName(),folder.getFolderId(),JournalArticleConstants.DDM_STRUCTURE_ID_ALL);
    if (workflowDefinitionLink != null) {
      workflowDefinitionLinkLocalService.deleteWorkflowDefinitionLink(workflowDefinitionLink);
    }
  }
  for (  DDMStructureRestriction ddmStructureRestriction : ddmStructureRestrictions) {
    ddmStructureRestrictionLocalService.deleteStructureRestriction(ddmStructureRestriction.getStructureRestrictionId());
    WorkflowDefinitionLink workflowDefinitionLink=workflowDefinitionLinkLocalService.fetchWorkflowDefinitionLink(folder.getCompanyId(),folder.getGroupId(),JournalFolder.class.getName(),folder.getFolderId(),ddmStructureRestriction.getStructureId());
    if (workflowDefinitionLink != null) {
      workflowDefinitionLinkLocalService.deleteWorkflowDefinitionLink(workflowDefinitionLink);
    }
  }
  return folder;
}
