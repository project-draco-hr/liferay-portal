{
  FastDateFormatFactoryUtil fastDateFormatFactoryUtil=new FastDateFormatFactoryUtil();
  fastDateFormatFactoryUtil.setFastDateFormatFactory(new FastDateFormatFactoryImpl());
  FileUtil fileUtil=new FileUtil();
  fileUtil.setFile(new FileImpl());
  Path tempFolder=Files.createTempDirectory(null);
  com.liferay.portal.util.PropsUtil.set(PropsKeys.MODULE_FRAMEWORK_STATE_DIR,tempFolder.toFile().getCanonicalPath());
  PropsUtil.setProps(new PropsImpl());
  String[] moduleFrameworkAutoDeployDirs=PropsUtil.getArray(PropsKeys.MODULE_FRAMEWORK_INITIAL_BUNDLES);
  for (int i=0; i < moduleFrameworkAutoDeployDirs.length; i++) {
    if (moduleFrameworkAutoDeployDirs[i].endsWith("@start")) {
      moduleFrameworkAutoDeployDirs[i]=moduleFrameworkAutoDeployDirs[i].substring(0,moduleFrameworkAutoDeployDirs[i].length() - 6);
    }
  }
  com.liferay.portal.util.PropsUtil.set(PropsKeys.MODULE_FRAMEWORK_INITIAL_BUNDLES,StringUtil.merge(moduleFrameworkAutoDeployDirs));
  String bsn="com.liferay.target.platform";
  String version=ReleaseInfo.getVersion();
  File targetPlatformDir=new File(PropsValues.MODULE_FRAMEWORK_BASE_DIR,TARGET_PLATFORM);
  if (!targetPlatformDir.exists() && !targetPlatformDir.mkdirs()) {
    System.err.printf("== Cannot create directory %s\n",targetPlatformDir);
    return;
  }
  TargetPlatformMain targetPlatformIndexer=new TargetPlatformMain(bsn,version);
  try {
    File indexFile=targetPlatformIndexer.index(targetPlatformDir);
    System.out.println("== Wrote index file " + indexFile);
  }
  finally {
    Util.deltree(tempFolder);
  }
}
