{
  FastDateFormatFactoryUtil fastDateFormatFactoryUtil=new FastDateFormatFactoryUtil();
  fastDateFormatFactoryUtil.setFastDateFormatFactory(new FastDateFormatFactoryImpl());
  FileUtil fileUtil=new FileUtil();
  fileUtil.setFile(new FileImpl());
  Path tempPath=Files.createTempDirectory(null);
  File tempDir=tempPath.toFile();
  com.liferay.portal.util.PropsUtil.set(PropsKeys.MODULE_FRAMEWORK_STATE_DIR,tempDir.getCanonicalPath());
  PropsUtil.setProps(new PropsImpl());
  String[] moduleFrameworkInitialBundles=PropsUtil.getArray(PropsKeys.MODULE_FRAMEWORK_INITIAL_BUNDLES);
  for (int i=0; i < moduleFrameworkInitialBundles.length; i++) {
    String moduleFrameworkInitialBundle=moduleFrameworkInitialBundles[i];
    if (moduleFrameworkInitialBundle.endsWith("@start")) {
      moduleFrameworkInitialBundles[i]=moduleFrameworkInitialBundle.substring(0,moduleFrameworkInitialBundle.length() - 6);
    }
  }
  com.liferay.portal.util.PropsUtil.set(PropsKeys.MODULE_FRAMEWORK_INITIAL_BUNDLES,StringUtil.merge(moduleFrameworkInitialBundles));
  File targetPlatformDir=new File(PropsValues.MODULE_FRAMEWORK_BASE_DIR,DIR_NAME_TARGET_PLATFORM);
  if (!targetPlatformDir.exists() && !targetPlatformDir.mkdirs()) {
    System.err.printf("== Unable to create directory %s\n",targetPlatformDir);
    return;
  }
  TargetPlatformMain targetPlatformMain=new TargetPlatformMain("com.liferay.target.platform",ReleaseInfo.getVersion());
  try {
    File indexFile=targetPlatformMain.index(targetPlatformDir);
    System.out.println("== Wrote index file " + indexFile);
  }
  finally {
    PathUtil.deltree(tempPath);
  }
}
