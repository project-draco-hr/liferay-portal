{
  User user=UserUtil.findByPrimaryKey(userId);
  if (Validator.isNull(className) || Validator.isNull(classPK)) {
    validateName(null,user.getCompanyId(),name);
  }
  validateFriendlyURL(null,user.getCompanyId(),friendlyURL);
  String groupId=Long.toString(CounterServiceUtil.increment(Group.class.getName()));
  if (Validator.isNotNull(className) && Validator.isNotNull(classPK)) {
    name=groupId;
  }
  Group group=GroupUtil.create(groupId);
  group.setCompanyId(user.getCompanyId());
  group.setClassName(className);
  group.setClassPK(classPK);
  group.setParentGroupId(Group.DEFAULT_PARENT_GROUP_ID);
  group.setName(name);
  group.setFriendlyURL(friendlyURL);
  GroupUtil.update(group);
  LayoutSetLocalServiceUtil.addLayoutSet(Layout.PRIVATE + groupId,user.getCompanyId());
  LayoutSetLocalServiceUtil.addLayoutSet(Layout.PUBLIC + groupId,user.getCompanyId());
  if (Validator.isNull(className) && Validator.isNull(classPK)) {
    Role role=RoleLocalServiceUtil.addRole(user.getCompanyId(),"GROUP_" + groupId + "_ADMINISTRATOR",Group.class.getName(),groupId);
    UserLocalServiceUtil.addRoleUsers(role.getRoleId(),new String[]{userId});
    UserLocalServiceUtil.addGroupUsers(group.getGroupId(),new String[]{userId});
  }
  return group;
}
