{
  List groups=GroupUtil.findAll();
  Map orgMap=new HashMap(groups.size());
  Map permissionMap=new HashMap(groups.size());
  Map roleMap=new HashMap(groups.size());
  Map userMap=new HashMap(groups.size());
  Map userGroupMap=new HashMap(groups.size());
  Map journalArticleMap=new HashMap(groups.size());
  Map journalContentSearchMap=new HashMap(groups.size());
  Map journalStructureMap=new HashMap(groups.size());
  Map journalTemplateMap=new HashMap(groups.size());
  Map mBStatsUserMap=new HashMap(groups.size());
  Map orgPermissionMap=new HashMap(groups.size());
  Map orgRoleMap=new HashMap(groups.size());
  Iterator itr1=groups.iterator();
  while (itr1.hasNext()) {
    Group group=(Group)itr1.next();
    long groupId=group.getGroupId();
    Long wrappedGroupId=new Long(groupId);
    orgMap.put(wrappedGroupId,GroupUtil.getOrganizations(groupId));
    permissionMap.put(wrappedGroupId,GroupUtil.getPermissions(groupId));
    roleMap.put(wrappedGroupId,GroupUtil.getRoles(groupId));
    userMap.put(wrappedGroupId,GroupUtil.getUsers(groupId));
    userGroupMap.put(wrappedGroupId,GroupUtil.getUserGroups(groupId));
    journalArticleMap.put(wrappedGroupId,JournalArticleUtil.findByGroupId(groupId));
    JournalArticleUtil.removeByGroupId(groupId);
    journalContentSearchMap.put(wrappedGroupId,JournalContentSearchUtil.findByGroupId(groupId));
    JournalContentSearchUtil.removeByGroupId(groupId);
    journalStructureMap.put(wrappedGroupId,JournalStructureUtil.findByGroupId(groupId));
    JournalStructureUtil.removeByGroupId(groupId);
    journalTemplateMap.put(wrappedGroupId,JournalTemplateUtil.findByGroupId(groupId));
    JournalTemplateUtil.removeByGroupId(groupId);
    mBStatsUserMap.put(wrappedGroupId,MBStatsUserUtil.findByGroupId(groupId));
    MBStatsUserUtil.removeByGroupId(groupId);
    orgPermissionMap.put(wrappedGroupId,OrgGroupPermissionUtil.findByGroupId(groupId));
    OrgGroupPermissionUtil.removeByGroupId(groupId);
    orgRoleMap.put(wrappedGroupId,OrgGroupRoleUtil.findByGroupId(groupId));
    OrgGroupRoleUtil.removeByGroupId(groupId);
    GroupUtil.remove(groupId);
  }
  Map groupIdMap=new HashMap(groups.size() + 1);
  groupIdMap.put(new Long(-1),new Long(-1));
  itr1=groups.iterator();
  while (itr1.hasNext()) {
    Group group=(Group)itr1.next();
    Long oldGroupId=new Long(group.getGroupId());
    long newGroupId=CounterLocalServiceUtil.increment(Counter.class.getName());
    groupIdMap.put(oldGroupId,new Long(newGroupId));
    Group newGroup=GroupUtil.create(newGroupId);
    newGroup.setCompanyId(group.getCompanyId());
    newGroup.setClassName(group.getClassName());
    newGroup.setClassPK(group.getClassPK());
    newGroup.setParentGroupId(group.getParentGroupId());
    newGroup.setName(group.getName());
    newGroup.setDescription(group.getDescription());
    newGroup.setType(group.getType());
    newGroup.setFriendlyURL(group.getFriendlyURL());
    GroupUtil.update(newGroup);
    GroupUtil.addOrganizations(newGroupId,(List)orgMap.get(oldGroupId));
    GroupUtil.addPermissions(newGroupId,(List)permissionMap.get(oldGroupId));
    GroupUtil.addRoles(newGroupId,(List)roleMap.get(oldGroupId));
    GroupUtil.addUsers(newGroupId,(List)userMap.get(oldGroupId));
    GroupUtil.addUserGroups(newGroupId,(List)userGroupMap.get(oldGroupId));
    Iterator itr2=((List)journalArticleMap.get(oldGroupId)).iterator();
    while (itr2.hasNext()) {
      JournalArticle oldJa=(JournalArticle)itr2.next();
      JournalArticle ja=JournalArticleUtil.create(new JournalArticlePK());
      ja.setCompanyId(oldJa.getCompanyId());
      ja.setGroupId(newGroupId);
      ja.setArticleId(oldJa.getArticleId());
      ja.setVersion(oldJa.getVersion());
      ja.setUserId(oldJa.getUserId());
      ja.setUserName(oldJa.getUserName());
      ja.setCreateDate(oldJa.getCreateDate());
      ja.setModifiedDate(oldJa.getModifiedDate());
      ja.setTitle(oldJa.getTitle());
      ja.setDescription(oldJa.getDescription());
      ja.setContent(oldJa.getContent());
      ja.setType(oldJa.getType());
      ja.setStructureId(oldJa.getStructureId());
      ja.setTemplateId(oldJa.getTemplateId());
      ja.setDisplayDate(oldJa.getDisplayDate());
      ja.setApproved(oldJa.getApproved());
      ja.setApprovedByUserId(oldJa.getApprovedByUserId());
      ja.setApprovedByUserName(oldJa.getApprovedByUserName());
      ja.setApprovedDate(oldJa.getApprovedDate());
      ja.setExpired(oldJa.getExpired());
      ja.setExpirationDate(oldJa.getExpirationDate());
      ja.setReviewDate(oldJa.getReviewDate());
      JournalArticleUtil.update(ja);
    }
    itr2=((List)journalContentSearchMap.get(oldGroupId)).iterator();
    while (itr2.hasNext()) {
      JournalContentSearch oldJcsa=(JournalContentSearch)itr2.next();
      JournalContentSearch jcsa=JournalContentSearchUtil.create(new JournalContentSearchPK());
      jcsa.setPortletId(oldJcsa.getPortletId());
      jcsa.setLayoutId(oldJcsa.getLayoutId());
      jcsa.setOwnerId(oldJcsa.getOwnerId());
      jcsa.setArticleId(oldJcsa.getArticleId());
      jcsa.setCompanyId(oldJcsa.getCompanyId());
      jcsa.setGroupId(newGroupId);
      JournalContentSearchUtil.update(jcsa);
    }
    itr2=((List)journalStructureMap.get(oldGroupId)).iterator();
    while (itr2.hasNext()) {
      JournalStructure oldJs=(JournalStructure)itr2.next();
      JournalStructure js=JournalStructureUtil.create(new JournalStructurePK());
      js.setCompanyId(oldJs.getCompanyId());
      js.setGroupId(newGroupId);
      js.setStructureId(oldJs.getStructureId());
      js.setUserId(oldJs.getUserId());
      js.setUserName(oldJs.getUserName());
      js.setCreateDate(oldJs.getCreateDate());
      js.setModifiedDate(oldJs.getModifiedDate());
      js.setName(oldJs.getName());
      js.setDescription(oldJs.getDescription());
      js.setXsd(oldJs.getXsd());
      JournalStructureUtil.update(js);
    }
    itr2=((List)journalTemplateMap.get(oldGroupId)).iterator();
    while (itr2.hasNext()) {
      JournalTemplate oldJt=(JournalTemplate)itr2.next();
      JournalTemplate jt=JournalTemplateUtil.create(new JournalTemplatePK());
      jt.setCompanyId(oldJt.getCompanyId());
      jt.setGroupId(newGroupId);
      jt.setTemplateId(oldJt.getTemplateId());
      jt.setUserId(oldJt.getUserId());
      jt.setUserName(oldJt.getUserName());
      jt.setCreateDate(oldJt.getCreateDate());
      jt.setModifiedDate(oldJt.getModifiedDate());
      jt.setStructureId(oldJt.getStructureId());
      jt.setName(oldJt.getName());
      jt.setDescription(oldJt.getDescription());
      jt.setXsl(oldJt.getXsl());
      jt.setLangType(oldJt.getLangType());
      jt.setSmallImage(oldJt.getSmallImage());
      jt.setSmallImageURL(oldJt.getSmallImageURL());
      JournalTemplateUtil.update(jt);
    }
    itr2=((List)mBStatsUserMap.get(oldGroupId)).iterator();
    while (itr2.hasNext()) {
      MBStatsUser oldMbsu=(MBStatsUser)itr2.next();
      MBStatsUser mbsu=MBStatsUserUtil.create(new MBStatsUserPK());
      mbsu.setGroupId(newGroupId);
      mbsu.setUserId(oldMbsu.getUserId());
      mbsu.setMessageCount(oldMbsu.getMessageCount());
      mbsu.setLastPostDate(oldMbsu.getLastPostDate());
      MBStatsUserUtil.update(mbsu);
    }
    itr2=((List)orgPermissionMap.get(oldGroupId)).iterator();
    while (itr2.hasNext()) {
      OrgGroupPermission oldOgp=(OrgGroupPermission)itr2.next();
      OrgGroupPermission ogp=OrgGroupPermissionUtil.create(new OrgGroupPermissionPK());
      ogp.setOrganizationId(oldOgp.getOrganizationId());
      ogp.setGroupId(newGroupId);
      ogp.setPermissionId(oldOgp.getPermissionId());
      OrgGroupPermissionUtil.update(ogp);
    }
    itr2=((List)orgRoleMap.get(oldGroupId)).iterator();
    while (itr2.hasNext()) {
      OrgGroupRole oldOgr=(OrgGroupRole)itr2.next();
      OrgGroupRole ogr=OrgGroupRoleUtil.create(new OrgGroupRolePK());
      ogr.setOrganizationId(oldOgr.getOrganizationId());
      ogr.setGroupId(newGroupId);
      ogr.setRoleId(oldOgr.getRoleId());
      OrgGroupRoleUtil.update(ogr);
    }
  }
  itr1=GroupUtil.findAll().iterator();
  while (itr1.hasNext()) {
    Group group=(Group)itr1.next();
    Long pgId=new Long(group.getParentGroupId());
    group.setParentGroupId(((Long)groupIdMap.get(pgId)).longValue());
    GroupUtil.update(group);
  }
  renewGroupIds(groupIdMap,BlogsEntry.class,BlogsEntryUtil.class);
  renewGroupIds(groupIdMap,BookmarksFolder.class,BookmarksFolderUtil.class);
  renewGroupIds(groupIdMap,CalEvent.class,CalEventUtil.class);
  renewGroupIds(groupIdMap,DLFolder.class,DLFolderUtil.class);
  renewGroupIds(groupIdMap,IGFolder.class,IGFolderUtil.class);
  renewGroupIds(groupIdMap,LayoutSet.class,LayoutSetUtil.class);
  renewGroupIds(groupIdMap,MBCategory.class,MBCategoryUtil.class);
  renewGroupIds(groupIdMap,PollsQuestion.class,PollsQuestionUtil.class);
  renewGroupIds(groupIdMap,ShoppingCart.class,ShoppingCartUtil.class);
  renewGroupIds(groupIdMap,ShoppingCategory.class,ShoppingCategoryUtil.class);
  renewGroupIds(groupIdMap,ShoppingCoupon.class,ShoppingCouponUtil.class);
  renewGroupIds(groupIdMap,ShoppingOrder.class,ShoppingOrderUtil.class);
  renewGroupIds(groupIdMap,WikiNode.class,WikiNodeUtil.class);
  return groupIdMap;
}
