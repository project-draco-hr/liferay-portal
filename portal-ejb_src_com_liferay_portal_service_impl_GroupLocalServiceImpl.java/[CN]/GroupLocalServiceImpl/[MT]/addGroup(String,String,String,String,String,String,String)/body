{
  User user=UserUtil.findByPrimaryKey(userId);
  if (Validator.isNull(className) || Validator.isNull(classPK)) {
    validateName(0,user.getActualCompanyId(),name);
  }
  validateFriendlyURL(0,user.getActualCompanyId(),friendlyURL);
  long groupId=CounterLocalServiceUtil.increment(Group.class.getName());
  if (Validator.isNotNull(className) && Validator.isNotNull(classPK)) {
    name=String.valueOf(groupId);
  }
  Group group=GroupUtil.create(groupId);
  group.setCompanyId(user.getActualCompanyId());
  group.setClassName(className);
  group.setClassPK(classPK);
  group.setParentGroupId(GroupImpl.DEFAULT_PARENT_GROUP_ID);
  group.setName(name);
  group.setDescription(description);
  group.setType(type);
  group.setFriendlyURL(friendlyURL);
  GroupUtil.update(group);
  LayoutSetLocalServiceUtil.addLayoutSet(LayoutImpl.PRIVATE + groupId,group.getCompanyId());
  LayoutSetLocalServiceUtil.addLayoutSet(LayoutImpl.PUBLIC + groupId,group.getCompanyId());
  if (Validator.isNull(className) && Validator.isNull(classPK) && !UserImpl.isDefaultUser(userId)) {
    ResourceLocalServiceUtil.addResources(group.getCompanyId(),0,null,Group.class.getName(),group.getPrimaryKey(),false,false,false);
    Role communityAdministratorRole=RoleLocalServiceUtil.getRole(group.getCompanyId(),RoleImpl.COMMUNITY_OWNER);
    UserGroupRoleLocalServiceUtil.addUserGroupRoles(userId,groupId,new String[]{communityAdministratorRole.getRoleId()});
    UserLocalServiceUtil.addGroupUsers(group.getGroupId(),new String[]{userId});
  }
  return group;
}
