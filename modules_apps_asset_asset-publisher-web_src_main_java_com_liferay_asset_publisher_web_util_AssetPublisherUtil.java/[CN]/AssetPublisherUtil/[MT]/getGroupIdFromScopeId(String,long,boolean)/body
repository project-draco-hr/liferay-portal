{
  if (scopeId.startsWith(SCOPE_ID_CHILD_GROUP_PREFIX)) {
    String scopeIdSuffix=scopeId.substring(SCOPE_ID_CHILD_GROUP_PREFIX.length());
    long childGroupId=GetterUtil.getLong(scopeIdSuffix);
    Group childGroup=_groupLocalService.getGroup(childGroupId);
    if (!childGroup.hasAncestor(siteGroupId)) {
      throw new PrincipalException();
    }
    return childGroupId;
  }
 else   if (scopeId.startsWith(SCOPE_ID_GROUP_PREFIX)) {
    String scopeIdSuffix=scopeId.substring(SCOPE_ID_GROUP_PREFIX.length());
    if (scopeIdSuffix.equals(GroupConstants.DEFAULT)) {
      return siteGroupId;
    }
    long scopeGroupId=GetterUtil.getLong(scopeIdSuffix);
    Group scopeGroup=_groupLocalService.getGroup(scopeGroupId);
    return scopeGroup.getGroupId();
  }
 else   if (scopeId.startsWith(SCOPE_ID_LAYOUT_UUID_PREFIX)) {
    String layoutUuid=scopeId.substring(SCOPE_ID_LAYOUT_UUID_PREFIX.length());
    Layout scopeIdLayout=_layoutLocalService.getLayoutByUuidAndGroupId(layoutUuid,siteGroupId,privateLayout);
    Group scopeIdGroup=_layoutLocalService.checkScopeGroup(scopeIdLayout,PrincipalThreadLocal.getUserId());
    return scopeIdGroup.getGroupId();
  }
 else   if (scopeId.startsWith(SCOPE_ID_LAYOUT_PREFIX)) {
    String scopeIdSuffix=scopeId.substring(SCOPE_ID_LAYOUT_PREFIX.length());
    long scopeIdLayoutId=GetterUtil.getLong(scopeIdSuffix);
    Layout scopeIdLayout=_layoutLocalService.getLayout(siteGroupId,privateLayout,scopeIdLayoutId);
    Group scopeIdGroup=scopeIdLayout.getScopeGroup();
    return scopeIdGroup.getGroupId();
  }
 else   if (scopeId.startsWith(SCOPE_ID_PARENT_GROUP_PREFIX)) {
    String scopeIdSuffix=scopeId.substring(SCOPE_ID_PARENT_GROUP_PREFIX.length());
    long parentGroupId=GetterUtil.getLong(scopeIdSuffix);
    Group parentGroup=_groupLocalService.getGroup(parentGroupId);
    if (!SitesUtil.isContentSharingWithChildrenEnabled(parentGroup)) {
      throw new PrincipalException();
    }
    Group group=_groupLocalService.getGroup(siteGroupId);
    if (!group.hasAncestor(parentGroupId)) {
      throw new PrincipalException();
    }
    return parentGroupId;
  }
 else {
    throw new IllegalArgumentException("Invalid scope ID " + scopeId);
  }
}
