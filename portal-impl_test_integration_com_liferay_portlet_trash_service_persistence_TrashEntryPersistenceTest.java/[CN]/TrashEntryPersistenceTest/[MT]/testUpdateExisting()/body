{
  long pk=ServiceTestUtil.nextLong();
  TrashEntry newTrashEntry=_persistence.create(pk);
  newTrashEntry.setGroupId(ServiceTestUtil.nextLong());
  newTrashEntry.setCompanyId(ServiceTestUtil.nextLong());
  newTrashEntry.setClassNameId(ServiceTestUtil.nextLong());
  newTrashEntry.setClassPK(ServiceTestUtil.nextLong());
  newTrashEntry.setStatus(ServiceTestUtil.nextInt());
  newTrashEntry.setTrashedDate(ServiceTestUtil.nextDate());
  newTrashEntry.setTypeSettings(ServiceTestUtil.randomString());
  _persistence.update(newTrashEntry,false);
  TrashEntry existingTrashEntry=_persistence.findByPrimaryKey(newTrashEntry.getPrimaryKey());
  Assert.assertEquals(existingTrashEntry.getEntryId(),newTrashEntry.getEntryId());
  Assert.assertEquals(existingTrashEntry.getGroupId(),newTrashEntry.getGroupId());
  Assert.assertEquals(existingTrashEntry.getCompanyId(),newTrashEntry.getCompanyId());
  Assert.assertEquals(existingTrashEntry.getClassNameId(),newTrashEntry.getClassNameId());
  Assert.assertEquals(existingTrashEntry.getClassPK(),newTrashEntry.getClassPK());
  Assert.assertEquals(existingTrashEntry.getStatus(),newTrashEntry.getStatus());
  Assert.assertEquals(Time.getShortTimestamp(existingTrashEntry.getTrashedDate()),Time.getShortTimestamp(newTrashEntry.getTrashedDate()));
  Assert.assertEquals(existingTrashEntry.getTypeSettings(),newTrashEntry.getTypeSettings());
}
