{
  long groupId=_group.getGroupId();
  Map<Long,Integer> counts=UserFinderUtil.countByGroups(TestPropsValues.getCompanyId(),WorkflowConstants.STATUS_APPROVED,new long[]{groupId});
  Assert.assertEquals(1,counts.size());
  Assert.assertEquals(2,(int)counts.get(groupId));
  GroupLocalServiceUtil.addOrganizationGroup(_organization.getOrganizationId(),groupId);
  counts=UserFinderUtil.countByGroups(TestPropsValues.getCompanyId(),WorkflowConstants.STATUS_APPROVED,new long[]{groupId});
  Assert.assertEquals(1,counts.size());
  Assert.assertEquals(3,(int)counts.get(groupId));
  GroupLocalServiceUtil.addUserGroupGroup(_userGroup.getUserGroupId(),groupId);
  counts=UserFinderUtil.countByGroups(TestPropsValues.getCompanyId(),WorkflowConstants.STATUS_APPROVED,new long[]{groupId});
  Assert.assertEquals(1,counts.size());
  Assert.assertEquals(4,(int)counts.get(groupId));
  long orgGroupId=_organization.getGroupId();
  counts=UserFinderUtil.countByGroups(TestPropsValues.getCompanyId(),WorkflowConstants.STATUS_APPROVED,new long[]{groupId,orgGroupId});
  Assert.assertEquals(2,counts.size());
  Assert.assertEquals(1,(int)counts.get(orgGroupId));
}
