{
  long pk=RandomTestUtil.nextLong();
  DLContent newDLContent=_persistence.create(pk);
  newDLContent.setGroupId(RandomTestUtil.nextLong());
  newDLContent.setCompanyId(RandomTestUtil.nextLong());
  newDLContent.setRepositoryId(RandomTestUtil.nextLong());
  newDLContent.setPath(RandomTestUtil.randomString());
  newDLContent.setVersion(RandomTestUtil.randomString());
  String newDataString=RandomTestUtil.randomString();
  byte[] newDataBytes=newDataString.getBytes(StringPool.UTF8);
  Blob newDataBlob=new OutputBlob(new UnsyncByteArrayInputStream(newDataBytes),newDataBytes.length);
  newDLContent.setData(newDataBlob);
  newDLContent.setSize(RandomTestUtil.nextLong());
  _dlContents.add(_persistence.update(newDLContent));
  DLContent existingDLContent=_persistence.findByPrimaryKey(newDLContent.getPrimaryKey());
  Assert.assertEquals(existingDLContent.getContentId(),newDLContent.getContentId());
  Assert.assertEquals(existingDLContent.getGroupId(),newDLContent.getGroupId());
  Assert.assertEquals(existingDLContent.getCompanyId(),newDLContent.getCompanyId());
  Assert.assertEquals(existingDLContent.getRepositoryId(),newDLContent.getRepositoryId());
  Assert.assertEquals(existingDLContent.getPath(),newDLContent.getPath());
  Assert.assertEquals(existingDLContent.getVersion(),newDLContent.getVersion());
  Blob existingData=existingDLContent.getData();
  Assert.assertTrue(Arrays.equals(existingData.getBytes(1,(int)existingData.length()),newDataBytes));
  Assert.assertEquals(existingDLContent.getSize(),newDLContent.getSize());
}
