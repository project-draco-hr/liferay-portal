{
  List<Map<String,Object>> types=new ArrayList<Map<String,Object>>();
  for (int i=0; i < _types.size(); i++) {
    Class<?> type=_types.get(i);
    Map<String,Object> map=new LinkedHashMap<String,Object>();
    types.add(map);
    Class modelType=type;
    if (type.isInterface()) {
      try {
        Class<?> clazz=getClass();
        ClassLoader classLoader=clazz.getClassLoader();
        String modelImplClassName=type.getName();
        modelImplClassName=StringUtil.replace(modelImplClassName,".model.",".model.impl.");
        modelImplClassName+="ModelImpl";
        modelType=classLoader.loadClass(modelImplClassName);
      }
 catch (      ClassNotFoundException cnfe) {
      }
    }
    if (modelType.isInterface() || Modifier.isAbstract(modelType.getModifiers())) {
      map.put("interface","true");
    }
    List<Map<String,String>> propertiesList=_buildPropertiesList(modelType);
    if (propertiesList != null) {
      map.put("properties",propertiesList);
    }
    map.put("type",type.getName());
  }
  return types;
}
