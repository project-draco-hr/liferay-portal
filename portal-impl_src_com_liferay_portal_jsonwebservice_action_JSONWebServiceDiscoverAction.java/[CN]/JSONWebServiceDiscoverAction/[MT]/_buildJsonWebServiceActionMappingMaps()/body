{
  List<JSONWebServiceActionMapping> jsonWebServiceActionMappings=JSONWebServiceActionsManagerUtil.getJSONWebServiceActionMappings(_contextPath);
  List<Map<String,Object>> jsonWebServiceActionMappingMaps=new ArrayList<Map<String,Object>>(jsonWebServiceActionMappings.size());
  for (  JSONWebServiceActionMapping jsonWebServiceActionMapping : jsonWebServiceActionMappings) {
    String path=jsonWebServiceActionMapping.getPath();
    Map<String,Object> jsonWebServiceActionMappingMap=new LinkedHashMap<String,Object>();
    JavadocMethod javadocMethod=JavadocManagerUtil.lookupJavadocMethod(jsonWebServiceActionMapping.getRealActionMethod());
    if (javadocMethod != null) {
      String methodComment=javadocMethod.getComment();
      if (methodComment != null) {
        jsonWebServiceActionMappingMap.put("description",javadocMethod.getComment());
      }
    }
    Method idMethod=jsonWebServiceActionMapping.getRealActionMethod();
    Class idClass=jsonWebServiceActionMapping.getActionClass();
    String idClassName=_jsonWebServiceNaming.convertServiceClassNameToSimpleName(idClass);
    String id=idClassName.concat(StringPool.POUND).concat(idMethod.getName());
    jsonWebServiceActionMappingMap.put("id",id);
    if (jsonWebServiceActionMapping.isDeprecated()) {
      jsonWebServiceActionMappingMap.put("deprecated",Boolean.TRUE);
    }
    jsonWebServiceActionMappingMap.put("method",jsonWebServiceActionMapping.getMethod());
    MethodParameter[] methodParameters=jsonWebServiceActionMapping.getMethodParameters();
    List<Map<String,String>> parametersList=new ArrayList<Map<String,String>>(methodParameters.length);
    for (int i=0; i < methodParameters.length; i++) {
      MethodParameter methodParameter=methodParameters[i];
      Class<?>[] genericTypes=null;
      try {
        genericTypes=methodParameter.getGenericTypes();
      }
 catch (      ClassNotFoundException cnfe) {
        throw new PortalException(cnfe);
      }
      Map<String,String> parameterMap=new HashMap<String,String>();
      if (javadocMethod != null) {
        String parameterComment=javadocMethod.getParameterComment(i);
        if (!Validator.isBlank(parameterComment)) {
          parameterMap.put("description",parameterComment);
        }
      }
      parameterMap.put("name",methodParameter.getName());
      parameterMap.put("type",_formatType(methodParameter.getType(),genericTypes,false));
      parametersList.add(parameterMap);
    }
    jsonWebServiceActionMappingMap.put("parameters",parametersList);
    jsonWebServiceActionMappingMap.put("path",path);
    Map<String,String> returnsMap=new LinkedHashMap<String,String>();
    if (javadocMethod != null) {
      String returnComment=javadocMethod.getReturnComment();
      if (!Validator.isBlank(returnComment)) {
        returnsMap.put("description",returnComment);
      }
    }
    Method actionMethod=jsonWebServiceActionMapping.getActionMethod();
    returnsMap.put("type",_formatType(actionMethod.getReturnType(),_getGenericReturnTypes(jsonWebServiceActionMapping),true));
    jsonWebServiceActionMappingMap.put("returns",returnsMap);
    jsonWebServiceActionMappingMaps.add(jsonWebServiceActionMappingMap);
  }
  return jsonWebServiceActionMappingMaps;
}
