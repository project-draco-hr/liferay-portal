{
  List<JSONWebServiceActionMapping> jsonWebServiceActionMappings=JSONWebServiceActionsManagerUtil.getJSONWebServiceActionMappings(_contextPath);
  List<Map<String,Object>> jsonWebServiceActionMappingMaps=new ArrayList<Map<String,Object>>(jsonWebServiceActionMappings.size());
  for (  JSONWebServiceActionMapping jsonWebServiceActionMapping : jsonWebServiceActionMappings) {
    String path=jsonWebServiceActionMapping.getPath();
    if (!_isAcceptPath(path)) {
      continue;
    }
    Map<String,Object> jsonWebServiceActionMappingMap=new LinkedHashMap<String,Object>();
    jsonWebServiceActionMappingMap.put("method",jsonWebServiceActionMapping.getMethod());
    JavadocMethod javadocMethod=JavadocManagerUtil.lookupJavadocMethod(jsonWebServiceActionMapping.getRealActionMethod());
    if (javadocMethod != null) {
      String methodComment=javadocMethod.getComment();
      if (methodComment != null) {
        jsonWebServiceActionMappingMap.put("description",javadocMethod.getComment());
      }
    }
    MethodParameter[] methodParameters=jsonWebServiceActionMapping.getMethodParameters();
    List<Map<String,String>> parametersList=new ArrayList<Map<String,String>>(methodParameters.length);
    for (    MethodParameter methodParameter : methodParameters) {
      Class<?>[] genericTypes=null;
      try {
        genericTypes=methodParameter.getGenericTypes();
      }
 catch (      ClassNotFoundException cnfe) {
        throw new PortalException(cnfe);
      }
      Map<String,String> parameterMap=new HashMap<String,String>();
      parameterMap.put("name",methodParameter.getName());
      parameterMap.put("type",_formatType(methodParameter.getType(),genericTypes));
      parametersList.add(parameterMap);
    }
    jsonWebServiceActionMappingMap.put("parameters",parametersList);
    jsonWebServiceActionMappingMap.put("path",path);
    Method actionMethod=jsonWebServiceActionMapping.getActionMethod();
    Map<String,String> returnsMap=new LinkedHashMap<String,String>();
    Class<?> realActionClass=jsonWebServiceActionMapping.getActionClass();
    Method realActionMethod=jsonWebServiceActionMapping.getRealActionMethod();
    Class[] genericReturnTypes=null;
    Type genericReturnType=realActionMethod.getGenericReturnType();
    if (genericReturnType instanceof ParameterizedType) {
      ParameterizedType parameterizedType=(ParameterizedType)genericReturnType;
      Type[] generics=parameterizedType.getActualTypeArguments();
      genericReturnTypes=new Class[generics.length];
      for (int i=0; i < generics.length; i++) {
        Type generic=generics[i];
        genericReturnTypes[i]=ReflectUtil.getRawType(generic,realActionClass);
      }
    }
    returnsMap.put("type",_formatType(actionMethod.getReturnType(),genericReturnTypes));
    jsonWebServiceActionMappingMap.put("returns",returnsMap);
    jsonWebServiceActionMappingMaps.add(jsonWebServiceActionMappingMap);
  }
  return jsonWebServiceActionMappingMaps;
}
