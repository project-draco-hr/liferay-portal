{
  try {
    List<String> arguments=processConfig.getArguments();
    List<String> commands=new ArrayList<String>(arguments.size() + 4);
    commands.add(processConfig.getJavaExecutable());
    commands.add("-cp");
    commands.add(processConfig.getBootstrapClassPath());
    commands.addAll(arguments);
    commands.add(LocalProcessLauncher.class.getName());
    ProcessBuilder processBuilder=new ProcessBuilder(commands);
    final Process process=processBuilder.start();
    ObjectOutputStream bootstrapObjectOutputStream=new ObjectOutputStream(process.getOutputStream());
    bootstrapObjectOutputStream.writeObject(processCallable.toString());
    bootstrapObjectOutputStream.writeObject(processConfig.getRuntimeClassPath());
    ObjectOutputStream objectOutputStream=new ObjectOutputStream(bootstrapObjectOutputStream);
    try {
      objectOutputStream.writeObject(processCallable);
    }
  finally {
      objectOutputStream.close();
    }
    ThreadPoolExecutor threadPoolExecutor=_getThreadPoolExecutor();
    SubprocessReactor subprocessReactor=new SubprocessReactor(process);
    try {
      NoticeableFuture<ProcessCallable<? extends Serializable>> processCallableNoticeableFuture=threadPoolExecutor.submit(subprocessReactor);
      processCallableNoticeableFuture.addFutureListener(new FutureListener<ProcessCallable<? extends Serializable>>(){
        @Override public void complete(        Future<ProcessCallable<? extends Serializable>> future){
          if (future.isCancelled()) {
            process.destroy();
          }
        }
      }
);
      _managedProcesses.add(process);
      return new NoticeableFutureConverter<T,ProcessCallable<? extends Serializable>>(processCallableNoticeableFuture){
        @Override protected T convert(        ProcessCallable<? extends Serializable> processCallable) throws ProcessException {
          if (processCallable instanceof ReturnProcessCallable<?>) {
            return (T)processCallable.call();
          }
          ExceptionProcessCallable exceptionProcessCallable=(ExceptionProcessCallable)processCallable;
          throw exceptionProcessCallable.call();
        }
      }
;
    }
 catch (    RejectedExecutionException ree) {
      process.destroy();
      throw new ProcessException("Cancelled execution because of a concurrent destroy",ree);
    }
  }
 catch (  IOException ioe) {
    throw new ProcessException(ioe);
  }
}
