{
  long pk=nextLong();
  Repository newRepository=_persistence.create(pk);
  newRepository.setCompanyId(nextLong());
  newRepository.setCreateDate(nextDate());
  newRepository.setModifiedDate(nextDate());
  newRepository.setGroupId(nextLong());
  newRepository.setName(randomString());
  newRepository.setDescription(randomString());
  newRepository.setPortletKey(randomString());
  newRepository.setMappedFolderId(nextLong());
  newRepository.setType(nextInt());
  newRepository.setTypeSettings(randomString());
  _persistence.update(newRepository,false);
  Repository existingRepository=_persistence.findByPrimaryKey(newRepository.getPrimaryKey());
  assertEquals(existingRepository.getRepositoryId(),newRepository.getRepositoryId());
  assertEquals(existingRepository.getCompanyId(),newRepository.getCompanyId());
  assertEquals(Time.getShortTimestamp(existingRepository.getCreateDate()),Time.getShortTimestamp(newRepository.getCreateDate()));
  assertEquals(Time.getShortTimestamp(existingRepository.getModifiedDate()),Time.getShortTimestamp(newRepository.getModifiedDate()));
  assertEquals(existingRepository.getGroupId(),newRepository.getGroupId());
  assertEquals(existingRepository.getName(),newRepository.getName());
  assertEquals(existingRepository.getDescription(),newRepository.getDescription());
  assertEquals(existingRepository.getPortletKey(),newRepository.getPortletKey());
  assertEquals(existingRepository.getMappedFolderId(),newRepository.getMappedFolderId());
  assertEquals(existingRepository.getType(),newRepository.getType());
  assertEquals(existingRepository.getTypeSettings(),newRepository.getTypeSettings());
}
