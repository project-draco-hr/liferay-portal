{
  userId=userId.trim().toLowerCase();
  emailAddress=emailAddress.trim().toLowerCase();
  Date now=new Date();
  boolean alwaysAutoUserId=GetterUtil.getBoolean(PropsUtil.get(PropsUtil.USERS_ID_ALWAYS_AUTOGENERATE));
  if (alwaysAutoUserId) {
    autoUserId=true;
  }
  validate(companyId,autoUserId,userId,autoPassword,password1,password2,emailAddress,firstName,lastName,organizationId,locationId);
  validateOrganizations(companyId,organizationId,locationId);
  if (autoUserId) {
    UserIdGenerator userIdGenerator=(UserIdGenerator)InstancePool.get(PropsUtil.get(PropsUtil.USERS_ID_GENERATOR));
    try {
      userId=userIdGenerator.generate(companyId);
    }
 catch (    Exception e) {
      throw new SystemException(e);
    }
  }
  if (autoPassword) {
    password1=PwdToolkitUtil.generate();
  }
  int passwordsLifespan=GetterUtil.getInteger(PropsUtil.get(PropsUtil.PASSWORDS_LIFESPAN));
  Date expirationDate=null;
  if (passwordsLifespan > 0) {
    expirationDate=new Date(System.currentTimeMillis() + Time.DAY * passwordsLifespan);
  }
  User defaultUser=getDefaultUser(companyId);
  String fullName=UserImpl.getFullName(firstName,middleName,lastName);
  String greeting=null;
  try {
    greeting=LanguageUtil.get(companyId,locale,"welcome") + ", " + fullName+ "!";
  }
 catch (  LanguageException le) {
    greeting="Welcome, " + fullName + "!";
  }
  User user=UserUtil.create(userId);
  user.setCompanyId(companyId);
  user.setCreateDate(now);
  user.setModifiedDate(now);
  user.setPassword(PwdEncryptor.encrypt(password1));
  user.setPasswordUnencrypted(password1);
  user.setPasswordEncrypted(true);
  user.setPasswordExpirationDate(expirationDate);
  user.setPasswordReset(passwordReset);
  user.setEmailAddress(emailAddress);
  user.setLanguageId(locale.toString());
  user.setTimeZoneId(defaultUser.getTimeZoneId());
  user.setGreeting(greeting);
  user.setResolution(defaultUser.getResolution());
  user.setActive(true);
  UserUtil.update(user);
  String creatorUserName=StringPool.BLANK;
  if (Validator.isNull(creatorUserId)) {
    creatorUserId=user.getUserId();
  }
 else {
    User creatorUser=UserUtil.findByPrimaryKey(creatorUserId);
    creatorUserName=creatorUser.getFullName();
  }
  ResourceLocalServiceUtil.addResources(companyId,null,creatorUserId,User.class.getName(),user.getPrimaryKey().toString(),false,false,false);
  if (user.hasCompanyMx()) {
    try {
      MailServiceUtil.addUser(userId,password1,firstName,middleName,lastName,emailAddress);
    }
 catch (    RemoteException re) {
      throw new SystemException(re);
    }
  }
  Date birthday=PortalUtil.getDate(birthdayMonth,birthdayDay,birthdayYear,new ContactBirthdayException());
  String contactId=userId;
  Contact contact=ContactUtil.create(contactId);
  contact.setCompanyId(user.getCompanyId());
  contact.setUserId(creatorUserId);
  contact.setUserName(creatorUserName);
  contact.setCreateDate(now);
  contact.setModifiedDate(now);
  contact.setAccountId(user.getCompanyId());
  contact.setParentContactId(ContactImpl.DEFAULT_PARENT_CONTACT_ID);
  contact.setFirstName(firstName);
  contact.setMiddleName(middleName);
  contact.setLastName(lastName);
  contact.setNickName(nickName);
  contact.setPrefixId(prefixId);
  contact.setSuffixId(suffixId);
  contact.setMale(male);
  contact.setBirthday(birthday);
  contact.setJobTitle(jobTitle);
  ContactUtil.update(contact);
  UserUtil.clearOrganizations(userId);
  if (Validator.isNotNull(organizationId)) {
    UserUtil.addOrganization(userId,organizationId);
  }
  if (Validator.isNotNull(locationId)) {
    UserUtil.addOrganization(userId,locationId);
  }
  GroupLocalServiceUtil.addGroup(user.getUserId(),User.class.getName(),user.getPrimaryKey().toString(),null,null,null,null);
  List groups=new ArrayList();
  String[] defaultGroupNames=PrefsPropsUtil.getStringArray(companyId,PropsUtil.ADMIN_DEFAULT_GROUP_NAMES);
  for (int i=0; i < defaultGroupNames.length; i++) {
    try {
      Group group=GroupFinder.findByC_N(companyId,defaultGroupNames[i]);
      groups.add(group);
    }
 catch (    NoSuchGroupException nsge) {
    }
  }
  UserUtil.setGroups(userId,groups);
  List roles=new ArrayList();
  String[] defaultRoleNames=PrefsPropsUtil.getStringArray(companyId,PropsUtil.ADMIN_DEFAULT_ROLE_NAMES);
  for (int i=0; i < defaultRoleNames.length; i++) {
    try {
      Role role=RoleFinder.findByC_N(companyId,defaultRoleNames[i]);
      roles.add(role);
    }
 catch (    NoSuchRoleException nsge) {
    }
  }
  UserUtil.setRoles(userId,roles);
  List userGroups=new ArrayList();
  String[] defaultUserGroupNames=PrefsPropsUtil.getStringArray(companyId,PropsUtil.ADMIN_DEFAULT_USER_GROUP_NAMES);
  for (int i=0; i < defaultUserGroupNames.length; i++) {
    try {
      UserGroup userGroup=UserGroupFinder.findByC_N(companyId,defaultUserGroupNames[i]);
      userGroups.add(userGroup);
    }
 catch (    NoSuchUserGroupException nsuge) {
    }
  }
  UserUtil.setUserGroups(userId,userGroups);
  if (sendEmail) {
    sendEmail(user,password1);
  }
  return user;
}
