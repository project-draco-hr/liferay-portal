{
  login=login.trim().toLowerCase();
  if (byEmailAddress) {
    if (!Validator.isEmailAddress(login)) {
      throw new UserEmailAddressException();
    }
  }
 else {
    if (Validator.isNull(login)) {
      throw new UserIdException();
    }
  }
  if (Validator.isNull(password)) {
    throw new UserPasswordException(UserPasswordException.PASSWORD_INVALID);
  }
  int authResult=Authenticator.FAILURE;
  if (byEmailAddress) {
    authResult=AuthPipeline.authenticateByEmailAddress(PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE),companyId,login,password,parameterMap);
  }
 else {
    authResult=AuthPipeline.authenticateByUserId(PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE),companyId,login,password,parameterMap);
  }
  User user=null;
  try {
    if (byEmailAddress) {
      user=UserUtil.findByC_EA(companyId,login);
    }
 else {
      user=UserUtil.findByC_U(companyId,login);
    }
  }
 catch (  NoSuchUserException nsue) {
    return Authenticator.DNE;
  }
  if (!user.isPasswordEncrypted()) {
    user.setPassword(PwdEncryptor.encrypt(user.getPassword()));
    user.setPasswordEncrypted(true);
    user.setPasswordReset(GetterUtil.getBoolean(PropsUtil.get(PropsUtil.PASSWORDS_CHANGE_ON_FIRST_USE)));
    UserUtil.update(user);
  }
 else   if (user.isPasswordExpired()) {
    user.setPasswordReset(true);
    UserUtil.update(user);
  }
  if (authResult == Authenticator.SUCCESS) {
    if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_PIPELINE_ENABLE_LIFERAY_CHECK))) {
      String encPwd=PwdEncryptor.encrypt(password);
      if (user.getPassword().equals(encPwd)) {
        authResult=Authenticator.SUCCESS;
      }
 else       if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_MAC_ALLOW))) {
        try {
          MessageDigest digester=MessageDigest.getInstance(PropsUtil.get(PropsUtil.AUTH_MAC_ALGORITHM));
          digester.update(login.getBytes("UTF8"));
          String shardKey=PropsUtil.get(PropsUtil.AUTH_MAC_SHARED_KEY);
          encPwd=Base64.encode(digester.digest(shardKey.getBytes("UTF8")));
          if (password.equals(encPwd)) {
            authResult=Authenticator.SUCCESS;
          }
 else {
            authResult=Authenticator.FAILURE;
          }
        }
 catch (        NoSuchAlgorithmException nsae) {
          throw new SystemException(nsae);
        }
catch (        UnsupportedEncodingException uee) {
          throw new SystemException(uee);
        }
      }
 else {
        authResult=Authenticator.FAILURE;
      }
    }
  }
  if (authResult == Authenticator.SUCCESS) {
    if (byEmailAddress) {
      authResult=AuthPipeline.authenticateByEmailAddress(PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST),companyId,login,password,parameterMap);
    }
 else {
      authResult=AuthPipeline.authenticateByUserId(PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST),companyId,login,password,parameterMap);
    }
  }
  if (authResult == Authenticator.FAILURE) {
    try {
      if (byEmailAddress) {
        AuthPipeline.onFailureByEmailAddress(PropsUtil.getArray(PropsUtil.AUTH_FAILURE),companyId,login,parameterMap);
      }
 else {
        AuthPipeline.onFailureByUserId(PropsUtil.getArray(PropsUtil.AUTH_FAILURE),companyId,login,parameterMap);
      }
      int failedLoginAttempts=user.getFailedLoginAttempts();
      user.setFailedLoginAttempts(++failedLoginAttempts);
      UserUtil.update(user);
      int maxFailures=GetterUtil.getInteger(PropsUtil.get(PropsUtil.AUTH_MAX_FAILURES_LIMIT));
      if ((failedLoginAttempts >= maxFailures) && (maxFailures != 0)) {
        if (byEmailAddress) {
          AuthPipeline.onMaxFailuresByEmailAddress(PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES),companyId,login,parameterMap);
        }
 else {
          AuthPipeline.onMaxFailuresByUserId(PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES),companyId,login,parameterMap);
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return authResult;
}
