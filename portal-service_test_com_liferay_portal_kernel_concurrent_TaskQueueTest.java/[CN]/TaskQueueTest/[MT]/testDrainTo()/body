{
  TaskQueue taskQueue=new TaskQueue();
  try {
    taskQueue.drainTo(null);
    fail();
  }
 catch (  NullPointerException npe) {
  }
  Object object1=new Object();
  Object object2=new Object();
  Object object3=new Object();
  Object object4=new Object();
  taskQueue=new TaskQueue();
  assertTrue(taskQueue.offer(object1,new boolean[1]));
  assertTrue(taskQueue.offer(object2,new boolean[1]));
  assertTrue(taskQueue.offer(object3,new boolean[1]));
  assertTrue(taskQueue.offer(object4,new boolean[1]));
  Set<Object> set=new HashSet<Object>();
  taskQueue.drainTo(set);
  assertEquals(4,set.size());
  assertTrue(set.contains(object1));
  assertTrue(set.contains(object2));
  assertTrue(set.contains(object3));
  assertTrue(set.contains(object4));
  object1=new Object();
  object2=new Object();
  object3=new Object();
  object4=new Object();
  taskQueue=new TaskQueue();
  assertTrue(taskQueue.offer(object1,new boolean[1]));
  assertTrue(taskQueue.offer(object2,new boolean[1]));
  assertTrue(taskQueue.offer(object3,new boolean[1]));
  assertTrue(taskQueue.offer(object4,new boolean[1]));
  List<Object> list=new ArrayList<Object>(){
    public boolean add(    Object e){
      if (size() >= 2) {
        throw new IllegalStateException();
      }
      return super.add(e);
    }
  }
;
  try {
    taskQueue.drainTo(list);
    fail();
  }
 catch (  IllegalStateException ise) {
  }
  assertEquals(2,list.size());
  assertSame(object1,list.get(0));
  assertSame(object2,list.get(1));
  assertEquals(2,taskQueue.size());
  assertSame(object3,taskQueue.poll());
  assertSame(object4,taskQueue.poll());
}
