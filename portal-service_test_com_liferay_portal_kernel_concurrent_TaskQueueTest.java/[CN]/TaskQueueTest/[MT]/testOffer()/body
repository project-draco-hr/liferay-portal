{
  TaskQueue taskQueue=new TaskQueue(10);
  try {
    taskQueue.offer(null,new boolean[1]);
    fail();
  }
 catch (  NullPointerException npe) {
  }
  taskQueue=new TaskQueue(10);
  try {
    taskQueue.offer(new Object(),null);
    fail();
  }
 catch (  NullPointerException npe) {
  }
  taskQueue=new TaskQueue(10);
  try {
    taskQueue.offer(new Object(),new boolean[0]);
    fail();
  }
 catch (  IllegalArgumentException npe) {
  }
  taskQueue=new TaskQueue(10);
  boolean[] hasWaiterMarker=new boolean[1];
  boolean result=taskQueue.offer(new Object(),hasWaiterMarker);
  assertTrue(result);
  assertFalse(hasWaiterMarker[0]);
  final TaskQueue taskQueue2=new TaskQueue(10);
  hasWaiterMarker=new boolean[1];
  new Thread(){
    public void run(){
      try {
        taskQueue2.take();
      }
 catch (      InterruptedException ex) {
        fail();
      }
    }
  }
.start();
  Thread.sleep(100);
  result=taskQueue2.offer(new Object(),hasWaiterMarker);
  assertTrue(result);
  assertTrue(hasWaiterMarker[0]);
  final TaskQueue taskQueue3=new TaskQueue(10);
  new Thread(){
    public void run(){
      try {
        ReentrantLock takeLock=taskQueue3.getTakeLock();
        takeLock.lock();
        try {
          while (!takeLock.hasQueuedThreads()) {
            Thread.sleep(1);
          }
          assertNotNull(taskQueue3.take());
        }
  finally {
          takeLock.unlock();
        }
      }
 catch (      InterruptedException ie) {
        fail();
      }
    }
  }
.start();
  hasWaiterMarker=new boolean[1];
  Thread.sleep(100);
  result=taskQueue3.offer(new Object(),hasWaiterMarker);
  assertTrue(result);
  assertTrue(hasWaiterMarker[0]);
  taskQueue=new TaskQueue(1);
  result=taskQueue.offer(new Object(),hasWaiterMarker);
  assertTrue(result);
  assertFalse(hasWaiterMarker[0]);
  result=taskQueue.offer(new Object(),hasWaiterMarker);
  assertFalse(result);
  assertFalse(hasWaiterMarker[0]);
}
