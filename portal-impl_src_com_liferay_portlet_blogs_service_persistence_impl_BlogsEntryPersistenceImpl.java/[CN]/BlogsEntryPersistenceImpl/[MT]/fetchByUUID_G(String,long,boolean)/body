{
  Object[] finderArgs=new Object[]{uuid,groupId};
  Object result=null;
  if (retrieveFromCache) {
    result=finderCache.getResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,this);
  }
  if (result instanceof BlogsEntry) {
    BlogsEntry blogsEntry=(BlogsEntry)result;
    if (!Validator.equals(uuid,blogsEntry.getUuid()) || (groupId != blogsEntry.getGroupId())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_BLOGSENTRY_WHERE);
    boolean bindUuid=false;
    if (uuid == null) {
      query.append(_FINDER_COLUMN_UUID_G_UUID_1);
    }
 else     if (uuid.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_UUID_G_UUID_3);
    }
 else {
      bindUuid=true;
      query.append(_FINDER_COLUMN_UUID_G_UUID_2);
    }
    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (bindUuid) {
        qPos.add(uuid);
      }
      qPos.add(groupId);
      List<BlogsEntry> list=q.list();
      if (list.isEmpty()) {
        finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,list);
      }
 else {
        BlogsEntry blogsEntry=list.get(0);
        result=blogsEntry;
        cacheResult(blogsEntry);
        if ((blogsEntry.getUuid() == null) || !blogsEntry.getUuid().equals(uuid) || (blogsEntry.getGroupId() != groupId)) {
          finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,blogsEntry);
        }
      }
    }
 catch (    Exception e) {
      finderCache.removeResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  if (result instanceof List<?>) {
    return null;
  }
 else {
    return (BlogsEntry)result;
  }
}
