{
  try {
    File[] files=FileUtil.sortFiles(new File(baseDir).listFiles());
    for (int i=0; i < files.length; i++) {
      File srcFile=files[i];
      boolean deploy=false;
      if (srcFile.getName().endsWith(".war")) {
        deploy=true;
        if ((wars.size() > 0) && (!wars.contains(srcFile.getName()))) {
          deploy=false;
        }
      }
      if (deploy) {
        PluginPackage pluginPackage=_readPluginPackage(srcFile);
        System.out.println("\nDeploying " + srcFile.getName());
        String deployDir=null;
        String displayName=null;
        boolean overwrite=false;
        String preliminaryContext=null;
        if (srcFile.getName().startsWith(Constants.DEPLOY_TO_PREFIX)) {
          displayName=srcFile.getName().substring(Constants.DEPLOY_TO_PREFIX.length(),srcFile.getName().length() - 4);
          preliminaryContext=displayName;
          overwrite=true;
        }
        if (preliminaryContext == null) {
          preliminaryContext=getDisplayName(srcFile);
        }
        if (pluginPackage != null) {
          if (!PluginPackageUtil.isCurrentVersionSupported(pluginPackage.getLiferayVersions())) {
            throw new AutoDeployException(srcFile.getName() + " does not support this " + "version of Liferay");
          }
          if (displayName == null) {
            displayName=pluginPackage.getRecommendedDeploymentContext();
          }
          if (Validator.isNull(displayName)) {
            displayName=getDisplayName(srcFile);
          }
          pluginPackage.setContext(displayName);
          PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext,pluginPackage);
        }
        if (Validator.isNotNull(displayName)) {
          deployDir=displayName + ".war";
        }
 else {
          deployDir=srcFile.getName();
          displayName=getDisplayName(srcFile);
        }
        if (appServerType.equals("jetty") || appServerType.equals("oc4j") || appServerType.equals("orion")|| appServerType.equals("resin")|| appServerType.equals("tomcat")) {
          if (unpackWar) {
            deployDir=deployDir.substring(0,deployDir.length() - 4);
          }
        }
        deployDir=destDir + "/" + deployDir;
        try {
          PluginPackage previousPluginPackage=_readPluginPackage(new File(deployDir));
          if (previousPluginPackage != null) {
            System.out.println("Updating " + pluginPackage.getName() + " from "+ "version "+ previousPluginPackage.getVersion()+ " to version "+ pluginPackage.getVersion());
            if (pluginPackage.isLaterVersionThan(previousPluginPackage)) {
              overwrite=true;
            }
          }
          if (srcFile.isDirectory()) {
            deployDirectory(srcFile,new File(deployDir),displayName,overwrite);
          }
 else {
            boolean deployed=deployFile(srcFile,new File(deployDir),displayName,overwrite);
            if (!deployed) {
              PluginPackageUtil.endPluginPackageInstallation(pluginPackage.getContext());
            }
          }
        }
 catch (        Exception e) {
          if (pluginPackage != null) {
            PluginPackageUtil.endPluginPackageInstallation(pluginPackage.getContext());
          }
          throw e;
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
