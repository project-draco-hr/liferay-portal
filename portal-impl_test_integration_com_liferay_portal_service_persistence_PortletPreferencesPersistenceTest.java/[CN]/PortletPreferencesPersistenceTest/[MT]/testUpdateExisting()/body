{
  long pk=RandomTestUtil.nextLong();
  PortletPreferences newPortletPreferences=_persistence.create(pk);
  newPortletPreferences.setMvccVersion(RandomTestUtil.nextLong());
  newPortletPreferences.setOwnerId(RandomTestUtil.nextLong());
  newPortletPreferences.setOwnerType(RandomTestUtil.nextInt());
  newPortletPreferences.setPlid(RandomTestUtil.nextLong());
  newPortletPreferences.setPortletId(RandomTestUtil.randomString());
  newPortletPreferences.setPreferences(RandomTestUtil.randomString());
  _persistence.update(newPortletPreferences);
  PortletPreferences existingPortletPreferences=_persistence.findByPrimaryKey(newPortletPreferences.getPrimaryKey());
  Assert.assertEquals(existingPortletPreferences.getMvccVersion(),newPortletPreferences.getMvccVersion());
  Assert.assertEquals(existingPortletPreferences.getPortletPreferencesId(),newPortletPreferences.getPortletPreferencesId());
  Assert.assertEquals(existingPortletPreferences.getOwnerId(),newPortletPreferences.getOwnerId());
  Assert.assertEquals(existingPortletPreferences.getOwnerType(),newPortletPreferences.getOwnerType());
  Assert.assertEquals(existingPortletPreferences.getPlid(),newPortletPreferences.getPlid());
  Assert.assertEquals(existingPortletPreferences.getPortletId(),newPortletPreferences.getPortletId());
  Assert.assertEquals(existingPortletPreferences.getPreferences(),newPortletPreferences.getPreferences());
}
