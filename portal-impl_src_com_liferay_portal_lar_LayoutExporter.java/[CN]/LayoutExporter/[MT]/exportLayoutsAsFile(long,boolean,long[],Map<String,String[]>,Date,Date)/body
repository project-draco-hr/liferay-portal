{
  boolean exportCategories=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.CATEGORIES);
  boolean exportPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PERMISSIONS);
  boolean exportUserPermissions=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.USER_PERMISSIONS);
  boolean exportPortletArchivedSetups=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS);
  boolean exportPortletUserPreferences=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.PORTLET_USER_PREFERENCES);
  boolean exportTheme=MapUtil.getBoolean(parameterMap,PortletDataHandlerKeys.THEME);
  if (_log.isDebugEnabled()) {
    _log.debug("Export categories " + exportCategories);
    _log.debug("Export permissions " + exportPermissions);
    _log.debug("Export user permissions " + exportUserPermissions);
    _log.debug("Export portlet archived setups " + exportPortletArchivedSetups);
    _log.debug("Export portlet user preferences " + exportPortletUserPreferences);
    _log.debug("Export theme " + exportTheme);
  }
  long lastPublishDate=System.currentTimeMillis();
  if (endDate != null) {
    lastPublishDate=endDate.getTime();
  }
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  LayoutCache layoutCache=new LayoutCache();
  LayoutSet layoutSet=LayoutSetLocalServiceUtil.getLayoutSet(groupId,privateLayout);
  long companyId=layoutSet.getCompanyId();
  long defaultUserId=UserLocalServiceUtil.getDefaultUserId(companyId);
  ZipWriter zipWriter=ZipWriterFactoryUtil.getZipWriter();
  PortletDataContext context=new PortletDataContextImpl(companyId,groupId,parameterMap,new HashSet<String>(),startDate,endDate,zipWriter);
  context.setPortetDataContextListener(new PortletDataContextListenerImpl(context));
  Document doc=SAXReaderUtil.createDocument();
  Element root=doc.addElement("root");
  Element header=root.addElement("header");
  header.addAttribute("build-number",String.valueOf(ReleaseInfo.getBuildNumber()));
  header.addAttribute("export-date",Time.getRFC822());
  if (context.hasDateRange()) {
    header.addAttribute("start-date",String.valueOf(context.getStartDate()));
    header.addAttribute("end-date",String.valueOf(context.getEndDate()));
  }
  header.addAttribute("type","layout-set");
  header.addAttribute("group-id",String.valueOf(groupId));
  header.addAttribute("private-layout",String.valueOf(privateLayout));
  header.addAttribute("theme-id",layoutSet.getThemeId());
  header.addAttribute("color-scheme-id",layoutSet.getColorSchemeId());
  Portlet layoutConfigurationPortlet=PortletLocalServiceUtil.getPortletById(context.getCompanyId(),PortletKeys.LAYOUT_CONFIGURATION);
  Map<String,Object[]> portletIds=new LinkedHashMap<String,Object[]>();
  List<Layout> layouts=null;
  if ((layoutIds == null) || (layoutIds.length == 0)) {
    layouts=LayoutLocalServiceUtil.getLayouts(groupId,privateLayout);
  }
 else {
    layouts=LayoutLocalServiceUtil.getLayouts(groupId,privateLayout,layoutIds);
  }
  Layout firstLayout=layouts.get(0);
  List<Portlet> portlets=getAlwaysExportablePortlets(context.getCompanyId());
  for (  Portlet portlet : portlets) {
    String portletId=portlet.getRootPortletId();
    if (portlet.isScopeable() && firstLayout.hasScopeGroup()) {
      String key=PortletPermissionUtil.getPrimaryKey(firstLayout.getPlid(),portletId);
      portletIds.put(key,new Object[]{portletId,firstLayout.getPlid(),firstLayout.getScopeGroup().getGroupId(),firstLayout.getLayoutId()});
    }
 else {
      String key=PortletPermissionUtil.getPrimaryKey(0,portletId);
      if (portletIds.get(key) == null) {
        portletIds.put(key,new Object[]{portletId,firstLayout.getPlid(),groupId,0L});
      }
    }
  }
  Element layoutsEl=root.addElement("layouts");
  for (  Layout layout : layouts) {
    exportLayout(context,layoutConfigurationPortlet,layoutCache,portletIds,exportPermissions,exportUserPermissions,layout,layoutsEl);
  }
  if (PropsValues.PERMISSIONS_USER_CHECK_ALGORITHM < 5) {
    Element rolesEl=root.addElement("roles");
    if (exportPermissions) {
      _permissionExporter.exportLayoutRoles(layoutCache,companyId,groupId,rolesEl);
    }
  }
  long previousScopeGroupId=context.getScopeGroupId();
  Element portletsEl=root.addElement("portlets");
  for (  Map.Entry<String,Object[]> portletIdsEntry : portletIds.entrySet()) {
    String portletId=(String)portletIdsEntry.getValue()[0];
    long plid=(Long)portletIdsEntry.getValue()[1];
    long scopeGroupId=(Long)portletIdsEntry.getValue()[2];
    long scopeLayoutId=(Long)portletIdsEntry.getValue()[3];
    Layout layout=LayoutUtil.findByPrimaryKey(plid);
    context.setPlid(layout.getPlid());
    context.setOldPlid(layout.getPlid());
    context.setScopeGroupId(scopeGroupId);
    context.setScopeLayoutId(scopeLayoutId);
    boolean[] exportPortletControls=getExportPortletControls(context.getCompanyId(),portletId,context,parameterMap);
    _portletExporter.exportPortlet(context,layoutCache,portletId,layout,portletsEl,defaultUserId,exportPermissions,exportPortletArchivedSetups,exportPortletControls[0],exportPortletControls[1],exportPortletUserPreferences,exportUserPermissions);
  }
  context.setScopeGroupId(previousScopeGroupId);
  if (exportCategories) {
    exportCategories(context);
  }
  _portletExporter.exportComments(context,root);
  _portletExporter.exportLocks(context,root);
  if (exportPermissions) {
    _permissionExporter.exportPortletDataPermissions(context);
  }
  _portletExporter.exportRatings(context,root);
  _portletExporter.exportTags(context,root);
  try {
    if (exportTheme) {
      exportTheme(layoutSet,zipWriter);
    }
    if (_log.isInfoEnabled()) {
      if (stopWatch != null) {
        _log.info("Exporting layouts takes " + stopWatch.getTime() + " ms");
      }
 else {
        _log.info("Exporting layouts is finished");
      }
    }
    context.addZipEntry("/manifest.xml",doc.formattedString());
  }
 catch (  IOException ioe) {
    throw new SystemException(ioe);
  }
  try {
    return zipWriter.getFile();
  }
  finally {
    UnicodeProperties settingsProperties=layoutSet.getSettingsProperties();
    settingsProperties.setProperty("last-publish-date",String.valueOf(lastPublishDate));
    LayoutSetLocalServiceUtil.updateSettings(layoutSet.getGroupId(),layoutSet.isPrivateLayout(),settingsProperties.toString());
  }
}
