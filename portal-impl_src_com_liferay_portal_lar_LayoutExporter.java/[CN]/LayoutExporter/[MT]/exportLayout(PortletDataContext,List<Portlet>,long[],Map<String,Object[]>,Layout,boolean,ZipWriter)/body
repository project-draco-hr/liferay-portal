{
  if (!ArrayUtil.contains(layoutIds,layout.getLayoutId()) && (layoutIds != null) && (layoutIds.length > 0)) {
    Element layoutElement=portletDataContext.getExportDataElement(layout);
    layoutElement.addAttribute("action",Constants.SKIP);
    return;
  }
  StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,layout);
  if (!layout.isSupportsEmbeddedPortlets()) {
    return;
  }
  if (exportTheme && !portletDataContext.isPerformDirectBinaryImport() && !layout.isInheritLookAndFeel()) {
    Theme theme=layout.getTheme();
    File themeZip=new File(zipWriter.getPath() + "/theme" + StringPool.DASH+ String.valueOf(layout.getLayoutId())+ ".zip");
    exportTheme(theme,themeZip);
  }
  if (layout.isTypePortlet()) {
    for (    Portlet portlet : portlets) {
      if (portlet.isScopeable() && layout.hasScopeGroup()) {
        String key=PortletPermissionUtil.getPrimaryKey(layout.getPlid(),portlet.getPortletId());
        Group scopeGroup=layout.getScopeGroup();
        portletIds.put(key,new Object[]{portlet.getPortletId(),layout.getPlid(),scopeGroup.getGroupId(),StringPool.BLANK,layout.getUuid()});
      }
    }
  }
  LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
  for (  Portlet portlet : layoutTypePortlet.getAllPortlets(false)) {
    String portletId=portlet.getPortletId();
    javax.portlet.PortletPreferences jxPortletPreferences=PortletPreferencesFactoryUtil.getLayoutPortletSetup(layout,portletId);
    String scopeType=GetterUtil.getString(jxPortletPreferences.getValue("lfrScopeType",null));
    String scopeLayoutUuid=GetterUtil.getString(jxPortletPreferences.getValue("lfrScopeLayoutUuid",null));
    long scopeGroupId=portletDataContext.getScopeGroupId();
    if (Validator.isNotNull(scopeType)) {
      Group scopeGroup=null;
      if (scopeType.equals("company")) {
        scopeGroup=GroupLocalServiceUtil.getCompanyGroup(layout.getCompanyId());
      }
 else       if (scopeType.equals("layout")) {
        Layout scopeLayout=null;
        scopeLayout=LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(scopeLayoutUuid,portletDataContext.getGroupId(),portletDataContext.isPrivateLayout());
        if (scopeLayout == null) {
          continue;
        }
        scopeGroup=scopeLayout.getScopeGroup();
      }
 else {
        throw new IllegalArgumentException("Scope type " + scopeType + " is invalid");
      }
      if (scopeGroup != null) {
        scopeGroupId=scopeGroup.getGroupId();
      }
    }
    String key=PortletPermissionUtil.getPrimaryKey(layout.getPlid(),portletId);
    portletIds.put(key,new Object[]{portletId,layout.getPlid(),scopeGroupId,scopeType,scopeLayoutUuid});
  }
}
