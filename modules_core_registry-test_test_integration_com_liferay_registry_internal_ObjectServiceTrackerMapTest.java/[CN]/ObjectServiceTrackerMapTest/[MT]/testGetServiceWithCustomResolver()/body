{
  try (ServiceTrackerMap<String,TrackedOne> serviceTrackerMap=ServiceTrackerCollections.singleValueMap(TrackedOne.class,"(&(other=*)(target=*))",new ServiceReferenceMapper<String,TrackedOne>(){
    @Override public void map(    ServiceReference<TrackedOne> serviceReference,    Emitter<String> keys){
      keys.emit(serviceReference.getProperty("other") + " - " + serviceReference.getProperty("target"));
    }
  }
)){
    serviceTrackerMap.open();
    Dictionary<String,String> properties=new HashMapDictionary<>();
    properties.put("other","aProperty");
    properties.put("target","aTarget");
    ServiceRegistration<TrackedOne> serviceRegistration=_bundleContext.registerService(TrackedOne.class,new TrackedOne(),properties);
    Assert.assertNotNull(serviceTrackerMap.getService("aProperty - aTarget"));
    serviceRegistration.unregister();
  }
 }
