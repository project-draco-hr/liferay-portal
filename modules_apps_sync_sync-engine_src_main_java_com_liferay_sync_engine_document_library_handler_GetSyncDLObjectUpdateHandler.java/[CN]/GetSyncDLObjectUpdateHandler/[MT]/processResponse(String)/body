{
  if (_syncDLObjectUpdate == null) {
    if (response.startsWith("\"")) {
      response=StringEscapeUtils.unescapeJava(response);
      response=response.replaceAll("\n","\\n");
      response=response.substring(1,response.length() - 1);
    }
    _syncDLObjectUpdate=JSONUtil.readValue(response,SyncDLObjectUpdate.class);
  }
  Map<String,Long> settingsModifiedTimes=_syncDLObjectUpdate.getSettingsModifiedTimes();
  for (  Map.Entry<String,Long> entry : settingsModifiedTimes.entrySet()) {
    String setting=entry.getKey();
    long modifiedTime=entry.getValue();
    if (setting.equals(SyncDLObjectUpdate.PREFERENCE_KEY_SYNC_CONTEXT_MODIFIED_TIME)) {
      SyncAccount syncAccount=SyncAccountService.fetchSyncAccount(getSyncAccountId());
      syncAccount.setSyncContextModifiedTime(modifiedTime);
      SyncAccountService.update(syncAccount);
    }
  }
  List<SyncFile> syncFiles=_syncDLObjectUpdate.getSyncFiles();
  if (!syncFiles.isEmpty()) {
    Collections.sort(syncFiles,_syncFileComparator);
    for (    SyncFile syncFile : syncFiles) {
      processSyncFile(syncFile);
    }
  }
  if (getParameterValue("parentFolderId") == null) {
    SyncSite syncSite=SyncSiteService.fetchSyncSite((Long)getParameterValue("repositoryId"),getSyncAccountId());
    if ((syncSite == null) || ((Long)getParameterValue("lastAccessTime") != syncSite.getRemoteSyncTime())) {
      return;
    }
    long lastAccessTime=_syncDLObjectUpdate.getLastAccessTime();
    if (lastAccessTime == -1) {
      lastAccessTime=0;
    }
    syncSite.setRemoteSyncTime(lastAccessTime);
    if (_syncDLObjectUpdate.getResultsTotal() <= syncFiles.size()) {
      syncSite.setState(SyncSite.STATE_SYNCED);
    }
    SyncSiteService.update(syncSite);
    if (_syncDLObjectUpdate.getResultsTotal() > syncFiles.size()) {
      FileEventUtil.getUpdates(syncSite.getGroupId(),getSyncAccountId(),syncSite,GetterUtil.getBoolean(getParameterValue("retrieveFromCache")));
    }
  }
  BatchEventManager.fireBatchDownloadEvents();
}
