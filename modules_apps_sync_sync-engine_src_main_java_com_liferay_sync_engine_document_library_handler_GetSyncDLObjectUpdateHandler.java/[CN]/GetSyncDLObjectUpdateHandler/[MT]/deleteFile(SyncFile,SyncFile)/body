{
  if (sourceSyncFile.getUiEvent() == SyncFile.UI_EVENT_DELETED_LOCAL) {
    return;
  }
  sourceSyncFile.setModifiedTime(targetSyncFile.getModifiedTime());
  String event=targetSyncFile.getEvent();
  if (event.equals(SyncFile.EVENT_TRASH)) {
    sourceSyncFile.setUiEvent(SyncFile.UI_EVENT_TRASHED_REMOTE);
  }
 else {
    sourceSyncFile.setUiEvent(SyncFile.UI_EVENT_DELETED_REMOTE);
  }
  sourceSyncFile.setUserId(targetSyncFile.getUserId());
  sourceSyncFile.setUserName(targetSyncFile.getUserName());
  if (!sourceSyncFile.isUnsynced()) {
    SyncFileService.deleteSyncFile(sourceSyncFile);
  }
  Path sourceFilePath=Paths.get(sourceSyncFile.getFilePathName());
  if (FileUtil.notExists(sourceFilePath)) {
    return;
  }
  final Watcher watcher=WatcherManager.getWatcher(getSyncAccountId());
  if (sourceSyncFile.isFile()) {
    watcher.addDeletedFilePathName(sourceSyncFile.getFilePathName());
    FileUtil.deleteFile(sourceFilePath);
    return;
  }
  Files.walkFileTree(sourceFilePath,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult postVisitDirectory(    Path filePath,    IOException ioe) throws IOException {
      if (ioe != null) {
        return super.postVisitDirectory(filePath,ioe);
      }
      watcher.addDeletedFilePathName(filePath.toString());
      FileUtil.deleteFile(filePath);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult preVisitDirectory(    Path filePath,    BasicFileAttributes basicFileAttributes) throws IOException {
      watcher.unregisterFilePath(filePath);
      return super.preVisitDirectory(filePath,basicFileAttributes);
    }
    @Override public FileVisitResult visitFile(    Path filePath,    BasicFileAttributes basicFileAttributes) throws IOException {
      watcher.addDeletedFilePathName(filePath.toString());
      FileUtil.deleteFile(filePath);
      return FileVisitResult.CONTINUE;
    }
  }
);
}
