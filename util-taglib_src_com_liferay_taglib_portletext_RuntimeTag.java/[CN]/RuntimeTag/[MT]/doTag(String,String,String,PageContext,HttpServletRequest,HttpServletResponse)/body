{
  if (pageContext != null) {
    response=new PipingServletResponse(response,pageContext.getOut());
  }
  String portletId=portletName;
  RestrictPortletServletRequest restrictPortletServletRequest=new RestrictPortletServletRequest(request);
  queryString=PortletParameterUtil.addNamespace(portletId,queryString);
  if ((portletId != null) && portletId.equals(restrictPortletServletRequest.getParameter("p_p_id"))) {
    request=DynamicServletRequest.addQueryString(restrictPortletServletRequest,queryString);
  }
 else {
    Map<String,String[]> parameterMap=MapUtil.filter(restrictPortletServletRequest.getParameterMap(),new PrefixPredicateFilter("p_p_",true));
    DynamicServletRequest.addQueryStringToParameterMap(parameterMap,queryString);
    request=new DynamicServletRequest(restrictPortletServletRequest,parameterMap,false);
    request.setAttribute(DynamicServletRequest.DYNAMIC_QUERY_STRING,queryString);
  }
  try {
    request.setAttribute(WebKeys.RENDER_PORTLET_RESOURCE,Boolean.TRUE);
    ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
    if (themeDisplay.isStateMaximized()) {
      LayoutTypePortlet layoutTypePortlet=themeDisplay.getLayoutTypePortlet();
      if (layoutTypePortlet.hasStateMaxPortletId(portletId)) {
        return;
      }
    }
    Layout layout=themeDisplay.getLayout();
    Portlet portlet=getPortlet(themeDisplay.getCompanyId(),portletId);
    JSONObject jsonObject=null;
    if ((PortletPreferencesLocalServiceUtil.getPortletPreferencesCount(PortletKeys.PREFS_OWNER_TYPE_LAYOUT,themeDisplay.getPlid(),portletId) < 1) || layout.isTypeControlPanel() || layout.isTypePanel()) {
      PortletPreferencesFactoryUtil.getPortletSetup(request,portletId,defaultPreferences);
      PortletLayoutListener portletLayoutListener=portlet.getPortletLayoutListenerInstance();
      if (portletLayoutListener != null) {
        portletLayoutListener.onAddToLayout(portletId,themeDisplay.getPlid());
      }
      jsonObject=JSONFactoryUtil.createJSONObject();
      PortletJSONUtil.populatePortletJSONObject(request,StringPool.BLANK,portlet,jsonObject);
    }
    if (jsonObject != null) {
      writeHeaderPaths(response,jsonObject);
    }
    PortletContainerUtil.render(request,response,portlet);
    if (jsonObject != null) {
      writeFooterPaths(response,jsonObject);
    }
  }
  finally {
    restrictPortletServletRequest.mergeSharedAttributes();
  }
}
