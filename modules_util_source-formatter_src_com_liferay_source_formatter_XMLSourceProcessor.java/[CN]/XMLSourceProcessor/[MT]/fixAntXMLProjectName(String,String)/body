{
  String baseDirName=sourceFormatterArgs.getBaseDirName();
  int x=baseDirName.length();
  if (fileName.endsWith("-ext/build.xml")) {
    if (fileName.startsWith(baseDirName + "ext/")) {
      x+=4;
    }
  }
 else   if (fileName.endsWith("-hook/build.xml")) {
    if (fileName.startsWith(baseDirName + "hooks/")) {
      x+=6;
    }
  }
 else   if (fileName.endsWith("-layouttpl/build.xml")) {
    if (fileName.startsWith(baseDirName + "layouttpl/")) {
      x+=10;
    }
  }
 else   if (fileName.endsWith("-portlet/build.xml")) {
    if (fileName.startsWith(baseDirName + "portlets/")) {
      x+=9;
    }
  }
 else   if (fileName.endsWith("-theme/build.xml")) {
    if (fileName.startsWith(baseDirName + "themes/")) {
      x+=7;
    }
  }
 else   if (fileName.endsWith("-web/build.xml") && !fileName.endsWith("/ext-web/build.xml")) {
    if (fileName.startsWith(baseDirName + "webs/")) {
      x+=5;
    }
  }
 else {
    return content;
  }
  if (content.contains("<project>")) {
    return content;
  }
  int y=fileName.indexOf(CharPool.SLASH,x);
  String correctProjectElementText="<project name=\"" + fileName.substring(x,y) + "\"";
  if (!content.contains(correctProjectElementText)) {
    x=content.indexOf("<project name=\"");
    y=content.indexOf(CharPool.QUOTE,x) + 1;
    y=content.indexOf(CharPool.QUOTE,y) + 1;
    content=content.substring(0,x) + correctProjectElementText + content.substring(y);
    processErrorMessage(fileName,fileName + " has an incorrect project name");
  }
  return content;
}
