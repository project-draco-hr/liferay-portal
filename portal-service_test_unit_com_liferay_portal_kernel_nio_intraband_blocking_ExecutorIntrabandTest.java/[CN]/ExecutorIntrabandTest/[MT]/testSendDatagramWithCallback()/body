{
  Pipe readPipe=Pipe.open();
  Pipe writePipe=Pipe.open();
  GatheringByteChannel gatheringByteChannel=writePipe.sink();
  ScatteringByteChannel scatteringByteChannel=readPipe.source();
  FutureRegistrationReference futureRegistrationReference=(FutureRegistrationReference)_executorIntraband.registerChannel(writePipe.source(),readPipe.sink());
  Object attachment=new Object();
  RecordCompletionHandler<Object> recordCompletionHandler=new RecordCompletionHandler<Object>();
  _executorIntraband.sendDatagram(futureRegistrationReference,Datagram.createRequestDatagram(_type,_data),attachment,EnumSet.of(CompletionHandler.CompletionType.SUBMITTED),recordCompletionHandler);
  Datagram receiveDatagram=IntrabandTestUtil.readDatagramFully(scatteringByteChannel);
  recordCompletionHandler.waitUntilSubmitted();
  Assert.assertSame(attachment,recordCompletionHandler.getAttachment());
  Assert.assertEquals(_type,receiveDatagram.getType());
  ByteBuffer dataByteBuffer=receiveDatagram.getDataByteBuffer();
  Assert.assertArrayEquals(_data,dataByteBuffer.array());
  List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(),Level.WARNING);
  recordCompletionHandler=new RecordCompletionHandler<Object>();
  _executorIntraband.sendDatagram(futureRegistrationReference,Datagram.createRequestDatagram(_type,_data),attachment,EnumSet.of(CompletionHandler.CompletionType.REPLIED),recordCompletionHandler,10,TimeUnit.MILLISECONDS);
  Thread.sleep(20);
  _executorIntraband.sendDatagram(futureRegistrationReference,Datagram.createRequestDatagram(_type,_data),attachment,EnumSet.of(CompletionHandler.CompletionType.DELIVERED),recordCompletionHandler,10,TimeUnit.MILLISECONDS);
  while (logRecords.isEmpty())   ;
  IntrabandTestUtil.assertMessageStartWith(logRecords.get(0),"Removed timeout response waiting datagram");
  gatheringByteChannel.close();
  scatteringByteChannel.close();
}
