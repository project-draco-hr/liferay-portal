{
  try {
    _executorIntraband.registerChannel(null);
    Assert.fail();
  }
 catch (  NullPointerException npe) {
    Assert.assertEquals("Channel is null",npe.getMessage());
  }
  try {
    _executorIntraband.registerChannel(IntrabandTestUtil.<Channel>createProxy(Channel.class));
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Channel is not of type GatheringByteChannel",iae.getMessage());
  }
  try {
    _executorIntraband.registerChannel(IntrabandTestUtil.<Channel>createProxy(GatheringByteChannel.class));
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Channel is not of type ScatteringByteChannel",iae.getMessage());
  }
  SocketChannel[] peerSocketChannels=IntrabandTestUtil.createSocketChannelPeers();
  SocketChannel socketChannel=peerSocketChannels[0];
  socketChannel.configureBlocking(false);
  try {
    _executorIntraband.registerChannel(socketChannel);
    Assert.fail();
  }
 catch (  IllegalArgumentException iae) {
    Assert.assertEquals("Channel is of type SelectableChannel and configured in " + "nonblocking mode",iae.getMessage());
  }
  socketChannel.configureBlocking(true);
  try {
    FutureRegistrationReference futureRegistrationReference=(FutureRegistrationReference)_executorIntraband.registerChannel(socketChannel);
    Assert.assertSame(_executorIntraband,futureRegistrationReference.getIntraband());
    Assert.assertTrue(futureRegistrationReference.isValid());
    futureRegistrationReference.cancelRegistration();
    Assert.assertFalse(futureRegistrationReference.isValid());
    ThreadPoolExecutor threadPoolExecutor=(ThreadPoolExecutor)_executorIntraband.executorService;
    while (threadPoolExecutor.getActiveCount() != 0)     ;
  }
  finally {
    peerSocketChannels[0].close();
    peerSocketChannels[1].close();
  }
  File tempFile=new File("tempFile");
  tempFile.deleteOnExit();
  RandomAccessFile randomAccessFile=new RandomAccessFile(tempFile,"rw");
  randomAccessFile.setLength(Integer.MAX_VALUE);
  try (FileChannel fileChannel=randomAccessFile.getChannel()){
    FutureRegistrationReference futureRegistrationReference=(FutureRegistrationReference)_executorIntraband.registerChannel(fileChannel);
    Assert.assertSame(_executorIntraband,futureRegistrationReference.getIntraband());
    Assert.assertTrue(futureRegistrationReference.isValid());
    futureRegistrationReference.cancelRegistration();
    Assert.assertFalse(futureRegistrationReference.isValid());
    ThreadPoolExecutor threadPoolExecutor=(ThreadPoolExecutor)_executorIntraband.executorService;
    while (threadPoolExecutor.getActiveCount() != 0)     ;
  }
  finally {
    tempFile.delete();
  }
}
