{
  String methodName=method.getName();
  if (_v2 && methodName.equals("getWSRP_v2_Markup_Service")) {
    WSRP_v2_Markup_Binding_SOAPStub markupService=new WSRP_v2_Markup_Binding_SOAPStub((URL)args[0],_serviceLocator);
    WSRP_v2_ServiceLocator wsrpV2ServiceLocator=(WSRP_v2_ServiceLocator)_serviceLocator;
    String markupServiceName=wsrpV2ServiceLocator.getWSRP_v2_Markup_ServiceWSDDServiceName();
    markupService.setPortName(markupServiceName);
    return markupService;
  }
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  URL bindingURL=(URL)args[0];
  int x=methodName.indexOf("_v2_") + 4;
  int y=methodName.lastIndexOf("_Service");
  String serviceName=methodName.substring(x,y);
  StringBundler sb=new StringBundler(7);
  sb.append(_OASIS_PACKAGE);
  sb.append(_version);
  sb.append(".bind.WSRP_");
  sb.append(_version);
  sb.append(StringPool.UNDERLINE);
  sb.append(serviceName);
  sb.append("_Binding_SOAPStub");
  Class<?> clazz=contextClassLoader.loadClass(sb.toString());
  args=new Object[]{bindingURL,getService()};
  Object stub=ConstructorUtils.invokeConstructor(clazz,args);
  sb=new StringBundler(5);
  sb.append("getWSRP_");
  sb.append(_version);
  sb.append(StringPool.UNDERLINE);
  sb.append(serviceName);
  sb.append("_ServiceWSDDServiceName");
  Object serviceWSDDServiceName=MethodUtils.invokeMethod(_serviceLocator,sb.toString(),null);
  MethodUtils.invokeMethod(stub,"setPortName",serviceWSDDServiceName);
  if (_v2) {
    return stub;
  }
  sb.setIndex(0);
  sb.append(_OASIS_PACKAGE);
  sb.append("v2.intf.WSRP_v2_");
  sb.append(serviceName);
  sb.append("_PortType");
  Class<?> proxyInterface=contextClassLoader.loadClass(sb.toString());
  sb.setIndex(0);
  sb.append(_WSRP_PROXY_PACKAGE);
  sb.append(serviceName);
  sb.append("ServiceHandler");
  clazz=contextClassLoader.loadClass(sb.toString());
  InvocationHandler invocationHandler=(InvocationHandler)ConstructorUtils.invokeConstructor(clazz,stub);
  return ProxyUtil.newProxyInstance(ServiceHandler.class.getClassLoader(),new Class[]{proxyInterface,Stub.class},invocationHandler);
}
