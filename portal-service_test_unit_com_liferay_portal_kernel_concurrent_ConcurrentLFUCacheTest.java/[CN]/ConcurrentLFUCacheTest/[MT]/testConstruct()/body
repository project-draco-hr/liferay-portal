{
  try {
    new ConcurrentLFUCache<Object,Object>(0);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLFUCache<Object,Object>(0,0.9F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLFUCache<Object,Object>(-1);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLFUCache<Object,Object>(-1,0.9F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLFUCache<Object,Object>(10,0);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLFUCache<Object,Object>(10,-1);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLFUCache<Object,Object>(10,1);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLFUCache<Object,Object>(10,1.1F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLFUCache<Object,Object>(1,0.9F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    new ConcurrentLFUCache<Object,Object>(10,0.09F);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  ConcurrentLFUCache<String,String> concurrentLFUCache=new ConcurrentLFUCache<String,String>(10);
  assertEquals(0,concurrentLFUCache.evictCount());
  assertEquals(0,concurrentLFUCache.hitCount());
  assertEquals(10,concurrentLFUCache.maxSize());
  assertEquals(0,concurrentLFUCache.missCount());
  assertEquals(0,concurrentLFUCache.putCount());
  assertEquals(0,concurrentLFUCache.size());
  assertNull(concurrentLFUCache.get("key"));
}
