{
  User user=userPersistence.findByPrimaryKey(userId);
  Date expirationDate=null;
  if (!neverExpire) {
    expirationDate=PortalUtil.getDate(expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,user.getTimeZone(),QuestionExpirationDateException.class);
  }
  validate(titleMap,descriptionMap,choices,expirationDate);
  PollsQuestion question=pollsQuestionPersistence.findByPrimaryKey(questionId);
  question.setTitleMap(titleMap);
  question.setDescriptionMap(descriptionMap);
  question.setExpirationDate(expirationDate);
  pollsQuestionPersistence.update(question);
  if (choices == null) {
    return question;
  }
  int oldChoicesCount=pollsChoicePersistence.countByQuestionId(questionId);
  if (oldChoicesCount > choices.size()) {
    throw new QuestionChoiceException();
  }
  for (  PollsChoice choice : choices) {
    String choiceName=choice.getName();
    String choiceDescription=choice.getDescription();
    choice=pollsChoicePersistence.fetchByQ_N(questionId,choiceName);
    if (choice == null) {
      pollsChoiceLocalService.addChoice(userId,questionId,choiceName,choiceDescription,serviceContext);
    }
 else {
      pollsChoiceLocalService.updateChoice(choice.getChoiceId(),questionId,choiceName,choiceDescription,serviceContext);
    }
  }
  return question;
}
