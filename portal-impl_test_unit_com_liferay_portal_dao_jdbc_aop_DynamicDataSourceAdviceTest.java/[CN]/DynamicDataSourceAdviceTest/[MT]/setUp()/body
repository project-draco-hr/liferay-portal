{
  _dynamicDataSourceAdvice=new DynamicDataSourceAdvice();
  _defaultDynamicDataSourceTargetSource=new DefaultDynamicDataSourceTargetSource();
  ClassLoader classLoader=DynamicDataSourceAdviceTest.class.getClassLoader();
  InvocationHandler invocationHandler=new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      throw new UnsupportedOperationException();
    }
  }
;
  _readDataSource=(DataSource)ProxyUtil.newProxyInstance(classLoader,new Class<?>[]{DataSource.class},invocationHandler);
  _defaultDynamicDataSourceTargetSource.setReadDataSource(_readDataSource);
  _writeDataSource=(DataSource)ProxyUtil.newProxyInstance(classLoader,new Class<?>[]{DataSource.class},invocationHandler);
  _defaultDynamicDataSourceTargetSource.setWriteDataSource(_writeDataSource);
  _dynamicDataSourceAdvice.setDynamicDataSourceTargetSource(_defaultDynamicDataSourceTargetSource);
  ServiceBeanAopCacheManager serviceBeanAopCacheManager=new ServiceBeanAopCacheManager();
  _dynamicDataSourceAdvice.setServiceBeanAopCacheManager(serviceBeanAopCacheManager);
  _dynamicDataSourceAdvice.setServiceBeanAopCacheManager(serviceBeanAopCacheManager);
  Map<Class<? extends Annotation>,AnnotationChainableMethodAdvice<?>[]> registeredAnnotationChainableMethodAdvices=serviceBeanAopCacheManager.getRegisteredAnnotationChainableMethodAdvices();
  AnnotationChainableMethodAdvice<?>[] annotationChainableMethodAdvices=registeredAnnotationChainableMethodAdvices.get(MasterDataSource.class);
  Assert.assertEquals(1,annotationChainableMethodAdvices.length);
  Assert.assertNull(annotationChainableMethodAdvices[0]);
  Assert.assertSame(annotationChainableMethodAdvices,registeredAnnotationChainableMethodAdvices.get(MasterDataSource.class));
  _dynamicDataSourceAdvice.setTransactionAttributeSource(new AnnotationTransactionAttributeSource());
}
