{
  int importedKBArticlesCount=0;
  PrioritizationStrategy prioritizationStrategy=PrioritizationStrategy.create(groupId,parentKBFolderId,prioritizeByNumericalPrefix);
  KBGroupServiceConfiguration kbGroupServiceConfiguration=_configurationProvider.getGroupConfiguration(KBGroupServiceConfiguration.class,groupId);
  _validateFileEntryNames(zipReader,kbGroupServiceConfiguration);
  Map<String,List<String>> folderNameFileEntryNamesMap=getFolderNameFileEntryNamesMap(zipReader,kbGroupServiceConfiguration);
  Set<String> folderNames=folderNameFileEntryNamesMap.keySet();
  Map<String,String> folderNameIntroFileNameMap=new TreeMap<>();
  for (  String folderName : folderNames) {
    List<String> fileEntryNames=folderNameFileEntryNamesMap.get(folderName);
    for (    String fileEntryName : fileEntryNames) {
      if (fileEntryName.endsWith(kbGroupServiceConfiguration.markdownImporterArticleIntro())) {
        folderNameIntroFileNameMap.put(folderName,fileEntryName);
        break;
      }
    }
  }
  for (  String folderName : folderNames) {
    String introFileName=folderNameIntroFileNameMap.get(folderName);
    if (Validator.isNull(introFileName)) {
      for (      String path : _extractPaths(folderName)) {
        String parentIntroFileName=folderNameIntroFileNameMap.get(path);
        if (Validator.isNotNull(parentIntroFileName)) {
          folderNameIntroFileNameMap.put(folderName,parentIntroFileName);
          break;
        }
      }
      if (Validator.isNull(folderNameIntroFileNameMap.get(folderName))) {
        folderNameIntroFileNameMap.put(folderName,StringPool.BLANK);
      }
    }
  }
  Map<String,KBArticle> introFileNameKBArticleMap=new HashMap<>();
  for (  String folderName : folderNames) {
    long parentResourceClassNameId=PortalUtil.getClassNameId(KBFolderConstants.getClassName());
    long parentResourcePrimaryKey=parentKBFolderId;
    long sectionResourceClassNameId=parentResourceClassNameId;
    long sectionResourcePrimaryKey=parentResourcePrimaryKey;
    String introFileName=folderNameIntroFileNameMap.get(folderName);
    if (Validator.isNotNull(introFileName)) {
      for (      String path : _extractPaths(folderName)) {
        String parentIntroFileName=folderNameIntroFileNameMap.get(path);
        if (Validator.isNotNull(parentIntroFileName)) {
          KBArticle parentIntroKBArticle=introFileNameKBArticleMap.get(parentIntroFileName);
          sectionResourceClassNameId=PortalUtil.getClassNameId(KBArticleConstants.getClassName());
          sectionResourcePrimaryKey=parentIntroKBArticle.getResourcePrimKey();
          break;
        }
      }
      KBArticle introKBArticle=introFileNameKBArticleMap.get(introFileName);
      if (Validator.isNull(introKBArticle)) {
        introKBArticle=addKBArticleMarkdown(userId,groupId,parentKBFolderId,sectionResourceClassNameId,sectionResourcePrimaryKey,zipReader.getEntryAsString(introFileName),introFileName,zipReader,metadata,prioritizationStrategy,serviceContext);
        importedKBArticlesCount++;
        introFileNameKBArticleMap.put(introFileName,introKBArticle);
      }
    }
  }
  for (  String folderName : folderNames) {
    long parentResourceClassNameId=PortalUtil.getClassNameId(KBFolderConstants.getClassName());
    long parentResourcePrimaryKey=parentKBFolderId;
    long sectionResourceClassNameId=parentResourceClassNameId;
    long sectionResourcePrimaryKey=parentResourcePrimaryKey;
    String introFileName=folderNameIntroFileNameMap.get(folderName);
    if (Validator.isNotNull(introFileName)) {
      KBArticle introKBArticle=introFileNameKBArticleMap.get(introFileName);
      sectionResourceClassNameId=PortalUtil.getClassNameId(KBArticleConstants.getClassName());
      sectionResourcePrimaryKey=introKBArticle.getResourcePrimKey();
    }
    List<String> fileEntryNames=folderNameFileEntryNamesMap.get(folderName);
    for (    String fileEntryName : fileEntryNames) {
      if (!fileEntryName.endsWith(kbGroupServiceConfiguration.markdownImporterArticleIntro())) {
        String markdown=zipReader.getEntryAsString(fileEntryName);
        if (Validator.isNull(markdown)) {
          if (_log.isWarnEnabled()) {
            _log.warn("Missing Markdown in file entry " + fileEntryName);
          }
        }
        addKBArticleMarkdown(userId,groupId,parentKBFolderId,sectionResourceClassNameId,sectionResourcePrimaryKey,markdown,fileEntryName,zipReader,metadata,prioritizationStrategy,serviceContext);
        importedKBArticlesCount++;
      }
    }
  }
  prioritizationStrategy.prioritizeKBArticles();
  return importedKBArticlesCount;
}
