{
  LayoutPrototype importedLayoutPrototype=(LayoutPrototype)getStagedModel(stagedModel.getUuid(),group);
  Assert.assertNotNull(importedLayoutPrototype);
  List<StagedModel> layoutDependentStagedModels=dependentStagedModelsMap.get(Layout.class.getSimpleName());
  Assert.assertEquals(1,layoutDependentStagedModels.size());
  Layout layout=(Layout)layoutDependentStagedModels.get(0);
  Layout importedLayout=LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(layout.getUuid(),importedLayoutPrototype.getGroupId(),layout.isPrivateLayout());
  Assert.assertNotNull(importedLayout);
  Assert.assertEquals(layout.getTypeSettingsProperty(LayoutPrototypeStagedModelDataHandlerTest.class.getName()),importedLayout.getTypeSettingsProperty(LayoutPrototypeStagedModelDataHandlerTest.class.getName()));
  List<StagedModel> layoutFriendlyURLDependentStagedModels=dependentStagedModelsMap.get(LayoutFriendlyURL.class.getSimpleName());
  LayoutFriendlyURL layoutFriendlyURL=(LayoutFriendlyURL)layoutFriendlyURLDependentStagedModels.get(0);
  LayoutFriendlyURL importedLayoutFriendlyURL=LayoutFriendlyURLLocalServiceUtil.fetchLayoutFriendlyURLByUuidAndGroupId(layoutFriendlyURL.getUuid(),importedLayout.getGroupId());
  Assert.assertNotNull(importedLayoutFriendlyURL);
  Assert.assertEquals(layoutFriendlyURL.getFriendlyURL(),importedLayoutFriendlyURL.getFriendlyURL());
}
