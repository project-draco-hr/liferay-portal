{
  long classNameId=PortalUtil.getClassNameId(DLFileEntry.class.getName());
  DetachedCriteria entriesWithTagsAssets=DetachedCriteria.forClass(TagsAssetImpl.class,"tagsAsset");
  entriesWithTagsAssets=entriesWithTagsAssets.add(Property.forName("tagsAsset.classNameId").eq(new Long(classNameId)));
  entriesWithTagsAssets=entriesWithTagsAssets.setProjection(Property.forName("tagsAsset.classPK"));
  DetachedCriteria entriesWithoutTagsAssets=DetachedCriteria.forClass(DLFileEntryImpl.class,"dlFileEntry");
  entriesWithoutTagsAssets=entriesWithoutTagsAssets.add(Restrictions.not(Subqueries.propertyIn("dlFileEntry.fileEntryId",entriesWithTagsAssets)));
  DynamicQueryInitializer dqi=new DynamicQueryInitializerImpl(entriesWithoutTagsAssets);
  List fileEntries=DLFileEntryLocalServiceUtil.dynamicQuery(dqi);
  if (_log.isDebugEnabled()) {
    _log.debug("Processing " + fileEntries.size() + " file entries with no tags assets");
  }
  for (int i=0; i < fileEntries.size(); i++) {
    DLFileEntry fileEntry=(DLFileEntry)fileEntries.get(i);
    DLFileEntryLocalServiceUtil.updateTagsAsset(fileEntry,new String[0]);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Tags assets verified for file entries");
  }
}
