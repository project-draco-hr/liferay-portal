{
  ActionableDynamicQuery actionableDynamicQuery=DLFileVersionLocalServiceUtil.getActionableDynamicQuery();
  actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod(){
    @Override public void performAction(    Object object){
      DLFileVersion dlFileVersion=(DLFileVersion)object;
      InputStream inputStream=null;
      try {
        inputStream=DLFileEntryLocalServiceUtil.getFileAsStream(dlFileVersion.getFileEntryId(),dlFileVersion.getVersion(),false);
      }
 catch (      Exception e) {
        if (_log.isWarnEnabled()) {
          DLFileEntry dlFileEntry=DLFileEntryLocalServiceUtil.fetchDLFileEntry(dlFileVersion.getFileEntryId());
          if (dlFileEntry == null) {
            _log.warn("Unable to find file entry associated " + "with file version " + dlFileVersion.getFileVersionId(),e);
          }
 else {
            StringBundler sb=new StringBundler(4);
            sb.append("Unable to find file version ");
            sb.append(dlFileVersion.getVersion());
            sb.append(" for file entry ");
            sb.append(dlFileEntry.getName());
            _log.warn(sb.toString(),e);
          }
        }
        return;
      }
      String title=DLUtil.getTitleWithExtension(dlFileVersion.getTitle(),dlFileVersion.getExtension());
      String mimeType=getMimeType(inputStream,title);
      if (mimeType.equals(originalMimeType)) {
        return;
      }
      dlFileVersion.setMimeType(mimeType);
      DLFileVersionLocalServiceUtil.updateDLFileVersion(dlFileVersion);
    }
  }
);
  actionableDynamicQuery.performActions();
}
