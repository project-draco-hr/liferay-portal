{
  ActionableDynamicQuery actionableDynamicQuery=DLFileEntryMetadataLocalServiceUtil.getActionableDynamicQuery();
  actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod(){
    @Override public void performAction(    Object object) throws PortalException {
      DLFileEntryMetadata dlFileEntryMetadata=(DLFileEntryMetadata)object;
      try {
        DLFileEntry dlFileEntry=DLFileEntryLocalServiceUtil.getFileEntry(dlFileEntryMetadata.getFileEntryId());
        DDMStructure ddmStructure=DDMStructureLocalServiceUtil.fetchStructure(dlFileEntryMetadata.getDDMStructureId());
        if (ddmStructure == null) {
          deleteRedundantDLFileEntryMetadata(dlFileEntryMetadata);
          return;
        }
        if (dlFileEntry.getCompanyId() != ddmStructure.getCompanyId()) {
          deleteRedundantDLFileEntryMetadata(dlFileEntryMetadata);
        }
      }
 catch (      Exception e) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to delete redundant metadata for " + "file entry " + dlFileEntryMetadata.getFileEntryId(),e);
        }
      }
    }
  }
);
  actionableDynamicQuery.performActions();
}
