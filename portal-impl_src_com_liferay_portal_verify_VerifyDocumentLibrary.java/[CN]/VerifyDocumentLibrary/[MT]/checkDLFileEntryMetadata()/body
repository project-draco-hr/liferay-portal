{
  ActionableDynamicQuery actionableDynamicQuery=DLFileEntryMetadataLocalServiceUtil.getActionableDynamicQuery();
  actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod(){
    @Override public void performAction(    Object object) throws PortalException {
      DLFileEntryMetadata fileEntryMetadata=(DLFileEntryMetadata)object;
      try {
        DLFileEntry fileEntry=DLFileEntryLocalServiceUtil.getFileEntry(fileEntryMetadata.getFileEntryId());
        DDMStructure structure=DDMStructureLocalServiceUtil.fetchStructure(fileEntryMetadata.getDDMStructureId());
        if (structure == null) {
          deleteRedundantDLFileEntryMetadata(fileEntryMetadata);
          return;
        }
        if (fileEntry.getCompanyId() != structure.getCompanyId()) {
          deleteRedundantDLFileEntryMetadata(fileEntryMetadata);
        }
      }
 catch (      Exception e) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to delete redundant metadata for" + "file entry" + fileEntryMetadata.getFileEntryId() + ": "+ e.getMessage(),e);
        }
      }
    }
  }
);
  actionableDynamicQuery.performActions();
}
