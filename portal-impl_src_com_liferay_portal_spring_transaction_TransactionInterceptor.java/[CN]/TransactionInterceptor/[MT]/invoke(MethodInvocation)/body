{
  Method method=methodInvocation.getMethod();
  Class<?> targetClass=null;
  Object targetBean=methodInvocation.getThis();
  if (targetBean != null) {
    targetClass=targetBean.getClass();
  }
  TransactionAttribute transactionAttribute=transactionAttributeSource.getTransactionAttribute(method,targetClass);
  if (transactionAttribute == null) {
    return methodInvocation.proceed();
  }
  TransactionStatus transactionStatus=_platformTransactionManager.getTransaction(transactionAttribute);
  boolean newTransaction=transactionStatus.isNewTransaction();
  if (newTransaction) {
    TransactionalPortalCacheHelper.begin();
    TransactionCommitCallbackUtil.pushCallbackList();
  }
  Object returnValue=null;
  try {
    returnValue=methodInvocation.proceed();
  }
 catch (  Throwable throwable) {
    if (transactionAttribute.rollbackOn(throwable)) {
      try {
        _platformTransactionManager.rollback(transactionStatus);
      }
 catch (      TransactionSystemException tse) {
        _log.error("Application exception overridden by rollback " + "exception",tse);
        throw tse;
      }
catch (      RuntimeException re) {
        _log.error("Application exception overridden by rollback " + "exception",re);
        throw re;
      }
catch (      Error e) {
        _log.error("Application exception overridden by rollback " + "error",e);
        throw e;
      }
 finally {
        if (newTransaction) {
          TransactionalPortalCacheHelper.rollback();
          TransactionCommitCallbackUtil.popCallbackList();
        }
      }
    }
 else {
      boolean hasError=false;
      try {
        _platformTransactionManager.commit(transactionStatus);
      }
 catch (      TransactionSystemException tse) {
        _log.error("Application exception overridden by commit " + "exception",tse);
        hasError=true;
        throw tse;
      }
catch (      RuntimeException re) {
        _log.error("Application exception overridden by commit " + "exception",re);
        hasError=true;
        throw re;
      }
catch (      Error e) {
        _log.error("Application exception overridden by commit " + "error",e);
        hasError=true;
        throw e;
      }
 finally {
        if (newTransaction) {
          if (hasError) {
            TransactionalPortalCacheHelper.rollback();
            TransactionCommitCallbackUtil.popCallbackList();
          }
 else {
            TransactionalPortalCacheHelper.commit();
            invokeCallbacks();
          }
        }
      }
    }
    throw throwable;
  }
  _platformTransactionManager.commit(transactionStatus);
  if (newTransaction) {
    TransactionalPortalCacheHelper.commit();
    invokeCallbacks();
  }
  return returnValue;
}
