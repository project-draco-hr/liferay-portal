{
  Method method=methodInvocation.getMethod();
  Class<?> targetClass=null;
  Object thisObject=methodInvocation.getThis();
  if (thisObject != null) {
    targetClass=thisObject.getClass();
  }
  TransactionAttributeSource transactionAttributeSource=getTransactionAttributeSource();
  TransactionAttribute transactionAttribute=transactionAttributeSource.getTransactionAttribute(method,targetClass);
  if (transactionAttribute == null) {
    return methodInvocation.proceed();
  }
  Class<?> declaringClass=method.getDeclaringClass();
  String joinPointIdentification=StringPool.BLANK;
  if (_log.isDebugEnabled()) {
    joinPointIdentification=declaringClass.getName().concat(StringPool.PERIOD).concat(method.getName());
  }
  TransactionInfo transactionInfo=createTransactionIfNecessary(getTransactionManager(),transactionAttribute,joinPointIdentification);
  TransactionStatus transactionStatus=transactionInfo.getTransactionStatus();
  boolean newTransaction=transactionStatus.isNewTransaction();
  if (newTransaction) {
    TransactionalPortalCacheUtil.begin();
  }
  Object returnValue=null;
  try {
    returnValue=methodInvocation.proceed();
  }
 catch (  Throwable throwable) {
    if (newTransaction) {
      TransactionalPortalCacheUtil.rollback();
    }
    completeTransactionAfterThrowing(transactionInfo,throwable);
    throw throwable;
  }
 finally {
    cleanupTransactionInfo(transactionInfo);
  }
  commitTransactionAfterReturning(transactionInfo);
  if (newTransaction) {
    TransactionalPortalCacheUtil.commit();
  }
  return returnValue;
}
