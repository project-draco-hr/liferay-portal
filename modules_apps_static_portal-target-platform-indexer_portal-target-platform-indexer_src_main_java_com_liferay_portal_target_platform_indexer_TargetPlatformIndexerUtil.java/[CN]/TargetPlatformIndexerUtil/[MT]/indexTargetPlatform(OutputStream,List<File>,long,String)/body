{
  Framework framework=null;
  Path tempPath=Files.createTempDirectory(null);
  ClassLoader classLoader=TargetPlatformIndexerUtil.class.getClassLoader();
  try (InputStream inputStream=classLoader.getResourceAsStream("META-INF/system.packages.extra.mf")){
    Map<String,String> properties=new HashMap<>();
    properties.put(Constants.FRAMEWORK_STORAGE,tempPath.toString());
    Manifest extraPackagesManifest=new Manifest(inputStream);
    Attributes attributes=extraPackagesManifest.getMainAttributes();
    properties.put(Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA,attributes.getValue("Export-Package"));
    ServiceLoader<FrameworkFactory> serviceLoader=ServiceLoader.load(FrameworkFactory.class);
    FrameworkFactory frameworkFactory=serviceLoader.iterator().next();
    framework=frameworkFactory.newFramework(properties);
    framework.init();
    BundleContext bundleContext=framework.getBundleContext();
    Bundle systemBundle=bundleContext.getBundle(0);
    TargetPlatformIndexer targetPlatformIndexer=new TargetPlatformIndexer(systemBundle,additionalJarFiles,dirNames);
    targetPlatformIndexer.index(outputStream);
  }
  finally {
    framework.stop();
    FrameworkEvent frameworkEvent=framework.waitForStop(stopWaitTimeout);
    if (frameworkEvent.getType() == FrameworkEvent.WAIT_TIMEDOUT) {
      throw new ProcessException("OSGi framework event " + frameworkEvent + " triggered after a "+ stopWaitTimeout+ "ms timeout");
    }
    PathUtil.deltree(tempPath);
  }
}
