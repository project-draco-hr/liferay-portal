{
  QueryConfig queryConfig=searchContext.getQueryConfig();
  if (!queryConfig.isAllFieldsSelected()) {
    Set<String> selectedFieldNameSet=SetUtil.fromArray(queryConfig.getSelectedFieldNames());
    Collections.addAll(selectedFieldNameSet,_PERMISSION_SELECTED_FIELD_NAMES);
    queryConfig.setSelectedFieldNames(selectedFieldNameSet.toArray(new String[selectedFieldNameSet.size()]));
  }
  int end=searchContext.getEnd();
  int start=searchContext.getStart();
  if ((end == QueryUtil.ALL_POS) && (start == QueryUtil.ALL_POS)) {
    Hits hits=getHits(searchContext);
    if (!isGroupAdmin(searchContext)) {
      filterHits(hits,searchContext);
    }
    return hits;
  }
  if ((start < 0) || (start > end)) {
    return new HitsImpl();
  }
  if (isGroupAdmin(searchContext)) {
    return getHits(searchContext);
  }
  double amplificationFactor=1.0;
  int excludedDocsSize=0;
  int hitsSize=0;
  int offset=0;
  long startTime=0;
  List<Document> documents=new ArrayList<>();
  List<Float> scores=new ArrayList<>();
  while (true) {
    int count=end - documents.size();
    int amplifiedCount=(int)Math.ceil(count * amplificationFactor);
    int amplifiedEnd=offset + amplifiedCount;
    searchContext.setEnd(amplifiedEnd);
    searchContext.setStart(offset);
    Hits hits=getHits(searchContext);
    if (startTime == 0) {
      hitsSize=hits.getLength();
      startTime=hits.getStart();
    }
    Document[] oldDocs=hits.getDocs();
    filterHits(hits,searchContext);
    Document[] newDocs=hits.getDocs();
    excludedDocsSize+=oldDocs.length - newDocs.length;
    collectHits(hits,documents,scores,count);
    if ((newDocs.length >= count) || (oldDocs.length < amplifiedCount) || (amplifiedEnd >= hitsSize)) {
      updateHits(hits,documents,scores,start,end,hitsSize - excludedDocsSize,startTime);
      return hits;
    }
    offset=amplifiedEnd;
    amplificationFactor=_getAmplificationFactor(documents.size(),offset);
  }
}
