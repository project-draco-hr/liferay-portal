{
  Element entryElement=portletDataContext.getExportDataElement(entry);
  ExportImportContentProcessor exportImportContentProcessor=getExportImportContentProcessor(BlogsEntry.class);
  if (entry.isSmallImage()) {
    Image smallImage=ImageLocalServiceUtil.fetchImage(entry.getSmallImageId());
    if (Validator.isNotNull(entry.getSmallImageURL())) {
      String smallImageURL=exportImportContentProcessor.replaceExportContentReferences(portletDataContext,entry,entry.getSmallImageURL() + StringPool.SPACE,true,true);
      entry.setSmallImageURL(smallImageURL);
    }
 else     if (smallImage != null) {
      String smallImagePath=ExportImportPathUtil.getModelPath(entry,smallImage.getImageId() + StringPool.PERIOD + smallImage.getType());
      entryElement.addAttribute("small-image-path",smallImagePath);
      entry.setSmallImageType(smallImage.getType());
      portletDataContext.addZipEntry(smallImagePath,smallImage.getTextObj());
    }
  }
  if (entry.getSmallImageFileEntryId() != 0) {
    FileEntry fileEntry=PortletFileRepositoryUtil.getPortletFileEntry(entry.getSmallImageFileEntryId());
    StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext,entry,fileEntry,PortletDataContext.REFERENCE_TYPE_WEAK);
  }
  String content=exportImportContentProcessor.replaceExportContentReferences(portletDataContext,entry,entry.getContent(),portletDataContext.getBooleanParameter("blogs","referenced-content"),true);
  entry.setContent(content);
  portletDataContext.addClassedModel(entryElement,ExportImportPathUtil.getModelPath(entry),entry);
}
