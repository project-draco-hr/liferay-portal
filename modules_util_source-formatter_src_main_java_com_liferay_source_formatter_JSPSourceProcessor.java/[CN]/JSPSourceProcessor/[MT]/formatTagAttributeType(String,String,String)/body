{
  if (attributeAndValue.matches(".*=\"<%= Boolean\\.(FALSE|TRUE) %>\".*")) {
    String newAttributeAndValue=StringUtil.replace(attributeAndValue,new String[]{"=\"<%= Boolean.FALSE %>\"","=\"<%= Boolean.TRUE %>\""},new String[]{"=\"<%= false %>\"","=\"<%= true %>\""});
    return StringUtil.replace(line,attributeAndValue,newAttributeAndValue);
  }
  if (!attributeAndValue.endsWith(StringPool.QUOTE) || attributeAndValue.contains("\"<%=")) {
    return line;
  }
  JavaClass tagJavaClass=_tagJavaClassesMap.get(tagName);
  if (tagJavaClass == null) {
    return line;
  }
  int pos=attributeAndValue.indexOf("=\"");
  String attribute=attributeAndValue.substring(0,pos);
  String setAttributeMethodName="set" + TextFormatter.format(attribute,TextFormatter.G);
  for (  String dataType : getPrimitiveTagAttributeDataTypes()) {
    Type javaType=new Type(dataType);
    JavaMethod setAttributeMethod=null;
    while (true) {
      try {
        setAttributeMethod=tagJavaClass.getMethodBySignature(setAttributeMethodName,new Type[]{javaType},true);
        break;
      }
 catch (      Exception e) {
      }
    }
    if (setAttributeMethod != null) {
      String value=attributeAndValue.substring(pos + 2,attributeAndValue.length() - 1);
      if (!isValidTagAttributeValue(value,dataType)) {
        return line;
      }
      String newAttributeAndValue=StringUtil.replace(attributeAndValue,StringPool.QUOTE + value + StringPool.QUOTE,"\"<%= " + value + " %>\"");
      return StringUtil.replace(line,attributeAndValue,newAttributeAndValue);
    }
  }
  if (!attributeAndValue.matches(".*=\"(false|true)\".*")) {
    return line;
  }
  JavaMethod setAttributeMethod=tagJavaClass.getMethodBySignature(setAttributeMethodName,new Type[]{new Type("java.lang.String")},true);
  if (setAttributeMethod == null) {
    return line;
  }
  String newAttributeAndValue=StringUtil.replace(attributeAndValue,new String[]{"=\"false\"","=\"true\""},new String[]{"=\"<%= Boolean.FALSE.toString() %>\"","=\"<%= Boolean.TRUE.toString() %>\""});
  return StringUtil.replace(line,attributeAndValue,newAttributeAndValue);
}
