{
  String newContent=formatJSP(fileName,absolutePath,content);
  newContent=StringUtil.replace(newContent,new String[]{"<br/>","@page import","\"%>",")%>","function (","javascript: ","){\n",";;\n","\n\n\n"},new String[]{"<br />","@ page import","\" %>",") %>","function(","javascript:",") {\n",";\n","\n\n"});
  newContent=fixRedirectBackURL(newContent);
  newContent=fixCompatClassImports(absolutePath,newContent);
  newContent=fixEmptyLineInNestedTags(newContent,_emptyLineInNestedTagsPattern1,true);
  newContent=fixEmptyLineInNestedTags(newContent,_emptyLineInNestedTagsPattern2,false);
  newContent=fixEmptyLineInNestedTags(newContent,_emptyLineInNestedTagsPattern3,false);
  newContent=fixMissingEmptyLinesBetweenTags(newContent);
  newContent=fixIncorrectClosingTag(newContent);
  newContent=formatMultilineTagAttributes(fileName,newContent);
  if (_stripJSPImports && !_jspContents.isEmpty()) {
    try {
      newContent=formatJSPImportsOrTaglibs(fileName,newContent,_compressedJSPImportPattern,_uncompressedJSPImportPattern,true);
      newContent=formatJSPImportsOrTaglibs(fileName,newContent,_compressedJSPTaglibPattern,_uncompressedJSPTaglibPattern,false);
    }
 catch (    RuntimeException re) {
      _stripJSPImports=false;
    }
  }
  if (portalSource && content.contains("page import=") && !fileName.contains("init.jsp")&& !fileName.contains("init-ext.jsp")&& !fileName.contains("/taglib/aui/")&& !fileName.endsWith("touch.jsp")&& (fileName.endsWith(".jspf") || content.contains("include file="))) {
    processErrorMessage(fileName,"move imports to init.jsp: " + fileName);
  }
  newContent=fixCopyright(newContent,absolutePath,fileName);
  newContent=StringUtil.replace(newContent,new String[]{"alert('<%= LanguageUtil.","alert(\"<%= LanguageUtil.","confirm('<%= LanguageUtil.","confirm(\"<%= LanguageUtil."},new String[]{"alert('<%= UnicodeLanguageUtil.","alert(\"<%= UnicodeLanguageUtil.","confirm('<%= UnicodeLanguageUtil.","confirm(\"<%= UnicodeLanguageUtil."});
  if (newContent.contains("    ")) {
    if (!fileName.matches(".*template.*\\.vm$")) {
      processErrorMessage(fileName,"tab: " + fileName);
    }
  }
  newContent=compressImportsOrTaglibs(fileName,newContent,"<%@ page import=");
  newContent=compressImportsOrTaglibs(fileName,newContent,"<%@ taglib uri=");
  newContent=fixSessionKey(fileName,newContent,sessionKeyPattern);
  newContent=fixSessionKey(fileName,newContent,taglibSessionKeyPattern);
  checkLanguageKeys(fileName,absolutePath,newContent,languageKeyPattern);
  checkLanguageKeys(fileName,absolutePath,newContent,_taglibLanguageKeyPattern1);
  checkLanguageKeys(fileName,absolutePath,newContent,_taglibLanguageKeyPattern2);
  checkLanguageKeys(fileName,absolutePath,newContent,_taglibLanguageKeyPattern3);
  newContent=formatJSONObject(newContent);
  newContent=formatStringBundler(fileName,newContent,-1);
  newContent=formatTaglibVariable(fileName,newContent);
  checkXSS(fileName,newContent);
  newContent=fixIncorrectParameterTypeForLanguageUtil(newContent,true,fileName);
  newContent=checkPrincipalException(newContent);
  newContent=formatLogFileName(absolutePath,newContent);
  newContent=formatDefineObjects(newContent);
  if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) {
    processErrorMessage(fileName,"Do not use Registry in modules: " + fileName);
  }
  checkPropertyUtils(fileName,newContent);
  checkStringUtilReplace(fileName,newContent);
  Matcher matcher=_javaClassPattern.matcher(newContent);
  if (matcher.find()) {
    String javaClassContent=matcher.group();
    javaClassContent=javaClassContent.substring(1);
    String javaClassName=matcher.group(2);
    int javaClassLineCount=getLineCount(newContent,matcher.start() + 1);
    newContent=formatJavaTerms(javaClassName,null,file,fileName,absolutePath,newContent,javaClassContent,javaClassLineCount,null,null,null,null);
  }
  if (!content.equals(newContent)) {
    _jspContents.put(fileName,newContent);
  }
  return newContent;
}
