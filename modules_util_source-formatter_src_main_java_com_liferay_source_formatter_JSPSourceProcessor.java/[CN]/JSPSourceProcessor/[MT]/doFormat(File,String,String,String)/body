{
  Set<String> checkedForIncludesFileNames=new HashSet<>();
  Set<String> includeFileNames=new HashSet<>();
  String newContent=formatJSP(fileName,absolutePath,content,checkedForIncludesFileNames,includeFileNames);
  newContent=StringUtil.replace(newContent,new String[]{"<br/>","@page import","\"%>",")%>","function (","javascript: ","){\n",";;\n","\n\n\n"},new String[]{"<br />","@ page import","\" %>",") %>","function(","javascript:",") {\n",";\n","\n\n"});
  newContent=fixRedirectBackURL(newContent);
  newContent=fixCompatClassImports(absolutePath,newContent);
  newContent=fixEmptyLinesInNestedTags(newContent);
  newContent=fixEmptyLinesBetweenTags(newContent);
  newContent=fixIncorrectClosingTag(newContent);
  newContent=fixEmptyJavaSourceTag(newContent);
  newContent=formatMultilineTagAttributes(fileName,newContent);
  Matcher matcher=_missingEmptyLinePattern.matcher(newContent);
  if (matcher.find()) {
    newContent=StringUtil.replaceFirst(newContent,StringPool.NEW_LINE,StringPool.BLANK,matcher.start(1));
  }
  matcher=_directiveLinePattern.matcher(newContent);
  while (matcher.find()) {
    String directiveLine=matcher.group();
    String newDirectiveLine=formatIncorrectSyntax(directiveLine," =","=",false);
    newDirectiveLine=formatIncorrectSyntax(newDirectiveLine,"= ","=",false);
    if (!directiveLine.equals(newDirectiveLine)) {
      newContent=StringUtil.replace(newContent,directiveLine,newDirectiveLine);
    }
  }
  if (_stripJSPImports && !_jspContents.isEmpty()) {
    try {
      newContent=formatJSPImportsOrTaglibs(fileName,newContent,_compressedJSPImportPattern,_uncompressedJSPImportPattern,true,checkedForIncludesFileNames,includeFileNames);
      newContent=formatJSPImportsOrTaglibs(fileName,newContent,_compressedJSPTaglibPattern,_uncompressedJSPTaglibPattern,false,checkedForIncludesFileNames,includeFileNames);
    }
 catch (    RuntimeException re) {
      _stripJSPImports=false;
    }
  }
  if (portalSource && content.contains("page import=") && !fileName.contains("init.jsp")&& !fileName.contains("init-ext.jsp")&& !fileName.contains("/taglib/aui/")&& !fileName.endsWith("touch.jsp")&& (fileName.endsWith(".jspf") || content.contains("include file="))) {
    processMessage(fileName,"move imports to init.jsp");
  }
  newContent=fixCopyright(newContent,absolutePath,fileName,null);
  newContent=StringUtil.replace(newContent,new String[]{"alert('<%= LanguageUtil.","alert(\"<%= LanguageUtil.","confirm('<%= LanguageUtil.","confirm(\"<%= LanguageUtil."},new String[]{"alert('<%= UnicodeLanguageUtil.","alert(\"<%= UnicodeLanguageUtil.","confirm('<%= UnicodeLanguageUtil.","confirm(\"<%= UnicodeLanguageUtil."});
  if (newContent.contains("    ")) {
    if (!fileName.matches(".*template.*\\.vm$")) {
      processMessage(fileName,"tab");
    }
  }
  newContent=compressImportsOrTaglibs(fileName,newContent,"<%@ page import=");
  newContent=compressImportsOrTaglibs(fileName,newContent,"<%@ taglib uri=");
  newContent=fixSessionKey(fileName,newContent,sessionKeyPattern);
  newContent=fixSessionKey(fileName,newContent,taglibSessionKeyPattern);
  checkLanguageKeys(fileName,absolutePath,newContent,languageKeyPattern);
  checkLanguageKeys(fileName,absolutePath,newContent,_taglibLanguageKeyPattern1);
  checkLanguageKeys(fileName,absolutePath,newContent,_taglibLanguageKeyPattern2);
  checkLanguageKeys(fileName,absolutePath,newContent,_taglibLanguageKeyPattern3);
  newContent=sortPutOrSetCalls(newContent,jsonObjectPutBlockPattern,jsonObjectPutPattern);
  newContent=sortPutOrSetCalls(newContent,setAttributeBlockPattern,setAttributePattern);
  newContent=formatStringBundler(fileName,newContent,-1);
  newContent=formatTaglibVariable(fileName,newContent);
  newContent=fixXSSVulnerability(fileName,newContent);
  newContent=fixIncorrectParameterTypeForLanguageUtil(newContent,true,fileName);
  newContent=checkPrincipalException(newContent);
  newContent=formatLogFileName(absolutePath,newContent);
  newContent=formatDefineObjects(newContent);
  if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) {
    processMessage(fileName,"Do not use Registry in modules");
  }
  if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.util.ContentUtil")) {
    processMessage(fileName,"Do not use com.liferay.util.ContentUtil in modules");
  }
  checkPropertyUtils(fileName,newContent);
  checkStringUtilReplace(fileName,newContent);
  checkGetterUtilGet(fileName,newContent);
  checkValidatorEquals(fileName,newContent);
  matcher=_javaClassPattern.matcher(newContent);
  if (matcher.find()) {
    String javaClassContent=matcher.group();
    javaClassContent=javaClassContent.substring(1);
    String javaClassName=matcher.group(2);
    int javaClassLineCount=getLineCount(newContent,matcher.start() + 1);
    newContent=formatJavaTerms(javaClassName,null,file,fileName,absolutePath,newContent,javaClassContent,javaClassLineCount,StringPool.BLANK,null,null,null,null);
  }
  JSPSourceTabCalculator jspSourceTabCalculator=new JSPSourceTabCalculator();
  newContent=jspSourceTabCalculator.calculateTabs(fileName,newContent,(JSPSourceProcessor)this);
  if (!content.equals(newContent)) {
    _jspContents.put(fileName,newContent);
  }
  return newContent;
}
