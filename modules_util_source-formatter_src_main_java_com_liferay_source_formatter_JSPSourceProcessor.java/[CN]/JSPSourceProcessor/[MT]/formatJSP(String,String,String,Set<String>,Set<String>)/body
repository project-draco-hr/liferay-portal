{
  StringBundler sb=new StringBundler();
  String currentException=null;
  String previousException=null;
  boolean hasUnsortedExceptions=false;
  try (UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content))){
    int lineCount=0;
    String line=null;
    String previousLine=StringPool.BLANK;
    boolean javaSource=false;
    while ((line=unsyncBufferedReader.readLine()) != null) {
      lineCount++;
      if (portalSource && hasUnusedTaglib(fileName,line,checkedForIncludesFileNames,includeFileNames)) {
        continue;
      }
      if (!fileName.contains("jsonw") || !fileName.endsWith("action.jsp")) {
        line=trimLine(line,false);
      }
      if (line.contains("<aui:button ") && line.contains("type=\"button\"")) {
        processErrorMessage(fileName,"aui:button " + fileName + " "+ lineCount);
      }
      if (line.contains("debugger.")) {
        processErrorMessage(fileName,"debugger " + fileName + " "+ lineCount);
      }
      String trimmedLine=StringUtil.trimLeading(line);
      String trimmedPreviousLine=StringUtil.trimLeading(previousLine);
      if (line.matches(".*\\WgetClass\\(\\)\\..+")) {
        processErrorMessage(fileName,"chaining: " + fileName + " "+ lineCount);
      }
      checkEmptyCollection(trimmedLine,fileName,lineCount);
      line=formatEmptyArray(line);
      if (trimmedLine.equals("<%") || trimmedLine.equals("<%!")) {
        javaSource=true;
      }
 else       if (trimmedLine.equals("%>")) {
        javaSource=false;
      }
      checkInefficientStringMethods(line,fileName,absolutePath,lineCount,javaSource);
      if (javaSource) {
        if (portalSource && !isExcludedPath(_unusedVariablesExcludes,absolutePath,lineCount) && !_jspContents.isEmpty()&& hasUnusedVariable(fileName,trimmedLine,checkedForIncludesFileNames,includeFileNames)) {
          continue;
        }
      }
      if (!trimmedLine.startsWith(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
        line=formatIncorrectSyntax(line,"\t ","\t",false);
        line=formatWhitespace(line,javaSource);
        if (line.endsWith(">")) {
          if (line.endsWith("/>")) {
            if (!trimmedLine.equals("/>") && !line.endsWith(" />")) {
              line=StringUtil.replaceLast(line,"/>"," />");
            }
          }
 else           if (line.endsWith(" >")) {
            line=StringUtil.replaceLast(line," >",">");
          }
        }
      }
      if (line.contains(".sendRedirect(") && !fileName.endsWith("_jsp.jsp")) {
        processErrorMessage(fileName,"Do not use sendRedirect in jsp: " + fileName + " "+ lineCount);
      }
      if (javaSource) {
        line=StringUtil.replace(line,"LanguageUtil.get(locale,","LanguageUtil.get(request,");
      }
 else {
        Matcher matcher=javaSourceInsideJSPLinePattern.matcher(line);
        while (matcher.find()) {
          String match=matcher.group(1);
          String replacement=StringUtil.replace(match,"LanguageUtil.get(locale,","LanguageUtil.get(request,");
          line=StringUtil.replace(line,match,replacement);
        }
      }
      checkResourceUtil(line,fileName,lineCount);
      checkDefineObjectsVariables(line,fileName,absolutePath,lineCount);
      if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) {
        processErrorMessage(fileName,"System.out.print: " + fileName + " "+ lineCount);
      }
      if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>")&& !line.contains(" %>")) {
        line=StringUtil.replace(line,"%>"," %>");
      }
      if (line.contains("<%=") && !line.contains("<%= ")) {
        line=StringUtil.replace(line,"<%=","<%= ");
      }
      if (javaSource && (trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")) && trimmedLine.endsWith(") {")) {
        checkIfClauseParentheses(trimmedLine,fileName,lineCount);
      }
      if (javaSource && trimmedLine.matches("^\\} (catch|else|finally) .*")) {
        processErrorMessage(fileName,"line break: " + fileName + " "+ lineCount);
      }
      Matcher matcher=_ifTagPattern.matcher(trimmedLine);
      if (matcher.find()) {
        String ifClause="if (" + matcher.group(2) + ") {";
        checkIfClauseParentheses(ifClause,fileName,lineCount);
      }
      matcher=_jspTaglibPattern.matcher(line);
      while (matcher.find()) {
        line=formatAttributes(fileName,line,line.substring(matcher.start()),lineCount,false);
      }
      if (trimmedLine.matches("<\\w+ .*>.*")) {
        line=formatAttributes(fileName,line,trimmedLine,lineCount,false);
      }
      if (!hasUnsortedExceptions) {
        int x=line.indexOf("<liferay-ui:error exception=\"<%=");
        if (x != -1) {
          int y=line.indexOf(".class %>",x);
          if (y != -1) {
            currentException=line.substring(x,y);
            if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) {
              currentException=line;
              previousException=previousLine;
              hasUnsortedExceptions=true;
            }
          }
        }
        if (!hasUnsortedExceptions) {
          previousException=currentException;
          currentException=null;
        }
      }
      if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
        while (trimmedLine.contains(StringPool.TAB)) {
          line=StringUtil.replaceLast(line,StringPool.TAB,StringPool.SPACE);
          trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.TAB,StringPool.SPACE);
        }
        while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) {
          line=StringUtil.replaceLast(line,StringPool.DOUBLE_SPACE,StringPool.SPACE);
          trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.DOUBLE_SPACE,StringPool.SPACE);
        }
      }
      if (!fileName.endsWith("/touch.jsp")) {
        int x=line.indexOf("<%@ include file");
        if (x != -1) {
          x=line.indexOf(CharPool.QUOTE,x);
          int y=line.indexOf(CharPool.QUOTE,x + 1);
          if (y != -1) {
            String includeFileName=line.substring(x + 1,y);
            matcher=_jspIncludeFilePattern.matcher(includeFileName);
            if (!matcher.find()) {
              processErrorMessage(fileName,"include: " + fileName + " "+ lineCount);
            }
          }
        }
      }
      line=replacePrimitiveWrapperInstantiation(line);
      if (lineCount > 1) {
        sb.append(previousLine);
        sb.append("\n");
        if (addExtraEmptyLine(previousLine,line,javaSource)) {
          sb.append("\n");
        }
      }
      previousLine=line;
    }
    sb.append(previousLine);
  }
   content=sb.toString();
  while (true) {
    Matcher matcher=_incorrectEmptyLinePattern1.matcher(content);
    if (matcher.find()) {
      content=StringUtil.replaceFirst(content,"\n\n","\n",matcher.start());
      continue;
    }
    matcher=_incorrectEmptyLinePattern2.matcher(content);
    if (matcher.find()) {
      content=StringUtil.replaceFirst(content,"\n\n","\n",matcher.start());
      continue;
    }
    break;
  }
  if (content.endsWith("\n")) {
    content=content.substring(0,content.length() - 1);
  }
  if (hasUnsortedExceptions) {
    if ((StringUtil.count(content,currentException) > 1) || (StringUtil.count(content,previousException) > 1)) {
      processErrorMessage(fileName,"unsorted exceptions: " + fileName);
    }
 else {
      content=StringUtil.replaceFirst(content,previousException,currentException);
      content=StringUtil.replaceLast(content,currentException,previousException);
    }
  }
  return content;
}
