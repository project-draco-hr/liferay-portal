{
  StringBundler sb=new StringBundler();
  String currentAttributeAndValue=null;
  String previousAttribute=null;
  String previousAttributeAndValue=null;
  String tag=null;
  String currentException=null;
  String previousException=null;
  boolean hasUnsortedExceptions=false;
  try (UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(content))){
    _checkedForIncludesFileNames=new HashSet<>();
    _includeFileNames=new HashSet<>();
    int lineCount=0;
    String line=null;
    String previousLine=StringPool.BLANK;
    boolean readAttributes=false;
    boolean javaSource=false;
    while ((line=unsyncBufferedReader.readLine()) != null) {
      lineCount++;
      if (portalSource && hasUnusedTaglib(fileName,line)) {
        continue;
      }
      if (!fileName.contains("jsonw") || !fileName.endsWith("action.jsp")) {
        line=trimLine(line,false);
      }
      if (line.contains("<aui:button ") && line.contains("type=\"button\"")) {
        processErrorMessage(fileName,"aui:button " + fileName + " "+ lineCount);
      }
      if (line.contains("debugger.")) {
        processErrorMessage(fileName,"debugger " + fileName + " "+ lineCount);
      }
      String trimmedLine=StringUtil.trimLeading(line);
      String trimmedPreviousLine=StringUtil.trimLeading(previousLine);
      checkStringBundler(trimmedLine,fileName,lineCount);
      checkEmptyCollection(trimmedLine,fileName,lineCount);
      if (trimmedLine.equals("<%") || trimmedLine.equals("<%!")) {
        javaSource=true;
      }
 else       if (trimmedLine.equals("%>")) {
        javaSource=false;
      }
      if (javaSource || trimmedLine.contains("<%= ")) {
        checkInefficientStringMethods(line,fileName,absolutePath,lineCount);
      }
      if (javaSource) {
        if (portalSource && !isExcludedFile(_unusedVariablesExclusionFiles,absolutePath,lineCount) && !_jspContents.isEmpty()&& hasUnusedVariable(fileName,trimmedLine)) {
          continue;
        }
      }
      line=formatWhitespace(line,trimmedLine,javaSource);
      if (line.contains(".sendRedirect(") && !fileName.endsWith("_jsp.jsp")) {
        processErrorMessage(fileName,"Do not use sendRedirect in jsp: " + fileName + " "+ lineCount);
      }
      if (!javaSource) {
        line=StringUtil.replace(line,"LanguageUtil.get(locale,","LanguageUtil.get(request,");
      }
      if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) {
        processErrorMessage(fileName,"System.out.print: " + fileName + " "+ lineCount);
      }
      if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>")&& !line.contains(" %>")) {
        line=StringUtil.replace(line,"%>"," %>");
      }
      if (line.contains("<%=") && !line.contains("<%= ")) {
        line=StringUtil.replace(line,"<%=","<%= ");
      }
      if (trimmedPreviousLine.equals("%>") && Validator.isNotNull(line) && !trimmedLine.equals("-->")) {
        sb.append("\n");
      }
 else       if (Validator.isNotNull(previousLine) && !trimmedPreviousLine.equals("<!--") && trimmedLine.equals("<%")) {
        sb.append("\n");
      }
 else       if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) {
        continue;
      }
 else       if (trimmedPreviousLine.equals("<%") && trimmedLine.startsWith("//")) {
        sb.append("\n");
      }
 else       if (Validator.isNull(previousLine) && trimmedLine.equals("%>") && (sb.index() > 2)) {
        String lineBeforePreviousLine=sb.stringAt(sb.index() - 3);
        if (!lineBeforePreviousLine.startsWith("//")) {
          sb.setIndex(sb.index() - 1);
        }
      }
      if ((trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")) && trimmedLine.endsWith(") {")) {
        checkIfClauseParentheses(trimmedLine,fileName,lineCount);
      }
      Matcher matcher=_ifTagPattern.matcher(trimmedLine);
      if (matcher.find()) {
        String ifClause="if (" + matcher.group(2) + ") {";
        checkIfClauseParentheses(ifClause,fileName,lineCount);
      }
      matcher=_jspTagAttributes.matcher(line);
      if (matcher.find()) {
        String attributes=matcher.group(1);
        Matcher attributeValueMatcher=_jspTagAttributeValue.matcher(attributes);
        while (attributeValueMatcher.find()) {
          String delimeter=attributeValueMatcher.group(1);
          String javaCode=attributeValueMatcher.group(2);
          if (delimeter.equals(StringPool.QUOTE) ^ javaCode.contains(StringPool.QUOTE)) {
            continue;
          }
          String newDelimeter=StringPool.QUOTE;
          if (delimeter.equals(StringPool.QUOTE)) {
            newDelimeter=StringPool.APOSTROPHE;
          }
          String match=attributeValueMatcher.group();
          String replacement=StringUtil.replaceFirst(match,delimeter,newDelimeter);
          replacement=StringUtil.replaceLast(replacement,delimeter,newDelimeter);
          line=StringUtil.replace(line,match,replacement);
        }
      }
      if (readAttributes) {
        if (!trimmedLine.startsWith(StringPool.FORWARD_SLASH) && !trimmedLine.startsWith(StringPool.GREATER_THAN)) {
          int pos=trimmedLine.indexOf(CharPool.EQUAL);
          if (pos != -1) {
            String attribute=trimmedLine.substring(0,pos);
            String newLine=formatTagAttributeType(line,tag,trimmedLine);
            if (!newLine.equals(line)) {
              line=newLine;
              readAttributes=false;
            }
 else             if (!trimmedLine.endsWith(StringPool.APOSTROPHE) && !trimmedLine.endsWith(StringPool.GREATER_THAN) && !trimmedLine.endsWith(StringPool.QUOTE)) {
              processErrorMessage(fileName,"attribute: " + fileName + " "+ lineCount);
              readAttributes=false;
            }
 else             if (trimmedLine.endsWith(StringPool.APOSTROPHE) && !trimmedLine.contains(StringPool.QUOTE)) {
              line=StringUtil.replace(line,StringPool.APOSTROPHE,StringPool.QUOTE);
              readAttributes=false;
            }
 else             if (Validator.isNotNull(previousAttribute)) {
              if (!isAttributName(attribute) && !attribute.startsWith(StringPool.LESS_THAN)) {
                processErrorMessage(fileName,"attribute: " + fileName + " "+ lineCount);
                readAttributes=false;
              }
 else               if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) {
                previousAttributeAndValue=previousLine;
                currentAttributeAndValue=line;
              }
            }
            if (!readAttributes) {
              previousAttribute=null;
              previousAttributeAndValue=null;
            }
 else {
              previousAttribute=attribute;
            }
          }
        }
 else {
          previousAttribute=null;
          readAttributes=false;
        }
      }
      if (!hasUnsortedExceptions) {
        int x=line.indexOf("<liferay-ui:error exception=\"<%=");
        if (x != -1) {
          int y=line.indexOf(".class %>",x);
          if (y != -1) {
            currentException=line.substring(x,y);
            if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) {
              currentException=line;
              previousException=previousLine;
              hasUnsortedExceptions=true;
            }
          }
        }
        if (!hasUnsortedExceptions) {
          previousException=currentException;
          currentException=null;
        }
      }
      if (trimmedLine.startsWith(StringPool.LESS_THAN) && !trimmedLine.startsWith("<%") && !trimmedLine.startsWith("<!")) {
        if (!trimmedLine.contains(StringPool.GREATER_THAN) && !trimmedLine.contains(StringPool.SPACE)) {
          tag=trimmedLine.substring(1);
          readAttributes=true;
        }
 else {
          line=sortAttributes(fileName,line,lineCount,true);
        }
      }
      if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) {
        while (trimmedLine.contains(StringPool.TAB)) {
          line=StringUtil.replaceLast(line,StringPool.TAB,StringPool.SPACE);
          trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.TAB,StringPool.SPACE);
        }
        while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) {
          line=StringUtil.replaceLast(line,StringPool.DOUBLE_SPACE,StringPool.SPACE);
          trimmedLine=StringUtil.replaceLast(trimmedLine,StringPool.DOUBLE_SPACE,StringPool.SPACE);
        }
      }
      if (!fileName.endsWith("/touch.jsp")) {
        int x=line.indexOf("<%@ include file");
        if (x != -1) {
          x=line.indexOf(CharPool.QUOTE,x);
          int y=line.indexOf(CharPool.QUOTE,x + 1);
          if (y != -1) {
            String includeFileName=line.substring(x + 1,y);
            matcher=_jspIncludeFilePattern.matcher(includeFileName);
            if (!matcher.find()) {
              processErrorMessage(fileName,"include: " + fileName + " "+ lineCount);
            }
          }
        }
      }
      line=replacePrimitiveWrapperInstantiation(line);
      previousLine=line;
      sb.append(line);
      sb.append("\n");
    }
  }
   content=sb.toString();
  if (content.endsWith("\n")) {
    content=content.substring(0,content.length() - 1);
  }
  if (Validator.isNotNull(previousAttributeAndValue)) {
    content=StringUtil.replaceFirst(content,previousAttributeAndValue + "\n" + currentAttributeAndValue,currentAttributeAndValue + "\n" + previousAttributeAndValue);
  }
  if (hasUnsortedExceptions) {
    if ((StringUtil.count(content,currentException) > 1) || (StringUtil.count(content,previousException) > 1)) {
      processErrorMessage(fileName,"unsorted exceptions: " + fileName);
    }
 else {
      content=StringUtil.replaceFirst(content,previousException,currentException);
      content=StringUtil.replaceLast(content,currentException,previousException);
    }
  }
  return content;
}
