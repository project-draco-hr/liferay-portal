{
  Map<String,String> arguments=ArgumentsUtil.parseArguments(args);
  String init=arguments.get("javadoc.init");
  if (Validator.isNotNull(init) && !init.startsWith("$")) {
    _initializeMissingJavadocs=GetterUtil.getBoolean(init);
  }
  _inputDir=GetterUtil.getString(arguments.get("javadoc.input.dir"));
  if (_inputDir.startsWith("$")) {
    _inputDir="./";
  }
  if (!_inputDir.endsWith("/")) {
    _inputDir+="/";
  }
  System.out.println("Input directory is " + _inputDir);
  String[] limits=StringUtil.split(arguments.get("javadoc.limit"),",");
  _outputFilePrefix=GetterUtil.getString(arguments.get("javadoc.output.file.prefix"));
  if (_outputFilePrefix.startsWith("$")) {
    _outputFilePrefix="javadocs";
  }
  String update=arguments.get("javadoc.update");
  if (Validator.isNotNull(update) && !update.startsWith("$")) {
    _updateJavadocs=GetterUtil.getBoolean(update);
  }
  DirectoryScanner directoryScanner=new DirectoryScanner();
  directoryScanner.setBasedir(_inputDir);
  directoryScanner.setExcludes(new String[]{"**\\classes\\**","**\\portal-client\\**"});
  for (  String limit : limits) {
    List<String> includes=new ArrayList<String>();
    if (Validator.isNotNull(limit) && !limit.startsWith("$")) {
      System.out.println("Limit on " + limit);
      String[] limitArray=StringUtil.split(limit,'/');
      for (      String curLimit : limitArray) {
        includes.add("**\\" + StringUtil.replace(curLimit,".","\\") + "\\**\\*.java");
        includes.add("**\\" + curLimit + ".java");
      }
    }
 else {
      includes.add("**\\*.java");
    }
    directoryScanner.setIncludes(includes.toArray(new String[includes.size()]));
    directoryScanner.scan();
    String[] fileNames=StringPool.EMPTY_ARRAY;
    fileNames=directoryScanner.getIncludedFiles();
    if ((fileNames.length == 0) && Validator.isNotNull(limit) && !limit.startsWith("$")) {
      StringBundler sb=new StringBundler("Limit file not found: ");
      sb.append(limit);
      if (limit.contains(".")) {
        sb.append(" Specify limit filename without package path or ");
        sb.append("file type suffix.");
      }
      System.out.println(sb.toString());
    }
    _languagePropertiesFile=new File("src/content/Language.properties");
    if (_languagePropertiesFile.exists()) {
      _languageProperties=new Properties();
      _languageProperties.load(new FileInputStream(_languagePropertiesFile.getAbsolutePath()));
    }
    for (    String fileName : fileNames) {
      fileName=StringUtil.replace(fileName,"\\","/");
      try {
        _format(fileName);
      }
 catch (      Exception e) {
        throw new RuntimeException("Unable to format file " + fileName,e);
      }
    }
  }
  for (  Map.Entry<String,Tuple> entry : _javadocxXmlTuples.entrySet()) {
    Tuple tuple=entry.getValue();
    File javadocsXmlFile=(File)tuple.getObject(1);
    String oldJavadocsXmlContent=(String)tuple.getObject(2);
    Document javadocsXmlDocument=(Document)tuple.getObject(3);
    Element javadocsXmlRootElement=javadocsXmlDocument.getRootElement();
    javadocsXmlRootElement.sortElementsByChildElement("javadoc","type");
    String newJavadocsXmlContent=javadocsXmlDocument.formattedString();
    if (!oldJavadocsXmlContent.equals(newJavadocsXmlContent)) {
      _fileUtil.write(javadocsXmlFile,newJavadocsXmlContent);
    }
    _detachUnnecessaryTypes(javadocsXmlRootElement);
    File javadocsRuntimeXmlFile=new File(StringUtil.replaceLast(javadocsXmlFile.toString(),"-all.xml","-rt.xml"));
    String oldJavadocsRuntimeXmlContent=StringPool.BLANK;
    if (javadocsRuntimeXmlFile.exists()) {
      oldJavadocsRuntimeXmlContent=_fileUtil.read(javadocsRuntimeXmlFile);
    }
    String newJavadocsRuntimeXmlContent=javadocsXmlDocument.compactString();
    if (!oldJavadocsRuntimeXmlContent.equals(newJavadocsRuntimeXmlContent)) {
      _fileUtil.write(javadocsRuntimeXmlFile,newJavadocsRuntimeXmlContent);
    }
  }
}
