{
  ArrayList<String> allTags=new ArrayList<String>();
  ArrayList<String> commonCommentedTags=new ArrayList<String>();
  ArrayList<String> nonCommonTags=new ArrayList<String>();
  for (  String tagName : tagNames) {
    List<Element> elements=parentElement.elements(tagName);
    for (    Element element : elements) {
      Element commentElement=element.element("comment");
      String comment=null;
      if (commentElement != null) {
        comment=commentElement.getText();
      }
 else {
        comment=element.getText();
      }
      if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) {
        if (Validator.isNotNull(comment)) {
          commonCommentedTags.add(tagName);
        }
      }
 else {
        nonCommonTags.add(tagName);
      }
      allTags.add(tagName);
    }
  }
  ArrayList<String> tagsToMeasure=new ArrayList<String>();
  if (_initializeMissingJavadocs) {
    tagsToMeasure.addAll(allTags);
  }
 else {
    tagsToMeasure.addAll(commonCommentedTags);
    tagsToMeasure.addAll(nonCommonTags);
  }
  int maxNameLength=0;
  for (  String tagName : tagsToMeasure) {
    if (tagName.length() > maxNameLength) {
      maxNameLength=tagName.length();
    }
  }
  StringBundler sb=new StringBundler();
  maxNameLength+=2;
  String nameIndent=_getSpacesIndent(maxNameLength);
  for (  String tagName : tagNames) {
    List<Element> elements=parentElement.elements(tagName);
    for (    Element element : elements) {
      Element commentElement=element.element("comment");
      String comment=null;
      if (commentElement != null) {
        comment=commentElement.getText();
      }
 else {
        comment=element.getText();
      }
      String elementName=null;
      if (commentElement != null) {
        elementName=element.elementText("name");
      }
      if (Validator.isNotNull(comment)) {
        comment=_assembleTagComment(tagName,elementName,comment,indent,nameIndent);
        sb.append(comment);
      }
 else {
        if (_initializeMissingJavadocs && publicAccess) {
          comment=_assembleTagComment(tagName,elementName,comment,indent,nameIndent);
          sb.append(comment);
        }
 else {
          if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) {
            comment=_assembleTagComment(tagName,elementName,comment,indent,nameIndent);
            sb.append(comment);
          }
 else {
          }
        }
      }
    }
  }
  return sb.toString();
}
