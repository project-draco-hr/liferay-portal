{
  List<String> allTagNames=new ArrayList<String>();
  List<String> commonTagNamesWithComments=new ArrayList<String>();
  List<String> customTagNames=new ArrayList<String>();
  for (  String tagName : tagNames) {
    List<Element> elements=parentElement.elements(tagName);
    for (    Element element : elements) {
      Element commentElement=element.element("comment");
      String comment=null;
      if (commentElement != null) {
        comment=commentElement.getText();
      }
 else {
        comment=element.getText();
      }
      if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) {
        if (Validator.isNotNull(comment)) {
          commonTagNamesWithComments.add(tagName);
        }
      }
 else {
        customTagNames.add(tagName);
      }
      allTagNames.add(tagName);
    }
  }
  int maxTagNameLength=0;
  List<String> maxTagNameLengthTags=new ArrayList<String>();
  if (_initializeMissingJavadocs) {
    maxTagNameLengthTags.addAll(allTagNames);
  }
 else   if (_updateJavadocs) {
    if (!commonTagNamesWithComments.isEmpty()) {
      maxTagNameLengthTags.addAll(allTagNames);
    }
 else {
      maxTagNameLengthTags.addAll(commonTagNamesWithComments);
      maxTagNameLengthTags.addAll(customTagNames);
    }
  }
 else {
    maxTagNameLengthTags.addAll(commonTagNamesWithComments);
    maxTagNameLengthTags.addAll(customTagNames);
  }
  for (  String name : maxTagNameLengthTags) {
    if (name.length() > maxTagNameLength) {
      maxTagNameLength=name.length();
    }
  }
  maxTagNameLength+=2;
  String tagNameIndent=_getSpacesIndent(maxTagNameLength);
  StringBundler sb=new StringBundler();
  for (  String tagName : tagNames) {
    List<Element> elements=parentElement.elements(tagName);
    for (    Element element : elements) {
      Element commentElement=element.element("comment");
      String comment=null;
      if (commentElement != null) {
        comment=commentElement.getText();
      }
 else {
        comment=element.getText();
      }
      String elementName=null;
      if (commentElement != null) {
        elementName=element.elementText("name");
      }
      if (Validator.isNotNull(comment)) {
        comment=_assembleTagComment(tagName,elementName,comment,indent,tagNameIndent);
        sb.append(comment);
      }
 else {
        if (_initializeMissingJavadocs && publicAccess) {
          comment=_assembleTagComment(tagName,elementName,comment,indent,tagNameIndent);
          sb.append(comment);
        }
 else         if (_updateJavadocs && publicAccess) {
          if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) {
            comment=_assembleTagComment(tagName,elementName,comment,indent,tagNameIndent);
            sb.append(comment);
          }
 else           if (!commonTagNamesWithComments.isEmpty()) {
            comment=_assembleTagComment(tagName,elementName,comment,indent,tagNameIndent);
            sb.append(comment);
          }
 else {
          }
        }
 else {
          if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) {
            comment=_assembleTagComment(tagName,elementName,comment,indent,tagNameIndent);
            sb.append(comment);
          }
 else {
          }
        }
      }
    }
  }
  return sb.toString();
}
