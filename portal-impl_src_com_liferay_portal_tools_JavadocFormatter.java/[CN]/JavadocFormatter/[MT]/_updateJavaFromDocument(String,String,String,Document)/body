{
  String[] lines=StringUtil.split(javadocLessContent,"\n");
  JavaClass javaClass=_getJavaClass(fileName,new UnsyncStringReader(javadocLessContent));
  List<JavaClass> ancestorJavaClasses=_getAncestorJavaClasses(javaClass);
  Element rootElement=document.getRootElement();
  Map<Integer,String> commentsMap=new TreeMap<Integer,String>();
  commentsMap.put(_getJavaClassLineNumber(javaClass),_getJavaClassComment(rootElement,javaClass));
  Map<String,Element> methodElementsMap=new HashMap<String,Element>();
  List<Element> methodElements=rootElement.elements("method");
  for (  Element methodElement : methodElements) {
    String methodKey=_getMethodKey(methodElement);
    methodElementsMap.put(methodKey,methodElement);
  }
  JavaMethod[] javaMethods=javaClass.getMethods();
  for (  JavaMethod javaMethod : javaMethods) {
    if (commentsMap.containsKey(javaMethod.getLineNumber())) {
      continue;
    }
    String javaMethodComment=_getJavaMethodComment(lines,methodElementsMap,javaMethod);
    if (!_hasAnnotation(javaMethod,"Override")) {
      if (_isOverrideMethod(javaClass,javaMethod,ancestorJavaClasses)) {
        String overrideLine=_getIndent(lines,javaMethod) + "@Override\n";
        if (Validator.isNotNull(javaMethodComment)) {
          javaMethodComment=javaMethodComment + overrideLine;
        }
 else {
          javaMethodComment=overrideLine;
        }
      }
    }
    commentsMap.put(javaMethod.getLineNumber(),javaMethodComment);
  }
  Map<String,Element> fieldElementsMap=new HashMap<String,Element>();
  List<Element> fieldElements=rootElement.elements("field");
  for (  Element fieldElement : fieldElements) {
    String fieldKey=_getFieldKey(fieldElement);
    fieldElementsMap.put(fieldKey,fieldElement);
  }
  JavaField[] javaFields=javaClass.getFields();
  for (  JavaField javaField : javaFields) {
    if (commentsMap.containsKey(javaField.getLineNumber())) {
      continue;
    }
    commentsMap.put(javaField.getLineNumber(),_getJavaFieldComment(lines,fieldElementsMap,javaField));
  }
  StringBuilder sb=new StringBuilder(javadocLessContent.length());
  for (int lineNumber=1; lineNumber <= lines.length; lineNumber++) {
    String line=lines[lineNumber - 1];
    String comments=commentsMap.get(lineNumber);
    if (comments != null) {
      sb.append(comments);
    }
    sb.append(line);
    sb.append("\n");
  }
  String formattedContent=sb.toString().trim();
  if (!originalContent.equals(formattedContent)) {
    File file=new File(_basedir + fileName);
    _fileUtil.write(file,formattedContent.getBytes());
    System.out.println("Writing " + file);
  }
}
