{
  if (cdata == null) {
    return StringPool.BLANK;
  }
  cdata=cdata.replaceAll("(?s)\\s*<(p|pre|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*","\n\n<$1>\n$2\n</$1>\n\n");
  cdata=cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*","\n<li>\n$1\n</li>\n");
  cdata=StringUtil.replace(cdata,"</li>\n\n<li>","</li>\n<li>");
  cdata=cdata.replaceAll("\n\\s+\n","\n\n");
  if (cdata.contains("<pre>")) {
    String[] sections=cdata.split("<pre>");
    for (int i=0; i < sections.length; i++) {
      if (!sections[i].contains("</pre>")) {
        sections[i]=sections[i].replaceAll(" +"," ");
      }
    }
    StringBuffer sb=new StringBuffer();
    for (int i=0; i < sections.length; i++) {
      if (sections[i].contains("</pre>")) {
        sb.append("<pre>");
      }
      sb.append(sections[i]);
    }
    cdata=sb.toString();
  }
 else {
    cdata.replaceAll(" +"," ");
  }
  Pattern pattern=Pattern.compile("(^.*?(?=\n\n|$)+|(?<=<p>\n).*?(?=\n</p>))",Pattern.DOTALL);
  Matcher matcher=pattern.matcher(cdata);
  StringBuffer sb=new StringBuffer();
  while (matcher.find()) {
    String trimmed=_trimMultilineText(matcher.group());
    trimmed=trimmed.replaceAll("\\$","\\\\\\$");
    matcher.appendReplacement(sb,trimmed);
  }
  matcher.appendTail(sb);
  if (!cdata.contains("<pre>")) {
    cdata=sb.toString();
  }
  return cdata.trim();
}
