{
  if (javaClass.isInterface() || javaMethod.isStatic() || javaMethod.isPrivate()|| javaMethod.isConstructor()) {
    return false;
  }
  String methodName=javaMethod.getName();
  JavaParameter[] methodParams=javaMethod.getParameters();
  Type[] paramTypes=new Type[methodParams.length];
  for (int i=0; i < methodParams.length; i++) {
    paramTypes[i]=methodParams[i].getType();
  }
  for (  JavaClass ancestor : ancestors) {
    JavaMethod ancestorMethod=ancestor.getMethodBySignature(methodName,paramTypes);
    if (ancestorMethod == null) {
      continue;
    }
    boolean isSamePackage=false;
    if (Validator.isNotNull(ancestor.getPackage())) {
      isSamePackage=ancestor.getPackage().equals(javaClass.getPackage());
    }
    if (isSamePackage) {
      return !ancestorMethod.isPrivate();
    }
 else {
      return ancestorMethod.isPublic() || ancestorMethod.isProtected();
    }
  }
  return false;
}
