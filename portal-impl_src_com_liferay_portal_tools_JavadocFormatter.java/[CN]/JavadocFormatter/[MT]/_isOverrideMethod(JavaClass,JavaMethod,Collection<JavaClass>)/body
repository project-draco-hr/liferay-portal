{
  if (javaMethod.isConstructor() || javaMethod.isPrivate() || javaMethod.isStatic()) {
    return false;
  }
  String methodName=javaMethod.getName();
  JavaParameter[] javaParameters=javaMethod.getParameters();
  Type[] types=new Type[javaParameters.length];
  for (int i=0; i < javaParameters.length; i++) {
    types[i]=javaParameters[i].getType();
  }
  for (  JavaClass ancestorJavaClass : ancestorJavaClasses) {
    JavaMethod ancestorJavaMethod=ancestorJavaClass.getMethodBySignature(methodName,types);
    if (ancestorJavaMethod == null) {
      continue;
    }
    boolean samePackage=false;
    JavaPackage ancestorJavaPackage=ancestorJavaClass.getPackage();
    if (ancestorJavaPackage != null) {
      samePackage=ancestorJavaPackage.equals(javaClass.getPackage());
    }
    if (samePackage) {
      return !ancestorJavaMethod.isPrivate();
    }
 else {
      if (ancestorJavaMethod.isProtected() || ancestorJavaMethod.isPublic()) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  return false;
}
