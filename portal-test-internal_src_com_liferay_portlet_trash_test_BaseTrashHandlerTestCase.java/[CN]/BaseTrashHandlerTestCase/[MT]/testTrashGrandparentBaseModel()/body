{
  Assume.assumeTrue(this instanceof WhenHasParent);
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> grandparentBaseModel=getParentBaseModel(group,serviceContext);
  int initialBaseModelsCount=getNotInTrashBaseModelsCount(grandparentBaseModel);
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,(Long)grandparentBaseModel.getPrimaryKeyObj(),serviceContext);
  baseModel=addBaseModel(parentBaseModel,true,serviceContext);
  WhenHasParent whenHasParent=(WhenHasParent)this;
  if (getBaseModelClassName().equals(whenHasParent.getParentBaseModelClassName())) {
    Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(grandparentBaseModel));
  }
 else {
    Assert.assertEquals(initialBaseModelsCount,getNotInTrashBaseModelsCount(grandparentBaseModel));
  }
  whenHasParent.moveParentBaseModelToTrash((Long)grandparentBaseModel.getPrimaryKeyObj());
  Assert.assertTrue(isInTrashContainer(baseModel));
  Assert.assertTrue(isInTrashContainer(parentBaseModel));
  Assert.assertEquals(initialBaseModelsCount,getNotInTrashBaseModelsCount(grandparentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
}
