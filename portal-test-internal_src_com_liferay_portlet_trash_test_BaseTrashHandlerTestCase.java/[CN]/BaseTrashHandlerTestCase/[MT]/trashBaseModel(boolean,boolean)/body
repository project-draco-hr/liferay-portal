{
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  int initialBaseModelsCount=getNotInTrashBaseModelsCount(parentBaseModel);
  int initialBaseModelsSearchCount=0;
  int initialTrashEntriesSearchCount=0;
  if (isIndexableBaseModel()) {
    initialBaseModelsSearchCount=searchBaseModelsCount(getBaseModelClass(),group.getGroupId());
    initialTrashEntriesSearchCount=searchTrashEntriesCount(getSearchKeywords(),serviceContext);
  }
  baseModel=addBaseModel(parentBaseModel,approved,serviceContext);
  String uniqueTitle=getUniqueTitle(baseModel);
  baseModel=getBaseModel((Long)baseModel.getPrimaryKeyObj());
  WorkflowedModel workflowedModel=getWorkflowedModel(baseModel);
  int oldStatus=workflowedModel.getStatus();
  moveBaseModelToTrash((Long)baseModel.getPrimaryKeyObj());
  TrashHandler trashHandler=TrashHandlerRegistryUtil.getTrashHandler(getBaseModelClassName());
  if (delete) {
    trashHandler.deleteTrashEntry(getTrashEntryClassPK(baseModel));
    Assert.assertEquals(initialBaseModelsCount,getNotInTrashBaseModelsCount(parentBaseModel));
    if (isIndexableBaseModel()) {
      Assert.assertEquals(initialBaseModelsSearchCount,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
      Assert.assertEquals(initialTrashEntriesSearchCount,searchTrashEntriesCount(getSearchKeywords(),serviceContext));
    }
    if (isAssetableModel()) {
      Assert.assertNull(fetchAssetEntry(baseModel));
    }
    Assert.assertEquals(1,getDeletionSystemEventCount(trashHandler,-1));
  }
 else {
    trashHandler.restoreTrashEntry(TestPropsValues.getUserId(),getTrashEntryClassPK(baseModel));
    Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(parentBaseModel));
    if (isIndexableBaseModel()) {
      if (approved) {
        Assert.assertEquals(initialBaseModelsSearchCount + 1,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
      }
 else {
        Assert.assertEquals(initialBaseModelsSearchCount,searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
      }
      Assert.assertEquals(initialTrashEntriesSearchCount,searchTrashEntriesCount(getSearchKeywords(),serviceContext));
    }
    baseModel=getBaseModel((Long)baseModel.getPrimaryKeyObj());
    workflowedModel=getWorkflowedModel(baseModel);
    Assert.assertEquals(oldStatus,workflowedModel.getStatus());
    if (isAssetableModel()) {
      Assert.assertEquals(approved,isAssetEntryVisible(baseModel));
    }
    if (uniqueTitle != null) {
      Assert.assertEquals(uniqueTitle,getUniqueTitle(baseModel));
    }
    Assert.assertEquals(0,getDeletionSystemEventCount(trashHandler,-1));
  }
}
