{
  Assume.assumeTrue(this instanceof WhenHasParent);
  Assume.assumeTrue(this instanceof WhenIsUpdatableBaseModel);
  Assume.assumeFalse(this instanceof WhenIsMoveableFromTrashBaseModel);
  Assume.assumeTrue(this instanceof WhenIsRestorableParentBaseModelFromTrash);
  Assume.assumeTrue(this instanceof WhenIsVersionableBaseModel);
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  List<Integer> originalStatuses=new ArrayList<>();
  baseModel=addBaseModel(parentBaseModel,serviceContext);
  baseModel=expireBaseModel(baseModel,serviceContext);
  WorkflowedModel workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_PUBLISH);
  WhenIsUpdatableBaseModel whenIsUpdatableBaseModel=(WhenIsUpdatableBaseModel)this;
  baseModel=whenIsUpdatableBaseModel.updateBaseModel((Long)baseModel.getPrimaryKeyObj(),serviceContext);
  workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
  baseModel=whenIsUpdatableBaseModel.updateBaseModel((Long)baseModel.getPrimaryKeyObj(),serviceContext);
  workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  WhenHasParent whenHasParent=(WhenHasParent)this;
  whenHasParent.moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  WhenIsRestorableParentBaseModelFromTrash whenIsRestorableParentBaseModelFromTrash=(WhenIsRestorableParentBaseModelFromTrash)this;
  whenIsRestorableParentBaseModelFromTrash.restoreParentBaseModelFromTrash((Long)parentBaseModel.getPrimaryKeyObj());
  List<? extends WorkflowedModel> childrenWorkflowedModels=whenIsRestorableParentBaseModelFromTrash.getChildrenWorkflowedModels(parentBaseModel);
  for (int i=1; i <= childrenWorkflowedModels.size(); i++) {
    WorkflowedModel childrenWorkflowedModel=childrenWorkflowedModels.get(i - 1);
    int originalStatus=originalStatuses.get(childrenWorkflowedModels.size() - i);
    Assert.assertEquals(originalStatus,childrenWorkflowedModel.getStatus());
  }
}
