{
  Assume.assumeTrue(this instanceof WhenHasParent);
  Assume.assumeTrue(this instanceof WhenIsUpdatableBaseModel);
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  List<Integer> originalStatuses=new ArrayList<>();
  baseModel=addBaseModel(parentBaseModel,true,serviceContext);
  baseModel=expireBaseModel(baseModel,serviceContext);
  WorkflowedModel workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_PUBLISH);
  WhenIsUpdatableBaseModel whenIsUpdatableBaseModel=(WhenIsUpdatableBaseModel)this;
  baseModel=whenIsUpdatableBaseModel.updateBaseModel((Long)baseModel.getPrimaryKeyObj(),serviceContext);
  workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
  baseModel=whenIsUpdatableBaseModel.updateBaseModel((Long)baseModel.getPrimaryKeyObj(),serviceContext);
  workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  Assert.assertTrue(isInTrashContainer(baseModel));
}
