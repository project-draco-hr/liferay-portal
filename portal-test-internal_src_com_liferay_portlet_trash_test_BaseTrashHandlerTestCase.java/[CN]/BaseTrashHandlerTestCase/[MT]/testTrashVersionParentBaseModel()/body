{
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  int initialBaseModelsCount=getNotInTrashBaseModelsCount(parentBaseModel);
  int initialTrashEntriesCount=getTrashEntriesCount(group.getGroupId());
  List<Integer> originalStatuses=new ArrayList<>();
  baseModel=addBaseModel(parentBaseModel,true,serviceContext);
  baseModel=expireBaseModel(baseModel,serviceContext);
  WorkflowedModel workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_PUBLISH);
  baseModel=updateBaseModel((Long)baseModel.getPrimaryKeyObj(),serviceContext);
  workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  serviceContext.setWorkflowAction(WorkflowConstants.ACTION_SAVE_DRAFT);
  baseModel=updateBaseModel((Long)baseModel.getPrimaryKeyObj(),serviceContext);
  workflowedModel=getWorkflowedModel(baseModel);
  originalStatuses.add(workflowedModel.getStatus());
  Assert.assertEquals(initialBaseModelsCount + 1,getNotInTrashBaseModelsCount(parentBaseModel));
  Assert.assertEquals(initialTrashEntriesCount,getTrashEntriesCount(group.getGroupId()));
  if (isAssetableModel()) {
    Assert.assertTrue(isAssetEntryVisible(baseModel));
  }
  moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  Assert.assertEquals(initialTrashEntriesCount + 1,getTrashEntriesCount(group.getGroupId()));
  Assert.assertTrue(isInTrashContainer(baseModel));
  if (isAssetableModel()) {
    Assert.assertFalse(isAssetEntryVisible(baseModel));
  }
  restoreParentBaseModelFromTrash((Long)parentBaseModel.getPrimaryKeyObj());
  List<? extends WorkflowedModel> childrenWorkflowedModels=getChildrenWorkflowedModels(parentBaseModel);
  for (int i=1; i <= childrenWorkflowedModels.size(); i++) {
    WorkflowedModel childrenWorkflowedModel=childrenWorkflowedModels.get(i - 1);
    int originalStatus=originalStatuses.get(childrenWorkflowedModels.size() - i);
    Assert.assertEquals(originalStatus,childrenWorkflowedModel.getStatus());
  }
}
