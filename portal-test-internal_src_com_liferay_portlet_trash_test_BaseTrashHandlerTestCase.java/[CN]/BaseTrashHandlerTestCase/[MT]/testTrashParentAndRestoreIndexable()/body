{
  Assume.assumeTrue(this instanceof WhenHasParent);
  Assume.assumeTrue(this instanceof WhenIsIndexableBaseModel);
  Assume.assumeTrue(this instanceof WhenIsMoveableFromTrashBaseModel);
  WhenIsIndexableBaseModel whenIsIndexableBaseModel=(WhenIsIndexableBaseModel)this;
  int initialBaseModelsSearchCount=whenIsIndexableBaseModel.searchBaseModelsCount(getBaseModelClass(),group.getGroupId());
  WhenHasParent whenHasParent=(WhenHasParent)this;
  ServiceContext serviceContext=ServiceContextTestUtil.getServiceContext(group.getGroupId());
  BaseModel<?> parentBaseModel=getParentBaseModel(group,serviceContext);
  baseModel=addBaseModel(parentBaseModel,serviceContext);
  whenHasParent.moveParentBaseModelToTrash((Long)parentBaseModel.getPrimaryKeyObj());
  WhenIsMoveableFromTrashBaseModel whenIsMoveableFromTrashBaseModel=(WhenIsMoveableFromTrashBaseModel)this;
  whenIsMoveableFromTrashBaseModel.moveBaseModelFromTrash(baseModel,group,serviceContext);
  if (isBaseModelContainerModel()) {
    Assert.assertEquals(initialBaseModelsSearchCount + 2,whenIsIndexableBaseModel.searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
  }
 else {
    Assert.assertEquals(initialBaseModelsSearchCount + 1,whenIsIndexableBaseModel.searchBaseModelsCount(getBaseModelClass(),group.getGroupId()));
  }
}
