{
  if (creatorClassPKs == null) {
    creatorClassPKs=new long[0];
  }
 else {
    creatorClassPKs=ArrayUtil.unique(creatorClassPKs);
  }
  Object[] finderArgs=new Object[]{creatorClassNameId,StringUtil.merge(creatorClassPKs)};
  Long count=(Long)FinderCacheUtil.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_CCNI_CCPK,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_COUNT_MICROBLOGSENTRY_WHERE);
    query.append(_FINDER_COLUMN_CCNI_CCPK_CREATORCLASSNAMEID_2);
    if (creatorClassPKs.length > 0) {
      query.append(StringPool.OPEN_PARENTHESIS);
      query.append(_FINDER_COLUMN_CCNI_CCPK_CREATORCLASSPK_7);
      query.append(StringUtil.merge(creatorClassPKs));
      query.append(StringPool.CLOSE_PARENTHESIS);
      query.append(StringPool.CLOSE_PARENTHESIS);
    }
    query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)),query.index() - 1);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(creatorClassNameId);
      count=(Long)q.uniqueResult();
      FinderCacheUtil.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_CCNI_CCPK,finderArgs,count);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_CCNI_CCPK,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return count.intValue();
}
