{
  try {
    Layout layout=(Layout)_portletRequestImpl.getAttribute(WebKeys.LAYOUT);
    if (layout == null) {
      ThemeDisplay themeDisplay=(ThemeDisplay)_portletRequestImpl.getAttribute(WebKeys.THEME_DISPLAY);
      if (themeDisplay != null) {
        layout=themeDisplay.getLayout();
      }
    }
    if (_portletSetup == null) {
      _portletSetup=PortletPreferencesFactoryUtil.getStrictLayoutPortletSetup(layout,_portletName);
    }
    String linkToLayoutUuid=GetterUtil.getString(_portletSetup.getValue("portletSetupLinkToLayoutUuid",null));
    if (PropsValues.PORTLET_CROSS_LAYOUT_INVOCATION_MODE.equals("render") && !PortletRequest.RENDER_PHASE.equals(lifecycle)) {
      includeLinkToLayoutUuid=false;
    }
    if (Validator.isNotNull(linkToLayoutUuid) && includeLinkToLayoutUuid) {
      try {
        Layout linkedLayout=LayoutLocalServiceUtil.getLayoutByUuidAndGroupId(linkToLayoutUuid,layout.getGroupId(),layout.isPrivateLayout());
        plid=linkedLayout.getPlid();
      }
 catch (      PortalException pe) {
      }
    }
  }
 catch (  SystemException se) {
    if (_log.isWarnEnabled()) {
      _log.warn(se);
    }
  }
  if (plid == LayoutConstants.DEFAULT_PLID) {
    plid=_plid;
  }
  LiferayPortletURL portletURL=null;
  Portlet portlet=getPortlet();
  String portletURLClass=portlet.getPortletURLClass();
  if (portlet.getPortletId().equals(portletName) && Validator.isNotNull(portletURLClass)) {
    if (portletURLClass.equals(StrutsActionPortletURL.class.getName())) {
      portletURL=new StrutsActionPortletURL(this,plid,lifecycle);
    }
 else {
      try {
        Constructor<? extends PortletURLImpl> constructor=_constructors.get(portletURLClass);
        if (constructor == null) {
          Class<?> portletURLClassObj=Class.forName(portletURLClass);
          constructor=(Constructor<? extends PortletURLImpl>)portletURLClassObj.getConstructor(new Class[]{PortletResponseImpl.class,long.class,String.class});
          _constructors.put(portletURLClass,constructor);
        }
        portletURL=constructor.newInstance(new Object[]{this,plid,lifecycle});
      }
 catch (      Exception e) {
        _log.error(e);
      }
    }
  }
  if (portletURL == null) {
    portletURL=PortletURLFactoryUtil.create(_portletRequestImpl,portletName,plid,lifecycle);
  }
  PortletApp portletApp=portlet.getPortletApp();
  Set<PortletURLListener> portletURLListeners=portletApp.getPortletURLListeners();
  for (  PortletURLListener portletURLListener : portletURLListeners) {
    try {
      PortletURLGenerationListener portletURLGenerationListener=PortletURLListenerFactory.create(portletURLListener);
      if (lifecycle.equals(PortletRequest.ACTION_PHASE)) {
        portletURLGenerationListener.filterActionURL(portletURL);
      }
 else       if (lifecycle.equals(PortletRequest.RENDER_PHASE)) {
        portletURLGenerationListener.filterRenderURL(portletURL);
      }
 else       if (lifecycle.equals(PortletRequest.RESOURCE_PHASE)) {
        portletURLGenerationListener.filterResourceURL(portletURL);
      }
    }
 catch (    PortletException pe) {
      _log.error(pe,pe);
    }
  }
  try {
    portletURL.setWindowState(_portletRequestImpl.getWindowState());
  }
 catch (  WindowStateException wse) {
    _log.error(wse.getMessage());
  }
  try {
    portletURL.setPortletMode(_portletRequestImpl.getPortletMode());
  }
 catch (  PortletModeException pme) {
    _log.error(pme.getMessage());
  }
  if (lifecycle.equals(PortletRequest.RESOURCE_PHASE)) {
    portletURL.setCopyCurrentRenderParameters(true);
  }
  return portletURL;
}
