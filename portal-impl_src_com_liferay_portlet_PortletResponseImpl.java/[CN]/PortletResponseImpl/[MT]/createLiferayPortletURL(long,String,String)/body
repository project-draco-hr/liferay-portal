{
  try {
    Layout layout=(Layout)_portletRequestImpl.getAttribute(WebKeys.LAYOUT);
    PortletPreferences portletSetup=PortletPreferencesFactoryUtil.getLayoutPortletSetup(layout,_portletName);
    String linkToLayoutUuid=GetterUtil.getString(portletSetup.getValue("portlet-setup-link-to-layout-uuid",null));
    if (Validator.isNotNull(linkToLayoutUuid)) {
      try {
        Layout linkedLayout=LayoutLocalServiceUtil.getLayoutByUuidAndGroupId(linkToLayoutUuid,layout.getGroupId());
        plid=linkedLayout.getPlid();
      }
 catch (      PortalException pe) {
      }
    }
  }
 catch (  SystemException e) {
    if (_log.isWarnEnabled()) {
      _log.warn(e);
    }
  }
  if (plid == LayoutConstants.DEFAULT_PLID) {
    plid=_plid;
  }
  PortletURLImpl portletURLImpl=null;
  Portlet portlet=getPortlet();
  String portletURLClass=portlet.getPortletURLClass();
  if (portlet.getPortletId().equals(portletName) && Validator.isNotNull(portletURLClass)) {
    try {
      Class<?> portletURLClassObj=Class.forName(portletURLClass);
      Constructor<?> constructor=portletURLClassObj.getConstructor(new Class[]{com.liferay.portlet.PortletResponseImpl.class,long.class,String.class});
      portletURLImpl=(PortletURLImpl)constructor.newInstance(new Object[]{this,plid,lifecycle});
    }
 catch (    Exception e) {
      _log.error(e);
    }
  }
  if (portletURLImpl == null) {
    portletURLImpl=new PortletURLImpl(_portletRequestImpl,portletName,plid,lifecycle);
  }
  PortletApp portletApp=portlet.getPortletApp();
  Set<PortletURLListener> portletURLListeners=portletApp.getPortletURLListeners();
  for (  PortletURLListener portletURLListener : portletURLListeners) {
    try {
      PortletURLGenerationListener portletURLGenerationListener=PortletURLListenerFactory.create(portletURLListener);
      if (lifecycle.equals(PortletRequest.ACTION_PHASE)) {
        portletURLGenerationListener.filterActionURL(portletURLImpl);
      }
 else       if (lifecycle.equals(PortletRequest.RENDER_PHASE)) {
        portletURLGenerationListener.filterRenderURL(portletURLImpl);
      }
 else       if (lifecycle.equals(PortletRequest.RESOURCE_PHASE)) {
        portletURLGenerationListener.filterResourceURL(portletURLImpl);
      }
    }
 catch (    PortletException pe) {
      _log.error(pe,pe);
    }
  }
  try {
    portletURLImpl.setWindowState(_portletRequestImpl.getWindowState());
  }
 catch (  WindowStateException wse) {
    _log.error(wse.getMessage());
  }
  try {
    portletURLImpl.setPortletMode(_portletRequestImpl.getPortletMode());
  }
 catch (  PortletModeException pme) {
    _log.error(pme.getMessage());
  }
  if (lifecycle.equals(PortletRequest.ACTION_PHASE)) {
    portletURLImpl.setCopyCurrentPublicRenderParameters(true);
  }
  if (lifecycle.equals(PortletRequest.RESOURCE_PHASE)) {
    portletURLImpl.setCopyCurrentPublicRenderParameters(true);
    portletURLImpl.setCopyCurrentRenderParameters(true);
  }
  return portletURLImpl;
}
