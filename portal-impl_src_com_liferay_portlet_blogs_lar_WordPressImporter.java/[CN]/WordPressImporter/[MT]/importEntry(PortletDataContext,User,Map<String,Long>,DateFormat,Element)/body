{
  long userId=context.getUserId(null);
  String creator=entryEl.elementText(SAXReaderUtil.createQName("creator",_NS_DC));
  if (userMap.containsKey(creator)) {
    userId=userMap.get(creator);
  }
  String title=entryEl.elementTextTrim("title");
  if (Validator.isNull(title)) {
    title=entryEl.elementTextTrim(SAXReaderUtil.createQName("post_name",_NS_WP));
  }
  String content=entryEl.elementText(SAXReaderUtil.createQName("encoded",_NS_CONTENT));
  content=content.replaceAll("\\n","\n<br/>");
  if (Validator.isNull(content)) {
    content="<br/>";
  }
  String dateText=entryEl.elementTextTrim(SAXReaderUtil.createQName("post_date_gmt",_NS_WP));
  Date postDate=new Date();
  try {
    postDate=dateFormat.parse(dateText);
  }
 catch (  ParseException pe) {
    _log.warn("Parse " + dateText,pe);
  }
  Calendar cal=Calendar.getInstance();
  cal.setTime(postDate);
  int displayDateMonth=cal.get(Calendar.MONTH);
  int displayDateDay=cal.get(Calendar.DAY_OF_MONTH);
  int displayDateYear=cal.get(Calendar.YEAR);
  int displayDateHour=cal.get(Calendar.HOUR_OF_DAY);
  int displayDateMinute=cal.get(Calendar.MINUTE);
  String statusText=entryEl.elementTextTrim(SAXReaderUtil.createQName("status",_NS_WP));
  boolean draft=statusText.equalsIgnoreCase("draft");
  String pingStatusText=entryEl.elementTextTrim(SAXReaderUtil.createQName("ping_status",_NS_WP));
  boolean allowTrackbacks=pingStatusText.equalsIgnoreCase("open");
  String[] tagsEntries=null;
  String categoryText=entryEl.elementTextTrim("category");
  if (Validator.isNotNull(categoryText)) {
    tagsEntries=new String[]{categoryText};
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setPlid(context.getPlid());
  serviceContext.setScopeGroupId(context.getGroupId());
  serviceContext.setTagsEntries(tagsEntries);
  BlogsEntry entry=null;
  try {
    entry=BlogsEntryLocalServiceUtil.addEntry(userId,title,content,displayDateMonth,displayDateDay,displayDateYear,displayDateHour,displayDateMinute,draft,allowTrackbacks,null,serviceContext);
  }
 catch (  Exception e) {
    _log.error("Add entry " + title,e);
    return;
  }
  MBMessageDisplay messageDisplay=MBMessageLocalServiceUtil.getDiscussionMessageDisplay(userId,BlogsEntry.class.getName(),entry.getEntryId());
  Map<Long,Long> messageIdMap=new HashMap<Long,Long>();
  List<Node> commentNodes=entryEl.selectNodes("wp:comment","wp:comment_parent/text()");
  for (  Node commentNode : commentNodes) {
    Element commentEl=(Element)commentNode;
    importComment(context,defaultUser,messageDisplay,messageIdMap,entry,commentEl);
  }
}
