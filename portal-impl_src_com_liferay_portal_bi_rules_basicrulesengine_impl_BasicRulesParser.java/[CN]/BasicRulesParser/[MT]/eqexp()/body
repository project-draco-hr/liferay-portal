{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST eqexp_AST=null;
  try {
    atom();
    astFactory.addASTChild(currentAST,returnAST);
{
      _loop27:       do {
        if (((LA(1) >= EQ && LA(1) <= MATCHES))) {
{
switch (LA(1)) {
case EQ:
{
                AST tmp12_AST=null;
                tmp12_AST=astFactory.create(LT(1));
                astFactory.makeASTRoot(currentAST,tmp12_AST);
                match(EQ);
                break;
              }
case NOTEQ:
{
              AST tmp13_AST=null;
              tmp13_AST=astFactory.create(LT(1));
              astFactory.makeASTRoot(currentAST,tmp13_AST);
              match(NOTEQ);
              break;
            }
case GT:
{
            AST tmp14_AST=null;
            tmp14_AST=astFactory.create(LT(1));
            astFactory.makeASTRoot(currentAST,tmp14_AST);
            match(GT);
            break;
          }
case GTEQ:
{
          AST tmp15_AST=null;
          tmp15_AST=astFactory.create(LT(1));
          astFactory.makeASTRoot(currentAST,tmp15_AST);
          match(GTEQ);
          break;
        }
case LT:
{
        AST tmp16_AST=null;
        tmp16_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp16_AST);
        match(LT);
        break;
      }
case LTEQ:
{
      AST tmp17_AST=null;
      tmp17_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp17_AST);
      match(LTEQ);
      break;
    }
case MATCHES:
{
    AST tmp18_AST=null;
    tmp18_AST=astFactory.create(LT(1));
    astFactory.makeASTRoot(currentAST,tmp18_AST);
    match(MATCHES);
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
atom();
astFactory.addASTChild(currentAST,returnAST);
}
 else {
break _loop27;
}
}
 while (true);
}
eqexp_AST=(AST)currentAST.root;
}
 catch (RecognitionException ex) {
reportError(ex);
recover(ex,_tokenSet_2);
}
returnAST=eqexp_AST;
}
