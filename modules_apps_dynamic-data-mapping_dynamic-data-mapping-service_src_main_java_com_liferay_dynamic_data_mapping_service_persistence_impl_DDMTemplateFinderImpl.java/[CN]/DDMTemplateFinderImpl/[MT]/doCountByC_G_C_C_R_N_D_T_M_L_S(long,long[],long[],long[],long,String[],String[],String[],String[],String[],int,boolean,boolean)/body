{
  names=CustomSQLUtil.keywords(names);
  descriptions=CustomSQLUtil.keywords(descriptions,false);
  types=CustomSQLUtil.keywords(types,false);
  modes=CustomSQLUtil.keywords(modes,false);
  languages=CustomSQLUtil.keywords(languages,false);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S);
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId),"DDMTemplate.templateId",groupIds);
    }
    sql=StringUtil.replace(sql,"[$GROUP_ID$]",getGroupIds(groupIds));
    sql=StringUtil.replace(sql,"[$CLASSNAME_ID$]",getClassNameIds(classNameIds));
    sql=StringUtil.replace(sql,"[$CLASS_PK$]",getClassPKs(classPKs));
    sql=StringUtil.replace(sql,"[$STATUS$]",getStatus(status));
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(CAST_TEXT(DDMTemplate.name))",StringPool.LIKE,false,names);
    sql=CustomSQLUtil.replaceKeywords(sql,"DDMTemplate.description",StringPool.LIKE,false,descriptions);
    sql=CustomSQLUtil.replaceKeywords(sql,"DDMTemplate.type",StringPool.LIKE,false,types);
    sql=CustomSQLUtil.replaceKeywords(sql,"DDMTemplate.mode",StringPool.LIKE,false,modes);
    sql=CustomSQLUtil.replaceKeywords(sql,"DDMTemplate.language",StringPool.LIKE,true,languages);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    if (groupIds != null) {
      qPos.add(groupIds);
    }
    if (classNameIds != null) {
      qPos.add(classNameIds);
    }
    if (classPKs != null) {
      qPos.add(classPKs);
    }
    qPos.add(resourceClassNameId);
    qPos.add(names,2);
    qPos.add(descriptions,2);
    qPos.add(types,2);
    qPos.add(modes,2);
    qPos.add(languages,2);
    if (status != WorkflowConstants.STATUS_ANY) {
      qPos.add(status);
    }
    Iterator<Long> itr=q.iterate();
    if (itr.hasNext()) {
      Long count=itr.next();
      if (count != null) {
        return count.intValue();
      }
    }
    return 0;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
