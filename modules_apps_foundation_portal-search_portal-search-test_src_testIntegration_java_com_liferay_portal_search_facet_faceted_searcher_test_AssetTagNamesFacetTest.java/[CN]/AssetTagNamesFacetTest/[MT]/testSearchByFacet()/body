{
  Group group=userSearchFixture.addGroup();
  final String tag="enterprise. open-source for life";
  userSearchFixture.addUser(group,tag);
  final SearchContext searchContext=getSearchContext(tag);
  MultiValueFacet multiValueFacet=new MultiValueFacet(searchContext);
  multiValueFacet.setFieldName(Field.ASSET_TAG_NAMES);
  multiValueFacet.setStatic(false);
  searchContext.addFacet(multiValueFacet);
  IdempotentRetryAssert.retryAssert(10,TimeUnit.SECONDS,new Callable<Void>(){
    @Override public Void call() throws Exception {
      FacetedSearcher facetedSearcher=createFacetedSearcher();
      facetedSearcher.search(searchContext);
      Map<String,Facet> facets=searchContext.getFacets();
      Facet facet=facets.get(Field.ASSET_TAG_NAMES);
      FacetCollector facetCollector=facet.getFacetCollector();
      List<TermCollector> termCollectors=facetCollector.getTermCollectors();
      Assert.assertEquals(1,termCollectors.size());
      TermCollector termCollector=termCollectors.get(0);
      Assert.assertEquals(tag,termCollector.getTerm());
      Assert.assertEquals(1,termCollector.getFrequency());
      return null;
    }
  }
);
}
