{
  CSSDeclaration declaration=style.getDeclarationOfPropertyNameCaseInsensitive(property);
  if (declaration != null) {
    CSSExpression expression=declaration.getExpression();
    List<CSSExpressionMemberTermSimple> members=expression.getAllSimpleMembers();
    for (    CSSExpressionMemberTermSimple member : members) {
      String value=member.getValue();
      if (value.contains("right")) {
        member.setValue("left");
      }
 else       if (value.contains("left")) {
        member.setValue("right");
      }
    }
    if (members.size() == 1) {
      CSSExpressionMemberTermSimple member1=members.get(0);
      String value=member1.getValue();
      Matcher m=REGEX_PERCENT_OR_LENGTH.matcher(value);
      if (m.matches()) {
        member1.setValue("right");
        expression.addTermSimple(value);
      }
    }
 else     if (members.size() == 2) {
      CSSExpressionMemberTermSimple member=members.get(0);
      String value=member.getValue();
      Matcher m=REGEX_PERCENT.matcher(value);
      if (m.matches()) {
        value=(100 - Integer.valueOf(value.replaceAll("[^\\d]",""),10)) + "%";
        member.setValue(value);
      }
    }
  }
}
