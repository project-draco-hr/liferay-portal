{
  JavaTerm previousJavaTerm=null;
  Iterator<JavaTerm> itr=javaTerms.iterator();
  while (itr.hasNext()) {
    JavaTerm javaTerm=itr.next();
    if (previousJavaTerm == null) {
      previousJavaTerm=javaTerm;
      continue;
    }
    String javaTermContent=javaTerm.getContent();
    if (javaTermContent.startsWith(_indent + "//")) {
      previousJavaTerm=javaTerm;
      continue;
    }
    String previousJavaTermContent=previousJavaTerm.getContent();
    if (previousJavaTermContent.startsWith(_indent + "//")) {
      previousJavaTerm=javaTerm;
      continue;
    }
    String javaTermName=javaTerm.getName();
    if (_javaSourceProcessor.isExcludedPath(javaTermSortExcludes,_absolutePath,javaTerm.getLineCount(),javaTermName)) {
      previousJavaTerm=javaTerm;
      continue;
    }
    String previousJavaTermName=previousJavaTerm.getName();
    boolean requiresEmptyLine=false;
    if (previousJavaTerm.getType() != javaTerm.getType()) {
      requiresEmptyLine=true;
    }
 else     if (!javaTerm.isVariable()) {
      requiresEmptyLine=true;
    }
 else     if ((StringUtil.isUpperCase(javaTermName) && !StringUtil.isLowerCase(javaTermName)) || (StringUtil.isUpperCase(previousJavaTermName) && !StringUtil.isLowerCase(previousJavaTermName))) {
      requiresEmptyLine=true;
    }
 else     if (hasAnnotationCommentOrJavadoc(javaTermContent) || hasAnnotationCommentOrJavadoc(previousJavaTermContent)) {
      requiresEmptyLine=true;
    }
 else     if ((previousJavaTerm.getType() == JavaTerm.TYPE_VARIABLE_PRIVATE_STATIC) && (previousJavaTermName.equals("_instance") || previousJavaTermName.equals("_log") || previousJavaTermName.equals("_logger"))) {
      requiresEmptyLine=true;
    }
 else     if (previousJavaTermContent.contains("\n\n\t") || javaTermContent.contains("\n\n\t")) {
      requiresEmptyLine=true;
    }
    if (requiresEmptyLine) {
      if (!_classContent.contains("\n\n" + javaTermContent)) {
        _classContent=StringUtil.replace(_classContent,"\n" + javaTermContent,"\n\n" + javaTermContent);
        return;
      }
    }
 else     if (_classContent.contains("\n\n" + javaTermContent)) {
      _classContent=StringUtil.replace(_classContent,"\n\n" + javaTermContent,"\n" + javaTermContent);
      return;
    }
    previousJavaTerm=javaTerm;
  }
  String lastJavaTermContent=previousJavaTerm.getContent();
  if (!lastJavaTermContent.endsWith("\n\n")) {
    int x=_classContent.lastIndexOf(CharPool.CLOSE_CURLY_BRACE);
    _classContent=StringUtil.insert(_classContent,"\n",x - _indent.length() + 1);
  }
}
