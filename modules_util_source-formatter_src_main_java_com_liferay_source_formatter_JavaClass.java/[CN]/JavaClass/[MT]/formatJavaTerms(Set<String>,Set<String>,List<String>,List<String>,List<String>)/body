{
  if (_javaTerms == null) {
    if (!_javaSourceProcessor.isExcludedPath(_javaTermAccessLevelModifierExcludes,_absolutePath) && !_javaSourceProcessor.isExcludedPath(javaTermSortExcludes,_absolutePath)) {
      _javaSourceProcessor.processErrorMessage(_fileName,"Parsing error while retrieving java terms " + _fileName);
    }
    return _classContent;
  }
  if (_javaTerms.isEmpty()) {
    return _classContent;
  }
  String originalContent=_classContent;
  JavaTerm previousJavaTerm=null;
  Iterator<JavaTerm> itr=_javaTerms.iterator();
  while (itr.hasNext()) {
    JavaTerm javaTerm=itr.next();
    if (javaTerm.isConstructor()) {
      checkConstructor(javaTerm);
    }
    checkUnusedParameters(javaTerm);
    if (javaTerm.isMethod() || javaTerm.isConstructor()) {
      checkChaining(javaTerm);
      checkLineBreak(javaTerm);
    }
    if (_fileName.endsWith("LocalServiceImpl.java") && javaTerm.hasAnnotation("Indexable") && !javaTerm.hasReturnType()) {
      _javaSourceProcessor.processErrorMessage(_fileName,"Missing return type for method with @Indexable: " + _fileName + " "+ javaTerm.getLineCount());
    }
    if (!_javaSourceProcessor.isExcludedPath(checkJavaFieldTypesExcludes,_absolutePath)) {
      checkJavaFieldType(javaTerm,annotationsExclusions,immutableFieldTypes);
    }
    if (!originalContent.equals(_classContent)) {
      return _classContent;
    }
    sortJavaTerms(previousJavaTerm,javaTerm,javaTermSortExcludes);
    fixTabsAndIncorrectEmptyLines(javaTerm);
    formatAnnotations(javaTerm,testAnnotationsExcludes);
    if (!originalContent.equals(_classContent)) {
      return _classContent;
    }
    previousJavaTerm=javaTerm;
  }
  for (  JavaClass innerClass : _innerClasses) {
    String innerClassContent=innerClass.getContent();
    String newInnerClassContent=innerClass.formatJavaTerms(annotationsExclusions,immutableFieldTypes,checkJavaFieldTypesExcludes,javaTermSortExcludes,testAnnotationsExcludes);
    if (!innerClassContent.equals(newInnerClassContent)) {
      _classContent=StringUtil.replace(_classContent,innerClassContent,newInnerClassContent);
      return _classContent;
    }
  }
  fixJavaTermsDividers(_javaTerms,javaTermSortExcludes);
  return _classContent;
}
