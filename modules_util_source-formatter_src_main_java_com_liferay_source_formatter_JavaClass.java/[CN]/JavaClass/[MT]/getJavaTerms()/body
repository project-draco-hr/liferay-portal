{
  if (_javaTerms != null) {
    return _javaTerms;
  }
  Set<JavaTerm> javaTerms=new TreeSet<>(new JavaTermComparator(false));
  List<JavaTerm> staticBlocks=new ArrayList<>();
  UnsyncBufferedReader unsyncBufferedReader=new UnsyncBufferedReader(new UnsyncStringReader(_classContent));
  int index=0;
  String line=null;
  String javaTermName=null;
  int javaTermStartPosition=-1;
  int javaTermType=-1;
  int lastCommentOrAnnotationPos=-1;
  while ((line=unsyncBufferedReader.readLine()) != null) {
    if (_javaSourceProcessor.getLeadingTabCount(line) != _indent.length()) {
      index=index + line.length() + 1;
      continue;
    }
    if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ")|| line.equals(_indent + "protected")|| line.startsWith(_indent + "public ")|| line.equals(_indent + "public")|| line.equals(_indent + "static {")) {
      Tuple tuple=getJavaTermTuple(line,_classContent,index);
      int javaTermEndPosition=0;
      if (lastCommentOrAnnotationPos == -1) {
        javaTermEndPosition=index;
      }
 else {
        javaTermEndPosition=lastCommentOrAnnotationPos;
      }
      if ((javaTermStartPosition != -1) && (javaTermEndPosition < _classContent.length())) {
        JavaTerm javaTerm=getJavaTerm(javaTermName,javaTermType,javaTermStartPosition,javaTermEndPosition);
        if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) {
          staticBlocks.add(javaTerm);
        }
 else         if (!javaTerms.add(javaTerm)) {
          _javaSourceProcessor.processMessage(_fileName,"Duplicate " + javaTermName);
          _javaTerms=Collections.emptySet();
          return _javaTerms;
        }
      }
      javaTermName=(String)tuple.getObject(0);
      javaTermStartPosition=javaTermEndPosition;
      javaTermType=(Integer)tuple.getObject(1);
      lastCommentOrAnnotationPos=-1;
    }
 else     if (hasAnnotationCommentOrJavadoc(line)) {
      if (lastCommentOrAnnotationPos == -1) {
        lastCommentOrAnnotationPos=index;
      }
    }
 else     if (!line.startsWith(_indent + StringPool.CLOSE_CURLY_BRACE) && !line.startsWith(_indent + StringPool.CLOSE_PARENTHESIS) && !line.startsWith(_indent + "extends")&& !line.startsWith(_indent + "implements")) {
      Matcher matcher=_classPattern.matcher(_classContent);
      if (matcher.find()) {
        String insideClass=_classContent.substring(matcher.end());
        if (insideClass.contains(line) && !isEnumType(line,matcher.group(4))) {
          return Collections.emptySet();
        }
      }
    }
    index=index + line.length() + 1;
  }
  if (javaTermStartPosition != -1) {
    int javaTermEndPosition=_classContent.lastIndexOf(CharPool.CLOSE_CURLY_BRACE) - _indent.length() + 1;
    JavaTerm javaTerm=getJavaTerm(javaTermName,javaTermType,javaTermStartPosition,javaTermEndPosition);
    if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) {
      staticBlocks.add(javaTerm);
    }
 else     if (!javaTerms.add(javaTerm)) {
      _javaSourceProcessor.processMessage(_fileName,"Duplicate " + javaTermName);
      _javaTerms=Collections.emptySet();
      return _javaTerms;
    }
  }
  _javaTerms=addStaticBlocks(javaTerms,staticBlocks);
  return _javaTerms;
}
