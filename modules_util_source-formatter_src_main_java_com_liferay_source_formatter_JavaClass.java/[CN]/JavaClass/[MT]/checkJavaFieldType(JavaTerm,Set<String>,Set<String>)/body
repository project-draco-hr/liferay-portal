{
  if (!_javaSourceProcessor.portalSource || (!javaTerm.isVariable() && !javaTerm.isMethod())) {
    return;
  }
  String javaTermName=javaTerm.getName();
  if (javaTerm.isMethod() && _underscoreNotAllowedMethodNames.contains(javaTermName)) {
    return;
  }
  Pattern pattern=Pattern.compile("\t(private |protected |public )" + "(((final|static|transient)( |\n))*)([\\s\\S]*?)" + javaTermName);
  String javaTermContent=javaTerm.getContent();
  Matcher matcher=pattern.matcher(javaTermContent);
  if (!matcher.find()) {
    return;
  }
  if ((javaTerm.isPrivate() && !javaTermName.equals("serialVersionUID")) ^ (javaTermName.charAt(0) == CharPool.UNDERLINE)) {
    if (javaTerm.isPrivate()) {
      if (!javaTermContent.contains("@Reference")) {
        _classContent=_classContent.replaceAll("(?<=[\\W&&[^.\"]])(" + javaTermName + ")\\b",StringPool.UNDERLINE.concat(javaTermName));
      }
    }
 else {
      _javaSourceProcessor.processErrorMessage(_fileName,"Only private var should start with underscore: " + _fileName + " "+ javaTerm.getLineCount());
    }
  }
  if (!javaTerm.isVariable()) {
    return;
  }
  String modifierDefinition=StringUtil.trim(javaTermContent.substring(matcher.start(1),matcher.start(6)));
  boolean isFinal=modifierDefinition.contains("final");
  boolean isStatic=modifierDefinition.contains("static");
  String javaFieldType=StringUtil.trim(matcher.group(6));
  if (isFinal && isStatic) {
    checkMutableFieldType(javaTerm,javaFieldType);
  }
  if (!isFinal && !javaTerm.isPublic() && !_fileName.endsWith("ObjectGraphUtilTest.java")) {
    matcher=_isNullPattern.matcher(javaTermContent);
    if (matcher.find()) {
      _classContent=StringUtil.replace(_classContent,javaTermContent,matcher.replaceFirst(";$1"));
    }
  }
  if (!javaTerm.isPrivate()) {
    return;
  }
  if (isFinal) {
    if (immutableFieldTypes.contains(javaFieldType)) {
      if (isStatic) {
        checkImmutableFieldType(javaTerm.getName());
      }
 else {
        checkStaticableFieldType(javaTerm.getContent());
      }
    }
  }
 else {
    checkFinalableFieldType(javaTerm,annotationsExclusions,modifierDefinition);
  }
}
