{
  int posStartNextLine=index;
  while (!line.endsWith(StringPool.OPEN_CURLY_BRACE) && !line.endsWith(StringPool.SEMICOLON)) {
    posStartNextLine=content.indexOf(CharPool.NEW_LINE,posStartNextLine) + 1;
    int posEndNextline=content.indexOf(CharPool.NEW_LINE,posStartNextLine);
    String nextLine=content.substring(posStartNextLine,posEndNextline);
    nextLine=StringUtil.trimLeading(nextLine);
    if (line.endsWith(StringPool.OPEN_PARENTHESIS)) {
      line+=nextLine;
    }
 else {
      line+=StringPool.SPACE + nextLine;
    }
  }
  line=StringUtil.replace(line," synchronized ",StringPool.SPACE);
  for (  String accessModifier : _ACCESS_MODIFIERS) {
    Tuple tuple=getJavaTermTuple(line,accessModifier);
    if (tuple != null) {
      return tuple;
    }
  }
  if (!line.startsWith(_indent + "static {")) {
    int lineCount=_lineCount + _javaSourceProcessor.getLineCount(content,index) - 1;
    throw new InvalidJavaTermException(lineCount);
  }
  return new Tuple("static",JavaTerm.TYPE_STATIC_BLOCK);
}
