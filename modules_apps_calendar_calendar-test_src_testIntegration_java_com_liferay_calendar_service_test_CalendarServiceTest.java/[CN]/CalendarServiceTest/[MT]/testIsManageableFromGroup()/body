{
  User adminUser=UserTestUtil.addOmniAdminUser();
  Group notStagedGroup=GroupTestUtil.addGroup();
  Group liveGroup=GroupTestUtil.addGroup();
  GroupTestUtil.enableLocalStaging(liveGroup);
  Group stagingGroup=liveGroup.getStagingGroup();
  try (ContextUserReplace contextUserReplacer=new ContextUserReplace(adminUser)){
    Calendar notStagedCalendar=getGroupCalendar(notStagedGroup);
    Assert.assertTrue(CalendarServiceUtil.isManageableFromGroup(notStagedCalendar.getCalendarId(),notStagedGroup.getGroupId()));
    Assert.assertTrue(CalendarServiceUtil.isManageableFromGroup(notStagedCalendar.getCalendarId(),liveGroup.getGroupId()));
    Assert.assertTrue(CalendarServiceUtil.isManageableFromGroup(notStagedCalendar.getCalendarId(),stagingGroup.getGroupId()));
    Calendar liveCalendar=getGroupCalendar(liveGroup);
    Assert.assertFalse(CalendarServiceUtil.isManageableFromGroup(liveCalendar.getCalendarId(),notStagedGroup.getGroupId()));
    Assert.assertFalse(CalendarServiceUtil.isManageableFromGroup(liveCalendar.getCalendarId(),liveGroup.getGroupId()));
    Assert.assertFalse(CalendarServiceUtil.isManageableFromGroup(liveCalendar.getCalendarId(),stagingGroup.getGroupId()));
    Calendar stagingCalendar=getGroupCalendar(stagingGroup);
    Assert.assertFalse(CalendarServiceUtil.isManageableFromGroup(stagingCalendar.getCalendarId(),notStagedGroup.getGroupId()));
    Assert.assertFalse(CalendarServiceUtil.isManageableFromGroup(stagingCalendar.getCalendarId(),liveGroup.getGroupId()));
    Assert.assertTrue(CalendarServiceUtil.isManageableFromGroup(stagingCalendar.getCalendarId(),stagingGroup.getGroupId()));
  }
  finally {
    UserLocalServiceUtil.deleteUser(adminUser);
    GroupLocalServiceUtil.deleteGroup(liveGroup);
    GroupLocalServiceUtil.deleteGroup(notStagedGroup);
  }
}
