{
  long pk=RandomTestUtil.nextLong();
  MBThreadFlag newMBThreadFlag=_persistence.create(pk);
  newMBThreadFlag.setUuid(RandomTestUtil.randomString());
  newMBThreadFlag.setGroupId(RandomTestUtil.nextLong());
  newMBThreadFlag.setCompanyId(RandomTestUtil.nextLong());
  newMBThreadFlag.setUserId(RandomTestUtil.nextLong());
  newMBThreadFlag.setUserName(RandomTestUtil.randomString());
  newMBThreadFlag.setCreateDate(RandomTestUtil.nextDate());
  newMBThreadFlag.setModifiedDate(RandomTestUtil.nextDate());
  newMBThreadFlag.setThreadId(RandomTestUtil.nextLong());
  _mbThreadFlags.add(_persistence.update(newMBThreadFlag));
  MBThreadFlag existingMBThreadFlag=_persistence.findByPrimaryKey(newMBThreadFlag.getPrimaryKey());
  Assert.assertEquals(existingMBThreadFlag.getUuid(),newMBThreadFlag.getUuid());
  Assert.assertEquals(existingMBThreadFlag.getThreadFlagId(),newMBThreadFlag.getThreadFlagId());
  Assert.assertEquals(existingMBThreadFlag.getGroupId(),newMBThreadFlag.getGroupId());
  Assert.assertEquals(existingMBThreadFlag.getCompanyId(),newMBThreadFlag.getCompanyId());
  Assert.assertEquals(existingMBThreadFlag.getUserId(),newMBThreadFlag.getUserId());
  Assert.assertEquals(existingMBThreadFlag.getUserName(),newMBThreadFlag.getUserName());
  Assert.assertEquals(Time.getShortTimestamp(existingMBThreadFlag.getCreateDate()),Time.getShortTimestamp(newMBThreadFlag.getCreateDate()));
  Assert.assertEquals(Time.getShortTimestamp(existingMBThreadFlag.getModifiedDate()),Time.getShortTimestamp(newMBThreadFlag.getModifiedDate()));
  Assert.assertEquals(existingMBThreadFlag.getThreadId(),newMBThreadFlag.getThreadId());
}
