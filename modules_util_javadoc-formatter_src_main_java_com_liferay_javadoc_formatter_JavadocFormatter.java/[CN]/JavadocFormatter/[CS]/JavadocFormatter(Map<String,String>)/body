{
  String author=GetterUtil.getString(arguments.get("javadoc.author"));
  if (Validator.isNull(author) || author.startsWith("$")) {
    author=JavadocFormatterArgs.AUTHOR;
  }
  _author=author;
  _generateXml=GetterUtil.getBoolean(arguments.get("javadoc.xml"));
  String init=arguments.get("javadoc.init");
  _initializeMissingJavadocs=GetterUtil.getBoolean(init);
  String inputDirName=GetterUtil.getString(arguments.get("javadoc.input.dir"));
  if (Validator.isNull(inputDirName) || inputDirName.startsWith("$")) {
    inputDirName="./";
  }
  if (!inputDirName.endsWith("/")) {
    inputDirName+="/";
  }
  _inputDirName=inputDirName;
  System.out.println("Input directory is " + _inputDirName);
  String[] limits=StringUtil.split(arguments.get("javadoc.limit"),",");
  if (limits.length == 0) {
    limits=new String[]{StringPool.BLANK};
  }
  File languagePropertiesFile=new File("src/content/Language.properties");
  if (!languagePropertiesFile.exists()) {
    languagePropertiesFile=new File("src/main/resources/content/Language.properties");
  }
  if (languagePropertiesFile.exists()) {
    _languageProperties=new Properties();
    _languagePropertiesFile=languagePropertiesFile;
    _languageProperties.load(new FileInputStream(_languagePropertiesFile.getAbsolutePath()));
  }
 else {
    _languageProperties=null;
    _languagePropertiesFile=null;
  }
  _lowestSupportedJavaVersion=GetterUtil.getDouble(arguments.get("javadoc.lowest.supported.java.version"),JavadocFormatterArgs.LOWEST_SUPPORTED_JAVA_VERSION);
  String outputFilePrefix=GetterUtil.getString(arguments.get("javadoc.output.file.prefix"));
  if (Validator.isNull(outputFilePrefix) || outputFilePrefix.startsWith("$")) {
    outputFilePrefix=JavadocFormatterArgs.OUTPUT_FILE_PREFIX;
  }
  _outputFilePrefix=outputFilePrefix;
  _updateJavadocs=GetterUtil.getBoolean(arguments.get("javadoc.update"));
  DirectoryScanner directoryScanner=new DirectoryScanner();
  directoryScanner.setBasedir(_inputDirName);
  directoryScanner.setExcludes(new String[]{"**\\build\\**","**\\classes\\**","**\\portal-client\\**"});
  for (  String limit : limits) {
    List<String> includes=new ArrayList<>();
    if (Validator.isNotNull(limit) && !limit.startsWith("$")) {
      System.out.println("Limit on " + limit);
      String[] limitArray=StringUtil.split(limit,'/');
      for (      String curLimit : limitArray) {
        includes.add("**\\" + StringUtil.replace(curLimit,".","\\") + "\\**\\*.java");
        includes.add("**\\" + curLimit + ".java");
      }
    }
 else {
      includes.add("**\\*.java");
    }
    directoryScanner.setIncludes(includes.toArray(new String[includes.size()]));
    directoryScanner.scan();
    String[] fileNames=StringPool.EMPTY_ARRAY;
    fileNames=directoryScanner.getIncludedFiles();
    if ((fileNames.length == 0) && Validator.isNotNull(limit) && !limit.startsWith("$")) {
      StringBundler sb=new StringBundler("Limit file not found: ");
      sb.append(limit);
      if (limit.contains(".")) {
        sb.append(" Specify limit filename without package path or ");
        sb.append("file type suffix.");
      }
      System.out.println(sb.toString());
    }
    _populateJavadocBuilder(fileNames);
    for (    String fileName : fileNames) {
      fileName=StringUtil.replace(fileName,"\\","/");
      try {
        _format(fileName);
      }
 catch (      Exception e) {
        if (!(e instanceof ParseException) || !fileName.contains("/tools/templates/")) {
          throw new RuntimeException("Unable to format file " + fileName,e);
        }
      }
    }
  }
  if (_generateXml) {
    for (    Map.Entry<String,Tuple> entry : _javadocxXmlTuples.entrySet()) {
      Tuple tuple=entry.getValue();
      File javadocsXmlFile=(File)tuple.getObject(1);
      String oldJavadocsXmlContent=(String)tuple.getObject(2);
      Document javadocsXmlDocument=(Document)tuple.getObject(3);
      Element javadocsXmlRootElement=javadocsXmlDocument.getRootElement();
      _sortElementsByChildElement(javadocsXmlRootElement,"javadoc","type");
      String newJavadocsXmlContent=_formattedString(javadocsXmlDocument);
      if (!oldJavadocsXmlContent.equals(newJavadocsXmlContent)) {
        _write(javadocsXmlFile,newJavadocsXmlContent);
        _modifiedFileNames.add(javadocsXmlFile.getAbsolutePath());
      }
      _detachUnnecessaryTypes(javadocsXmlRootElement);
      File javadocsRuntimeXmlFile=new File(StringUtil.replaceLast(javadocsXmlFile.toString(),"-all.xml","-rt.xml"));
      String oldJavadocsRuntimeXmlContent=StringPool.BLANK;
      if (javadocsRuntimeXmlFile.exists()) {
        oldJavadocsRuntimeXmlContent=_read(javadocsRuntimeXmlFile);
      }
      String newJavadocsRuntimeXmlContent=_compactString(javadocsXmlDocument);
      if (!oldJavadocsRuntimeXmlContent.equals(newJavadocsRuntimeXmlContent)) {
        _write(javadocsRuntimeXmlFile,newJavadocsRuntimeXmlContent);
        _modifiedFileNames.add(javadocsRuntimeXmlFile.getAbsolutePath());
      }
    }
  }
}
