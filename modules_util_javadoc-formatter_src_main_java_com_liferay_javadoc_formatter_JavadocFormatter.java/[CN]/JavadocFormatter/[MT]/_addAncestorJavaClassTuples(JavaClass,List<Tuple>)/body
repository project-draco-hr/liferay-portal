{
  JavaClass superJavaClass=javaClass.getSuperJavaClass();
  if (superJavaClass != null) {
    ancestorJavaClassTuples.add(new Tuple(superJavaClass));
    ancestorJavaClassTuples=_addAncestorJavaClassTuples(superJavaClass,ancestorJavaClassTuples);
  }
  Type[] implementz=javaClass.getImplements();
  for (  Type implement : implementz) {
    Type[] actualTypeArguments=implement.getActualTypeArguments();
    JavaClass implementedInterface=implement.getJavaClass();
    if (actualTypeArguments == null) {
      ancestorJavaClassTuples.add(new Tuple(implementedInterface));
    }
 else {
      ancestorJavaClassTuples.add(new Tuple(implementedInterface,actualTypeArguments));
    }
    ancestorJavaClassTuples=_addAncestorJavaClassTuples(implementedInterface,ancestorJavaClassTuples);
  }
  return ancestorJavaClassTuples;
}
