{
  SetBadPortalInetSocketAddressAdvice.setPort(8080);
  PortalUtil portalUtil=new PortalUtil();
  portalUtil.setPortal(new PortalImpl());
  PortalUUIDUtil portalUUIDUtil=new PortalUUIDUtil();
  portalUUIDUtil.setPortalUUID(new PortalUUIDImpl());
  PropsUtil.setProps(new PropsImpl());
  PortalExecutorManagerUtil portalExecutorManagerUtil=new PortalExecutorManagerUtil();
  portalExecutorManagerUtil.setPortalExecutorManager(new ClusterExecutorImplTest.MockPortalExecutorManager());
  CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterExecutorImpl.class.getName(),Level.SEVERE);
  ClusterExecutorImpl clusterExecutorImpl=null;
  try {
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    clusterExecutorImpl=new ClusterExecutorImpl();
    clusterExecutorImpl.afterPropertiesSet();
    JChannelExceptionAdvice.setConnectException(new Exception());
    try {
      clusterExecutorImpl.initialize();
      Assert.fail();
    }
 catch (    IllegalStateException ise) {
      assertLogger(logRecords,"Unable to initialize",Exception.class);
    }
    logRecords=captureHandler.resetLogLevel(Level.OFF);
    clusterExecutorImpl=new ClusterExecutorImpl();
    clusterExecutorImpl.afterPropertiesSet();
    JChannelExceptionAdvice.setConnectException(new Exception());
    try {
      clusterExecutorImpl.initialize();
      Assert.fail();
    }
 catch (    IllegalStateException ise) {
      Assert.assertTrue(logRecords.isEmpty());
    }
    JChannelExceptionAdvice.setConnectException(null);
    logRecords=captureHandler.resetLogLevel(Level.SEVERE);
    clusterExecutorImpl.initialize();
    Assert.assertEquals(2,logRecords.size());
    Assert.assertEquals("Unable to parse portal InetSocketAddress from bad " + "address:8080",logRecords.get(0).getMessage());
    Assert.assertEquals("Unable to send notify message",logRecords.get(1).getMessage());
    logRecords=captureHandler.resetLogLevel(Level.SEVERE);
    clusterExecutorImpl.portalLocalInetSockAddressConfigured(new InetSocketAddress(InetAddress.getLocalHost(),80));
    assertLogger(logRecords,"Unable to determine configure node port",Exception.class);
    ClusterRequest clusterRequest=ClusterRequest.createMulticastRequest(null);
    try {
      clusterExecutorImpl.execute(clusterRequest);
      Assert.fail();
    }
 catch (    Exception e) {
      Assert.assertEquals("Unable to send multicast request",e.getMessage());
    }
    clusterRequest=ClusterRequest.createUnicastRequest(null,new AddressImpl(new MockAddress()));
    try {
      clusterExecutorImpl.execute(clusterRequest);
      Assert.fail();
    }
 catch (    Exception e) {
      Assert.assertEquals("Unable to send unicast request",e.getMessage());
    }
  }
  finally {
    captureHandler.close();
    if (clusterExecutorImpl != null) {
      clusterExecutorImpl.destroy();
    }
  }
}
