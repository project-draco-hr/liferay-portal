{
  JDKLoggerTestUtil.configureJDKLogger(ClusterBase.class.getName(),Level.FINE);
  ClusterExecutorImpl clusterExecutorImpl=null;
  try {
    PortalUtil portalUtil=new PortalUtil();
    portalUtil.setPortal(new PortalImpl());
    PortalUUIDUtil portalUUIDUtil=new PortalUUIDUtil();
    portalUUIDUtil.setPortalUUID(new PortalUUIDImpl());
    PropsUtil.setProps(new PropsImpl());
    PortalExecutorManagerUtil portalExecutorManagerUtil=new PortalExecutorManagerUtil();
    portalExecutorManagerUtil.setPortalExecutorManager(new ClusterExecutorImplTest.MockPortalExecutorManager());
    List<LogRecord> logRecords=JDKLoggerTestUtil.configureJDKLogger(ClusterExecutorImpl.class.getName(),Level.SEVERE);
    clusterExecutorImpl=new ClusterExecutorImpl();
    clusterExecutorImpl.afterPropertiesSet();
    assertLogger(logRecords,"Unable to get InetAddress by name :" + SetBadPortalAddressAdvice.BAD_ADDRESS,UnknownHostException.class);
    clusterExecutorImpl.initialize();
    assertLogger(logRecords,"Unable to send notify message",Exception.class);
    clusterExecutorImpl.portalLocalAddressConfigured(InetAddress.getLocalHost(),80);
    assertLogger(logRecords,"Unable to determine configure node port",Exception.class);
    ClusterRequest clusterRequest=ClusterRequest.createMulticastRequest(null);
    try {
      clusterExecutorImpl.execute(clusterRequest);
      Assert.fail();
    }
 catch (    Exception e) {
      Assert.assertEquals("Unable to send multicast request",e.getMessage());
    }
    clusterRequest=ClusterRequest.createUnicastRequest(null,new AddressImpl(new MockAddress()));
    try {
      clusterExecutorImpl.execute(clusterRequest);
      Assert.fail();
    }
 catch (    Exception e) {
      Assert.assertEquals("Unable to send unicast request",e.getMessage());
    }
  }
  finally {
    if (clusterExecutorImpl != null) {
      clusterExecutorImpl.destroy();
    }
  }
}
