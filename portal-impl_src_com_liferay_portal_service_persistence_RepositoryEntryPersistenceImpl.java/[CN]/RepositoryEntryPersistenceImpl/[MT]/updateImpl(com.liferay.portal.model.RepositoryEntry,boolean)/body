{
  repositoryEntry=toUnwrappedModel(repositoryEntry);
  boolean isNew=repositoryEntry.isNew();
  RepositoryEntryModelImpl repositoryEntryModelImpl=(RepositoryEntryModelImpl)repositoryEntry;
  Session session=null;
  try {
    session=openSession();
    BatchSessionUtil.update(session,repositoryEntry,merge);
    repositoryEntry.setNew(false);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
  FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST);
  EntityCacheUtil.putResult(RepositoryEntryModelImpl.ENTITY_CACHE_ENABLED,RepositoryEntryImpl.class,repositoryEntry.getPrimaryKey(),repositoryEntry);
  if (!isNew && ((repositoryEntry.getRepositoryId() != repositoryEntryModelImpl.getOriginalRepositoryId()) || !Validator.equals(repositoryEntry.getMappedId(),repositoryEntryModelImpl.getOriginalMappedId()))) {
    FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_R_M,new Object[]{Long.valueOf(repositoryEntryModelImpl.getOriginalRepositoryId()),repositoryEntryModelImpl.getOriginalMappedId()});
  }
  if (isNew || ((repositoryEntry.getRepositoryId() != repositoryEntryModelImpl.getOriginalRepositoryId()) || !Validator.equals(repositoryEntry.getMappedId(),repositoryEntryModelImpl.getOriginalMappedId()))) {
    FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_R_M,new Object[]{Long.valueOf(repositoryEntry.getRepositoryId()),repositoryEntry.getMappedId()},repositoryEntry);
  }
  return repositoryEntry;
}
