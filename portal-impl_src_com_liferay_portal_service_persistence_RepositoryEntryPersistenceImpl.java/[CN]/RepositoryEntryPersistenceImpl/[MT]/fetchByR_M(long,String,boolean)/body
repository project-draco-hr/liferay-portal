{
  Object[] finderArgs=new Object[]{repositoryId,mappedId};
  Object result=null;
  if (retrieveFromCache) {
    result=FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_R_M,finderArgs,this);
  }
  if (result == null) {
    StringBundler query=new StringBundler(3);
    query.append(_SQL_SELECT_REPOSITORYENTRY_WHERE);
    query.append(_FINDER_COLUMN_R_M_REPOSITORYID_2);
    if (mappedId == null) {
      query.append(_FINDER_COLUMN_R_M_MAPPEDID_1);
    }
 else {
      if (mappedId.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_R_M_MAPPEDID_3);
      }
 else {
        query.append(_FINDER_COLUMN_R_M_MAPPEDID_2);
      }
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(repositoryId);
      if (mappedId != null) {
        qPos.add(mappedId);
      }
      List<RepositoryEntry> list=q.list();
      result=list;
      RepositoryEntry repositoryEntry=null;
      if (list.isEmpty()) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_R_M,finderArgs,list);
      }
 else {
        repositoryEntry=list.get(0);
        cacheResult(repositoryEntry);
        if ((repositoryEntry.getRepositoryId() != repositoryId) || (repositoryEntry.getMappedId() == null) || !repositoryEntry.getMappedId().equals(mappedId)) {
          FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_R_M,finderArgs,repositoryEntry);
        }
      }
      return repositoryEntry;
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (result == null) {
        FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_R_M,finderArgs);
      }
      closeSession(session);
    }
  }
 else {
    if (result instanceof List<?>) {
      return null;
    }
 else {
      return (RepositoryEntry)result;
    }
  }
}
