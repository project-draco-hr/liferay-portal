{
  _configuration=new Configuration();
  FreeMarkerTemplateResourceLoader freeMarkerTemplateResourceLoader=new FreeMarkerTemplateResourceLoader();
  MultiVMPool multiVMPool=Mockito.mock(MultiVMPool.class);
  final PortalCacheManager<? extends Serializable,? extends Serializable> portalCacheManager=TestPortalCacheManager.createTestPortalCacheManager(RandomTestUtil.randomString());
  Mockito.when(multiVMPool.getPortalCache(Mockito.anyString())).thenAnswer(new Answer<PortalCache<? extends Serializable,? extends Serializable>>(){
    @Override public PortalCache<? extends Serializable,? extends Serializable> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return portalCacheManager.getPortalCache(RandomTestUtil.randomString());
    }
  }
);
  freeMarkerTemplateResourceLoader.setMultiVMPool(multiVMPool);
  SingleVMPool singleVMPool=Mockito.mock(SingleVMPool.class);
  Mockito.when(singleVMPool.getCache(Mockito.anyString())).thenAnswer(new Answer<PortalCache<? extends Serializable,? extends Serializable>>(){
    @Override public PortalCache<? extends Serializable,? extends Serializable> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return portalCacheManager.getPortalCache("test");
    }
  }
);
  freeMarkerTemplateResourceLoader.setSingleVMPool(singleVMPool);
  freeMarkerTemplateResourceLoader.activate(Collections.<String,Object>emptyMap());
  TemplateCache templateCache=new LiferayTemplateCache(_configuration,_freemarkerEngineConfiguration,freeMarkerTemplateResourceLoader);
  ReflectionTestUtil.setFieldValue(_configuration,"cache",templateCache);
  _configuration.setLocalizedLookup(false);
  _templateContextHelper=new MockTemplateContextHelper();
}
