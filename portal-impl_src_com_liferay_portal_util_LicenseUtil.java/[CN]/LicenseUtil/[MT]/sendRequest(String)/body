{
  HttpClient httpClient=null;
  HttpClientConnectionManager httpClientConnectionManager=new BasicHttpClientConnectionManager();
  try {
    HttpClientBuilder httpClientBuilder=HttpClientBuilder.create();
    httpClientBuilder.setConnectionManager(httpClientConnectionManager);
    String serverURL=LICENSE_SERVER_URL;
    if (!serverURL.endsWith(StringPool.SLASH)) {
      serverURL+=StringPool.SLASH;
    }
    serverURL+="osb-portlet/license";
    URI uri=new URI(serverURL);
    HttpPost httpPost=new HttpPost(uri);
    CredentialsProvider credentialsProvider=new BasicCredentialsProvider();
    HttpHost proxyHttpHost=null;
    if (Validator.isNotNull(_PROXY_URL)) {
      if (_log.isInfoEnabled()) {
        _log.info("Using proxy " + _PROXY_URL + StringPool.COLON+ _PROXY_PORT);
      }
      proxyHttpHost=new HttpHost(_PROXY_URL,_PROXY_PORT);
      if (Validator.isNotNull(_PROXY_USER_NAME)) {
        credentialsProvider.setCredentials(new AuthScope(_PROXY_URL,_PROXY_PORT),new UsernamePasswordCredentials(_PROXY_USER_NAME,_PROXY_PASSWORD));
      }
    }
    httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
    httpClientBuilder.setProxy(proxyHttpHost);
    httpClient=httpClientBuilder.build();
    ByteArrayEntity byteArrayEntity=new ByteArrayEntity(_encryptRequest(serverURL,request));
    byteArrayEntity.setContentType(ContentTypes.APPLICATION_JSON);
    httpPost.setEntity(byteArrayEntity);
    HttpResponse httpResponse=httpClient.execute(httpPost);
    HttpEntity httpEntity=httpResponse.getEntity();
    String response=_decryptResponse(serverURL,httpEntity.getContent());
    if (_log.isDebugEnabled()) {
      _log.debug("Server response: " + response);
    }
    if (Validator.isNull(response)) {
      throw new Exception("Server response is null");
    }
    return response;
  }
  finally {
    if (httpClient != null) {
      httpClientConnectionManager.shutdown();
    }
  }
}
