{
  Object[] finderArgs=new Object[]{structureId,start,end,orderByComparator};
  List<JournalStructure> list=(List<JournalStructure>)FinderCacheUtil.getResult(FINDER_PATH_FIND_BY_STRUCTUREID,finderArgs,this);
  if (list == null) {
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(3 + (orderByComparator.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(3);
    }
    query.append(_SQL_SELECT_JOURNALSTRUCTURE_WHERE);
    if (structureId == null) {
      query.append(_FINDER_COLUMN_STRUCTUREID_STRUCTUREID_1);
    }
 else {
      if (structureId.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_STRUCTUREID_STRUCTUREID_3);
      }
 else {
        query.append(_FINDER_COLUMN_STRUCTUREID_STRUCTUREID_2);
      }
    }
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      query.append(JournalStructureModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (structureId != null) {
        qPos.add(structureId);
      }
      list=(List<JournalStructure>)QueryUtil.list(q,getDialect(),start,end);
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        FinderCacheUtil.removeResult(FINDER_PATH_FIND_BY_STRUCTUREID,finderArgs);
      }
 else {
        cacheResult(list);
        FinderCacheUtil.putResult(FINDER_PATH_FIND_BY_STRUCTUREID,finderArgs,list);
      }
      closeSession(session);
    }
  }
  return list;
}
