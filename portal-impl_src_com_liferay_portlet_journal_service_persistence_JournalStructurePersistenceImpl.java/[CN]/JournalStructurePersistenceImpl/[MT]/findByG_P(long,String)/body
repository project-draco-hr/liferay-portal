{
  Object[] finderArgs=new Object[]{new Long(groupId),parentStructureId};
  List<JournalStructure> list=(List<JournalStructure>)FinderCacheUtil.getResult(FINDER_PATH_FIND_BY_G_P,finderArgs,this);
  if (list == null) {
    Session session=null;
    try {
      session=openSession();
      StringBuilder query=new StringBuilder();
      query.append("SELECT journalStructure FROM JournalStructure journalStructure WHERE ");
      query.append("journalStructure.groupId = ?");
      query.append(" AND ");
      if (parentStructureId == null) {
        query.append("journalStructure.parentStructureId IS NULL");
      }
 else {
        if (parentStructureId.equals(StringPool.BLANK)) {
          query.append("(journalStructure.parentStructureId IS NULL OR ");
        }
        query.append("journalStructure.parentStructureId = ?");
        if (parentStructureId.equals(StringPool.BLANK)) {
          query.append(")");
        }
      }
      query.append(" ");
      query.append("ORDER BY ");
      query.append("journalStructure.structureId ASC");
      Query q=session.createQuery(query.toString());
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(groupId);
      if (parentStructureId != null) {
        qPos.add(parentStructureId);
      }
      list=q.list();
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        list=new ArrayList<JournalStructure>();
      }
      cacheResult(list);
      FinderCacheUtil.putResult(FINDER_PATH_FIND_BY_G_P,finderArgs,list);
      closeSession(session);
    }
  }
  return list;
}
