{
  final Map<String,LongWrapper> actualModelDeletionCounters=new HashMap<String,LongWrapper>();
  SAXParser saxParser=new SAXParser();
  ElementHandler elementHandler=new ElementHandler(new ElementProcessor(){
    @Override public void processElement(    Element element){
      StagedModelType stagedModelType=new StagedModelType(element.attributeValue("class-name"),element.attributeValue("referrer-class-name"));
      LongWrapper counter=actualModelDeletionCounters.get(stagedModelType.toString());
      if (counter != null) {
        counter.increment();
      }
 else {
        actualModelDeletionCounters.put(stagedModelType.toString(),new LongWrapper(1));
      }
    }
  }
,new String[]{"deletion-system-event"});
  saxParser.setContentHandler(elementHandler);
  ZipReader zipReader=(ZipReader)portletDataContext.getZipWriter();
  String deletionSystemEventsXML=zipReader.getEntryAsString(ExportImportPathUtil.getRootPath(portletDataContext) + "/deletion-system-events.xml");
  Assert.assertNotNull(deletionSystemEventsXML);
  saxParser.parse(new InputSource(new StringReader(deletionSystemEventsXML)));
  ManifestSummary manifestSummary=portletDataContext.getManifestSummary();
  Set<String> classNames=expectedModelDeletionCounters.keySet();
  Iterator<String> iterator=classNames.iterator();
  while (iterator.hasNext()) {
    String className=iterator.next();
    LongWrapper counter=expectedModelDeletionCounters.get(className);
    if (counter.getValue() == 0) {
      iterator.remove();
    }
  }
  checkCounters(manifestSummary.getModelDeletionCounters(),actualModelDeletionCounters);
  checkCounters(expectedModelDeletionCounters,actualModelDeletionCounters);
}
