{
  int threadLocalBufferLimit=3;
  String propertyKey=StringBundler.class.getName() + ".threadlocal.buffer.limit";
  String propertyValue=System.getProperty(propertyKey);
  System.setProperty(propertyKey,String.valueOf(threadLocalBufferLimit));
  try {
    Assert.assertEquals(Integer.valueOf(threadLocalBufferLimit),ReflectionTestUtil.getFieldValue(StringBundler.class,"_THREAD_LOCAL_BUFFER_LIMIT"));
    ThreadLocal<StringBuilder> threadLocal=ReflectionTestUtil.getFieldValue(StringBundler.class,"_stringBuilderThreadLocal");
    Assert.assertNotNull(threadLocal);
    threadLocal.remove();
    StringBundler sb=new StringBundler();
    sb.append("1");
    sb.append("2");
    sb.append("3");
    sb.append("4");
    Assert.assertEquals("1234",sb.toString());
    StringBuilder stringBuilder=threadLocal.get();
    Assert.assertNotNull(stringBuilder);
    Assert.assertEquals(4,stringBuilder.capacity());
    sb.append("5");
    Assert.assertEquals("12345",sb.toString());
    Assert.assertSame(stringBuilder,threadLocal.get());
    Assert.assertEquals(10,stringBuilder.capacity());
    sb.append("6");
    Assert.assertEquals("123456",sb.toString());
    Assert.assertSame(stringBuilder,threadLocal.get());
    Assert.assertEquals(10,stringBuilder.capacity());
  }
  finally {
    if (propertyValue == null) {
      System.clearProperty(propertyKey);
    }
 else {
      System.setProperty(propertyKey,propertyValue);
    }
  }
}
