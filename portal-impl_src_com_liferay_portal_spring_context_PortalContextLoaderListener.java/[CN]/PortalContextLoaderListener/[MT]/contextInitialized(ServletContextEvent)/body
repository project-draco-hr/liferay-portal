{
  SystemProperties.reload();
  DBFactoryUtil.reset();
  DeployManagerUtil.reset();
  InstancePool.reset();
  MethodCache.reset();
  PortalBeanLocatorUtil.reset();
  PortletBagPool.reset();
  ReferenceRegistry.releaseReferences();
  FieldInterceptionHelperUtil.initialize();
  final ServletContext servletContext=servletContextEvent.getServletContext();
  String portalLibDir=servletContext.getRealPath("/WEB-INF/lib");
  portalLibDir=StringUtil.replace(portalLibDir,CharPool.BACK_SLASH,CharPool.FORWARD_SLASH);
  if (Validator.isNotNull(portalLibDir)) {
    SystemProperties.set(PropsKeys.LIFERAY_LIB_PORTAL_DIR,portalLibDir);
  }
  InitUtil.init();
  _portalServletContextName=servletContext.getServletContextName();
  if (_portalServletContextName == null) {
    _portalServletContextName=StringPool.BLANK;
  }
  if (ServerDetector.isJetty() && _portalServletContextName.equals(StringPool.SLASH)) {
    _portalServletContextName=StringPool.BLANK;
  }
  _portalServletContextPath=servletContext.getContextPath();
  if (ServerDetector.isWebSphere() && _portalServletContextPath.isEmpty()) {
    _portalServletContextName=StringPool.BLANK;
  }
  ClassPathUtil.initializeClassPaths(servletContext);
  CacheRegistryUtil.clear();
  PortletContextBagPool.clear();
  WebAppPool.clear();
  File tempDir=(File)servletContext.getAttribute(JavaConstants.JAVAX_SERVLET_CONTEXT_TEMPDIR);
  PropsValues.LIFERAY_WEB_PORTAL_CONTEXT_TEMPDIR=tempDir.getAbsolutePath();
  try {
    ModuleFrameworkUtilAdapter.initFramework();
    _arrayApplicationContext=new ArrayApplicationContext(PropsValues.SPRING_INFRASTRUCTURE_CONFIGS);
    servletContext.setAttribute(PortalApplicationContext.PARENT_APPLICATION_CONTEXT,_arrayApplicationContext);
    ModuleFrameworkUtilAdapter.registerContext(_arrayApplicationContext);
    ModuleFrameworkUtilAdapter.startFramework();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  _serviceDependecyManager=new ServiceDependencyManager();
  _serviceDependecyManager.addServiceDependencyListener(new ServiceDependencyListener(){
    @Override public void destroy(){
      _indexerPostProcessorRegistry.close();
      _schedulerEntryRegistry.close();
      _serviceWrapperRegistry.close();
    }
    @Override public void dependenciesFulfilled(){
      _indexerPostProcessorRegistry=new IndexerPostProcessorRegistry();
      _schedulerEntryRegistry=new SchedulerEntryRegistry();
      _serviceWrapperRegistry=new ServiceWrapperRegistry();
    }
    private IndexerPostProcessorRegistry _indexerPostProcessorRegistry;
    private SchedulerEntryRegistry _schedulerEntryRegistry;
    private ServiceWrapperRegistry _serviceWrapperRegistry;
  }
);
  _serviceDependecyManager.registerDependencies(MessageBus.class,PortalExecutorManager.class,SingleDestinationMessageSenderFactory.class);
  PortalContextLoaderLifecycleThreadLocal.setInitializing(true);
  try {
    super.contextInitialized(servletContextEvent);
  }
  finally {
    PortalContextLoaderLifecycleThreadLocal.setInitializing(false);
  }
  ApplicationContext applicationContext=ContextLoader.getCurrentWebApplicationContext();
  try {
    BeanReferenceRefreshUtil.refresh(applicationContext.getAutowireCapableBeanFactory());
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  if (PropsValues.CACHE_CLEAR_ON_CONTEXT_INITIALIZATION) {
    FinderCacheUtil.clearCache();
    FinderCacheUtil.clearLocalCache();
    EntityCacheUtil.clearCache();
    EntityCacheUtil.clearLocalCache();
    PermissionCacheUtil.clearCache();
    TemplateResourceLoaderUtil.clearCache();
    ServletContextPool.clear();
    CacheUtil.clearCache();
    MultiVMPoolUtil.clear();
    SingleVMPoolUtil.clear();
    WebCachePoolUtil.clear();
  }
  ClassLoader portalClassLoader=ClassLoaderUtil.getPortalClassLoader();
  ClassLoaderPool.register(_portalServletContextName,portalClassLoader);
  ServletContextPool.put(_portalServletContextName,servletContext);
  BeanLocatorImpl beanLocatorImpl=new BeanLocatorImpl(portalClassLoader,applicationContext);
  PortalBeanLocatorUtil.setBeanLocator(beanLocatorImpl);
  ClassLoader classLoader=portalClassLoader;
  while (classLoader != null) {
    CachedIntrospectionResults.clearClassLoader(classLoader);
    classLoader=classLoader.getParent();
  }
  AutowireCapableBeanFactory autowireCapableBeanFactory=applicationContext.getAutowireCapableBeanFactory();
  clearFilteredPropertyDescriptorsCache(autowireCapableBeanFactory);
  try {
    ModuleFrameworkUtilAdapter.registerContext(applicationContext);
    ModuleFrameworkUtilAdapter.startRuntime();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  initListeners(servletContext);
  RubyExecutor.initRubyGems(servletContext);
}
