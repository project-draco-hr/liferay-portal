{
  HotDeployUtil.reset();
  InstancePool.reset();
  MethodCache.reset();
  PortletBagPool.reset();
  ReferenceRegistry.releaseReferences();
  InitUtil.init();
  ServletContext servletContext=servletContextEvent.getServletContext();
  ClassPathUtil.initializeClassPaths(servletContext);
  DirectServletRegistry.clearServlets();
  CacheRegistryUtil.clear();
  CharBufferPool.cleanUp();
  PortletContextBagPool.clear();
  WebAppPool.clear();
  if (PropsValues.OSGI_ENABLED) {
    try {
      OSGiServiceUtil.init();
      OSGiServiceUtil.start();
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  PortalContextLoaderLifecycleThreadLocal.setInitializing(true);
  try {
    super.contextInitialized(servletContextEvent);
  }
  finally {
    PortalContextLoaderLifecycleThreadLocal.setInitializing(false);
  }
  FinderCacheUtil.clearCache();
  FinderCacheUtil.clearLocalCache();
  EntityCacheUtil.clearCache();
  EntityCacheUtil.clearLocalCache();
  LiferayResourceCacheUtil.clear();
  PermissionCacheUtil.clearCache();
  PermissionCacheUtil.clearLocalCache();
  WikiCacheUtil.clearCache(0);
  ServletContextPool.clear();
  CacheUtil.clearCache();
  MultiVMPoolUtil.clear();
  SingleVMPoolUtil.clear();
  WebCachePoolUtil.clear();
  ApplicationContext applicationContext=ContextLoader.getCurrentWebApplicationContext();
  ClassLoader portalClassLoader=PortalClassLoaderUtil.getClassLoader();
  BeanLocator beanLocator=new BeanLocatorImpl(portalClassLoader,applicationContext);
  PortalBeanLocatorUtil.setBeanLocator(beanLocator);
  ClassLoader classLoader=portalClassLoader;
  while (classLoader != null) {
    CachedIntrospectionResults.clearClassLoader(classLoader);
    classLoader=classLoader.getParent();
  }
  AutowireCapableBeanFactory autowireCapableBeanFactory=applicationContext.getAutowireCapableBeanFactory();
  clearFilteredPropertyDescriptorsCache(autowireCapableBeanFactory);
  try {
    OSGiServiceUtil.registerContext(applicationContext);
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
}
