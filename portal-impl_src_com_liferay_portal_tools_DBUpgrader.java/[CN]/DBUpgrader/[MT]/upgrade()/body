{
  if (_log.isDebugEnabled()) {
    _log.debug("Disable cache registry");
  }
  CacheRegistryUtil.setActive(false);
  checkUpgradeSchemaVersion(ReleaseInfo.RELEASE_5_2_3_BUILD_NUMBER);
  int buildNumber=ReleaseLocalServiceUtil.getBuildNumberOrCreate();
  if (_log.isDebugEnabled()) {
    _log.debug("Update build " + buildNumber);
  }
  _checkPermissionAlgorithm();
  _checkReleaseState(_getReleaseState());
  if (PropsValues.UPGRADE_DATABASE_TRANSACTIONS_DISABLED) {
    TransactionsUtil.disableTransactions();
  }
  try {
    StartupHelperUtil.upgradeProcess(buildNumber);
  }
 catch (  Exception e) {
    _updateReleaseState(ReleaseConstants.STATE_UPGRADE_FAILURE);
    throw e;
  }
 finally {
    if (PropsValues.UPGRADE_DATABASE_TRANSACTIONS_DISABLED) {
      TransactionsUtil.enableTransactions();
    }
  }
  CustomSQLUtil.reloadCustomSQL();
  SQLTransformer.reloadSQLTransformer();
  if (StartupHelperUtil.isUpgraded()) {
    if (_log.isDebugEnabled()) {
      _log.debug("Update company key");
    }
    _updateCompanyKey();
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Check class names");
  }
  ClassNameLocalServiceUtil.checkClassNames();
  if (_log.isDebugEnabled()) {
    _log.debug("Check resource actions");
  }
  ResourceActionLocalServiceUtil.checkResourceActions();
  if (_log.isDebugEnabled()) {
    _log.debug("Clear cache if upgrade process was run");
  }
  if (StartupHelperUtil.isUpgraded()) {
    MultiVMPoolUtil.clear();
  }
}
