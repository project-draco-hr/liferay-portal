{
  if (_log.isDebugEnabled()) {
    _log.debug("Disable cache registry");
  }
  CacheRegistryUtil.setActive(false);
  if (_log.isDebugEnabled()) {
    _log.debug("Run upgrade process");
  }
  int currentBuildNumber=ReleaseLocalServiceUtil.getBuildNumberOrCreate();
  int newBuildNumber=ReleaseInfo.getBuildNumber();
  if (newBuildNumber < currentBuildNumber) {
    throw new IllegalStateException("Attempting to deploy an older Liferay Portal version.  " + "Current build version (" + currentBuildNumber + ") and attempting to deploy version ("+ newBuildNumber+ ")");
  }
  if (currentBuildNumber < ReleaseInfo.RELEASE_5_0_0_BUILD_NUMBER) {
    String msg="You must first upgrade to Liferay Portal 5.0.0";
    System.out.println(msg);
    throw new RuntimeException(msg);
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Update build " + currentBuildNumber);
  }
  StartupHelperUtil.upgradeProcess(currentBuildNumber);
  if (StartupHelperUtil.isUpgraded()) {
    if (_log.isDebugEnabled()) {
      _log.debug("Update company key");
    }
    _updateCompanyKey();
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Check class names");
  }
  ClassNameLocalServiceUtil.checkClassNames();
  if (_log.isDebugEnabled()) {
    _log.debug("Check resource actions");
  }
  ResourceActionLocalServiceUtil.checkResourceActions();
  if (_log.isDebugEnabled()) {
    _log.debug("Check resource codes");
  }
  ResourceCodeLocalServiceUtil.checkResourceCodes();
  if (_log.isDebugEnabled()) {
    _log.debug("Delete temporary images");
  }
  _deleteTempImages();
  if (_log.isDebugEnabled()) {
    _log.debug("Clear cache if upgrade process was run");
  }
  if (StartupHelperUtil.isUpgraded()) {
    MultiVMPoolUtil.clear();
  }
}
