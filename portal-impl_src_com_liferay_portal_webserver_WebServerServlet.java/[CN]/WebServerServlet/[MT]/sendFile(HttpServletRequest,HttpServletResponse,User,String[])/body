{
  FileEntry fileEntry=getFileEntry(pathArray);
  if (fileEntry == null) {
    throw new NoSuchFileEntryException();
  }
  String version=ParamUtil.getString(request,"version");
  if (Validator.isNull(version)) {
    if (Validator.isNotNull(fileEntry.getVersion())) {
      version=fileEntry.getVersion();
    }
  }
  String tempFileId=DLUtil.getTempFileId(fileEntry.getFileEntryId(),version);
  FileVersion fileVersion=fileEntry.getFileVersion(version);
  String fileName=fileVersion.getTitle();
  String extension=fileVersion.getExtension();
  if (!fileName.endsWith(StringPool.PERIOD + extension)) {
    fileName+=StringPool.PERIOD + extension;
  }
  boolean converted=false;
  String targetExtension=ParamUtil.getString(request,"targetExtension");
  int imageThumbnail=ParamUtil.getInteger(request,"imageThumbnail");
  int documentThumbnail=ParamUtil.getInteger(request,"documentThumbnail");
  int previewFileIndex=ParamUtil.getInteger(request,"previewFileIndex");
  boolean audioPreview=ParamUtil.getBoolean(request,"audioPreview");
  boolean videoPreview=ParamUtil.getBoolean(request,"videoPreview");
  int videoThumbnail=ParamUtil.getInteger(request,"videoThumbnail");
  InputStream inputStream=null;
  long contentLength=0;
  if ((imageThumbnail > 0) && (imageThumbnail <= 3)) {
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(fileVersion.getExtension());
    int thumbnailIndex=imageThumbnail - 1;
    inputStream=com.liferay.portlet.documentlibrary.util.ImageProcessorUtil.getThumbnailAsStream(fileVersion,thumbnailIndex);
    contentLength=com.liferay.portlet.documentlibrary.util.ImageProcessorUtil.getThumbnailFileSize(fileVersion,thumbnailIndex);
    converted=true;
  }
 else   if ((documentThumbnail > 0) && (documentThumbnail <= 3)) {
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(PDFProcessorImpl.THUMBNAIL_TYPE);
    int thumbnailIndex=documentThumbnail - 1;
    inputStream=PDFProcessorUtil.getThumbnailAsStream(fileVersion,thumbnailIndex);
    contentLength=PDFProcessorUtil.getThumbnailFileSize(fileVersion,thumbnailIndex);
    converted=true;
  }
 else   if (previewFileIndex > 0) {
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(PDFProcessorImpl.PREVIEW_TYPE);
    inputStream=PDFProcessorUtil.getPreviewAsStream(fileVersion,previewFileIndex);
    contentLength=PDFProcessorUtil.getPreviewFileSize(fileVersion,previewFileIndex);
    converted=true;
  }
 else   if (audioPreview) {
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(AudioProcessor.PREVIEW_TYPE);
    inputStream=AudioProcessor.getPreviewAsStream(fileVersion);
    contentLength=AudioProcessor.getPreviewFileSize(fileVersion);
    converted=true;
  }
 else   if (videoPreview) {
    String type=ParamUtil.getString(request,"type");
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(type);
    inputStream=VideoProcessorUtil.getPreviewAsStream(fileVersion,type);
    contentLength=VideoProcessorUtil.getPreviewFileSize(fileVersion,type);
    response.setHeader(HttpHeaders.ACCEPT_RANGES,HttpHeaders.ACCEPT_RANGES_BYTES_VALUE);
    List<Range> ranges=null;
    try {
      ranges=ServletResponseUtil.getRanges(request,response,contentLength);
    }
 catch (    IOException ioe) {
      if (_log.isErrorEnabled()) {
        _log.error(ioe);
      }
      response.setHeader(HttpHeaders.CONTENT_RANGE,"bytes */" + contentLength);
      response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
      return;
    }
    if ((ranges != null) && (ranges.size() > 0)) {
      if (_log.isDebugEnabled()) {
        _log.debug("Video range requested");
      }
      String contentType=MimeTypesUtil.getContentType(fileName);
      ServletResponseUtil.write(request,response,fileName,ranges,inputStream,contentLength,contentType);
      return;
    }
    converted=true;
  }
 else   if ((videoThumbnail > 0) && (videoThumbnail <= 3)) {
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(VideoProcessorImpl.THUMBNAIL_TYPE);
    int thumbnailIndex=videoThumbnail - 1;
    inputStream=VideoProcessorUtil.getThumbnailAsStream(fileVersion,thumbnailIndex);
    contentLength=VideoProcessorUtil.getThumbnailFileSize(fileVersion,thumbnailIndex);
    converted=true;
  }
 else {
    inputStream=fileVersion.getContentStream(true);
    contentLength=fileVersion.getSize();
    if (Validator.isNotNull(targetExtension)) {
      File convertedFile=DocumentConversionUtil.convert(tempFileId,inputStream,extension,targetExtension);
      if (convertedFile != null) {
        fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(targetExtension);
        inputStream=new FileInputStream(convertedFile);
        contentLength=convertedFile.length();
        converted=true;
      }
    }
  }
  String contentType=null;
  if (converted) {
    contentType=MimeTypesUtil.getContentType(fileName);
  }
 else {
    contentType=fileVersion.getMimeType();
  }
  ServletResponseUtil.sendFile(request,response,fileName,inputStream,contentLength,contentType);
}
