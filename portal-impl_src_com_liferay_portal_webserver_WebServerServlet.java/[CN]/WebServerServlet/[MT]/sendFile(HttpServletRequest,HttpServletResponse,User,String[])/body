{
  FileEntry fileEntry=getFileEntry(pathArray);
  if (fileEntry == null) {
    throw new NoSuchFileEntryException();
  }
  String version=ParamUtil.getString(request,"version");
  if (Validator.isNull(version)) {
    if (Validator.isNotNull(fileEntry.getVersion())) {
      version=fileEntry.getVersion();
    }
  }
  String tempFileId=DLUtil.getTempFileId(fileEntry.getFileEntryId(),version);
  FileVersion fileVersion=fileEntry.getFileVersion(version);
  if (fileVersion.getModel() instanceof DLFileVersion) {
    LiferayFileVersion liferayFileVersion=(LiferayFileVersion)fileVersion;
    if (liferayFileVersion.isInTrash() || liferayFileVersion.isInTrashFolder()) {
      int status=ParamUtil.getInteger(request,"status",WorkflowConstants.STATUS_APPROVED);
      if (status != WorkflowConstants.STATUS_IN_TRASH) {
        throw new NoSuchFileEntryException();
      }
      PermissionChecker permissionChecker=PermissionThreadLocal.getPermissionChecker();
      if (!permissionChecker.hasPermission(fileEntry.getGroupId(),PortletKeys.TRASH,PortletKeys.TRASH,ActionKeys.ACCESS_IN_CONTROL_PANEL)) {
        throw new PrincipalException();
      }
    }
  }
  if ((ParamUtil.getInteger(request,"height") > 0) || (ParamUtil.getInteger(request,"width") > 0)) {
    InputStream inputStream=fileVersion.getContentStream(true);
    Image image=ImageLocalServiceUtil.getImage(inputStream);
    writeImage(image,request,response);
    return;
  }
  String fileName=fileVersion.getTitle();
  String extension=fileVersion.getExtension();
  if (Validator.isNotNull(extension) && !fileName.endsWith(StringPool.PERIOD + extension)) {
    fileName+=StringPool.PERIOD + extension;
  }
  boolean converted=false;
  String targetExtension=ParamUtil.getString(request,"targetExtension");
  int imageThumbnail=ParamUtil.getInteger(request,"imageThumbnail");
  int documentThumbnail=ParamUtil.getInteger(request,"documentThumbnail");
  int previewFileIndex=ParamUtil.getInteger(request,"previewFileIndex");
  boolean audioPreview=ParamUtil.getBoolean(request,"audioPreview");
  boolean imagePreview=ParamUtil.getBoolean(request,"imagePreview");
  boolean videoPreview=ParamUtil.getBoolean(request,"videoPreview");
  int videoThumbnail=ParamUtil.getInteger(request,"videoThumbnail");
  InputStream inputStream=null;
  long contentLength=0;
  if ((imageThumbnail > 0) && (imageThumbnail <= 3)) {
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(ImageProcessorUtil.getThumbnailType(fileVersion));
    int thumbnailIndex=imageThumbnail - 1;
    inputStream=ImageProcessorUtil.getThumbnailAsStream(fileVersion,thumbnailIndex);
    contentLength=ImageProcessorUtil.getThumbnailFileSize(fileVersion,thumbnailIndex);
    converted=true;
  }
 else   if ((documentThumbnail > 0) && (documentThumbnail <= 3)) {
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(PDFProcessor.THUMBNAIL_TYPE);
    int thumbnailIndex=documentThumbnail - 1;
    inputStream=PDFProcessorUtil.getThumbnailAsStream(fileVersion,thumbnailIndex);
    contentLength=PDFProcessorUtil.getThumbnailFileSize(fileVersion,thumbnailIndex);
    converted=true;
  }
 else   if (previewFileIndex > 0) {
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(PDFProcessor.PREVIEW_TYPE);
    inputStream=PDFProcessorUtil.getPreviewAsStream(fileVersion,previewFileIndex);
    contentLength=PDFProcessorUtil.getPreviewFileSize(fileVersion,previewFileIndex);
    converted=true;
  }
 else   if (audioPreview || videoPreview) {
    String type=ParamUtil.getString(request,"type");
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(type);
    if (audioPreview) {
      inputStream=AudioProcessorUtil.getPreviewAsStream(fileVersion,type);
      contentLength=AudioProcessorUtil.getPreviewFileSize(fileVersion,type);
    }
 else {
      inputStream=VideoProcessorUtil.getPreviewAsStream(fileVersion,type);
      contentLength=VideoProcessorUtil.getPreviewFileSize(fileVersion,type);
    }
    converted=true;
  }
 else   if (imagePreview) {
    String type=ImageProcessorUtil.getPreviewType(fileVersion);
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(type);
    inputStream=ImageProcessorUtil.getPreviewAsStream(fileVersion);
    contentLength=ImageProcessorUtil.getPreviewFileSize(fileVersion);
    converted=true;
  }
 else   if ((videoThumbnail > 0) && (videoThumbnail <= 3)) {
    fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(VideoProcessor.THUMBNAIL_TYPE);
    int thumbnailIndex=videoThumbnail - 1;
    inputStream=VideoProcessorUtil.getThumbnailAsStream(fileVersion,thumbnailIndex);
    contentLength=VideoProcessorUtil.getThumbnailFileSize(fileVersion,thumbnailIndex);
    converted=true;
  }
 else {
    inputStream=fileVersion.getContentStream(true);
    contentLength=fileVersion.getSize();
    if (Validator.isNotNull(targetExtension)) {
      File convertedFile=DocumentConversionUtil.convert(tempFileId,inputStream,extension,targetExtension);
      if (convertedFile != null) {
        fileName=FileUtil.stripExtension(fileName).concat(StringPool.PERIOD).concat(targetExtension);
        inputStream=new FileInputStream(convertedFile);
        contentLength=convertedFile.length();
        converted=true;
      }
    }
  }
  String contentType=null;
  if (converted) {
    contentType=MimeTypesUtil.getContentType(fileName);
  }
 else {
    contentType=fileVersion.getMimeType();
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Content type set to " + contentType);
  }
  if (isSupportsRangeHeader(contentType)) {
    sendFileWithRangeHeader(request,response,fileName,inputStream,contentLength,contentType);
  }
 else {
    ServletResponseUtil.sendFile(request,response,fileName,inputStream,contentLength,contentType);
  }
}
