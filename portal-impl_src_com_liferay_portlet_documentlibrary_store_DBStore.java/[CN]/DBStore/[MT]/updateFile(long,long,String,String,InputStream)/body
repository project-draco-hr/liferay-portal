{
  if (DLContentLocalServiceUtil.hasContent(companyId,repositoryId,fileName,versionLabel)) {
    throw new DuplicateFileException(companyId,repositoryId,fileName,versionLabel);
  }
  long length=-1;
  if (inputStream instanceof ByteArrayInputStream) {
    ByteArrayInputStream byteArrayInputStream=(ByteArrayInputStream)inputStream;
    length=byteArrayInputStream.available();
  }
 else   if (inputStream instanceof FileInputStream) {
    FileInputStream fileInputStream=(FileInputStream)inputStream;
    FileChannel fileChannel=fileInputStream.getChannel();
    try {
      length=fileChannel.size();
    }
 catch (    IOException ioe) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unable to detect file size from file channel",ioe);
      }
    }
  }
 else   if (inputStream instanceof UnsyncByteArrayInputStream) {
    UnsyncByteArrayInputStream unsyncByteArrayInputStream=(UnsyncByteArrayInputStream)inputStream;
    length=unsyncByteArrayInputStream.available();
  }
  if (length >= 0) {
    DLContentLocalServiceUtil.addContent(companyId,repositoryId,fileName,versionLabel,inputStream,length);
  }
 else {
    if (_log.isWarnEnabled()) {
      _log.warn("Unable to detect length from input stream. Reading " + "entire input stream into memory as a last resort.");
    }
    byte[] bytes=null;
    try {
      bytes=FileUtil.getBytes(inputStream);
    }
 catch (    IOException ioe) {
      throw new SystemException(ioe);
    }
    DLContentLocalServiceUtil.addContent(companyId,repositoryId,fileName,versionLabel,bytes);
  }
}
