{
  ActionableDynamicQuery actionableDynamicQuery=_dlFileVersionLocalService.getActionableDynamicQuery();
  actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      Criterion criterion=RestrictionsFactoryUtil.eq("mimeType",originalMimeTypes[0]);
      for (int i=1; i < originalMimeTypes.length; i++) {
        criterion=RestrictionsFactoryUtil.or(criterion,RestrictionsFactoryUtil.eq("mimeType",originalMimeTypes[i]));
      }
      dynamicQuery.add(criterion);
    }
  }
);
  actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<DLFileVersion>(){
    @Override public void performAction(    DLFileVersion dlFileVersion){
      InputStream inputStream=null;
      try {
        inputStream=_dlFileEntryLocalService.getFileAsStream(dlFileVersion.getFileEntryId(),dlFileVersion.getVersion(),false);
      }
 catch (      Exception e) {
        if (_log.isWarnEnabled()) {
          DLFileEntry dlFileEntry=_dlFileEntryLocalService.fetchDLFileEntry(dlFileVersion.getFileEntryId());
          if (dlFileEntry == null) {
            _log.warn("Unable to find file entry associated " + "with file version " + dlFileVersion.getFileVersionId(),e);
          }
 else {
            StringBundler sb=new StringBundler(4);
            sb.append("Unable to find file version ");
            sb.append(dlFileVersion.getVersion());
            sb.append(" for file entry ");
            sb.append(dlFileEntry.getName());
            _log.warn(sb.toString(),e);
          }
        }
        return;
      }
      String title=DLUtil.getTitleWithExtension(dlFileVersion.getTitle(),dlFileVersion.getExtension());
      String mimeType=getMimeType(inputStream,title);
      if (mimeType.equals(dlFileVersion.getMimeType())) {
        return;
      }
      dlFileVersion.setMimeType(mimeType);
      _dlFileVersionLocalService.updateDLFileVersion(dlFileVersion);
      try {
        DLFileEntry dlFileEntry=dlFileVersion.getFileEntry();
        if (Objects.equals(dlFileEntry.getVersion(),dlFileVersion.getVersion())) {
          dlFileEntry.setMimeType(mimeType);
          _dlFileEntryLocalService.updateDLFileEntry(dlFileEntry);
        }
      }
 catch (      PortalException pe) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unable to get file entry " + dlFileVersion.getFileEntryId(),pe);
        }
      }
    }
  }
);
  if (_log.isDebugEnabled()) {
    long count=actionableDynamicQuery.performCount();
    _log.debug("Processing " + count + " file versions with mime types: "+ StringUtil.merge(originalMimeTypes,StringPool.COMMA));
  }
  actionableDynamicQuery.performActions();
}
