{
  String name=permission.getName();
  String actions=permission.getActions();
  if (isJSPCompiler(name,actions)) {
    return true;
  }
  Class<?> callerClass9=null;
  if (permission instanceof CheckMemberAccessPermission) {
    CheckMemberAccessPermission checkMemberAccessPermission=(CheckMemberAccessPermission)permission;
    if (checkMemberAccessPermission.getCallerClass() == ReferenceRegistry.class) {
      Class<?> checkMemberAccessPermissionCallerClass=checkMemberAccessPermission.getCallerClass();
      int depth=9;
      while (checkMemberAccessPermissionCallerClass == ReferenceRegistry.class) {
        depth++;
        checkMemberAccessPermissionCallerClass=Reflection.getCallerClass(depth);
      }
      ClassLoader callerClassLoader=PACLClassLoaderUtil.getClassLoader(checkMemberAccessPermissionCallerClass);
      if (callerClassLoader == checkMemberAccessPermission.getSubjectClassLoader()) {
        logReflect(checkMemberAccessPermissionCallerClass,depth);
        return true;
      }
    }
    callerClass9=checkMemberAccessPermission.getCallerClass();
  }
 else {
    callerClass9=Reflection.getCallerClass(9);
  }
  if (isResinReflectionAnnotatedType(callerClass9)) {
    logReflect(callerClass9,9);
    return true;
  }
  if (isResinJavaSessionSerializer()) {
    return true;
  }
  if (callerClass9 == AbstractMessagingConfigurator.class) {
    logReflect(callerClass9,9);
    return true;
  }
  if ((callerClass9.getEnclosingClass() == Introspector.class) && CheckerUtil.isAccessControllerDoPrivileged(10)) {
    logReflect(callerClass9,9);
    return true;
  }
  if (callerClass9 == ReflectUtil.class) {
    logReflect(callerClass9,9);
    return true;
  }
  Class<?> callerClass7=Reflection.getCallerClass(7);
  Class<?> callerClass8=Reflection.getCallerClass(8);
  if (name.equals("suppressAccessChecks") && (callerClass7 == ReferenceEntry.class)) {
    if (callerClass8 == ReferenceRegistry.class) {
      logReflect(callerClass7,7);
      return true;
    }
  }
  if (JavaDetector.isIBM() || JavaDetector.isJDK7()) {
    if ((callerClass8.getEnclosingClass() == Class.class) && CheckerUtil.isAccessControllerDoPrivileged(9)) {
      logReflect(callerClass8,8);
      return true;
    }
  }
 else {
    if ((callerClass7.getEnclosingClass() == Class.class) && CheckerUtil.isAccessControllerDoPrivileged(8)) {
      logReflect(callerClass7,7);
      return true;
    }
  }
  if (JavaDetector.isJDK7() || JavaDetector.isOpenJDK()) {
    Class<?> callerClass10=Reflection.getCallerClass(10);
    if ((callerClass10.getEnclosingClass() == Thread.class) && CheckerUtil.isAccessControllerDoPrivileged(11)) {
      logReflect(callerClass10,10);
      return true;
    }
  }
 else {
    if ((callerClass9.getEnclosingClass() == Thread.class) && CheckerUtil.isAccessControllerDoPrivileged(10)) {
      logReflect(callerClass9,9);
      return true;
    }
  }
  if (isGlassfishSecureAction(callerClass7.getEnclosingClass()) && CheckerUtil.isAccessControllerDoPrivileged(8)) {
    logReflect(callerClass7,7);
    return true;
  }
  if (callerClass9 == BasicPropertyAccessor.class) {
    logReflect(callerClass9,9);
    return true;
  }
  if (callerClass7 == EntityTuplizerFactory.class) {
    logReflect(callerClass7,7);
    return true;
  }
  if (callerClass9 == ReflectHelper.class) {
    logReflect(callerClass9,9);
    return true;
  }
  if (callerClass9 == BeanUtils.class) {
    logReflect(callerClass9,9);
    return true;
  }
  if (callerClass9.getEnclosingClass() == SimpleInstantiationStrategy.class) {
    logReflect(callerClass9,9);
    return true;
  }
  if (callerClass9.getEnclosingClass() == LocalVariableTableParameterNameDiscoverer.class) {
    logReflect(callerClass9,9);
    return true;
  }
  if (callerClass7 == ReflectionUtils.class) {
    logReflect(callerClass7,7);
    return true;
  }
  if (callerClass9 == ReflectionUtils.class) {
    logReflect(callerClass9,9);
    return true;
  }
  if (isWebLogicAbstractApplicationContextDelegator(callerClass9)) {
    logReflect(callerClass9,9);
    return true;
  }
  if (isWebLogicAbstractBeanDefinitionDelegator(callerClass9)) {
    logReflect(callerClass9,9);
    return true;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Rejecting call stack:");
    for (int i=6; i < 11; i++) {
      _log.debug("Frame " + i + " "+ Reflection.getCallerClass(i));
    }
  }
  return false;
}
