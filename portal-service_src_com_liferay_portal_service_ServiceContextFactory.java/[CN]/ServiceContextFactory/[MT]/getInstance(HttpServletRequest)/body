{
  ServiceContext serviceContext=new ServiceContext();
  ThemeDisplay themeDisplay=(ThemeDisplay)request.getAttribute(WebKeys.THEME_DISPLAY);
  if (themeDisplay != null) {
    serviceContext.setCompanyId(themeDisplay.getCompanyId());
    serviceContext.setLanguageId(themeDisplay.getLanguageId());
    serviceContext.setLayoutFullURL(PortalUtil.getCanonicalURL(PortalUtil.getLayoutFullURL(themeDisplay),themeDisplay,themeDisplay.getLayout()));
    serviceContext.setLayoutURL(PortalUtil.getCanonicalURL(PortalUtil.getLayoutURL(themeDisplay),themeDisplay,themeDisplay.getLayout()));
    serviceContext.setPathMain(PortalUtil.getPathMain());
    serviceContext.setPlid(themeDisplay.getPlid());
    serviceContext.setPortalURL(PortalUtil.getCanonicalURL(PortalUtil.getPortalURL(request),themeDisplay,themeDisplay.getLayout()));
    serviceContext.setScopeGroupId(themeDisplay.getScopeGroupId());
    serviceContext.setSignedIn(themeDisplay.isSignedIn());
    User user=themeDisplay.getUser();
    serviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay));
    serviceContext.setUserId(user.getUserId());
  }
 else {
    long companyId=PortalUtil.getCompanyId(request);
    serviceContext.setCompanyId(companyId);
    serviceContext.setPathMain(PortalUtil.getPathMain());
    User user=null;
    try {
      user=PortalUtil.getUser(request);
    }
 catch (    NoSuchUserException nsue) {
    }
    if (user != null) {
      serviceContext.setSignedIn(!user.isDefaultUser());
      serviceContext.setUserId(user.getUserId());
    }
 else {
      serviceContext.setSignedIn(false);
    }
  }
  Map<String,Serializable> attributes=new HashMap<String,Serializable>();
  Map<String,String[]> parameters=request.getParameterMap();
  for (  Map.Entry<String,String[]> entry : parameters.entrySet()) {
    String name=entry.getKey();
    String[] values=entry.getValue();
    if ((values != null) && (values.length > 0)) {
      if (values.length == 1) {
        attributes.put(name,values[0]);
      }
 else {
        attributes.put(name,values);
      }
    }
  }
  serviceContext.setAttributes(attributes);
  String cmd=ParamUtil.getString(request,Constants.CMD);
  serviceContext.setCommand(cmd);
  String currentURL=PortalUtil.getCurrentURL(request);
  serviceContext.setCurrentURL(currentURL);
  boolean addGroupPermissions=ParamUtil.getBoolean(request,"addGroupPermissions");
  boolean addGuestPermissions=ParamUtil.getBoolean(request,"addGuestPermissions");
  String[] groupPermissions=PortalUtil.getGroupPermissions(request);
  String[] guestPermissions=PortalUtil.getGuestPermissions(request);
  serviceContext.setAddGroupPermissions(addGroupPermissions);
  serviceContext.setAddGuestPermissions(addGuestPermissions);
  serviceContext.setGroupPermissions(groupPermissions);
  serviceContext.setGuestPermissions(guestPermissions);
  String portletId=PortalUtil.getPortletId(request);
  if (Validator.isNotNull(portletId)) {
    PortletPreferencesIds portletPreferencesIds=PortletPreferencesFactoryUtil.getPortletPreferencesIds(request,portletId);
    serviceContext.setPortletPreferencesIds(portletPreferencesIds);
  }
  Map<String,String> headerMap=new HashMap<String,String>();
  Enumeration<String> enu=request.getHeaderNames();
  while (enu.hasMoreElements()) {
    String header=enu.nextElement();
    String value=request.getHeader(header);
    headerMap.put(header,value);
  }
  serviceContext.setHeaders(headerMap);
  serviceContext.setRemoteAddr(request.getRemoteAddr());
  serviceContext.setRemoteHost(request.getRemoteHost());
  serviceContext.setRequest(request);
  Map<String,String[]> parameterMap=request.getParameterMap();
  List<Long> assetCategoryIdsList=new ArrayList<Long>();
  for (  Map.Entry<String,String[]> entry : parameterMap.entrySet()) {
    String name=entry.getKey();
    if (name.startsWith("assetCategoryIds")) {
      long[] assetVocabularyAssetCategoryIds=StringUtil.split(ParamUtil.getString(request,name),0L);
      for (      long assetCategoryId : assetVocabularyAssetCategoryIds) {
        assetCategoryIdsList.add(assetCategoryId);
      }
    }
  }
  long[] assetCategoryIds=ArrayUtil.toArray(assetCategoryIdsList.toArray(new Long[assetCategoryIdsList.size()]));
  boolean assetEntryVisible=ParamUtil.getBoolean(request,"assetEntryVisible",true);
  long[] assetLinkEntryIds=StringUtil.split(ParamUtil.getString(request,"assetLinkSearchContainerPrimaryKeys"),0L);
  String[] assetTagNames=StringUtil.split(ParamUtil.getString(request,"assetTagNames"));
  serviceContext.setAssetCategoryIds(assetCategoryIds);
  serviceContext.setAssetEntryVisible(assetEntryVisible);
  serviceContext.setAssetLinkEntryIds(assetLinkEntryIds);
  serviceContext.setAssetTagNames(assetTagNames);
  int workflowAction=ParamUtil.getInteger(request,"workflowAction",WorkflowConstants.ACTION_PUBLISH);
  serviceContext.setWorkflowAction(workflowAction);
  return serviceContext;
}
