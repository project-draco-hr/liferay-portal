{
  ServiceContext serviceContext=ServiceContextThreadLocal.getServiceContext();
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  if (serviceContext != null) {
    serviceContext=(ServiceContext)serviceContext.clone();
  }
 else {
    serviceContext=new ServiceContext();
    serviceContext.setCompanyId(themeDisplay.getCompanyId());
    serviceContext.setLanguageId(themeDisplay.getLanguageId());
    serviceContext.setLayoutFullURL(PortalUtil.getLayoutFullURL(themeDisplay));
    serviceContext.setLayoutURL(PortalUtil.getLayoutURL(themeDisplay));
    serviceContext.setPathMain(PortalUtil.getPathMain());
    serviceContext.setPlid(themeDisplay.getPlid());
    serviceContext.setPortalURL(PortalUtil.getPortalURL(portletRequest));
    serviceContext.setSignedIn(themeDisplay.isSignedIn());
    User user=themeDisplay.getUser();
    serviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay));
    serviceContext.setUserId(user.getUserId());
  }
  serviceContext.setScopeGroupId(themeDisplay.getScopeGroupId());
  Map<String,Serializable> attributes=new HashMap<String,Serializable>();
  Enumeration<String> enu=portletRequest.getParameterNames();
  while (enu.hasMoreElements()) {
    String param=enu.nextElement();
    String[] values=portletRequest.getParameterValues(param);
    if ((values != null) && (values.length > 0)) {
      if (values.length == 1) {
        attributes.put(param,values[0]);
      }
 else {
        attributes.put(param,values);
      }
    }
  }
  serviceContext.setAttributes(attributes);
  String cmd=ParamUtil.getString(portletRequest,Constants.CMD);
  serviceContext.setCommand(cmd);
  String currentURL=PortalUtil.getCurrentURL(portletRequest);
  serviceContext.setCurrentURL(currentURL);
  long formDateLong=ParamUtil.getLong(portletRequest,"formDate");
  if (formDateLong > 0) {
    Date formDate=new Date(formDateLong);
    serviceContext.setFormDate(formDate);
  }
  boolean addGroupPermissions=ParamUtil.getBoolean(portletRequest,"addGroupPermissions");
  boolean addGuestPermissions=ParamUtil.getBoolean(portletRequest,"addGuestPermissions");
  String[] groupPermissions=PortalUtil.getGroupPermissions(portletRequest);
  String[] guestPermissions=PortalUtil.getGuestPermissions(portletRequest);
  serviceContext.setAddGroupPermissions(addGroupPermissions);
  serviceContext.setAddGuestPermissions(addGuestPermissions);
  serviceContext.setGroupPermissions(groupPermissions);
  serviceContext.setGuestPermissions(guestPermissions);
  HttpServletRequest request=PortalUtil.getHttpServletRequest(portletRequest);
  String portletId=PortalUtil.getPortletId(portletRequest);
  PortletPreferencesIds portletPreferencesIds=PortletPreferencesFactoryUtil.getPortletPreferencesIds(request,portletId);
  serviceContext.setPortletPreferencesIds(portletPreferencesIds);
  Map<String,String> headerMap=new HashMap<String,String>();
  enu=request.getHeaderNames();
  while (enu.hasMoreElements()) {
    String header=enu.nextElement();
    String value=request.getHeader(header);
    headerMap.put(header,value);
  }
  serviceContext.setHeaders(headerMap);
  serviceContext.setRemoteAddr(request.getRemoteAddr());
  serviceContext.setRemoteHost(request.getRemoteHost());
  serviceContext.setRequest(request);
  Map<String,String[]> parameterMap=portletRequest.getParameterMap();
  List<Long> assetCategoryIdsList=new ArrayList<Long>();
  String[] assetTagNames=null;
  long[] assetCategoryIds=null;
  boolean foundAssetInformation=false;
  for (  Map.Entry<String,String[]> entry : parameterMap.entrySet()) {
    String name=entry.getKey();
    if (name.startsWith("assetCategoryIds")) {
      long[] assetVocabularyAssetCategoryIds=StringUtil.split(ParamUtil.getString(request,name),0L);
      for (      long assetCategoryId : assetVocabularyAssetCategoryIds) {
        assetCategoryIdsList.add(assetCategoryId);
      }
      assetCategoryIds=ArrayUtil.toArray(assetCategoryIdsList.toArray(new Long[assetCategoryIdsList.size()]));
      if (foundAssetInformation) {
        break;
      }
      foundAssetInformation=true;
    }
 else     if (name.startsWith("assetTagNames")) {
      assetTagNames=StringUtil.split(ParamUtil.getString(request,name));
      if (foundAssetInformation) {
        break;
      }
      foundAssetInformation=true;
    }
  }
  boolean assetEntryVisible=ParamUtil.getBoolean(portletRequest,"assetEntryVisible",true);
  long[] assetLinkEntryIds=StringUtil.split(ParamUtil.getString(portletRequest,"assetLinksSearchContainerPrimaryKeys"),0L);
  serviceContext.setAssetCategoryIds(assetCategoryIds);
  serviceContext.setAssetEntryVisible(assetEntryVisible);
  serviceContext.setAssetLinkEntryIds(assetLinkEntryIds);
  serviceContext.setAssetTagNames(assetTagNames);
  int workflowAction=ParamUtil.getInteger(portletRequest,"workflowAction",WorkflowConstants.ACTION_PUBLISH);
  serviceContext.setWorkflowAction(workflowAction);
  return serviceContext;
}
