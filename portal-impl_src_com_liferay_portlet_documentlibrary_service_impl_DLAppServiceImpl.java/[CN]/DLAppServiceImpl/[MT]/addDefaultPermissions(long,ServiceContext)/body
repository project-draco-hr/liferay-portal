{
  long parentGroupId=PortalUtil.getParentGroupId(repositoryId);
  Group parentGroup=GroupLocalServiceUtil.getGroup(parentGroupId);
  Role defaultGroupRole=RoleLocalServiceUtil.getDefaultGroupRole(parentGroupId);
  String[] roleNames=new String[]{RoleConstants.GUEST,defaultGroupRole.getName()};
  String modelName=DLFileEntryConstants.getClassName();
  List<String> supportedActions=ResourceActionsUtil.getModelResourceActions(modelName);
  List<String> groupDefaultActions=ResourceActionsUtil.getModelResourceGroupDefaultActions(modelName);
  List<String> guestDefaultActions=ResourceActionsUtil.getModelResourceGuestDefaultActions(modelName);
  List<String> guestUnsupportedActions=ResourceActionsUtil.getModelResourceGuestUnsupportedActions(modelName);
  List<String> guestPermissions=new ArrayList<String>();
  List<String> groupPermissions=new ArrayList<String>();
  for (  String roleName : roleNames) {
    for (    String action : supportedActions) {
      if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action)&& parentGroup.hasPublicLayouts()) {
        guestPermissions.add(action);
      }
 else       if (roleName.equals(defaultGroupRole.getName()) && groupDefaultActions.contains(action)) {
        groupPermissions.add(action);
      }
    }
  }
  serviceContext.setGuestPermissions(guestPermissions.toArray(new String[0]));
  serviceContext.setGroupPermissions(groupPermissions.toArray(new String[0]));
}
