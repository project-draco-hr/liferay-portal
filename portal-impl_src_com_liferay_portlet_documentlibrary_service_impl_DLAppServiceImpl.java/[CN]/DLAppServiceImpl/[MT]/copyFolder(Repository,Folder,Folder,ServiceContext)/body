{
  Queue<Folder[]> folders=new LinkedList<>();
  final List<FileEntry> fileEntries=new ArrayList<>();
  Folder curSrcFolder=srcFolder;
  Folder curDestFolder=destFolder;
  while (true) {
    List<FileEntry> srcFileEntries=repository.getFileEntries(curSrcFolder.getFolderId(),QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    for (    FileEntry srcFileEntry : srcFileEntries) {
      try {
        FileEntry fileEntry=repository.copyFileEntry(getUserId(),curDestFolder.getGroupId(),srcFileEntry.getFileEntryId(),curDestFolder.getFolderId(),serviceContext);
        fileEntries.add(fileEntry);
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
    List<Folder> srcSubfolders=repository.getFolders(curSrcFolder.getFolderId(),false,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    for (    Folder srcSubfolder : srcSubfolders) {
      Folder destSubfolder=repository.addFolder(getUserId(),curDestFolder.getFolderId(),srcSubfolder.getName(),srcSubfolder.getDescription(),serviceContext);
      dlAppHelperLocalService.addFolder(getUserId(),destSubfolder,serviceContext);
      folders.offer(new Folder[]{srcSubfolder,destSubfolder});
    }
    Folder[] next=folders.poll();
    if (next == null) {
      break;
    }
 else {
      curSrcFolder=next[0];
      curDestFolder=next[1];
    }
  }
  TransactionCommitCallbackRegistryUtil.registerCallback(new Callable<Void>(){
    @Override public Void call() throws Exception {
      for (      FileEntry fileEntry : fileEntries) {
        DLProcessorRegistryUtil.trigger(fileEntry,null);
      }
      return null;
    }
  }
);
}
