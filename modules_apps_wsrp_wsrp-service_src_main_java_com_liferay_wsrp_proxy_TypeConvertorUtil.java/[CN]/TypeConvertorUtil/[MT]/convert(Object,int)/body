{
  if (source == null) {
    return null;
  }
  String sourcePackage=_V1_PACKAGE;
  String destinationPackage=_V2_PACKAGE;
  if (sourceVersion == 2) {
    sourcePackage=_V2_PACKAGE;
    destinationPackage=_V1_PACKAGE;
  }
  Class<?> sourceClass=source.getClass();
  String sourceClassName=sourceClass.getSimpleName();
  Object destination=null;
  if (sourceClass.isArray()) {
    destination=source;
    Class<?> componentType=sourceClass.getComponentType();
    if (componentType.getName().contains(sourcePackage)) {
      Object[] sourceArray=(Object[])source;
      Class<?> destinationComponentType=Class.forName(destinationPackage + componentType.getSimpleName());
      Object[] destinationArray=(Object[])Array.newInstance(destinationComponentType,sourceArray.length);
      for (int i=0; i < sourceArray.length; i++) {
        Object sourceArrayValue=sourceArray[i];
        destinationArray[i]=convert(sourceArrayValue,sourceVersion);
      }
      destination=destinationArray;
    }
  }
 else   if (sourceClass == CookieProtocol.class) {
    CookieProtocol cookieProtocol=(CookieProtocol)source;
    destination=oasis.names.tc.wsrp.v2.types.CookieProtocol.fromValue(cookieProtocol.getValue());
  }
 else   if (sourceClass == oasis.names.tc.wsrp.v2.types.CookieProtocol.class) {
    oasis.names.tc.wsrp.v2.types.CookieProtocol cookieProtocol=(oasis.names.tc.wsrp.v2.types.CookieProtocol)source;
    destination=CookieProtocol.fromValue(cookieProtocol.getValue());
  }
 else   if (sourceClass == StateChange.class) {
    StateChange stateChange=(StateChange)source;
    destination=oasis.names.tc.wsrp.v2.types.StateChange.fromValue(stateChange.getValue());
  }
 else   if (sourceClass == oasis.names.tc.wsrp.v2.types.StateChange.class) {
    oasis.names.tc.wsrp.v2.types.StateChange stateChange=(oasis.names.tc.wsrp.v2.types.StateChange)source;
    destination=StateChange.fromValue(stateChange.getValue());
  }
 else {
    Class<?> destinationClass=Class.forName(destinationPackage + sourceClassName);
    destination=destinationClass.newInstance();
    Map<String,Object> sourceChildren=PropertyUtils.describe(source);
    for (    Map.Entry<String,Object> sourceChildEntry : sourceChildren.entrySet()) {
      String sourceChildName=sourceChildEntry.getKey();
      if (sourceChildName.equals("class")) {
        continue;
      }
      Object sourceChild=sourceChildEntry.getValue();
      if (sourceChild == null) {
        continue;
      }
      _convert(sourceVersion,sourcePackage,sourceClass,sourceChild,sourceChildName,destination);
    }
  }
  return destination;
}
