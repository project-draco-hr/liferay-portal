{
  Session session=null;
  try {
    session=HibernateUtil.openSession();
    String sql="";
    sql+="(" + CustomSQLUtil.get(FIND_BY_ADMIN_ROLE) + ") ";
    sql+="UNION ";
    sql+="(" + CustomSQLUtil.get(FIND_BY_USER_PERMISSION) + ") ";
    sql+="UNION ";
    sql+="(" + CustomSQLUtil.get(FIND_BY_GROUP_PERMISSION) + ") ";
    sql+="UNION ";
    sql+="(" + CustomSQLUtil.get(FIND_BY_ORG_PERMISSION) + ") ";
    sql+="UNION ";
    sql+="(" + CustomSQLUtil.get(FIND_BY_USER_ROLE) + ") ";
    sql+="UNION ";
    sql+="(" + CustomSQLUtil.get(FIND_BY_GROUP_ROLE) + ") ";
    sql+="UNION ";
    sql+="(" + CustomSQLUtil.get(FIND_BY_ORG_ROLE) + ") ";
    sql+="ORDER BY lastName ASC, firstName ASC, middleName ASC ";
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    SQLQuery q=session.createSQLQuery(sql);
    q.setCacheable(false);
    q.addScalar("userId",Hibernate.STRING);
    QueryPos qPos=QueryPos.getInstance(q);
    for (int i=0; i < 7; i++) {
      qPos.add(companyId);
      if (i > 0) {
        qPos.add(name);
        if (i < 4) {
          qPos.add(primKey);
        }
 else {
          qPos.add(companyId);
          qPos.add(groupId);
        }
        qPos.add(actionId);
      }
      qPos.add(firstName);
      qPos.add(firstName);
      qPos.add(middleName);
      qPos.add(middleName);
      qPos.add(lastName);
      qPos.add(lastName);
      qPos.add(emailAddress);
      qPos.add(emailAddress);
    }
    List list=new ArrayList();
    Iterator itr=QueryUtil.iterate(q,HibernateUtil.getDialect(),begin,end);
    while (itr.hasNext()) {
      String userId=(String)itr.next();
      User user=UserUtil.findByPrimaryKey(userId);
      list.add(user);
    }
    return list;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    HibernateUtil.closeSession(session);
  }
}
