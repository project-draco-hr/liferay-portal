{
  int start=searchContext.getStart();
  int end=searchContext.getEnd();
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) {
    Hits hits=getResults(searchContext);
    filterResults(hits);
    return hits;
  }
  if ((start < 0) || (start > end)) {
    return new HitsImpl();
  }
  int offset=0;
  int totalHits=0;
  long startTime=0;
  int totalExcludedDocs=0;
  List<Document> documents=new ArrayList<Document>();
  List<Float> scores=new ArrayList<Float>();
  while (true) {
    int count=end - documents.size();
    int amplifiedCount=(int)(count * _INDEX_PERMISSION_FILTER_SEARCH_AMPLIFICATION_FACTOR);
    int amplifiedEnd=offset + amplifiedCount;
    searchContext.setStart(offset);
    searchContext.setEnd(amplifiedEnd);
    Hits hits=getResults(searchContext);
    if (startTime == 0) {
      totalHits=hits.getLength();
      startTime=hits.getStart();
    }
    Document[] orginalDocs=hits.getDocs();
    filterResults(hits);
    Document[] finalDocs=hits.getDocs();
    totalExcludedDocs+=orginalDocs.length - finalDocs.length;
    collectResults(hits,documents,scores,count);
    if ((finalDocs.length >= count) || (orginalDocs.length < amplifiedCount) || (amplifiedEnd >= totalHits)) {
      updateResults(hits,documents,scores,start,end,totalHits - totalExcludedDocs,startTime);
      return hits;
    }
    offset=amplifiedEnd;
  }
}
