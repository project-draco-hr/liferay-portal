{
  OutputStream outputStream=null;
  Watcher watcher=WatcherManager.getWatcher(getSyncAccountId());
  try {
    Path tempFilePath=FileUtil.getTempFilePath(syncFile);
    boolean exists=FileUtil.exists(filePath);
    if (append) {
      outputStream=Files.newOutputStream(tempFilePath,StandardOpenOption.APPEND);
      IOUtils.copyLarge(inputStream,outputStream);
    }
 else {
      if (exists && (boolean)getParameterValue("patch")) {
        Files.copy(filePath,tempFilePath,StandardCopyOption.REPLACE_EXISTING);
        IODeltaUtil.patch(tempFilePath,inputStream);
      }
 else {
        Files.copy(inputStream,tempFilePath,StandardCopyOption.REPLACE_EXISTING);
      }
    }
    watcher.addDownloadedFilePathName(filePath.toString());
    if (GetterUtil.getBoolean(syncFile.getLocalExtraSettingValue("restoreEvent"))) {
      syncFile.unsetLocalExtraSetting("restoreEvent");
      syncFile.setUiEvent(SyncFile.UI_EVENT_RESTORED_REMOTE);
    }
 else     if (exists) {
      syncFile.setUiEvent(SyncFile.UI_EVENT_DOWNLOADED_UPDATE);
    }
 else {
      syncFile.setUiEvent(SyncFile.UI_EVENT_DOWNLOADED_NEW);
    }
    FileKeyUtil.writeFileKey(tempFilePath,String.valueOf(syncFile.getSyncFileId()),false);
    FileUtil.setModifiedTime(tempFilePath,syncFile.getModifiedTime());
    if (MSOfficeFileUtil.isLegacyExcelFile(filePath)) {
      syncFile.setLocalExtraSetting("lastSavedDate",MSOfficeFileUtil.getLastSavedDate(tempFilePath));
    }
    Files.move(tempFilePath,filePath,StandardCopyOption.ATOMIC_MOVE,StandardCopyOption.REPLACE_EXISTING);
    ExecutorService executorService=SyncEngine.getExecutorService();
    Runnable runnable=new Runnable(){
      @Override public void run(){
        IODeltaUtil.checksums(syncFile);
        syncFile.setState(SyncFile.STATE_SYNCED);
        SyncFileService.update(syncFile);
      }
    }
;
    executorService.execute(runnable);
  }
 catch (  FileSystemException fse) {
    if (fse instanceof AccessDeniedException) {
      syncFile.setState(SyncFile.STATE_ERROR);
      syncFile.setUiEvent(SyncFile.UI_EVENT_ACCESS_DENIED_LOCAL);
      SyncFileService.update(syncFile);
      return;
    }
 else     if (fse instanceof NoSuchFileException) {
      if (isEventCancelled()) {
        SyncFileService.deleteSyncFile(syncFile);
        return;
      }
    }
    watcher.removeDownloadedFilePathName(filePath.toString());
    String message=fse.getMessage();
    _logger.error(message,fse);
    syncFile.setState(SyncFile.STATE_ERROR);
    if (message.contains("File name too long")) {
      syncFile.setUiEvent(SyncFile.UI_EVENT_FILE_NAME_TOO_LONG);
    }
    SyncFileService.update(syncFile);
  }
 finally {
    StreamUtil.cleanUp(outputStream);
  }
}
