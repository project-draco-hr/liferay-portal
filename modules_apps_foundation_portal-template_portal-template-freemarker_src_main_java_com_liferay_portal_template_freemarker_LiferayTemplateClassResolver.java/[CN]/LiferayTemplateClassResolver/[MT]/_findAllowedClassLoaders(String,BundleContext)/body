{
  Bundle bundle=bundleContext.getBundle();
  BundleWiring bundleWiring=bundle.adapt(BundleWiring.class);
  Set<ClassLoader> classLoaders=new HashSet<>();
  List<BundleCapability> capabilities=bundleWiring.getCapabilities(BundleRevision.PACKAGE_NAMESPACE);
  for (  BundleCapability capability : capabilities) {
    Map<String,Object> attributes=capability.getAttributes();
    String exportPackage=(String)attributes.get(BundleRevision.PACKAGE_NAMESPACE);
    if (allowedClass.equals(StringPool.STAR)) {
      continue;
    }
 else     if (allowedClass.endsWith(StringPool.STAR)) {
      allowedClass=allowedClass.substring(0,allowedClass.length() - 1);
      if (exportPackage.startsWith(allowedClass)) {
        BundleRevision provider=capability.getRevision();
        Bundle providerBundle=provider.getBundle();
        BundleWiring providerBundleWiring=providerBundle.adapt(BundleWiring.class);
        classLoaders.add(providerBundleWiring.getClassLoader());
      }
    }
 else     if (allowedClass.equals(exportPackage)) {
      BundleRevision revision=capability.getRevision();
      Bundle revisionBundle=revision.getBundle();
      BundleWiring providerBundleWiring=revisionBundle.adapt(BundleWiring.class);
      classLoaders.add(providerBundleWiring.getClassLoader());
    }
 else {
      String allowedClassPackage=allowedClass.substring(0,allowedClass.lastIndexOf("."));
      if (allowedClassPackage.equals(exportPackage)) {
        BundleRevision revision=capability.getRevision();
        Bundle revisionBundle=revision.getBundle();
        BundleWiring providerBundleWiring=revisionBundle.adapt(BundleWiring.class);
        classLoaders.add(providerBundleWiring.getClassLoader());
      }
    }
  }
  if (classLoaders.isEmpty() && _log.isWarnEnabled()) {
    _log.warn("No bundle exports " + allowedClass);
  }
  return classLoaders;
}
