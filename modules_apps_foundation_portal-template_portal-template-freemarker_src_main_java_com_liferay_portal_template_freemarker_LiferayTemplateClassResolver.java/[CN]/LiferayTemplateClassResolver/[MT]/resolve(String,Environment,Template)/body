{
  if (className.equals(Execute.class.getName()) || className.equals(ObjectConstructor.class.getName())) {
    throw new TemplateException("Instantiating " + className + " is not allowed in the "+ "template for security reasons",environment);
  }
  String[] restrictedClassNames=GetterUtil.getStringValues(_freemarkerEngineConfiguration.restrictedClasses());
  for (  String restrictedClassName : restrictedClassNames) {
    if (_match(restrictedClassName,className)) {
      throw new TemplateException("Instantiating " + className + " is not allowed in the "+ "template for security reasons",environment);
    }
  }
  boolean allowed=false;
  String[] allowedClasseNames=GetterUtil.getStringValues(_freemarkerEngineConfiguration.allowedClasses());
  for (  String allowedClassName : allowedClasseNames) {
    if (_match(allowedClassName,className)) {
      allowed=true;
      break;
    }
  }
  if (allowed) {
    try {
      ClassLoader[] wwhitelistedClassLoaders=_wwhitelistedClassloaders.toArray(new ClassLoader[_wwhitelistedClassloaders.size()]);
      ClassLoader[] classLoaders=ArrayUtil.append(wwhitelistedClassLoaders,ClassLoaderUtil.getContextClassLoader());
      ClassLoader wwhitelistedAggregateClassLoader=AggregateClassLoader.getAggregateClassLoader(classLoaders);
      return Class.forName(className,true,wwhitelistedAggregateClassLoader);
    }
 catch (    Exception e) {
      throw new TemplateException(e,environment);
    }
  }
  throw new TemplateException("Instantiating " + className + " is not allowed in the template "+ "for security reasons",environment);
}
