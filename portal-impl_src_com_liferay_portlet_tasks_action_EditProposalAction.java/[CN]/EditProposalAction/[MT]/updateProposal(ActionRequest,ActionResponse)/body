{
  long liveGroupId=ParamUtil.getLong(req,"liveGroupId");
  long proposalId=ParamUtil.getLong(req,"proposalId");
  String description=ParamUtil.getString(req,"description");
  int stage=ParamUtil.getInteger(req,"stage");
  int dueDateMonth=ParamUtil.getInteger(req,"dueDateMonth");
  int dueDateDay=ParamUtil.getInteger(req,"dueDateDay");
  int dueDateYear=ParamUtil.getInteger(req,"dueDateYear");
  int dueDateHour=ParamUtil.getInteger(req,"dueDateHour");
  int dueDateMinute=ParamUtil.getInteger(req,"dueDateMinute");
  String cmd=ParamUtil.getString(req,Constants.CMD);
  if (cmd.equals(Constants.ADD)) {
    long selPlid=ParamUtil.getLong(req,"selPlid");
    Layout layout=LayoutLocalServiceUtil.getLayout(selPlid);
    long classNameId=PortalUtil.getClassNameId(Layout.class.getName());
    long reviewerId=ParamUtil.getLong(req,"reviewerId");
    TasksProposalServiceUtil.addProposal(liveGroupId,layout.getName(),description,classNameId,layout.getPlid(),reviewerId,true,true);
  }
 else {
    long[] reviewerIds=StringUtil.split(ParamUtil.getString(req,"reviewerIds"),0L);
    long[] removeReviewerIds=StringUtil.split(ParamUtil.getString(req,"removeReviewerIds"),0L);
    TasksProposalServiceUtil.updateProposal(liveGroupId,proposalId,description,dueDateMonth,dueDateDay,dueDateYear,dueDateHour,dueDateMinute);
    TasksReviewServiceUtil.updateReviewers(liveGroupId,proposalId,stage,reviewerIds,removeReviewerIds);
  }
}
