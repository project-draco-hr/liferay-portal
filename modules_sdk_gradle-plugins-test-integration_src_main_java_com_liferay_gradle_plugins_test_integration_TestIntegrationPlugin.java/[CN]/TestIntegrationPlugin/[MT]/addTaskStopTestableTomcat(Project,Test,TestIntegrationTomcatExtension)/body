{
  final StopTestableTomcatTask stopTestableTomcatTask=GradleUtil.addTask(project,STOP_TESTABLE_TOMCAT_TASK_NAME,StopTestableTomcatTask.class);
  Action<Task> action=new Action<Task>(){
    @Override public void execute(    Task task){
      StopTestableTomcatTask setupTestableTomcatTask=(StopTestableTomcatTask)task;
      File binDir=setupTestableTomcatTask.getBinDir();
      _startedAppServersReentrantLock.lock();
      try {
        if (!_startedAppServerBinDirs.contains(binDir)) {
          if (_logger.isDebugEnabled()) {
            _logger.debug("Application server " + binDir + " is already stopped");
          }
          throw new StopExecutionException();
        }
        int originalCounter=_updateStartedAppServerStopCounters(binDir,false);
        if (originalCounter > 1) {
          if (_logger.isDebugEnabled()) {
            _logger.debug("Application server " + binDir + " cannot be stopped now, still "+ (originalCounter - 1)+ " to execute");
          }
          throw new StopExecutionException();
        }
      }
  finally {
        _startedAppServersReentrantLock.unlock();
      }
    }
  }
;
  stopTestableTomcatTask.doFirst(action);
  action=new Action<Task>(){
    @Override public void execute(    Task task){
      StopTestableTomcatTask setupTestableTomcatTask=(StopTestableTomcatTask)task;
      _startedAppServersReentrantLock.lock();
      try {
        _startedAppServerBinDirs.remove(setupTestableTomcatTask.getBinDir());
      }
  finally {
        _startedAppServersReentrantLock.unlock();
      }
    }
  }
;
  stopTestableTomcatTask.doLast(action);
  stopTestableTomcatTask.mustRunAfter(testIntegrationTask);
  stopTestableTomcatTask.setDescription("Stops the local Liferay Tomcat bundle.");
  stopTestableTomcatTask.setExecutable(getTomcatExecutableFileName("shutdown"));
  stopTestableTomcatTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);
  configureBaseAppServerTask(stopTestableTomcatTask,testIntegrationTomcatExtension);
  configureModuleFrameworkBaseDirSpec(stopTestableTomcatTask,testIntegrationTomcatExtension);
  Gradle gradle=project.getGradle();
  TaskExecutionGraph taskExecutionGraph=gradle.getTaskGraph();
  Closure<Void> closure=new Closure<Void>(null){
    @SuppressWarnings("unused") public void doCall(    TaskExecutionGraph taskExecutionGraph){
      if (taskExecutionGraph.hasTask(stopTestableTomcatTask)) {
        _startedAppServersReentrantLock.lock();
        try {
          _updateStartedAppServerStopCounters(stopTestableTomcatTask.getBinDir(),true);
        }
  finally {
          _startedAppServersReentrantLock.unlock();
        }
      }
    }
  }
;
  taskExecutionGraph.whenReady(closure);
  return stopTestableTomcatTask;
}
