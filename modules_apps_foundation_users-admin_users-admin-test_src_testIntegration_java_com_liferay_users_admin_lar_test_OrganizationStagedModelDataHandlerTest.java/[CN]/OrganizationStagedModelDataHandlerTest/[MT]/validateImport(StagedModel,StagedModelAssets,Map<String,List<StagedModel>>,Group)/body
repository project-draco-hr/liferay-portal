{
  Organization organization=OrganizationLocalServiceUtil.fetchOrganizationByUuidAndCompanyId(stagedModel.getUuid(),group.getCompanyId());
  validateAssets(organization,stagedModelAssets,group);
  List<StagedModel> addressDependentStagedModels=dependentStagedModelsMap.get(Address.class.getSimpleName());
  Assert.assertEquals(1,addressDependentStagedModels.size());
  Address address=(Address)addressDependentStagedModels.get(0);
  Address importedAddress=AddressLocalServiceUtil.fetchAddressByUuidAndCompanyId(address.getUuid(),group.getCompanyId());
  Assert.assertNotNull(importedAddress);
  Assert.assertEquals(organization.getOrganizationId(),importedAddress.getClassPK());
  List<StagedModel> emailAddressDependentStagedModels=dependentStagedModelsMap.get(EmailAddress.class.getSimpleName());
  Assert.assertEquals(1,emailAddressDependentStagedModels.size());
  EmailAddress emailAddress=(EmailAddress)emailAddressDependentStagedModels.get(0);
  EmailAddress importedEmailAddress=EmailAddressLocalServiceUtil.fetchEmailAddressByUuidAndCompanyId(emailAddress.getUuid(),group.getCompanyId());
  Assert.assertNotNull(importedEmailAddress);
  Assert.assertEquals(organization.getOrganizationId(),importedEmailAddress.getClassPK());
  List<OrgLabor> importedOrgLabors=OrgLaborLocalServiceUtil.getOrgLabors(organization.getOrganizationId());
  Assert.assertEquals(1,importedOrgLabors.size());
  OrgLabor importedOrgLabor=importedOrgLabors.get(0);
  Assert.assertEquals(organization.getOrganizationId(),importedOrgLabor.getOrganizationId());
  List<StagedModel> passwordPolicyDependentStagedModels=dependentStagedModelsMap.get(PasswordPolicy.class.getSimpleName());
  Assert.assertEquals(1,passwordPolicyDependentStagedModels.size());
  PasswordPolicy passwordPolicy=(PasswordPolicy)passwordPolicyDependentStagedModels.get(0);
  PasswordPolicyRel importedPasswordPolicyRel=PasswordPolicyRelLocalServiceUtil.fetchPasswordPolicyRel(organization.getModelClassName(),organization.getOrganizationId());
  Assert.assertNotNull(importedPasswordPolicyRel);
  Assert.assertEquals(passwordPolicy.getPasswordPolicyId(),importedPasswordPolicyRel.getPasswordPolicyId());
  List<StagedModel> phoneDependentStagedModels=dependentStagedModelsMap.get(Phone.class.getSimpleName());
  Assert.assertEquals(1,phoneDependentStagedModels.size());
  Phone phone=(Phone)phoneDependentStagedModels.get(0);
  Phone importedPhone=PhoneLocalServiceUtil.fetchPhoneByUuidAndCompanyId(phone.getUuid(),group.getCompanyId());
  Assert.assertNotNull(importedPhone);
  Assert.assertEquals(organization.getOrganizationId(),importedPhone.getClassPK());
  List<StagedModel> websiteDependentStagedModels=dependentStagedModelsMap.get(Website.class.getSimpleName());
  Assert.assertEquals(1,websiteDependentStagedModels.size());
  Website website=(Website)websiteDependentStagedModels.get(0);
  Website importedWebsite=WebsiteLocalServiceUtil.fetchWebsiteByUuidAndCompanyId(website.getUuid(),group.getCompanyId());
  Assert.assertNotNull(importedWebsite);
  Assert.assertEquals(organization.getOrganizationId(),importedWebsite.getClassPK());
}
