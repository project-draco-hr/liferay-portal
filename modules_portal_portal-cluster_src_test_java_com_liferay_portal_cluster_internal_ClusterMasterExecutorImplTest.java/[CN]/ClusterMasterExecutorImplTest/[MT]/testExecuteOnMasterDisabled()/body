{
  ClusterMasterExecutorImpl clusterMasterExecutorImpl=createMasterExecutorImpl(false);
  clusterMasterExecutorImpl.setClusterExecutor(new MockClusterExecutor(false));
  clusterMasterExecutorImpl.activate();
  Assert.assertFalse(clusterMasterExecutorImpl.isEnabled());
  String timeString=String.valueOf(System.currentTimeMillis());
  MethodHandler methodHandler=new MethodHandler(_TEST_METHOD,timeString);
  try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.WARNING)){
    NoticeableFuture<String> noticeableFuture=clusterMasterExecutorImpl.executeOnMaster(methodHandler);
    Assert.assertSame(timeString,noticeableFuture.get());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertEquals(1,logRecords.size());
    LogRecord logRecord=logRecords.get(0);
    Assert.assertEquals("Executing on the local node because the cluster master " + "executor is disabled",logRecord.getMessage());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.OFF)){
    NoticeableFuture<String> noticeableFuture=clusterMasterExecutorImpl.executeOnMaster(methodHandler);
    Assert.assertSame(timeString,noticeableFuture.get());
    List<LogRecord> logRecords=captureHandler.getLogRecords();
    Assert.assertTrue(logRecords.isEmpty());
  }
   try (CaptureHandler captureHandler=JDKLoggerTestUtil.configureJDKLogger(ClusterMasterExecutorImpl.class.getName(),Level.WARNING)){
    try {
      clusterMasterExecutorImpl.executeOnMaster(null);
      Assert.fail();
    }
 catch (    SystemException se) {
      Throwable throwable=se.getCause();
      Assert.assertSame(NullPointerException.class,throwable.getClass());
      List<LogRecord> logRecords=captureHandler.getLogRecords();
      Assert.assertEquals(1,logRecords.size());
      LogRecord logRecord=logRecords.get(0);
      Assert.assertEquals("Executing on the local node because the cluster master " + "executor is disabled",logRecord.getMessage());
    }
  }
 }
