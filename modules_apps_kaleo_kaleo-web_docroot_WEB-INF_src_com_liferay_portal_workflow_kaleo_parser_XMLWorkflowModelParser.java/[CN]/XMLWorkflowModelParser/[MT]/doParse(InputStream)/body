{
  Document document=SAXReaderUtil.read(inputStream,_validate);
  Element rootElement=document.getRootElement();
  String name=rootElement.elementText("name");
  String description=rootElement.elementText("description");
  int version=GetterUtil.getInteger(rootElement.elementText("version"));
  Definition definition=new Definition(name,description,document.formattedString(),version);
  List<Element> conditionElements=rootElement.elements("condition");
  for (  Element conditionElement : conditionElements) {
    Condition condition=parseCondition(conditionElement);
    definition.addNode(condition);
  }
  List<Element> forkElements=rootElement.elements("fork");
  for (  Element forkElement : forkElements) {
    Fork fork=parseFork(forkElement);
    definition.addNode(fork);
  }
  List<Element> joinElements=rootElement.elements("join");
  for (  Element joinElement : joinElements) {
    Join join=parseJoin(joinElement);
    definition.addNode(join);
  }
  List<Element> joinXorElements=rootElement.elements("join-xor");
  for (  Element joinXorElement : joinXorElements) {
    JoinXor joinXor=parseJoinXor(joinXorElement);
    definition.addNode(joinXor);
  }
  List<Element> stateElements=rootElement.elements("state");
  for (  Element stateElement : stateElements) {
    State state=parseState(stateElement);
    definition.addNode(state);
  }
  List<Element> taskElements=rootElement.elements("task");
  for (  Element taskElement : taskElements) {
    Task task=parseTask(taskElement);
    definition.addNode(task);
  }
  parseTransitions(definition,conditionElements,forkElements,joinElements,joinXorElements,stateElements,taskElements);
  return definition;
}
