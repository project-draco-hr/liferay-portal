{
  long pk=RandomTestUtil.nextLong();
  AnnouncementsFlag newAnnouncementsFlag=_persistence.create(pk);
  newAnnouncementsFlag.setUserId(RandomTestUtil.nextLong());
  newAnnouncementsFlag.setCreateDate(RandomTestUtil.nextDate());
  newAnnouncementsFlag.setEntryId(RandomTestUtil.nextLong());
  newAnnouncementsFlag.setValue(RandomTestUtil.nextInt());
  _models.add(_persistence.update(newAnnouncementsFlag));
  AnnouncementsFlag existingAnnouncementsFlag=_persistence.findByPrimaryKey(newAnnouncementsFlag.getPrimaryKey());
  Assert.assertEquals(existingAnnouncementsFlag.getFlagId(),newAnnouncementsFlag.getFlagId());
  Assert.assertEquals(existingAnnouncementsFlag.getUserId(),newAnnouncementsFlag.getUserId());
  Assert.assertEquals(Time.getShortTimestamp(existingAnnouncementsFlag.getCreateDate()),Time.getShortTimestamp(newAnnouncementsFlag.getCreateDate()));
  Assert.assertEquals(existingAnnouncementsFlag.getEntryId(),newAnnouncementsFlag.getEntryId());
  Assert.assertEquals(existingAnnouncementsFlag.getValue(),newAnnouncementsFlag.getValue());
}
