{
  String[] tagsEntries=context.getTagsEntries(BookmarksEntry.class,entry.getPrimaryKeyObj());
  Long folderId=(Long)folderPKs.get(new Long(entry.getFolderId()));
  boolean newParentFolder=false;
  if (folderId == null) {
    folderId=new Long(entry.getFolderId());
  }
 else {
    newParentFolder=true;
  }
  try {
    if (folderId.longValue() != BookmarksFolderImpl.DEFAULT_PARENT_FOLDER_ID) {
      BookmarksFolderUtil.findByPrimaryKey(folderId.longValue());
    }
    if ((BookmarksEntryUtil.fetchByPrimaryKey(entry.getPrimaryKey()) == null) || newParentFolder) {
      boolean addCommunityPermissions=true;
      boolean addGuestPermissions=true;
      BookmarksEntryLocalServiceUtil.addEntry(entry.getUserId(),folderId.longValue(),entry.getName(),entry.getUrl(),entry.getComments(),tagsEntries,addCommunityPermissions,addGuestPermissions);
    }
 else {
      TagsAssetLocalServiceUtil.updateAsset(entry.getUserId(),BookmarksEntry.class.getName(),entry.getPrimaryKey(),tagsEntries);
      entry.setFolderId(folderId.longValue());
      BookmarksEntryUtil.update(entry,true);
    }
  }
 catch (  NoSuchFolderException nsfe) {
    _log.error("Could not find the parent folder for entry " + entry.getEntryId());
  }
}
