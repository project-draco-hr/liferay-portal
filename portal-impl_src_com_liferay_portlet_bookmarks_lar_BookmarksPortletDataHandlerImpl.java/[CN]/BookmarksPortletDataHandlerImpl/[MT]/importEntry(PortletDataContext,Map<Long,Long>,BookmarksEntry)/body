{
  long userId=context.getUserId(entry.getUserUuid());
  long folderId=MapUtil.getLong(folderPKs,entry.getFolderId(),entry.getFolderId());
  String[] assetTagNames=null;
  if (context.getBooleanParameter(_NAMESPACE,"tags")) {
    assetTagNames=context.getAssetTagNames(BookmarksEntry.class,entry.getEntryId());
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setAssetTagNames(assetTagNames);
  if ((folderId != BookmarksFolderConstants.DEFAULT_PARENT_FOLDER_ID) && (folderId == entry.getFolderId())) {
    String path=getImportFolderPath(context,folderId);
    BookmarksFolder folder=(BookmarksFolder)context.getZipEntryAsObject(path);
    importFolder(context,folderPKs,folder);
    folderId=MapUtil.getLong(folderPKs,entry.getFolderId(),entry.getFolderId());
  }
  BookmarksEntry existingEntry=null;
  try {
    BookmarksFolder folder=BookmarksFolderUtil.findByPrimaryKey(folderId);
    long groupId=folder.getGroupId();
    if (context.getDataStrategy().equals(PortletDataHandlerKeys.DATA_STRATEGY_MIRROR)) {
      try {
        existingEntry=BookmarksEntryUtil.findByUUID_G(entry.getUuid(),context.getGroupId());
        BookmarksEntryLocalServiceUtil.updateEntry(userId,existingEntry.getEntryId(),groupId,folderId,entry.getName(),entry.getUrl(),entry.getComments(),serviceContext);
      }
 catch (      NoSuchEntryException nsee) {
        BookmarksEntryLocalServiceUtil.addEntry(entry.getUuid(),userId,groupId,folderId,entry.getName(),entry.getUrl(),entry.getComments(),serviceContext);
      }
    }
 else {
      BookmarksEntryLocalServiceUtil.addEntry(null,userId,groupId,folderId,entry.getName(),entry.getUrl(),entry.getComments(),serviceContext);
    }
  }
 catch (  NoSuchFolderException nsfe) {
    _log.error("Could not find the parent folder for entry " + entry.getEntryId());
  }
}
