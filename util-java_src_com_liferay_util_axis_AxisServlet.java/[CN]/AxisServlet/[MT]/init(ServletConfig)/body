{
  _servletConfig=servletConfig;
  StringBundler sb=new StringBundler(9);
  sb.append("<complexType abstract=\"true\" name=\"OrderByComparator\">");
  sb.append("<sequence><element name=\"ascending\" ");
  sb.append("type=\"xsd:boolean\"/><element name=\"orderBy\" ");
  sb.append("nillable=\"true\" type=\"soapenc:string\"/><element ");
  sb.append("name=\"orderByConditionFields\" nillable=\"true\" ");
  sb.append("type=\"impl:ArrayOf_xsd_string\"/><element ");
  sb.append("name=\"orderByFields\" nillable=\"true\" ");
  sb.append("type=\"impl:ArrayOf_xsd_string\"/></sequence>");
  sb.append("</complexType>");
  _correctOrderByComparator=sb.toString();
  sb=new StringBundler(5);
  sb.append("<complexType name=\"ArrayOf_xsd_long\"><complexContent>");
  sb.append("<restriction base=\"soapenc:Array\"><attribute ");
  sb.append("ref=\"soapenc:arrayType\" ");
  sb.append("wsdl:arrayType=\"soapenc:long[]\"/></restriction>");
  sb.append("</complexContent></complexType>");
  _correctLongArray=sb.toString();
  sb=new StringBundler(5);
  sb.append("<complexType name=\"ArrayOf_xsd_string\"><complexContent>");
  sb.append("<restriction base=\"soapenc:Array\"><attribute ");
  sb.append("ref=\"soapenc:arrayType\" ");
  sb.append("wsdl:arrayType=\"soapenc:string[]\"/></restriction>");
  sb.append("</complexContent></complexType>");
  _correctStringArray=sb.toString();
  sb=new StringBundler(2);
  sb.append("<complexType name=\"OrderByComparator\"><simpleContent>");
  sb.append("<extension/></simpleContent></complexType>");
  _incorrectOrderByComparator=sb.toString();
  sb=new StringBundler(2);
  sb.append("<complexType name=\"ArrayOf_xsd_long\"><simpleContent>");
  sb.append("<extension/></simpleContent></complexType>");
  _incorrectLongArray=sb.toString();
  sb=new StringBundler(2);
  sb.append("<complexType name=\"ArrayOf_xsd_string\"><simpleContent>");
  sb.append("<extension/></simpleContent></complexType>");
  _incorrectStringArray=sb.toString();
  if (ServerDetector.isResin() || ServerDetector.isWebLogic()) {
    doInit();
  }
 else {
    InitThread initThread=new InitThread();
    initThread.start();
    try {
      initThread.join();
    }
 catch (    InterruptedException ie) {
      throw new ServletException(ie);
    }
    Exception e=initThread.getException();
    if (e != null) {
      if (e instanceof ServletException) {
        throw (ServletException)e;
      }
 else {
        throw new ServletException(e);
      }
    }
  }
}
